7	public static int compareBytes ( byte [ ] b1 , int s1 , int l1 , byte [ ] b2 , int s2 , int l2 ) { return WritableComparator . compareBytes ( b1 , s1 , l1 , b2 , s2 , l2 ) ; }
23	public boolean isGlobalScope ( ) { return _BOOL ; }
42	public UsersGetFollowersQueryWithFields count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
57	public static SM_SYSTEM_MESSAGE STR_MSG_PET_CONDITION_UP_02 ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
59	public boolean isTransparent ( ) { return transparent ; }
60	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR newfriend \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
79	protected boolean isXml ( HttpServletRequest request ) { String type = request . getContentType ( ) ; type = ! StringUtils . isEmpty ( type ) ? type : MediaType . APPLICATION_JSON_VALUE ; if ( request . getPathInfo ( ) . endsWith ( _CHAR . xml _CHAR ) ) { type = MediaType . APPLICATION_XML_VALUE ; } return isCompatibleWith ( type , MediaType . APPLICATION_XML ) ; }
115	public boolean isSpawned ( ) { return isSpawned ; }
122	protected void resetCommon ( ) throws XNIException { int count = fCommonComponents . size ( ) ; for ( int i = _NUM ; i < count ; i ++ ) { XMLComponent c = ( XMLComponent ) fCommonComponents . get ( i ) ; c . reset ( this ) ; } }
128	public GroupsEditQuery eventFinishDate ( Integer value ) { return unsafeParam ( _CHAR event_finish_date _CHAR , value ) ; }
143	public void removePassiveEffect ( int skillid ) { for ( Effect effect : passiveEffectMap . values ( ) ) { if ( effect . getSkillId ( ) == skillid ) { effect . endEffect ( ) ; } } }
147	public void removeOnItemTouchListener ( RecyclerView . OnItemTouchListener listener ) { mRecycler . removeOnItemTouchListener ( listener ) ; }
153	private void createMJPEGFormat ( ) { videoFormat = new VideoFormat ( VideoFormat . MJPG , new Dimension ( mip . getMWidth ( ) , mip . getMHeight ( ) ) , Format . NOT_SPECIFIED , Format . byteArray , mip . getFPS ( ) ) ; }
157	public DistributedLogClientBuilder clientBuilder ( ClientBuilder builder ) { DistributedLogClientBuilder newBuilder = newBuilder ( this ) ; newBuilder . _clientBuilder = builder ; return newBuilder ; }
171	public void collapse ( DefaultMutableTreeNode v ) { if ( v == _NULL ) v = this . root ; for ( Enumeration descendants = v . depthFirstEnumeration ( ) ; descendants . hasMoreElements ( ) ; ) { v = ( DefaultMutableTreeNode ) descendants . nextElement ( ) ; this . tree . collapsePath ( new TreePath ( v . getPath ( ) ) ) ; } }
177	public EntityQuery from ( String entityName ) { this . entityName = entityName ; this . dynamicViewEntity = _NULL ; return this ; }
205	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR WEEK_FORE_CAST \ _CHAR ( _CHAR + _CHAR \ _CHAR AREAID \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR WEATHER_DATE \ _CHAR INTEGER , _CHAR + _CHAR \ _CHAR WEATHER_CONDITION_START \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR WEATHER_CONDITION_END \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR TEMP_H \ _CHAR INTEGER , _CHAR + _CHAR \ _CHAR TEMP_L \ _CHAR INTEGER , _CHAR + _CHAR \ _CHAR FX \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR FJ \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR RAIN_PER_CENT \ _CHAR INTEGER ) ; _CHAR ) ; }
211	public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_INTERVAL_TO_ME ( int num0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , num0 ) ; }
216	public ResourcesPoet addDrawable ( String name , String value ) { Element bool = document . createElement ( _CHAR drawable _CHAR ) ; bool . setAttribute ( _CHAR name _CHAR , name ) ; bool . appendChild ( document . createTextNode ( value ) ) ; resourceElement . appendChild ( bool ) ; return this ; }
218	public void removeTransactionAfterEnd ( XtnEntry xtnEntry ) { try { xtnEntry . lock ( ) ; ( ( ConcurrentHashMap < ServerTransaction , XtnEntry > ) getXtnTable ( ) ) . remove ( xtnEntry . m_Transaction , xtnEntry ) ; m_TimedXtns . remove ( xtnEntry . m_Transaction ) ; } finally { xtnEntry . unlock ( ) ; } }
235	public static ExpirationDatePickerDialogFragment newInstance ( OCFile file , long chosenDateInMillis ) { Bundle arguments = new Bundle ( ) ; arguments . putParcelable ( ARG_FILE , file ) ; arguments . putLong ( ARG_CHOSEN_DATE_IN_MILLIS , chosenDateInMillis ) ; ExpirationDatePickerDialogFragment dialog = new ExpirationDatePickerDialogFragment ( ) ; dialog . setArguments ( arguments ) ; return dialog ; }
245	public void clearAll ( ) { nodeToPreds . clear ( ) ; nodeToSuccs . clear ( ) ; heads . clear ( ) ; tails . clear ( ) ; }
251	@ Override public List < UserRole > searchUserRole ( UserRole userRole ) { return sessionTemplate . selectList ( NAMESPACE + _CHAR . searchUserRole _CHAR , userRole ) ; }
269	public String convertToLowerCase ( String table ) { return table . toLowerCase ( ) ; }
302	public GiftsGetQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
313	public double min ( ) { return m_min ; }
336	@ Override public void addSLDOutputListener ( SLDOutputInterface sldOutput ) { }
348	public static SM_SYSTEM_MESSAGE STR_COMBINE_START ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
446	public RequestHandle delete ( Context context , String url , ResponseHandlerInterface responseHandler ) { final HttpDelete delete = new HttpDelete ( url ) ; return sendRequest ( httpClient , httpContext , delete , _NULL , responseHandler , context ) ; }
476	@ After public void afterTest ( ) { removeTestData ( ) ; }
498	public void clear ( ) { log . d ( LOG_TAG , _CHAR Clear Belvedere cache _CHAR ) ; belvedereStorage . clearStorage ( context ) ; }
562	private boolean shouldIgnoreSelection ( ) { return ignoreSelection ; }
565	@ Provides @ Singleton ServiceRegistry provideServiceRegistry ( @ Global CuratorFramework curator , LifeCycleRegistry lifeCycle , MetricRegistry metricRegistry ) { return lifeCycle . manage ( new ZooKeeperServiceRegistry ( curator , metricRegistry ) ) ; }
571	public static ID newInstance ( ) { return new ID ( randomUUID ( ) ) ; }
575	public NewsfeedSaveListQuery saveList ( UserActor actor , String title ) { return new NewsfeedSaveListQuery ( getClient ( ) , actor , title ) ; }
618	protected void applyParseHandlers ( ) { sequenceFlows = new HashMap < String , SequenceFlow > ( ) ; for ( Process process : bpmnModel . getProcesses ( ) ) { currentProcess = process ; if ( process . isExecutable ( ) ) { bpmnParserHandlers . parseElement ( this , process ) ; } } }
641	public boolean isInUse ( ) { return getKmTarget ( ) > api . getPlayerProfile ( ) . getStats ( ) . getKmWalked ( ) ; }
682	public static SM_SYSTEM_MESSAGE STR_MSG_SELL_ITEM ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
689	public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_BARRIER_ATTACKED ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
706	private void sortBrokerItems ( BrokerItem [ ] brokerItems , int sortType ) { Arrays . sort ( brokerItems , BrokerItem . getComparatoryByType ( sortType ) ) ; }
732	@ Override public synchronized void close ( ) { if ( mIsInitializing ) { throw new IllegalStateException ( _CHAR Closed during initialization _CHAR ) ; } if ( mDatabase != _NULL && mDatabase . isOpen ( ) ) { mDatabase . close ( ) ; mDatabase = _NULL ; } }
734	public void clear ( ) { this . n = _NUM ; minImpl . clear ( ) ; maxImpl . clear ( ) ; sumImpl . clear ( ) ; sumOfLogsImpl . clear ( ) ; sumOfSquaresImpl . clear ( ) ; secondMoment . clear ( ) ; }
754	private void clearAllSnapshots ( ) { this . snapshots . clear ( ) ; while ( this . mnuSnapshot . getItemCount ( ) > _NUM ) { this . mnuSnapshot . remove ( _NUM ) ; } }
809	public void loadAttributeData ( String fileName ) throws IOException { InputStream ins = ResourceManager . getFileAsStream ( fileName ) ; loadAttributeData ( ins ) ; ins . close ( ) ; }
818	private int computeSize ( Map < Integer , Integer [ ] > integerMap ) { int count = _NUM ; for ( Integer taxonId : integerMap . keySet ( ) ) { Integer value = integerMap . get ( taxonId ) [ _NUM ] ; if ( value != _NULL ) count += value ; } return count ; }
834	public static final MediaFormat createVideoFormat ( String mime , int width , int height ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_WIDTH , width ) ; format . setInteger ( KEY_HEIGHT , height ) ; return format ; }
839	public void begin_Attack ( int aKind ) { if ( isDead || ( sKind == _NUM && sNum == _NUM ) ) return ; a_Kind = aKind ; GetPath ( a_Kind + _NUM ) ; status = ATTACK ; }
882	public static DataFrame normalize ( DataFrame dataFrame , List < String > skipColumns ) { return normalize ( dataFrame , _NUM , _NUM , skipColumns ) ; }
892	void reportNewIdleState ( boolean isIdle ) { synchronized ( mTrackedTasks ) { for ( JobStatus task : mTrackedTasks ) { task . idleConstraintSatisfied . set ( isIdle ) ; } } mStateChangedListener . onControllerStateChanged ( ) ; }
925	public int numberOfObjects ( ) { return table . getGrid ( ) . getRowCount ( ) * table . getGrid ( ) . getColumnCount ( ) ; }
929	public DatabaseGetCountriesQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
934	public static File renameFile ( File file , String newName ) { String absolutePath = file . getAbsolutePath ( ) ; String fileName = file . getName ( ) ; String newAbsolutePath = absolutePath . substring ( _NUM , absolutePath . lastIndexOf ( fileName ) ) + newName ; return new File ( newAbsolutePath ) ; }
1013	public void click ( MenuOption menuOption ) { toolbar . findElement ( By . xpath ( String . format ( _CHAR .// button [ text ( ) = % s ] '' , XpathUtils . quote ( menuOption . getLabel ( ) ) ) ) ) . click ( ) ; }
1038	@ Override public void validate ( ) { try { getLock ( ) . writeLock ( ) . lock ( ) ; invalidQualityStates . clear ( ) ; } finally { getLock ( ) . writeLock ( ) . unlock ( ) ; } }
1054	@ Override public void endElement ( QName element , Augmentations augs ) throws XNIException { }
1085	@ SuppressWarnings ( _CHAR unchecked _CHAR ) private T [ ] buildArray ( final int length ) { return ( T [ ] ) Array . newInstance ( field . getRuntimeClass ( ) , length ) ; }
1119	private String htmlDecode ( String content ) { return Jsoup . parse ( content ) . text ( ) ; }
1205	public ResourcesPoet addStyle ( String name , @ Nullable String parentRef ) { return addStyle ( name , parentRef , _NULL ) ; }
1222	@ Override public void start ( ) { if ( ! running ) { running = _BOOL ; notifyUpdateThreadHandler . start ( ) ; statusConfirmationHandler . start ( ) ; } }
1241	public PhotosGetAlbumsQuery needSystem ( Boolean value ) { return unsafeParam ( _CHAR need_system _CHAR , value ) ; }
1262	public static Executor createTaskDistributor ( ) { return Executors . newCachedThreadPool ( createThreadFactory ( Thread . NORM_PRIORITY , _CHAR uil - pool - d - _CHAR ) ) ; }
1279	@ Override public boolean isPanelEnabled ( ) { if ( groupCheckbox == _NULL ) { return _BOOL ; } else { return groupCheckbox . isSelected ( ) ; } }
1308	public void resetConfiguration ( ) { setRainTime ( - _NUM ) ; setFadeOutTime ( - _NUM ) ; setSnowTime ( - _NUM ) ; setRainParticles ( - _NUM ) ; setSnowParticles ( - _NUM ) ; }
1312	public < T extends Fragment > T into ( T fragment ) { fragment . setArguments ( get ( ) ) ; return fragment ; }
1358	public void pause ( ) { isPaused = _BOOL ; }
1359	public boolean isAcontains ( int taxon ) { return A . get ( taxon ) ; }
1400	public void onStopMove ( ) { notifyAIOnMove ( ) ; }
1430	public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_GET_COIN_IDARENA ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
1448	public void fail ( ) { currentTest . get ( ) . fail ( ) ; }
1461	public boolean playWave ( AudioPlayer player , Utterance utterance ) { return playWaveSamples ( player , utterance . getSpeakable ( ) , getNumberOfSamples ( ) * _NUM ) ; }
1496	public static void f ( String tag , String msg , Throwable throwable ) { if ( sLevel > LEVEL_FATAL ) { return ; } Log . wtf ( tag , msg , throwable ) ; }
1497	public void lockUserInput ( ) { locked = _BOOL ; tabbedPane . setEnabled ( _BOOL ) ; setCursor ( Cursor . getPredefinedCursor ( Cursor . WAIT_CURSOR ) ) ; statusBar . setText2 ( _CHAR Busy ... _CHAR ) ; getCommandManager ( ) . setEnableCritical ( _BOOL ) ; }
1514	@ Override public void createApplication ( Application . Name applicationName ) { }
1543	public GossipDataMessage findPerNodeData ( String nodeId , String key ) { return getGossipManager ( ) . findPerNodeGossipData ( nodeId , key ) ; }
1546	public void remove ( LegionMemberEx legionMember ) { legionMemberById . remove ( legionMember . getObjectId ( ) ) ; legionMemberExById . remove ( legionMember . getObjectId ( ) ) ; legionMemberExByName . remove ( legionMember . getName ( ) ) ; }
1547	@ Override public void run ( ) { time . increase ( ) ; }
1563	@ Override public BlockVector clone ( ) { return ( BlockVector ) super . clone ( ) ; }
1595	public BaseViewHolder linkify ( int viewId ) { TextView view = getView ( viewId ) ; Linkify . addLinks ( view , Linkify . ALL ) ; return this ; }
1626	public void showMetrics ( ) { timer . show ( _CHAR NullAudioPlayer _CHAR ) ; }
1680	public static SM_SYSTEM_MESSAGE STR_DUEL_HE_REJECT_DUEL ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
1682	public void delete ( String id ) { log . debug ( _CHAR Request to delete Pet : { } _CHAR , id ) ; petRepository . delete ( UUID . fromString ( id ) ) ; }
1702	public boolean isTransformationApplied ( ) { return applyTransformation ; }
1704	public static void f ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_FATAL ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . wtf ( tag , msg ) ; }
1711	public void clear ( ) { args = _NULL ; }
1726	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR REAL_WEATHER \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
1729	public GroupsGetInvitesQueryWithExtended count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
1775	private boolean containsPan ( ) { return component . containsGesture ( HighLevelGesture . PAN_START ) || component . containsGesture ( HighLevelGesture . PAN_MOVE ) || component . containsGesture ( HighLevelGesture . PAN_END ) ; }
1853	public static Object readObject ( InputStream in ) throws IOException , ClassNotFoundException { ObjectInputStreamExt objIn = new ObjectInputStreamExt ( in ) ; Object result = objIn . readObject ( ) ; return result ; }
1871	public static X509Certificate decodeCertificate ( byte [ ] certificateBytes ) throws UaException { Preconditions . checkNotNull ( certificateBytes , _CHAR certificateBytes can not be _NULL _CHAR ) ; return decodeCertificate ( new ByteArrayInputStream ( certificateBytes ) ) ; }
1873	public void loadListener ( String serverKey ) throws GenericServiceException { Server server = servers . get ( serverKey ) ; if ( server == _NULL ) throw new GenericServiceException ( _CHAR No listener found with that serverKey . '' ) ; loadListener ( serverKey , server ) ; }
1882	@ Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_about ) ; }
1887	private static boolean isMatch ( String left , String right ) { left = _NULL != left ? left : _CHAR _CHAR ; right = _NULL != right ? right : _CHAR _CHAR ; return StringUtils . getJaroWinklerDistance ( left , right ) > _NUM . _NUM ; }
1929	@ Override public final void validate ( ) throws ConfigurationException { if ( opcItemName == _NULL ) { throw new ConfigurationException ( ConfigurationException . INVALID_PARAMETER_VALUE , _CHAR Parameter \ _CHAR opcItemName \ _CHAR must not be _NULL _CHAR ) ; } }
1943	public void stopPlayingAudio ( String id ) { AudioPlayer audio = this . players . get ( id ) ; if ( audio != _NULL ) { audio . stopPlaying ( ) ; } }
1945	@ Override public void endDocument ( Augmentations augs ) throws XNIException { if ( fDocumentHandler != _NULL && ! fOnlyPassPrefixMappingEvents ) { fDocumentHandler . endDocument ( augs ) ; } }
1946	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR ZHISHU \ _CHAR ( _CHAR + _CHAR \ _CHAR AREAID \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR NAME \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR LEVEL \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR TEXT \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR DETAIL \ _CHAR TEXT ) ; _CHAR ) ; }
1973	public static void exec ( Runnable task ) { if ( isCurrent ( ) ) { task . run ( ) ; } else { nextTick ( task ) ; } }
1979	public void cancelAllTasks ( boolean mayInterruptIfRunning ) { for ( SingleAsyncTask singleAsyncTask : mSingleAsyncTaskList ) { cancelTask ( singleAsyncTask , mayInterruptIfRunning ) ; } mSingleAsyncTaskList . clear ( ) ; }
1991	public static Value binopRhs ( Unit unit ) { return binop ( rhs ( unit ) ) ; }
2007	public IDirectableViewer addViewer ( IDirectableViewer viewer ) { if ( viewer instanceof MainViewer ) this . viewer = ( MainViewer ) viewer ; viewers . add ( viewer ) ; directorListeners . add ( viewer ) ; ProjectManager . projectWindowChanged ( this , viewer , _BOOL ) ; return viewer ; }
2063	public boolean isOk ( ) { return ok ; }
2104	public static void registerComponent ( String resourceType , String descriptionFactoryLink , Class < ? extends ResourceState > descriptionClass , String stateFactoryLink , Class < ? extends ResourceState > stateClass ) { registerComponent ( resourceType , descriptionFactoryLink , descriptionClass , stateFactoryLink , stateClass , stateClass ) ; }
2204	public ResourcesPoet addComment ( String comment ) { Comment commentNode = document . createComment ( comment ) ; resourceElement . appendChild ( commentNode ) ; return this ; }
2214	public NotesGetCommentsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
2248	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR ZHISHU \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
2287	public static void f ( String tag , String msg ) { if ( sLevel > LEVEL_FATAL ) { return ; } Log . wtf ( tag , msg ) ; }
2293	@ Override public void onReset ( ) { if ( this . status == AccelListener . RUNNING ) { this . stop ( ) ; } }
2324	public boolean isCellEditable ( int row , int column ) { return _BOOL ; }
2326	protected CharArrayBuffer initBuffer ( CharArrayBuffer buffer ) { if ( buffer != _NULL ) { buffer . clear ( ) ; } else { buffer = new CharArrayBuffer ( _NUM ) ; } return buffer ; }
2336	@ Override public void error ( SAXParseException e ) throws SAXException { throw e ; }
2370	public void resetFocus ( ScheduledCommand command ) { command . execute ( ) ; }
2388	public long last ( ) { return _NUM ; }
2398	public void login ( CredentialProvider credentialProvider ) throws LoginFailedException , RemoteServerException { if ( credentialProvider == _NULL ) { throw new NullPointerException ( _CHAR Credential Provider is _NULL _CHAR ) ; } this . credentialProvider = credentialProvider ; startTime = currentTimeMillis ( ) ; playerProfile = new PlayerProfile ( this ) ; settings = new Settings ( this ) ; inventories = new Inventories ( this ) ; initialize ( ) ; }
2449	@ Override public void addSLDOutputListener ( SLDOutputInterface sldOutput ) { sldOutputList . add ( sldOutput ) ; }
2452	public < T > Every < T > every ( Task < T > task ) { return new Every < > ( this . executor_ , task ) ; }
2490	private void giveUpAudioFocus ( ) { if ( mAudioFocus == AudioFocus . FOCUS && mAudioManager != _NULL && AudioManager . AUDIOFOCUS_REQUEST_GRANTED == mAudioManager . abandonAudioFocus ( this ) ) { mAudioFocus = AudioFocus . NO_FOCUS ; } }
2522	protected boolean hasNextLine ( ) { return pushedBackLine != _NULL || iterator . hasNext ( ) ; }
2571	public static SM_SYSTEM_MESSAGE STR_MSG_PERSONAL_SHOP_SELL_ITEM ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
2597	public VideoGetCommentsQueryWithExtended count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
2630	public static void initFileMgr ( String dirName ) { fileMgr = new FileMgr ( dirName ) ; }
2647	public void removeFirstEntry ( ) { this . announcementList . remove ( this . announcementList . firstEntry ( ) . getKey ( ) ) ; }
2657	public void next ( ) { nextButton . click ( ) ; }
2658	public boolean canEvolve ( ) { return ! EvolutionInfo . isFullyEvolved ( getPokemonId ( ) ) && ( getCandy ( ) >= getCandiesToEvolve ( ) ) ; }
2660	@ Override public LeafNode locateLeaf ( DataType key , boolean findFirst ) { return _NULL ; }
2673	public void addMatchBlocks ( SortedSet < IMatchBlock > matchBlocks ) { setMatchBlocks ( matchBlocks . toArray ( new IMatchBlock [ matchBlocks . size ( ) ] ) ) ; }
2679	public static void v ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . v ( tag , msg ) ; }
2719	public void removeGroup ( Group group ) throws ObjectLacksException { removeGroup ( group . getName ( ) ) ; }
2745	private static boolean npcCanExpandLevel ( WarehouseExpandTemplate clist , int level ) { return clist . contains ( level ) ; }
2778	public boolean isEdgeVector ( int edgeIndex ) { String edgeValue = getFeature ( edgeIndex ) . toString ( ) ; return ( ! edgeValue . equals ( FeatureDefinition . NULLVALUE ) ) ; }
2795	public static BufferedImage resizeImage ( Image image ) { BufferedImage result = new BufferedImage ( _NUM , _NUM , BufferedImage . TYPE_INT_ARGB ) ; Graphics2D graphics = result . createGraphics ( ) ; graphics . drawImage ( image , _NUM , _NUM , _NUM , _NUM , _NULL ) ; graphics . dispose ( ) ; return result ; }
2797	private void removeExtentEntry ( ) { extentModel . removeEntries ( extentTable . getSelectionModel ( ) . getMinSelectionIndex ( ) , extentTable . getSelectionModel ( ) . getMaxSelectionIndex ( ) ) ; removeExtentButton . setEnabled ( _BOOL ) ; }
2810	public void write ( byte b [ ] , int off , int len ) throws IOException { raf . write ( b , off , len ) ; }
2847	public static String join ( Object [ ] elements ) { return ( join ( elements , _CHAR _CHAR ) ) ; }
2852	protected void startResetExpiredJobsThread ( ) { if ( resetExpiredJobThread == _NULL ) { resetExpiredJobThread = new Thread ( resetExpiredJobsRunnable ) ; } resetExpiredJobThread . start ( ) ; }
2862	private boolean isOptionDisabled ( UrlFilterRuleOption option ) { loadRuleProperties ( ) ; return disabledOptions != _NULL && disabledOptions . contains ( option ) ; }
2876	public static String addFileExtensionSeparator ( String fileExtension ) { return _CHAR . _CHAR + fileExtension ; }
2897	void assignThisToLocal ( Local left ) { PurityNode node = PurityThisNode . node ; localsRemove ( left ) ; localsPut ( left , node ) ; nodes . add ( node ) ; paramNodes . add ( node ) ; if ( doCheck ) sanityCheck ( ) ; }
2951	public static ExpectedCondition < Boolean > hasNodeProperty ( final Session session , final String nodePath , final String propertyName ) { LOG . debug ( _CHAR Checking if node ' { } ' has property ' { } ' '' , nodePath , propertyName ) ; return _NULL ; }
2972	@ NotNull public static String age ( @ NotNull Face face ) { return String . format ( _CHAR Age : % . _NUM _CHAR , face . faceAttributesResp . age ) ; }
3051	private void stopAutoNoopTimer ( ) { if ( autoNoopTimer != _NULL ) { autoNoopTimer . interrupt ( ) ; autoNoopTimer = _NULL ; } }
3078	public static SM_SYSTEM_MESSAGE STR_FORCE_HE_BECOME_OFFLINE ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
3121	private boolean isOptionEnabled ( UrlFilterRuleOption option ) { loadRuleProperties ( ) ; return enabledOptions != _NULL && enabledOptions . contains ( option ) ; }
3124	public boolean isLegionMember ( ) { return legionMember != _NULL ; }
3154	public RequestHandle delete ( String url , ResponseHandlerInterface responseHandler ) { return delete ( _NULL , url , responseHandler ) ; }
3224	@ Override public String toString ( ) { return _CHAR [ _CHAR + getNodeName ( ) + _CHAR : _CHAR + getNodeValue ( ) + _CHAR ] _CHAR ; }
3254	public PhotosSearchQuery search ( ) { return new PhotosSearchQuery ( getClient ( ) ) ; }
3279	public Document createDocument ( ) throws ParserConfigurationException { if ( documentBuilder == _NULL ) { documentBuilder = documentBuilderFactory . newDocumentBuilder ( ) ; } return documentBuilder . newDocument ( ) ; }
3314	@ Override public List < WebElement > findElementsByClassName ( String className ) { return ( ( FindsByClassName ) super . getWrappedDriver ( ) ) . findElementsByClassName ( className ) ; }
3324	public void putViewModel ( int key , MvvmViewModel cacheViewModel , Context context ) { getFragment ( context ) . put ( key , cacheViewModel ) ; }
3354	private EtcdKV newKVClient ( KVGrpc . KVFutureStub stub ) { return new EtcdKVImpl ( stub ) ; }
3362	protected MarketAddToAlbumQuery albumIds ( int ... value ) { return unsafeParam ( _CHAR album_ids _CHAR , value ) ; }
3464	@ Override public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelable ( KEY_FILE , mFile ) ; }
3490	public int querySurface ( EGLSurface eglSurface , int what ) { int [ ] value = new int [ _NUM ] ; EGL14 . eglQuerySurface ( eGLDisplay , eglSurface , what , value , _NUM ) ; return value [ _NUM ] ; }
3506	public WallGetRepostsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
3510	private boolean isValidItemIndex ( int index ) { return viewAdapter != _NULL && viewAdapter . getItemsCount ( ) > _NUM && ( isCyclic || index >= _NUM && index < viewAdapter . getItemsCount ( ) ) ; }
3542	public WallCreateCommentQuery replyToComment ( Integer value ) { return unsafeParam ( _CHAR reply_to_comment _CHAR , value ) ; }
3547	public static String convertURLToFile ( URL url ) { if ( url == _NULL ) { return _CHAR _CHAR ; } return convertURLToFile ( url . toString ( ) ) ; }
3556	public WallGetCommentsQuery needLikes ( Boolean value ) { return unsafeParam ( _CHAR need_likes _CHAR , value ) ; }
3589	public boolean deleteImage ( String path ) { return new File ( path ) . delete ( ) ; }
3595	public final boolean useSkill ( int skillId ) { return useSkill ( skillId , _NUM ) ; }
3596	public void disconnectAndCloseAll ( ) { for ( final MqttAsyncConnection connection : getMqttConnections ( ) ) { disconnectAndCloseTab ( connection ) ; } }
3613	@ Override public boolean isDataPresent ( ) { return _BOOL ; }
3653	public Player findPlayer ( int objectId ) { return allPlayers . get ( objectId ) ; }
3654	public BaseViewHolder linkify ( int viewId ) { TextView view = getView ( viewId ) ; Linkify . addLinks ( view , Linkify . ALL ) ; return this ; }
3661	public int numberOfObjects ( ) { return numberOfObjects ; }
3668	public boolean isCurrentSet ( ) { return current . get1 ( ) >= _NUM && current . get1 ( ) < table . getGrid ( ) . getRowCount ( ) && current . get2 ( ) >= _NUM && current . get2 ( ) < table . getGrid ( ) . getColumnCount ( ) ; }
3716	protected void update ( ) { long time = System . nanoTime ( ) ; long diff = time - this . last ; this . last = time ; double elapsedTime = diff / NANO_TO_BASE ; this . world . update ( elapsedTime ) ; }
3757	public void spin ( ) { isSpinning = _BOOL ; spinHandler . sendEmptyMessage ( _NUM ) ; }
3763	private static void closeKey ( Integer keyHandle ) { if ( keyHandle == _NULL ) return ; Integer result = invokeRegistryMethod ( _closeKeyMethod , keyHandle ) ; if ( result != ERROR_SUCCESS ) throw new WindowsRegistryException ( _CHAR Error . Code = _CHAR + result ) ; }
3765	@ Override public final boolean readBoolean ( ) throws IOException { return dis . readBoolean ( ) ; }
3767	public void waitForClose ( ) throws InterruptedException { f . channel ( ) . closeFuture ( ) . sync ( ) ; }
3768	public FriendsGetOnlineQueryWithMobile count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
3776	public static void main ( String [ ] args ) { System . out . println ( ( new MbrolaVoiceDirectory ( ) ) . toString ( ) ) ; }
3777	public void validateStateTransition ( Experiment . State oldState , Experiment . State newState ) { if ( ! oldState . isStateTransitionAllowed ( newState ) ) { throw new InvalidExperimentStateTransitionException ( _CHAR Invalid switch from state \ '' '' + oldState + '' \ '' to invalid state \ '' '' + newState + '' \ '' '' ) ; } }
3790	public static Thread start ( long timeout ) { return start ( Thread . currentThread ( ) , timeout ) ; }
3798	public void remove ( IObjectInfo < T > poi ) { remove_impl ( poi , _BOOL ) ; }
3832	public final void trace ( final Object o ) { log ( Level . TRACE , o ) ; }
3842	public boolean isEmpty ( ) { return state == State . EMPTY ; }
3851	public Local generateLocal ( Type t ) { return localGenerator . generateLocal ( t ) ; }
3968	private static double computeCorrelationDistances ( int n , float [ ] seriesA , float [ ] seriesB ) { return _NUM - Correlation . computePersonsCorrelationCoefficent ( n , seriesA , seriesB ) ; }
3978	public TextPartsBuilder addTextPart ( @ NonNull CharSequence textPart , @ ColorInt int bgColor ) { BackgroundHolder backgroundHolder = new BackgroundHolder ( bgColor , _NUM , _NUM ) ; Pair < CharSequence , BackgroundHolder > pair = Pair . create ( textPart , backgroundHolder ) ; mTextParts . add ( pair ) ; return this ; }
4017	public void populate ( FunctionName functionName , ProcessFunction existingProcessFunction ) { this . selectedFunction . setBuiltInProcessFunction ( functionName , existingProcessFunction ) ; valueList = this . selectedFunction . extractParameters ( ) ; }
4030	public void refreshListener ( String serverKey ) throws GenericServiceException { GenericMessageListener listener = listeners . get ( serverKey ) ; if ( listener == _NULL ) throw new GenericServiceException ( _CHAR No listener found with that serverKey . '' ) ; listener . refresh ( ) ; }
4043	public GroupsGetInvitesQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
4060	@ Override public boolean isDataPresent ( ) { return _BOOL ; }
4061	public DistributedLogNamespaceBuilder statsLogger ( StatsLogger statsLogger ) { this . _statsLogger = statsLogger ; return this ; }
4066	public static SM_SYSTEM_MESSAGE STR_BLOCKLIST_REMOVE_FROM_LIST ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
4078	@ RequestMapping ( method = RequestMethod . POST , value = _CHAR { clientVersion } / orgUnits / { id } / dataSets _CHAR ) @ ResponseBody public String saveDataSetValues ( @ PathVariable int id , @ RequestBody DataSetValue dataSetValue ) throws NotAllowedException { facilityReportingService . saveDataSetValues ( getUnit ( id ) , dataSetValue ) ; return DATASET_REPORT_UPLOADED ; }
4090	public static IRemoteSpace findJiniSpace ( SpaceURL url , Properties customProperties , long timeout , LookupType lookupType ) throws FinderException { return ( IRemoteSpace ) findJiniSpace ( url , customProperties , timeout , lookupType , _BOOL ) ; }
4094	private void closeMenuDrawer ( ) { if ( mDrawerLayout != _NULL ) { mDrawerLayout . closeDrawer ( MENU_DRAWER_GRAVITY ) ; } }
4095	public void backup ( int amount ) { inBuf += amount ; if ( ( bufpos -= amount ) < _NUM ) bufpos += bufsize ; }
4117	void refreshFinish ( String instanceId ) { if ( ! isDomThread ( ) ) { throw new WXRuntimeException ( _CHAR RefreshFinish operation must be done in dom thread _CHAR ) ; } WXDomStatement statement = mDomRegistries . get ( instanceId ) ; if ( statement == _NULL ) { return ; } statement . refreshFinish ( ) ; }
4128	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR book_table \ _CHAR ( _CHAR + _CHAR \ _CHAR BOOK_ID \ _CHAR TEXT PRIMARY KEY NOT NULL , _CHAR + _CHAR \ _CHAR BOOK_NAME \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR USER_ID \ _CHAR TEXT ) ; _CHAR ) ; }
4141	public ByteBuffer toByteBuffer ( ) { ByteBuffer buff = ByteBuffer . allocate ( totalsize ) . put ( prefix ) ; for ( int i = _NUM ; i < content . size ( ) ; ++ i ) buff . put ( content . get ( i ) ) ; return buff ; }
4144	public GroupsGetCatalogQuery subcategoryId ( Integer value ) { return unsafeParam ( _CHAR subcategory_id _CHAR , value ) ; }
4147	public BaseViewHolder linkify ( int viewId ) { TextView view = getView ( viewId ) ; Linkify . addLinks ( view , Linkify . ALL ) ; return this ; }
4168	public void flush ( ) { if ( this . durable ) { PageAllocator . incrementCacheMisses ( ) ; this . pageData . force ( ) ; } }
4182	public Boolean hasNodeProperty ( String nodePath , String propertyName ) throws RepositoryException { LOG . debug ( _CHAR Checking if node ' { } ' has property ' { } ' '' , nodePath , propertyName ) ; session . refresh ( _BOOL ) ; return session . getNode ( nodePath ) . hasProperty ( propertyName ) ; }
4188	public void delServerService ( String serviceName , String group ) throws RegistryException { if ( registry != _NULL ) { registry . delServerService ( serviceName , group ) ; } monitor . logEvent ( _CHAR PigeonGovernor . delService _CHAR , serviceName , _CHAR swimlane = _CHAR + group ) ; }
4189	public void takeThreadDump ( Application application , boolean openView ) { threadDumpProvider . createThreadDump ( application , openView ) ; }
4206	@ Override public boolean isDataPresent ( ) { return _BOOL ; }
4212	protected String normalizeAppName ( String app ) { String app2 = app . replaceAll ( _CHAR \\ W _CHAR , _CHAR _CHAR ) ; if ( app . length ( ) == _NUM ) { throw new IllegalArgumentException ( _CHAR Bad app name : _CHAR + app ) ; } return app2 ; }
4216	public static int activityCount ( ) { return getInstance ( ) . _activityCount ( ) ; }
4228	public NotesGetQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
4233	public static final MediaFormat createVideoFormat ( String mime , int width , int height ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_WIDTH , width ) ; format . setInteger ( KEY_HEIGHT , height ) ; return format ; }
4256	private static int probe ( final int perturb , final int j ) { return ( j << _NUM ) + j + perturb + _NUM ; }
4261	public void repaint ( ) { mySceneDraw . repaint ( ) ; }
4276	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR _CHAR _CHAR ; db . execSQL ( sql ) ; }
4277	protected void beforeMove ( ) { if ( ! Silent ) synchronized ( System . err ) { System . err . println ( getLocalName ( ) + _CHAR is now migrating . '' ) ; } }
4290	public void removeAllViews ( ) { mContainer . removeAllViews ( ) ; }
4303	public static final MediaFormat createAudioFormat ( String mime , int sampleRate , int channelCount ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_SAMPLE_RATE , sampleRate ) ; format . setInteger ( KEY_CHANNEL_COUNT , channelCount ) ; return format ; }
4319	public void lockUserInput ( ) { locked = _BOOL ; commandManager . setEnableCritical ( _BOOL ) ; }
4364	public static double nd ( ) { return R . nextGaussian ( ) ; }
4454	public static boolean isLoaded ( String name , IdMapper . MapType mapType ) { return name2classification . get ( name ) != _NULL && get ( name , _BOOL ) . getIdMapper ( ) . isLoaded ( mapType ) ; }
4478	public void startPause ( ) { if ( mTimer . hasStarted ( ) ) { if ( mTimer . isRunning ( ) ) { mTimer . pause ( ) ; } else { mTimer . resume ( ) ; } } else { mTimer . start ( ) ; } update ( ) ; }
4511	public void failPicture ( String err ) { this . callbackContext . error ( err ) ; }
4525	public Session store ( long expired ) { this . setExpired ( expired ) ; if ( ! Cache . set ( _CHAR session / _CHAR + sid , this ) ) { log . error ( _CHAR set session failed ! _CHAR , new Exception ( _CHAR store session failed _CHAR ) ) ; } return this ; }
4529	public static SM_SYSTEM_MESSAGE STR_UI_COMBAT_NPC_FLEE_ORG ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
4545	public static void dropTable ( Database db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR COLLECT \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
4569	private String fetchTableName ( String query ) { for ( String tableName : mTableNames ) { if ( query . contains ( tableName ) ) { return tableName ; } } return _CHAR _CHAR ; }
4580	public Math_Vector add ( Math_Vector other ) { this . x += other . x ; this . y += other . y ; return this ; }
4582	public static LinkedHashSet < PhysicalTableDefinition > buildPetTableDefinitions ( TestDimensions testDimensions ) { return Utils . asLinkedHashSet ( new PhysicalTableDefinition ( ALL_PETS , DAY . buildZonedTimeGrain ( DateTimeZone . UTC ) , testDimensions . getDimensionConfigurationsByApiName ( BREED , SEX , SPECIES ) ) ) ; }
4588	public FriendsSearchQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
4612	public static SM_SYSTEM_MESSAGE STR_GATHER_START_3_MINING ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
4624	public void stopPlayingAudio ( String id ) { AudioPlayer audio = this . players . get ( id ) ; if ( audio != _NULL ) { audio . stopPlaying ( ) ; } }
4627	public void removeSection ( String tag ) { this . sections . remove ( tag ) ; }
4639	public static boolean isExternalMemoryFull ( ) { return getAvailableExternalMemorySize ( ) - AVALIABLE_EXTERNAL_MEMORY_SIZE < _NUM ; }
4722	public void put ( String sample , String attribute , Object value ) { if ( ! sampleOrder . contains ( sample ) ) sampleOrder . add ( sample ) ; if ( ! attributeOrder . contains ( attribute ) ) attributeOrder . add ( attribute ) ; table . put ( sample , attribute , value ) ; }
4735	public static ActionEntry from ( Matcher matcher , Action action ) { return new ActionEntry ( matcher , action ) ; }
4751	public PhotosGetCommentsQueryWithExtended count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
4754	public void clear ( ) { maxValue = _NUM ; minValue = Long . MAX_VALUE ; for ( int i = _NUM , size = counts . length ; i < size ; i ++ ) { counts [ i ] = _NUM ; } }
4770	public int count ( String className ) throws RemoteException , TransactionException , UnusableEntryException { return _remoteSpaceProxy . count ( createTemplate ( className ) , _NULL ) ; }
4773	public static synchronized RemoteHostsContainer sharedInstance ( ) { if ( sharedInstance == _NULL ) sharedInstance = new RemoteHostsContainer ( ) ; return sharedInstance ; }
4789	public GroupsGetQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
4800	public boolean isCurrentSelected ( ) { return isCurrentSet ( ) && toSelectTaxonIds . contains ( currentTaxonId ) ; }
4814	public static SM_SYSTEM_MESSAGE STR_PARTY_HE_BECOME_OFFLINE ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
4820	private static long millisecondsToTimeUnit ( long milliseconds , int timeUnit ) { switch ( timeUnit ) { case TU_MILLISECONDS : case TU_SECONDS : case TU_MINUTES : case TU_HOURS : case TU_DAYS : return Math . abs ( milliseconds ) / timeUnit ; } return - _NUM ; }
4827	public AionClientPacket handle ( ByteBuffer data , AionConnection client ) { State state = client . getState ( ) ; int id = data . getShort ( ) & _NUM ; data . position ( data . position ( ) + _NUM ) ; return getPacket ( state , id , data , client ) ; }
4842	public boolean isGlobalFindable ( ) { return doc . getDir ( ) . getMainViewer ( ) . getTree ( ) . getNumberOfNodes ( ) > _NUM ; }
4844	private static List < NewSLDInterface > populateAvailableList ( ) { List < NewSLDInterface > list = new ArrayList < NewSLDInterface > ( ) ; list . add ( new NewPointSLD ( ) ) ; list . add ( new NewLineSLD ( ) ) ; list . add ( new NewPolygonSLD ( ) ) ; list . add ( new NewRasterSLD ( ) ) ; return list ; }
4845	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR ALARMS \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
4858	public static SparseGradient createConstant ( final double value ) { return new SparseGradient ( value , Collections . < Integer , Double > emptyMap ( ) ) ; }
4863	public Location add ( Location vec ) { if ( vec == _NULL || vec . getWorld ( ) != getWorld ( ) ) { throw new IllegalArgumentException ( _CHAR Can not add Locations of differing worlds _CHAR ) ; } x += vec . x ; y += vec . y ; z += vec . z ; return this ; }
4902	public String toString ( ) { return _CHAR MbrolaVoice _CHAR ; }
4913	public Iterator < Pair < Rectangle2D , T >> iterator ( ) { return data . iterator ( ) ; }
4925	protected MessagesEditChatQuery title ( String value ) { return unsafeParam ( _CHAR title _CHAR , value ) ; }
4931	public int decrement ( int val ) { if ( val < _NUM ) { return increment ( - val ) ; } lock . lock ( ) ; int newValue = ( value -= val ) ; lock . unlock ( ) ; return newValue ; }
4934	public static DataFrame normalize ( DataFrame dataFrame , double min , double max ) { return normalize ( dataFrame , min , max , Collections . < String > emptyList ( ) ) ; }
4940	public Iterator iterator ( ) { return split2index . keySet ( ) . iterator ( ) ; }
4950	public static LinkedHashSet < PhysicalTableDefinition > buildMonthlyTableDefinitions ( TestDimensions testDimensions ) { return Utils . asLinkedHashSet ( new PhysicalTableDefinition ( MONTHLY , MONTH . buildZonedTimeGrain ( DateTimeZone . UTC ) , testDimensions . getDimensionConfigurationsByApiName ( OTHER ) ) ) ; }
4971	protected void processFile ( Entry entry ) throws Exception { }
5010	public static NullSpacePredicate isNull ( ) { return NULL ; }
5015	public MarketReportQuery report ( UserActor actor , int ownerId , int itemId , ReportReason reason ) { return new MarketReportQuery ( getClient ( ) , actor , ownerId , itemId , reason ) ; }
5047	public static GenericValue create ( GenericPK primaryKey ) { GenericValue newValue = new GenericValue ( ) ; newValue . init ( primaryKey ) ; return newValue ; }
5054	public static void v ( String tag , String msg , Throwable throwable ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } Log . v ( tag , msg , throwable ) ; }
5055	public static void handleError ( String errorMessage , SimpleMethod method , Element element ) throws ValidationException { ValidationException e = new ValidationException ( errorMessage , method , element ) ; if ( strictOn ( ) ) { throw e ; } else { Debug . logWarning ( e . getMessage ( ) , module ) ; } }
5061	default void writeAttribute ( NamespaceManager ns , UInteger attribute , DataValue value , String indexRange ) throws UaException { writeAttribute ( ns , attribute . intValue ( ) , value , indexRange ) ; }
5070	public boolean isBeaming ( ) { return beaming ; }
5093	public static void showCreateAircraft ( ) { Context context = AirMap . getInstance ( ) . getContext ( ) ; Intent intent = new Intent ( context , CreateEditAircraftActivity . class ) ; context . startActivity ( intent ) ; }
5110	public boolean isLongPressDragEnabled ( ) { return mDefaultItemTouchHelperCallback . isLongPressDragEnabled ( ) ; }
5157	private void takePicture ( ) { lockFocus ( ) ; }
5168	public void initializeWith ( @ NonNull ViewPager viewPager ) { viewPager . addOnPageChangeListener ( this ) ; adapter = viewPager . getAdapter ( ) ; if ( adapter == _NULL ) throw new IllegalArgumentException ( _CHAR You must set adapter to ViewPager first _CHAR ) ; adapter . registerDataSetObserver ( datasetObserver ) ; }
5190	private static synchronized void createAutoAddJob ( IProject project ) { Job j = new AutoAddJob ( project ) ; j . setSystem ( _BOOL ) ; j . setPriority ( Job . SHORT ) ; j . setRule ( ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ) ; j . schedule ( ) ; }
5200	public CarouselOptions animationDuration ( int animationDuration ) { mAnimationDuration = animationDuration ; return this ; }
5238	public void rightClick ( ) throws InterruptedException { click ( InputEvent . BUTTON3_MASK ) ; }
5242	public static void createTable ( Database db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR NEWS \ _CHAR ( _CHAR + _CHAR \ _CHAR DATE \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR JSON_STRING \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR CREATED_TIME \ _CHAR INTEGER ) ; _CHAR ) ; }
5252	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + TABLENAME + _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR \ _CHAR FIRSTCLOUMN \ _CHAR TEXT NOT NULL , _CHAR + _CHAR \ _CHAR SECONDCLOUMN \ _CHAR TEXT NOT NULL , _CHAR + _CHAR \ _CHAR THIRDCLOUMN \ _CHAR TEXT NOT NULL ) ; _CHAR ) ; }
5263	private void startSession ( Session session , Json json ) { String namespace = json . at ( NAMESPACE ) . asString ( ) ; MindmapsGraph graph = getGraph . apply ( namespace ) ; GraqlSession graqlSession = new GraqlSession ( session , graph ) ; sessions . put ( session , graqlSession ) ; }
5265	public boolean isLongPressDragEnabled ( ) { initializeItemTouchHelper ( ) ; return this . mDefaultItemTouchHelper . isLongPressDragEnabled ( ) ; }
5279	public static synchronized CoreDumpsContainer sharedInstance ( ) { if ( sharedInstance == _NULL ) sharedInstance = new CoreDumpsContainer ( ) ; return sharedInstance ; }
5289	private Object readResolve ( ) { return LazyHolder . INSTANCE ; }
5314	public PetCategory findOne ( String id ) { log . debug ( _CHAR Request to get PetCategory : { } _CHAR , id ) ; PetCategory petCategory = petCategoryRepository . findOne ( UUID . fromString ( id ) ) ; return petCategory ; }
5331	public static String toStringPacked ( byte [ ] packed ) { StringBuilder buf = new StringBuilder ( ) ; for ( byte a : packed ) buf . append ( _CHAR _CHAR ) . append ( a & _NUM ) ; return buf . toString ( ) ; }
5379	public void clear ( ) { eDA . clear ( ) ; }
5387	public static boolean hasStatusBar ( Activity activity ) { LayoutParams params = activity . getWindow ( ) . getAttributes ( ) ; return ( params . flags & LayoutParams . FLAG_FULLSCREEN ) != LayoutParams . FLAG_FULLSCREEN ; }
5392	public boolean first ( ) { return seek ( MDB_FIRST ) ; }
5401	public MessagesGetDialogsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
5429	protected DocsGetByIdQuery docs ( String ... value ) { return unsafeParam ( _CHAR docs _CHAR , value ) ; }
5444	public static HttpResponse execute ( HttpMethod method , String targetUrl ) throws IOException , KeyStoreException , NoSuchAlgorithmException , CertificateException , KeyManagementException { return execute ( method , targetUrl , _NULL , _NULL ) ; }
5445	@ Override public int fillConvertedChunkData ( int rowId , int columnIndex , int [ ] row , KeyStructureInfo restructuringInfo ) { return columnIndex + _NUM ; }
5447	public void notifyLockInput ( ) { if ( ! locked ) { synchronized ( directorListeners ) { IDirectorListener [ ] listeners = directorListeners . toArray ( new IDirectorListener [ directorListeners . size ( ) ] ) ; for ( IDirectorListener directorListener : listeners ) { if ( directorListener != this ) directorListener . lockUserInput ( ) ; } } } locked = _BOOL ; }
5449	public static final MediaFormat createSubtitleFormat ( String title , String language ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_TITLE , title ) ; format . setString ( KEY_LANGUAGE , language ) ; return format ; }
5452	public double cond ( ) { return new SingularValueDecomposition ( this ) . cond ( ) ; }
5457	public static void openSecuritySettings ( @ NonNull Context context ) { Intent intent = new Intent ( Settings . ACTION_SECURITY_SETTINGS ) ; context . startActivity ( intent ) ; }
5468	public static boolean isForbiddenWord ( String name ) { return isForbiddenByClient ( name ) || isForbiddenBySequence ( name ) ; }
5481	public static Map < String , Object > findOrders ( DispatchContext dctx , Map < String , ? extends Object > context ) { return findOrders ( dctx , context , _BOOL ) ; }
5527	public boolean isValidSymbol ( ) { return ! validSymbolMap . values ( ) . contains ( _BOOL ) ; }
5541	public static void delete ( W q ) { Helper . delete ( q , AuthToken . class ) ; }
5547	public static void dropTable ( Database db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR NEWS \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
5557	public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_DODGED_ME_TO_B ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
5572	public int decrement ( ) { lock . lock ( ) ; if ( value != _NUM ) { -- value ; } else { value = Integer . MAX_VALUE ; } int newValue = value ; lock . unlock ( ) ; return newValue ; }
5596	public static boolean hasNode ( String url ) { return url2node . containsKey ( url ) ; }
5608	public void WaitUntilAllViewersAreUptoDate ( ) { while ( ! isAllViewersUptodate ( ) ) { try { Thread . sleep ( _NUM ) ; } catch ( Exception e ) { } } }
5632	private final boolean eq ( short v1 , short v2 ) { return v1 == v2 ; }
5649	@ Override public boolean hasAttributeNS ( String namespaceURI , String localName ) { return getAttributeNodeNS ( namespaceURI , localName ) != _NULL ; }
5660	public void createInFile ( String filePath ) throws IOException { this . inFile = new ExifInterface ( filePath ) ; }
5698	public final int yystate ( ) { return zzLexicalState ; }
5705	public void loadConf ( Configuration otherConf ) { addConfiguration ( otherConf ) ; }
5707	public void unlockUserInput ( ) { locked = _BOOL ; getCommandManager ( ) . setEnableCritical ( _BOOL ) ; searchManager . getFindDialogAsToolBar ( ) . setEnableCritical ( _BOOL ) ; if ( bottomToolBar != _NULL ) bottomToolBar . setEnabled ( _BOOL ) ; setCursor ( Cursor . getDefaultCursor ( ) ) ; getContentPane ( ) . setCursor ( Cursor . getDefaultCursor ( ) ) ; }
5727	private void del ( VisibleObject object , boolean isOutOfRange ) { if ( knownObjects . remove ( object . getObjectId ( ) ) != _NULL ) { if ( knownPlayers != _NULL ) { knownPlayers . remove ( object . getObjectId ( ) ) ; } delVisualObject ( object , isOutOfRange ) ; } }
5731	public static void send ( Fragment fragment , int requestCode , String ... permissions ) { with ( fragment ) . requestCode ( requestCode ) . permission ( permissions ) . send ( ) ; }
5885	public NewsfeedSearchQueryWithExtended count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
5970	public static void dropTable ( Database db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR THEME_LIST \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
6020	public static GenericPK create ( Delegator delegator , ModelEntity modelEntity , Map < String , ? extends Object > fields ) { GenericPK newPK = new GenericPK ( ) ; newPK . init ( delegator , modelEntity , fields ) ; return newPK ; }
6039	public static Predicate < ItemStack > matcherOf ( ItemStack value , boolean checkNBT ) { return _NULL ; }
6054	public static SM_SYSTEM_MESSAGE STR_USE_ITEM ( DescriptionId value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
6056	public boolean putImageWithFullPath ( String fullPath , Bitmap theBitmap ) { return ! ( fullPath == _NULL || theBitmap == _NULL ) && saveBitmap ( fullPath , theBitmap ) ; }
6067	private void touchAutoNoopTimer ( ) { if ( autoNoopTimer != _NULL ) { nextAutoNoopTime = System . currentTimeMillis ( ) + autoNoopTimeout ; } }
6090	public PhotosCopyQuery accessKey ( String value ) { return unsafeParam ( _CHAR access_key _CHAR , value ) ; }
6162	public static void v ( String tag , String msg ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } Log . v ( tag , msg ) ; }
6219	public void addElem ( AnnotationElem elem ) { if ( elems == _NULL ) elems = new ArrayList < AnnotationElem > ( ) ; elems . add ( elem ) ; }
6229	private void turnOffAllTracks ( ) { for ( int i = _NUM ; i < this . tracks . length ; i ++ ) { this . tracks [ i ] . setLowAnim ( TextureAnimationDrawer . trackSolid ) ; } }
6235	public final void info ( final Object o ) { log ( Level . INFO , o ) ; }
6237	@ Override public List < WebElement > findElementsByCssSelector ( String cssSelector ) { return ( ( FindsByCssSelector ) super . getWrappedDriver ( ) ) . findElementsByCssSelector ( cssSelector ) ; }
6238	private void openMenuDrawer ( ) { if ( mDrawerLayout != _NULL ) { mDrawerLayout . openDrawer ( MENU_DRAWER_GRAVITY ) ; } }
6272	public static DateTimeUnit fromJdkCalendar ( java . util . Calendar calendar ) { return fromJodaDateTime ( new DateTime ( calendar ) ) ; }
6279	private Object readResolve ( ) { return LazyHolder . INSTANCE ; }
6287	public CommFaultTagCacheObject clone ( ) throws CloneNotSupportedException { return ( CommFaultTagCacheObject ) super . clone ( ) ; }
6288	public static synchronized ApplicationViewsSupport sharedInstance ( ) { if ( sharedInstance == _NULL ) sharedInstance = new ApplicationViewsSupport ( ) ; return sharedInstance ; }
6293	private static Integer [ ] newZeroedIntegerArray ( int size ) { Integer [ ] result = new Integer [ size ] ; for ( int i = _NUM ; i < size ; i ++ ) result [ i ] = _NUM ; return result ; }
6324	public static void writeChar ( PacketBuffer buf , char value ) { buf . writeChar ( value ) ; }
6337	public String build ( ) { StringWriter writer = new StringWriter ( ) ; StreamResult result = new StreamResult ( writer ) ; build ( result ) ; return writer . toString ( ) ; }
6338	public void removeItem ( final ExpandingItem item ) { mContainer . removeView ( item ) ; }
6360	public NotificationsGetQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
6363	public static DownloadQueue newDownloadQueue ( int threadPoolSize ) { return NoHttp . newDownloadQueue ( OkHttpRestConnection . getInstance ( ) , threadPoolSize ) ; }
6370	private void mapStateProperties ( ContainerState containerState , Map < String , Object > state ) { if ( state == _NULL ) { return ; } containerState . started = parseDate ( state . get ( DOCKER_CONTAINER_STATE_STARTED_PROP_NAME ) ) ; mapPowerState ( containerState , state ) ; }
6373	@ Override public void startElement ( QName element , XMLAttributes attributes , Augmentations augs ) throws XNIException { }
6398	@ Override public void startDocument ( XMLLocator locator , String encoding , NamespaceContext namespaceContext , Augmentations augs ) throws XNIException { }
6451	public PhotosEditCommentQuery message ( String value ) { return unsafeParam ( _CHAR message _CHAR , value ) ; }
6460	public FriendsGetRequestsQuery suggested ( Boolean value ) { return unsafeParam ( _CHAR suggested _CHAR , value ) ; }
6461	@ Override public void parse ( String aLine ) throws IOException { String [ ] tokens = aLine . trim ( ) . split ( _CHAR \ t _CHAR ) ; parse ( tokens , tokens . length ) ; }
6470	public boolean isSkipCommentLines ( ) { return iterator . isSkipCommentLines ( ) ; }
6548	public static SM_SYSTEM_MESSAGE STR_MISSION_SYSTEMMSG_ACQUIRE ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
6552	public void populate ( ProcessBriefType selectedFunction ) { ProcessDescriptionType selectedCustomFunction = ( ProcessDescriptionType ) selectedFunction ; this . selectedFunction . setSelectedCustomFunction ( selectedCustomFunction ) ; valueList = this . selectedFunction . extractParameters ( ) ; }
6553	@ PreDestroy public void stop ( ) { if ( leaderLock != _NULL ) { leaderLock . release ( ) ; } if ( scheduler != _NULL ) { scheduler . shutdownNow ( ) ; } isLeader = _BOOL ; }
6559	public static String version ( ) { return version ; }
6585	public static void createTable ( Database db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR USER \ _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY NOT NULL , _CHAR + _CHAR \ _CHAR NAME \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR AGE \ _CHAR INTEGER NOT NULL ) ; _CHAR ) ; }
6616	public boolean isInWorld ( VisibleObject object ) { return allObjects . containsKey ( object . getObjectId ( ) ) ; }
6638	public boolean isLoadMoreEnabled ( ) { return mLoadMoreEnabled ; }
6639	public boolean isActive ( ) { return timeEnd == _NULL || timeEnd . getTime ( ) > System . currentTimeMillis ( ) ; }
6656	@ Override public void updateValue ( String key , int count , String value ) { String updatedKey = String . format ( _CHAR % s % s % d _CHAR , key , DELIMETER , count ) ; updateValue ( updatedKey , value ) ; }
6718	static synchronized ExplorerContextMenuFactory instance ( ) { if ( sharedInstance == _NULL ) sharedInstance = new ExplorerContextMenuFactory ( ) ; return sharedInstance ; }
6719	public static SM_SYSTEM_MESSAGE STR_STIGMA_EXHAUST ( int num0sp ) { return new SM_SYSTEM_MESSAGE ( _NUM , num0sp ) ; }
6721	protected void animateProperty ( Property property , float start , float end , long duration ) { if ( duration > _NUM ) { if ( animationIsRunning ( ) ) { cancelAnimation ( this , property ) ; } addToAnimation ( this , property , start , end , duration , _NUM ) ; } }
6813	private int countLetters ( Lane lane ) { int count = _NUM ; for ( int i = lane . getFirstNonGapPosition ( ) ; i <= lane . getLastNonGapPosition ( ) ; i ++ ) { if ( Character . isLetter ( lane . charAt ( i ) ) ) count ++ ; } return count ; }
6818	@ Override public ASNotationDeclaration createASNotationDeclaration ( String namespaceURI , String name , String systemId , String publicId ) throws DOMException { String msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . DOM_DOMAIN , _CHAR NOT_SUPPORTED_ERR _CHAR , _NULL ) ; throw new DOMException ( DOMException . NOT_SUPPORTED_ERR , msg ) ; }
6857	private void onDayTimeChange ( ) { WeatherService . getInstance ( ) . checkWeathersTime ( ) ; }
6862	public static String nowDateString ( String format ) { SimpleDateFormat df = new SimpleDateFormat ( format ) ; return df . format ( new Date ( ) ) ; }
6889	public static void stop ( Thread thread ) { if ( thread != _NULL ) { thread . interrupt ( ) ; } }
6901	protected MarketSearchQuery ownerId ( int value ) { return unsafeParam ( _CHAR owner_id _CHAR , value ) ; }
6903	public static User load ( long id ) { return Helper . load ( id , User . class ) ; }
6922	protected DocsGetByIdQuery docs ( List < String > value ) { return unsafeParam ( _CHAR docs _CHAR , value ) ; }
6927	public void initAudio ( ) { channelMapper . mapChannels ( getMapperLayoutOptions ( ) ) ; this . mainAudio = getMainAudio ( this . audioMap ) ; this . alternativesAudio = getAlternativeAudios ( this . audioMap ) ; }
6935	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR _CHAR ( _CHAR + _CHAR _CHAR TEXT PRIMARY KEY NOT NULL , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR INTEGER ) ; _CHAR ) ; }
6939	public void removeAll ( ) { DotCacheAdministrator cache = CacheLocator . getCacheAdministrator ( ) ; cache . flushGroup ( groupName ) ; }
6942	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR USE_AREA \ _CHAR ( _CHAR + _CHAR \ _CHAR AREAID \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR AREAID2345 \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR AREA_NAME \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR MAIN \ _CHAR INTEGER ) ; _CHAR ) ; }
6973	public static void v ( String tag , String msg , Throwable throwable ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } Log . v ( tag , msg , throwable ) ; }
7039	private void prepareNextRun ( ) { for ( IVarAbstraction pn : pointers ) { if ( pn . willUpdate == _BOOL ) { pn . reconstruct ( ) ; } } System . gc ( ) ; }
7053	public static SM_SYSTEM_MESSAGE STR_EXTRACT_GATHER_SUCCESS_1_BASIC ( DescriptionId descriptionId ) { return new SM_SYSTEM_MESSAGE ( _NUM , descriptionId ) ; }
7067	public int numberOfObjects ( ) { return numberOfObjects ; }
7105	public static SM_SYSTEM_MESSAGE STR_GATHER_SUCCESS_4_FISHING ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
7121	public static String removeSpaces ( String str ) { return removeRegex ( str , _CHAR [ \\ ] _CHAR ) ; }
7131	public int nodeSizeLimit ( ) { return nodeSizeLimit ; }
7133	public static final MediaFormat createAudioFormat ( String mime , int sampleRate , int channelCount ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_SAMPLE_RATE , sampleRate ) ; format . setInteger ( KEY_CHANNEL_COUNT , channelCount ) ; return format ; }
7173	public void lockUserInput ( ) { }
7186	public boolean isLazy ( ) { return mLazy ; }
7316	public PhotosSaveOwnerPhotoQuery hash ( String value ) { return unsafeParam ( _CHAR hash _CHAR , value ) ; }
7333	public JPanel createLegendPanel ( ) { JPanel legendPanel = new JPanel ( ) ; legendPanel . setLayout ( new GridLayout ( _NUM , _NUM ) ) ; legendPanel . add ( getLegendPanel ( ) ) ; JPanel symbolTreePanel = getSymbolTree ( ) ; legendPanel . add ( symbolTreePanel ) ; return legendPanel ; }
7391	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR _CHAR ( _CHAR + _CHAR _CHAR TEXT NOT NULL , _CHAR + _CHAR _CHAR TEXT NOT NULL , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR TEXT ) ; _CHAR ) ; }
7447	private void writeSourceSinkSpec ( SourceSinkSpec spec , Document document , Element parentElement ) { if ( spec instanceof JavaParameterSpec ) writeJavaParameterSpec ( ( JavaParameterSpec ) spec , document , parentElement ) ; else if ( spec instanceof JavaFieldSpec ) writeJavaFieldSpec ( ( JavaFieldSpec ) spec , document , parentElement ) ; else throw new RuntimeException ( _CHAR Unsupported source or sink specification type _CHAR ) ; }
7453	public void destroy ( ) { super . destroy ( ) ; destroyPromoView ( ) ; destroyPeekPromoControl ( ) ; destroySearchBarControl ( ) ; }
7466	protected List < String > permissions ( ) { return new ArrayList < > ( ) ; }
7479	private void stop ( ) { stopTimeout ( ) ; if ( this . status != AccelListener . STOPPED ) { this . sensorManager . unregisterListener ( this ) ; } this . setStatus ( AccelListener . STOPPED ) ; this . accuracy = SensorManager . SENSOR_STATUS_UNRELIABLE ; }
7509	public static DateTimeUnit fromJodaDateTime ( DateTime dateTime ) { return new DateTimeUnit ( dateTime . getYear ( ) , dateTime . getMonthOfYear ( ) , dateTime . getDayOfMonth ( ) , dateTime . getDayOfWeek ( ) ) ; }
7511	private T [ ] buildArray ( final T a0 , final T a1 , final T a2 ) { final T [ ] array = MathArrays . buildArray ( a0 . getField ( ) , _NUM ) ; array [ _NUM ] = a0 ; array [ _NUM ] = a1 ; array [ _NUM ] = a2 ; return array ; }
7517	public boolean runAfter ( List list , int max ) { return _BOOL ; }
7533	protected PhotosRestoreCommentQuery commentId ( int value ) { return unsafeParam ( _CHAR comment_id _CHAR , value ) ; }
7536	public FriendsGetSuggestionsQuery filter ( List < FriendsGetSuggestionsFilter > value ) { return unsafeParam ( _CHAR filter _CHAR , value ) ; }
7538	private void doScrollX ( int delta ) { if ( delta != _NUM ) { if ( mSmoothScrollingEnabled ) { smoothScrollBy ( delta , _NUM ) ; } else { scrollBy ( delta , _NUM ) ; } } }
7541	protected boolean isJson ( HttpServletRequest request ) { String type = request . getContentType ( ) ; type = ! StringUtils . isEmpty ( type ) ? type : MediaType . APPLICATION_JSON_VALUE ; if ( request . getPathInfo ( ) . endsWith ( _CHAR . json _CHAR ) ) { type = MediaType . APPLICATION_JSON_VALUE ; } return isCompatibleWith ( type , MediaType . APPLICATION_JSON ) ; }
7543	public FriendsGetSuggestionsQuery filter ( FriendsGetSuggestionsFilter ... value ) { return unsafeParam ( _CHAR filter _CHAR , value ) ; }
7551	public void selectDataSource ( final DataSource dataSource ) { if ( dataSource == _NULL ) return ; selectDataSources ( Collections . singleton ( dataSource ) ) ; }
7617	private static DataFlavor [ ] convertToArray ( List < DataFlavor > dataFlavourList ) { DataFlavor [ ] array = new DataFlavor [ dataFlavourList . size ( ) ] ; dataFlavourList . toArray ( array ) ; return array ; }
7620	public static ExpectedCondition < Boolean > nodeExist ( final Session session , final String nodePath ) { LOG . debug ( _CHAR Checking if node ' { } ' exists '' , nodePath ) ; return _NULL ; }
7630	@ Override public void endElement ( QName element , Augmentations augs ) throws XNIException { }
7640	public static final MediaFormat createSubtitleFormat ( String title , String language ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_TITLE , title ) ; format . setString ( KEY_LANGUAGE , language ) ; return format ; }
7676	public static SM_SYSTEM_MESSAGE STR_ONE_INCLUDED ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
7684	public void abortIfRunning ( ) { if ( mRunning ) { if ( ! mScroller . isFinished ( ) ) { mAbort = _BOOL ; mScroller . forceFinished ( _BOOL ) ; } finish ( ) ; mAbort = _BOOL ; } }
7692	private void renewPlayerRanking ( Race race ) { List < SM_ABYSS_RANKING_PLAYERS > newlyCalculated ; newlyCalculated = generatePacketsForRace ( race ) ; players . remove ( race ) ; players . put ( race , newlyCalculated ) ; }
7697	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR SEARCH_SUFFIX \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
7745	public static synchronized DataSourceViewsManager sharedInstance ( ) { if ( sharedInstance == _NULL ) sharedInstance = new DataSourceViewsManager ( ) ; return sharedInstance ; }
7746	public static void v ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . v ( tag , msg ) ; }
7751	private void chooseDataSourceToOpen ( ) { }
7753	public PhotosGetAlbumsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
7755	public ViewBinder linkify ( int viewId ) { TextView view = retrieveView ( viewId ) ; Linkify . addLinks ( view , Linkify . ALL ) ; return this ; }
7787	public UsersSearchQuery hometown ( String value ) { return unsafeParam ( _CHAR hometown _CHAR , value ) ; }
7799	public static void registerComponent ( String resourceType , String descriptionFactoryLink , Class < ? extends ResourceState > descriptionClass , String stateFactoryLink , Class < ? extends ResourceState > stateClass , Class < ? extends ResourceState > stateTemplateClass ) { entries . add ( new RegistryEntry ( resourceType , descriptionFactoryLink , descriptionClass , stateFactoryLink , stateClass , stateTemplateClass ) ) ; }
7822	public int size ( ) { int size = _NUM ; for ( Map < C , V > row : dataMap . values ( ) ) { size += row . size ( ) ; } return size ; }
7850	public static String encodeParam ( String param ) { try { return URLEncoder . encode ( param , _CHAR UTF - _NUM _CHAR ) ; } catch ( UnsupportedEncodingException e ) { e . printStackTrace ( ) ; return _CHAR _CHAR ; } }
7851	public void lockUserInput ( ) { isLocked = _BOOL ; getTabbedPane ( ) . setEnabled ( _BOOL ) ; if ( commandManager != _NULL ) commandManager . setEnableCritical ( _BOOL ) ; setCursor ( new Cursor ( Cursor . WAIT_CURSOR ) ) ; }
7885	public static Patterns packages ( String [ ] includes ) { return new Patterns ( includes , new String [ ] { } ) ; }
7904	public static long [ ] transformLongArray ( Long [ ] source ) { long [ ] destin = new long [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
7909	public int size ( ) { return worldMaps == _NULL ? _NUM : worldMaps . size ( ) ; }
7931	public static boolean isConnected ( Context context ) { NetworkInfo info = NetworkUtil . getNetworkInfo ( context ) ; return ( info != _NULL && info . isConnected ( ) ) ; }
7935	final public static long updateCollection ( Bson query , V v , Class < ? extends Bean > t ) { String collection = getCollection ( t ) ; if ( collection != _NULL && ! _CHAR none _CHAR . equals ( collection ) ) { return updateCollection ( collection , query , v ) ; } return - _NUM ; }
7938	public void rightTrim ( double second ) { trim ( _NUM , second ) ; }
7948	public CatchOptions maxPokeballs ( int maxPokeballs ) { if ( maxPokeballs <= _NUM ) maxPokeballs =- _NUM ; this . maxPokeballs = maxPokeballs ; return this ; }
7955	public DataOutputBuffer reset ( ) { this . written = _NUM ; buffer . reset ( ) ; return this ; }
7977	public static DateTimeUnit fromJdkDate ( Date date ) { return fromJodaDateTime ( new DateTime ( date . getTime ( ) ) , _BOOL ) ; }
7981	public String toString ( ) { return _CHAR CMUClusterUnitVoice _CHAR ; }
7991	public CatchOptions usePokeball ( Pokeball pokeBall ) { this . pokeBall = pokeBall ; return this ; }
8004	public void lockUserInput ( ) { isLocked = _BOOL ; getCommandManager ( ) . setEnableCritical ( _BOOL ) ; searchManager . getFindDialogAsToolBar ( ) . setEnableCritical ( _BOOL ) ; frame . setCursor ( Cursor . getPredefinedCursor ( Cursor . WAIT_CURSOR ) ) ; statusBar . setText2 ( _CHAR Busy ... _CHAR ) ; }
8007	public final void fatal ( final Object o , final Throwable t ) { log ( Level . FATAL , o , t ) ; }
8044	public static boolean isScreenLocked ( Context context ) { KeyguardManager km = ( KeyguardManager ) context . getSystemService ( Context . KEYGUARD_SERVICE ) ; return km . inKeyguardRestrictedInputMode ( ) ; }
8046	@ Override public void endDTD ( Augmentations augs ) throws XNIException { fInDTD = _BOOL ; }
8049	public void addChangeListener ( ChangeListener cl ) { if ( ! listeners . contains ( cl ) ) listeners . add ( cl ) ; }
8096	@ Override public WebElement findElementByTagName ( String tagName ) { return ( ( FindsByTagName ) super . getWrappedDriver ( ) ) . findElementByTagName ( tagName ) ; }
8120	public static StringBuffer readFromFile ( String filePath ) { return readFromFile ( new File ( filePath ) ) ; }
8123	public static int calculateXenMemory ( int deliveryControllerCount , int vCenterServerCount ) { final int dc = Integer . parseInt ( VDICalculator . DEFAULTS . getString ( _CHAR xen . controller . memory . default _CHAR ) ) * deliveryControllerCount ; final int vc = Integer . parseInt ( VDICalculator . DEFAULTS . getString ( _CHAR xen . vcenter . memory . default _CHAR ) ) * vCenterServerCount ; return dc + vc ; }
8142	private String generateAlarmIndex ( long time ) { return retrieveIndexFormat ( indexPrefix + _CHAR - alarm_ _CHAR , time ) ; }
8166	public Observable < Void > evictAll ( ) { return processorProviders . evictAll ( ) ; }
8181	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR _CHAR ( _CHAR + _CHAR _CHAR TEXT PRIMARY KEY NOT NULL , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR INTEGER ) ; _CHAR ) ; }
8186	@ Override public ListenableFuture < LeaseGrantResponse > grant ( long ttl ) { LeaseGrantRequest leaseGrantRequest = LeaseGrantRequest . newBuilder ( ) . setTTL ( ttl ) . build ( ) ; return this . leaseFutureStub . leaseGrant ( leaseGrantRequest ) ; }
8188	private void fillQName ( QName toFill , mf . javax . xml . namespace . QName toCopy ) { fillQName ( toFill , toCopy . getNamespaceURI ( ) , toCopy . getLocalPart ( ) , toCopy . getPrefix ( ) ) ; }
8193	public WallSearchQuery domain ( String value ) { return unsafeParam ( _CHAR domain _CHAR , value ) ; }
8196	public boolean isFolder ( ) { return isFolder ; }
8216	private Object readResolve ( ) { return LazyHolder . INSTANCE ; }
8226	protected MarketGetAlbumsQuery ownerId ( int value ) { return unsafeParam ( _CHAR owner_id _CHAR , value ) ; }
8228	public static SM_SYSTEM_MESSAGE STR_SKILL_TOGGLE_SKILL_TURNED_OFF ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
8256	public static < T > T fromMap ( Map < ? , ? > fromMap , Class < T > targetType ) { return mapper . convertValue ( fromMap , targetType ) ; }
8308	public static int max ( final int a , final int b ) { return ( a <= b ) ? b : a ; }
8313	public static void throwable ( Throwable throwable ) { log ( Log . WARN , _NUM , _NULL , new ThrowableFormatter ( ) , _NULL , _NULL , throwable ) ; }
8320	@ Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; Mysplash . getInstance ( ) . addActivity ( this ) ; setTheme ( ) ; LanguageUtils . setLanguage ( this ) ; DisplayUtils . setWindowTop ( this ) ; setContentView ( R . layout . activity_preview_photo ) ; }
8352	public void stopAuth ( ) { if ( mCancellationSignal != _NULL ) { isScanning = _BOOL ; mCancellationSignal . cancel ( ) ; mCancellationSignal = _NULL ; } }
8380	@ Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . perference ) ; initView ( ) ; }
8386	public double distSquared ( Math_Vector other ) { double distX = this . x - other . x ; double distY = this . y - other . y ; return distX * distX + distY * distY ; }
8414	public void addDirector ( Director dir ) { dirs . add ( dir ) ; }
8447	private void moveTemplateToSecondPhase ( ITemplateHolder template ) { if ( template . isDeleted ( ) || ! template . isInCache ( ) ) return ; template . setSecondPhase ( ) ; }
8464	public boolean isShowLabels ( ) { return showLabels ; }
8473	public boolean equals ( double other_x , double other_y ) { if ( this . x == other_x && this . y == other_y ) { return _BOOL ; } return _BOOL ; }
8514	public void unlockUserInput ( ) { commandManager . setEnableCritical ( _BOOL ) ; locked = _BOOL ; }
8530	@ Override public void startDTD ( XMLLocator locator , Augmentations augs ) throws XNIException { fInDTD = _BOOL ; }
8545	String nextSessionId ( ) { return cnxKey + _CHAR _sess_ _CHAR + sessionsC . increment ( ) ; }
8561	public void addSymbolSelectedListener ( SymbolizerSelectedInterface symbolizerSelectedPanel ) { displayPanel = symbolizerSelectedPanel ; }
8562	public JPanel createSymbolSelectionPanel ( ) { return _NULL ; }
8579	public synchronized void addSuggest ( String name , JSONObject o ) { suggestSaveState . put ( name , o ) ; }
8626	public static final MediaFormat createVideoFormat ( String mime , int width , int height ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_WIDTH , width ) ; format . setInteger ( KEY_HEIGHT , height ) ; return format ; }
8652	public boolean equals ( Math_Vector other ) { if ( this . x == other . x && this . y == other . y ) return _BOOL ; return _BOOL ; }
8663	public AudioEditQuery title ( String value ) { return unsafeParam ( _CHAR title _CHAR , value ) ; }
8708	public ResourcesPoet addString ( String name , String value ) { Element element = document . createElement ( _CHAR string _CHAR ) ; element . setAttribute ( _CHAR name _CHAR , name ) ; element . appendChild ( document . createTextNode ( value ) ) ; resourceElement . appendChild ( element ) ; return this ; }
8726	public LeaseMap createLeaseMap ( long duration ) { return new ConstrainableRegistrarLeaseMap ( this , duration ) ; }
8743	public static String random ( ) { return UUID . randomUUID ( ) . toString ( ) ; }
8760	private void widgetChanged ( ) { configureUI ( ) ; repaint ( ) ; }
8770	@ Override public void hide ( ) { logger . trace ( _CHAR Hiding tooltip request ... _CHAR ) ; hideRequested = _BOOL ; checkAndHide ( ) ; }
8771	private boolean onCheckCanLoadMore ( ) { return mLoadMoreEnabled && ! canChildScrollDown ( ) && mHasFooterView && mLoadMoreTriggerOffset > _NUM ; }
8774	public boolean isSpawned ( ) { return getPosition ( ) . isSpawned ( ) ; }
8776	public JPanel createSymbolSelectionPanel ( ) { return _NULL ; }
8833	public String toString ( ) { return _CHAR FileAudioPlayer _CHAR ; }
8867	public LegendOptionPanel createLegendOptionsPanel ( LegendPanel legendPanel ) { if ( legendOptionPanel == _NULL ) { legendOptionPanel = new LegendOptionPanel ( ) ; legendOptionPanel . addListener ( this ) ; refreshSymbol = legendPanel ; } return legendOptionPanel ; }
8904	private void inflateEmptyTextColor ( ) { if ( mEmptyTextColor != R . color . text_empty_color ) { if ( mEmptyLayout != R . layout . layout_empty ) { throw new RuntimeException ( _CHAR Can not assign the emptyTextColor attribute . '' + _CHAR You already overridden the entire empty view , no need to specify _CHAR + _CHAR custom color or custom text message _CHAR ) ; } else { textEmpty . setTextColor ( ColorUtil . getColorWrapper ( mContext , mEmptyTextColor ) ) ; } } }
8923	public void addAssociation ( int node , int endpoint ) { if ( isAssociated ( node , endpoint ) ) { return ; } ZWaveAssociation newAssociation = new ZWaveAssociation ( node , endpoint ) ; associations . add ( newAssociation ) ; }
8924	public UsersGetFollowersQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
8928	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR BOOK \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
8939	protected static TestDimensionConfig buildStandardDimensionConfig ( TestApiDimensionName dimensionName ) { return new TestDimensionConfig ( dimensionName , dimensionName . asName ( ) , getDefaultKeyValueStore ( dimensionName ) , getDefaultSearchProvider ( ) , getDefaultFields ( ) , getDefaultFields ( ) ) ; }
8943	public int increment ( ) { lock . lock ( ) ; if ( value != Integer . MAX_VALUE ) { ++ value ; } else { value = _NUM ; } int newValue = value ; lock . unlock ( ) ; return newValue ; }
8962	@ Override @ NotNull public OptionalPlayer owner ( ) { if ( owner != _NULL ) return owner ; OptionalPlayer cityOwner = island . getCity ( ) . owner ( ) ; if ( cityOwner . getType ( ) != Identity . Type . ADMINS ) return cityOwner ; return admin ( ) ; }
9007	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR _CHAR _CHAR ; db . execSQL ( sql ) ; }
9049	public final void debug ( final Object o , final Throwable t ) { log ( Level . DEBUG , o , t ) ; }
9083	@ Override public void addSLDOutputListener ( SLDOutputInterface sldOutput ) { }
9087	public void drag ( long time , float x , float y , float deltaX , float deltaY , float totalX , float totalY ) { mModelSelectorButton . drag ( x , y ) ; getActiveStripLayoutHelper ( ) . drag ( time , x , y , deltaX , deltaY , totalX , totalY ) ; }
9099	public void invokeMenuPath ( @ NotNull String ... path ) { getMenuFixture ( ) . invokeMenuPath ( path ) ; }
9109	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR TRANSLATE \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
9113	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR _CHAR _CHAR ; db . execSQL ( sql ) ; }
9116	public static byte [ ] decode ( String s ) throws Base64DecoderException { byte [ ] bytes = s . getBytes ( ) ; return decode ( bytes , _NUM , bytes . length ) ; }
9125	public static void f ( String tag , String msg ) { if ( sLevel > LEVEL_FATAL ) { return ; } Log . wtf ( tag , msg ) ; }
9140	@ Override protected String dateToString ( DateTimeData date ) { StringBuffer message = new StringBuffer ( _NUM ) ; append ( message , date . year , _NUM ) ; append ( message , ( char ) date . utc , _NUM ) ; return message . toString ( ) ; }
9153	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR httpFile \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
9171	public void leftTrim ( int numberOfSample ) { trim ( numberOfSample , _NUM ) ; }
9174	public static Executor createTaskDistributor ( ) { return Executors . newCachedThreadPool ( createThreadFactory ( Thread . NORM_PRIORITY , _CHAR uil - pool - d - _CHAR ) ) ; }
9191	public boolean isHidden ( ) { return myHidden ; }
9198	public < T > ForEach < T > forEach ( Task < T > task ) { return new ForEach < > ( this . executor_ , task ) ; }
9237	public GroupsSetCallbackSettingsQuery videoCommentNew ( Boolean value ) { return unsafeParam ( _CHAR video_comment_new _CHAR , value ) ; }
9296	public static void createTable ( Database db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR COLLECT \ _CHAR ( _CHAR + _CHAR \ _CHAR ID \ _CHAR INTEGER NOT NULL , _CHAR + _CHAR \ _CHAR DESC \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR URL \ _CHAR TEXT PRIMARY KEY NOT NULL , _CHAR + _CHAR \ _CHAR COLLECT_DATE \ _CHAR INTEGER NOT NULL ) ; _CHAR ) ; }
9299	private Object readResolve ( ) { return LazyHolder . INSTANCE ; }
9314	@ After public void afterTest ( ) { removeTestData ( ) ; }
9390	private boolean isPopulatingTable ( ) { return tablePopulating ; }
9391	@ org . springframework . web . bind . annotation . ExceptionHandler ( value = Exception . class ) public ModelAndView exception ( Exception exception , WebRequest request ) { ModelAndView modelAndView = new ModelAndView ( _CHAR error / general _CHAR ) ; modelAndView . addObject ( _CHAR errorMessage _CHAR , Throwables . getStackTraceAsString ( exception ) ) ; return modelAndView ; }
9397	public void clear ( ) { entries . clear ( ) ; if ( filteredEntries != _NULL ) { filteredEntries . clear ( ) ; } if ( entryLookup != _NULL ) { entryLookup . clear ( ) ; } logCount = _NUM ; warningCount = _NUM ; errorCount = _NUM ; }
9434	public void event ( String event , String parameter , long duration ) { logEntries . add ( new EventEntry ( event , parameter , duration ) ) ; }
9447	public FaveGetPostsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
9459	public boolean isConnected ( ) { return client != _NULL && client . isConnected ( ) ; }
9481	public void removeViewer ( IDirectableViewer viewer ) { viewers . remove ( viewer ) ; directorListeners . remove ( viewer ) ; ProjectManager . projectWindowChanged ( this , viewer , _BOOL ) ; if ( viewers . isEmpty ( ) ) ProjectManager . removeProject ( this ) ; }
9496	public static void init ( PLogConfig config ) { safelySetConfig ( config ) ; }
9501	public void selectAll ( boolean select ) { if ( select ) { table . getSelectionModel ( ) . selectAll ( ) ; } else { table . getSelectionModel ( ) . clearSelection ( ) ; } }
9524	public Boolean addColumn ( Column columnToAdd ) { return this . columns . add ( columnToAdd ) ; }
9570	public void remove ( IObjectInfo < T > oi ) { lock . lock ( ) ; try { remove_impl ( ( ObjectInfo < T > ) oi ) ; } finally { lock . unlock ( ) ; } }
9583	@ After public void tearDown ( ) { entityManager . remove ( user ) ; }
9617	public static SM_SYSTEM_MESSAGE STR_ONE_NO_LONGER_INCLUDED ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
9646	@ Override public Attr createAttributeNS ( String namespaceURI , String qualifiedName , String localName ) throws DOMException { return new PSVIAttrNSImpl ( this , namespaceURI , qualifiedName , localName ) ; }
9652	protected void ensureOpen ( ) throws IllegalStateException { if ( closed ) { throw new IllegalStateException ( _CHAR Forbidden call on a closed connection . '' ) ; } }
9696	public void close ( ) throws CanceledException { notifyDestroyViewer ( ) ; }
9710	public NewsfeedSearchQuery search ( UserActor actor ) { return new NewsfeedSearchQuery ( getClient ( ) , actor ) ; }
9725	public static final void shuffleList ( List l , int repeat ) { for ( int iCnt = _NUM ; iCnt < repeat ; iCnt ++ ) shuffleList ( l ) ; }
9727	protected boolean isPanelEnabled ( GroupIdEnum groupId ) { boolean isEnabled = _BOOL ; GroupConfigInterface group = getGroup ( groupId ) ; if ( group != _NULL ) { isEnabled = group . isPanelEnabled ( ) ; } return isEnabled ; }
9766	public boolean isFailed ( ) { if ( response == _NULL ) { return failed ; } return ( this . getStatus ( ) != CatchStatus . CATCH_SUCCESS || failed ) ; }
9815	public void dump ( ) { dump ( new OutputStreamWriter ( System . out ) ) ; }
9851	public ResourcesPoet addInteger ( String name , Integer value ) { addInteger ( name , String . valueOf ( value ) ) ; return this ; }
9910	private void createExampleDataSource ( ) { if ( internalDataSource == _NULL ) { ConsoleManager . getInstance ( ) . error ( this , _CHAR No internal data source creation object set _CHAR ) ; } else { List < DataSourceInfo > dataSourceInfoList = internalDataSource . connect ( this . editorFileInterface ) ; if ( ( dataSourceInfoList != _NULL ) && ( dataSourceInfoList . size ( ) == _NUM ) ) { exampleDataSourceInfo = dataSourceInfoList . get ( _NUM ) ; } } }
9919	public CarouselOptions maxQuantity ( int maxQuantity ) { mMaxQuantity = maxQuantity ; return this ; }
9971	public void deleteNode ( String nodePath , Session session ) throws RepositoryException { LOG . debug ( _CHAR Deleting node _CHAR _CHAR , nodePath ) ; if ( session . nodeExists ( nodePath ) ) { session . removeItem ( nodePath ) ; session . save ( ) ; } }
9977	public static void spawnAll ( ) { if ( ! DeveloperConfig . SPAWN_ENABLE ) { log . info ( _CHAR Spawns are disabled _CHAR ) ; return ; } for ( WorldMapTemplate worldMapTemplate : DataManager . WORLD_MAPS_DATA ) { if ( worldMapTemplate . isInstance ( ) ) { continue ; } spawnBasedOnTemplate ( worldMapTemplate ) ; } DataManager . SPAWNS_DATA2 . clearTemplates ( ) ; printWorldSpawnStats ( ) ; ConquestSpawnManager . spawnAll ( ) ; }
10057	public void showMetrics ( ) { timer . show ( toString ( ) ) ; }
10068	private void stop ( ) { stopTimeout ( ) ; if ( this . status != AccelListener . STOPPED ) { this . sensorManager . unregisterListener ( this ) ; } this . setStatus ( AccelListener . STOPPED ) ; this . accuracy = SensorManager . SENSOR_STATUS_UNRELIABLE ; }
10078	@ Override public void empty ( Augmentations augmentations ) throws XNIException { }
10103	public static int hashBytes ( byte [ ] bytes , int length ) { return hashBytes ( bytes , _NUM , length ) ; }
10121	public static long bytes2LedgerId ( byte [ ] data ) { return Long . parseLong ( new String ( data , UTF_8 ) ) ; }
10130	public void advance ( ) throws ConcurrentModificationException , NoSuchElementException { if ( referenceCount != count ) { throw new ConcurrentModificationException ( ) ; } current = next ; try { while ( states [ ++ next ] != FULL ) { } } catch ( ArrayIndexOutOfBoundsException e ) { next =- _NUM ; if ( current < _NUM ) { throw new NoSuchElementException ( ) ; } } }
10144	@ Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_user ) ; }
10155	public SpaceTypeDescriptorBuilder fifoSupport ( FifoSupport fifoSupport ) { if ( fifoSupport == _NULL ) throw new IllegalArgumentException ( _CHAR Argument can not be _NULL - _CHAR . _CHAR ) ; this . _fifoSupport = fifoSupport ; return this ; }
10166	public final int yystate ( ) { return zzLexicalState ; }
10185	public static SM_SYSTEM_MESSAGE STR_MSG_Heal_TO_ME ( int num0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , num0 ) ; }
10211	public boolean isSubMenu ( ) { return isSubMenu ; }
10222	public boolean isShowTitle ( ) { return showTitle ; }
10226	protected void clearRowsAndCategories ( boolean clearData ) { clearRows ( clearData ) ; clearCategories ( ) ; }
10268	public static String toPEMformat ( X509Certificate [ ] certificateChain ) { StringWriter sw = new StringWriter ( ) ; for ( X509Certificate certificate : certificateChain ) { sw . append ( toPEMformat ( certificate ) ) ; } return sw . toString ( ) ; }
10303	public VideoGetNewTagsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
10329	private String id ( Var instance ) { return instance . admin ( ) . getId ( ) . get ( ) ; }
10366	public void resume ( ) { isPaused = _BOOL ; }
10404	private void createVendorOptionPanel ( ) { vendorOptionTextFactory = new VendorOptionTextFactory ( getClass ( ) , getFunctionManager ( ) ) ; List < VendorOptionInterface > veList = vendorOptionTextFactory . getVendorOptionList ( ) ; if ( veList != _NULL ) { for ( VendorOptionInterface extension : veList ) { extension . setParentPanel ( this ) ; } } }
10420	public void configure ( UpdateTreeStructureInterface sldTree , JTree symbolTree , DefaultTreeModel treeModel , List < RenderSymbolInterface > renderList ) { this . sldTree = sldTree ; this . symbolTree = symbolTree ; this . treeModel = treeModel ; this . renderList = renderList ; }
10422	public void put ( String sample , HiddenAttribute attribute , Object value ) { put ( sample , attribute . toString ( ) , value ) ; }
10456	public static GenericValue create ( GenericValue value ) { GenericValue newValue = new GenericValue ( ) ; newValue . init ( value ) ; return newValue ; }
10458	public static SM_SYSTEM_MESSAGE STR_MSG_GET_ITEM ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
10465	public RequestHandle delete ( Context context , String url , Header [ ] headers , ResponseHandlerInterface responseHandler ) { final HttpDelete delete = new HttpDelete ( url ) ; if ( headers != _NULL ) delete . setHeaders ( headers ) ; return sendRequest ( httpClient , httpContext , delete , _NULL , responseHandler , context ) ; }
10466	public static SM_SYSTEM_MESSAGE STR_GATHER_SUCCESS_2_GATHER ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
10475	public static void initAcceptableFilterList ( EntryArrivedRemoteEvent theEvent , int capacity ) { theEvent . initAcceptableFilterList ( capacity ) ; }
10498	public boolean isItemViewSwipeEnabled ( ) { initializeItemTouchHelper ( ) ; return this . mDefaultItemTouchHelper . isItemViewSwipeEnabled ( ) ; }
10521	public final void sendPacket ( LsServerPacket bp ) { synchronized ( guard ) { if ( isWriteDisabled ( ) ) { return ; } log . debug ( _CHAR sending packet : _CHAR + bp ) ; sendMsgQueue . addLast ( bp ) ; enableWriteInterest ( ) ; } }
10523	public static JavaRDD < List < Writable >> zeromeanUnitVariance ( Schema schema , JavaRDD < List < Writable >> data ) { return zeromeanUnitVariance ( schema , data , Collections . < String > emptyList ( ) ) ; }
10554	@ Override public WebElement findElementByCssSelector ( String cssSelector ) { return ( ( FindsByCssSelector ) super . getWrappedDriver ( ) ) . findElementByCssSelector ( cssSelector ) ; }
10590	private void checkInterpolation ( ) throws MathIllegalArgumentException { if ( abscissae . isEmpty ( ) ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . EMPTY_INTERPOLATION_SAMPLE ) ; } }
10600	public RevealBuilder withDelayBetweenChildAnimation ( final int delayBetweenChildAnimation ) { this . mDelayBetweenChildAnimation = delayBetweenChildAnimation ; return this ; }
10606	@ Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_me ) ; }
10623	public void addValue ( double value ) { secondMoment . increment ( value ) ; minImpl . increment ( value ) ; maxImpl . increment ( value ) ; sumImpl . increment ( value ) ; sumOfSquaresImpl . increment ( value ) ; sumOfLogsImpl . increment ( value ) ; n ++ ; }
10627	public Vector zero ( ) { x = _NUM ; y = _NUM ; z = _NUM ; return this ; }
10654	public int size ( ) { return events . size ( ) ; }
10667	private void broadcastToAllianceMembers ( final Player player ) { player . getPlayerAlliance2 ( ) . sendPacket ( new SM_MESSAGE ( player , message , type ) ) ; }
10672	public static byte [ ] base64DecodeString ( String base64String ) { try { return Base64 . decodeBase64 ( base64String . getBytes ( _CHAR UTF - _NUM _CHAR ) ) ; } catch ( Exception e ) { throw new RuntimeException ( _CHAR Exception while decoding '' + base64String ) ; } }
10677	public SecureSendNotificationQuery sendNotification ( ServiceActor actor , String message ) { return new SecureSendNotificationQuery ( getClient ( ) , actor , message ) ; }
10716	public void startDocument ( ) { fValueStores . clear ( ) ; fIdentityConstraint2ValueStoreMap . clear ( ) ; fGlobalIDConstraintMap . clear ( ) ; fGlobalMapStack . removeAllElements ( ) ; }
10721	public RequestHandle delete ( String url , ResponseHandlerInterface responseHandler ) { return delete ( _NULL , url , responseHandler ) ; }
10741	public AccountBanUserQuery banUser ( UserActor actor , int userId ) { return new AccountBanUserQuery ( getClient ( ) , actor , userId ) ; }
10764	public double max ( ) { return m_max ; }
10769	@ Override protected void __setConfig ( Object config ) { m_spaceConfig = ( SpaceConfig ) config ; }
10784	public static final MediaFormat createSubtitleFormat ( String title , String language ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_TITLE , title ) ; format . setString ( KEY_LANGUAGE , language ) ; return format ; }
10795	public void selectAll ( boolean select ) { classificationViewer . selectAllNodes ( select ) ; classificationViewer . repaint ( ) ; }
10796	boolean deleteTheClientInTheRooms ( Client client ) { boolean result = _BOOL ; for ( int i = gameRooms . size ( ) - _NUM ; i > - _NUM ; i -- ) { if ( gameRooms . get ( i ) . exitTheRoom ( client ) ) { result = _BOOL ; break ; } } return result ; }
10799	public boolean isModified ( ) { return _modified ; }
10829	public DatabaseGetSchoolsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
10841	public Pet findOne ( String id ) { log . debug ( _CHAR Request to get Pet : { } _CHAR , id ) ; Pet pet = petRepository . findOne ( UUID . fromString ( id ) ) ; return pet ; }
10878	public boolean exist ( ) { return productionRun != _NULL ; }
10902	@ Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_multi_filter , container , _BOOL ) ; initModel ( ) ; initPresenter ( ) ; initView ( view ) ; messageManagePresenter . sendMessage ( _NUM , _NULL ) ; return view ; }
10933	public static Optional < String [ ] > lookup ( long code ) { String [ ] desc = DESCRIPTIONS . get ( code & _NUM ) ; return Optional . ofNullable ( desc ) ; }
10947	private int measureHeight ( int measureSpec ) { return MeasureSpec . getSize ( measureSpec ) ; }
10965	public static synchronized PropertiesSupport sharedInstance ( ) { if ( INSTANCE == _NULL ) INSTANCE = new PropertiesSupport ( ) ; return INSTANCE ; }
10984	public PhotosSaveQuery save ( UserActor actor ) { return new PhotosSaveQuery ( getClient ( ) , actor ) ; }
11009	public static SM_SYSTEM_MESSAGE STR_ABYSS_PVP_ON ( DescriptionId descriptionId ) { return new SM_SYSTEM_MESSAGE ( _NUM , descriptionId ) ; }
11021	private int computeSize ( Map < Integer , Integer [ ] > integerMap ) { int count = _NUM ; for ( Integer taxonId : integerMap . keySet ( ) ) { Integer value = integerMap . get ( taxonId ) [ _NUM ] ; if ( value != _NULL ) count += value ; } return count ; }
11049	public MessagesDeleteQuery delete ( Actor actor ) { return new MessagesDeleteQuery ( getClient ( ) , actor ) ; }
11096	static ShapeDrawable makeShapeDrawable ( int color ) { ShapeDrawable badgeBackground = new ShapeDrawable ( new OvalShape ( ) ) ; badgeBackground . setIntrinsicWidth ( _NUM ) ; badgeBackground . setIntrinsicHeight ( _NUM ) ; badgeBackground . getPaint ( ) . setColor ( color ) ; return badgeBackground ; }
11097	public static byte [ ] ledgerId2Bytes ( long ledgerId ) { return Long . toString ( ledgerId ) . getBytes ( UTF_8 ) ; }
11113	public void addImageOutlineSymbolizerToRaster ( Symbolizer symbolizer ) { Symbolizer selectedSymbolizer = this . symbolData . getSymbolizer ( ) ; if ( selectedSymbolizer == _NULL ) { ConsoleManager . getInstance ( ) . error ( this , _CHAR symbolizer == _NULL _CHAR ) ; } else { if ( selectedSymbolizer instanceof RasterSymbolizer ) { RasterSymbolizer rasterSymbolizer = ( RasterSymbolizer ) selectedSymbolizer ; rasterSymbolizer . setImageOutline ( symbolizer ) ; } } }
11119	public PhotosCreateAlbumQuery createAlbum ( UserActor actor , String title ) { return new PhotosCreateAlbumQuery ( getClient ( ) , actor , title ) ; }
11140	public synchronized ZooKeeperClientBuilder connectionTimeoutMs ( int connectionTimeoutMs ) { this . conectionTimeoutMs = connectionTimeoutMs ; return this ; }
11143	public void activateFetched ( ) { this . firebaseRemoteConfig . activateFetched ( ) ; }
11144	public static synchronized DataSourceWindowManager sharedInstance ( ) { if ( sharedInstance == _NULL ) sharedInstance = new DataSourceWindowManager ( ) ; return sharedInstance ; }
11149	public < T extends Fragment > T into ( T fragment ) { fragment . setArguments ( get ( ) ) ; return fragment ; }
11160	@ Override public ListenableFuture < StatusResponse > statusMember ( ) { return this . futureStub . status ( StatusRequest . getDefaultInstance ( ) ) ; }
11175	private void editWorldAction ( ) { synchronized ( Simulation . LOCK ) { EditWorldDialog . show ( ControlUtilities . getParentWindow ( this ) , this . simulation . getWorld ( ) ) ; } this . model . nodeChanged ( this . root ) ; }
11190	public static DmnRestUrlBuilder usingBaseUrl ( String baseUrl ) { if ( baseUrl == _NULL ) throw new ActivitiDmnIllegalArgumentException ( _CHAR baseUrl can not be _NULL _CHAR ) ; if ( baseUrl . endsWith ( _CHAR / _CHAR ) ) baseUrl = baseUrl . substring ( _NUM , baseUrl . length ( ) - _NUM ) ; return new DmnRestUrlBuilder ( baseUrl ) ; }
11217	@ Override public void startDTD ( XMLLocator locator , Augmentations augmentations ) throws XNIException { }
11219	public static void sendVerificationToken ( AirMapCallback < Void > listener ) { String url = String . format ( pilotSendVerifyUrl , AirMap . getUserId ( ) ) ; AirMap . getClient ( ) . post ( url , new VoidCallback ( listener ) ) ; }
11247	public void suppressAllWarnings ( ) { diagSuppressor . addPattern ( this , _CHAR . * _CHAR ) ; }
11277	public void unlockUserInput ( ) { commandManager . setEnableCritical ( _BOOL ) ; locked = _BOOL ; }
11323	public CatchOptions useBestBall ( boolean useBestPokeball ) { this . useBestPokeball = useBestPokeball ; return this ; }
11356	public DistributedLogClientBuilder finagleNameStr ( String finagleNameStr ) { DistributedLogClientBuilder newBuilder = newBuilder ( this ) ; newBuilder . _routingServiceBuilder = RoutingUtils . buildRoutingService ( finagleNameStr ) ; newBuilder . _enableRegionStats = _BOOL ; return newBuilder ; }
11368	public static boolean isEmpty ( Object s ) { return s == _NULL || X . EMPTY . equals ( s ) || X . EMPTY . equals ( s . toString ( ) . trim ( ) ) ; }
11386	@ Override public boolean isPanelEnabled ( ) { return multiOptionGroupEnabled ; }
11418	public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_ENEMY_BLOCK ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
11456	public int hashCode ( ) { return this . hashCode ; }
11473	public CPUAccountingMode cpuAccountingMode ( ) { return cpuAccountingMode ; }
11495	public WallPinQuery pin ( UserActor actor , int postId ) { return new WallPinQuery ( getClient ( ) , actor , postId ) ; }
11512	public static void refreshAllWidgets ( Context context ) { context . sendBroadcast ( new Intent ( getBookmarkAppWidgetUpdateAction ( context ) , _NULL , context , BookmarkThumbnailWidgetProvider . class ) ) ; }
11517	public GroupsEditQuery email ( String value ) { return unsafeParam ( _CHAR email _CHAR , value ) ; }
11578	public static final void show ( Window owner , String title , String message , Exception e ) { ExceptionDialog dialog = new ExceptionDialog ( owner , title , message , e ) ; dialog . setLocationRelativeTo ( owner ) ; dialog . setVisible ( _BOOL ) ; }
11628	public boolean isClosed ( ) { return m_closed ; }
11701	public boolean isEmpty ( ) { return q . isEmpty ( ) ; }
11722	public boolean isCurrentSet ( ) { return currentIterator != _NULL && currentId != _NULL ; }
11733	public StatusSetQuery text ( String value ) { return unsafeParam ( _CHAR text _CHAR , value ) ; }
11744	private void shiftWorldAction ( ) { Vector2 shift = ShiftWorldDialog . show ( ControlUtilities . getParentWindow ( this ) ) ; if ( shift != _NULL ) { synchronized ( Simulation . LOCK ) { this . simulation . getWorld ( ) . shift ( shift ) ; } } }
11755	@ Override public void startElement ( QName element , XMLAttributes attributes , Augmentations augs ) throws XNIException { handleStartElement ( element , attributes , augs ) ; if ( fDocumentHandler != _NULL ) { fDocumentHandler . startElement ( element , attributes , augs ) ; } }
11779	public static InventoryType toBukkit ( cn . nukkit . inventory . InventoryType nukkit ) { return nukkitToBukkit . get ( nukkit ) ; }
11793	public Vector divide ( Vector vec ) { x /= vec . x ; y /= vec . y ; z /= vec . z ; return this ; }
11804	public BoardGetCommentsQuery needLikes ( Boolean value ) { return unsafeParam ( _CHAR need_likes _CHAR , value ) ; }
11807	public static String addFileExtensionSeparator ( String fileExtension ) { return _CHAR . _CHAR + fileExtension ; }
11811	private String createIndentation ( int numChars ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = _NUM ; i < numChars ; i ++ ) sb . append ( _CHAR _CHAR ) ; return sb . toString ( ) ; }
11830	public void printContext ( PrintStream out ) { out . println ( getMessage ( ) ) ; out . print ( context ) ; }
11856	public void handleOMADownload ( DownloadInfo downloadInfo , long downloadId ) { OMAParserTask task = new OMAParserTask ( downloadInfo , downloadId ) ; task . execute ( ) ; }
11857	public void rightTrim ( double second ) { trim ( _NUM , second ) ; }
11862	public static void throwable ( int level , String msg , Throwable throwable ) { log ( level , _NUM , _NULL , new ThrowableFormatter ( ) , _NULL , msg , throwable ) ; }
11864	public PhotosGetAllQueryWithExtended count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
11865	public static void clearCache ( ) { fontMap . clear ( ) ; }
11866	@ Override public void any ( Augmentations augmentations ) throws XNIException { }
11896	public PagesSaveAccessQuery view ( PagesSaveAccess value ) { return unsafeParam ( _CHAR view _CHAR , value ) ; }
11899	@ Override public void endDTD ( Augmentations augs ) throws XNIException { fInDTD = _BOOL ; try { if ( fLexicalHandler != _NULL ) { fLexicalHandler . endDTD ( ) ; } } catch ( SAXException e ) { throw new XNIException ( e ) ; } if ( fDeclaredAttrs != _NULL ) { fDeclaredAttrs . clear ( ) ; } }
11938	public void init ( MissionInit minit ) { initBusses ( ) ; this . stateMachine = new ServerStateMachine ( ServerState . WAITING_FOR_MOD_READY , minit ) ; }
11948	@ Override public List < RoleModule > searchRoleModule ( RoleModule roleModule ) { return sessionTemplate . selectList ( NAMESPACE + _CHAR . searchRoleModule _CHAR , roleModule ) ; }
11960	public boolean runAfter ( List list , int max ) { return _BOOL ; }
11992	@ Override public ListenableFuture < LeaseKeepAliveResponse > keepAliveOnce ( long leaseId ) { StreamObserver < LeaseKeepAliveRequest > requestObserver = this . leaseStub . leaseKeepAlive ( keepAliveResponseStreamObserver ) ; requestObserver . onNext ( newKeepAliveRequest ( leaseId ) ) ; requestObserver . onCompleted ( ) ; throw new UnsupportedOperationException ( ) ; }
12102	public static boolean isGlyphFlag ( ) { return glyphFlag ; }
12114	public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HE_BECOME_OFFLINE ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
12131	public static AnalysisEngine defaultAnalysisEngine ( ) { try { if ( defaultAnalysisEngine == _NULL ) defaultAnalysisEngine = AnalysisEngineFactory . createEngine ( AnalysisEngineFactory . createEngineDescription ( SentenceAnnotator . getDescription ( ) , TokenizerAnnotator . getDescription ( ) ) ) ; return defaultAnalysisEngine ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
12135	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR USE_AREA \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
12147	public void add ( Unit u ) { getBody ( ) . getUnits ( ) . add ( u ) ; }
12155	@ Override public void execute ( @ NotNull RecipeExecutor executor ) throws TemplateProcessingException { if ( myFolder == _NULL ) { executeInstructions ( executor ) ; } else { executor . pushFolder ( myFolder ) ; try { executeInstructions ( executor ) ; } finally { executor . popFolder ( ) ; } } }
12180	private Object readResolve ( ) { return LazyHolder . INSTANCE ; }
12188	public CatchOptions maxRazzberries ( int maxRazzBerries ) { this . maxRazzBerries = maxRazzBerries ; return this ; }
12190	private void validateUpdateColumns ( ) throws SQLException { for ( UpdateColumn column : _updatedColumns ) { column . createColumnData ( this ) ; if ( column . isSelfIncremented ( ) ) column . validateSelfIncrementedColumnName ( this ) ; } }
12243	public void cleanPAG ( ) { simple . clear ( ) ; load . clear ( ) ; store . clear ( ) ; alloc . clear ( ) ; simpleInv . clear ( ) ; loadInv . clear ( ) ; storeInv . clear ( ) ; allocInv . clear ( ) ; }
12258	public void removeGroup ( String group ) throws ObjectLacksException { assertContains ( group ) ; groups . remove ( group ) ; }
12269	@ Override public Element createElementNS ( String namespaceURI , String qualifiedName ) throws DOMException { return new PSVIElementNSImpl ( this , namespaceURI , qualifiedName ) ; }
12270	public static JavaRDD < List < Writable >> normalize ( Schema schema , JavaRDD < List < Writable >> data ) { return normalize ( schema , data , _NUM , _NUM , Collections . < String > emptyList ( ) ) ; }
12275	public void removeSelectionListener ( ExplorerSelectionListener listener ) { selectionListeners . remove ( listener ) ; }
12278	public Player findPlayer ( String name ) { return allPlayers . get ( name ) ; }
12279	public boolean isAbnormalSet ( AbnormalState id ) { return ( abnormals & id . getId ( ) ) == id . getId ( ) ; }
12309	public SaveHeaderGroup copy ( ) { SaveHeaderGroup clone = new SaveHeaderGroup ( ) ; clone . headers . addAll ( this . headers ) ; return clone ; }
12328	public Module module ( String module ) { for ( Module m : modules . values ( ) ) { if ( m . name . equals ( module ) ) { return m ; } } return _NULL ; }
12337	public void removeValidationRuleGroup ( ValidationRuleGroup validationRuleGroup ) { groups . remove ( validationRuleGroup ) ; validationRuleGroup . getMembers ( ) . remove ( this ) ; }
12368	public Builder baseUrl ( String baseUrl ) { checkNotNull ( baseUrl , _CHAR baseUrl == _NULL _CHAR ) ; HttpUrl httpUrl = HttpUrl . parse ( baseUrl ) ; if ( httpUrl == _NULL ) { throw new IllegalArgumentException ( _CHAR Illegal URL : _CHAR + baseUrl ) ; } return baseUrl ( httpUrl ) ; }
12381	public static String dateToStringWithTime ( Date date ) { return dateToString ( date , DATETIME_PATTERN ) ; }
12386	public static final void emoteStartReturning ( Npc owner ) { PacketSendUtility . broadcastPacket ( owner , new SM_EMOTION ( owner , EmotionType . START_EMOTE2 , _NUM , _NUM ) ) ; PacketSendUtility . broadcastPacket ( owner , new SM_EMOTION ( owner , EmotionType . NEUTRALMODE , _NUM , _NUM ) ) ; }
12392	public void rectValuesToPixel ( List < RectF > rects ) { Matrix m = getValueToPixelMatrix ( ) ; for ( int i = _NUM ; i < rects . size ( ) ; i ++ ) m . mapRect ( rects . get ( i ) ) ; }
12395	public Builder stepsSubtitles ( String [ ] stepsSubtitles ) { this . stepsSubtitles = stepsSubtitles ; return this ; }
12397	public void start ( ) { mVibrator = ( Vibrator ) mContext . getSystemService ( Service . VIBRATOR_SERVICE ) ; mIsGloballyEnabled = checkGlobalSetting ( mContext ) ; Uri uri = Settings . System . getUriFor ( Settings . System . HAPTIC_FEEDBACK_ENABLED ) ; mContext . getContentResolver ( ) . registerContentObserver ( uri , _BOOL , mContentObserver ) ; }
12399	private void updateNotification ( int id , Notification notification ) { mNotificationManager . notify ( NOTIFICATION_NAMESPACE , id , notification ) ; }
12401	protected AdsGetAdsPostsReachQuery adsIds ( String value ) { return unsafeParam ( _CHAR ads_ids _CHAR , value ) ; }
12466	public GroupsBanUserQuery comment ( String value ) { return unsafeParam ( _CHAR comment _CHAR , value ) ; }
12472	public Session store ( ) { long expired = Global . getLong ( _CHAR session . alive _CHAR , X . AWEEK ) ; if ( expired > _NUM ) { expired = System . currentTimeMillis ( ) + expired ; } else { expired =- _NUM ; } return store ( expired ) ; }
12483	public PhotosSaveOwnerPhotoQuery photo ( String value ) { return unsafeParam ( _CHAR photo _CHAR , value ) ; }
12508	public boolean isError ( ) { return state . equals ( ERROR ) ; }
12557	public boolean isEmpty ( ) { return state . equals ( EMPTY ) ; }
12559	@ Override public void onMapReady ( GoogleMap googleMap ) { this . annotationViewWrapper = ( AnnotationViewWrapper ) this . getView ( ) . findViewById ( R . id . annotationViewWrapper ) ; this . googleMap = googleMap ; this . googleMap . setOnCameraMoveListener ( this ) ; this . googleMap . setOnCameraMoveStartedListener ( this ) ; this . googleMap . setOnMapLoadedCallback ( this ) ; this . setMapRenderer ( this . mapRenderer ) ; }
12588	public static final MediaFormat createVideoFormat ( String mime , int width , int height ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_WIDTH , width ) ; format . setInteger ( KEY_HEIGHT , height ) ; return format ; }
12610	public static ArrayList < String > splitString ( String text ) { return splitString ( text , MAX_SIZE ) ; }
12623	public static final void shuffleList ( List l , int repeat ) { for ( int iCnt = _NUM ; iCnt < repeat ; iCnt ++ ) shuffleList ( l ) ; }
12649	public static final NamespaceEphemeralData acquireNameSpace ( ZooKeeper zkc , String path , NamespaceEphemeralData value ) throws KeeperException , InterruptedException , JsonGenerationException , JsonMappingException , IOException { String data = jsonMapper . writeValueAsString ( value ) ; createZnodeOptimistic ( zkc , path , data , CreateMode . EPHEMERAL ) ; return value ; }
12663	public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_INTERVAL_TO_ME ( int num0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , num0 ) ; }
12666	public static float atan2 ( float fY , float fX ) { return ( float ) Math . atan2 ( fY , fX ) ; }
12672	private void unwatchScreen ( ) { windowManager . removeView ( touchView ) ; touchViewParams = _NULL ; touchView = _NULL ; screenScanHandler . removeCallbacks ( screenScanRunnable ) ; screenScanRunnable = _NULL ; screenScanHandler = _NULL ; }
12722	protected void resetCommon ( ) throws XNIException { int count = fCommonComponents . size ( ) ; for ( int i = _NUM ; i < count ; i ++ ) { XMLComponent c = ( XMLComponent ) fCommonComponents . get ( i ) ; c . reset ( this ) ; } }
12779	public synchronized void end ( Component component ) { this . active = _BOOL ; this . offset = _NULL ; this . beginPosition = _NULL ; component . setCursor ( Cursor . getPredefinedCursor ( Cursor . DEFAULT_CURSOR ) ) ; }
12806	public final void warn ( final Object o ) { log ( Level . WARN , o ) ; }
12849	public static float cos2 ( float fValue ) { return sin2 ( fValue + HALF_PI ) ; }
12867	private boolean isValidItemIndex ( int index ) { return viewAdapter != _NULL && viewAdapter . getItemsCount ( ) > _NUM && ( isCyclic || index >= _NUM && index < viewAdapter . getItemsCount ( ) ) ; }
12868	private final boolean eq ( long v1 , long v2 ) { return v1 == v2 ; }
12885	public String cleanTextValueSafe ( String text ) { if ( text != _NULL ) { return text ; } else { return text ; } }
12887	@ Override public boolean equals ( Object wrapper ) { return Arrays . equals ( _interfaceNames , ( ( NamesWrapper ) wrapper ) . _interfaceNames ) ; }
12911	public boolean isBatching ( ) { return batch ; }
12913	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR _CHAR ( _CHAR + _CHAR _CHAR TEXT PRIMARY KEY NOT NULL , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR INTEGER ) ; _CHAR ) ; }
12943	@ RequestMapping ( method = RequestMethod . POST , value = _CHAR orgUnits / { id } / dataSets _CHAR ) @ ResponseBody public String saveDataSetValues2_8 ( @ PathVariable int id , @ RequestBody DataSetValue dataSetValue ) throws NotAllowedException { facilityReportingService . saveDataSetValues ( getUnit ( id ) , dataSetValue ) ; return DATASET_REPORT_UPLOADED ; }
12994	@ Override public WebElement findElementByLinkText ( String linkText ) { return ( ( FindsByLinkText ) super . getWrappedDriver ( ) ) . findElementByLinkText ( linkText ) ; }
12995	@ Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_download_mange ) ; }
13031	public void addOnItemTouchListener ( RecyclerView . OnItemTouchListener listener ) { mRecycler . addOnItemTouchListener ( listener ) ; }
13033	public final int yystate ( ) { return zzLexicalState ; }
13059	private void addExtentEntry ( ) { extentModel . addNewEntry ( ) ; removeExtentButton . setEnabled ( _BOOL ) ; }
13061	public static void dropTable ( Database db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR MY_COLLECTION \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
13075	private void createVendorOptionPanel ( ) { vendorOptionFillFactory = new VendorOptionFillFactory ( getPanelId ( ) , getFunctionManager ( ) ) ; List < VendorOptionInterface > voList = vendorOptionFillFactory . getVendorOptionList ( ) ; if ( voList != _NULL ) { for ( VendorOptionInterface vendorOption : voList ) { vendorOption . setParentPanel ( this ) ; } } }
13081	Uuid landlordUuid ( ) { return landlordUuid ; }
13087	public void reset ( ) { this . baseAddressMap . clear ( ) ; this . cursor = _NUM ; }
13109	public boolean next ( ) { return seek ( MDB_NEXT ) ; }
13116	public void removeGroupMessageListener ( GroupMessageListener groupMessageListener ) { groupMessageListeners . remove ( groupMessageListener ) ; }
13121	public void incrementSelectedStyledLayerIndex ( ) { this . selectedStyledLayerIndex ++ ; }
13198	public NewsfeedSearchQueryWithExtended searchExtended ( ) { return new NewsfeedSearchQueryWithExtended ( getClient ( ) ) ; }
13201	public void changeAlpha ( int value ) { this . alpha += value ; if ( alpha > _NUM ) { alpha = _NUM ; } else if ( alpha < _NUM ) { alpha = _NUM ; } }
13226	protected void beforeMove ( ) { if ( ! Silent ) synchronized ( System . err ) { System . err . println ( getLocalName ( ) + _CHAR is now migrating . '' ) ; } }
13240	public void lastPage ( ) { goToPage ( getRowCount ( ) , getNumPages ( ) ) ; }
13247	public void removeExpansionListener ( ExplorerExpansionListener listener ) { expansionListeners . remove ( listener ) ; }
13250	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR BOOK \ _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR \ _CHAR BOOK_NAME \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR BOOK_ISBN \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR BOOK_ID \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR REQUEST_ID \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR DOWNLOAD_STATUS \ _CHAR TEXT ) ; _CHAR ) ; }
13271	public static Map < String , Object > alwaysFailProcessor ( DispatchContext dctx , Map < String , ? extends Object > context ) { Locale locale = ( Locale ) context . get ( _CHAR locale _CHAR ) ; return ServiceUtil . returnError ( UtilProperties . getMessage ( resource , _CHAR AccountingPaymentTestAuthorizationAlwaysFailed _CHAR , locale ) ) ; }
13280	protected void readRasterConfigFile ( VendorOptionFactoryInterface vendorOptionFactory , UpdateSymbolInterface parent , String filename ) { internal_readConfigFile ( vendorOptionFactory , parent . getClass ( ) , parent , filename , _BOOL , _BOOL ) ; }
13297	public void createKey ( SocketChannel channel ) { _keysToCreate . add ( channel ) ; _keysToCreateCounter . incrementAndGet ( ) ; getSelector ( ) . wakeup ( ) ; }
13298	@ Override public boolean isDataPresent ( ) { return _BOOL ; }
13366	public boolean isFilterLogTypeEnabled ( int type ) { return ( logDisabledTypesMask & getMask ( type ) ) == _NUM ; }
13368	public void inc ( ) { count . add ( _NUM ) ; }
13391	public void jsFnCall ( String jsString ) { showDialog ( jsString ) ; }
13445	public static void enable ( String event ) { instance . disabled . remove ( event ) ; log ( event + _CHAR enabled _CHAR ) ; }
13465	public boolean reverseColours ( ) { return reverseColours ; }
13477	public AccountUnbanUserQuery unbanUser ( UserActor actor , int userId ) { return new AccountUnbanUserQuery ( getClient ( ) , actor , userId ) ; }
13483	public static void f ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_FATAL ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . wtf ( tag , msg ) ; }
13492	protected void stopResetExpiredJobsThread ( ) { if ( resetExpiredJobThread != _NULL ) { try { resetExpiredJobThread . join ( ) ; } catch ( InterruptedException e ) { log . warn ( _CHAR Interrupted while waiting for the reset expired jobs thread to terminate '' , e ) ; } resetExpiredJobThread = _NULL ; } }
13495	public void destroyReaderModeControl ( ) { if ( mControl != _NULL ) { ( ( ViewGroup ) mControl . getParent ( ) ) . removeView ( mControl ) ; mControl = _NULL ; if ( mResourceLoader != _NULL ) { mResourceLoader . unregisterResource ( R . id . reader_mode_view ) ; } } }
13497	void put ( int key , MvvmViewModel cacheViewModel ) { cache . put ( key , cacheViewModel ) ; }
13530	public boolean gotoLast ( ) { currentTaxonIterator = _NULL ; currentTaxonId = _NULL ; return isCurrentSet ( ) ; }
13584	public List < Face > findFaces ( @ NotNull String imageUrl ) { return faceTaskBuilder . detectFace ( _BOOL , _BOOL , FaceAttributes . ALL , imageUrl ) . withResult ( ) ; }
13596	public static int calculateXenStorage ( int deliveryControllerCount , int vCenterServerCount ) { final int dc = Integer . parseInt ( VDICalculator . DEFAULTS . getString ( _CHAR xen . controller . storage . default _CHAR ) ) * deliveryControllerCount ; final int vc = Integer . parseInt ( VDICalculator . DEFAULTS . getString ( _CHAR xen . vcenter . storage . default _CHAR ) ) * vCenterServerCount ; return dc + vc ; }
13629	public boolean isEmpty ( ) { synchronized ( contexts ) { return contexts . isEmpty ( ) ; } }
13632	public static long [ ] calculateDifference ( Date startDate , Date endDate ) { return calculateDifference ( endDate . getTime ( ) - startDate . getTime ( ) ) ; }
13636	public static SM_SYSTEM_MESSAGE STR_GATHER_START_5_FORESTRY ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
13654	@ Override public String toString ( ) { return _CHAR DummyFreeTTSVoice US - English _CHAR ; }
13667	protected void accumulateLabel ( String path ) { String name = getLabel ( path ) ; if ( ! labels . contains ( name ) ) labels . add ( name ) ; }
13669	public static StringBuilder regex ( String s ) { return escapeString ( s , _CHAR ) . buffer . insert ( _NUM , _CHAR // '' ) . append ( '' // '' ) ; }
13690	public void beginOperation ( ISVNClientAdapter aSvnClient ) { lock . acquire ( ) ; this . svnClient = aSvnClient ; aSvnClient . addNotifyListener ( this ) ; if ( operationNotifyListener != _NULL ) { aSvnClient . setProgressListener ( operationNotifyListener ) ; } }
13699	private final boolean eq ( long v1 , long v2 ) { return v1 == v2 ; }
13750	public PhotosGetQueryWithExtended rev ( Boolean value ) { return unsafeParam ( _CHAR rev _CHAR , value ) ; }
13775	public static void checkUiThread ( ) { if ( Looper . getMainLooper ( ) != Looper . myLooper ( ) ) { throw new IllegalStateException ( _CHAR Must be called from the main thread . Was : _CHAR + Thread . currentThread ( ) ) ; } }
13779	public static SM_SYSTEM_MESSAGE STR_MSG_PvPZONE_HOSTILE_DEATH_TO_ME ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
13803	public static void unpublishAllServices ( ) throws RpcException { try { ServicePublisher . unpublishAllServices ( ) ; } catch ( RegistryException e ) { throw new RpcException ( _CHAR error while unpublishing all services '' , e ) ; } }
13834	public void onAddIndex ( AddIndexData addIndexData ) { }
13844	public final int yystate ( ) { return zzLexicalState ; }
13852	public static LinkedHashSet < PhysicalTableDefinition > buildHourlyTableDefinitions ( TestDimensions testDimensions ) { return Utils . asLinkedHashSet ( new PhysicalTableDefinition ( HOURLY , HOUR . buildZonedTimeGrain ( DateTimeZone . UTC ) , testDimensions . getDimensionConfigurationsByApiName ( OTHER ) ) ) ; }
13870	public void showMetrics ( ) { }
13904	public static RasterSymbolizer createDefaultRasterSymbolizer ( ) { RasterSymbolizer rasterSymbolizer = styleFactory . createRasterSymbolizer ( ) ; return rasterSymbolizer ; }
13949	public void toString ( StringBuffer s ) { super . toString ( s ) ; }
13956	public float progressValue ( ) { return mProgressValue ; }
13964	public boolean isCurrentSelected ( ) { return isCurrentSet ( ) && selected . contains ( current ) ; }
13965	public static Point randomStep ( Point point ) { point . setLongitude ( point . getLongitude ( ) + randomStep ( ) ) ; point . setLatitude ( point . getLatitude ( ) + randomStep ( ) ) ; return point ; }
13993	public void removeAllGraphModelListeners ( ) { m_listeners . clear ( ) ; }
14013	public AemContextMenu open ( final WebElement webElement ) { bobcatWait . withTimeout ( Timeouts . BIG ) . until ( _NULL , _NUM ) ; return this ; }
14055	public void showMetrics ( ) { }
14057	protected void onDownloadFailed ( String fileName ) { mDownloadSnackbarController . onDownloadFailed ( fileName ) ; }
14089	public static void v ( String tag , String msg ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } Log . v ( tag , msg ) ; }
14114	@ Override public final void endDTD ( Augmentations augs ) throws XNIException { super . endDTD ( augs ) ; fOpStack = _NULL ; fGroupIndexStack = _NULL ; fGroupIndexStackSizes = _NULL ; }
14127	@ Override public void endDocument ( Augmentations augs ) throws XNIException { if ( fDocumentHandler != _NULL ) { fDocumentHandler . endDocument ( augs ) ; } }
14137	public static Spacer create ( ) { return new Spacer ( ) ; }
14144	public static void f ( String tag , String msg , Throwable throwable ) { if ( sLevel > LEVEL_FATAL ) { return ; } Log . wtf ( tag , msg , throwable ) ; }
14175	public void rightClick ( int x , int y ) throws InterruptedException { click ( InputEvent . BUTTON3_MASK , x , y ) ; }
14210	public static int copy ( File src , File dest ) throws IOException { return copy ( new FileInputStream ( src ) , new FileOutputStream ( dest ) , _BOOL ) ; }
14219	public static SM_SYSTEM_MESSAGE STR_MSG_GET_SCORE_FOR_ENEMY ( int num0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , num0 ) ; }
14230	private boolean isValidItemIndex ( int index ) { return viewAdapter != _NULL && viewAdapter . getItemsCount ( ) > _NUM && ( isCyclic || index >= _NUM && index < viewAdapter . getItemsCount ( ) ) ; }
14246	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR AQI \ _CHAR ( _CHAR + _CHAR \ _CHAR AREAID \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR AQI \ _CHAR INTEGER , _CHAR + _CHAR \ _CHAR QUALITY \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR PM2_5 \ _CHAR INTEGER , _CHAR + _CHAR \ _CHAR PM10 \ _CHAR INTEGER , _CHAR + _CHAR \ _CHAR SO2 \ _CHAR INTEGER , _CHAR + _CHAR \ _CHAR NO2 \ _CHAR INTEGER ) ; _CHAR ) ; }
14247	@ Override public WebElement findElementByClassName ( String className ) { return ( ( FindsByClassName ) super . getWrappedDriver ( ) ) . findElementByClassName ( className ) ; }
14249	@ Override public void empty ( Augmentations augs ) throws XNIException { }
14285	public static boolean isEmpty ( CharSequence str ) { return TextUtils . isEmpty ( str ) ; }
14330	public int hashCode ( ) { return registrarID . hashCode ( ) ; }
14335	public void processUtterance ( Utterance utterance ) throws ProcessException { fixApostrophe ( utterance ) ; fixTheIy ( utterance ) ; }
14341	private int replicateAndfreeCache ( Context context ) { if ( context != _NULL ) { try { return performReplication ( context ) ; } finally { _cacheManager . freeCacheContext ( context ) ; } } return _NUM ; }
14348	public static void generateSampleXml ( File file ) { marshallChapters ( ChaptersXmlSampleBuilder . buildInputChapters ( ) , CHAPTERS_XML_SCHEME , file ) ; }
14361	private void sendResponse ( int response ) { try { synchronized ( serialPort . getOutputStream ( ) ) { serialPort . getOutputStream ( ) . write ( response ) ; serialPort . getOutputStream ( ) . flush ( ) ; logger . trace ( _CHAR Response SENT _CHAR ) ; } } catch ( IOException e ) { logger . error ( e . getMessage ( ) ) ; } }
14416	public static SM_SYSTEM_MESSAGE STR_MSG_SOLDOUT_ITEM ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
14424	@ Override public void endElement ( QName element , Augmentations augs ) throws XNIException { handleEndElement ( element , augs , _BOOL ) ; }
14468	public static void clearCache ( ) { strokeMap . clear ( ) ; }
14469	public static void v ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . v ( tag , msg ) ; }
14518	public boolean isNotSet ( ) { return isNotSet ; }
14544	public static void actions ( Context context , Api api , Action1 < GoogleApiClient > onClientConnected , Action1 < Throwable > onError ) { GoogleApiClientActions . create ( context . getApplicationContext ( ) , new ApiDefinition ( api ) , onClientConnected , onError ) ; }
14556	public void showMetrics ( ) { }
14568	public static final MediaFormat createSubtitleFormat ( String title , String language ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_TITLE , title ) ; format . setString ( KEY_LANGUAGE , language ) ; return format ; }
14581	public static final MediaFormat createAudioFormat ( String mime , int sampleRate , int channelCount ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_SAMPLE_RATE , sampleRate ) ; format . setInteger ( KEY_CHANNEL_COUNT , channelCount ) ; return format ; }
14595	public float length ( ) { return ( float ) waveHeader . getSubChunk2Size ( ) / waveHeader . getByteRate ( ) ; }
14606	public Boolean isReplicateNotifyTemplate ( ) { return replicateNotifyTemplate ; }
14624	public static Future < Void > closeSequence ( ExecutorService executorService , AsyncCloseable ... closeables ) { return closeSequence ( executorService , _BOOL , closeables ) ; }
14628	public static boolean canUseWarehouse ( Player player ) { for ( Restrictions restrictions : RESTRICTIONS [ RestrictionMode . canUseWarehouse . ordinal ( ) ] ) { if ( ! restrictions . canUseWarehouse ( player ) ) { return _BOOL ; } } return _BOOL ; }
14639	public boolean isPaging ( ) { return page != _NULL || pageSize != _NULL ; }
14647	protected MarketSearchQueryWithExtended ownerId ( int value ) { return unsafeParam ( _CHAR owner_id _CHAR , value ) ; }
14653	public void reset ( ) { setCapacity ( _NUM ) ; }
14656	private String encode ( String str ) { if ( str == _NULL ) { return _NULL ; } try { return URLEncoder . encode ( str , Charsets . UTF_8 . name ( ) ) ; } catch ( UnsupportedEncodingException e ) { throw Throwables . propagate ( e ) ; } }
14665	public static Integer calcResultViewIndex ( SolrDocumentList results , Integer viewSize ) { Integer viewIndex = _NULL ; if ( results != _NULL && viewSize != _NULL && viewSize > _NUM ) { long start = results . getStart ( ) ; viewIndex = ( int ) ( start / ( long ) viewSize ) ; } return viewIndex ; }
14667	public void clear ( ) { for ( int i = _NUM ; i < Divisions ; ++ i ) { size [ i ] = _NUM ; header [ i ] = _NULL ; } hasNewFigure = _BOOL ; }
14668	@ Override public IBinder onBind ( Intent intent ) { return _NULL ; }
14681	public void dec ( ) { count . add ( - _NUM ) ; }
14711	public GroupsGetBannedQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
14713	private String stripTags ( String content ) { return Jsoup . parse ( content ) . text ( ) ; }
14719	void openURI ( final String uri ) { try { java . awt . Desktop . getDesktop ( ) . browse ( new URI ( uri ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } catch ( URISyntaxException e ) { e . printStackTrace ( ) ; } }
14724	public void clearUndos ( ) { undo . discardAllEdits ( ) ; }
14739	public void drawNodeAndLabel ( Node v , boolean selected ) { draw ( v , selected ) ; drawLabel ( v , selected ) ; }
14759	public EventBuilder minPriority ( ) { this . event . setPriority ( Thread . MIN_PRIORITY ) ; return this ; }
14767	void assignLocalToLocal ( Local right , Local left ) { localsRemove ( left ) ; localsPutAll ( left , locals . get ( right ) ) ; if ( doCheck ) sanityCheck ( ) ; }
14769	private void unsubscribeFromAlarmTopic ( ) throws JMSException { alarmSession . close ( ) ; alarmSession = _NULL ; alarmConsumer . close ( ) ; alarmConsumer = _NULL ; LOGGER . debug ( _CHAR Successfully unsubscribed from alarm topic _CHAR ) ; }
14790	public static void clearComm ( AirMapFlight flight , @ Nullable AirMapCallback < Void > callback ) { FlightService . clearCommKey ( flight , callback ) ; }
14796	public void increaseNestingLevel ( ) { currentNestingLevel ++ ; }
14808	public void drawLabel ( Node v , boolean selected ) { viewer . getNV ( v ) . drawLabel ( gc , viewer . trans , viewer . getFont ( ) , selected ) ; if ( selected ) hiliteLabel ( v , ( NodeData ) v . getData ( ) ) ; }
14827	public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_HOSTILE_DEATH_TO_ME ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
14845	public void deleteByAppId ( Long appId ) { List < Config > configs = configDao . listByAppId ( appId , _NUM , _NUM ) ; if ( configs != _NULL && ! configs . isEmpty ( ) ) { for ( Config config : configs ) { delete ( config ) ; } } }
14854	public void swipeFlingOccurred ( long time , float x , float y , float tx , float ty , float vx , float vy ) { if ( ! mInSwipe ) return ; fling ( time , x , y , vx , vy ) ; onUpOrCancel ( time ) ; }
14859	private void startAutoNoopTimer ( ) { if ( autoNoopTimeout > _NUM ) { autoNoopTimer = new AutoNoopTimer ( ) ; autoNoopTimer . start ( ) ; } }
14866	private BSPTree < Euclidean1D > nextInternalNode ( BSPTree < Euclidean1D > node ) { if ( childAfter ( node ) . getCut ( ) != _NULL ) { return leafAfter ( node ) . getParent ( ) ; } while ( isAfterParent ( node ) ) { node = node . getParent ( ) ; } return node . getParent ( ) ; }
14902	public FaveGetPhotosQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
14908	public boolean removeHeaderView ( View v ) { if ( mHeaderViewInfos . size ( ) > _NUM ) { boolean result = _BOOL ; if ( ( ( PLA_HeaderViewListAdapter ) mAdapter ) . removeHeader ( v ) ) { mDataSetObserver . onChanged ( ) ; result = _BOOL ; } removeFixedViewInfo ( v , mHeaderViewInfos ) ; return result ; } return _BOOL ; }
14934	public MarketReorderItemsQuery reorderItems ( UserActor actor , int ownerId , int itemId ) { return new MarketReorderItemsQuery ( getClient ( ) , actor , ownerId , itemId ) ; }
14945	public int nextInt ( ) { if ( m_modCount != m_table . getModificationCount ( ) ) throw new ConcurrentModificationException ( ) ; m_cur = m_rows . nextInt ( ) ; return m_cur ; }
14949	public AccountLookupContactsQuery contacts ( List < String > value ) { return unsafeParam ( _CHAR contacts _CHAR , value ) ; }
14952	public static SparseGradient atan2 ( final SparseGradient y , final SparseGradient x ) { return y . atan2 ( x ) ; }
14974	public VideoGetCatalogSectionQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
15000	public PlacesSearchQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
15001	@ Override protected void initToolbar ( Bundle savedInstanceState ) { }
15006	public static final MediaFormat createVideoFormat ( String mime , int width , int height ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_WIDTH , width ) ; format . setInteger ( KEY_HEIGHT , height ) ; return format ; }
15018	@ Override public boolean isCellEditable ( int row , int column ) { EnvVar envVar = dataList . get ( row ) ; if ( column == COL_VALUE ) { return _BOOL ; } return ! envVar . isPredefined ( ) ; }
15033	public static void sendVerificationToken ( AirMapCallback < Void > listener ) { PilotService . sendVerificationToken ( listener ) ; }
15035	public void printContext ( PrintWriter out ) { out . println ( getMessage ( ) ) ; out . print ( context ) ; }
15049	public boolean isFullRank ( ) { for ( int j = _NUM ; j < n ; j ++ ) { if ( Rdiag [ j ] == _NUM ) return _BOOL ; } return _BOOL ; }
15056	@ Override public BrokerImpl newBrokerInstance ( String user , String pass ) { return new Broker ( ) ; }
15080	private void formWindowClosed ( java . awt . event . WindowEvent evt ) { saveSettings ( ) ; System . exit ( _NUM ) ; }
15088	public boolean isFederatedNamespace ( ) { return this . isFederatedNamespace ; }
15105	public WallSearchQueryWithExtended domain ( String value ) { return unsafeParam ( _CHAR domain _CHAR , value ) ; }
15127	public static boolean canTrade ( Player player ) { for ( Restrictions restrictions : RESTRICTIONS [ RestrictionMode . canTrade . ordinal ( ) ] ) { if ( ! restrictions . canTrade ( player ) ) { return _BOOL ; } } if ( player . getLifeStats ( ) . isAlreadyDead ( ) ) { return _BOOL ; } return _BOOL ; }
15130	public void clearDelimiters ( ) { smDelims = _NULL ; }
15139	public RequestHandle delete ( Context context , String url , Header [ ] headers , ResponseHandlerInterface responseHandler ) { final HttpDelete delete = new HttpDelete ( url ) ; if ( headers != _NULL ) delete . setHeaders ( headers ) ; return sendRequest ( httpClient , httpContext , delete , _NULL , responseHandler , context ) ; }
15159	public static String toStringUnpacked ( byte [ ] unpacked ) { StringBuilder buf = new StringBuilder ( ) ; for ( byte a : unpacked ) buf . append ( String . format ( _CHAR % d _CHAR , a ) ) ; return buf . toString ( ) ; }
15170	public void selectAll ( boolean select ) { mainViewer . selectAllNodes ( select ) ; mainViewer . repaint ( ) ; }
15188	@ Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_category , container , _BOOL ) ; initPresenter ( ) ; initView ( view ) ; return view ; }
15216	public void addUserMessageListener ( UserMessageListener userMessageListener ) { userMessageListeners . add ( userMessageListener ) ; }
15244	public static PhasedBackoffWaitStrategy withSleep ( long spinTimeout , long yieldTimeout , TimeUnit units ) { return new PhasedBackoffWaitStrategy ( spinTimeout , yieldTimeout , units , new SleepingWaitStrategy ( _NUM ) ) ; }
15255	public static boolean removeCount ( Context context ) { return applyCount ( context , _NUM ) ; }
15260	@ Override public boolean hasAttribute ( String name ) { return getAttributeNode ( name ) != _NULL ; }
15261	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR user_table \ _CHAR ( _CHAR + _CHAR \ _CHAR USER_ID \ _CHAR TEXT PRIMARY KEY NOT NULL , _CHAR + _CHAR \ _CHAR USER_NAME \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR USER_PWD \ _CHAR TEXT ) ; _CHAR ) ; }
15262	private void createMOVFormat ( ) { videoFormat = new VideoFormat ( VideoFormat . JPEG , new Dimension ( mip . getMWidth ( ) , mip . getMHeight ( ) ) , Format . NOT_SPECIFIED , Format . byteArray , mip . getFPS ( ) ) ; }
15279	public final void fatal ( final Object o ) { log ( Level . FATAL , o ) ; }
15292	public AccountRegisterDeviceQuery deviceModel ( String value ) { return unsafeParam ( _CHAR device_model _CHAR , value ) ; }
15301	public void cleanPatchByVersion ( File patchFile ) { if ( patchDirectory == _NULL || patchFile == _NULL || ! patchFile . exists ( ) ) { return ; } String versionName = SharePatchFileUtil . getPatchVersionDirectory ( SharePatchFileUtil . getMD5 ( patchFile ) ) ; cleanPatchByVersion ( versionName ) ; }
15309	public Split [ ] asArray ( ) { Split [ ] result = new Split [ size ( ) ] ; int count = _NUM ; for ( Iterator it = iterator ( ) ; it . hasNext ( ) ; ) { result [ count ++ ] = ( Split ) it . next ( ) ; } return result ; }
15339	public PhotosGetQuery rev ( Boolean value ) { return unsafeParam ( _CHAR rev _CHAR , value ) ; }
15358	public void leftTrim ( double second ) { trim ( second , _NUM ) ; }
15366	public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_START_DONE ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
15409	public static void writeByte ( PacketBuffer buf , byte value ) { buf . writeByte ( value ) ; }
15412	private final boolean eq ( int v1 , int v2 ) { return v1 == v2 ; }
15422	public static Beans < AuthToken > load ( W q , int s , int n ) { return Helper . load ( q , s , n , AuthToken . class ) ; }
15426	public static int skipTabs ( byte [ ] text , int offset , int n ) { while ( n > _NUM ) { if ( text [ offset ] == _CHAR ) n -- ; offset ++ ; } return offset - _NUM ; }
15441	public void removeRasterImageOutline ( RasterSymbolizer rasterSymbolizer ) { if ( rasterSymbolizer != _NULL ) { rasterSymbolizer . setImageOutline ( _NULL ) ; } }
15442	public void clearAccountsOnGameServer ( ) { accountsOnGameServer . clear ( ) ; }
15465	public static final MediaFormat createVideoFormat ( String mime , int width , int height ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_WIDTH , width ) ; format . setInteger ( KEY_HEIGHT , height ) ; return format ; }
15476	private void broadcastToLegionMembers ( final Player player ) { if ( player . isLegionMember ( ) ) { PacketSendUtility . broadcastPacketToLegion ( player . getLegion ( ) , new SM_MESSAGE ( player , message , type ) ) ; } }
15485	public boolean isAutoRepaint ( ) { return autoRepaint ; }
15497	private void formWindowClosed ( java . awt . event . WindowEvent evt ) { saveSettings ( ) ; System . exit ( _NUM ) ; }
15502	public boolean isPaging ( ) { return page != _NULL || pageSize != _NULL ; }
15533	public PhotosSaveOwnerPhotoQuery server ( String value ) { return unsafeParam ( _CHAR server _CHAR , value ) ; }
15551	public void die ( ) { getOwner ( ) . getLifeStats ( ) . reduceHp ( getOwner ( ) . getLifeStats ( ) . getCurrentHp ( ) + _NUM , getOwner ( ) ) ; }
15554	public long addAndGet ( final long increment ) { long currentValue ; long newValue ; do { currentValue = get ( ) ; newValue = currentValue + increment ; } while ( ! compareAndSet ( currentValue , newValue ) ) ; return newValue ; }
15578	public static final MediaFormat createAudioFormat ( String mime , int sampleRate , int channelCount ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_SAMPLE_RATE , sampleRate ) ; format . setInteger ( KEY_CHANNEL_COUNT , channelCount ) ; return format ; }
15585	private Object readResolve ( ) { return LazyHolder . INSTANCE ; }
15591	@ PostConstruct void init ( ) { listenerContainer = cacheRegistrationService . registerToAlarms ( this ) ; }
15608	public void addValidationRuleGroup ( ValidationRuleGroup validationRuleGroup ) { groups . add ( validationRuleGroup ) ; validationRuleGroup . getMembers ( ) . add ( this ) ; }
15620	private void restoreCurrentItem ( ) { Bundle restoredBundle = savedInstanceState ; if ( restoredBundle != _NULL ) { if ( restoredBundle . containsKey ( CURRENT_SELECTED_ITEM_BUNDLE_KEY ) ) currentSelectedItem = restoredBundle . getInt ( CURRENT_SELECTED_ITEM_BUNDLE_KEY , _NUM ) ; } }
15622	private boolean applyFilter ( ) { boolean needsFiltering = collapsed || length ( filterText ) > _NUM || hasLogTypeFilters ( ) ; if ( needsFiltering ) { if ( entryLookup != _NULL ) { entryLookup . clear ( ) ; } useFilteredFromEntries ( entries ) ; return _BOOL ; } return removeFilter ( ) ; }
15657	protected MarketRemoveFromAlbumQuery albumIds ( int ... value ) { return unsafeParam ( _CHAR album_ids _CHAR , value ) ; }
15683	public static float floor ( float fValue ) { return ( float ) Math . floor ( fValue ) ; }
15684	private boolean isLongPulling ( HttpServletRequest req ) { return req . getHeader ( Constants . PULLING_TIMEOUT_HEADER ) != _NULL ; }
15692	public static Predicate < ItemStack > matcherOf ( Item value ) { return matcherOf ( new ItemStack ( value , _NUM , WILDCARD_METADATA ) , _BOOL ) ; }
15695	public static String readString ( PacketBuffer buf ) { return buf . readStringFromBuffer ( buf . readInt ( ) ) ; }
15701	public void unlockUserInput ( ) { locked = _BOOL ; samplesSpreadSheet . unlockUserInput ( ) ; getCommandManager ( ) . setEnableCritical ( _BOOL ) ; frame . setCursor ( Cursor . getDefaultCursor ( ) ) ; searchManager . getFindDialogAsToolBar ( ) . setEnableCritical ( _BOOL ) ; frame . setCursor ( Cursor . getDefaultCursor ( ) ) ; updateStatusBar ( ) ; }
15716	void decrement ( ) { -- _index ; }
15729	public boolean isBandInformation ( ) { return bandInformation ; }
15776	private static short byteswap ( short val ) { return ( ( short ) ( ( ( ( val ) & _NUM ) >> > _NUM ) + ( ( ( val ) & _NUM ) << _NUM ) ) ) ; }
15801	private Object readResolve ( ) { return LazyHolder . INSTANCE ; }
15805	public static Executor createTaskDistributor ( ) { return Executors . newCachedThreadPool ( createThreadFactory ( Thread . NORM_PRIORITY , _CHAR uil - pool - d - _CHAR ) ) ; }
15810	public static NamedLayer createNewNamedLayer ( ) { NamedLayer namedLayer = styleFactory . createNamedLayer ( ) ; return namedLayer ; }
15814	void updateFinish ( String instanceId ) { if ( ! isDomThread ( ) ) { throw new WXRuntimeException ( _CHAR RefreshFinish operation must be done in dom thread _CHAR ) ; } WXDomStatement statement = mDomRegistries . get ( instanceId ) ; if ( statement == _NULL ) { return ; } statement . updateFinish ( ) ; }
15824	public synchronized void progressValue ( int value ) { if ( this . progressDialog != _NULL ) { this . progressDialog . setProgress ( value ) ; } }
15845	public JsonWriter endObject ( ) throws IOException { return close ( EMPTY_OBJECT , NONEMPTY_OBJECT , _CHAR } _CHAR ) ; }
15860	private boolean isThereInternetConnection ( Context context ) { ConnectivityManager connectivityManager = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo networkInfo = connectivityManager . getActiveNetworkInfo ( ) ; return ( networkInfo != _NULL && networkInfo . isConnectedOrConnecting ( ) ) ; }
15878	public static java . sql . Timestamp nowTimestamp ( ) { return getTimestamp ( System . currentTimeMillis ( ) ) ; }
15880	public BaseViewHolder linkify ( int viewId ) { TextView view = getView ( viewId ) ; Linkify . addLinks ( view , Linkify . ALL ) ; return this ; }
15898	public static List < List < Writable >> sample ( int count , JavaRDD < List < Writable >> data ) { return data . takeSample ( _BOOL , count ) ; }
15900	public boolean permitCallingEvictionStrategy ( ) { if ( _needToRemoveFromEvictionStrategy || ! isInEvictionStrategy ( ) ) return _BOOL ; int res = _numOfCurrentEvictionStrategyCallersUpdater . incrementAndGet ( this ) ; return res > _NUM ; }
15922	public static void overrideGeoServerClientClass ( Class < ? > geoServerClientClass ) { GeoServerInput . geoServerClientClass = geoServerClientClass ; }
15930	@ Override public void propertyChange ( PropertyChangeEvent evt ) { String prop = evt . getPropertyName ( ) ; if ( _CHAR AccessibleValue _CHAR . equals ( prop ) || _CHAR AccessibleText _CHAR . equals ( prop ) || ( _CHAR AccessibleVisibleData _CHAR . equals ( prop ) && evt . getSource ( ) . getClass ( ) . getName ( ) . contains ( _CHAR JList _CHAR ) ) ) { _modified = _BOOL ; } }
15942	public void refreshSeekTo ( int position ) { handler . sendMessage ( handler . obtainMessage ( HANDLER_MESSAGE_REFRESH_LIST ) ) ; android . os . Message msg = handler . obtainMessage ( HANDLER_MESSAGE_SEEK_TO ) ; msg . arg1 = position ; handler . sendMessage ( msg ) ; }
15952	public FriendsGetQueryWithFields count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
15966	public GroupsEditPlaceQuery editPlace ( UserActor actor , int groupId ) { return new GroupsEditPlaceQuery ( getClient ( ) , actor , groupId ) ; }
15994	@ Override public void do_after_propagation ( ) { for ( HeapInsIntervalManager im : new_pts . values ( ) ) { im . flush ( ) ; } new_pts = new HashMap < AllocNode , HeapInsIntervalManager > ( ) ; }
16003	public EventBuilder maxPriority ( ) { this . event . setPriority ( Thread . MAX_PRIORITY ) ; return this ; }
16042	public DatabaseGetRegionsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
16044	public boolean isHealthy ( ) { return ( healthIssueErrors == _NULL || healthIssueErrors . length == _NUM ) ; }
16084	public boolean isFederatedNamespaceEnabled ( ) { return getBoolean ( BKDL_FEDERATED_NAMESPACE_ENABLED , BKDL_FEDERATED_NAMESPACE_ENABLED_DEFAULT ) ; }
16120	public boolean success ( ) { return this . success ; }
16125	public ViewsFinder orderedBy ( @ NonNull final Comparator < View > viewComparator ) { FunctionUtils . checkParameterIsNotNull ( _CHAR viewComparator _CHAR , viewComparator ) ; this . viewComparator = viewComparator ; return this ; }
16135	public void logoutUser ( ) { this . firebaseAuth . signOut ( ) ; }
16171	public void onDestroy ( ) { }
16181	public void SwitchTo ( int lexState ) { if ( lexState >= _NUM || lexState < _NUM ) throw new TokenMgrError ( _CHAR Error : Ignoring invalid lexical state : _CHAR + lexState + _CHAR . State unchanged . '' , TokenMgrError . INVALID_LEXICAL_STATE ) ; else curLexState = lexState ; }
16199	public void redirectOutputStream ( String fileName ) throws FileNotFoundException { Executor . redirectOutputStream ( getProcess ( ) , new FileOutputStream ( fileName , _BOOL ) , getCommand ( ) ) ; }
16209	public boolean gotoLast ( ) { currentIterator = _NULL ; currentId = _NULL ; return isCurrentSet ( ) ; }
16218	public static SM_SYSTEM_MESSAGE STR_FACTION_LEAVE ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
16257	public static SM_SYSTEM_MESSAGE STR_MSG_PET_UNSUMMONED ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
16286	public void rightTrim ( int numberOfSample ) { trim ( _NUM , numberOfSample ) ; }
16311	public static DataFrame normalize ( DataFrame dataFrame ) { return normalize ( dataFrame , _NUM , _NUM , Collections . < String > emptyList ( ) ) ; }
16315	public boolean hasErrors ( ) { return hasErrors ; }
16416	public static < V > boolean addListNotNullValue ( List < V > sourceList , V value ) { return ( sourceList != _NULL && value != _NULL ) ? sourceList . add ( value ) : _BOOL ; }
16455	public void clearParsys ( String parsys , String componentName ) { globalBar . switchToEditMode ( ) ; while ( getParsys ( parsys ) . isComponentPresent ( componentName ) ) { deleteComponent ( parsys , componentName ) ; } }
16459	public synchronized void progressValue ( int value ) { if ( this . progressDialog != _NULL ) { this . progressDialog . setProgress ( value ) ; } }
16460	public static Integer [ ] transformIntArray ( int [ ] source ) { Integer [ ] destin = new Integer [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
16472	public CartPaymentInfo addPaymentAmount ( String id , BigDecimal amount , boolean isSingleUse ) { return this . addPaymentAmount ( id , amount , _NULL , _NULL , isSingleUse , _BOOL , _BOOL ) ; }
16473	public PhotosSearchQuery search ( UserActor actor ) { return new PhotosSearchQuery ( getClient ( ) , actor ) ; }
16481	public static void showProfile ( Activity activity , @ Nullable HashMap < String , String > extras ) { showProfile ( activity , AirMap . getUserId ( ) , extras ) ; }
16487	public void addButtonPressedListener ( FieldConfigStringButtonInterface listener ) { if ( buttonPressedListenerList == _NULL ) { buttonPressedListenerList = new ArrayList < FieldConfigStringButtonInterface > ( ) ; } buttonPressedListenerList . add ( listener ) ; }
16493	public void writeOffset ( long offset ) throws IOException { dataOutputStream . writeLong ( offset ) ; }
16500	public static SM_SYSTEM_MESSAGE STR_GET_ITEM ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
16513	public void dumpRelations ( String title ) { dump ( new PrintWriter ( System . out ) , _NUM , title , _BOOL ) ; }
16525	public VideoGetQueryWithExtended count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
16542	public String toFastA ( ) { return toFastA ( _BOOL , _NUM , _NUM , getNumberOfSequences ( ) - _NUM , getLength ( ) ) ; }
16551	@ Override public void startDocument ( XMLLocator locator , String encoding , NamespaceContext context , Augmentations augs ) throws XNIException { }
16554	@ Override public boolean isDataPresent ( ) { return _BOOL ; }
16576	public static java . util . Date nowDate ( ) { return new java . util . Date ( ) ; }
16598	public void addContents ( Collection < ContentElement > contents ) { this . contents . addAll ( contents ) ; }
16624	public static final MediaFormat createSubtitleFormat ( String title , String language ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_TITLE , title ) ; format . setString ( KEY_LANGUAGE , language ) ; return format ; }
16629	public RevealBuilder withChildAnimationDuration ( final int childAnimationDuration ) { this . mChildAnimationDuration = childAnimationDuration ; return this ; }
16648	public Bindings add ( String property , JTextComponent c ) { registerPropertyChangeListener ( c ) ; return add ( new JTextComponentBinding ( property , c , _CHAR _CHAR ) ) ; }
16661	public boolean hasMagicalStateEffect ( ) { Iterator < Effect > effectIterator = this . abnormalEffectMap . values ( ) . iterator ( ) ; while ( effectIterator . hasNext ( ) ) { Effect localEffect = effectIterator . next ( ) ; if ( localEffect . isMagicalState ( ) ) { return _BOOL ; } } return _BOOL ; }
16683	protected MarketGetAlbumByIdQuery albumIds ( List < Integer > value ) { return unsafeParam ( _CHAR album_ids _CHAR , value ) ; }
16710	public static SM_SYSTEM_MESSAGE STR_GATHER_START_2_GATHER ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
16713	public BaseViewHolder linkify ( int viewId ) { TextView view = getView ( viewId ) ; Linkify . addLinks ( view , Linkify . ALL ) ; return this ; }
16724	@ Override protected String dateToString ( DateTimeData date ) { StringBuffer message = new StringBuffer ( _NUM ) ; message . append ( _CHAR ) ; message . append ( _CHAR ) ; append ( message , date . month , _NUM ) ; append ( message , ( char ) date . utc , _NUM ) ; return message . toString ( ) ; }
16742	@ Override public void startDTD ( XMLLocator locator , Augmentations augmentations ) throws XNIException { }
16748	@ Override public boolean isCellEditable ( int rowIndex , int columnIndex ) { return _BOOL ; }
16751	public WallSearchQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
16768	public static boolean isNetworkTypeCellular ( String networkType ) { return networkType . equals ( _CHAR MOBILE _CHAR ) ; }
16773	public AemParsys clear ( ) { List < WebElement > list = currentScope . findElements ( By . cssSelector ( SELECTOR_FOR_COMPONENT_IN_PARSYS ) ) ; list . forEach ( _NULL ) ; return this ; }
16776	public void animateAppearance ( ) { mOverlayPanel . addToAnimation ( this , AnimationType . APPEARANCE , _NUM . f , _NUM . f , ContextualSearchPanelAnimation . BASE_ANIMATION_DURATION_MS , _NUM ) ; }
16778	public static float enlarge ( float startValue , float endValue , float time ) { if ( startValue > endValue ) throw new IllegalArgumentException ( _CHAR Start size ca n _CHAR_CHAR ) ; return startValue + ( endValue - startValue ) * time ; }
16802	public static String extract ( String value ) { String extractedValue = value ; if ( isAttribute ( value ) ) { extractedValue = value . substring ( ATTRIBUTE_START . length ( ) , value . length ( ) - ATTRIBUTE_END . length ( ) ) ; } return extractedValue ; }
16805	public EventBuilder onUi ( Activity activity ) { this . event . setActivity ( activity ) ; this . event . setOnUi ( _BOOL ) ; return this ; }
16852	public void remove ( Player player ) { playersById . remove ( player . getObjectId ( ) ) ; playersByName . remove ( player . getName ( ) ) ; }
16860	public static List < Integer > convertToIntegerList ( int [ ] array ) { List < Integer > integers = new ArrayList < Integer > ( ) ; for ( int i = _NUM ; i < array . length ; i ++ ) { integers . add ( array [ i ] ) ; } return integers ; }
16878	public static Value binop ( Value val ) { if ( val == _NULL ) return _NULL ; if ( val instanceof BinopExpr ) return val ; return _NULL ; }
16894	public static byte [ ] decode ( String s ) throws Base64DecoderException { byte [ ] bytes = s . getBytes ( ) ; return decode ( bytes , _NUM , bytes . length ) ; }
16909	public VideoSaveQuery repeat ( Boolean value ) { return unsafeParam ( _CHAR repeat _CHAR , value ) ; }
16933	private DefaultMutableTreeNode copy ( TreeNode node ) { return new DefaultMutableTreeNode ( node ) ; }
16985	public final void sendPacket ( AionServerPacket bp ) { synchronized ( guard ) { if ( isWriteDisabled ( ) ) { return ; } sendMsgQueue . addLast ( bp ) ; enableWriteInterest ( ) ; } }
17095	public final void openFallbackOutputStream ( ) throws DataFallbackException { if ( output == _NULL ) { if ( LOG . isDebugEnabled ( ) ) LOG . debug ( _CHAR openOutputStream ( ) : Opening the writer for the '' + dataFile . getName ( ) + _CHAR file _CHAR ) ; try { output = new BufferedWriter ( new FileWriter ( dataFile , _BOOL ) ) ; } catch ( IOException e ) { throw new DataFallbackException ( e . getMessage ( ) ) ; } } }
17121	@ Override public boolean isCellEditable ( int rowIndex , int columnIndex ) { return ( columnIndex != COL_NUMBER ) ; }
17132	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR ALARMS \ _CHAR ( _CHAR + _CHAR \ _CHAR ALARM_CONTENT \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR ALARM_ID \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR ALARM_LEVEL_NO \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR ALARM_LEVEL_NO_DESC \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR ALARM_TYPE \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR ALARM_TYPE_DESC \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR PUBLISH_TIME \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR AREAID \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR AREA_NAME \ _CHAR TEXT ) ; _CHAR ) ; }
17152	@ Override public void startDocument ( XMLLocator locator , String encoding , NamespaceContext namespaceContext , Augmentations augs ) throws XNIException { }
17162	@ Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_collection ) ; initModel ( ) ; initPresenter ( ) ; }
17170	public boolean isItemSelected ( Object userObject , Symbolizer parentSymbolizer ) { boolean selectedItem = _BOOL ; if ( userObject instanceof Fill ) { selectedItem = hasFill ( parentSymbolizer ) ; } else if ( userObject instanceof Stroke ) { selectedItem = hasStroke ( parentSymbolizer ) ; } return selectedItem ; }
17177	public ResourcesPoet addColor ( String name , String value ) { Element element = document . createElement ( _CHAR color _CHAR ) ; element . setAttribute ( _CHAR name _CHAR , name ) ; element . appendChild ( document . createTextNode ( value ) ) ; resourceElement . appendChild ( element ) ; return this ; }
17204	public String toString ( ) { return _CHAR Timbre Distribution _CHAR ; }
17210	private String generateSupervisionIndex ( long time ) { return retrieveIndexFormat ( indexPrefix + _CHAR - supervision_ _CHAR , time ) ; }
17226	public DistributedLogClientBuilder requestTimeoutMs ( int timeoutMs ) { DistributedLogClientBuilder newBuilder = newBuilder ( this ) ; newBuilder . _clientConfig . setRequestTimeoutMs ( timeoutMs ) ; return newBuilder ; }
17262	public void clear ( ) { mRecycler . setAdapter ( _NULL ) ; }
17267	public LsClientPacket handle ( ByteBuffer data , LoginServerConnection client ) { State state = client . getState ( ) ; int id = data . get ( ) & _NUM ; return getPacket ( state , id , data , client ) ; }
17278	@ Override public void nodeJoined ( final ClusterNode clusterNode ) { LOGGER . info ( _CHAR Detected Terracotta node joined cluster : _CHAR + clusterNode . getId ( ) ) ; }
17297	public boolean isCurrentSelected ( ) { return isCurrentSet ( ) && toSelectIds . contains ( currentId ) ; }
17312	public static LineSymbolizer createDefaultLineSymbolizer ( ) { Stroke stroke = styleFactory . createStroke ( ff . literal ( DEFAULT_LINE_COLOUR ) , ff . literal ( _NUM ) ) ; LineSymbolizer lineSymbolizer = styleFactory . createLineSymbolizer ( ) ; lineSymbolizer . setStroke ( stroke ) ; return lineSymbolizer ; }
17319	public boolean isMatchCase ( ) { return matchCase ; }
17331	public void saveAndExit ( View v ) { finish ( ) ; }
17341	public boolean isMultipleCoordinates ( ) { return multipleCoordinates ; }
17359	public AemPathWindow clickCancel ( ) { cancelButton . click ( ) ; return this ; }
17366	@ Override public void startElement ( QName element , XMLAttributes attributes , Augmentations augs ) throws XNIException { Augmentations modifiedAugs = handleStartElement ( element , attributes , augs ) ; if ( fDocumentHandler != _NULL ) { fDocumentHandler . startElement ( element , attributes , modifiedAugs ) ; } }
17375	public long skip ( long n ) throws IOException , LogException { if ( length < n ) badRead ( ( int ) n ) ; n = in . skip ( n ) ; length -= ( int ) n ; return n ; }
17385	public static String nowDateString ( ) { return nowDateString ( _CHAR yyyyMMddHHmmss _CHAR ) ; }
17393	public int numVars ( ) { return derivatives . size ( ) ; }
17412	public boolean isMatch ( ) { return ! ( refName == _NULL || refName . equals ( _CHAR * _CHAR ) ) ; }
17421	public StaticScript script ( String script ) { this . script = script ; return this ; }
17424	public void removeUserPresenceListener ( UserPresenceListener userPresenceListener ) { userPresenceListeners . remove ( userPresenceListener ) ; }
17435	public static SM_SYSTEM_MESSAGE STR_YOU_EXCLUDED ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
17441	@ Override public void close ( ) { unsubscribe ( ) ; }
17452	@ Override public boolean isAutoStartup ( ) { return _BOOL ; }
17484	public static SM_SYSTEM_MESSAGE STR_MSG_NOTIFY_LOGIN_GUILD ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
17504	public static Long [ ] transformLongArray ( long [ ] source ) { Long [ ] destin = new Long [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
17509	public static void clearAllCaches ( ) { for ( UtilCache < ? , ? > cache : utilCacheTable . values ( ) ) { cache . clear ( ) ; } }
17517	public boolean isGlobalFindable ( ) { return _BOOL ; }
17562	public MessagesGetHistoryAttachmentsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
17589	public boolean isGlobalFindable ( ) { return classificationViewer . getTree ( ) . getNumberOfNodes ( ) > _NUM ; }
17629	public void moveBy ( int amountX , int amountY ) { Point p = getPosition ( ) ; move ( p . x + amountX , p . y + amountY ) ; }
17645	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR WEEK_FORE_CAST \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
17673	public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_BLOCK_ME_TO_B ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
17705	public < T extends CoreItem > void addItem ( @ IntRange ( from = _NUM ) int position , @ NonNull T item ) { if ( position > items . size ( ) ) { throw new IndexOutOfBoundsException ( ) ; } items . add ( position , item ) ; notifyItemInserted ( position ) ; }
17724	public void assertMatches ( String errorMessage , String stringToMatch , String regex ) { assertTrue ( errorMessage , stringToMatch . matches ( regex ) ) ; }
17725	@ Override public void onDragStateChange ( int state ) { }
17734	public static void f ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_FATAL ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . wtf ( tag , msg ) ; }
17757	protected boolean isEnabled ( ) throws TeamException { ISVNRemoteFile resource = getSingleSelectedSVNRemoteFile ( ) ; return ( resource != _NULL ) ; }
17776	public PagesSaveAccessQuery edit ( PagesSaveAccess value ) { return unsafeParam ( _CHAR edit _CHAR , value ) ; }
17796	public synchronized void closeFolder ( boolean expunge ) { try { if ( folder != _NULL && folder . isOpen ( ) ) { folder . close ( expunge ) ; } } catch ( MessagingException e ) { throw new EmailException ( format ( _CHAR Error while closing mailbox folder % s '' , folder . getName ( ) ) , e ) ; } }
17799	public void startValueScope ( ) { fValuesCount = _NUM ; for ( int i = _NUM ; i < fFieldCount ; i ++ ) { fLocalValues [ i ] = _NULL ; fLocalValueTypes [ i ] = _NUM ; fLocalItemValueTypes [ i ] = _NULL ; } }
17825	public SAXParser createSAXParser ( ) { SymbolTable symbolTable = fShadowSymbolTable ? new ShadowedSymbolTable ( fSynchronizedSymbolTable ) : fSynchronizedSymbolTable ; XMLGrammarPool grammarPool = fShadowGrammarPool ? new ShadowedGrammarPool ( fSynchronizedGrammarPool ) : fSynchronizedGrammarPool ; return new SAXParser ( symbolTable , grammarPool ) ; }
17833	public boolean isLastSplit ( ) { return isLastSplit ; }
17844	public boolean isIgnoringCancelled ( ) { return ignoreCancelled ; }
17856	public static void f ( String tag , String msg , Throwable throwable ) { if ( sLevel > LEVEL_FATAL ) { return ; } Log . wtf ( tag , msg , throwable ) ; }
17865	public static Document run ( Bson cmd ) { MongoDatabase d = MongoHelper . getDB ( ) ; if ( d != _NULL ) { return d . runCommand ( cmd ) ; } return _NULL ; }
17903	public static void generateSampleXml ( String path ) { generateSampleXml ( new File ( path ) ) ; }
17905	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR HOUR_FORE_CAST \ _CHAR ( _CHAR + _CHAR \ _CHAR AREAID \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR HOUR \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR WEATHER_CONDITION \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR TEMP \ _CHAR INTEGER ) ; _CHAR ) ; }
17907	public void authorLogout ( ) { logout ( authorUrl ) ; }
17916	public static SM_SYSTEM_MESSAGE STR_MSG_ASK_OTHER_HAS_LOGOUT ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
17930	public static final MediaFormat createAudioFormat ( String mime , int sampleRate , int channelCount ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_SAMPLE_RATE , sampleRate ) ; format . setInteger ( KEY_CHANNEL_COUNT , channelCount ) ; return format ; }
17958	public void clear ( ) { internalMap . clear ( ) ; }
17979	public boolean isLoading ( ) { return state == State . LOADING ; }
17990	public synchronized Map < String , Object > waitForResult ( ) { return this . waitForResult ( _NUM ) ; }
18006	@ Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_settings ) ; }
18013	public static void initCheckpointingTask ( ) { taskMgr . runTask ( new CheckpointTask ( ) ) ; }
18084	public void reAddAllInserts ( @ NonNull Collection < ? extends Insertion > collection ) { if ( collection . size ( ) == _NUM ) { return ; } mInserts . addAll ( collection ) ; getItems ( ) . addAll ( createEmptyItemsList ( collection . size ( ) ) ) ; }
18138	public static int hashBytes ( byte [ ] bytes , int offset , int length ) { int hash = _NUM ; for ( int i = offset ; i < offset + length ; i ++ ) hash = ( _NUM * hash ) + ( int ) bytes [ i ] ; return hash ; }
18151	public DistributedLogClientBuilder periodicDumpOwnershipCache ( boolean enabled ) { DistributedLogClientBuilder newBuilder = newBuilder ( this ) ; newBuilder . _clientConfig . setPeriodicDumpOwnershipCacheEnabled ( enabled ) ; return newBuilder ; }
18171	public void addListener ( final FileAlterationListener listener ) { if ( listener != _NULL ) { listeners . add ( listener ) ; } }
18238	public boolean isValueOnly ( ) { return valueOnly ; }
18249	public TapTarget textTypeface ( Typeface typeface ) { if ( typeface == _NULL ) throw new IllegalArgumentException ( _CHAR Can not use a _NULL typeface _CHAR ) ; this . typeface = typeface ; return this ; }
18257	public static boolean isMswinFlag ( ) { return mswinFlag ; }
18259	@ Override public void any ( Augmentations augs ) throws XNIException { }
18266	public void removeHeaderView ( @ NonNull View view ) { mNavigationView . removeHeaderView ( view ) ; }
18267	public MessagesGetQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
18279	public void register ( DispatchContext context ) { if ( Debug . infoOn ( ) ) Debug . logInfo ( _CHAR Registering dispatcher : _CHAR + context . getName ( ) , module ) ; this . localContext . put ( context . getName ( ) , context ) ; }
18353	private Tab createConnectionTab ( final String name , final Node content , final MqttConnectionController connectionController ) { final Tab tab = new Tab ( ) ; connectionController . setTab ( tab ) ; tab . setText ( name ) ; tab . setContent ( content ) ; return tab ; }
18365	@ RequestMapping ( method = RequestMethod . POST , value = _CHAR / api / drops / import _CHAR ) public ImportDropConfig importDrop ( @ RequestBody ImportDropConfig importDropConfig ) throws Exception { PollableFuture importDropFuture = dropService . importDrop ( importDropConfig . getDropId ( ) , importDropConfig . getStatus ( ) , PollableTask . INJECT_CURRENT_TASK ) ; importDropConfig . setPollableTask ( importDropFuture . getPollableTask ( ) ) ; return importDropConfig ; }
18378	protected DTDDVFactory createDatatypeValidatorFactory ( ) { return DTDDVFactory . getInstance ( ) ; }
18404	public final void warn ( final Object o , final Throwable t ) { log ( Level . WARN , o , t ) ; }
18409	public GroupsEditQuery eventStartDate ( Integer value ) { return unsafeParam ( _CHAR event_start_date _CHAR , value ) ; }
18414	protected MarketGetAlbumByIdQuery albumIds ( int ... value ) { return unsafeParam ( _CHAR album_ids _CHAR , value ) ; }
18440	public static String currentPlatformName ( ) { String os = System . getProperty ( _CHAR os . name _CHAR ) ; if ( os . startsWith ( _CHAR Mac OS _CHAR ) ) { return _CHAR Mac OS X _CHAR ; } else if ( os . startsWith ( _CHAR Windows _CHAR ) ) { return _CHAR Windows _CHAR ; } else if ( os . startsWith ( _CHAR Linux _CHAR ) ) { return _CHAR Linux _CHAR ; } return _CHAR Other _CHAR ; }
18446	public void removeRewrittenEntryIndication ( String uid ) { if ( _reWrittenEntries != _NULL ) _reWrittenEntries . remove ( uid ) ; }
18493	public void clear ( ) { this . map . clear ( ) ; }
18536	public static SM_SYSTEM_MESSAGE STR_GATHER_SUCCESS_3_MINING ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
18541	public final void unloadAll ( ) { objects . invalidateAll ( ) ; }
18573	public void addToWeightList ( double weight ) { weightList . add ( weight ) ; }
18581	public CarouselOptions minQuantity ( int minQuantity ) { mMinQuantity = minQuantity ; return this ; }
18590	public void addMember ( LegionMember legionMember ) { if ( ! legionMemberById . containsKey ( legionMember . getObjectId ( ) ) ) { legionMemberById . put ( legionMember . getObjectId ( ) , legionMember ) ; } }
18635	public boolean isGlobalFindable ( ) { return _BOOL ; }
18659	public WallGetCommentsQueryWithExtended needLikes ( Boolean value ) { return unsafeParam ( _CHAR need_likes _CHAR , value ) ; }
18688	public void collapse ( DefaultMutableTreeNode v ) { if ( v == _NULL ) v = ( DefaultMutableTreeNode ) fileTree . getModel ( ) . getRoot ( ) ; for ( Enumeration descendants = v . depthFirstEnumeration ( ) ; descendants . hasMoreElements ( ) ; ) { v = ( DefaultMutableTreeNode ) descendants . nextElement ( ) ; fileTree . collapsePath ( new TreePath ( v . getPath ( ) ) ) ; } }
18700	public synchronized void addFrameSavedListener ( FrameSavedListener listener ) { if ( listenerList == _NULL ) { listenerList = new javax . swing . event . EventListenerList ( ) ; } listenerList . add ( FrameSavedListener . class , listener ) ; }
18712	protected void loadFeatureFile ( String fileName ) throws IOException , MaryConfigurationException { featureFileReader = new FeatureFileReader ( fileName ) ; featureDefinition = featureFileReader . getFeatureDefinition ( ) ; phoneFeatureIndex = featureDefinition . getFeatureIndex ( _CHAR phone _CHAR ) ; halfphoneLRFeatureIndex = featureDefinition . getFeatureIndex ( _CHAR halfphone_lr _CHAR ) ; }
18733	public boolean isShowLabel ( ) { return showTitle ; }
18743	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR _CHAR _CHAR ; db . execSQL ( sql ) ; }
18766	@ Override public void do_after_propagation ( ) { for ( PtInsIntervalManager pim : pt_objs . values ( ) ) { pim . flush ( ) ; } new_pts = new HashMap < AllocNode , PtInsIntervalManager > ( ) ; }
18769	public synchronized boolean commit ( ) { checkNotClosedOrEditingConcurrently ( ) ; close ( ) ; mIsClosed = _BOOL ; if ( mHasErrors ) { mCache . abortEdit ( mEntry ) ; mCache . remove ( mEntry . getKey ( ) ) ; return _BOOL ; } else { mCache . commitEdit ( mEntry ) ; return _BOOL ; } }
18784	public boolean hasBulletList ( String text ) { return bulletPat . matcher ( text ) . find ( ) ; }
18806	public PhotosGetAllQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
18811	public static int [ ] transformIntArray ( Integer [ ] source ) { int [ ] destin = new int [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
18817	public FriendsEditListQuery name ( String value ) { return unsafeParam ( _CHAR name _CHAR , value ) ; }
18821	public static void checkSubtractionCompatible ( final AnyMatrix left , final AnyMatrix right ) throws MathIllegalArgumentException { if ( ( left . getRowDimension ( ) != right . getRowDimension ( ) ) || ( left . getColumnDimension ( ) != right . getColumnDimension ( ) ) ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . DIMENSIONS_MISMATCH_2x2 , left . getRowDimension ( ) , left . getColumnDimension ( ) , right . getRowDimension ( ) , right . getColumnDimension ( ) ) ; } }
18839	public static < T extends Bean > T load ( String collection , Bson query , Class < T > clazz ) { try { return load ( collection , query , clazz . newInstance ( ) ) ; } catch ( Exception e ) { if ( log . isErrorEnabled ( ) ) log . error ( e . getMessage ( ) , e ) ; } return _NULL ; }
18859	protected PagesParseWikiQuery text ( String value ) { return unsafeParam ( _CHAR text _CHAR , value ) ; }
18902	public void click ( int mask , int delay ) throws InterruptedException { hold ( mask , delay ) ; }
18909	public static long [ ] transformLongArray ( Long [ ] source ) { long [ ] destin = new long [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
18910	public static String removeLast ( String input , int amount ) { if ( input . length ( ) >= amount ) { return input . substring ( _NUM , input . length ( ) - amount ) ; } else { return input ; } }
18927	public static final MediaFormat createAudioFormat ( String mime , int sampleRate , int channelCount ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_SAMPLE_RATE , sampleRate ) ; format . setInteger ( KEY_CHANNEL_COUNT , channelCount ) ; return format ; }
18931	@ Override public List < WebElement > findElementsByLinkText ( String linkText ) { return ( ( FindsByLinkText ) super . getWrappedDriver ( ) ) . findElementsByLinkText ( linkText ) ; }
18935	public static SM_SYSTEM_MESSAGE STR_ONE_EXCLUDED ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
18938	public void addSample ( String sample , int sampleSize , int srcId , BlastMode blastMode , Map < String , Map < Integer , Integer [ ] >> classification2class2counts ) { getDataTable ( ) . addSample ( sample , sampleSize , blastMode , srcId , classification2class2counts ) ; }
18969	public static void report ( final Throwable _throwable ) { FirebaseCrash . report ( _throwable ) ; }
18972	protected boolean preCastCheck ( ) { Conditions skillConditions = skillTemplate . getStartconditions ( ) ; return skillConditions != _NULL ? skillConditions . validate ( this ) : _BOOL ; }
18974	private void writeHeader ( tsfile_header hdr , ByteBuffer useBuffer ) throws OncRpcException , IOException { try ( XdrEncodingFileWriter writer = new XdrEncodingFileWriter ( new Crc32AppendingFileWriter ( new SizeVerifyingWriter ( new FileChannelWriter ( file . get ( ) , _NUM ) , ALL_HDR_CRC_LEN ) , _NUM ) , useBuffer ) ) { Const . writeMimeHeader ( writer ) ; hdr . xdrEncode ( writer ) ; } }
19051	public static byte [ ] fromHex ( String hex ) { try { return Hex . decodeHex ( hex . toCharArray ( ) ) ; } catch ( DecoderException e ) { return _NULL ; } }
19056	public VideoEditQuery repeat ( Boolean value ) { return unsafeParam ( _CHAR repeat _CHAR , value ) ; }
19077	public DestTemplateParameterContext addParameter ( String paramName , String paramValue ) { DestContextParamType parameter = new DestContextParamType ( ) ; parameter . setName ( paramName ) ; parameter . setValue ( paramValue ) ; destContextMap . getMap ( ) . put ( paramName , parameter ) ; return this ; }
19090	public static float reduce ( float startValue , float endValue , float time ) { if ( startValue < endValue ) throw new IllegalArgumentException ( _CHAR End size ca n _CHAR_CHAR ) ; return endValue + ( startValue - endValue ) * ( 1 - time ) ; }
19092	public static final MediaFormat createAudioFormat ( String mime , int sampleRate , int channelCount ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_SAMPLE_RATE , sampleRate ) ; format . setInteger ( KEY_CHANNEL_COUNT , channelCount ) ; return format ; }
19125	public static SM_SYSTEM_MESSAGE STR_MSG_LOOT_PAUSE_START_ME ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
19162	public AdsGetTargetingStatsQuery linkDomain ( String value ) { return unsafeParam ( _CHAR link_domain _CHAR , value ) ; }
19164	@ Override public void error ( SAXParseException e ) throws SAXException { throw e ; }
19166	public synchronized boolean removeMacro ( int macroPosition ) { String m = macrosses . remove ( macroPosition ) ; if ( m == _NULL ) { logger . warn ( _CHAR Trying to remove non existing macro . '' ) ; return _BOOL ; } return _BOOL ; }
19203	public void writeThrift ( TBase indexObject ) throws IOException { thriftWriter . write ( indexObject ) ; }
19218	public void writeNullTerminatedString ( byte [ ] bytes ) throws IOException { int pos = _NUM ; while ( pos < bytes . length ) { if ( bytes [ pos ] == _NUM ) break ; pos ++ ; } if ( pos > _NUM ) write ( bytes , _NUM , pos ) ; write ( ( byte ) _NUM ) ; }
19219	public VideoGetUserVideosQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
19223	public void output ( Source input , Result destination ) throws TransformerException { transformer . transform ( input , destination ) ; }
19233	public static SM_SYSTEM_MESSAGE STR_MSG_DISCARD_ITEM ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
19255	public AudioGetAlbumsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
19282	protected void resetCommon ( ) throws XNIException { int count = fCommonComponents . size ( ) ; for ( int i = _NUM ; i < count ; i ++ ) { XMLComponent c = ( XMLComponent ) fCommonComponents . get ( i ) ; c . reset ( this ) ; } }
19314	public boolean removeFooterView ( View v ) { if ( mFooterViewInfos . size ( ) > _NUM ) { boolean result = _BOOL ; if ( ( ( PLA_HeaderViewListAdapter ) mAdapter ) . removeFooter ( v ) ) { mDataSetObserver . onChanged ( ) ; result = _BOOL ; } removeFixedViewInfo ( v , mFooterViewInfos ) ; return result ; } return _BOOL ; }
19345	private boolean isPropelDefined ( ) { if ( ! this . hasPropelChecked ) { this . hasPropel = ( PhpIndex . getInstance ( holder . getProject ( ) ) . getClassesByName ( _CHAR Propel _CHAR ) . size ( ) > _NUM ) ; this . hasPropelChecked = _BOOL ; } return this . hasPropel ; }
19366	public void spin ( ) { lastTimeAnimated = SystemClock . uptimeMillis ( ) ; isSpinning = _BOOL ; invalidate ( ) ; }
19392	public static DerivativeStructure atan2 ( final DerivativeStructure y , final DerivativeStructure x ) throws MathIllegalArgumentException { return y . atan2 ( x ) ; }
19407	public ResourcesPoet addDimension ( String name , String value ) { Element bool = document . createElement ( _CHAR dimen _CHAR ) ; bool . setAttribute ( _CHAR name _CHAR , name ) ; bool . appendChild ( document . createTextNode ( value ) ) ; resourceElement . appendChild ( bool ) ; return this ; }
19428	private String textAreaHas ( final int numOfLines ) { return _CHAR textArea has _CHAR + numOfLines + _CHAR lines _CHAR ; }
19429	public static Edit fromString ( String string ) throws IOException { return parse ( new NexusStreamParser ( new StringReader ( string ) ) ) ; }
19433	public void clearAll ( ) { nodeToPreds . clear ( ) ; nodeToSuccs . clear ( ) ; edgeToLabels . clear ( ) ; labelToEdges . clear ( ) ; heads . clear ( ) ; tails . clear ( ) ; }
19445	public void preview ( ) { previewButton . click ( ) ; }
19522	public boolean isReadOnly ( ) { return readOnly ; }
19530	public boolean hasPhysicalStateEffect ( ) { Iterator < Effect > effectIterator = this . abnormalEffectMap . values ( ) . iterator ( ) ; while ( effectIterator . hasNext ( ) ) { Effect localEffect = effectIterator . next ( ) ; if ( localEffect . isPhysicalState ( ) ) { return _BOOL ; } } return _BOOL ; }
19542	public boolean isFullRank ( ) { for ( int j = _NUM ; j < n ; j ++ ) { if ( Rdiag [ j ] == _NUM ) return _BOOL ; } return _BOOL ; }
19543	@ Override protected void reset ( ) throws XNIException { if ( fValidationManager != _NULL ) fValidationManager . reset ( ) ; configurePipeline ( ) ; super . reset ( ) ; }
19557	public BoardGetCommentsQueryWithExtended count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
19654	public void incThresholdBreachedCount ( ) { breachedCount ++ ; }
19655	public static SM_SYSTEM_MESSAGE STR_BLOCKLIST_ADD_BLOCKED ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
19656	public CartPaymentInfo addPaymentAmount ( String id , BigDecimal amount ) { return this . addPaymentAmount ( id , amount , _BOOL ) ; }
19684	@ Override public void startDTD ( XMLLocator locator , Augmentations augs ) throws XNIException { fOpStack = _NULL ; fNodeIndexStack = _NULL ; fPrevNodeIndexStack = _NULL ; }
19698	public int decrement ( ) { lock . lock ( ) ; int newValue = -- value ; lock . unlock ( ) ; return newValue ; }
19719	public VideoGetCommentsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
19746	public final int yystate ( ) { return zzLexicalState ; }
19771	@ SuppressWarnings ( _CHAR UnusedParameters _CHAR ) void onTerminate ( @ Nullable Module module , @ Nullable VirtualFile workingDir , @ NotNull String ... args ) { }
19793	@ Override public void onFailure ( Throwable cause ) { LOG . error ( _CHAR Encountered failures on writing record as ( lid = { } , eid = { } ) : _CHAR , new Object [ ] { currentLogSegmentSeqNo , currentEntryId , cause } ) ; errorsFound . set ( _BOOL ) ; syncLatch . countDown ( ) ; }
19838	public static Date stringToDate ( String formattedDate ) { return stringToDate ( formattedDate , SIMPLE_DATE_FORMAT ) ; }
19876	public static void v ( String tag , String msg ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } Log . v ( tag , msg ) ; }
19884	private void ensureZero ( final double value ) throws MathIllegalArgumentException { if ( ! Precision . equals ( _NUM . _NUM , value , _NUM ) ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . NUMBER_TOO_LARGE , FastMath . abs ( value ) , _NUM ) ; } }
19888	public void removeUserMessageListener ( UserMessageListener userMessageListener ) { userMessageListeners . remove ( userMessageListener ) ; }
19906	public static void main ( final String [ ] args ) { GlobalSettingsController . setup ( ) ; launch ( args ) ; }
19970	public DatabaseGetCitiesQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
19972	public static void writeObject ( OutputStream out , Object obj ) throws IOException { ObjectOutputStream objOut = new ObjectOutputStream ( out ) ; objOut . writeObject ( obj ) ; objOut . flush ( ) ; }
19995	@ Override public void startDocument ( XMLLocator locator , String encoding , NamespaceContext namespaceContext , Augmentations augs ) throws XNIException { fNamespaceContext = namespaceContext ; if ( fDocumentHandler != _NULL && ! fOnlyPassPrefixMappingEvents ) { fDocumentHandler . startDocument ( locator , encoding , namespaceContext , augs ) ; } }
20025	public < K , C > ColumnMutation prepareColumnMutation ( ColumnFamily < K , C > cf , K rowKey , C column , ConsistencyLevel consistency ) { return _astyanaxKeyspace . prepareColumnMutation ( cf , rowKey , column ) . setConsistencyLevel ( clamp ( consistency ) ) ; }
20031	public void rectValuesToPixel ( List < RectF > rects ) { Matrix m = getValueToPixelMatrix ( ) ; for ( int i = _NUM ; i < rects . size ( ) ; i ++ ) m . mapRect ( rects . get ( i ) ) ; }
20060	public PreResponse deserialize ( String preResponse ) throws IOException { JsonNode serializedPreResponse = nonResponseContextMapper . readTree ( preResponse ) ; return new PreResponse ( getResultSet ( serializedPreResponse . get ( RESULT_SET_KEY ) ) , getResponseContext ( serializedPreResponse . get ( RESPONSE_CONTEXT_KEY ) ) ) ; }
20140	protected void onPathPositionUpdate ( Path invokedPath , float distance , float [ ] pos , float [ ] tan ) { }
20169	@ Override public void onMessageReceived ( RemoteMessage remoteMessage ) { FCMManager . getInstance ( getApplicationContext ( ) ) . onMessage ( remoteMessage ) ; }
20170	public VideoGetQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
20172	public static HttpResponse execute ( HttpMethod method , String targetUrl ) throws IOException , KeyStoreException , NoSuchAlgorithmException , CertificateException , KeyManagementException { return execute ( method , targetUrl , _NULL , _NULL ) ; }
20193	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR _CHAR _CHAR ; db . execSQL ( sql ) ; }
20240	@ Override public boolean isDataPresent ( ) { return SelectedSymbol . getInstance ( ) . hasStroke ( ) ; }
20256	public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_BOSS_ATTACKED ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
20268	public void unlockUserInput ( ) { }
20270	protected EventsEnvelope makeEventEnvelope ( Assignment assignment , Event event ) { return new EventsEnvelope ( assignment , event , transactionFactory . newTransaction ( ) ) ; }
20278	public Builder traceTaskExecution ( boolean trace ) { this . traceTaskExecution = trace ; return this ; }
20280	public int [ ] [ ] fromFile ( File file ) throws IOException { BufferedImage image = ImageIO . read ( file ) ; image = scalingIfNeed ( image , _BOOL ) ; return toIntArrayArray ( image ) ; }
20286	public Math_Vector sub ( double x , double y ) { this . x -= x ; this . y -= y ; return this ; }
20291	public boolean isDataSource ( ) { return isDataSource ; }
20292	private void fillQName ( QName toFill , mf . javax . xml . namespace . QName toCopy ) { StAXValidatorHelper . this . fillQName ( toFill , toCopy . getNamespaceURI ( ) , toCopy . getLocalPart ( ) , toCopy . getPrefix ( ) ) ; }
20298	public static byte [ ] generateMac ( byte [ ] byteCipherText , SecretKey integrityKey ) throws NoSuchAlgorithmException , InvalidKeyException { Mac sha256_HMAC = Mac . getInstance ( HMAC_ALGORITHM ) ; sha256_HMAC . init ( integrityKey ) ; return sha256_HMAC . doFinal ( byteCipherText ) ; }
20307	@ Override public void schedule ( Runnable childStatement ) { Future < Void > submittedStatement = completionService . submit ( childStatement , _NULL ) ; tasks . add ( submittedStatement ) ; }
20308	public GroupsGetRequestsQueryWithFields count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
20311	public boolean contains ( ScoutCandidateGroup candidate ) { return mRect . contains ( candidate . mRect ) ; }
20315	public void removeParalyzeEffects ( ) { for ( Effect effect : abnormalEffectMap . values ( ) ) { if ( effect . isParalyzeEffect ( ) ) { effect . endEffect ( ) ; abnormalEffectMap . remove ( effect . getStack ( ) ) ; } } }
20355	private Object readResolve ( ) { return LazyHolder . INSTANCE ; }
20359	public void append ( byte [ ] bytes ) { append ( bytes , _NUM , bytes . length ) ; }
20360	public String toString ( ) { return _CHAR CMUDiphoneVoice _CHAR ; }
20361	public synchronized static DataSourceRepository sharedInstance ( ) { if ( sharedInstance == _NULL ) sharedInstance = new DataSourceRepository ( ) ; return sharedInstance ; }
20370	@ Override public void endDocument ( Augmentations augs ) throws XNIException { handleEndDocument ( ) ; if ( fDocumentHandler != _NULL ) { fDocumentHandler . endDocument ( augs ) ; } fLocator = _NULL ; }
20415	@ Override public void nodeLeft ( final ClusterNode clusterNode ) { LOGGER . info ( _CHAR Detected Terracotta node left cluster : _CHAR + clusterNode . getId ( ) ) ; }
20482	public static void stopMostRecentTimer ( ) { try { stopTiming ( RLOG . get ( ) . mostRecentTimer . name ) ; } catch ( NullPointerException ignored ) { LOG . warn ( _CHAR Stopping timing failed because mostRecentTimer was n _CHAR_CHAR ) ; } }
20487	@ NotNull public static String genderAndAge ( @ NotNull Face face ) { return String . format ( _CHAR % s , % . _NUM _CHAR , face . faceAttributesResp . gender , face . faceAttributesResp . age ) ; }
20540	public void afterMemberAdded ( MemberAddedEvent memberAddedEvent ) { }
20551	public ResourcesPoet addBool ( String name , boolean value ) { addBool ( name , String . valueOf ( value ) ) ; return this ; }
20557	public UsersSearchQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
20581	public Bindings add ( String property , JTextComponent c , String defaultValue ) { registerPropertyChangeListener ( c ) ; return add ( new JTextComponentBinding ( property , c , defaultValue ) ) ; }
20600	public void addButtonPressedListener ( FieldConfigStringButtonInterface listener ) { if ( buttonPressedListenerList == _NULL ) { buttonPressedListenerList = new ArrayList < FieldConfigStringButtonInterface > ( ) ; } buttonPressedListenerList . add ( listener ) ; }
20610	public AsyncCatchOptions usePokeball ( Pokeball pokeBall ) { this . pokeBall = pokeBall ; return this ; }
20614	public String toString ( ) { return _CHAR FileAudioPlayer _CHAR ; }
20651	public GroupsSetCallbackSettingsQuery photoCommentNew ( Boolean value ) { return unsafeParam ( _CHAR photo_comment_new _CHAR , value ) ; }
20678	public static void addInBuffer ( Vector3f toAdd , FloatBuffer buf , int index ) { Vector3f tempVec3 = Vector3f . newInstance ( ) ; populateFromBuffer ( tempVec3 , buf , index ) ; tempVec3 . addLocal ( toAdd ) ; setInBuffer ( tempVec3 , buf , index ) ; Vector3f . recycle ( tempVec3 ) ; }
20688	@ SuppressWarnings ( _CHAR unchecked _CHAR ) private T [ ] buildArray ( final int length ) { return ( T [ ] ) Array . newInstance ( field . getRuntimeClass ( ) , length ) ; }
20707	@ Override public void onExceededDatabaseQuota ( String url , String databaseIdentifier , long currentQuota , long estimatedSize , long totalUsedQuota , WebStorage . QuotaUpdater quotaUpdater ) { LOG . d ( LOG_TAG , _CHAR onExceededDatabaseQuota estimatedSize : % d currentQuota : % d totalUsedQuota : % d _CHAR , estimatedSize , currentQuota , totalUsedQuota ) ; quotaUpdater . updateQuota ( MAX_QUOTA ) ; }
20721	public static cn . nukkit . inventory . InventoryType toNukkit ( InventoryType inventoryType ) { return bukkitToNukkit . get ( inventoryType ) ; }
20739	public static SM_SYSTEM_MESSAGE STR_MSG_PING_RESULT ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
20741	private synchronized int _activityCount ( ) { return m_activities . size ( ) ; }
20753	@ Override public List < WebElement > findElementsByTagName ( String tagName ) { return ( ( FindsByTagName ) super . getWrappedDriver ( ) ) . findElementsByTagName ( tagName ) ; }
20769	public void populateFieldTypeConstraint ( FieldIdEnum fieldId , List < FeatureTypeConstraint > ftcList ) { if ( fieldConfigManager == _NULL ) { return ; } FieldConfigBase fieldConfig = fieldConfigManager . get ( fieldId ) ; if ( fieldConfig != _NULL ) { fieldConfig . populateField ( ftcList ) ; } }
20773	public void lockUserInput ( ) { locked = _BOOL ; commandManager . setEnableCritical ( _BOOL ) ; }
20816	public static boolean isConnectedFast ( Context context ) { NetworkInfo info = Connectivity . getNetworkInfo ( context ) ; return ( info != _NULL && info . isConnected ( ) && Connectivity . isConnectionFast ( info . getType ( ) , info . getSubtype ( ) ) ) ; }
20819	public MessagesSearchQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
20858	public boolean isLocked ( ) { return locked ; }
20879	public static double calculateExpression ( String expression ) { return EXPR_EVAL_CACHE . get ( expression , _NULL ) ; }
20882	public RequestHandle delete ( Context context , String url , ResponseHandlerInterface responseHandler ) { final HttpDelete delete = new HttpDelete ( url ) ; return sendRequest ( httpClient , httpContext , delete , _NULL , responseHandler , context ) ; }
20909	public Set < String > scan ( ) { initPatterns ( ) ; List < String > roots = packagePatterns . getRoots ( ) ; InternalScanner scanner = new InternalScanner ( getClassLoader ( ) ) ; Set < String > exports = scanner . findInPackages ( new PatternTest ( ) , roots . toArray ( new String [ roots . size ( ) ] ) ) ; return exports ; }
20931	public PollsGetVotersQuery friendsOnly ( Boolean value ) { return unsafeParam ( _CHAR friends_only _CHAR , value ) ; }
20932	public static int calculateXenvCPU ( int deliveryControllerCount , int vCenterServerCount ) { final int dc = Integer . parseInt ( VDICalculator . DEFAULTS . getString ( _CHAR xen . controller . vcpu . default _CHAR ) ) * deliveryControllerCount ; final int vc = Integer . parseInt ( VDICalculator . DEFAULTS . getString ( _CHAR xen . vcenter . vcpu . default _CHAR ) ) * vCenterServerCount ; return dc + vc ; }
20944	public void reset ( ) { count . reset ( ) ; }
20945	@ RequestMapping ( value = _CHAR / servers / clean_cache _CHAR , method = RequestMethod . POST ) public JsonResponse cleanServerCache ( @ RequestParam ( _CHAR server _CHAR ) String server ) { serverService . cleanCache ( server ) ; return JsonResponse . ok ( _BOOL ) ; }
20994	public static int [ ] transformIntArray ( Integer [ ] source ) { int [ ] destin = new int [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
21008	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR TRANSLATE \ _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR \ _CHAR SEARCH_NAME \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR SEARCH_RESULT \ _CHAR TEXT ) ; _CHAR ) ; }
21009	public void removeStyledLayerDescriptor ( StyledLayerDescriptor sldToDelete ) { }
21022	private long wakeupTime ( ) { if ( leases . isEmpty ( ) ) return Long . MAX_VALUE ; return leases . lastKey ( ) . actualRenew ; }
21028	@ Override protected void __setConfig ( Object config ) { m_containerConfig = ( ContainerConfig ) config ; }
21118	private void storeLegionAnnouncements ( Legion legion ) { for ( int i = _NUM ; i < ( legion . getAnnouncementList ( ) . size ( ) - _NUM ) ; i ++ ) { removeAnnouncement ( legion . getLegionId ( ) , legion . getAnnouncementList ( ) . firstEntry ( ) . getKey ( ) ) ; legion . removeFirstEntry ( ) ; } }
21139	public String toString ( ) { return _CHAR UnitConcatenator _CHAR ; }
21165	@ Override public boolean isEnabled ( ) { if ( ( attributeSelectionPanel != _NULL ) && ! isValueOnly ( ) ) { return attributeSelectionPanel . isEnabled ( ) ; } else { if ( comboBox != _NULL ) { return comboBox . isEnabled ( ) ; } } return _BOOL ; }
21175	public UrlSpaceConfigurer primaryBackupListener ( ISpaceModeListener primaryBackupListener ) { validate ( ) ; urlSpaceFactoryBean . setPrimaryBackupListener ( primaryBackupListener ) ; return this ; }
21178	protected int addUniqueLeafNode ( String elementName ) { int contentSpecIndex = createContentSpec ( ) ; fContentSpec . setValues ( XMLContentSpec . CONTENTSPECNODE_LEAF , elementName , _NULL ) ; setContentSpec ( contentSpecIndex , fContentSpec ) ; return contentSpecIndex ; }
21201	@ NotNull private ImageOverlayBuilder outlineOCRRegion ( @ NotNull OCRResult . Region region ) { region . lines . forEach ( _NULL ) ; return this ; }
21203	default void writeAttribute ( NamespaceManager ns , AttributeId attributeId , DataValue value , String indexRange ) throws UaException { AttributeWriter . writeAttribute ( ns , this , attributeId , value , indexRange ) ; }
21221	public MarketGetCommentsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
21230	private void inflateEmptyText ( ) { if ( mEmptyText != R . string . text_empty ) { if ( mEmptyLayout != R . layout . layout_empty ) { throw new RuntimeException ( _CHAR Can not assign the EmptyText attribute . '' + _CHAR You already overridden the entire emptyLayout , no need to specify _CHAR + _CHAR custom color or custom text message _CHAR ) ; } else { textEmpty . setText ( getResources ( ) . getString ( R . string . text_empty ) ) ; } } }
21232	public Vector add ( Vector vec ) { x += vec . x ; y += vec . y ; z += vec . z ; return this ; }
21296	public static final MediaFormat createVideoFormat ( String mime , int width , int height ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_WIDTH , width ) ; format . setInteger ( KEY_HEIGHT , height ) ; return format ; }
21318	method_info findMethod ( String s ) { method_info m ; int i ; for ( i = _NUM ; i < methods_count ; i ++ ) { m = methods [ i ] ; if ( s . equals ( m . toName ( constant_pool ) ) ) { return m ; } } return _NULL ; }
21322	public static void disable ( String event ) { instance . disabled . add ( event ) ; log ( event + _CHAR disabled _CHAR ) ; }
21331	public void assertMatches ( String stringToMatch , String regex ) { assertMatches ( _CHAR _CHAR , stringToMatch , regex ) ; }
21367	public Builder minWidth ( Number minWidth ) { this . minWidth = minWidth ; return this ; }
21402	public Location subtract ( Location vec ) { if ( vec == _NULL || vec . getWorld ( ) != getWorld ( ) ) { throw new IllegalArgumentException ( _CHAR Can not add Locations of differing worlds _CHAR ) ; } x -= vec . x ; y -= vec . y ; z -= vec . z ; return this ; }
21405	public static SM_SYSTEM_MESSAGE STR_GET_ITEM1 ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
21449	public static SM_SYSTEM_MESSAGE STR_MSG_USEMONEY ( int num0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , num0 ) ; }
21467	public void reAddAllItems ( @ NonNull Collection < ? extends MODEL > collection ) { if ( collection . size ( ) == _NUM ) { return ; } mInserts . addAll ( createEmptyInsertsList ( collection . size ( ) ) ) ; getItems ( ) . addAll ( collection ) ; }
21469	public static String join ( List l ) { return join ( l , _CHAR _CHAR ) ; }
21485	@ Override public boolean hasAttributes ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return ( attributes != _NULL && attributes . getLength ( ) != _NUM ) ; }
21504	public void remove ( String key ) { preferences . edit ( ) . remove ( key ) . apply ( ) ; }
21546	public boolean isLoading ( ) { return state . equals ( LOADING ) ; }
21638	public void clear ( ) { preferences . edit ( ) . clear ( ) . apply ( ) ; }
21641	public boolean containsId ( int id ) { return id2Node . keySet ( ) . contains ( id ) ; }
21651	public Builder baseUrl ( String baseUrl ) { checkNotNull ( baseUrl , _CHAR baseUrl == _NULL _CHAR ) ; HttpUrl httpUrl = HttpUrl . parse ( baseUrl ) ; if ( httpUrl == _NULL ) { throw new IllegalArgumentException ( _CHAR Illegal URL : _CHAR + baseUrl ) ; } return baseUrl ( httpUrl ) ; }
21664	public void removeColumn ( Column c ) { int idx = m_columns . indexOf ( c ) ; if ( idx < _NUM ) { throw new IllegalArgumentException ( _CHAR No such column . '' ) ; } removeColumn ( idx ) ; }
21686	public final void error ( final Object o ) { log ( Level . ERROR , o ) ; }
21693	void assignParamToLocal ( int right , Local left ) { PurityNode node = cacheNode ( new PurityParamNode ( right ) ) ; localsRemove ( left ) ; localsPut ( left , node ) ; nodes . add ( node ) ; paramNodes . add ( node ) ; if ( doCheck ) sanityCheck ( ) ; }
21698	public void advance ( ) throws ConcurrentModificationException , NoSuchElementException { if ( referenceCount != count ) { throw new ConcurrentModificationException ( ) ; } current = next ; try { while ( states [ ++ next ] != FULL ) { } } catch ( ArrayIndexOutOfBoundsException e ) { next =- _NUM ; if ( current < _NUM ) { throw new NoSuchElementException ( ) ; } } }
21741	@ Override public boolean equals ( Object o ) { return o == this ; }
21797	public void stepStart ( LoadableComponentContext context ) { String info = produceLoadableComponentInfo ( context . getConditionContext ( ) ) ; LOG . debug ( _CHAR Started lodable component condition evaluation : _CHAR + info ) ; progressData . add ( new ConditionProgressStep ( info ) ) ; }
21805	public static Response post ( String url , JSON params ) { return post ( url , _CHAR application / x - javascript ; charset = UTF8 _CHAR , _NULL , params ) ; }
21867	public boolean isPredefined ( ) { return predefined ; }
21883	public void put ( String label , String newLabel ) { label2label . put ( label , newLabel ) ; }
21909	public < T > Some < T > some ( Task < T > task ) { return new Some < > ( this . executor_ , task ) ; }
21925	public static boolean isNotEmpty ( String str ) { return ! isEmpty ( str ) ; }
21955	public void toString ( StringBuffer sb ) { getTypeAccess ( ) . toString ( sb ) ; sb . append ( _CHAR < > _CHAR ) ; }
21966	public static SM_SYSTEM_MESSAGE STR_GATHER_START_1_BASIC ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
22029	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR CUSTOMER \ _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR \ _CHAR NAME \ _CHAR TEXT NOT NULL ) ; _CHAR ) ; }
22042	public String toString ( ) { return _CHAR JavaStreamingAudioPlayer _CHAR ; }
22059	public static void v ( String tag , String msg ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } Log . v ( tag , msg ) ; }
22068	@ NotNull public static String dumpTree ( @ NotNull TreeElement root ) { final StringBuilder builder = new StringBuilder ( ) ; dumpTreeToBuilder ( builder , root , _NUM ) ; return builder . toString ( ) ; }
22069	private void addDownloadIdToSharedPrefs ( int downloadId ) { Set < String > downloadIds = getStoredDownloadInfo ( DOWNLOAD_NOTIFICATION_IDS ) ; downloadIds . add ( Integer . toString ( downloadId ) ) ; storeDownloadInfo ( DOWNLOAD_NOTIFICATION_IDS , downloadIds ) ; }
22140	public void leftTrim ( int numberOfSample ) { trim ( numberOfSample , _NUM ) ; }
22146	@ After public void afterTest ( ) { removeTestData ( ) ; }
22164	public static void unregister ( DmnEngine dmnEngine ) { dmnEngines . remove ( dmnEngine . getName ( ) ) ; }
22199	public static < T > List < T > stringToList ( String val , Class < T > type ) { String [ ] tokens = trim ( val ) . split ( _CHAR , _CHAR ) ; return Arrays . stream ( tokens ) . map ( _NULL ) . collect ( Collectors . toList ( ) ) ; }
22217	public void output ( Source input ) throws TransformerException { output ( input , new StreamResult ( new PrintStream ( System . out , _BOOL ) ) ) ; }
22228	public void notifyItemuseObservers ( Item item ) { notifyObservers ( ObserverType . ITEMUSE , item ) ; }
22298	protected DTDDVFactory createDatatypeValidatorFactory ( ) { return DTDDVFactory . getInstance ( ) ; }
22299	@ Override public boolean isCellEditable ( EventObject evt ) { return _BOOL ; }
22304	public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_RESISTED_ME_TO_B ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
22305	public boolean isSuccess ( ) { return success ; }
22320	public static void clearCommKey ( AirMapFlight flight , final AirMapCallback < Void > listener ) { String url = String . format ( flightEndCommUrl , flight . getFlightId ( ) ) ; AirMap . getClient ( ) . post ( url , new VoidCallback ( listener ) ) ; }
22326	public Builder requestTimeoutMs ( long requestTimeoutMs ) { this . _requestTimeoutMs = requestTimeoutMs ; return this ; }
22328	public static void dropTable ( Database db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR BANGUMI_CALENDAR \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
22339	@ Override public boolean isCellEditable ( int row , int col ) { if ( isConnectedToDataSource ) { if ( col != FIELD_COLUMN_ID ) { return _BOOL ; } else { return _BOOL ; } } else { return _BOOL ; } }
22372	public static byte [ ] toByteArray ( Writable ... writables ) { final DataOutputBuffer out = new DataOutputBuffer ( ) ; try { for ( Writable w : writables ) { w . write ( out ) ; } out . close ( ) ; } catch ( IOException e ) { throw new RuntimeException ( _CHAR Fail to convert writables to a byte array _CHAR , e ) ; } return out . getData ( ) ; }
22383	protected DerivativeStructure computeObjectiveValueAndDerivative ( double point ) throws MathIllegalStateException { incrementEvaluationCount ( ) ; return function . value ( new DerivativeStructure ( _NUM , _NUM , _NUM , point ) ) ; }
22401	public long value ( int i ) { return Array . getLong ( values , i ) ; }
22419	public static SM_SYSTEM_MESSAGE STR_GATHER_SUCCESS_5_FORESTRY ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
22441	public static void validateConfAndURI ( DistributedLogConfiguration conf , URI uri ) throws IllegalArgumentException { if ( _NULL == conf ) { throw new IllegalArgumentException ( _CHAR Incorrect Configuration _CHAR ) ; } else { conf . validate ( ) ; } if ( ( _NULL == uri ) || ( _NULL == uri . getAuthority ( ) ) || ( _NULL == uri . getPath ( ) ) ) { throw new IllegalArgumentException ( _CHAR Incorrect ZK URI _CHAR ) ; } }
22475	private static int byteswap ( int val ) { return ( ( ( val & _NUM ) >> > _NUM ) + ( ( val & _NUM ) >> > _NUM ) + ( ( val & _NUM ) << _NUM ) + ( ( val & _NUM ) << _NUM ) ) ; }
22593	@ Override public void endDocument ( Augmentations augs ) throws XNIException { }
22604	@ Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_login ) ; }
22616	public boolean isSeparateGroup ( ) { return isSeparateGroup ; }
22670	@ Override public ListenableFuture < MemberUpdateResponse > updateMember ( long memberID , List < String > endpoints ) { MemberUpdateRequest memberUpdateRequest = MemberUpdateRequest . newBuilder ( ) . addAllPeerURLs ( endpoints ) . setID ( memberID ) . build ( ) ; return clusterStub . memberUpdate ( memberUpdateRequest ) ; }
22673	public static void checkMultiplicationCompatible ( final AnyMatrix left , final AnyMatrix right ) throws MathIllegalArgumentException { if ( left . getColumnDimension ( ) != right . getRowDimension ( ) ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . DIMENSIONS_MISMATCH , left . getColumnDimension ( ) , right . getRowDimension ( ) ) ; } }
22682	public static final MediaFormat createSubtitleFormat ( String title , String language ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_TITLE , title ) ; format . setString ( KEY_LANGUAGE , language ) ; return format ; }
22694	public static BuildersContext createBuildersContext ( ClassName type , ClassName generatedType , BuilderLifecycle builderLifecycle ) { return new BuildersContext ( builderLifecycle , type , generatedType ) ; }
22727	@ Override public void onMessageReceived ( RemoteMessage remoteMessage ) { Log . e ( TAG , _CHAR From : _CHAR + remoteMessage . getFrom ( ) ) ; Log . e ( TAG , _CHAR From : _CHAR + remoteMessage . getData ( ) . get ( _CHAR body _CHAR ) ) ; String data = remoteMessage . getData ( ) . get ( _CHAR body _CHAR ) ; sendNotification ( data ) ; }
22753	public static Executor createTaskDistributor ( ) { return Executors . newCachedThreadPool ( createThreadFactory ( Thread . NORM_PRIORITY , _CHAR uil - pool - d - _CHAR ) ) ; }
22756	protected void resetOptions ( ) { m_InfoGains = _NULL ; m_missing_merge = _BOOL ; m_Binarize = _BOOL ; }
22768	@ Override protected void initToolbar ( Bundle savedInstanceState ) { }
22775	public static Data load ( String table , W q ) { return Helper . load ( table , q , Data . class ) ; }
22785	public synchronized void end ( ) { this . active = _BOOL ; this . selectedObject = _NULL ; }
22801	public static void publishAllServices ( ) throws RpcException { try { ServicePublisher . publishAllServices ( ) ; } catch ( RegistryException e ) { throw new RpcException ( _CHAR error while publishing all services '' , e ) ; } }
22815	public FriendsGetQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
22821	@ Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_main ) ; initModel ( ) ; initPresenter ( ) ; }
22884	public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_ENEMY_DODGE ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
22910	public FaveGetVideosQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
22934	public DOMParser createDOMParser ( ) { SymbolTable symbolTable = fShadowSymbolTable ? new ShadowedSymbolTable ( fSynchronizedSymbolTable ) : fSynchronizedSymbolTable ; XMLGrammarPool grammarPool = fShadowGrammarPool ? new ShadowedGrammarPool ( fSynchronizedGrammarPool ) : fSynchronizedGrammarPool ; return new DOMParser ( symbolTable , grammarPool ) ; }
22935	public static GenericValue create ( Delegator delegator , ModelEntity modelEntity , Map < String , ? extends Object > fields ) { GenericValue newValue = new GenericValue ( ) ; newValue . init ( delegator , modelEntity , fields ) ; return newValue ; }
22968	@ Override public boolean isCellEditable ( EventObject evt ) { if ( evt instanceof MouseEvent ) { return ( ( MouseEvent ) evt ) . getClickCount ( ) >= _NUM ; } return _BOOL ; }
23007	public FaveGetMarketItemsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
23037	public int maxId ( ) { int t =- _NUM ; while ( _BOOL ) { int s = bits . nextSetBit ( t + _NUM ) ; if ( s == - _NUM ) return t ; else t = s ; } }
23058	private void emitParticles ( ) { switch ( currentWeather ) { case RAIN : ps . emitWithGravity ( this , Gravity . BOTTOM , rainParticles ) ; break ; case SNOW : ps . emitWithGravity ( this , Gravity . BOTTOM , snowParticles ) ; break ; default : break ; } isPlaying = _BOOL ; }
23131	public void addPreAllocatedServiceUnit ( String suName , ResourceQuota quota ) { this . preAllocatedBundles . add ( suName ) ; this . preAllocatedQuota . add ( quota ) ; estimateLoadPercentage ( ) ; }
23138	@ Override public AudioInputStream reSynthesize ( int backchannelNumber , AudioFileFormat aft ) throws SynthesisException { double [ ] pScalesArray = { _NUM . _NUM } ; double [ ] tScalesArray = { _NUM . _NUM } ; return synthesizeUsingF0Modification ( backchannelNumber , pScalesArray , tScalesArray , aft ) ; }
23232	public void reset ( ) { firstLiteralType = _NULL ; }
23253	public void startSearcherPruningThread ( CountDownLatch shutdownNow ) { if ( searcherPruningThread == _NULL ) { searcherPruningThread = new SearcherPruningThread ( shutdownNow ) ; searcherPruningThread . setName ( _CHAR LuceneSearcherPruning - _CHAR + name ) ; searcherPruningThread . start ( ) ; } }
23275	public void onCameraOpened ( CameraView cameraView ) { }
23329	public static GeneratorOutput generate ( GeneratorInput generatorInput ) { List < DescriptionInput > goals = generatorInput . goals ; BuildersContext context = generatorInput . context ; return goals . stream ( ) . map ( prepare ( context ) ) . map ( process ) . collect ( collectOutput ( context ) ) ; }
23332	public final void debug ( final Object o ) { log ( Level . DEBUG , o ) ; }
23356	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR AQI \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
23388	public FileInfo query_file_info1 ( String file_id ) throws IOException , MyException { String [ ] parts = new String [ _NUM ] ; this . errno = this . split_file_id ( file_id , parts ) ; if ( this . errno != _NUM ) { return _NULL ; } return this . query_file_info ( parts [ _NUM ] , parts [ _NUM ] ) ; }
23417	public void selectAll ( boolean select ) { dir . getMainViewer ( ) . selectAllNodes ( select ) ; }
23422	public void open ( ) { driver . get ( domain + EDITOR_HTML + path ) ; }
23452	public static final MediaFormat createSubtitleFormat ( String title , String language ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_TITLE , title ) ; format . setString ( KEY_LANGUAGE , language ) ; return format ; }
23453	private void complain ( ) throws ParseException { throw new ParseException ( _CHAR unable to parse line : _CHAR + line , _NUM ) ; }
23459	public boolean evalPermissions ( DispatchContext dctx , Map < String , ? extends Object > context ) { if ( this . containsPermissions ( ) ) { for ( ModelPermGroup group : this . permissionGroups ) { if ( ! group . evalPermissions ( dctx , context ) ) { return _BOOL ; } } return _BOOL ; } else { return _BOOL ; } }
23464	final void advance ( ) { if ( next == _NULL ) throw new NoSuchElementException ( ) ; lastReturned = next ; for ( ; ; ) { next = next . next ; if ( next == _NULL ) break ; Object x = next . value ; if ( x != _NULL && x != next ) { nextValue = ( V ) x ; break ; } } }
23544	public String toString ( ) { return _CHAR MultiFile8BitAudioPlayer _CHAR ; }
23564	public Object [ ] internalGetChildren ( Object o , IProgressMonitor monitor ) { return new Object [ _NUM ] ; }
23576	protected MarketAddToAlbumQuery albumIds ( List < Integer > value ) { return unsafeParam ( _CHAR album_ids _CHAR , value ) ; }
23579	public BoardGetCommentsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
23607	private boolean transactionsIsEmpty ( ) { return loadingJobs . get ( ) + enqueuedJobs . get ( ) == _NUM ; }
23625	public void fire ( ) { }
23630	public synchronized void closeNow ( ) { if ( ! _closed ) { _referenceCount = _NUM ; closeDataStore ( ) ; } }
23667	public NewsfeedGetMentionsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
23684	private void addNode ( int nodeId ) { ZWaveEvent zEvent = new ZWaveInitializationStateEvent ( nodeId , ZWaveNodeInitStage . EMPTYNODE ) ; notifyEventListeners ( zEvent ) ; ioHandler . deviceDiscovered ( nodeId ) ; new ZWaveInitNodeThread ( this , nodeId ) . start ( ) ; }
23728	public DistributedLogClientBuilder serverSet ( ServerSet serverSet ) { DistributedLogClientBuilder newBuilder = newBuilder ( this ) ; newBuilder . _routingServiceBuilder = RoutingUtils . buildRoutingService ( serverSet ) ; newBuilder . _enableRegionStats = _BOOL ; return newBuilder ; }
23737	public static void addSLDOutputListener ( SLDOutputInterface sldOutput ) { for ( String key : symbolRenderPanelMap . keySet ( ) ) { RenderSymbolInterface render = symbolRenderPanelMap . get ( key ) ; render . addSLDOutputListener ( sldOutput ) ; } }
23741	public static CompilerSettings defaultSettings ( ) { return CompilerSettings . of ( DEFAULT_CPU_ACCOUNTING_MODE , DEFAULT_CONST_FOLDING_MODE , DEFAULT_CONST_CACHING_MODE , DEFAULT_BYTE_STRING_MODE , DEFAULT_NODE_SIZE_LIMIT ) ; }
23742	@ Override public boolean isCellEditable ( int rowIndex , int columnIndex ) { return ( ( columnIndex == COL_MIN_SCALE ) || ( columnIndex == COL_MAX_SCALE ) ) ; }
23762	private void fillXMLAttributes ( Attributes att ) { fAttributes . removeAllAttributes ( ) ; final int len = att . getLength ( ) ; for ( int i = _NUM ; i < len ; ++ i ) { fillXMLAttribute ( att , i ) ; fAttributes . setSpecified ( i , _BOOL ) ; } }
23831	public static void f ( String tag , String msg ) { if ( sLevel > LEVEL_FATAL ) { return ; } Log . wtf ( tag , msg ) ; }
23838	public static void writeString ( PacketBuffer buf , String value ) { buf . writeInt ( value . length ( ) ) ; buf . writeString ( value ) ; }
23879	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR _CHAR ( _CHAR + _CHAR _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR _CHAR TEXT NOT NULL , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR INTEGER ) ; _CHAR ) ; }
23906	public MethodsClient methods ( ) { return new MethodsClientImpl ( httpClient ) ; }
23990	private boolean peerExists ( String id ) { if ( id == _NULL ) return _BOOL ; for ( Peer peer : peerList ) { if ( id . equals ( peer . getPeerId ( ) ) ) { return _BOOL ; } } return _BOOL ; }
24013	public void clearSharing ( boolean clearUser ) { if ( clearUser ) { user = _NULL ; } publicAccess = AccessStringHelper . DEFAULT ; externalAccess = _BOOL ; if ( userGroupAccesses != _NULL ) { userGroupAccesses . clear ( ) ; } }
24015	public void unlockUserInput ( ) { getCommandManager ( ) . setEnableCritical ( _BOOL ) ; searchManager . getFindDialogAsToolBar ( ) . setEnableCritical ( _BOOL ) ; frame . setCursor ( Cursor . getPredefinedCursor ( Cursor . DEFAULT_CURSOR ) ) ; isLocked = _BOOL ; statusBar . setText2 ( _CHAR _CHAR ) ; }
24032	public static void createFlight ( AirMapFlight flight , final AirMapCallback < AirMapFlight > listener ) { String url = flightBaseUrl + flight . getGeometryType ( ) . toString ( ) ; JSONObject params = flight . getAsParams ( ) ; AirMap . getClient ( ) . postWithJsonBody ( url , params , new GenericOkHttpCallback ( listener , AirMapFlight . class ) ) ; }
24074	@ Override public Attr createAttributeNS ( String namespaceURI , String qualifiedName ) throws DOMException { return new PSVIAttrNSImpl ( this , namespaceURI , qualifiedName ) ; }
24079	private BSPTree < Sphere1D > nextInternalNode ( BSPTree < Sphere1D > node ) { if ( childAfter ( node ) . getCut ( ) != _NULL ) { return leafAfter ( node ) . getParent ( ) ; } while ( isAfterParent ( node ) ) { node = node . getParent ( ) ; } return node . getParent ( ) ; }
24085	public static synchronized void removeAccountOnLS ( Account account ) { accountsOnLS . remove ( account . getId ( ) ) ; }
24088	public void collapseToTop ( ) { getCollapsedIds ( ) . clear ( ) ; if ( getTree ( ) . getRoot ( ) != _NULL ) { for ( Edge e = getTree ( ) . getRoot ( ) . getFirstOutEdge ( ) ; e != _NULL ; e = getTree ( ) . getRoot ( ) . getNextOutEdge ( e ) ) { getCollapsedIds ( ) . add ( ( Integer ) e . getTarget ( ) . getInfo ( ) ) ; } updateTree ( ) ; } }
24097	@ Override public String toString ( ) { return _CHAR DummyFreeTTSVoice _CHAR ; }
24127	public void collapse ( NodeBase v ) { if ( v != _NULL ) { for ( Enumeration descendants = v . depthFirstEnumeration ( ) ; descendants . hasMoreElements ( ) ; ) { v = ( NodeBase ) descendants . nextElement ( ) ; dataTree . collapsePath ( new TreePath ( v . getPath ( ) ) ) ; } } }
24141	public void write ( TBase t ) throws IOException { try { t . write ( binaryOut ) ; dataOutputStream . flush ( ) ; } catch ( TException e ) { throw new IOException ( e ) ; } }
24144	public void cancel ( ) { synchronized ( myTasks ) { myTasks . clear ( ) ; myTasks . notifyAll ( ) ; } }
24178	public boolean isLocked ( ) { return getInt ( _CHAR locked _CHAR ) > _NUM ; }
24209	public static SM_SYSTEM_MESSAGE STR_CRAFT_RECIPE_LEARN ( int value0 , String name ) { return new SM_SYSTEM_MESSAGE ( _NUM , _CHAR [ recipe_ex : _CHAR + value0 + _CHAR ; _CHAR + name + _CHAR ] _CHAR ) ; }
24223	private boolean isArrayType ( HashSet < String > resolvedTypesSet ) { return resolvedTypesSet . size ( ) == _NUM && resolvedTypesSet . contains ( Types . strArray ) ; }
24234	public AudioRestoreQuery restore ( UserActor actor , int audioId ) { return new AudioRestoreQuery ( getClient ( ) , actor , audioId ) ; }
24235	protected void registerForTextFieldButton ( FieldIdEnum fieldId , FieldConfigStringButtonInterface listener ) { FieldConfigBase fieldConfig = fieldConfigManager . get ( fieldId ) ; if ( fieldConfig != _NULL ) { FieldConfigString textField = ( FieldConfigString ) fieldConfig ; textField . addButtonPressedListener ( listener ) ; } }
24250	public final void error ( final Object o , final Throwable t ) { log ( Level . ERROR , o , t ) ; }
24262	private void subscribeToAlarmTopic ( ) throws JMSException { alarmSession = connection . createSession ( _BOOL , Session . AUTO_ACKNOWLEDGE ) ; alarmConsumer = alarmSession . createConsumer ( alarmTopic ) ; alarmConsumer . setMessageListener ( alarmListenerWrapper ) ; LOGGER . debug ( _CHAR Successfully subscribed to alarm topic _CHAR ) ; }
24283	@ Override public boolean isDataPresent ( ) { return _BOOL ; }
24319	public PackageScanner usePatternFactory ( PatternFactory factory ) { this . patternFactory = factory ; return this ; }
24354	@ Override public boolean isReadOnly ( ) { return readOnly ; }
24373	public void initialise ( GeoServerReadProgressInterface parent , GeoServerConnection connection ) { this . parentObj = parent ; this . connection = connection ; GeoServerLayer . setDefaultWorkspaceName ( DEFAULT_WORKSPACE_NAME ) ; }
24387	public static double abs1 ( Z z ) { return Math . abs ( z . re ) + Math . abs ( z . im ) ; }
24402	public void toString ( StringBuffer s ) { super . toString ( s ) ; }
24427	public static Patterns jars ( String [ ] includes ) { return new Patterns ( includes , new String [ ] { } ) ; }
24450	public static void v ( String tag , String msg , Throwable throwable ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } Log . v ( tag , msg , throwable ) ; }
24453	public boolean hasValueBeenUpdated ( int rowIndex , int columnIndex ) { ScaleSLDData data = scaleList . get ( rowIndex ) ; if ( columnIndex == COL_MIN_SCALE ) { return data . isMinimumScaleUpdated ( ) ; } if ( columnIndex == COL_MAX_SCALE ) { return data . isMaximumScaleUpdated ( ) ; } return _BOOL ; }
24470	private Object readResolve ( ) { return LazyHolder . INSTANCE ; }
24481	public void toString ( StringBuffer s ) { super . toString ( s ) ; }
24504	@ Override public void endDocument ( Augmentations augs ) throws XNIException { try { if ( fDocumentHandler != _NULL ) { fDocumentHandler . endDocument ( ) ; } if ( fContentHandler != _NULL ) { fContentHandler . endDocument ( ) ; } } catch ( SAXException e ) { throw new XNIException ( e ) ; } }
24521	public static synchronized ExampleLineInterface createExampleLine ( Object object ) { if ( exampleLineImpl == _NULL ) { exampleLineImpl = new ExampleLineImpl ( ) ; } return exampleLineImpl ; }
24524	private void loadInstantUploadPath ( ) { SharedPreferences appPrefs = PreferenceManager . getDefaultSharedPreferences ( getApplicationContext ( ) ) ; mUploadPath = appPrefs . getString ( _CHAR instant_upload_path _CHAR , getString ( R . string . instant_upload_path ) ) ; mPrefInstantUploadPath . setSummary ( mUploadPath ) ; }
24533	public AemContentFinder refreshResults ( ) { getCurrentTab ( ) . refreshResults ( ) ; return this ; }
24649	public static void clearRecentFiles ( ) { String str = ProgramProperties . get ( RECENTFILES , _CHAR _CHAR ) ; if ( str . length ( ) != _NUM ) { ProgramProperties . put ( RECENTFILES , _CHAR _CHAR ) ; notifyListChange ( RECENTFILES ) ; } }
24669	public AsyncCatchOptions useBestBall ( boolean useBestPokeball ) { this . useBestPokeball = useBestPokeball ; return this ; }
24703	void onDrag ( float elasticOffset , float elasticOffsetPixels , float rawOffset , float rawOffsetPixels ) { }
24704	public void clear ( ) { clearIntentHistory ( ) ; mInitialNavigationType = NAVIGATION_TYPE_NONE ; mIsOnEffectiveRedirectChain = _BOOL ; mLastCommittedEntryIndexBeforeStartingNavigation = _NUM ; mShouldNotOverrideUrlLoadingUntilNewUrlLoading = _BOOL ; }
24734	public EntityQuery from ( DynamicViewEntity dynamicViewEntity ) { this . dynamicViewEntity = dynamicViewEntity ; this . entityName = _NULL ; return this ; }
24745	public void init ( ) { sqlInsert = new BufferedReader ( new InputStreamReader ( this . getClass ( ) . getResourceAsStream ( _CHAR / sql / cache - data - insert . sql _CHAR ) ) ) ; sqlRemove = new BufferedReader ( new InputStreamReader ( this . getClass ( ) . getResourceAsStream ( _CHAR / sql / cache - data - remove . sql _CHAR ) ) ) ; }
24760	public void remove ( IObjectInfo < T > poi ) { remove_impl ( poi , _BOOL ) ; }
24792	public VideoSearchQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
24801	public static void f ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_FATAL ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . wtf ( tag , msg ) ; }
24802	public int addOrderTerm ( String termTypeId , BigDecimal termValue , Long termDays ) { return addOrderTerm ( termTypeId , termValue , termDays , _NULL ) ; }
24811	public boolean equalsTransform ( ViewTransform transform ) { if ( dx == transform . dx && dy == transform . dy && scale == transform . scale ) { return _BOOL ; } return _BOOL ; }
24822	public static final SM_SYSTEM_MESSAGE STR_MSG_HOUSING_AUCTION_SUCCESS ( int address ) { return new SM_SYSTEM_MESSAGE ( _NUM , address ) ; }
24842	public BaseAdapterHelper linkify ( int viewId ) { TextView view = retrieveView ( viewId ) ; Linkify . addLinks ( view , Linkify . ALL ) ; return this ; }
24852	public String parseString ( String text ) throws DataParseException { return text ; }
24856	public boolean isInfinite ( ) { return nans == INFINITE ; }
24870	private boolean preUsageCheck ( ) { Conditions skillConditions = skillTemplate . getUseconditions ( ) ; return skillConditions != _NULL ? skillConditions . validate ( this ) : _BOOL ; }
24886	public TestBinderFactory buildBinderFactory ( LinkedHashSet < DimensionConfig > dimensionConfiguration , MetricLoader metricLoader , TableLoader tableLoader , ApplicationState state ) { return new TestBinderFactory ( dimensionConfiguration , metricLoader , tableLoader , state ) ; }
24889	private static void createDataSchema ( boolean hdfs ) throws IOException { createDataSchema ( _NULL , hdfs ) ; }
24924	private boolean useEquipmentConditionsCheck ( ) { Conditions useEquipConditions = skillTemplate . getUseEquipmentconditions ( ) ; return useEquipConditions != _NULL ? useEquipConditions . validate ( this ) : _BOOL ; }
24987	public ResourcesPoet addBool ( String name , String value ) { Element element = document . createElement ( _CHAR bool _CHAR ) ; element . setAttribute ( _CHAR name _CHAR , name ) ; element . appendChild ( document . createTextNode ( value ) ) ; resourceElement . appendChild ( element ) ; return this ; }
25007	@ Override public void stopWatch ( ) { super . stopWatch ( ) ; _retries = _NUM ; }
25035	public boolean fromJSON ( JSON jo ) { for ( String name : jo . keySet ( ) ) { set ( name , jo . get ( name ) ) ; } return _BOOL ; }
25050	public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_FEED_START_EATING ( String value0 , String value1 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 , value1 ) ; }
25070	public void print ( MessageOrBuilder message , Appendable output ) throws IOException { output . append ( printToString ( message ) ) ; }
25112	public void incThresholdClearedCount ( ) { clearedCount ++ ; }
25128	public void clear ( ) { panel . clear ( ) ; }
25195	private final boolean eq ( Object o1 , Object o2 ) { return o1 == o2 || ( ( o1 != _NULL ) && o1 . equals ( o2 ) ) ; }
25196	private Object readResolve ( ) { return LazyHolder . INSTANCE ; }
25201	public void removeChangeListener ( ChangeListener cl ) { listeners . remove ( cl ) ; }
25202	private static void formatTwoDigits ( int n , StringBuilder buf ) { if ( n < _NUM ) buf . append ( _CHAR ) ; buf . append ( n ) ; }
25247	public static final MediaFormat createAudioFormat ( String mime , int sampleRate , int channelCount ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_SAMPLE_RATE , sampleRate ) ; format . setInteger ( KEY_CHANNEL_COUNT , channelCount ) ; return format ; }
25257	public static < T > T [ ] toArray ( List < T > list ) { return ( T [ ] ) list . toArray ( ) ; }
25268	public void changeTopic ( String topic ) { skype . changeGroupTopic ( this , topic ) ; }
25272	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR CUSTOMER \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
25277	@ Override public void applyFacets ( XSFacets facets , short presentFacet , short fixedFacet , ValidationContext context ) throws InvalidDatatypeFacetException { if ( context == _NULL ) { context = fEmptyContext ; } applyFacets ( facets , presentFacet , fixedFacet , SPECIAL_PATTERN_NONE , context ) ; }
25290	@ Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_update_me ) ; }
25292	@ Override protected void initListeners ( ) { }
25298	public boolean isTimeoutErr ( ) { return timeoutErr ; }
25304	@ Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_home , container , _BOOL ) ; initModel ( ) ; initPresenter ( ) ; initView ( view ) ; return view ; }
25329	@ Override public boolean isReadOnly ( ) { return readOnly ; }
25337	public LeaseMap createLeaseMap ( long duration ) { return new ConstrainableRegistrarLeaseMap ( this , duration ) ; }
25338	public static SM_SYSTEM_MESSAGE STR_MSG_MPHeal_TO_ME ( int num0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , num0 ) ; }
25385	public void caseCastExpr ( CastExpr v ) { setResult ( fetchNode ( v . getOp ( ) ) ) ; }
25410	@ RequestMapping ( method = RequestMethod . POST , value = _CHAR / api / drops / cancel _CHAR ) public CancelDropConfig cancelDrop ( @ RequestBody CancelDropConfig cancelDropConfig ) throws Exception { PollableFuture cancelDropFuture = dropService . cancelDrop ( cancelDropConfig . getDropId ( ) , PollableTask . INJECT_CURRENT_TASK ) ; cancelDropConfig . setPollableTask ( cancelDropFuture . getPollableTask ( ) ) ; return cancelDropConfig ; }
25413	public JSONStringer endObject ( ) throws JSONException { return close ( Scope . EMPTY_OBJECT , Scope . NONEMPTY_OBJECT , _CHAR } _CHAR ) ; }
25418	public void removeFromUI ( ) { for ( Component component : componentList ) { this . parentBox . remove ( component ) ; } componentList . clear ( ) ; }
25435	public static boolean isPunctuation ( char c ) { return isRange ( c , _CHAR , _CHAR ) || isRange ( c , _CHAR , _CHAR ) || isRange ( c , _CHAR , _CHAR ) || isRange ( c , _CHAR , _CHAR ) ; }
25447	public static MutableContextSet empty ( ) { return new MutableContextSet ( ) ; }
25500	public void remove ( IObjectInfo < T > oi ) { remove_impl ( ( ObjectInfo < T > ) oi ) ; }
25561	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR newfriend \ _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY AUTOINCREMENT , _CHAR + _CHAR \ _CHAR UID \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR MSG \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR NAME \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR AVATAR \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR STATUS \ _CHAR INTEGER , _CHAR + _CHAR \ _CHAR TIME \ _CHAR INTEGER ) ; _CHAR ) ; }
25571	public static int calculateDaysInMonth ( int month ) { return calculateDaysInMonth ( _NUM , month ) ; }
25576	public List < SootMethod > all ( ) { List < SootMethod > ret = new ArrayList < SootMethod > ( ) ; ret . addAll ( application ( ) ) ; ret . addAll ( implicit ( ) ) ; return ret ; }
25598	public static int min ( final int a , final int b ) { return ( a <= b ) ? a : b ; }
25619	protected Boolean defaultAutoCommit ( ) { return this . defaultAutoCommit ; }
25679	public FriendsGetRequestsQueryWithExtended suggested ( Boolean value ) { return unsafeParam ( _CHAR suggested _CHAR , value ) ; }
25683	private void addToQueue ( SerialMessage serialMessage ) { if ( serialMessage == _NULL ) { return ; } if ( ! msgQueue . contains ( serialMessage ) && msgQueue . remainingCapacity ( ) > _NUM ) { msgQueue . add ( serialMessage ) ; } sendMessage ( ) ; }
25717	public static void refreshAccessToken ( RefreshTokenListener listener ) { Auth . refreshAccessToken ( getInstance ( ) . getContext ( ) , listener ) ; }
25718	@ Override public void initiateSpeculativeRequest ( final ScheduledExecutorService scheduler , final SpeculativeRequestExecutor requestExecutor ) { issueSpeculativeRequest ( scheduler , requestExecutor ) ; }
25749	public CatchResult catchPokemon ( double normalizedHitPosition , double normalizedReticleSize , double spinModifier , Pokeball type , int amount ) throws LoginFailedException , RemoteServerException { return catchPokemon ( normalizedHitPosition , normalizedReticleSize , spinModifier , type , amount , _NUM ) ; }
25763	@ Override public void empty ( Augmentations augs ) throws XNIException { }
25769	public static void log ( final String _msg ) { FirebaseCrash . log ( _msg ) ; }
25770	public static boolean isWindows ( ) { return SystemInfo . isWindows ; }
25786	public void stopAndError ( String errorMessage ) { mBasoStatus = BasoStatus . ERROR ; setFinishedText ( errorMessage ) ; toggleLayout ( ) ; }
25788	public JSONStringer endArray ( ) throws JSONException { return close ( Scope . EMPTY_ARRAY , Scope . NONEMPTY_ARRAY , _CHAR ] _CHAR ) ; }
25793	public static SM_SYSTEM_MESSAGE STR_NOTIFY_LOGOFF_BUDDY ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
25814	public Vector multiply ( Vector vec ) { x *= vec . x ; y *= vec . y ; z *= vec . z ; return this ; }
25826	@ Override public void endDTD ( Augmentations augmentations ) throws XNIException { }
25830	public void cook ( Java . CompilationUnit compilationUnit ) throws CompileException { this . compileToClassLoader ( compilationUnit ) ; }
25845	public static UserLayer createNewUserLayer ( ) { UserLayer userLayer = styleFactory . createUserLayer ( ) ; return userLayer ; }
25865	public void increase ( ) { gameTime ++ ; if ( getMinute ( ) == _NUM ) { checkDayTimeChange ( ) ; } }
25880	@ Override public synchronized void close ( ) { if ( mIsInitializing ) throw new IllegalStateException ( _CHAR Closed during initialization _CHAR ) ; if ( mDatabase != _NULL && mDatabase . isOpen ( ) ) { mDatabase . close ( ) ; mDatabase = _NULL ; } }
25924	protected AdsGetTargetingStatsQuery linkUrl ( String value ) { return unsafeParam ( _CHAR link_url _CHAR , value ) ; }
25931	public boolean hasGroups ( ) { for ( String sampleName : sampleOrder ) { if ( getGroupId ( sampleName ) != _NULL ) return _BOOL ; } return _BOOL ; }
25934	public static SM_SYSTEM_MESSAGE _STR_MSG_Heal_TO_ME ( int num0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , num0 ) ; }
25957	default void onDisable ( PluginBase pokkit ) { }
25979	public static int dpToPixels ( int dp , Context context ) { return ( int ) TypedValue . applyDimension ( TypedValue . COMPLEX_UNIT_DIP , dp , context . getResources ( ) . getDisplayMetrics ( ) ) ; }
25985	public AudioAddAlbumQuery addAlbum ( UserActor actor , String title ) { return new AudioAddAlbumQuery ( getClient ( ) , actor , title ) ; }
25987	@ Override public boolean isDataPresent ( ) { return _BOOL ; }
26001	public static void deleteESTestIndex ( String index ) { logger . info ( _CHAR Deleting index : _CHAR ) ; ProcessBuilder pDelete = new ProcessBuilder ( _CHAR curl _CHAR , _CHAR - XDELETE _CHAR , index ) ; try { executeCommand ( pDelete ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
26005	@ NonNull public static < W > Optional < W > with ( W value ) { return ( value == _NULL ) ? new None < W > ( ) : new Some < > ( value ) ; }
26046	public static SM_SYSTEM_MESSAGE STR_NOTIFY_LOGIN_BUDDY ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
26048	final public void remove ( String name ) { if ( context != _NULL ) { context . remove ( name ) ; } }
26054	private boolean endCondCheck ( ) { Conditions skillConditions = skillTemplate . getEndConditions ( ) ; return skillConditions != _NULL ? skillConditions . validate ( this ) : _BOOL ; }
26098	public static SM_SYSTEM_MESSAGE STR_SKILL_PROC_EFFECT_OCCURRED ( int value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , new DescriptionId ( value0 ) ) ; }
26102	public Math_Vector add ( double x , double y ) { this . x += x ; this . y += y ; return this ; }
26109	public NewsfeedSearchQuery search ( ) { return new NewsfeedSearchQuery ( getClient ( ) ) ; }
26128	public static synchronized ExamplePolygonInterface createExamplePolygon ( String hint ) { if ( examplePolygonImpl == _NULL ) { examplePolygonImpl = new ExamplePolygonImplIOM ( ) ; } return examplePolygonImpl ; }
26129	public int removeItemFrom ( long playlistId , long audioId ) { return resolver . delete ( MediaStore . Audio . Playlists . Members . getContentUri ( _CHAR external _CHAR , playlistId ) , MediaStore . Audio . Playlists . Members . AUDIO_ID + _CHAR = ? _CHAR , new String [ ] { String . valueOf ( audioId ) } ) ; }
26142	protected MarketRemoveFromAlbumQuery albumIds ( List < Integer > value ) { return unsafeParam ( _CHAR album_ids _CHAR , value ) ; }
26145	public static final MediaFormat createSubtitleFormat ( String title , String language ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_TITLE , title ) ; format . setString ( KEY_LANGUAGE , language ) ; return format ; }
26152	public AccountSaveProfileInfoQuery relationPartnerId ( Integer value ) { return unsafeParam ( _CHAR relation_partner_id _CHAR , value ) ; }
26155	public boolean hasValueBeenUpdated ( int row , int column ) { if ( column == COL_STYLE ) { GeoServerLayer layer = getLayer ( row ) ; return layerMap . get ( layer ) ; } return _BOOL ; }
26159	private boolean isValidItemIndex ( int index ) { return viewAdapter != _NULL && viewAdapter . getItemsCount ( ) > _NUM && ( isCyclic || index >= _NUM && index < viewAdapter . getItemsCount ( ) ) ; }
26182	public static long max ( final long a , final long b ) { return ( a <= b ) ? b : a ; }
26185	public DestTemplateParameterContext addParameter ( DestContextParameters destParam , String paramValue ) { return addParameter ( destParam . getName ( ) , paramValue ) ; }
26229	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR SEARCH_SUFFIX \ _CHAR ( _CHAR + _CHAR \ _CHAR ID \ _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR \ _CHAR SUFFIX \ _CHAR TEXT ) ; _CHAR ) ; }
26277	public static Long [ ] transformLongArray ( long [ ] source ) { Long [ ] destin = new Long [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
26284	public void addGroupMessageListener ( GroupMessageListener groupMessageListener ) { groupMessageListeners . add ( groupMessageListener ) ; }
26334	public boolean isFacade ( ) { return _facade ; }
26338	@ Override public boolean isShowLabel ( ) { return showLabel ; }
26342	public void closeListener ( String serverKey ) throws GenericServiceException { GenericMessageListener listener = listeners . get ( serverKey ) ; if ( listener == _NULL ) throw new GenericServiceException ( _CHAR No listener found with that serverKey . '' ) ; listener . close ( ) ; }
26343	public static SM_SYSTEM_MESSAGE STR_MSG_Recall_Rejected_EFFECT ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
26346	public void remove ( int id ) { String name = id2name . get ( id ) ; if ( name != _NULL ) name2id . remove ( name ) ; id2name . remove ( id ) ; }
26399	public DocsSearchQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
26405	private static void deleteFilesByDirectory ( File directory ) { if ( directory != _NULL && directory . exists ( ) && directory . isDirectory ( ) ) for ( File item : directory . listFiles ( ) ) item . delete ( ) ; }
26415	protected boolean hasDropExportStart ( Drop drop ) { return drop . getDropExporterConfig ( ) != _NULL ; }
26471	public static SM_SYSTEM_MESSAGE STR_GATHER_SUCCESS_1_BASIC ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
26474	public PhotosCreateCommentQuery fromGroup ( Boolean value ) { return unsafeParam ( _CHAR from_group _CHAR , value ) ; }
26495	public static LinkedHashSet < PhysicalTableDefinition > buildHourlyMonthlyTableDefinitions ( TestDimensions testDimensions ) { return Stream . concat ( buildHourlyTableDefinitions ( testDimensions ) . stream ( ) , buildMonthlyTableDefinitions ( testDimensions ) . stream ( ) ) . collect ( Collectors . toCollection ( _NULL ) ) ; }
26496	public void open ( ) throws IOException { FileFactory . FileType fileType = FileFactory . getFileType ( fileName ) ; dataOutputStream = FileFactory . getDataOutputStream ( fileName , fileType , bufferSize , append ) ; binaryOut = new TCompactProtocol ( new TIOStreamTransport ( dataOutputStream ) ) ; }
26537	public void clearPayments ( ) { this . expireSingleUsePayments ( ) ; paymentInfo . clear ( ) ; }
26538	public void addMemberEx ( LegionMemberEx legionMember ) { if ( legionMemberExById . containsKey ( legionMember . getObjectId ( ) ) || legionMemberExByName . containsKey ( legionMember . getName ( ) ) ) { throw new DuplicateAionObjectException ( ) ; } legionMemberExById . put ( legionMember . getObjectId ( ) , legionMember ) ; legionMemberExByName . put ( legionMember . getName ( ) , legionMember ) ; }
26569	@ Override public void reset ( ) throws XNIException { super . reset ( ) ; fInDTD = _BOOL ; fVersion = _CHAR _NUM . _NUM _CHAR ; fStandalone = _BOOL ; fNamespaces = fConfiguration . getFeature ( NAMESPACES ) ; fAugmentations = _NULL ; fDeclaredAttrs = _NULL ; }
26588	public void unlockUserInput ( ) { isLocked = _BOOL ; if ( commandManager != _NULL ) commandManager . setEnableCritical ( _BOOL ) ; getTabbedPane ( ) . setEnabled ( _BOOL ) ; setCursor ( Cursor . getDefaultCursor ( ) ) ; }
26590	public static RequestQueue newRequestQueue ( Context context , String assetFile ) throws CertificateException , IOException , KeyStoreException , NoSuchAlgorithmException , KeyManagementException { return newRequestQueue ( context , DEFAULT_CA_TYPE , assetFile ) ; }
26602	public MessagesGetHistoryQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
26608	public RTMClient rtm ( String apiToken ) throws IOException { try { return new RTMClient ( methods ( ) . rtmStart ( RTMStartRequest . builder ( ) . token ( apiToken ) . build ( ) ) . getUrl ( ) ) ; } catch ( SlackApiException | URISyntaxException e ) { throw new IllegalStateException ( _CHAR Could n _CHAR_CHAR ) ; } }
26620	public boolean isBigEndian ( ) { return isBigEndian ; }
26624	public static boolean isConnectedFast ( Context context ) { NetworkInfo info = NetworkUtil . getNetworkInfo ( context ) ; return ( info != _NULL && info . isConnected ( ) && NetworkUtil . isConnectionFast ( info . getType ( ) , info . getSubtype ( ) ) ) ; }
26649	private static void forceSet ( Object obj , Field f , Object val ) throws IllegalAccessException { f . setAccessible ( _BOOL ) ; f . set ( obj , val ) ; }
26652	public FaveGetUsersQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
26663	public void descreaseNestingLevel ( ) { currentNestingLevel -- ; }
26665	public static void printLogs ( ) { System . out . println ( getLogString ( ) ) ; }
26678	public void unlockUserInput ( ) { locked = _BOOL ; tabbedPane . setEnabled ( _BOOL ) ; setCursor ( Cursor . getDefaultCursor ( ) ) ; getCommandManager ( ) . setEnableCritical ( _BOOL ) ; getCommandManager ( ) . updateEnableState ( ) ; }
26687	public PhotosGetNewTagsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
26701	public static Color toColour ( String htmlColour ) { Color colour = _NULL ; if ( validColourString ( htmlColour ) ) { colour = SLD . toColor ( htmlColour ) ; } return colour ; }
26704	public static JavaRDD < List < Writable >> normalize ( Schema schema , JavaRDD < List < Writable >> data , List < String > skipColumns ) { return normalize ( schema , data , _NUM , _NUM , skipColumns ) ; }
26711	public boolean isBcontains ( int taxon ) { return B . get ( taxon ) ; }
26732	public boolean isNotSet ( ) { return isNotSet ; }
26748	public List < String > endpoints ( ) { return this . endpoints ; }
26771	private void stopTimer ( ) { if ( taskId != - _NUM ) { plugin . getServer ( ) . getScheduler ( ) . cancelTask ( taskId ) ; taskId =- _NUM ; } }
26772	public static < T > void addToJMenu ( JPopupMenu popupMenu , T [ ] choices , T initialChoice , final CallBack < T > callBack ) { add ( popupMenu , choices , initialChoice , callBack ) ; }
26801	public boolean last ( ) { return seek ( MDB_LAST ) ; }
26804	private void createVendorOptionPanel ( ) { vendorOptionRasterFactory = new VendorOptionRasterFactory ( getClass ( ) , getFunctionManager ( ) , this ) ; List < VendorOptionInterface > veList = vendorOptionRasterFactory . getVendorOptionList ( ) ; if ( veList != _NULL ) { for ( VendorOptionInterface extension : veList ) { extension . setParentPanel ( this ) ; } } }
26836	public static boolean isGeneralPunctuation ( char c ) { return isRange ( c , _CHAR , _CHAR ) ; }
26840	public final synchronized void sendPacket ( AionServerPacket bp ) { if ( isWriteDisabled ( ) ) { return ; } log . debug ( _CHAR sending packet : _CHAR + bp ) ; sendMsgQueue . addLast ( bp ) ; enableWriteInterest ( ) ; }
26870	public void clear ( ) { this . n = _NUM ; minImpl . clear ( ) ; maxImpl . clear ( ) ; sumImpl . clear ( ) ; sumLogImpl . clear ( ) ; sumSqImpl . clear ( ) ; geoMeanImpl . clear ( ) ; meanImpl . clear ( ) ; covarianceImpl . clear ( ) ; }
26901	public static synchronized HostViewsSupport sharedInstance ( ) { if ( sharedInstance == _NULL ) sharedInstance = new HostViewsSupport ( ) ; return sharedInstance ; }
26904	void invokeMenuPath ( @ NotNull String ... path ) { JMenuItem menuItem = findActionMenuItem ( path ) ; assertWithMessage ( _CHAR Menu path \ _CHAR _CHAR + Joiner . on ( _CHAR - > _CHAR ) . join ( path ) + _CHAR \ _CHAR is not enabled _CHAR ) . that ( menuItem . isEnabled ( ) ) . isTrue ( ) ; myRobot . click ( menuItem ) ; }
26911	public boolean isGlobalScope ( ) { return _BOOL ; }
26920	public static void writeShort ( PacketBuffer buf , short value ) { buf . writeShort ( value ) ; }
26941	public T waitForResult ( ) throws InterruptedException { try { return waitForResult ( - _NUM , TimeUnit . MILLISECONDS ) ; } catch ( TimeoutException e ) { throw new RuntimeException ( _CHAR Should not occur as we are waiting forever _CHAR ) ; } }
26982	private void validateRelationType ( RelationTypeImpl relationType ) { if ( ! ValidateGlobalRules . validateHasMinimumRoles ( relationType ) ) errorsFound . add ( ErrorMessage . VALIDATION_RELATION_TYPE . getMessage ( relationType . getId ( ) ) ) ; }
26988	@ Override public Element createElementNS ( String namespaceURI , String qualifiedName , String localpart ) throws DOMException { return new PSVIElementNSImpl ( this , namespaceURI , qualifiedName , localpart ) ; }
27015	public Observable < Book > observeChangingBooks ( ) { return changingBookSubject ; }
27027	public void afterMemberRemoved ( MemberRemovedEvent memberRemovedEvent ) { }
27032	public void removeSample ( String name ) { if ( table . rowKeySet ( ) . contains ( name ) ) { table . rowKeySet ( ) . remove ( name ) ; sampleOrder . remove ( name ) ; } }
27034	private void populateBuiltInProcessFunctions ( ) { for ( FunctionName functionName : factory . getFunctionNames ( ) ) { functionListModel . addElement ( functionName . getName ( ) ) ; } }
27044	public < T > Constant < T > constant ( String name , T constant ) { return new Constant < T > ( name , constant ) ; }
27085	public boolean isComplete ( ) { return ! ( Double . isNaN ( getXmin ( ) ) || Double . isNaN ( getXmax ( ) ) ) ; }
27128	public static void addStoneStats ( Item item , ManaStone stone , CreatureGameStats < ? > cgs ) { List < StatFunction > modifiers = stone . getModifiers ( ) ; if ( modifiers == _NULL ) { return ; } cgs . addEffect ( stone , modifiers ) ; }
27148	public void addUserPresenceListener ( UserPresenceListener userPresenceListener ) { userPresenceListeners . add ( userPresenceListener ) ; }
27184	public static ContextSet empty ( ) { return new ContextSet ( ) ; }
27215	@ PostConstruct public void init ( ) { commandExecutionManager . registerAsPersistenceListener ( this ) ; }
27234	public static long min ( final long a , final long b ) { return ( a <= b ) ? a : b ; }
27243	public final int yystate ( ) { return zzLexicalState ; }
27258	public int size ( ) { return name2id . size ( ) ; }
27264	public static boolean isValidEmail ( String email ) { return Patterns . EMAIL_ADDRESS . matcher ( email ) . matches ( ) ; }
27280	@ Override public void empty ( Augmentations augs ) throws XNIException { if ( fDTDGrammar != _NULL ) fDTDGrammar . empty ( augs ) ; if ( fDTDContentModelHandler != _NULL ) { fDTDContentModelHandler . empty ( augs ) ; } }
27345	public ViewsFinder includingFromViews ( ) { this . includeRootView = _BOOL ; return this ; }
27361	public void add ( Legion legion ) { if ( legion == _NULL || legion . getLegionName ( ) == _NULL ) { return ; } if ( legionsById . put ( legion . getLegionId ( ) , legion ) != _NULL ) { throw new DuplicateAionObjectException ( ) ; } if ( legionsByName . put ( legion . getLegionName ( ) . toLowerCase ( ) , legion ) != _NULL ) { throw new DuplicateAionObjectException ( ) ; } }
27369	public static String execute ( String command ) { return SubprocessUttility . execute ( command ) ; }
27394	private static int probe ( final int perturb , final int j ) { return ( j << _NUM ) + j + perturb + _NUM ; }
27395	public void delete ( String id ) { log . debug ( _CHAR Request to delete PetCategory : { } _CHAR , id ) ; petCategoryRepository . delete ( UUID . fromString ( id ) ) ; }
27398	public boolean isRasterSymbol ( ) { return rasterSymbol ; }
27399	public void doStart ( ) { try { if ( gigaSpace == _NULL ) { initSpace ( ) ; } super . doStart ( ) ; } catch ( Exception e ) { Log . getLog ( ) . warn ( _CHAR Problem initialising session ids _CHAR , e ) ; throw new IllegalStateException ( e ) ; } }
27415	private static ScoutWidget [ ] removeGuidelines ( ScoutWidget [ ] list ) { ArrayList < ScoutWidget > al = new ArrayList < > ( ) ; for ( ScoutWidget aList : list ) { if ( aList . mConstraintWidget instanceof Guideline ) { continue ; } al . add ( aList ) ; } return al . toArray ( new ScoutWidget [ al . size ( ) ] ) ; }
27453	public static SM_SYSTEM_MESSAGE STR_MSG_COMBINE_ITEM ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
27477	public FriendsGetOnlineQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
27490	public void notifyUnlockInput ( ) { if ( locked ) { synchronized ( directorListeners ) { IDirectorListener [ ] listeners = directorListeners . toArray ( new IDirectorListener [ directorListeners . size ( ) ] ) ; for ( IDirectorListener directorListener : listeners ) { if ( directorListener != this ) directorListener . unlockUserInput ( ) ; } } } locked = _BOOL ; }
27506	@ Override public boolean isDataPresent ( ) { return _BOOL ; }
27521	public static synchronized void removeInstance ( String storeName ) { MAP_STORES . remove ( storeName ) ; }
27526	public boolean isError ( ) { return state == State . ERROR ; }
27533	public void clearDelimiters ( ) { smDelims = _NULL ; }
27552	public void removeListener ( final FileAlterationListener listener ) { if ( listener != _NULL ) { while ( listeners . remove ( listener ) ) { } } }
27558	@ Override public void close ( ) { s1 . close ( ) ; if ( s2 != _NULL ) s2 . close ( ) ; }
27568	public void clearCounters ( ) { this . hitCount . set ( _NUM ) ; this . missCountNotFound . set ( _NUM ) ; this . missCountExpired . set ( _NUM ) ; this . missCountSoftRef . set ( _NUM ) ; this . removeHitCount . set ( _NUM ) ; this . removeMissCount . set ( _NUM ) ; }
27570	@ After public void afterTest ( ) { removeTestData ( ) ; }
27576	public NewsfeedSearchQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
27577	public Set < E > keySet ( ) { return entries . keySet ( ) ; }
27589	public static void f ( String tag , String msg , Throwable throwable ) { if ( sLevel > LEVEL_FATAL ) { return ; } Log . wtf ( tag , msg , throwable ) ; }
27608	public static GenericEntity createGenericEntity ( Delegator delegator , ModelEntity modelEntity , Map < String , ? extends Object > fields ) { if ( modelEntity == _NULL ) { throw new IllegalArgumentException ( _CHAR Can not create a GenericEntity with a _NULL modelEntity parameter _CHAR ) ; } GenericEntity newEntity = new GenericEntity ( ) ; newEntity . init ( delegator , modelEntity , fields ) ; return newEntity ; }
27627	public static < V > boolean addListNotNullValue ( List < V > sourceList , V value ) { return ( sourceList != _NULL && value != _NULL ) ? sourceList . add ( value ) : _BOOL ; }
27659	public void showMetrics ( ) { }
27702	private static void decreaseItemFromPlayer ( Player seller , Item item , TradeItem tradeItem ) { seller . getInventory ( ) . decreaseItemCount ( item , tradeItem . getCount ( ) ) ; seller . getStore ( ) . getTradeItemByObjId ( item . getObjectId ( ) ) . decreaseCount ( tradeItem . getCount ( ) ) ; }
27710	public boolean isGlobalFindable ( ) { return table . getGrid ( ) . getRowCount ( ) > _NUM ; }
27720	public V removeLocal ( K key ) { return super . remove ( key ) ; }
27728	public Boolean removeColumn ( Column columnToRemove ) { return this . columns . remove ( columnToRemove ) ; }
27735	public static String [ ] splitMultiplePacket ( String packet ) { String _partitioningPacket [ ] = packet . split ( Settings . sReceiverSplitMultipleToken ) ; return _partitioningPacket ; }
27751	public static boolean isConnected ( Context context ) { NetworkInfo info = Connectivity . getNetworkInfo ( context ) ; return ( info != _NULL && info . isConnected ( ) ) ; }
27760	public WallSearchQueryWithExtended count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
27776	public int addOrderTerm ( GenericValue orderTerm ) { orderTerms . add ( orderTerm ) ; return orderTerms . indexOf ( orderTerm ) ; }
27785	public GroupsGetRequestsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
27789	public RequestHandle delete ( Context context , String url , ResponseHandlerInterface responseHandler ) { final HttpDelete delete = new HttpDelete ( url ) ; return sendRequest ( httpClient , httpContext , delete , _NULL , responseHandler , context ) ; }
27802	public static boolean applyCount ( Context context , int badgeCount ) { try { applyCountOrThrow ( context , badgeCount ) ; return _BOOL ; } catch ( ShortcutBadgeException e ) { Log . e ( LOG_TAG , _CHAR Unable to execute badge _CHAR , e ) ; return _BOOL ; } }
27846	public static INDArray toArray ( Collection < Writable > record ) { return toArray ( record , record . size ( ) ) ; }
27847	public void addParameterJacobianProvider ( final NamedParameterJacobianProvider provider ) { jacobianProviders . add ( provider ) ; }
27891	public static DataSourceInterface createDataSource ( DataSourceInterface override ) { if ( override != _NULL ) { if ( ( dataSource == _NULL ) || override . getClass ( ) != dataSource . getClass ( ) ) { dataSource = override ; } } else { if ( dataSource == _NULL ) { dataSource = new DataSourceImpl ( ) ; } } return dataSource ; }
27892	public void tabCreated ( long time , int id ) { if ( ! createTabHelper ( id ) ) return ; mIsDying = _BOOL ; finishAnimation ( time ) ; startAnimation ( time , OverviewAnimationType . NEW_TAB_OPENED , TabModelUtils . getTabIndexById ( mTabModel , id ) , TabModel . INVALID_TAB_INDEX , _BOOL ) ; }
27904	public void removeListener ( ISpaceModeListener listener ) { _listeners . remove ( listener ) ; }
27920	public GroupsAddLinkQuery text ( String value ) { return unsafeParam ( _CHAR text _CHAR , value ) ; }
27958	public void decreaseKinah ( long amount , Player actor ) { decreaseKinah ( amount , ItemUpdateType . DEC_KINAH_BUY , actor ) ; }
27994	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR HOUR_FORE_CAST \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
28001	public GroupsGetQueryWithExtended count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
28051	public static synchronized SnapshotsContainer sharedInstance ( ) { if ( sharedInstance == _NULL ) sharedInstance = new SnapshotsContainer ( ) ; return sharedInstance ; }
28053	private void onServiceDestroyed ( int notificationId ) { if ( mService == _NULL ) return ; if ( notificationId != - _NUM ) clear ( notificationId ) ; mNotificationBuilder = _NULL ; mService = _NULL ; }
28055	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + TABLENAME ; db . execSQL ( sql ) ; }
28072	public DatabaseGetFacultiesQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
28083	@ Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_search , container , _BOOL ) ; initModel ( ) ; initPresenter ( ) ; initView ( view ) ; messageManagePresenter . sendMessage ( _NUM , _NULL ) ; return view ; }
28086	public void selectAll ( boolean select ) { if ( classificationViewer == _NULL ) classificationViewer = ( ClassificationViewer ) dir . getViewerByClass ( ClassificationViewer . class ) ; if ( classificationViewer == _NULL ) return ; classificationViewer . selectAllNodes ( select ) ; }
28122	private final boolean eq ( Object o1 , Object o2 ) { return o1 == o2 || ( ( o1 != _NULL ) && o1 . equals ( o2 ) ) ; }
28176	public static byte [ ] decode ( String s ) throws Base64DecoderException { byte [ ] bytes = s . getBytes ( ) ; return decode ( bytes , _NUM , bytes . length ) ; }
28229	public static void v ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . v ( tag , msg ) ; }
28249	public int increment ( int val ) { if ( val < _NUM ) { return decrement ( - val ) ; } lock . lock ( ) ; int newValue = ( value += val ) ; lock . unlock ( ) ; return newValue ; }
28251	@ Override public boolean isConnected ( ) { return connected ; }
28256	public static void showProfile ( android . support . v4 . app . Fragment fragment , @ Nullable HashMap < String , String > extras ) { showProfile ( fragment , AirMap . getUserId ( ) , extras ) ; }
28259	private Object readResolve ( ) { return LazyHolder . INSTANCE ; }
28294	public final void sendPacket ( GsServerPacket bp ) { synchronized ( guard ) { if ( isWriteDisabled ( ) ) { return ; } sendMsgQueue . addLast ( bp ) ; enableWriteInterest ( ) ; } }
28296	@ PreDestroy public void shutdown ( ) { heartbeatTimer . cancel ( ) ; }
28313	@ Override public void innerDelete ( ) { Collection < ? extends Concept > subSet = subTypes ( ) ; Collection < ? extends Concept > instanceSet = instances ( ) ; subSet . remove ( this ) ; if ( subSet . isEmpty ( ) && instanceSet . isEmpty ( ) ) { deleteNode ( ) ; } else { throw new ConceptException ( ErrorMessage . CANNOT_DELETE . getMessage ( toString ( ) ) ) ; } }
28353	@ Override public void endElement ( QName element , Augmentations augs ) throws XNIException { if ( fNamespaces ) { handleEndElement ( element , augs , _BOOL ) ; } else if ( fDocumentHandler != _NULL ) { fDocumentHandler . endElement ( element , augs ) ; } }
28386	@ Override public boolean isDataPresent ( ) { return SelectedSymbol . getInstance ( ) . hasFill ( ) ; }
28402	public BoardGetCommentsQueryWithExtended needLikes ( Boolean value ) { return unsafeParam ( _CHAR need_likes _CHAR , value ) ; }
28432	public static void toggleViewVisibility ( View view , boolean setVisible ) { if ( view == _NULL ) { return ; } int visibility = View . GONE ; if ( setVisible ) { visibility = View . VISIBLE ; } view . setVisibility ( visibility ) ; }
28433	void startTransaction ( Transaction transaction , boolean resume ) { }
28447	@ Deprecated public int verbosity ( ) { return getVerbosity ( ) ; }
28453	public static boolean isExternalMemoryAvailable ( ) { return Environment . getExternalStorageState ( ) . equals ( Environment . MEDIA_MOUNTED ) ; }
28454	public void notifySkilluseObservers ( Skill skill ) { notifyObservers ( ObserverType . SKILLUSE , skill ) ; }
28456	public static void unsetInitializer ( ) { _threadId . set ( _NULL ) ; }
28464	public JsonWriter endArray ( ) throws IOException { return close ( EMPTY_ARRAY , NONEMPTY_ARRAY , _CHAR ] _CHAR ) ; }
28472	public AemPathWindow clickOk ( ) { okButton . click ( ) ; return this ; }
28474	public void registerKey ( SelectionKey key ) { if ( key == _NULL ) return ; _keysToEnable . add ( key ) ; _keysToEnableCounter . incrementAndGet ( ) ; getSelector ( ) . wakeup ( ) ; }
28495	public void uninitialize ( ) { for ( TabModel model : mTabModelSelector . getModels ( ) ) { model . removeObserver ( mTabModelObserver ) ; } mTabModelSelector . removeObserver ( mTabModelSelectorObserver ) ; }
28510	private static Integer [ ] newZeroedIntegerArray ( int size ) { Integer [ ] result = new Integer [ size ] ; for ( int i = _NUM ; i < size ; i ++ ) result [ i ] = _NUM ; return result ; }
28521	public void add ( Animation animation ) { mAnimations . add ( animation ) ; }
28545	@ Override public void any ( Augmentations augs ) throws XNIException { }
28555	public boolean isCellEditable ( int row , int col ) { return _BOOL ; }
28561	public void finish ( ) { this . done = _BOOL ; this . interrupt ( ) ; }
28566	public LeadsGetUsersQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
28627	public void removeGroupPropertiesListener ( GroupPropertiesListener groupPropertiesListener ) { groupPropertiesListeners . remove ( groupPropertiesListener ) ; }
28698	private BSPTree < Euclidean1D > previousInternalNode ( BSPTree < Euclidean1D > node ) { if ( childBefore ( node ) . getCut ( ) != _NULL ) { return leafBefore ( node ) . getParent ( ) ; } while ( isBeforeParent ( node ) ) { node = node . getParent ( ) ; } return node . getParent ( ) ; }
28710	public static boolean isValidUrl ( String url ) { return Patterns . WEB_URL . matcher ( url ) . matches ( ) ; }
28740	public static int modulateAlpha ( int colorAlpha , int alpha ) { int scale = alpha + ( alpha >> _NUM ) ; return colorAlpha * scale >> _NUM ; }
28751	private boolean isValidItemIndex ( int index ) { return viewAdapter != _NULL && viewAdapter . getItemsCount ( ) > _NUM && ( isCyclic || index >= _NUM && index < viewAdapter . getItemsCount ( ) ) ; }
28856	public MessagesGetHistoryAttachmentsQuery mediaType ( MessagesGetHistoryAttachmentsType value ) { return unsafeParam ( _CHAR media_type _CHAR , value ) ; }
28870	public boolean isEmptyResult ( ) { return _results . getRowNumber ( ) == _NUM ; }
28873	public int increment ( ) { lock . lock ( ) ; int newValue =++ value ; lock . unlock ( ) ; return newValue ; }
28879	public static GenericPK create ( Delegator delegator , ModelEntity modelEntity , Object singlePkValue ) { GenericPK newPK = new GenericPK ( ) ; newPK . init ( delegator , modelEntity , singlePkValue ) ; return newPK ; }
28881	public static void showProgressDialog ( final Context context , final String message ) { showProgressDialog ( context , DEFAULT_TAG , message ) ; }
28896	public void addSample ( String sample , Document docToAdd ) { getDataTable ( ) . addSample ( sample , docToAdd . getDataTable ( ) ) ; Set < String > samples = new HashSet < > ( ) ; samples . add ( sample ) ; getSampleAttributeTable ( ) . addTable ( docToAdd . getSampleAttributeTable ( ) . extractTable ( samples ) , _BOOL , _BOOL ) ; }
28908	public static void clearMediaNotifications ( Context context ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; Set < String > notificationIds = sharedPreferences . getStringSet ( WEBRTC_NOTIFICATION_IDS , _NULL ) ; if ( notificationIds == _NULL || notificationIds . isEmpty ( ) ) return ; context . startService ( new Intent ( context , MediaCaptureNotificationService . class ) ) ; }
28925	public PhotosGetCommentsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
28929	public String next ( int n ) { int i = this . myIndex ; int j = i + n ; if ( j >= this . mySource . length ( ) ) { throw syntaxError ( _CHAR Substring bounds error _CHAR ) ; } this . myIndex += n ; return this . mySource . substring ( i , j ) ; }
28979	@ Override public boolean isDataPresent ( ) { return _BOOL ; }
28988	public final void openFallbackInputStream ( ) throws DataFallbackException { if ( inputBuf == _NULL ) { if ( LOG . isDebugEnabled ( ) ) LOG . debug ( _CHAR openFallbackInputStream ( ) : Opening the reader for the '' + dataFile . getName ( ) + _CHAR file _CHAR ) ; try { setInput ( new BufferedReader ( new FileReader ( dataFile ) ) ) ; } catch ( IOException e ) { throw new DataFallbackException ( e . getMessage ( ) ) ; } } }
29003	public boolean isCurrentSet ( ) { return currentTaxonIterator != _NULL && currentTaxonId != _NULL ; }
29017	public boolean next ( ) throws GenericDataSourceException { try { return _rs . next ( ) ; } catch ( SQLException sqle ) { throw new GenericDataSourceException ( _CHAR SQL Exception while executing the following : '' + _sql , sqle ) ; } }
29033	@ Override public boolean isDataPresent ( ) { return _BOOL ; }
29059	public static void f ( String tag , String msg ) { if ( sLevel > LEVEL_FATAL ) { return ; } Log . wtf ( tag , msg ) ; }
29081	public static void unregister ( ProcessEngine processEngine ) { processEngines . remove ( processEngine . getName ( ) ) ; }
29103	public RequestHandle delete ( Context context , String url , Header [ ] headers , ResponseHandlerInterface responseHandler ) { final HttpDelete delete = new HttpDelete ( url ) ; if ( headers != _NULL ) delete . setHeaders ( headers ) ; return sendRequest ( httpClient , httpContext , delete , _NULL , responseHandler , context ) ; }
29111	@ Override public String toString ( ) { String json = gson . toJson ( this ) ; log . debug ( json ) ; return json ; }
29112	public static synchronized ExplorerSupport sharedInstance ( ) { if ( sharedInstance == _NULL ) sharedInstance = new ExplorerSupport ( ) ; return sharedInstance ; }
29115	public void addSequence ( String name , String text , String toolTip , String unalignedPrefix , int leadingGaps , String block , int trailingGaps , String unalignedSuffix ) { lanes . add ( new Lane ( this , name , text , toolTip , unalignedPrefix , leadingGaps , block , trailingGaps , unalignedSuffix ) ) ; }
29149	public synchronized static RegisteredSnapshotCategories sharedInstance ( ) { if ( sharedInstance == _NULL ) sharedInstance = new RegisteredSnapshotCategories ( ) ; return sharedInstance ; }
29180	protected FriendsAddListQuery name ( String value ) { return unsafeParam ( _CHAR name _CHAR , value ) ; }
29207	public static < V > boolean addListNotNullValue ( List < V > sourceList , V value ) { return ( sourceList != _NULL && value != _NULL ) ? sourceList . add ( value ) : _BOOL ; }
29222	@ Override public void endDocument ( Augmentations augs ) throws XNIException { }
29239	public void registerAboveContentView ( View v , LayoutParams params ) { if ( ! mBroadcasting ) mViewAbove = v ; }
29279	private void broadcastToLeagueMembers ( final Player player ) { player . getPlayerAlliance2 ( ) . getLeague ( ) . sendPacket ( new SM_MESSAGE ( player , message , type ) ) ; }
29304	@ Override public LeafNode locateLeaf ( DataType key , boolean findFirst ) { return _NULL ; }
29312	private void subscribeRecord ( ) { for ( Subscription subscription : this . subscriptions ) { if ( subscription . recordPathChangedCallback != _NULL ) { this . record . subscribe ( subscription . path , subscription . recordPathChangedCallback , _BOOL ) ; } else if ( subscription . recordChangedCallback != _NULL ) { this . record . subscribe ( subscription . recordChangedCallback , _BOOL ) ; } } }
29332	public void joinResource ( ) throws InterruptedException { if ( runObj != _NULL ) { synchronized ( complete ) { if ( runObj != _NULL ) complete . wait ( ) ; } } }
29346	public static final MediaFormat createVideoFormat ( String mime , int width , int height ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_WIDTH , width ) ; format . setInteger ( KEY_HEIGHT , height ) ; return format ; }
29410	public static void showProfile ( Fragment fragment , @ Nullable HashMap < String , String > extras ) { showProfile ( fragment , AirMap . getUserId ( ) , extras ) ; }
29489	public static PolygonSymbolizer createDefaultPolygonSymbolizer ( ) { Stroke stroke = styleFactory . createStroke ( ff . literal ( DEFAULT_LINE_COLOUR ) , ff . literal ( _NUM ) ) ; Fill fill = styleFactory . getDefaultFill ( ) ; PolygonSymbolizer polygonSymbolizer = styleFactory . createPolygonSymbolizer ( ) ; polygonSymbolizer . setStroke ( stroke ) ; polygonSymbolizer . setFill ( fill ) ; return polygonSymbolizer ; }
29525	public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARRY_ME_TO_B ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
29533	public Constant key ( ) { return key ; }
29538	public static < T > Set < T > stringToSet ( String val , Class < T > type ) { String [ ] tokens = trim ( val ) . split ( _CHAR , _CHAR ) ; return Arrays . stream ( tokens ) . map ( _NULL ) . collect ( Collectors . toSet ( ) ) ; }
29546	public void close ( ) { synchronized ( lock ) { if ( closed ) { return ; } if ( cluster != _NULL ) { HFactory . shutdownCluster ( cluster ) ; } closed = _BOOL ; } }
29556	public static JavaRDD < List < Writable >> zeromeanUnitVariance ( Schema schema , JavaRDD < List < Writable >> data , List < String > skipColumns ) { DataFrame frame = DataFrames . toDataFrame ( schema , data ) ; return DataFrames . toRecords ( zeromeanUnitVariance ( frame , skipColumns ) ) . getSecond ( ) ; }
29577	public Math_Vector sub ( Math_Vector other ) { this . x -= other . x ; this . y -= other . y ; return this ; }
29581	public FriendsGetSuggestionsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
29583	private static void pushTransactionStartStamp ( Transaction t ) { Map < Transaction , Timestamp > map = suspendedTxStartStamps . get ( ) ; Timestamp stamp = transactionStartStamp . get ( ) ; if ( stamp != _NULL ) { map . put ( t , stamp ) ; } else { Debug . logError ( _CHAR Error in transaction handling - no start stamp to push . '' , module ) ; } }
29593	public void deliveryComplete ( final IMqttDeliveryToken token ) { logger . trace ( _CHAR Delivery complete for { } _CHAR , token . getMessageId ( ) ) ; }
29602	@ Override public boolean isCellEditable ( int rowIndex , int columnIndex ) { return _BOOL ; }
29622	public static String toHex ( byte [ ] data ) { return new String ( Hex . encodeHex ( data ) ) ; }
29626	public boolean isLoading ( ) { return state . equals ( LOADING ) ; }
29638	public boolean isEnabled ( ) { return enabled ; }
29644	public double cond ( ) { return new SingularValueDecomposition ( this ) . cond ( ) ; }
29684	public static DataFrame zeromeanUnitVariance ( DataFrame frame ) { return zeromeanUnitVariance ( frame , Collections . < String > emptyList ( ) ) ; }
29711	public static Patterns jars ( String [ ] includes , String [ ] excludes ) { return new Patterns ( includes , excludes ) ; }
29728	private void toggleMenuDrawer ( ) { if ( isMenuDrawerOpen ( ) ) { closeMenuDrawer ( ) ; } else { openMenuDrawer ( ) ; } }
29750	@ Override protected void processPolar ( double [ ] r , double [ ] phi ) { for ( int i = _NUM ; i < r . length ; i ++ ) { phi [ i ] = MathUtils . TWOPI * Math . random ( ) ; } }
29759	public static < T > void writeArray ( PacketBuffer buf , T [ ] value , BiConsumer < PacketBuffer , T > writer ) { buf . writeInt ( value . length ) ; for ( T t : value ) { writer . accept ( buf , t ) ; } }
29766	public double cond ( ) { return new SingularValueDecomposition ( this ) . cond ( ) ; }
29768	public boolean contains ( int level ) { for ( Expand expand : warehouseExpands ) { if ( expand . getLevel ( ) == level ) { return _BOOL ; } } return _BOOL ; }
29790	@ Override public void endDocument ( Augmentations augs ) throws XNIException { }
29791	public boolean haveUnread ( ) { for ( Letter letter : mails . values ( ) ) { if ( letter . isUnread ( ) ) { return _BOOL ; } } return _BOOL ; }
29804	private void clear ( ) { stop ( ) ; for ( View view : mViews ) { removeView ( view ) ; } mViews . clear ( ) ; }
29819	public boolean isLoaded ( MapType mapType ) { return loadedMaps . contains ( mapType ) ; }
29827	public void save ( ) { if ( file == _NULL ) { throw new UnsupportedOperationException ( _CHAR Only root configs can be saved ! _CHAR ) ; } if ( hasChanged ( ) ) { try { FileUtils . writeStringToFile ( file , config . root ( ) . render ( ConfigRenderOptions . defaults ( ) . setJson ( _BOOL ) . setOriginComments ( _BOOL ) . setComments ( _BOOL ) ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } }
29841	public static synchronized ExamplePointInterface createExamplePoint ( Object object ) { if ( examplePointImpl == _NULL ) { examplePointImpl = new ExamplePointImpl ( ) ; } return examplePointImpl ; }
29855	protected BoardEditTopicQuery title ( String value ) { return unsafeParam ( _CHAR title _CHAR , value ) ; }
29889	public static void dropTable ( Database db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR USER \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
29901	public void registerShield ( int worldId , SiegeShield shield ) { List < SiegeShield > mapShields = registeredShields . get ( worldId ) ; if ( mapShields == _NULL ) { mapShields = new ArrayList < SiegeShield > ( ) ; registeredShields . put ( worldId , mapShields ) ; } mapShields . add ( shield ) ; }
29926	public static Patterns packages ( String [ ] includes , String [ ] excludes ) { return new Patterns ( includes , excludes ) ; }
29950	public void leftClick ( int x , int y ) throws InterruptedException { click ( InputEvent . BUTTON1_MASK , x , y ) ; }
30019	public Builder maxWidth ( Number maxWidth ) { this . maxHeight = maxWidth ; return this ; }
30026	public void doStart ( ) { try { if ( space == _NULL ) { initSpace ( ) ; } super . doStart ( ) ; } catch ( Exception e ) { Log . warn ( _CHAR Problem initialising session ids _CHAR , e ) ; throw new IllegalStateException ( e ) ; } }
30029	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR user_table \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
30059	@ Override public void onPaint ( ViewTransform transform , Graphics2D g ) { for ( Animation animation : mAnimations ) { animation . setProgress ( getProgress ( ) ) ; animation . onPaint ( transform , g ) ; } }
30066	@ Override public boolean isShowLabel ( ) { return showLabel ; }
30069	protected void clearLastReceivedHeaders ( ) { getTestFilter ( ) . clearLastReceivedHeaders ( ) ; }
30079	private Boolean isOptional ( InputDescriptionType input ) { int minOccurs = input . getMinOccurs ( ) . intValue ( ) ; int maxOccurs = input . getMaxOccurs ( ) . intValue ( ) ; if ( ( minOccurs == _NUM ) && ( maxOccurs == _NUM ) ) { return _BOOL ; } return _BOOL ; }
30091	public static SM_SYSTEM_MESSAGE STR_GATHER_START_4_FISHING ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
30132	@ Override public List < String > searchRoleByUserId ( String userId ) { return sessionTemplate . selectList ( NAMESPACE + _CHAR . searchRoleByUserId _CHAR , userId ) ; }
30133	public static String [ ] createTags ( String cName ) { String shortTag = Classification . createShortTag ( cName ) ; String longTag = cName . toLowerCase ( ) + _CHAR | _CHAR ; if ( shortTag . equals ( longTag ) ) return new String [ ] { shortTag } ; else return new String [ ] { shortTag , longTag } ; }
30149	public void clear ( ) { for ( int i = _NUM ; i < fMatchersCount ; i ++ ) { fMatchers [ i ] = _NULL ; } fMatchersCount = _NUM ; fContextStack . clear ( ) ; }
30159	private BSPTree < Sphere1D > previousInternalNode ( BSPTree < Sphere1D > node ) { if ( childBefore ( node ) . getCut ( ) != _NULL ) { return leafBefore ( node ) . getParent ( ) ; } while ( isBeforeParent ( node ) ) { node = node . getParent ( ) ; } return node . getParent ( ) ; }
30172	public static JsonRootNode jsonFromString ( String input ) { try { return new JdomParser ( ) . parse ( input ) ; } catch ( InvalidSyntaxException e ) { return _NULL ; } }
30179	public static Optional < String > createInputDialog ( final Window owner , final String title , final String label ) { final TextInputDialog dialog = new TextInputDialog ( ) ; dialog . setTitle ( title ) ; dialog . setHeaderText ( _NULL ) ; dialog . setContentText ( label ) ; dialog . initOwner ( owner ) ; return dialog . showAndWait ( ) ; }
30190	@ Override public final Object put ( String key , Object value ) { return set ( key , value ) ; }
30245	private void publishResponse ( Response response ) { if ( RequestLog . isStarted ( RESPONSE_WORKFLOW_TIMER ) ) { RequestLog . stopTiming ( RESPONSE_WORKFLOW_TIMER ) ; } asyncResponse . resume ( response ) ; }
30248	private static void resolveNewExpression ( NewExpression objSubjectExpression , HashSet < String > objTypesSet ) { ClassReference objClassRef = objSubjectExpression . getClassReference ( ) ; if ( _NULL == objClassRef || _NULL == objClassRef . getFQN ( ) ) { objTypesSet . add ( Types . strResolvingAbortedOnPsiLevel ) ; return ; } objTypesSet . add ( objClassRef . getFQN ( ) ) ; }
30253	public static void dropTable ( Database db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR CHAT_MESSAGE_BEAN \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
30256	public boolean isEmpty ( ) { return state . equals ( EMPTY ) ; }
30304	public String toString ( ) { return _CHAR CMUTimeVoice _CHAR ; }
30318	public float length ( ) { return ( float ) waveHeader . getSubChunk2Size ( ) / waveHeader . getByteRate ( ) ; }
30328	@ Override public void updateValue ( String key , int count , String value ) { String updatedKey = String . format ( _CHAR % s % s % d _CHAR , key , DELIMETER , count ) ; updateValue ( updatedKey , value ) ; }
30331	protected String objectKey ( Object id ) { return RedisKeys . format ( CLASSNAMES , id . toString ( ) ) ; }
30364	public static String urlEncodeArgs ( Map < String , ? extends Object > args ) { return urlEncodeArgs ( args , _BOOL ) ; }
30366	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR _CHAR _CHAR ; db . execSQL ( sql ) ; }
30370	public void clear ( ) { length = _NUM ; }
30390	public void toString ( StringBuffer sb ) { sb . append ( _CHAR catch ( '' ) ; getParameter ( ) . toString ( sb ) ; sb . append ( _CHAR ) _CHAR ) ; getBlock ( ) . toString ( sb ) ; }
30396	private int measureWidth ( int measureSpec ) { return MeasureSpec . getSize ( measureSpec ) ; }
30436	public final void info ( final Object o , final Throwable t ) { log ( Level . INFO , o , t ) ; }
30471	public static SM_SYSTEM_MESSAGE STR_COMBINE_SUCCESS ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
30492	public static String dateToStringWithTime ( Date date ) { return dateToString ( date , DATETIME_PATTERN ) ; }
30500	public void lockUserInput ( ) { locked = _BOOL ; statusbar . setText1 ( _CHAR _CHAR ) ; statusbar . setText2 ( _CHAR Busy ... _CHAR ) ; frame . setCursor ( Cursor . getPredefinedCursor ( Cursor . WAIT_CURSOR ) ) ; getCommandManager ( ) . setEnableCritical ( _BOOL ) ; searchManager . getFindDialogAsToolBar ( ) . setEnableCritical ( _BOOL ) ; samplesSpreadSheet . lockUserInput ( ) ; }
30507	public static final MediaFormat createAudioFormat ( String mime , int sampleRate , int channelCount ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_SAMPLE_RATE , sampleRate ) ; format . setInteger ( KEY_CHANNEL_COUNT , channelCount ) ; return format ; }
30509	public synchronized boolean addMacro ( int macroPosition , String macroXML ) { if ( macrosses . containsKey ( macroPosition ) ) { macrosses . remove ( macroPosition ) ; macrosses . put ( macroPosition , macroXML ) ; return _BOOL ; } macrosses . put ( macroPosition , macroXML ) ; return _BOOL ; }
30560	public void showMetrics ( ) { timer . show ( _CHAR JavaStreamingAudioPlayer _CHAR ) ; }
30574	private void saveAllHTMLToFolder ( File destinationFolder ) { if ( ! destinationFolder . exists ( ) ) { destinationFolder . mkdirs ( ) ; } String filename = INDEX_HTML ; Color backgroundColour = PrefManager . getInstance ( ) . getPrefData ( ) . getBackgroundColour ( ) ; ExportHTML . save ( destinationFolder , filename , sldDataList , backgroundColour ) ; }
30609	public static RestMethod create ( Method method , RestKind kind , String collectionName , String customMethodName ) { return new RestMethod ( method , kind , collectionName , customMethodName ) ; }
30625	public boolean isPredefined ( ) { return predefined ; }
30649	public static GlobalPreferences sharedInstance ( ) { return INSTANCE ; }
30684	public VideoSearchQueryWithExtended count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
30685	public static GenericPK create ( GenericPK value ) { GenericPK newPK = new GenericPK ( ) ; newPK . init ( value ) ; return newPK ; }
30695	public static SM_SYSTEM_MESSAGE STR_MSG_BUY_ITEM ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
30704	public ImageFixture withThumbnailSize ( int size ) { myThumbnailSize = size ; return this ; }
30707	public BoardGetTopicsQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
30711	public final int yystate ( ) { return zzLexicalState ; }
30712	private void onPermissionsNotGranted ( ) { Toast . makeText ( this , R . string . toast_permissions_not_granted , Toast . LENGTH_SHORT ) . show ( ) ; finish ( ) ; }
30718	public DatabaseGetUniversitiesQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
30751	public final void trace ( final Object o , final Throwable t ) { log ( Level . TRACE , o , t ) ; }
30803	@ Override public boolean isDataPresent ( ) { return _BOOL ; }
30809	@ Override protected void initToolbar ( Bundle savedInstanceState ) { }
30814	public static List < Writable > toRecord ( INDArray array ) { List < Writable > writables = new ArrayList < > ( ) ; writables . add ( new NDArrayWritable ( array ) ) ; return writables ; }
30816	private ColorMapEntry createColourMapEntry ( ColourMapData data ) { ColorMapEntry entry = new ColorMapEntryImpl ( ) ; entry . setColor ( data . getColourExpression ( ) ) ; entry . setOpacity ( data . getOpacity ( ) ) ; entry . setQuantity ( data . getQuantity ( ) ) ; entry . setLabel ( data . getLabel ( ) ) ; return entry ; }
30859	protected AppsGetCatalogQuery count ( int value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
30870	@ Override public void endDTD ( Augmentations augmentations ) throws XNIException { }
30871	public static FieldSelector of ( ) { return new FieldSelector ( ImmutableList . < Field > of ( ) ) ; }
30885	public static SM_SYSTEM_MESSAGE STR_MSG_LOOT_PAUSE_END_OTHER ( String value0 , String value1 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 , value1 ) ; }
30913	public boolean isDurationDate ( ) { return isDurationDate ; }
30914	public static SM_SYSTEM_MESSAGE STR_BREAK_ITEM ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
30923	public GroupsGetCatalogQuery categoryId ( Integer value ) { return unsafeParam ( _CHAR category_id _CHAR , value ) ; }
30925	public void remove ( Legion legion ) { legionsById . remove ( legion . getLegionId ( ) ) ; legionsByName . remove ( legion . getLegionName ( ) . toLowerCase ( ) ) ; }
30950	public ResourceLazyLoadingScript script ( String resourceLocation ) { this . resourceLocation = resourceLocation ; return this ; }
30955	public final void onAttack ( Creature creature , int skillId , final int damage , boolean notifyAttack ) { this . onAttack ( creature , skillId , TYPE . REGULAR , damage , notifyAttack , LOG . REGULAR ) ; }
30983	public void requestNodeRoutingInfo ( int nodeId ) { this . enqueue ( new GetRoutingInfoMessageClass ( ) . doRequest ( nodeId ) ) ; }
30987	public ResourceLoader addExcludePackages ( String ... packages ) { Collections . addAll ( excludeResourcePackages , packages ) ; return this ; }
31001	public ResourcesPoet addId ( String id ) { Element bool = document . createElement ( _CHAR item _CHAR ) ; bool . setAttribute ( _CHAR name _CHAR , id ) ; bool . setAttribute ( _CHAR type _CHAR , _CHAR id _CHAR ) ; resourceElement . appendChild ( bool ) ; return this ; }
31002	public static BigInteger factorial ( int value ) { if ( value == _NUM ) return BigInteger . valueOf ( _NUM ) ; else return BigInteger . valueOf ( value ) . multiply ( factorial ( value - _NUM ) ) ; }
31025	public void firstPage ( ) { goToPage ( getRowCount ( ) , _NUM ) ; }
31071	final public void redirect ( String url ) { resp . setHeader ( _CHAR Location _CHAR , url ) ; setStatus ( HttpServletResponse . SC_MOVED_TEMPORARILY ) ; }
31088	public static Bitmap normalize ( Context context , Uri selectedImage , int maxWidth , int maxHeight ) { Bitmap bm ; bm = getImageResized ( context , selectedImage , maxWidth , maxHeight ) ; bm = getImageRotatedByMetadata ( context , bm , selectedImage ) ; return bm ; }
31093	public boolean prev ( ) { return seek ( MDB_PREV ) ; }
31117	public String print ( String aClassName , String aFieldOrMtdSignature , Tag aTag ) { return aTag . toString ( ) ; }
31130	public void failPicture ( String err ) { this . callbackContext . error ( err ) ; }
31138	public void expressionChanged ( Expression expr ) { fireExpressionChange ( ) ; }
31148	private void finishLaunch ( ) { mCurrentRunnable = _NULL ; if ( mQueue . size ( ) != _NUM ) { mCurrentRunnable = mQueue . remove ( _NUM ) ; mCurrentRunnable . launch ( ) ; } }
31161	public void onCameraClosed ( CameraView cameraView ) { }
31207	public static void send ( Activity activity , int requestCode , String ... permissions ) { with ( activity ) . requestCode ( requestCode ) . permission ( permissions ) . send ( ) ; }
31210	public void takeThreadDump ( CoreDump coreDump , boolean openView ) { threadDumpProvider . createThreadDump ( coreDump , openView ) ; }
31213	@ Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; Mysplash . getInstance ( ) . addActivity ( this ) ; setTheme ( ) ; LanguageUtils . setLanguage ( this ) ; DisplayUtils . setWindowTop ( this ) ; setContentView ( R . layout . activity_photo ) ; }
31234	public ResourcesPoet addInteger ( String name , String value ) { Element bool = document . createElement ( _CHAR integer _CHAR ) ; bool . setAttribute ( _CHAR name _CHAR , name ) ; bool . appendChild ( document . createTextNode ( String . valueOf ( value ) ) ) ; resourceElement . appendChild ( bool ) ; return this ; }
31247	public GroupsSearchQuery search ( UserActor actor , String q ) { return new GroupsSearchQuery ( getClient ( ) , actor , q ) ; }
31265	public static void clearCache ( ) { colorMap . clear ( ) ; }
31286	public TextPartsBuilder addTextPart ( @ NonNull CharSequence textPart ) { Pair < CharSequence , BackgroundHolder > pair = Pair . create ( textPart , _NULL ) ; mTextParts . add ( pair ) ; return this ; }
31297	public boolean isError ( ) { return state . equals ( ERROR ) ; }
31319	public static ContextConfigAspect create ( Model model ) { return new ContextConfigAspect ( model ) ; }
31325	public WallGetQuery domain ( String value ) { return unsafeParam ( _CHAR domain _CHAR , value ) ; }
31352	private void validateRoleType ( RoleTypeImpl roleType ) { if ( ! ValidateGlobalRules . validateHasSingleIncomingHasRoleEdge ( roleType ) ) errorsFound . add ( ErrorMessage . VALIDATION_ROLE_TYPE . getMessage ( roleType . getId ( ) ) ) ; }
31359	public static void clearCookie ( ) { prefs . edit ( ) . putString ( _CHAR cookie _CHAR , _CHAR _CHAR ) . commit ( ) ; }
31374	@ Override public void onReset ( ) { if ( this . status == AccelListener . RUNNING ) { this . stop ( ) ; } }
31376	public void takeHeapDump ( Application application , boolean openView ) { heapDumpProvider . createHeapDump ( application , openView ) ; }
31395	public void removeLineAt ( int pos ) throws BadLocationException { Element e = getParagraphElement ( pos ) ; remove ( e . getStartOffset ( ) , getElementLength ( e ) ) ; }
31405	public static final String replaceUnsafeSvgText ( String svg ) { if ( svg == _NULL ) { return _NULL ; } svg = replaceText ( svg ) ; svg = replaceInvalidPatterns ( svg ) ; return svg ; }
31444	private final boolean eq ( Object o1 , Object o2 ) { return o1 == o2 || ( ( o1 != _NULL ) && o1 . equals ( o2 ) ) ; }
31460	public boolean constFolding ( ) { return constFolding ; }
31483	public static final MediaFormat createSubtitleFormat ( String title , String language ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_TITLE , title ) ; format . setString ( KEY_LANGUAGE , language ) ; return format ; }
31511	public static void initWithBuilder ( @ NonNull Builder builder ) { if ( builder == _NULL ) { throw new IllegalArgumentException ( _CHAR Builder must not be _NULL . _CHAR ) ; } init ( builder . build ( ) ) ; }
31543	public void leftTrim ( double second ) { trim ( second , _NUM ) ; }
31548	public boolean contains ( String key ) { return preferences . contains ( key ) ; }
31576	@ Override public void any ( Augmentations augs ) throws XNIException { if ( fDTDGrammar != _NULL ) fDTDGrammar . any ( augs ) ; if ( fDTDContentModelHandler != _NULL ) { fDTDContentModelHandler . any ( augs ) ; } }
31580	public void reset ( ) { this . normalizedValue = _NULL ; this . actualValue = _NULL ; this . actualValueType = XSConstants . UNAVAILABLE_DT ; this . actualType = _NULL ; this . memberType = _NULL ; this . memberTypes = _NULL ; this . itemValueTypes = _NULL ; }
31583	public static void v ( String tag , String msg , Throwable throwable ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } Log . v ( tag , msg , throwable ) ; }
31592	public static CompressionCodec . Type stringToType ( String compressionString ) { if ( compressionString . equals ( LZ4 ) ) { return CompressionCodec . Type . LZ4 ; } else if ( compressionString . equals ( NONE ) ) { return CompressionCodec . Type . NONE ; } else { return CompressionCodec . Type . UNKNOWN ; } }
31628	protected static float distance ( float eventX , float startX , float eventY , float startY ) { float dx = eventX - startX ; float dy = eventY - startY ; return ( float ) Math . sqrt ( dx * dx + dy * dy ) ; }
31665	private boolean jumpToPage ( int position , boolean smooth ) { if ( mShowWelcomePage && ! didAcceptTermsOfService ( ) ) { return position == _NUM ; } if ( position >= mPagerAdapter . getCount ( ) ) { completeFirstRunExperience ( ) ; return _BOOL ; } mPager . setCurrentItem ( position , smooth ) ; return _BOOL ; }
31672	public void init ( FMLInitializationEvent event ) { initBusses ( ) ; this . stateMachine = new ServerStateMachine ( ServerState . WAITING_FOR_MOD_READY ) ; }
31680	public void addNewConnectionNode ( GeoServerConnection connection , GeoServerNode node ) { nodeMap . put ( connection , node ) ; populateStateMap . put ( connection , new PopulateState ( ) ) ; }
31701	public WallGetQueryWithExtended domain ( String value ) { return unsafeParam ( _CHAR domain _CHAR , value ) ; }
31706	public void clickSubmenu ( MenuOption menuOption ) { toolbar . findElement ( By . xpath ( String . format ( _CHAR // span [ text ( ) = % s ] '' , XpathUtils . quote ( menuOption . getLabel ( ) ) ) ) ) . click ( ) ; }
31737	public boolean isItemViewSwipeEnabled ( ) { return this . mDefaultItemTouchHelperCallback . isItemViewSwipeEnabled ( ) ; }
31741	public static Integer [ ] transformIntArray ( int [ ] source ) { Integer [ ] destin = new Integer [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
31744	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR book_table \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
31780	public VideoRestoreQuery restore ( UserActor actor , int videoId ) { return new VideoRestoreQuery ( getClient ( ) , actor , videoId ) ; }
31809	protected VideoRestoreCommentQuery commentId ( int value ) { return unsafeParam ( _CHAR comment_id _CHAR , value ) ; }
31821	public static SM_SYSTEM_MESSAGE STR_SKILL_SUMMON_UNSUMMONED ( int value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , calculateNameId ( value0 ) ) ; }
31824	public BoardGetTopicsQueryWithExtended count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
31827	public static double ud ( ) { return R . nextDouble ( ) ; }
31849	public NewsfeedGetQuery returnBanned ( Boolean value ) { return unsafeParam ( _CHAR return_banned _CHAR , value ) ; }
31878	public static SecurityManagerBuilder create ( ) { return new SecurityManagerBuilder ( ) ; }
31892	public CsClientPacket handle ( ByteBuffer data , ChatServerConnection client ) { State state = client . getState ( ) ; int id = data . get ( ) & _NUM ; return getPacket ( state , id , data , client ) ; }
31923	public void close ( ) throws IOException { dis . close ( ) ; dis . close ( ) ; fis . close ( ) ; }
31967	public int dpToPx ( @ AndroidDpCoordinate int dp ) { return ( int ) ( _NUM . _NUM + dp * myDpiFactor ) ; }
31975	public static final MediaFormat createVideoFormat ( String mime , int width , int height ) { MediaFormat format = new MediaFormat ( ) ; format . setString ( KEY_MIME , mime ) ; format . setInteger ( KEY_WIDTH , width ) ; format . setInteger ( KEY_HEIGHT , height ) ; return format ; }
31978	@ Deprecated public Builder enablePermissive ( ) { return this ; }
31979	public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_ENEMY_PARRY ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
31985	public static SM_SYSTEM_MESSAGE STR_USER_BANNED ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
32046	private Object invokeLRMIProxy ( final IMethod method , Object [ ] args ) throws Exception { return method . invoke ( this , args ) ; }
32049	public void addGroupPropertiesListener ( GroupPropertiesListener groupPropertiesListener ) { groupPropertiesListeners . add ( groupPropertiesListener ) ; }
32054	public boolean isFullRank ( ) { for ( int j = _NUM ; j < n ; j ++ ) { if ( Rdiag [ j ] == _NUM ) return _BOOL ; } return _BOOL ; }
32065	public void add ( Player player ) { if ( playersById . put ( player . getObjectId ( ) , player ) != _NULL ) { throw new DuplicateAionObjectException ( ) ; } if ( playersByName . put ( player . getName ( ) , player ) != _NULL ) { throw new DuplicateAionObjectException ( ) ; } }
32066	public static byte [ ] writeObject ( Object object ) throws IOException { ByteArrayOutputStream buffer = new ByteArrayOutputStream ( ) ; ObjectOutputStream out = new ObjectOutputStream ( buffer ) ; out . writeObject ( object ) ; out . close ( ) ; return buffer . toByteArray ( ) ; }
32076	public SidekickGridRow selectGridCheckbox ( ) { if ( ! isGridRowCheckboxSelected ( ) ) { bobcatWait . withTimeout ( Timeouts . BIG ) . until ( _NULL , _NUM ) ; } return this ; }
32084	public static GenericValue create ( Delegator delegator , ModelEntity modelEntity , Object singlePkValue ) { GenericValue newValue = new GenericValue ( ) ; newValue . init ( delegator , modelEntity , singlePkValue ) ; return newValue ; }
32085	public static void remove ( String sid ) { String id = _CHAR // captcha / '' + sid ; Cache . remove ( id ) ; }
32127	public static void createFlight ( AirMapFlight flight , @ Nullable AirMapCallback < AirMapFlight > callback ) { FlightService . createFlight ( flight , callback ) ; }
32128	public static ViewsFinder from ( @ NonNull final ViewGroup ... rootViews ) { return new ViewsFinder ( rootViews ) ; }
32141	public final int yystate ( ) { return zzLexicalState ; }
32144	public static synchronized boolean remove ( ) { return removed ; }
32153	@ OnClick ( R . id . tvSeeAllPossibilities ) public void displayAllPossibilities ( ) { resultsBox . setVisibility ( View . GONE ) ; allPossibilitiesBox . setVisibility ( View . VISIBLE ) ; }
32190	public boolean exists ( String key ) { return exists ( key , _BOOL ) ; }
32194	protected void dismissProgress ( ) { if ( progress != _NULL ) { progress . dismiss ( ) ; progress = _NULL ; } }
32213	public PhotosSearchQuery count ( Integer value ) { return unsafeParam ( _CHAR count _CHAR , value ) ; }
32229	public void createInFile ( String filePath ) throws IOException { this . inFile = new ExifInterface ( filePath ) ; }
32288	public WallUnpinQuery unpin ( UserActor actor , int postId ) { return new WallUnpinQuery ( getClient ( ) , actor , postId ) ; }
32302	private void addPaths ( ) { addPath ( new ConfigureAndroidProjectPath ( getDisposable ( ) ) ) ; for ( NewFormFactorModulePath path : NewFormFactorModulePath . getAvailableFormFactorModulePaths ( getDisposable ( ) ) ) { addPath ( path ) ; } addPath ( new ConfigureCppSupportPath ( getDisposable ( ) ) ) ; }
32308	public void onProgressBarUpdated ( int progress ) { }
32311	public static SM_SYSTEM_MESSAGE STR_UI_COMBAT_NPC_FLEE ( String value0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , value0 ) ; }
32323	public boolean isValueOnly ( ) { return valueOnly ; }
32342	public static void createTable ( Database db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR THEME_LIST \ _CHAR ( _CHAR + _CHAR \ _CHAR JSON_STRING \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR CREATED_TIME \ _CHAR INTEGER ) ; _CHAR ) ; }
32356	public AemSidekick clickComponentGroupToggle ( String groupName ) { final Map < String , WebElement > groupByNames = getGroupsByNames ( ) ; if ( groupByNames . containsKey ( groupName ) ) { groupByNames . get ( groupName ) . findElement ( By . cssSelector ( SECTION_TOGGLE_CSS ) ) . click ( ) ; } return this ; }
32383	public CartPaymentInfo addPayment ( String id ) { return this . addPaymentAmount ( id , _NULL , _BOOL ) ; }
32395	private void forgetObjects ( ) { for ( VisibleObject object : knownObjects . values ( ) ) { if ( ! checkObjectInRange ( object ) && ! object . getKnownList ( ) . checkReversedObjectInRange ( owner ) ) { del ( object , _BOOL ) ; object . getKnownList ( ) . del ( owner , _BOOL ) ; } } }
32421	public DatabaseGetCitiesQuery needAll ( Boolean value ) { return unsafeParam ( _CHAR need_all _CHAR , value ) ; }
32429	public boolean isAbnormalState ( AbnormalState id ) { int state = abnormals & id . getId ( ) ; return state > _NUM && state <= id . getId ( ) ; }
32480	@ Override public boolean isCellEditable ( int rowIndex , int columnIndex ) { ProcessFunctionParameterValue value = valueList . get ( rowIndex ) ; switch ( columnIndex ) { case COL_OPTIONAL : return value . optional ; case COL_VALUE : if ( value . optional ) { return value . included ; } else { return _BOOL ; } case COL_PARAMETER : case COL_TYPE : default : return _BOOL ; } }
32502	private void configureRootLogger ( String filename ) { String file = getLogFile ( filename ) ; RollingFileAppender appender = getRollingFileAppender ( file ) ; Logger . getRootLogger ( ) . addAppender ( appender ) ; log . info ( _CHAR Added root logger using file : _CHAR + file ) ; }
32531	public VideoReorderVideosQuery albumId ( Integer value ) { return unsafeParam ( _CHAR album_id _CHAR , value ) ; }
32555	public static SM_SYSTEM_MESSAGE STR_CURRENT_EXCLUDES ( int num0 ) { return new SM_SYSTEM_MESSAGE ( _NUM , num0 ) ; }
32570	@ Override protected void reset ( ) throws XNIException { if ( fValidationManager != _NULL ) fValidationManager . reset ( ) ; configurePipeline ( ) ; super . reset ( ) ; }
32579	public boolean isDurableSubscriber ( ) { return ! StringsUtils . isEmpty ( m_durableSubscriptionName ) ; }
32599	public MessagesGetHistoryQuery rev ( Boolean value ) { return unsafeParam ( _CHAR rev _CHAR , value ) ; }
32618	public void beforeMemberAdded ( MemberAddedEvent memberAddedEvent ) { }
32652	public static int delete ( long id ) { Lock . cleanup ( id ) ; return Helper . delete ( id , User . class ) ; }
32676	public boolean exists ( String key , boolean ignoreCase ) { if ( ignoreCase ) key = key . toLowerCase ( ) ; for ( String existKey : this . getKeys ( _BOOL ) ) { if ( ignoreCase ) existKey = existKey . toLowerCase ( ) ; if ( existKey . equals ( key ) ) return _BOOL ; } return _BOOL ; }
32705	public void start ( ) { eventLogThread . start ( ) ; LOGGER . info ( _CHAR Started _CHAR + eventLogThread . getName ( ) + _CHAR with ID _CHAR + eventLogThread . getId ( ) + _CHAR . _CHAR ) ; }
32707	public static void actions ( Context context , Api api , Api . ApiOptions . HasOptions options , Action1 < GoogleApiClient > onClientConnected , Action1 < Throwable > onError ) { GoogleApiClientActions . create ( context . getApplicationContext ( ) , new ApiWithOptions ( api , options ) , onClientConnected , onError ) ; }
32708	public boolean checkPacket ( int packetHeader ) { return checkPacket ( new byte [ ] { ( byte ) ( ( packetHeader >> _NUM ) & _NUM ) , ( byte ) ( ( packetHeader >> _NUM ) & _NUM ) } ) ; }
32734	@ Override public String whoAmI ( ) { return ( _CHAR step _CHAR + Double . toString ( _NUM . _NUM * stepVal ) + _CHAR % _CHAR ) ; }
32747	@ Override public int read ( ) throws IOException { int c = in . read ( ) ; if ( c == - _NUM ) return - _NUM ; if ( ( c & ~ _NUM ) != _NUM ) { System . out . println ( _CHAR MD5InputStream . read ( ) got character with ( c & ~ _NUM ) != _NUM ) ! _CHAR ) ; } else { md5 . Update ( c ) ; } return c ; }
32784	public RequestHandle delete ( String url , ResponseHandlerInterface responseHandler ) { return delete ( _NULL , url , responseHandler ) ; }
32799	@ Override public void endDocument ( Augmentations augs ) throws XNIException { }
32836	public static Object calculateGenericExpression ( String expression ) { final JEP parser = getJep ( ) ; parser . parseExpression ( expression ) ; Object result = parser . getValueAsObject ( ) ; return result ; }
32846	public void rightTrim ( int numberOfSample ) { trim ( _NUM , numberOfSample ) ; }
32854	public void takeHeapDump ( CoreDump coreDump , boolean openView ) { heapDumpProvider . createHeapDump ( coreDump , openView ) ; }
32882	public NewsfeedSearchQueryWithExtended searchExtended ( UserActor actor ) { return new NewsfeedSearchQueryWithExtended ( getClient ( ) , actor ) ; }
32897	public void sendEffectIconsTo ( Player player ) { List < Effect > effects = getAbnormalEffects ( ) ; PacketSendUtility . sendPacket ( player , new SM_ABNORMAL_EFFECT ( getOwner ( ) , abnormals , effects ) ) ; }
32932	public boolean constCaching ( ) { return constCaching ; }
32949	private String buildKey ( String accountName , String remotePath ) { return accountName + remotePath ; }
32956	public ViewBinder addLinks ( int viewId , int mask ) { TextView view = retrieveView ( viewId ) ; Linkify . addLinks ( view , mask ) ; return this ; }
32961	protected final boolean isClosed ( ) { return m_closed ; }
32973	public void open ( ) { open = _BOOL ; }
33060	public void visitFormalTypeParameter ( String name ) { }
33069	public static void v ( String tag , String msg , Throwable throwable ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } Log . v ( tag , msg , throwable ) ; }
33097	static Throwable loadLibrary ( ) { try { File nativeLibFile = findNativeLibrary ( ) ; if ( nativeLibFile != _NULL ) { System . load ( nativeLibFile . getAbsolutePath ( ) ) ; } else { System . loadLibrary ( _CHAR commons - crypto _CHAR ) ; } return _NULL ; } catch ( Exception t ) { return t ; } catch ( UnsatisfiedLinkError t ) { return t ; } }
33102	public static void copy ( InputStream inputStream , OutputStream outputStream ) throws IOException { copy ( inputStream , outputStream , BUFFER_SIZE ) ; }
33111	public void reloadConfig ( ) { downloadConfig ( this . configUrl ) ; }
33121	public static int countAll ( ) { return getPersistence ( ) . countAll ( ) ; }
33122	public boolean displayConfirmation ( LocalizableMessage msg , LocalizableMessage title ) { return getDialog ( ) . displayConfirmation ( msg , title ) ; }
33145	@ Override public int hashCode ( ) { int hash = _NUM ; hash = _NUM * hash + ( this . host != _NULL ? this . host . hashCode ( ) : _NUM ) ; hash = _NUM * hash + this . port ; return hash ; }
33221	private synchronized void createThreads ( ) { for ( int i = _NUM ; i < poolSize ; i ++ ) { WorkerThread t = new WorkerThread ( poolName + i , this ) ; t . setDaemon ( _BOOL ) ; t . start ( ) ; threads [ i ] = t ; } }
33234	private void createMoveFielsNode ( final Element rootElement ) { Element element = creator . getDocument ( ) . createElement ( _CHAR MoveFiles _CHAR ) ; element . setAttribute ( _CHAR moved _CHAR , String . valueOf ( this . filesMoved ) ) ; element . setAttribute ( _CHAR movedTotal _CHAR , String . valueOf ( this . movedAll + this . filesMoved ) ) ; rootElement . appendChild ( element ) ; }
33271	public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doPost ( request , response ) ; }
33273	private void publishInDebugLogger ( String message , Throwable t ) { tracer . traceException ( message , t ) ; }
33279	public boolean isPrependId ( ) { return ( Boolean ) getStateHelper ( ) . eval ( Properties . prependId , _BOOL ) ; }
33281	private void processSynchPostOperationPlugins ( ) { for ( SynchronizationProvider < ? > provider : getSynchronizationProviders ( ) ) { try { provider . doPostOperation ( this ) ; } catch ( DirectoryException de ) { logger . traceException ( de ) ; logger . error ( ERR_MODIFY_SYNCH_POSTOP_FAILED , getConnectionID ( ) , getOperationID ( ) , getExceptionMessage ( de ) ) ; setResponseData ( de ) ; return ; } } }
33282	protected Expression mult ( int opPos ) throws TransformerException { return compileOperation ( new Mult ( ) , opPos ) ; }
33316	public void repair_clearance_violations ( ) { if ( debug ( Mdbg . CLRVIOL , Ldbg . TRACE ) ) i_brd . userPrintln ( classname + _CHAR repair_clearance_violations : start _CHAR ) ; StateRepairClearanceViolation repair = new StateRepairClearanceViolation ( this , i_brd , actlog ) ; repair . repair ( items_list ) ; }
33325	public boolean removeIndexModifiedListener ( IndexModifiedListener listener ) { return indexListeners . remove ( listener ) ; }
33339	public Future < Job > error ( Throwable ex ) { return this . emitError ( ex ) . set ( _CHAR error _CHAR , ex . getMessage ( ) ) . compose ( _NULL ) ; }
33347	public R visitSize ( SizePropertyDefinition pd , P p ) { return visitUnknown ( pd , p ) ; }
33359	public void handleTblDataActionDefaultHrefRequest ( RequestInvocationEvent event ) { String name = ( String ) getDisplayFieldValue ( TBL_DATA_ACTION_DEFAULT_HREF ) ; deleteDevice ( name , _CHAR clientDetection . client . defaulted . message _CHAR ) ; forwardTo ( ) ; }
33367	public void enableLogging ( ) { this . needsLogging = _BOOL ; }
33434	public static boolean isEqualTo ( String s1 , String s2 ) { return CollectionUtils . genericCompare ( s1 , s2 ) ; }
33493	public static long numStripFIFO ( String zid ) { return Long . parseLong ( zid . substring ( zid . indexOf ( _CHAR ) + _NUM ) ) ; }
33559	public static TargetControl decode ( EnumTargetOperator operator , String expr ) throws AciException { Set < String > controlOIDs = Aci . decodeOID ( expr , WARN_ACI_SYNTAX_INVALID_TARGETCONTROL_EXPRESSION . get ( expr ) ) ; return new TargetControl ( operator , controlOIDs ) ; }
33563	public void handleButton3Request ( RequestInvocationEvent event ) { CloseWindowViewBean vb = ( CloseWindowViewBean ) getViewBean ( CloseWindowViewBean . class ) ; vb . forwardTo ( getRequestContext ( ) ) ; }
33566	public void beginDisplay ( DisplayEvent event ) throws ModelControlException { super . beginDisplay ( event ) ; Set propertyNames = ( Set ) getPageSessionAttribute ( PG_ATTR_PROPERTY_NAMES ) ; populatePropertyNameTableModel ( propertyNames ) ; }
33582	public void characters ( char ch [ ] , int start , int length ) throws SAXException { if ( contentHandler != _NULL ) { contentHandler . characters ( ch , start , length ) ; } }
33625	public R visitClass ( ClassPropertyDefinition pd , P p ) { return visitUnknown ( pd , p ) ; }
33633	public Builder removeAllSuperiorObjectClass ( ) { this . superiorClasses . clear ( ) ; return this ; }
33658	public Future < Long > delayedCount ( String type ) { Future < Long > future = Future . future ( ) ; jobService . delayedCount ( type , future . completer ( ) ) ; return future ; }
33675	public void printlnError ( String str ) { buff . append ( str ) . append ( _CHAR \ n _CHAR ) ; }
33683	public void updateDeleteTime ( long time ) { if ( time > _NUM && time < deleteTimeMin ) { deleteTimeMin = time ; } if ( time > deleteTimeMax ) { deleteTimeMax = time ; } deleteCumulativeCount += time ; deleteTimeAverage = deleteCumulativeCount / totalDeletes ; }
33717	public static long [ ] transformLongArray ( Long [ ] source ) { long [ ] destin = new long [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
33750	@ Override public void removeAttribute ( String name ) { myAttributes . remove ( name ) ; }
33792	public R visitDuration ( DurationPropertyDefinition pd , P p ) { return visitUnknown ( pd , p ) ; }
33814	private void addMapping ( TreeStateNode node ) { treePathMapping . put ( node . getTreePath ( ) , node ) ; }
33850	private void addMapping ( FHTreeStateNode node ) { treePathMapping . put ( node . getTreePath ( ) , node ) ; }
33856	public boolean removeConfigChangeListener ( ConfigChangeListener listener ) { return configListeners . remove ( listener ) ; }
33857	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR ORDERS \ _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR \ _CHAR DATE \ _CHAR INTEGER , _CHAR + _CHAR \ _CHAR CUSTOMER_ID \ _CHAR INTEGER NOT NULL ) ; _CHAR ) ; }
33863	public boolean removeBackupCreatedListener ( BackupCreatedListener listener ) { return backupListeners . remove ( listener ) ; }
33871	public void beginDisplay ( DisplayEvent e ) throws ModelControlException { super . beginDisplay ( e ) ; setInlineAlertMessage ( messageType , messageTitle , message ) ; }
33877	public void printlnMessage ( String str ) { buff . append ( str ) . append ( _CHAR \ n _CHAR ) ; }
33882	public static String [ ] removeEmptyStrings ( String [ ] strings ) { if ( Objects . isNull ( strings ) ) { throw new IllegalArgumentException ( _CHAR Input array should not be _NULL _CHAR ) ; } return Arrays . stream ( strings ) . filter ( _NULL ) . toArray ( _NULL ) ; }
33911	public static String convertFromInteger ( int value ) { return String . valueOf ( value ) ; }
33935	public void stopBundle ( Bundle bundle ) throws UpdateException { try { bundle . stop ( ) ; } catch ( BundleException e ) { throw new UpdateException ( _CHAR Can not stop bundle _CHAR + bundle . toString ( ) , e ) ; } }
33961	public boolean isRequired ( ) { return required ; }
33972	public void startElement ( String uri , String localName , String qName , Attributes atts ) throws SAXException { if ( contentHandler != _NULL ) { contentHandler . startElement ( uri , localName , qName , atts ) ; } }
34028	public String toString ( ) { return _CHAR >> > Marker after _CHAR + after + _CHAR on _CHAR + untilFocused ; }
34042	public boolean isMutable ( ) { return mutable ; }
34048	private void grow ( ) { m_allocatedSize *= _NUM ; boolean newVector [ ] = new boolean [ m_allocatedSize ] ; System . arraycopy ( m_values , _NUM , newVector , _NUM , m_index + _NUM ) ; m_values = newVector ; }
34055	private static byte [ ] min ( byte [ ] ip1 , byte [ ] ip2 ) { for ( int i = _NUM ; i < ip1 . length ; i ++ ) { if ( ( ip1 [ i ] & _NUM ) < ( ip2 [ i ] & _NUM ) ) { return ip1 ; } } return ip2 ; }
34068	public Builder requiredAttributes ( final Collection < String > attributeNamesOrOIDs ) { this . requiredAttributes . addAll ( attributeNamesOrOIDs ) ; return this ; }
34100	@ SuppressWarnings ( _CHAR unchecked _CHAR ) public static < M > Iterable < M > emptyIterable ( ) { return ( Iterable < M > ) EMPTY_ITERABLE ; }
34152	public String productReleaseDate ( ) { return properties . getProperty ( _CHAR product . release . date _CHAR ) ; }
34188	public void startHandler ( ) { if ( logger . isTraceEnabled ( ) ) { debugInfo ( _CHAR start _CHAR ) ; } DirectoryServer . deregisterMonitorProvider ( this ) ; DirectoryServer . registerMonitorProvider ( this ) ; }
34233	protected void installDefaults ( JComponent c ) { updateStyle ( c ) ; }
34239	public boolean showOperations ( ) { return showOperations ; }
34260	public boolean isLoginTimeout ( long lastCallbackSent , long timeout ) { long now = currentTimeMillis ( ) ; long timeoutVal = lastCallbackSent + ( timeout - _NUM ) * _NUM ; return ( timeoutVal < now ) ; }
34283	public static void reportEnd ( String str , Object ... param ) { writeProgressText ( str , param , _BOOL ) ; }
34340	@ Override public IndexCreatedEvent read ( UUID uuid ) { if ( uuid == _NULL ) { return _NULL ; } BoundStatement bs = new BoundStatement ( readStmt ) ; bindUUIDWhere ( bs , uuid ) ; return marshalRow ( getSession ( ) . execute ( bs ) . one ( ) ) ; }
34361	private static void checkGettingStarted ( ) throws Exception { PreferencesEntry < String > started = Settings . forPackage ( Main . class ) . entry ( _CHAR getting . started _CHAR ) . defaultValue ( _CHAR _NUM _CHAR ) ; if ( _CHAR _NUM _CHAR . equals ( started . getValue ( ) ) ) { started . setValue ( _CHAR _NUM _CHAR ) ; started . flush ( ) ; SwingUtilities . invokeLater ( _NULL ) ; } }
34366	public static String tagSwap ( String orig ) { return tagSwap ( orig , _BOOL ) ; }
34383	@ BeforeClass public void disableLogging ( ) { TestCaseUtils . setDefaultLogLevel ( Level . SEVERE ) ; }
34419	private void resizeRow ( int width , View view ) { LinearLayout . LayoutParams params = ( LinearLayout . LayoutParams ) mRow . getLayoutParams ( ) ; mRowWidth = mRowWidth + width ; params . weight = mRow . getChildCount ( ) ; mRow . setLayoutParams ( params ) ; }
34433	public void activateFedStatus ( ) { this . isActive = _BOOL ; }
34482	public static String insertContent ( String original , int position , String content ) { return original . substring ( _NUM , position ) + content + original . substring ( position ) ; }
34494	public static SearchRequest newSingleEntrySearchRequest ( final String dn , final SearchScope scope , final String filter , final String ... attributeDescriptions ) { return Requests . newSingleEntrySearchRequest ( dn , scope , filter , attributeDescriptions ) . addControl ( TransactionIdControl . newControl ( AuditRequestContext . createSubTransactionIdValue ( ) ) ) ; }
34496	@ BeforeClass public void disableLogging ( ) { TestCaseUtils . setDefaultLogLevel ( Level . SEVERE ) ; }
34497	public boolean hasDisplayName ( ) { return ( displayName != _NULL ) ; }
34507	public AttributeSet copyAttributes ( ) { return this ; }
34527	void putAttribute ( String name , String value ) { if ( ( attributes == _NULL ) || ( attributes . size ( ) == _NUM ) ) { attributes = new HashMap < String , String > ( ) ; } attributes . put ( name , value ) ; }
34567	public void addIndexModifiedListener ( IndexModifiedListener listener ) { indexListeners . add ( listener ) ; }
34572	public boolean isServerTerminated ( ) { try { process . exitValue ( ) ; } catch ( IllegalThreadStateException itse ) { return _BOOL ; } return _BOOL ; }
34597	public void treeNodesInserted ( TreeModelEvent e ) { fireVisibleDataPropertyChange ( ) ; }
34610	public Builder removeAllNames ( ) { this . names . clear ( ) ; return this ; }
34628	private boolean checkRecordFolderIsCreated ( String issueID ) { return isDirectoryExist ( RecordConstants . RECORD_FOLDER_NAME + File . separator + issueID ) ; }
34711	public final void tunnelTarget ( boolean secure ) { if ( ! this . connected ) { throw new IllegalStateException ( _CHAR No tunnel unless connected . '' ) ; } if ( this . proxyChain == _NULL ) { throw new IllegalStateException ( _CHAR No tunnel without proxy . '' ) ; } this . tunnelled = TunnelType . TUNNELLED ; this . secure = secure ; }
34715	public void incrementIdxOfCurrentCallback ( ) { ++ idxOfCurrentCallback ; }
34731	public static net . aimeizi . person . Person . Builder newBuilder ( ) { return new net . aimeizi . person . Person . Builder ( ) ; }
34734	public static ValueExpression createLabelValueExpression ( String key ) { key = _CHAR # { msg . get ( _CHAR_CHAR_CHAR ) } _CHAR ) ; final ValueExpression exp = JKJsfUtil . createValueException ( key , String . class ) ; return exp ; }
34757	public static void start ( Context context ) { start ( context , new Params ( ) ) ; }
34779	public void addPrivilege ( Privilege privilege ) { privileges . add ( privilege ) ; }
34789	public void endDocument ( ) throws SAXException { if ( DEBUG ) System . out . println ( _CHAR TransformerHandlerImpl # endDocument _CHAR ) ; m_insideParse = _BOOL ; if ( m_contentHandler != _NULL ) { m_contentHandler . endDocument ( ) ; } if ( m_incremental ) { m_transformer . waitTransformThread ( ) ; } else { m_transformer . setSourceTreeDocForThread ( m_dtm . getDocument ( ) ) ; m_transformer . run ( ) ; } }
34873	public void deleteField ( FieldKey genericKey ) throws KeyNotFoundException { if ( genericKey == _NULL ) { throw new KeyNotFoundException ( ) ; } VorbisCommentFieldKey vorbisCommentFieldKey = tagFieldToOggField . get ( genericKey ) ; deleteField ( vorbisCommentFieldKey ) ; }
34887	protected int read ( byte [ ] buffer , int offset , int length ) throws IOException { return mTiffStream . read ( buffer , offset , length ) ; }
34898	private static TypeDescription statementDescription ( ) { return new TypeDescription . Latent ( _CHAR com . datastax . driver . core . Statement _CHAR , Modifier . ABSTRACT , _NULL , _NULL ) ; }
34923	protected void onDropRouter ( R router ) { }
34938	@ Override public void end ( String namespace , String name ) { if ( bodyTextStack != _NULL && ! bodyTextStack . empty ( ) ) { Object parameters [ ] = ( Object [ ] ) digester . peekParams ( ) ; parameters [ paramIndex ] = bodyTextStack . pop ( ) ; } }
34940	public void paintBorder ( Component c , Graphics g , int x , int y , int width , int height ) { }
34978	void deleteTree ( WriteableTransaction txn , Tree tree ) throws StorageRuntimeException { if ( tree == state ) { return ; } tree . delete ( txn ) ; if ( tree instanceof Index ) { state . deleteRecord ( txn , tree . getName ( ) ) ; } }
34980	public void writeSearchResult ( final int messageID , final Result result ) throws IOException { logger . trace ( _CHAR ENCODE LDAP SEARCH RESULT ( messageID = % d , result = % s ) _CHAR , messageID , result ) ; writeMessageHeader ( messageID ) ; { writeResultHeader ( LDAP . OP_TYPE_SEARCH_RESULT_DONE , result ) ; writeResultFooter ( writer ) ; } writeMessageFooter ( result . getControls ( ) ) ; }
35007	public void reset ( boolean reset ) { this . reset = reset ; }
35011	public String decodeKey ( final String hexEncodedKey ) { if ( StringUtils . isEmpty ( hexEncodedKey ) ) { throw new IllegalArgumentException ( _CHAR hexEncodedKey can not be empty _CHAR ) ; } try { return new String ( Hex . decodeHex ( hexEncodedKey . toCharArray ( ) ) ) ; } catch ( DecoderException de ) { throw new IllegalStateException ( de ) ; } }
35027	private boolean isApplicationModule ( String moduleName ) { boolean isApp = ( moduleName != _NULL ) && ( moduleName . equalsIgnoreCase ( ISAuthConstants . APPLICATION_MODULE ) ) ; if ( DEBUG . messageEnabled ( ) ) { DEBUG . message ( _CHAR is Application Module : _CHAR + isApp ) ; } return isApp ; }
35144	public void printlnError ( String str ) { buff . append ( str ) . append ( _CHAR \ n _CHAR ) ; }
35145	public void printlnMessage ( String str ) { System . out . println ( str ) ; }
35147	public static Builder newFailureBuilder ( ) { return new Builder ( _BOOL ) ; }
35208	public void onSettings ( View v ) { Intent intent = new Intent ( this , ConfigPrefsActivity . class ) ; intent . putExtra ( ConfigPrefs . PREFS_TYPE , ConfigPrefs . VIDEO_AND_CONNECTION ) ; intent . putExtra ( ConfigPrefs . FIXED_FRAME_SIZE , _BOOL ) ; intent . putExtra ( ConfigPrefs . FIXED_FRAME_RATE , _BOOL ) ; startActivity ( intent ) ; }
35257	public boolean isRinging ( ) { return ( currentState == ringingState ) ; }
35280	public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
35283	private String replaceDNDelimiter ( String nSuffix , String replaceWith ) { return nSuffix . replaceAll ( _CHAR , _CHAR , replaceWith ) . trim ( ) ; }
35299	private final boolean isTextType ( int type ) { return ( DTM . TEXT_NODE == type || DTM . CDATA_SECTION_NODE == type ) ; }
35306	public Observable < Void > deleteAllProductsObservable ( ) { io . vertx . rx . java . ObservableFuture < Void > resultHandler = io . vertx . rx . java . RxHelper . observableFuture ( ) ; deleteAllProducts ( resultHandler . toHandler ( ) ) ; return resultHandler ; }
35331	@ AfterClass public void enableLogging ( ) { TestCaseUtils . setDefaultLogLevel ( Level . INFO ) ; }
35333	private void writeObject ( java . io . ObjectOutputStream s ) throws java . io . IOException { s . defaultWriteObject ( ) ; s . writeInt ( values . size ( ) ) ; for ( int i = _NUM ; i < values . size ( ) ; i ++ ) { s . writeObject ( values . elementAt ( i ) ) ; } }
35344	public boolean displayConfirmation ( LocalizableMessage msg , LocalizableMessage title ) { return Utilities . displayConfirmation ( getFrame ( ) , msg , title ) ; }
35350	public AuditEvent convertToAuditEvent ( PersistentAuditEvent persistentAuditEvent ) { Instant instant = persistentAuditEvent . getAuditEventDate ( ) . atZone ( ZoneId . systemDefault ( ) ) . toInstant ( ) ; return new AuditEvent ( Date . from ( instant ) , persistentAuditEvent . getPrincipal ( ) , persistentAuditEvent . getAuditEventType ( ) , convertDataToObjects ( persistentAuditEvent . getData ( ) ) ) ; }
35355	public static boolean isValidStation ( int station ) { boolean isValid = ( station >= LOWEST_STATION && station <= HIGHEST_STATION ) ; Log . v ( TAG , _CHAR isValidStation : freq = _CHAR + station + _CHAR , valid = _CHAR + isValid ) ; return isValid ; }
35368	public boolean isActivated ( ) { return ( getData ( ) & _NUM ) != _NUM ; }
35369	public static Optional < String > trimStart ( final String input ) { return Optional . ofNullable ( input ) . filter ( _NULL ) . map ( _NULL ) ; }
35379	public static boolean isValidCredentials ( String dsHost , String dsPort , String bindDN , String bindPass ) { try ( Connection conn = factory . getConnection ( ) ) { return _BOOL ; } catch ( Exception e ) { System . out . println ( bundle . getString ( _CHAR upg - error - credentials _CHAR ) + _CHAR ! ! _CHAR ) ; } return _BOOL ; }
35382	public static HelpSubCommandHandler create ( SubCommandArgumentParser parser ) throws ArgumentException { return new HelpSubCommandHandler ( parser ) ; }
35451	public ListBuffer < A > prepend ( final A x ) { elements = elements . prepend ( x ) ; count ++ ; return this ; }
35459	public static String slugify ( final String value ) { validate ( value , NULL_STRING_PREDICATE , NULL_STRING_MSG_SUPPLIER ) ; String transliterated = transliterate ( collapseWhitespace ( value . trim ( ) . toLowerCase ( ) ) ) ; return Arrays . stream ( words ( transliterated . replace ( _CHAR & _CHAR , _CHAR - and - _CHAR ) ) ) . collect ( joining ( _CHAR - _CHAR ) ) ; }
35463	public void visitTryCatchBlock ( Label start , Label end , Label handler , String type ) { if ( mv != _NULL ) { mv . visitTryCatchBlock ( start , end , handler , type ) ; } }
35488	public void addBackupCreatedListener ( BackupCreatedListener listener ) { backupListeners . add ( listener ) ; }
35542	@ Override public boolean isAllowed ( LocalBackendDeleteOperation operation ) { AciContainer container = new AciLDAPOperationContainer ( operation , ACI_DELETE ) ; return isAllowed ( container , operation ) ; }
35548	public boolean contains ( String attrName ) { boolean containsTheValue = _BOOL ; int index = indexOf ( attrName ) ; if ( index != - _NUM ) { containsTheValue = _BOOL ; } return containsTheValue ; }
35562	public String toString ( ) { return exp + _CHAR like _CHAR + new StringValueExp ( pattern ) ; }
35565	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR SAVED_DAILY_DETAIL \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
35593	TemplateEntry nextEntry ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( ) ; } final TemplateEntry entry = nextEntry ; nextEntry = _NULL ; return entry ; }
35606	private static byte [ ] max ( byte [ ] ip1 , byte [ ] ip2 ) { for ( int i = _NUM ; i < ip1 . length ; i ++ ) { if ( ( ip1 [ i ] & _NUM ) > ( ip2 [ i ] & _NUM ) ) { return ip1 ; } } return ip2 ; }
35608	public void serialize ( Node node ) throws IOException { if ( m_firstTagNotEmitted ) { flush ( ) ; } m_handler . serialize ( node ) ; }
35647	public Vector multiply ( float by ) { float x = vals [ I1 ] * by ; float y = vals [ I2 ] * by ; float z = vals [ I3 ] * by ; return new Vector ( x , y , z ) ; }
35671	@ Deactivate public void deactivate ( ComponentContext context ) { bundleContext = _NULL ; }
35675	public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( _keyword ) . append ( _CHAR : _CHAR ) . append ( _operator ) . append ( _CHAR : _CHAR ) . append ( _value ) ; return sb . toString ( ) ; }
35700	@ Override public Promise < ActionResponse , ResourceException > actionInstance ( Context context , String resourceId , ActionRequest request ) { return RestUtils . generateUnsupportedOperation ( ) ; }
35712	private void updateCurrentStation ( ) { int freq = mService . getFrequency ( ) ; if ( FmRadioUtils . isValidStation ( freq ) ) { if ( mCurrentStation != freq ) { Log . d ( TAG , _CHAR frequency in service is n _CHAR_CHAR ) ; mCurrentStation = freq ; FmRadioStation . setCurrentStation ( mContext , mCurrentStation ) ; refreshStationUI ( mCurrentStation ) ; } } }
35751	private static long now ( ) { return System . nanoTime ( ) - NANO_ORIGIN ; }
35758	public void endElement ( String uri , String localName , String qName ) throws SAXException { if ( contentHandler != _NULL ) { contentHandler . endElement ( uri , localName , qName ) ; } }
35814	public static byte [ ] decode ( String s ) throws Base64DecoderException { byte [ ] bytes = s . getBytes ( ) ; return decode ( bytes , _NUM , bytes . length ) ; }
35831	public static ThreatResult withData ( String type , String desc , List < String > detections ) { String detectionStr = _CHAR _CHAR ; for ( String detection : detections ) { detectionStr += detection + _CHAR < br > _CHAR ; } return new ThreatResult ( type , desc , _CHAR < br > Detections : < br > < br > _CHAR + detectionStr ) ; }
35840	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR COLLECT_ENTITY \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
35855	void createContext ( SSOToken appSSOToken ) throws SessionException { if ( appSSOToken == _NULL ) { if ( sessionDebug . warningEnabled ( ) ) { sessionDebug . warning ( _CHAR Session . '' + _CHAR createContext ( ) : , _CHAR + _CHAR can not obtain application SSO token , _CHAR + _CHAR defaulting to IP address _CHAR ) ; } } else { sessionDebug . message ( _CHAR Session . '' + _CHAR createContext ( ) : , _CHAR + _CHAR setting context to application SSO token _CHAR ) ; context = appSSOToken ; } }
35872	public void popElemTemplateElement ( ) { m_currentTemplateElements . pop ( ) ; }
35975	public byte [ ] writeByteArray ( ) { logger . config ( _CHAR Writing byte array _CHAR + this . getIdentifier ( ) ) ; return ( byte [ ] ) value ; }
35986	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR _CHAR _CHAR ; db . execSQL ( sql ) ; }
35999	public final static String formatParameters ( final NameValuePair [ ] nvps , final boolean quote , HeaderValueFormatter formatter ) { if ( formatter == _NULL ) formatter = BasicHeaderValueFormatter . DEFAULT ; return formatter . formatParameters ( _NULL , nvps , quote ) . toString ( ) ; }
36022	public boolean isEmailEnabled ( ) { return emailEnabled ; }
36062	public String toString ( ) { return ( getDurationToString ( ) ) ; }
36135	public boolean isTraceEnabled ( ) { return ( getLogger ( ) . isLoggable ( Level . FINEST ) ) ; }
36159	public String doubleMetaphone ( String value ) { return doubleMetaphone ( value , _BOOL ) ; }
36162	public static UIActions createActionsRegion ( ) { return ( UIActions ) JSFComponentFactory . createComponent ( UIActions . COMPONENT_TYPE ) ; }
36165	public RequirementsBuilder addCustomField ( String name , JsonValue customJsonValue ) { Reject . ifNull ( name , customJsonValue ) ; jsonValue . add ( name , getUnderlyingObject ( customJsonValue ) ) ; return this ; }
36169	public static int countAll ( ) { return getPersistence ( ) . countAll ( ) ; }
36192	public void store ( SSOToken token ) throws SMSException , SSOException { }
36215	public static String convertFromDouble ( double value ) { return String . valueOf ( value ) ; }
36220	public void parse ( String filename ) throws HyphenationException , FileNotFoundException { parse ( new FileInputStream ( filename ) , filename ) ; }
36226	@ Override public int hashCode ( ) { int code = _NUM ; if ( eSubjects != _NULL ) { for ( EntitlementSubject eSubject : eSubjects ) { code += eSubject . hashCode ( ) ; } } if ( pSubjectName != _NULL ) { code += pSubjectName . hashCode ( ) ; } return code ; }
36238	@ BeforeClass public void disableLogging ( ) { TestCaseUtils . setDefaultLogLevel ( Level . SEVERE ) ; }
36239	public SAML2ConfigBuilder encryptionAlgorithmStrength ( int encryptionAlgorithmStrength ) { this . encryptionAlgorithmStrength = encryptionAlgorithmStrength ; return this ; }
36259	public void handleTblDataActionDeleteHrefRequest ( RequestInvocationEvent event ) { String name = ( String ) getDisplayFieldValue ( TBL_DATA_ACTION_DELETE_HREF ) ; deleteDevice ( name , _CHAR clientDetection . client . deleted . message _CHAR ) ; forwardTo ( ) ; }
36274	public static ConstraintResult newFailure ( String attributeName , String invalidValue ) { return new ConstraintFailureImpl ( attributeName , invalidValue ) ; }
36297	public static String stripFIFO ( String zid ) { return zid . substring ( zid . indexOf ( _CHAR ) + _NUM ) ; }
36326	protected void uninstallListeners ( JComponent c ) { c . removePropertyChangeListener ( this ) ; }
36341	public void clearAccountDisabledState ( ) { operations . add ( PasswordPolicyStateOperationType . CLEAR_ACCOUNT_DISABLED_STATE ) ; }
36381	void updateFinish ( String instanceId ) { if ( ! isDomThread ( ) ) { throw new WXRuntimeException ( _CHAR RefreshFinish operation must be done in dom thread _CHAR ) ; } WXDomStatement statement = mDomRegistries . get ( instanceId ) ; if ( statement == _NULL ) { return ; } statement . updateFinish ( ) ; }
36385	public static String convertFrameID22To23 ( String identifier ) { if ( identifier . length ( ) < _NUM ) { return _NULL ; } return ID3Frames . convertv22Tov23 . get ( ( String ) identifier . subSequence ( _NUM , _NUM ) ) ; }
36425	public boolean isThumbnailCompressed ( ) { return mData . hasCompressedThumbnail ( ) ; }
36432	public static void resetPeakThreadCount ( ) { threadMXBean . resetPeakThreadCount ( ) ; }
36442	public static UIData createDataTable ( ) { return ( UIData ) JSFComponentFactory . createComponent ( org . primefaces . component . datatable . DataTable . COMPONENT_TYPE ) ; }
36454	public void treeNodesRemoved ( TreeModelEvent e ) { fireVisibleDataPropertyChange ( ) ; }
36491	public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
36557	public boolean isMultipleAllowed ( String frameID ) { return multipleFrames . contains ( frameID ) ; }
36566	public void handleCreateConfigButtonRequest ( RequestInvocationEvent event ) throws ModelControlException { NewAuthConfigViewBean vb = ( NewAuthConfigViewBean ) getViewBean ( NewAuthConfigViewBean . class ) ; removePageSessionAttribute ( AUTH_CONFIG_TABLE ) ; unlockPageTrail ( ) ; passPgSessionMap ( vb ) ; vb . forwardTo ( getRequestContext ( ) ) ; }
36622	public static boolean isTerminationSuccess ( HttpServletRequest request ) { String status = request . getParameter ( IFSConstants . TERMINATION_STATUS ) ; if ( status == _NULL || status . equalsIgnoreCase ( IFSConstants . TERMINATION_SUCCESS ) ) { return _BOOL ; } else { return _BOOL ; } }
36636	public static Feature fromGeometry ( Geometry geometry , JsonObject properties ) { return new Feature ( geometry , properties , _NULL ) ; }
36705	public boolean isKbaEnabled ( ) { return kbaEnabled ; }
36711	String stripWhitespaces ( String s ) { return s . trim ( ) ; }
36732	public static String base64Decode ( final String value ) { validate ( value , NULL_STRING_PREDICATE , NULL_STRING_MSG_SUPPLIER ) ; return new String ( Base64 . getDecoder ( ) . decode ( value ) ) ; }
36751	@ Override public String toString ( ) { if ( className != _NULL ) { return className + _CHAR . _CHAR + super . toString ( ) ; } else { return super . toString ( ) ; } }
36757	public String toString ( ) { return ( String ) value ; }
36766	public synchronized void disableAllAttributes ( ) { enabledAttributes . removeAllElements ( ) ; }
36783	public boolean isMutable ( ) { return mutable ; }
36806	public boolean isVorbisSetupHeader ( byte [ ] headerData ) { String vorbis = Utils . getString ( headerData , VorbisHeader . FIELD_CAPTURE_PATTERN_POS , VorbisHeader . FIELD_CAPTURE_PATTERN_LENGTH , _CHAR ISO - _NUM - _NUM _CHAR ) ; return ! ( headerData [ VorbisHeader . FIELD_PACKET_TYPE_POS ] != VorbisPacketType . SETUP_HEADER . getType ( ) || ! vorbis . equals ( VorbisHeader . CAPTURE_PATTERN ) ) ; }
36833	public static Optional < String > trimEnd ( final String input ) { return Optional . ofNullable ( input ) . filter ( _NULL ) . map ( _NULL ) ; }
36853	public final int yystate ( ) { return zzLexicalState ; }
36874	public static boolean isValidPhone ( String phone ) { boolean isValidPhone = _BOOL ; Pattern pattern = Pattern . compile ( _CHAR ^ ( ( _NUM [ _NUM - _NUM ] ) | ( _NUM [ ^ _NUM , \\ D ] ) | ( _NUM [ ^ _NUM , \\ D ] ) | ( _NUM [ _NUM - _NUM ] ) ) \\ d { _NUM } $ _CHAR ) ; isValidPhone = pattern . matcher ( phone ) . matches ( ) ; return isValidPhone ; }
36876	public static void writeToFile ( String content , String fileName ) throws IOException { FileWriter fw = _NULL ; try { fw = new FileWriter ( fileName ) ; fw . write ( content , _NUM , content . length ( ) ) ; } finally { if ( fw != _NULL ) { fw . close ( ) ; } } }
36914	public void refresh ( ) { this . initialize ( ) ; }
36945	public static boolean isUpperCase ( final String txt ) { boolean upper = _BOOL ; for ( final char c : txt . toCharArray ( ) ) { if ( Character . isLowerCase ( c ) ) { upper = _BOOL ; break ; } } return upper ; }
36963	static Subscription registerForNotifyChangesToNode ( String dn , SMSEventListener eventListener ) { initialize ( ) ; return addNotificationObject ( nodeChanges , DN . valueOf ( dn ) , eventListener ) ; }
36968	public SAML2ConfigBuilder encryptionAlgorithm ( String encryptionAlgorithm ) { this . encryptionAlgorithm = encryptionAlgorithm ; return this ; }
37013	public boolean isRotatable ( ) { return rotatable ; }
37017	public static void disableLogs ( ) { sLogsEnabled = _BOOL ; }
37025	public ReferredByHeader createReferredByHeader ( Address address ) { if ( address == _NULL ) throw new NullPointerException ( _CHAR _NULL address ! _CHAR ) ; ReferredBy referredBy = new ReferredBy ( ) ; referredBy . setAddress ( address ) ; return referredBy ; }
37039	@ Override public void onFailure ( Throwable t ) { }
37045	@ Override public void close ( ) { IOUtils . closeIfNotNull ( connection ) ; }
37119	public void validatePassword ( String password ) throws AMException { }
37136	public Builder removeAllNames ( ) { this . names . clear ( ) ; return this ; }
37167	public static long [ ] transformLongArray ( Long [ ] source ) { long [ ] destin = new long [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
37168	protected boolean flushBuffer ( boolean block ) throws IOException { return socketWrapper . flush ( block ) ; }
37174	@ AfterClass public void enableLogging ( ) { TestCaseUtils . setDefaultLogLevel ( Level . INFO ) ; }
37188	private void scrollBack ( int headerVisible , int footerVisible ) { synchronized ( lockSpring ) { mIsScrollBack = _BOOL ; isSpringFirstValue = _BOOL ; mRecyclerView . stopScroll ( ) ; if ( headerVisible > _NUM ) { startSpringScroll ( headerVisible ) ; } else { startSpringScroll ( footerVisible ) ; } } }
37217	public Builder removeAllNames ( ) { this . names . clear ( ) ; return this ; }
37237	public static Optional < String > trimStart ( final String input , String ... chars ) { return Optional . ofNullable ( input ) . filter ( _NULL ) . map ( _NULL ) ; }
37243	public void startElement ( String uri , String localName , String qName , Attributes atts ) throws SAXException { if ( DEBUG ) System . out . println ( _CHAR TransformerHandlerImpl # startElement : _CHAR + qName ) ; if ( m_contentHandler != _NULL ) { m_contentHandler . startElement ( uri , localName , qName , atts ) ; } }
37263	public boolean isGlobal ( ) { return isglobal ; }
37282	protected String [ ] args ( String ... arguments ) { return arguments ; }
37287	public static void agentmain ( String args , Instrumentation inst ) throws Exception { setAndAddTransformer ( inst ) ; }
37294	public void fireTableColumnDataChanged ( final int col ) { for ( int i = _NUM ; i < getRowCount ( ) ; i ++ ) { fireTableCellUpdated ( i , col ) ; } }
37307	public void show ( ) { comboBox . firePopupMenuWillBecomeVisible ( ) ; setListSelection ( comboBox . getSelectedIndex ( ) ) ; Point location = getPopupLocation ( ) ; show ( comboBox , location . x , location . y ) ; }
37321	public TimeUnit timeunit ( ) { return values . timeunit ; }
37323	@ Override public Filter visitBooleanLiteralFilter ( final ObjectClassInfoHelper helper , final boolean value ) { if ( value ) { return _NULL ; } throw EMPTY_RESULT_SET_EXCEPTION ; }
37342	public void spin ( ) { lastTimeAnimated = SystemClock . uptimeMillis ( ) ; isSpinning = _BOOL ; invalidate ( ) ; }
37354	public static Integer [ ] transformIntArray ( int [ ] source ) { Integer [ ] destin = new Integer [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
37374	@ Override public String toString ( ) { String s = _NULL ; try { JSONObject jo = toJSONObject ( ) ; s = ( jo == _NULL ) ? super . toString ( ) : jo . toString ( _NUM ) ; } catch ( JSONException joe ) { PolicyConstants . DEBUG . error ( _CHAR Entitlement . toString ( ) _CHAR , joe ) ; } return s ; }
37381	public static StringValueExp value ( String val ) { return new StringValueExp ( val ) ; }
37392	public void reset ( ) { node_list . clear ( ) ; }
37421	public static void validateChannel ( String channel ) { if ( channel == _NULL ) { throw new IllegalArgumentException ( _CHAR Channel can not be _NULL _CHAR ) ; } if ( channel . length ( ) > Messenger . MAX_CHANNEL_SIZE ) { throw new ChannelNameTooLongException ( channel ) ; } }
37437	public static org . primefaces . behavior . ajax . AjaxBehavior createAjax ( ) { final Behavior behavior = FacesContext . getCurrentInstance ( ) . getApplication ( ) . createBehavior ( AjaxBehavior . BEHAVIOR_ID ) ; return ( AjaxBehavior ) behavior ; }
37483	public void displayError ( LocalizableMessage msg , LocalizableMessage title ) { Utilities . displayError ( getFrame ( ) , msg , title ) ; }
37569	protected Expression or ( int opPos ) throws TransformerException { return compileOperation ( new Or ( ) , opPos ) ; }
37577	private static TypeDescription queryStateDescription ( ) { return new TypeDescription . Latent ( _CHAR org . apache . cassandra . service . QueryState _CHAR , Modifier . PUBLIC | Modifier . ABSTRACT , _NULL , _NULL ) ; }
37612	private void clear ( ) { valid = _BOOL ; if ( ( listenerObjects == _NULL ) || listenerObjects . isEmpty ( ) ) { deregisterListener ( ) ; } ssm = _NULL ; if ( SMSEntry . cacheSMSEntries ) { orgConfigs . clear ( ) ; globalConfigs . clear ( ) ; } }
37618	public boolean visitTopLevelInstruction ( ElemTemplateElement elem ) { return _BOOL ; }
37637	public static void enableLogs ( ) { sLogsEnabled = _BOOL ; }
37641	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR SAVED_STORY \ _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR \ _CHAR IMAGE \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR TITLE \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR DATE \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR POSITION \ _CHAR INTEGER ) ; _CHAR ) ; }
37719	private boolean isValidItemIndex ( int index ) { return viewAdapter != _NULL && viewAdapter . getItemsCount ( ) > _NUM && ( isCyclic || index >= _NUM && index < viewAdapter . getItemsCount ( ) ) ; }
37729	public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
37738	public static String removeNonWords ( final String value ) { validate ( value , NULL_STRING_PREDICATE , NULL_STRING_MSG_SUPPLIER ) ; return value . replaceAll ( _CHAR [ ^\\ w ] + _CHAR , _CHAR _CHAR ) ; }
37743	public StringSQLRenderer append ( String s ) { sb . append ( s ) ; return this ; }
37751	private void addEntry ( ) throws Exception { TestCaseUtils . clearBackend ( _CHAR userRoot _CHAR , _CHAR dc = example , dc = com _CHAR ) ; TestCaseUtils . addEntries ( _CHAR dn : cn = Jos \ u00E9 , dc = example , dc = com _CHAR , _CHAR objectClass : person _CHAR , _CHAR cn : Jos \ u00E9 _CHAR , _CHAR sn : This \ u00AD \ u180D \ uFE00 \ u0085 \ u0085is \ u202A \ u2028a \ u0020test _CHAR ) ; }
37847	public void clearAccountExpirationTime ( ) { operations . add ( PasswordPolicyStateOperationType . CLEAR_ACCOUNT_EXPIRATION_TIME ) ; }
37851	public void enableLogging ( ) { }
37861	public boolean visitTopLevelVariableOrParamDecl ( ElemTemplateElement elem ) { return _BOOL ; }
37868	public static String decodeCharset ( String s , String charset ) { if ( s == _NULL ) { return _NULL ; } try { byte buf [ ] = s . getBytes ( ASCII_CHARSET ) ; return ( new String ( buf , _NUM , buf . length , charset ) ) ; } catch ( UnsupportedEncodingException uee ) { return s ; } }
37877	private void deleteSchedule ( String jobName ) throws SchedulerException { inMemoryScheduler . deleteJobIfPresent ( jobName ) ; persistentScheduler . deleteJobIfPresent ( jobName ) ; }
37899	public void disconnect ( ) throws IOException { socket . disconnect ( ) ; }
37903	synchronized void updatePlatformServiceGlobals ( ServiceSchemaManager scm ) throws SMSException { ServiceSchema platformSchema = scm . getGlobalSchema ( ) ; Map attrs = platformSchema . getAttributeDefaults ( ) ; platformLocale = CollectionHelper . getMapAttr ( attrs , ISAuthConstants . PLATFORM_LOCALE_ATTR ) ; if ( debug . messageEnabled ( ) ) { debug . message ( _CHAR PlatformLocale = _CHAR + platformLocale ) ; } }
37952	public void onLoginSuccess ( Map requestParamsMap , HttpServletRequest request , HttpServletResponse response , SSOToken ssoToken ) throws AuthenticationException { OAuthUtil . debugMessage ( _CHAR OAuth2PostAuthnPlugin : onLoginSuccess called _CHAR ) ; }
37969	public void init ( PrivateKey key ) { try { if ( signature != _NULL ) { signature . initSign ( key ) ; } else if ( cipher != _NULL ) { cipher . init ( Cipher . ENCRYPT_MODE , key ) ; } } catch ( InvalidKeyException e ) { throw new AlertException ( AlertProtocol . BAD_CERTIFICATE , new SSLException ( _CHAR init - invalid private key _CHAR , e ) ) ; } }
38014	public void delete ( DeleteRequest request ) throws LdapException { addControls ( request ) ; conn . getConnection ( ) . delete ( request ) ; }
38020	public static String formatBigDecimal ( BigDecimal v , Locale locale ) { NumberFormat numberFormat = NumberFormat . getInstance ( locale ) ; int scale = _NUM ; if ( v . intValue ( ) >= _NUM ) { scale = _NUM ; } return numberFormat . format ( v . setScale ( scale , RoundingMode . UP ) ) ; }
38028	@ Override public void writeRecord ( String record ) { if ( writer != _NULL ) { while ( ! stopRequested . get ( ) ) { try { queue . put ( record ) ; break ; } catch ( InterruptedException e ) { } } } }
38061	@ Override public void handleResult ( final Connection connection ) { connection . close ( ) ; notifyOnline ( ) ; }
38087	@ Override public boolean isSigned ( ) { return ( signature != _NULL ) ; }
38124	public Vector divide ( Vector vec ) { x /= vec . x ; y /= vec . y ; z /= vec . z ; return this ; }
38260	public boolean is_colinear ( PlaPointInt i_point , double tolerance_sq ) { return is_colinear ( i_point . to_float ( ) , tolerance_sq ) ; }
38303	public boolean isLockedOut ( ) { return accountLocked ; }
38310	public Builder requiredAttributes ( final String ... attributeNamesOrOIDs ) { this . requiredAttributes . addAll ( asList ( attributeNamesOrOIDs ) ) ; return this ; }
38317	public static int w ( String tag , String msg ) { return Log . w ( tag , msg ) ; }
38355	public static boolean inequal ( final String first , final String second ) { return ! Objects . equals ( first , second ) ; }
38395	protected String blanksToString ( String couldBeBlank , String subForBlanks ) { return ( ( _CHAR _CHAR . equals ( couldBeBlank ) || couldBeBlank == _NULL ) ? subForBlanks : couldBeBlank ) ; }
38423	public int querySurface ( EGLSurface eglSurface , int what ) { int [ ] value = new int [ _NUM ] ; EGL14 . eglQuerySurface ( mEGLDisplay , eglSurface , what , value , _NUM ) ; return value [ _NUM ] ; }
38424	public < T > String serialise ( T object ) { try { String value = mapper . writeValueAsString ( object ) ; return value ; } catch ( IOException e ) { throw new IllegalStateException ( MessageFormat . format ( _CHAR Failed to serialise { _NUM } : { _NUM } _CHAR , object . getClass ( ) . getSimpleName ( ) , object ) , e ) ; } }
38442	public Builder removeRequiredAttribute ( String attributeNameOrOID ) { this . requiredAttributes . remove ( attributeNameOrOID ) ; return this ; }
38492	public static String readLine ( InputStream inputStream , Charset encoding ) throws IOException { byte [ ] lineBytes = readLineBytes ( inputStream ) ; if ( lineBytes == _NULL || lineBytes . length == _NUM ) { return _NULL ; } return StringUtils . trim ( new String ( lineBytes , encoding ) ) ; }
38513	private void resetMenuOptionLayout ( ) { mFilterLayout . setVisibility ( View . GONE ) ; mPriorityLevelRadioGroup . setVisibility ( View . GONE ) ; mRecordsListView . setVisibility ( View . GONE ) ; mMenuOptionLayout . setVisibility ( View . GONE ) ; }
38544	public void handleTblDataActionHrefRequest ( RequestInvocationEvent event ) { String name = ( String ) getDisplayFieldValue ( TBL_DATA_ACTION_HREF ) ; MAPDeviceProfileViewBean vb = ( MAPDeviceProfileViewBean ) getViewBean ( MAPDeviceProfileViewBean . class ) ; passPgSessionMap ( vb ) ; vb . deviceName = name ; vb . forwardTo ( getRequestContext ( ) ) ; }
38554	@ Override public void addAll ( Collection < PdfObject > c ) { for ( PdfObject obj : c ) { add ( obj ) ; } }
38577	@ Override public void onResume ( ) { super . onResume ( ) ; if ( mAdView != _NULL ) { mAdView . resume ( ) ; } if ( ! mInterstitialAd . isLoaded ( ) ) { requestNewInterstitial ( ) ; } }
38602	public void beginDisplay ( DisplayEvent event ) throws ModelControlException { super . beginDisplay ( event ) ; Set propertyNames = ( Set ) getPageSessionAttribute ( PG_ATTR_PROPERTY_NAMES ) ; populatePropertyNameTableModel ( propertyNames ) ; }
38610	public String toString ( ) { return this . encode ( ) ; }
38629	public static UIFormLayout createFormLayout ( ) { return ( UIFormLayout ) JSFComponentFactory . createComponent ( UIFormLayout . JK_LAYOUT_FORM_LAYOUT ) ; }
38630	private void writeObject ( ObjectOutputStream stream ) throws IOException { stream . defaultWriteObject ( ) ; }
38696	protected String nullsToString ( String couldBeNull , String subForNulls ) { return ( couldBeNull == _NULL ? subForNulls : couldBeNull ) ; }
38707	public void paintImmediately ( Rectangle r ) { paintImmediately ( r . x , r . y , r . width , r . height ) ; }
38732	private void enableBle ( ) { final Intent enableIntent = new Intent ( BluetoothAdapter . ACTION_REQUEST_ENABLE ) ; startActivityForResult ( enableIntent , REQUEST_ENABLE_BT ) ; }
38765	private static void checkInitialization ( ) throws SAMLException { if ( assertionManager == _NULL ) { synchronized ( lock ) { if ( assertionManager == _NULL ) { try { assertionManager = AssertionManager . getInstance ( ) ; } catch ( SAMLException samle ) { SAMLUtils . debug . error ( _CHAR AssertionManagerImpl : Unable to get _CHAR + _CHAR AssertionManager _CHAR , samle ) ; throw ( samle ) ; } } } } }
38786	protected Expression and ( int opPos ) throws TransformerException { return compileOperation ( new And ( ) , opPos ) ; }
38801	static boolean isSet ( ) { PolicyInfo pi = policy . get ( ) ; return pi . policy != _NULL && pi . initialized == _BOOL ; }
38811	public static final Builder builder ( ) { return new Builder ( ) ; }
38816	public void printlnMessage ( String str ) { buff . append ( str ) . append ( _CHAR \ n _CHAR ) ; }
38817	protected void installListeners ( ) { mouseInputListener = createMouseInputListener ( ) ; header . addMouseListener ( mouseInputListener ) ; header . addMouseMotionListener ( mouseInputListener ) ; header . addFocusListener ( focusListener ) ; }
38865	public void removeInstance ( String instanceName ) throws SMSException , SSOException { getInstance ( instanceName ) . delete ( ) ; }
38868	public void endDocument ( ) throws SAXException { if ( contentHandler != _NULL ) { contentHandler . endDocument ( ) ; } }
38875	public void constrainViewportRect ( float left , float top , float right , float bottom ) { viewportRect . set ( left , top , right , bottom ) ; }
38884	public boolean isMutable ( ) { return mutable ; }
38891	public NewID createNewID ( String value ) throws SAML2Exception { Object obj = SAML2SDKUtils . getObjectInstance ( SAML2SDKUtils . NEWID , value ) ; if ( obj == _NULL ) { return new NewIDImpl ( value ) ; } else { return ( NewID ) obj ; } }
38918	public static UnbindRequest newUnbindRequest ( ) { return new UnbindRequestImpl ( ) ; }
38963	private void stopTimer ( ) { if ( taskId != - _NUM ) { plugin . getServer ( ) . getScheduler ( ) . cancelTask ( taskId ) ; taskId =- _NUM ; } }
38996	public ProductService deleteProduct ( String productId , Handler < AsyncResult < Void >> resultHandler ) { delegate . deleteProduct ( productId , resultHandler ) ; return this ; }
39004	public JSONStringer endArray ( ) throws JSONException { return close ( Scope . EMPTY_ARRAY , Scope . NONEMPTY_ARRAY , _CHAR ] _CHAR ) ; }
39046	@ Override public JSONObject toJSONObject ( ) throws JSONException { JSONObject jo = super . toJSONObject ( ) ; if ( policyName != _NULL ) { jo . put ( _CHAR policyName _CHAR , policyName ) ; } return jo ; }
39059	public static void v ( String tag , String msg ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } Log . v ( tag , msg ) ; }
39060	public int code ( ) { return code ; }
39077	private void doSignalAll ( Node first ) { lastWaiter = firstWaiter = _NULL ; do { Node next = first . nextWaiter ; first . nextWaiter = _NULL ; transferForSignal ( first ) ; first = next ; } while ( first != _NULL ) ; }
39092	public boolean isEmailEnabled ( ) { return emailEnabled ; }
39094	public TagField createField ( VorbisCommentFieldKey vorbisCommentFieldKey , String value ) throws KeyNotFoundException , FieldDataInvalidException { if ( vorbisCommentFieldKey . equals ( VorbisCommentFieldKey . COVERART ) ) { throw new UnsupportedOperationException ( ErrorMessage . ARTWORK_CANNOT_BE_CREATED_WITH_THIS_METHOD . getMsg ( ) ) ; } return tag . createField ( vorbisCommentFieldKey , value ) ; }
39127	public final void run ( Runnable task ) throws ThreadPoolException { try { lock . lock ( ) ; taskList . add ( task ) ; hasTasks . signal ( ) ; } finally { lock . unlock ( ) ; } }
39131	private static boolean replace ( JsonValue subject , PatchOperation operation ) throws BadRequestException { if ( ! operation . isReplace ( ) ) { throw new BadRequestException ( _CHAR Operation is an _CHAR + operation . getOperation ( ) + _CHAR , not a replace ! _CHAR ) ; } if ( ! operation . getValue ( ) . isNull ( ) ) { subject . putPermissive ( operation . getField ( ) , operation . getValue ( ) . getObject ( ) ) ; } return _BOOL ; }
39146	public static String serializeToString ( Object object ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oos = new ObjectOutputStream ( baos ) ; oos . writeObject ( object ) ; oos . close ( ) ; return Base64 . encode ( baos . toByteArray ( ) ) ; }
39197	public JsonValue jsonValueOf ( SessionInfo session ) { return json ( object ( field ( HEADER_USER_ID , session . getProperties ( ) . get ( SESSION_INFO_USER_ID ) ) , field ( HEADER_TIME_REMAINING , TimeUnit . SECONDS . toMinutes ( session . getTimeLeft ( ) ) ) ) ) ; }
39214	public static JTextField createLongTextField ( ) { JTextField tf = createTextField ( ) ; tf . setColumns ( _NUM ) ; return tf ; }
39229	public void close ( ) throws IOException { out . close ( ) ; }
39296	private long monthRange ( ) { ValueRange startRange = chrono . range ( MONTH_OF_YEAR ) ; if ( startRange . isFixed ( ) && startRange . isIntValue ( ) ) { return startRange . getMaximum ( ) - startRange . getMinimum ( ) + _NUM ; } return - _NUM ; }
39316	public void relayoutToCompressAndAlign ( ) { this . relayoutToCompress ( ) ; this . relayoutToAlign ( ) ; }
39332	public InputSource resolveEntity ( String publicId , String systemId ) throws SAXException , IOException { if ( m_entityResolver != _NULL ) { return m_entityResolver . resolveEntity ( publicId , systemId ) ; } else { return _NULL ; } }
39375	public void doWrite ( ByteChunk chunk ) throws IOException { outputBuffer . doWrite ( chunk ) ; contentWritten += chunk . getLength ( ) ; }
39423	private static ApplicationType newType ( final String name ) throws IllegalAccessException , InstantiationException { return new ApplicationType ( name , new HashMap < String , Boolean > ( TYPE_ACTIONS ) , DumbSearchIndex . class , DumbSaveIndex . class , DumbResourceName . class ) ; }
39469	public static void gc ( ) { memoryMXBean . gc ( ) ; }
39494	public void remove ( ) throws UnsupportedOperationException { throw new UnsupportedOperationException ( _CHAR Removing headers is not supported . '' ) ; }
39541	public void addFile ( String filename ) { synchronized ( files ) { if ( ! files . contains ( filename ) ) { files . add ( filename ) ; } } }
39554	public void addReferralAuthenticationListener ( ReferralAuthenticationListener listener ) { if ( listeners == _NULL ) { listeners = new ArrayList < > ( ) ; } listeners . add ( listener ) ; }
39561	public void addJKTableColumn ( final JKTableColumn col ) { col . setIndex ( this . tableColumns . size ( ) ) ; this . tableColumns . add ( col ) ; this . visibilityManager . refreshVisibility ( ) ; fireTableStructureChanged ( ) ; }
39572	private void initAuthConfigGlobalSettings ( ) throws Exception { ServiceSchemaManager scm = new ServiceSchemaManager ( ISAuthConstants . AUTHCONFIG_SERVICE_NAME , ssoAuthSession ) ; updateAuthConfigGlobals ( scm ) ; new AuthConfigMonitor ( scm ) ; }
39574	@ Override public String toString ( ) { return value ; }
39578	@ Override public void onFailure ( Throwable t ) { callback . onFailure ( t ) ; }
39604	public static String downloadString ( String url , int readTimeout , int connectionTimeout ) throws MalformedURLException { return downloadString ( new URL ( url ) , _NULL , readTimeout , connectionTimeout , _CHAR utf - _NUM _CHAR ) ; }
39612	public boolean isRequiresAuthentication ( ) { return requiresAuthentication ; }
39634	public void removeConnectionProperty ( final String name ) { connectionProperties . remove ( name ) ; }
39643	private synchronized void stopRSHeartBeatMonitoring ( ) { if ( heartbeatMonitor != _NULL ) { heartbeatMonitor . shutdown ( ) ; heartbeatMonitor = _NULL ; } }
39658	private void displayError ( LocalizableMessage msg , LocalizableMessage title ) { Utilities . displayError ( parent , msg , title ) ; toFront ( ) ; }
39685	public boolean boolValue ( ) { if ( type == BOOLEAN ) return boolValue ; else return longValue != _NUM ; }
39691	void removeEQ ( Object o ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { for ( Iterator < E > it = q . iterator ( ) ; it . hasNext ( ) ; ) { if ( o == it . next ( ) ) { it . remove ( ) ; break ; } } } finally { lock . unlock ( ) ; } }
39709	@ Override public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
39719	void repaintCurrentValue ( ) { Rectangle r = rectangleForCurrentValue ( ) ; comboBox . repaint ( r . x , r . y , r . width , r . height ) ; }
39739	public static void f ( String tag , String msg ) { if ( sLevel > LEVEL_FATAL ) { return ; } Log . wtf ( tag , msg ) ; }
39754	public static void mySetSystemScope ( IdentityScope scope ) { IdentityScope . setSystemScope ( scope ) ; }
39757	@ Override public void save ( java . io . ObjectOutputStream p_object_stream ) { super . save ( p_object_stream ) ; manual_rule_window . save ( p_object_stream ) ; }
39768	protected void freeBuffers ( ) { CryptoInputStream . freeDirectBuffer ( inBuffer ) ; CryptoInputStream . freeDirectBuffer ( outBuffer ) ; }
39769	public void startDocument ( ) throws SAXException { if ( contentHandler != _NULL ) { contentHandler . startDocument ( ) ; } }
39778	public JKJsfContext createJsfContext ( ) { return new JKJsfContext ( ) ; }
39800	@ Override public String toJson ( ) { GsonBuilder gson = new GsonBuilder ( ) ; gson . registerTypeAdapter ( Position . class , new PositionSerializer ( ) ) ; return gson . create ( ) . toJson ( this ) ; }
39845	protected boolean checkParam ( final String reqParam ) throws ConnectorException { if ( reqParam == _NULL || reqParam . equals ( _CHAR _CHAR ) ) { return _BOOL ; } if ( Pattern . compile ( Constants . INVALID_PATH_REGEX ) . matcher ( reqParam ) . find ( ) ) { this . errorCode = Constants . Errors . CKFINDER_CONNECTOR_ERROR_INVALID_NAME ; return _BOOL ; } return _BOOL ; }
39870	public synchronized void cancel ( ) throws IllegalStateException { Bukkit . getScheduler ( ) . cancelTask ( getTaskId ( ) ) ; }
39908	public static String byteArrayToString ( byte [ ] bytes ) { char chars [ ] = new char [ bytes . length ] ; for ( int i = _NUM ; i < bytes . length ; i ++ ) { chars [ i ] = ( char ) bytes [ i ] ; } return new String ( chars ) ; }
39928	protected boolean isError ( final int code ) { switch ( code ) { case HTTP_BAD_REQUEST : case HTTP_UNAUTHORIZED : case HTTP_FORBIDDEN : case HTTP_NOT_FOUND : case HTTP_CONFLICT : case HTTP_GONE : case HTTP_UNPROCESSABLE_ENTITY : case HTTP_INTERNAL_ERROR : return _BOOL ; default : return _BOOL ; } }
39972	@ DataProvider ( name = _CHAR dataForAttributeDescriptions _CHAR ) public Object [ ] [ ] dataForAttributeDescriptions ( ) { return new Object [ ] [ ] { { _CHAR cn _CHAR } , { _CHAR CN _CHAR } , { _CHAR objectClass _CHAR } , { _CHAR cn ; foo _CHAR } , { _CHAR cn ; FOO _CHAR } , { _CHAR cn ; bar _CHAR } , { _CHAR cn ; BAR _CHAR } , { _CHAR cn ; foo ; bar _CHAR } , { _CHAR cn ; FOO ; bar _CHAR } } ; }
39997	public boolean hasComment ( ) { return comment != _NULL ; }
40001	public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
40012	public void close ( ) throws IOException { out . close ( ) ; }
40058	public long startTimeInMilliseconds ( ) { return startTimeInMilliseconds ; }
40062	public void cancel_state ( ) { if ( board_is_read_only ) return ; StateInteractive new_state = interactive_state . cancel ( ) ; if ( new_state != interactive_state ) { set_interactive_state ( new_state ) ; repaint ( ) ; } }
40092	public static void writeManager ( PrintWriter writer , Object [ ] args , int mode ) { if ( mode == _NUM ) { writer . print ( MessageFormat . format ( Constants . MANAGER_SECTION , args ) ) ; } }
40106	public void visitInsn ( int opcode ) { if ( mv != _NULL ) { mv . visitInsn ( opcode ) ; } }
40132	void processMonitorMsg ( MonitorMsg msg , ServerHandler sender ) { domainMonitor . receiveMonitorDataResponse ( msg , sender . getServerId ( ) ) ; }
40144	void pushNewNamespaceSupport ( ) { m_nsSupportStack . push ( new NamespaceSupport2 ( ) ) ; }
40173	public int position ( ) { return pos ; }
40179	public String to_string ( ) { return name ; }
40217	public static boolean isReservedDomainName ( String domainName ) { if ( reservedDomainNames == _NULL ) { initialize ( ) ; } return Arrays . binarySearch ( reservedDomainNames , domainName ) >= _NUM ; }
40222	@ SuppressWarnings ( _CHAR unused _CHAR ) public static < T > void swapArrayPosition ( T [ ] source , int first , int second ) { T temp = source [ first ] ; source [ first ] = source [ second ] ; source [ second ] = temp ; }
40288	public void requestAccountExpirationTime ( ) { operations . add ( PasswordPolicyStateOperationType . GET_ACCOUNT_EXPIRATION_TIME ) ; }
40298	private static void logEncodingMessageError ( String messageType , DN entryDN , Exception exception ) { logger . traceException ( exception ) ; logger . error ( LocalizableMessage . raw ( _CHAR An exception was encountered while trying to encode a replication '' + messageType + '' message for entry \ '' '' + entryDN + '' \ '' into an External Change Log entry : '' + exception . getMessage ( ) ) ) ; }
40346	private void writeObject ( java . io . ObjectOutputStream s ) throws java . io . IOException { s . writeObject ( mySyntax ) ; s . writeInt ( size ( ) ) ; Enumeration < String > comps = getAll ( ) ; while ( comps . hasMoreElements ( ) ) { s . writeObject ( comps . nextElement ( ) ) ; } }
40353	@ Override public boolean isEmpty ( ) { return tail == _NULL ; }
40355	public void displayError ( LocalizableMessage msg , LocalizableMessage title ) { if ( isCli ( ) ) { System . err . println ( msg ) ; } else { getDialog ( ) . displayError ( msg , title ) ; } }
40430	public void characters ( char ch [ ] , int start , int length ) throws SAXException { if ( contentHandler != _NULL ) { contentHandler . characters ( ch , start , length ) ; } }
40470	public static void println ( Object o ) { if ( o instanceof char [ ] ) { System . out . println ( ( char [ ] ) o ) ; } else { System . out . println ( o ) ; } }
40526	public void handleButton3Request ( RequestInvocationEvent event ) { CloseWindowViewBean vb = ( CloseWindowViewBean ) getViewBean ( CloseWindowViewBean . class ) ; vb . forwardTo ( getRequestContext ( ) ) ; }
40536	public boolean isBorderOpaque ( ) { return _BOOL ; }
40587	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR PICTURE_INFO \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
40600	public void addConfigChangeListener ( ConfigChangeListener listener ) { configListeners . add ( listener ) ; }
40612	protected void onTakeRouter ( R router ) { }
40616	public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
40620	public final void popPredicateRoot ( ) { m_predicateRoots . popQuick ( ) ; }
40813	public void deleteDiscoEntries ( Integer [ ] array ) { for ( int i = ( array . length - _NUM ) ; i >= _NUM ; -- i ) { discoData . remove ( array [ i ] . intValue ( ) ) ; } }
40815	public Builder removeRequiredAttribute ( final String nameOrOID ) { this . requiredAttributes . remove ( nameOrOID ) ; return this ; }
40868	private void findSeparator ( ) { pos = MultipartStream . this . findSeparator ( ) ; if ( pos == - _NUM ) { if ( tail - head > keepRegion ) { pad = keepRegion ; } else { pad = tail - head ; } } }
40877	public static MessageBytes newInstance ( ) { return factory . newInstance ( ) ; }
40921	void dump ( OutputStream out , int length ) throws IOException { if ( count < mark + length ) throw new IOException ( _CHAR short DER value ( encode ) _CHAR ) ; out . write ( buf , mark , length ) ; }
41018	public void updateWriteTime ( long time ) { if ( time > _NUM && time < writeTimeMin ) { writeTimeMin = time ; } if ( time > writeTimeMax ) { writeTimeMax = time ; } writeCumulativeCount += time ; writeTimeAverage = writeCumulativeCount / totalWrites ; }
41039	public boolean hasPort ( ) { return ( getSentBy ( ) ) . hasPort ( ) ; }
41069	public boolean visitTopLevelInstruction ( ElemTemplateElement elem ) { int type = elem . getXSLToken ( ) ; switch ( type ) { case Constants . ELEMNAME_TEMPLATE : return visitInstruction ( elem ) ; default : return _BOOL ; } }
41155	private void doSignalAll ( Node first ) { lastWaiter = firstWaiter = _NULL ; do { Node next = first . nextWaiter ; first . nextWaiter = _NULL ; transferForSignal ( first ) ; first = next ; } while ( first != _NULL ) ; }
41198	public static boolean isConnectedFast ( Context context ) { NetworkInfo info = Connectivity . getNetworkInfo ( context ) ; return ( info != _NULL && info . isConnected ( ) && Connectivity . isConnectionFast ( info . getType ( ) , info . getSubtype ( ) ) ) ; }
41211	public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws SAXException { if ( contentHandler != _NULL ) { contentHandler . ignorableWhitespace ( ch , start , length ) ; } }
41246	public static int readUint16 ( DataInput di ) throws IOException { final byte [ ] buf = { _NUM , _NUM , _NUM , _NUM } ; di . readFully ( buf , _NUM , _NUM ) ; final int i = ByteBuffer . wrap ( buf ) . getInt ( ) ; return i ; }
41259	public boolean isMutable ( ) { return isMutable ; }
41298	private void doSignalAll ( Node first ) { lastWaiter = firstWaiter = _NULL ; do { Node next = first . nextWaiter ; first . nextWaiter = _NULL ; transferForSignal ( first ) ; first = next ; } while ( first != _NULL ) ; }
41305	public void printlnMessage ( String str ) { buff . append ( str ) . append ( _CHAR \ n _CHAR ) ; }
41324	public boolean isSuspended ( ) { return this . suspended ; }
41369	public void checkForLocal ( ) { isLocal = _BOOL ; }
41402	public boolean canOverwriteCurrentInstall ( ) { return canOverwriteCurrentInstall ; }
41414	protected void createTabModel ( ) { if ( tabModel == _NULL ) { String realmName = ( String ) getPageSessionAttribute ( AMAdminConstants . CURRENT_PROFILE ) ; if ( realmName != _NULL ) { AMViewConfig amconfig = AMViewConfig . getInstance ( ) ; tabModel = amconfig . getTabsModel ( realmName , getRequestContext ( ) . getRequest ( ) ) ; registerChild ( TAB_COMMON , CCTabs . class ) ; } } }
41437	public static ValueAnimator dampingValueAnimator ( long duration ) { ValueAnimator valueAnimator = ValueAnimator . ofFloat ( _NUM , _NUM ) ; valueAnimator . setDuration ( duration ) ; valueAnimator . setInterpolator ( new DampingInterpolator ( ) ) ; return valueAnimator ; }
41441	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR GREEN_WATCHED_VIDEO \ _CHAR ( _CHAR + _CHAR \ _CHAR VIDEOYOUKUVID \ _CHAR TEXT PRIMARY KEY NOT NULL , _CHAR + _CHAR \ _CHAR VIDEOBACKGROUND \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR VIDEOTITLE \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR VIDEOWATCHTIME \ _CHAR INTEGER , _CHAR + _CHAR \ _CHAR VIDEODURATION \ _CHAR INTEGER , _CHAR + _CHAR \ _CHAR VIDEOPLAYTIME \ _CHAR INTEGER , _CHAR + _CHAR \ _CHAR VIDEO_ENDED \ _CHAR INTEGER ) ; _CHAR ) ; }
41460	public final void entityReference ( String name ) throws org . xml . sax . SAXException { try { final java . io . Writer writer = m_writer ; writer . write ( _CHAR ) ; writer . write ( name ) ; writer . write ( _CHAR ) ; } catch ( IOException e ) { throw new SAXException ( e ) ; } }
41508	public int markInputPosition ( ) { return ptr ; }
41512	public static Feature fromGeometry ( Geometry geometry ) { return new Feature ( geometry , new JsonObject ( ) , _NULL ) ; }
41519	public Observable < Void > deleteProductObservable ( String productId ) { io . vertx . rx . java . ObservableFuture < Void > resultHandler = io . vertx . rx . java . RxHelper . observableFuture ( ) ; deleteProduct ( productId , resultHandler . toHandler ( ) ) ; return resultHandler ; }
41532	public static Feature fromGeometry ( Geometry geometry , JsonObject properties , String id ) { return new Feature ( geometry , properties , id ) ; }
41612	public static boolean isConnected ( Context context ) { NetworkInfo info = Connectivity . getNetworkInfo ( context ) ; return ( info != _NULL && info . isConnected ( ) ) ; }
41627	public Builder optionalAttributes ( final Collection < String > nameOrOIDs ) { this . optionalAttributes . addAll ( nameOrOIDs ) ; return this ; }
41676	public boolean isMutable ( ) { return mutable ; }
41712	public static boolean isTimesEqaualed ( Date time1 , Date time2 ) { return formatTime ( time1 ) . equals ( formatTime ( time2 ) ) ; }
41730	public void writeAttributes ( ObjectOutputStream out , AttributeSet a ) throws IOException { writeAttributeSet ( out , a ) ; }
41737	public void changePassword ( String oldPassword , String newPassword ) throws IdRepoException , SSOException { IdServices idServices = IdServicesFactory . getDataStoreServices ( ) ; idServices . changePassword ( token , type , name , oldPassword , newPassword , orgName , getDN ( ) ) ; }
41802	public void clearPasswordResetState ( ) { operations . add ( PasswordPolicyStateOperationType . CLEAR_PASSWORD_RESET_STATE ) ; }
41816	public static JPasswordField createPasswordField ( int cols ) { JPasswordField pf = createPasswordField ( ) ; pf . setColumns ( cols ) ; return pf ; }
41842	static int checkBufferSize ( CryptoCipher cipher , int bufferSize ) { Utils . checkArgument ( bufferSize >= CryptoInputStream . MIN_BUFFER_SIZE , _CHAR Minimum value of buffer size is _CHAR + CryptoInputStream . MIN_BUFFER_SIZE + _CHAR . _CHAR ) ; return bufferSize - bufferSize % cipher . getBlockSize ( ) ; }
41906	public static boolean isAMLoggingMode ( ) { return isAMLog ; }
41957	private void invokeInsn ( final int opcode , final Type type , final Method method , final boolean itf ) { String owner = type . getSort ( ) == Type . ARRAY ? type . getDescriptor ( ) : type . getInternalName ( ) ; mv . visitMethodInsn ( opcode , owner , method . getName ( ) , method . getDescriptor ( ) , itf ) ; }
42050	public void schemaChanged ( String serviceName , String version ) { if ( debug . messageEnabled ( ) ) { debug . message ( _CHAR IdRepoAttributeValidatorManager . schemaChanged : _CHAR + _CHAR Service name = _CHAR + serviceName ) ; } synchronized ( validatorCache ) { validatorCache . clear ( ) ; } }
42071	public void notationDecl ( String name , String publicId , String systemId ) throws SAXException { if ( dtdHandler != _NULL ) { dtdHandler . notationDecl ( name , publicId , systemId ) ; } }
42076	public boolean willExpire ( ) { return willExpireFlag ; }
42108	public void characters ( char ch [ ] , int start , int length ) throws SAXException { if ( documentHandler != _NULL ) documentHandler . characters ( ch , start , length ) ; }
42128	public Future < Long > card ( JobState state ) { Future < Long > future = Future . future ( ) ; jobService . card ( state , future . completer ( ) ) ; return future ; }
42192	public boolean boolValue ( ) { if ( type == BOOLEAN ) return boolValue ; else return longValue != _NUM ; }
42202	public void addLogEntry ( String logEnry ) { mLogcatData . add ( logEnry ) ; addFilterLogcatEntry ( logEnry ) ; notifyDataSetChanged ( ) ; }
42213	public void addListener ( ConfigurationListener l ) { serviceListeners . add ( Pair . < ConfigurationListener , Predicate < String >> of ( l , _NULL ) ) ; }
42224	public static HtmlOutputLabel createLabel ( final String labelId ) { final HtmlOutputLabel label = ( HtmlOutputLabel ) JSFComponentFactory . createComponent ( OutputLabel . COMPONENT_TYPE ) ; label . setValueExpression ( TagAttributeConstants . VALUE , JSFComponentFactory . createLabelValueExpression ( labelId ) ) ; return label ; }
42268	private String stripTags ( String content ) { return Jsoup . parse ( content ) . text ( ) ; }
42338	public void writeModifyResult ( final int messageID , final Result result ) throws IOException { logger . trace ( _CHAR ENCODE LDAP MODIFY RESULT ( messageID = % d , result = % s ) _CHAR , messageID , result ) ; writeMessageHeader ( messageID ) ; { writeResultHeader ( LDAP . OP_TYPE_MODIFY_RESPONSE , result ) ; writeResultFooter ( writer ) ; } writeMessageFooter ( result . getControls ( ) ) ; }
42406	@ Override public MatchStrength hasFormat ( InputAccessor acc ) throws IOException { return MatchStrength . INCONCLUSIVE ; }
42416	public void endElement ( String uri , String localName , String qName ) throws SAXException { if ( DEBUG ) System . out . println ( _CHAR TransformerHandlerImpl # endElement : _CHAR + qName ) ; if ( m_contentHandler != _NULL ) { m_contentHandler . endElement ( uri , localName , qName ) ; } }
42478	public void removeUsers ( Set users ) throws AMException , SSOException { SSOTokenManager . getInstance ( ) . validateToken ( super . token ) ; dsServices . modifyMemberShip ( super . token , users , super . entryDN , ROLE , REMOVE_MEMBER ) ; }
42487	public void clearAuthenticationFailureTimes ( ) { operations . add ( PasswordPolicyStateOperationType . CLEAR_AUTHENTICATION_FAILURE_TIMES ) ; }
42513	public void entityReference ( String name ) throws org . xml . sax . SAXException { if ( m_tracer != _NULL ) super . fireEntityReference ( name ) ; }
42518	Entry nextEntry ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( ) ; } final Entry entry = nextEntry . toEntry ( ) ; nextEntry = _NULL ; return entry ; }
42531	public void update ( Client client , OAuth2Request request ) throws InvalidClientMetadata , UnauthorizedClientException { delete ( client . getClientID ( ) , request ) ; create ( client , request ) ; }
42551	public void skippedEntity ( String name ) throws SAXException { if ( DEBUG ) System . out . println ( _CHAR TransformerHandlerImpl # skippedEntity : _CHAR + name ) ; if ( m_contentHandler != _NULL ) { m_contentHandler . skippedEntity ( name ) ; } }
42581	@ SuppressWarnings ( _CHAR UnusedDeclaration _CHAR ) public static String downloadString ( String url ) throws MalformedURLException { return downloadString ( new URL ( url ) ) ; }
42587	@ BeforeClass public void disableLogging ( ) { TestCaseUtils . setDefaultLogLevel ( Level . SEVERE ) ; }
42590	BufferedReader newReader ( File file ) throws FileNotFoundException { return new BufferedReader ( new InputStreamReader ( new FileInputStream ( file ) , Charset . forName ( _CHAR UTF - _NUM _CHAR ) ) ) ; }
42595	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR SAVED_TOP_STORY \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
42605	public void writeAddRequest ( final int messageID , final AddRequest request ) throws IOException { logger . trace ( _CHAR ENCODE LDAP ADD REQUEST ( messageID = % d , request = % s ) _CHAR , messageID , request ) ; writeMessageHeader ( messageID ) ; { LDAP . writeEntry ( writer , LDAP . OP_TYPE_ADD_REQUEST , request ) ; } writeMessageFooter ( request . getControls ( ) ) ; }
42633	public static int countAll ( ) { return getPersistence ( ) . countAll ( ) ; }
42662	public R visitDN ( DNPropertyDefinition pd , P p ) { return visitUnknown ( pd , p ) ; }
42704	public void deleteACI ( ACI aci ) throws AccessRightsException , UMSException { Attr attr = new Attr ( ACI . ACI , aci . getACIText ( ) ) ; modify ( attr , ModificationType . DELETE ) ; save ( ) ; }
42728	@ RequestMapping ( value = _CHAR / json _CHAR , method = RequestMethod . GET , produces = MediaTypes . JSON_UTF_8 ) public User json ( String name ) { User user = new User ( ) ; user . setName ( name ) ; user . setAge ( _NUM ) ; return user ; }
42732	public boolean isMutable ( ) { return mutable ; }
42738	public static ResourceIDElement createResourceIDElement ( String resourceID ) throws JAXBException , IDPPException { if ( resourceID == _NULL ) { debug . error ( _CHAR IDPPUtils : ResourceIDType : Resource id is _NULL _CHAR ) ; throw new IDPPException ( _CHAR ResourceID is _NULL _CHAR ) ; } ResourceIDElement resourceIDElement = idppFactory . createResourceIDElement ( ) ; resourceIDElement . setValue ( resourceID ) ; return resourceIDElement ; }
42757	public boolean elementAvailable ( String ns , String elemName ) throws javax . xml . transform . TransformerException { return _BOOL ; }
42803	public void packAndShow ( ) { pack ( ) ; int minWidth = ( int ) getPreferredSize ( ) . getWidth ( ) ; int minHeight = ( int ) getPreferredSize ( ) . getHeight ( ) ; addComponentListener ( new MinimumSizeComponentListener ( this , minWidth , minHeight ) ) ; Utilities . centerOnComponent ( this , parent ) ; setVisible ( _BOOL ) ; }
42818	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR _CHAR ( _CHAR + _CHAR _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR TEXT ) ; _CHAR ) ; db . execSQL ( _CHAR CREATE INDEX _CHAR + constraint + _CHAR IDX_USER_ID ON USER _CHAR + _CHAR ( ID ) ; _CHAR ) ; }
42845	@ Override public BlockVector clone ( ) { return ( BlockVector ) super . clone ( ) ; }
42852	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR GREEN_NEWS \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
42869	public boolean beginHasButtonDisplay ( ChildDisplayEvent event ) { return ( buttonOptions != _NULL ) && ( buttonOptions . length > _NUM ) ; }
42931	public long longValue ( ) { return longValue ; }
42967	public static void main ( String [ ] args ) { try { WebBrowserErrorDialog dlg = new WebBrowserErrorDialog ( new JFrame ( ) , new WebBrowserException ( _CHAR http : // opendj . org '' , LocalizableMessage . raw ( '' toto '' ) , null ) ) ; dlg . packAndShow ( ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } }
43011	public void onLoginFailure ( Map requestParamsMap , HttpServletRequest req , HttpServletResponse res ) throws AuthenticationException { debug . message ( _CHAR ReplayPasswd . onLoginFailure : called _CHAR ) ; }
43021	private void navigateToConversationsActivity ( ) { startActivity ( this . conversationsIntent ) ; }
43043	public void skippedEntity ( String name ) throws SAXException { if ( contentHandler != _NULL ) { contentHandler . skippedEntity ( name ) ; } }
43091	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR GREEN_UPDATE \ _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR \ _CHAR UPDATELISTJSON \ _CHAR TEXT ) ; _CHAR ) ; }
43206	public void debug ( String msg ) { print ( _CHAR [ DEBUG ] _CHAR + msg , out . debug ) ; }
43249	private void wrap ( StringBuilder buffer , LocalizableMessage text ) { indentAndWrap ( buffer , _CHAR _CHAR , text ) ; }
43284	private void updateSVGArrContent ( String [ ] SVGData ) { for ( int i = _NUM ; i < SVGData . length ; i ++ ) super . getSpriteBoundsArray ( ) [ i ] . setContent ( SVGData [ i ] ) ; }
43290	public static void startServer ( ) throws Exception { LDAPServer . getInstance ( ) . start ( ) ; }
43297	public void removeParameters ( ) { parameters = new Vector ( ) ; }
43304	private boolean isRecordingCardUnmount ( Intent intent ) { String sdcard = FmRadioService . getRecordingSdcard ( ) ; String unmountSDCard = intent . getData ( ) . toString ( ) ; Log . d ( TAG , _CHAR unmount sd card file path : _CHAR + unmountSDCard ) ; return unmountSDCard . equalsIgnoreCase ( _CHAR file : // '' + sdcard ) ? true : false ; }
43374	public static int e ( String tag , String msg ) { return Log . e ( tag , msg ) ; }
43408	private static void writeUntouchedImage ( final File sourceFile , final File destFile ) throws IOException { FileInputStream fileIS = new FileInputStream ( sourceFile ) ; writeUntouchedImage ( fileIS , destFile ) ; }
43515	private void clearProjectLookup ( ) { if ( projectLookup != _NULL ) { Collection < ? extends Project > projects = projectLookup . lookupAll ( Project . class ) ; for ( Project project : projects ) { content . remove ( project ) ; } } }
43517	public boolean isAllowed ( ) { return allowed ; }
43523	public static MappedMember findMethodOverride ( MappedMember mm ) { if ( mm . doesOverride ( ) ) { for ( MappedMember mm2 : mm . getOverrides ( ) ) { return findMethodOverride ( mm2 ) ; } } return mm ; }
43530	public boolean beginResetPageDisplay ( ChildDisplayEvent event ) { PWResetUserValidationModel model = ( PWResetUserValidationModel ) getModel ( ) ; return isPWResetEnabled ( ) && model . isValidRealm ( ) ; }
43536	public boolean isEmailEnabled ( ) { return emailEnabled ; }
43607	private void createRenamedFileNode ( final Element rootElement ) { Element element = creator . getDocument ( ) . createElement ( _CHAR RenamedFile _CHAR ) ; element . setAttribute ( _CHAR name _CHAR , this . fileName ) ; if ( renamed ) { element . setAttribute ( _CHAR newName _CHAR , this . newFileName ) ; } rootElement . appendChild ( element ) ; }
43645	public void updateTrigger ( Trigger trigger ) throws JobPersistenceException { serialized = RepoJobStoreUtils . serialize ( trigger ) ; }
43684	public void cancelEditing ( JTree tree ) { if ( editingComponent != _NULL ) { completeEditing ( _BOOL , _BOOL , _BOOL ) ; } }
43685	public BaseViewHolder linkify ( int viewId ) { TextView view = getView ( viewId ) ; Linkify . addLinks ( view , Linkify . ALL ) ; return this ; }
43694	public static String convertFromBoolean ( boolean value ) { return value ? XMPConst . TRUESTR : XMPConst . FALSESTR ; }
43715	private GeneralMonitoringRightPanel createBrowserRightPanel ( ) { return new GeneralMonitoringRightPanel ( ) ; }
43725	private boolean removeIndexEntry ( ServiceType resourceType , String resourceName , String policyName ) throws PolicyException { ResourceIndex resourceIndex = ( ResourceIndex ) resourceIndices . get ( resourceType . getName ( ) ) ; if ( resourceIndex == _NULL ) { resourceIndex = refreshResourceIndexFromDataStore ( resourceType ) ; } return resourceIndex . removeIndexEntry ( resourceName , policyName ) ; }
43743	private void highLightMarker ( Marker marker ) { marker . setIcon ( BitmapDescriptorFactory . defaultMarker ( BitmapDescriptorFactory . HUE_AZURE ) ) ; this . selectedMarker = marker ; }
43753	public Process executeAsync ( final CommandLine command , Map < String , String > environment ) throws IOException { if ( workingDirectory != _NULL && ! workingDirectory . exists ( ) ) { throw new IOException ( workingDirectory + _CHAR does n _CHAR_CHAR ) ; } return executeInternal ( command , environment , workingDirectory , streamHandler , null ) ; }
43764	protected void viewChange ( final Member [ ] view ) { }
43784	private void updateChildClip ( View child , int height , int clipInset ) { mClipRect . set ( _NUM , clipInset , child . getWidth ( ) , height ) ; if ( Define . SDK_INT >= _NUM ) { child . setClipBounds ( mClipRect ) ; } }
43809	public void onLoop ( View v ) { mLooping = mBtnLoop . toggleState ( ) ; mMP4Broadcaster . setLooping ( mLooping ) ; if ( mMediaPlayer != _NULL ) mMediaPlayer . setLooping ( mLooping ) ; }
43823	public static BufferedImage resizeImage ( Image image ) { BufferedImage result = new BufferedImage ( _NUM , _NUM , BufferedImage . TYPE_INT_ARGB ) ; Graphics2D graphics = result . createGraphics ( ) ; graphics . drawImage ( image , _NUM , _NUM , _NUM , _NUM , _NULL ) ; graphics . dispose ( ) ; return result ; }
43846	public static TransactionIdControl newControl ( final String transactionId ) { Reject . ifNull ( transactionId ) ; return new TransactionIdControl ( transactionId ) ; }
43909	public void writeCompareResult ( final int messageID , final CompareResult result ) throws IOException { logger . trace ( _CHAR ENCODE LDAP COMPARE RESULT ( messageID = % d , result = % s ) _CHAR , messageID , result ) ; writeMessageHeader ( messageID ) ; { writeResultHeader ( LDAP . OP_TYPE_COMPARE_RESPONSE , result ) ; writeResultFooter ( writer ) ; } writeMessageFooter ( result . getControls ( ) ) ; }
43910	public static byte [ ] genKey ( byte [ ] keyBytes ) { byte [ ] key = new byte [ SECRET_KEY_SIZE_BYTES ] ; for ( int i = _NUM ; i < keyBytes . length ; i ++ ) { key [ i % SECRET_KEY_SIZE_BYTES ] ^= keyBytes [ i ] ; } return key ; }
43920	void refreshFinish ( String instanceId ) { if ( ! isDomThread ( ) ) { throw new WXRuntimeException ( _CHAR RefreshFinish operation must be done in dom thread _CHAR ) ; } WXDomStatement statement = mDomRegistries . get ( instanceId ) ; if ( statement == _NULL ) { return ; } statement . refreshFinish ( ) ; }
43924	@ DataProvider public Object [ ] [ ] invalidFilters ( ) { return new Object [ ] [ ] { { _NULL } , { _CHAR ( cn ) _CHAR } , { _CHAR ( ) _CHAR } , { _CHAR ( _CHAR } , { _CHAR ( & ( sn = test ) _CHAR } , { _CHAR ( | ( sn = test ) _CHAR } , { _CHAR ( ! ( sn = test ) _CHAR } , { _CHAR ( & ( sn = test ) ) ) _CHAR } , { _CHAR ( | ( sn = test ) ) ) _CHAR } , { _CHAR ( ! ( sn = test ) ) ) '' } , { _CHAR ( sn =\\ A ) _CHAR } , { _CHAR ( sn =\\ _NUM ) _CHAR } , { _CHAR ( sn =\\ H1 ) _CHAR } , { _CHAR ( ! ( sn = test ) ( cn = test ) ) _CHAR } , { _CHAR ( ! ) _CHAR } , { _CHAR ( : dn : = Sally ) _CHAR } } ; }
43954	public static JPasswordField createPasswordField ( ) { JPasswordField pf = new JPasswordField ( ) ; pf . addFocusListener ( new TextComponentFocusListener ( pf ) ) ; pf . setFont ( ColorAndFontConstants . defaultFont ) ; return pf ; }
43964	long count ( ) throws ChangelogException { return log . getNumberOfRecords ( ) ; }
43988	public boolean isMutable ( ) { return mutable ; }
44005	TemplateEntry nextEntry ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( ) ; } final TemplateEntry entry = nextEntry ; nextEntry = _NULL ; return entry ; }
44042	public void postSingleImage ( Context context , Handler h , String fileParam , String fileName , InputStream imgInputStream ) { postSingleImage ( context , h , _NULL , fileParam , fileName , imgInputStream ) ; }
44110	public static int [ ] transformIntArray ( Integer [ ] source ) { int [ ] destin = new int [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
44122	@ Override public String toString ( ) { String s = _NULL ; try { s = toJSONObject ( ) . toString ( _NUM ) ; } catch ( JSONException e ) { PolicyConstants . DEBUG . error ( _CHAR StaticAttributes . toString _CHAR , e ) ; } return s ; }
44156	public boolean isMutable ( ) { return isMutable ; }
44157	public static Integer [ ] transformIntArray ( int [ ] source ) { Integer [ ] destin = new Integer [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
44172	public long insertGeneralAttribute ( String attributeName , Long dataTypeID ) { return insert ( attributeName , GLOBAL_ATTRIBUTE_DB_ID , dataTypeID ) ; }
44190	public static byte [ ] decode ( String s ) throws Base64DecoderException { byte [ ] bytes = s . getBytes ( ) ; return decode ( bytes , _NUM , bytes . length ) ; }
44193	protected void waitForRelease ( ) { }
44199	public void validate ( ) throws SSOException { try { if ( ldapConnect ) { return ; } SessionState state = session . getState ( _BOOL ) ; if ( state != SessionState . VALID ) { throw new SSOException ( SSOProviderBundle . rbName , _CHAR invalidstate _CHAR , _NULL ) ; } } catch ( Exception e ) { throw new SSOException ( e ) ; } }
44224	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR COLLECT_ENTITY \ _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR \ _CHAR HTML_ID \ _CHAR INTEGER , _CHAR + _CHAR \ _CHAR COLLECT \ _CHAR TEXT ) ; _CHAR ) ; }
44240	private void noSubObjects ( String id ) throws ForbiddenException { if ( id != _NULL && id . indexOf ( _CHAR ) >= _NUM ) { throw new ForbiddenException ( _CHAR Sub - objects are not supported _CHAR ) ; } }
44258	public void writeDeleteRequest ( final int messageID , final DeleteRequest request ) throws IOException { logger . trace ( _CHAR ENCODE LDAP DELETE REQUEST ( messageID = % d , request = % s ) _CHAR , messageID , request ) ; writeMessageHeader ( messageID ) ; { writer . writeOctetString ( LDAP . OP_TYPE_DELETE_REQUEST , request . getName ( ) . toString ( ) ) ; } writeMessageFooter ( request . getControls ( ) ) ; }
44268	private void copyACls ( final List < AccessControlLevel > accessControlLevels2 ) { for ( AccessControlLevel acl : this . accessControlLevels ) { accessControlLevels2 . add ( new AccessControlLevel ( acl ) ) ; } }
44270	public Builder removeOptionalAttribute ( final String nameOrOID ) { this . optionalAttributes . remove ( nameOrOID ) ; return this ; }
44282	private void sendRoomMessage ( MessageType type , String content ) { Objects . requireNonNull ( content ) ; Objects . requireNonNull ( type ) ; String completeMsg = String . valueOf ( type . flag ) + content ; client . sendMessage ( new StringWebsocketMessage ( completeMsg ) ) ; }
44288	private static void formatTwoDigits ( int n , StringBuilder buf ) { if ( n < _NUM ) { buf . append ( _CHAR ) ; } buf . append ( n ) ; }
44315	private void destroy ( final PooledObject < T > toDestroy ) throws Exception { toDestroy . invalidate ( ) ; idleObjects . remove ( toDestroy ) ; allObjects . remove ( new IdentityWrapper < > ( toDestroy . getObject ( ) ) ) ; try { factory . destroyObject ( toDestroy ) ; } finally { destroyedCount . incrementAndGet ( ) ; createCount . decrementAndGet ( ) ; } }
44371	public static int v ( String tag , String msg ) { return Log . v ( tag , msg ) ; }
44373	public String toBASE64EncodedString ( ) throws FSMsgException { if ( ( responseID == _NULL ) || ( responseID . length ( ) == _NUM ) ) { responseID = FSUtils . generateID ( ) ; if ( responseID == _NULL ) { FSUtils . debug . error ( _CHAR FSNameRegistrationResponse . toBASE64EncodedString : _CHAR + _CHAR could n _CHAR_CHAR_CHAR_CHAR , null ) ; } } return Base64 . encode ( this . toXMLString ( ) . getBytes ( ) ) ; }
44382	public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
44430	void writeFrame ( byte [ ] bytes , int offset , int length ) throws IOException { synchronized ( spdyWriter ) { spdyWriter . out . write ( bytes , offset , length ) ; } }
44440	public void addApplication ( Application application ) { applications . add ( application ) ; }
44487	public boolean replaceEdit ( UndoableEdit anEdit ) { return _BOOL ; }
44558	private void showAlert ( String message ) { AlertDialog . Builder builder = new AlertDialog . Builder ( this ) ; builder . setMessage ( message ) ; builder . show ( ) ; }
44560	public boolean isIdle ( ) { return ( currentState == idleState ) ; }
44587	public final int yystate ( ) { return zzLexicalState ; }
44598	private void createNewFolderElement ( final Element rootElement ) { Element element = creator . getDocument ( ) . createElement ( _CHAR NewFolder _CHAR ) ; element . setAttribute ( _CHAR name _CHAR , this . newFolderName ) ; rootElement . appendChild ( element ) ; }
44608	private void initDsTables ( ) { initializeDsTable ( ) ; initializeDsApplIfOpsTable ( ) ; try { ObjectName name = new ObjectName ( _CHAR JMImplementation : type = MBeanServerDelegate _CHAR ) ; this . server . addNotificationListener ( name , this , _NULL , _NULL ) ; } catch ( Exception ex ) { logger . traceException ( ex ) ; } }
44619	public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
44692	public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
44699	public void addFileset ( FileSet fs ) { filesets . add ( fs ) ; }
44724	public void clearLastLoginTime ( ) { operations . add ( PasswordPolicyStateOperationType . CLEAR_LAST_LOGIN_TIME ) ; }
44726	public void calcScore ( ) { if ( ( getPredicateCount ( ) > _NUM ) || ( _NULL != m_relativePathPattern ) ) { m_score = SCORE_OTHER ; } else super . calcScore ( ) ; if ( _NULL == m_targetString ) calcTargetString ( ) ; }
44738	public static void reportStart ( String str , Object ... param ) { writeProgressText ( str , param , _BOOL ) ; }
44748	public Future < Void > removeJob ( long id ) { return this . getJob ( id ) . compose ( _NULL ) ; }
44762	private void printCurrency ( Currency c ) { System . out . println ( ) ; System . out . println ( c . getCurrencyCode ( ) ) ; System . out . println ( c . getSymbol ( ) ) ; System . out . println ( c . getDefaultFractionDigits ( ) ) ; }
44772	public static boolean isJavaIdentifier ( final String text ) { return _BOOL ; }
44798	public void notationDecl ( String name , String publicId , String systemId ) throws SAXException { if ( m_dtdHandler != _NULL ) { m_dtdHandler . notationDecl ( name , publicId , systemId ) ; } }
44799	@ JsonIgnore public Entitlement asEntitlement ( ) { return entitlement ; }
44844	public Builder structuralObjectClassOID ( final String nameOrOID ) { this . structuralObjectClassOID = nameOrOID ; return this ; }
44880	@ Override public void close ( ) { impl . close ( ) ; }
44897	static < T , S > ChangeSet < T , S > newInstance ( final T identifier , final S data ) { return new ChangeSet < T , S > ( identifier , data ) ; }
44948	public void writeUnbindRequest ( final int messageID , final UnbindRequest request ) throws IOException { logger . trace ( _CHAR ENCODE LDAP UNBIND REQUEST ( messageID = % d , request = % s ) _CHAR , messageID , request ) ; writeMessageHeader ( messageID ) ; { writer . writeNull ( LDAP . OP_TYPE_UNBIND_REQUEST ) ; } writeMessageFooter ( request . getControls ( ) ) ; }
44949	@ Override public void send ( ClusterMessage msg ) { send ( msg , _NULL ) ; }
44950	public void stopHandler ( ) { if ( logger . isTraceEnabled ( ) ) { debugInfo ( _CHAR stop _CHAR ) ; } DirectoryServer . deregisterMonitorProvider ( this ) ; }
44953	private void enableBle ( ) { final Intent enableIntent = new Intent ( BluetoothAdapter . ACTION_REQUEST_ENABLE ) ; startActivityForResult ( enableIntent , Utils . REQUEST_ENABLE_BT ) ; }
44962	public void addListener ( final FileAlterationListener listener ) { if ( listener != _NULL ) { listeners . add ( listener ) ; } }
44974	public String encode ( ) { StringBuilder retval = new StringBuilder ( ) ; ListIterator li = sdpFields . listIterator ( ) ; while ( li . hasNext ( ) ) { SDPField sdphdr = ( SDPField ) li . next ( ) ; retval . append ( sdphdr . encode ( ) ) ; } return retval . toString ( ) ; }
44975	public Future < Long > inactiveCount ( String type ) { Future < Long > future = Future . future ( ) ; jobService . inactiveCount ( type , future . completer ( ) ) ; return future ; }
44985	public boolean isInfoEnabled ( ) { return ( getLogger ( ) . isLoggable ( Level . INFO ) ) ; }
45002	protected void PopStack ( ) { if ( arg_count > _NUM ) { args [ arg_count - _NUM ] = _NULL ; arg_count -- ; } }
45028	public void printlnMessage ( String str ) { buff . append ( str ) . append ( _CHAR \ n _CHAR ) ; }
45049	public static void main ( final String [ ] args ) { final int retCode = new MakeLDIF ( ) . run ( args ) ; System . exit ( filterExitCode ( retCode ) ) ; }
45064	public void endElement ( String uri , String localName , String qName ) throws SAXException { if ( contentHandler != _NULL ) { contentHandler . endElement ( uri , localName , qName ) ; } }
45074	@ Override public void save ( User u ) { if ( this . u == _NULL ) { this . u = getUser ( _NUM ) ; } this . u . setId ( u . getId ( ) ) ; this . u . setFirstName ( u . getFirstName ( ) ) ; this . u . setLastName ( u . getLastName ( ) ) ; }
45103	@ Override public void close ( ) throws SQLException { if ( ! isClosed ( ) ) { try { _pool . returnObject ( _key , this ) ; } catch ( final SQLException e ) { throw e ; } catch ( final RuntimeException e ) { throw e ; } catch ( final Exception e ) { throw new SQLException ( _CHAR Can not close preparedstatement ( return to pool failed ) _CHAR , e ) ; } } }
45119	private static Subscription addNotificationObject ( SetMultimap < DN , Subscription > nodeChangeSubscribers , DN dn , SMSEventListener eventListener ) { final Subscription subscription = new Subscription ( eventListener , dn , nodeChangeSubscribers ) ; nodeChangeSubscribers . put ( dn , subscription ) ; return subscription ; }
45190	public void onLoginFailure ( Map requestParamsMap , HttpServletRequest request , HttpServletResponse response ) throws AuthenticationException { OAuthUtil . debugMessage ( _CHAR OAuth2PostAuthnPlugin : onLoginFailure called _CHAR ) ; }
45243	public boolean isFatalEnabled ( ) { return ( getLogger ( ) . isLoggable ( Level . SEVERE ) ) ; }
45266	public Builder requiredAttributes ( final Collection < String > nameOrOIDs ) { this . requiredAttributes . addAll ( nameOrOIDs ) ; return this ; }
45276	private void writeObject ( java . io . ObjectOutputStream out ) throws java . io . IOException { if ( sourcePath != _NULL ) { PdfTokenizer tempTokens = tokens ; tokens = _NULL ; out . defaultWriteObject ( ) ; tokens = tempTokens ; } else { out . defaultWriteObject ( ) ; } }
45378	public void addJKTableColumn ( String keyLabel ) { JKTableColumn col = new JKTableColumn ( ) ; col . setName ( keyLabel ) ; addJKTableColumn ( col ) ; }
45394	public void commit ( ) { activeValues . clear ( ) ; activeValues . addAll ( pendingValues ) ; }
45408	public static Long [ ] transformLongArray ( long [ ] source ) { Long [ ] destin = new Long [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
45426	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR SAVED_DAILY_DETAIL \ _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR \ _CHAR BODY \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR IMAGE_SOURCE \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR IMAGE \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR TITLE \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR SHARE_URL \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR JS \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR CSS \ _CHAR TEXT ) ; _CHAR ) ; }
45447	public void destroyModuleState ( ) { debug . message ( _CHAR clean up module state _CHAR ) ; userName = _NULL ; userPrincipal = _NULL ; }
45448	public void goToDetail ( Activity activity , int comicId ) { if ( activity != _NULL ) { Intent intentToLaunch = ComicDetailActivity . getCallingIntent ( activity , comicId ) ; activity . startActivity ( intentToLaunch ) ; } }
45466	void commit ( ) { for ( MyProperty < ? > p : properties . values ( ) ) { p . commit ( ) ; } }
45505	public int append ( ByteBuffer data , int len , boolean count ) { buffer . append ( data , len ) ; int pkgCnt =- _NUM ; if ( count ) pkgCnt = buffer . countPackages ( ) ; return pkgCnt ; }
45530	public void onIdle ( ) throws IllegalStateException { currentState . idle ( ) ; }
45554	public boolean read_scope ( DsnReadScopeParameters p_par ) { try { DsnComponentPlacement component_placement = read_scope ( p_par . scanner ) ; if ( component_placement == _NULL ) { return _BOOL ; } p_par . placement_list . add ( component_placement ) ; } catch ( java . io . IOException e ) { System . out . println ( _CHAR Component . read_scope : IO error scanning file _CHAR ) ; return _BOOL ; } return _BOOL ; }
45560	public void generateUUID ( ) { byte [ ] data = new byte [ _NUM ] ; UUIDGenerator . randomUUID ( USE_SECURE_RANDOM_FOR_UUID , data , _NUM ) ; setUniqueId ( data ) ; }
45562	public void writeAddResult ( final int messageID , final Result result ) throws IOException { logger . trace ( _CHAR ENCODE LDAP ADD RESULT ( messageID = % d , result = % s ) _CHAR , messageID , result ) ; writeMessageHeader ( messageID ) ; { writeResultHeader ( LDAP . OP_TYPE_ADD_RESPONSE , result ) ; writeResultFooter ( writer ) ; } writeMessageFooter ( result . getControls ( ) ) ; }
45579	public Builder removeAllNames ( ) { this . names . clear ( ) ; return this ; }
45635	public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
45655	public boolean isMutable ( ) { return isMutable ; }
45664	public Builder removeAllNames ( ) { this . names . clear ( ) ; return this ; }
45670	public void addBackendPopulatedListener ( BackendPopulatedListener listener ) { backendPopulatedListeners . add ( listener ) ; }
45684	public static Thread start ( long timeout ) { return start ( Thread . currentThread ( ) , timeout ) ; }
45687	public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
45704	public boolean beginPasswordDisplay ( ChildDisplayEvent event ) { return ( curCallback != _NULL ) && ( curCallback instanceof PasswordCallback ) ; }
45711	public double doubleValue ( ) { return doubleValue ; }
45719	public static void updateAgentGroup ( SSOToken ssoToken , String realm , String agentGroupName , Map attrValues ) throws IdRepoException , SSOException , SMSException , ConfigurationException { updateAgentGroup ( ssoToken , realm , agentGroupName , attrValues , _BOOL ) ; }
45728	public boolean beginResetPageDisplay ( ChildDisplayEvent event ) { return isPWResetEnabled ( ) ; }
45750	public final int yystate ( ) { return zzLexicalState ; }
45774	public static UIOutput createOutputText ( final String value ) { final UIOutput out = ( UIOutput ) JSFComponentFactory . createComponent ( UIOutput . COMPONENT_TYPE ) ; if ( value != _NULL ) { out . setValueExpression ( _CHAR value _CHAR , JSFComponentFactory . createLabelValueExpression ( value ) ) ; } return out ; }
45796	void store ( Credential credential ) { accessToken = credential . getAccessToken ( ) ; refreshToken = credential . getRefreshToken ( ) ; expirationTimeMillis = credential . getExpirationTimeMilliseconds ( ) ; }
45813	public boolean visitStylesheet ( ElemTemplateElement elem ) { return _BOOL ; }
45835	protected void send ( ClusterManager manager , String sessionId ) { ClusterMessage msg = manager . requestCompleted ( sessionId ) ; if ( msg != _NULL && cluster != _NULL ) { cluster . send ( msg ) ; if ( doStatistics ( ) ) { nrOfSendRequests ++ ; } } }
45884	@ Override ObservedObject createObservedObject ( ObjectName object ) { final StringMonitorObservedObject smo = new StringMonitorObservedObject ( object ) ; smo . setStatus ( MATCHING_OR_DIFFERING ) ; return smo ; }
45901	public Builder optionalAttributes ( final Collection < String > attributeNamesOrOIDs ) { this . optionalAttributes . addAll ( attributeNamesOrOIDs ) ; return this ; }
45908	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR PICTURE_INFO \ _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR \ _CHAR PATH \ _CHAR TEXT NOT NULL , _CHAR + _CHAR \ _CHAR DISTANCE \ _CHAR TEXT NOT NULL , _CHAR + _CHAR \ _CHAR TIME \ _CHAR TEXT NOT NULL , _CHAR + _CHAR \ _CHAR TIPS \ _CHAR TEXT ) ; _CHAR ) ; }
45912	public boolean isIgnoringCancelled ( ) { return ignoreCancelled ; }
45929	public void deActivateFedStatus ( ) { this . isActive = _BOOL ; }
46041	public static Long [ ] transformLongArray ( long [ ] source ) { Long [ ] destin = new Long [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
46053	public void addString ( final String toAdd ) { this . strings . add ( toAdd ) ; }
46102	private void typeInsn ( final int opcode , final Type type ) { mv . visitTypeInsn ( opcode , type . getInternalName ( ) ) ; }
46138	protected void installListeners ( JPanel p ) { p . addPropertyChangeListener ( this ) ; }
46146	public void endPreserving ( ) throws org . xml . sax . SAXException { m_ispreserve = m_preserves . isEmpty ( ) ? _BOOL : m_preserves . pop ( ) ; }
46152	public static void reportEnd ( String str , Object [ ] param ) { writeProgressText ( str , param ) ; }
46157	public void startServer ( boolean suppressOutput ) throws ApplicationException { startServer ( _BOOL , suppressOutput ) ; }
46248	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR GREEN_WATCHED_VIDEO \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
46322	public void copyTo ( byte [ ] buffer ) { copyTo ( _NUM , buffer , _NUM , buffer . length ) ; }
46416	private void createCopyFielsNode ( final Element rootElement ) { Element element = creator . getDocument ( ) . createElement ( _CHAR CopyFiles _CHAR ) ; element . setAttribute ( _CHAR copied _CHAR , String . valueOf ( this . filesCopied ) ) ; element . setAttribute ( _CHAR copiedTotal _CHAR , String . valueOf ( this . copiedAll + this . filesCopied ) ) ; rootElement . appendChild ( element ) ; }
46431	public static int i ( String tag , String msg ) { return Log . i ( tag , msg ) ; }
46502	Name parameter ( int n ) { assert ( n < arity ) ; Name param = names [ n ] ; assert ( param . isParam ( ) ) ; return param ; }
46528	public static int countAll ( ) { return getPersistence ( ) . countAll ( ) ; }
46588	public boolean isLazy ( ) { return mLazy ; }
46592	public void postSingleImage ( Context context , Handler h , Map < String , String > postParams , String fileParam , String fileName , InputStream imgInputStream ) { postSingleFile ( context , h , postParams , fileParam , fileName , _CHAR image _CHAR , imgInputStream ) ; }
46600	private Record < Integer , Integer > record ( int key ) { return Record . from ( key , key ) ; }
46686	public InputSource resolveEntity ( String publicId , String systemId ) throws SAXException , IOException { if ( entityResolver != _NULL ) { return entityResolver . resolveEntity ( publicId , systemId ) ; } else { return _NULL ; } }
46730	void initialize ( ) throws Exception { for ( String name : propertyStringValues . keySet ( ) ) { definition . getPropertyDefinition ( name ) ; } }
46735	public void replicaOffline ( DN baseDN , CSN offlineCSN ) { if ( ! predicate . isECLEnabledDomain ( baseDN ) ) { return ; } replicasOffline . update ( baseDN , offlineCSN ) ; final CSN oldestCSNBefore = getOldestLastAliveCSN ( ) ; lastAliveCSNs . update ( baseDN , offlineCSN ) ; tryNotify ( oldestCSNBefore ) ; }
46755	public void endDocument ( ) throws SAXException { if ( contentHandler != _NULL ) { contentHandler . endDocument ( ) ; } }
46763	public void entityReference ( String name ) throws org . xml . sax . SAXException { append ( m_doc . createEntityReference ( name ) ) ; }
46776	public Boolean isAutoStopFileSizeEnabled ( ) { return autoStopFileSizeEnable ; }
46796	public static Integer [ ] transformIntArray ( int [ ] source ) { Integer [ ] destin = new Integer [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
46876	public void incrementTotalDeletes ( ) { totalDeletes ++ ; totalRequests ++ ; }
47014	public boolean isAllowDelete ( ) { return this . allowDelete || isEditable ( ) ; }
47026	public void clearChoices ( ) { if ( mCheckedStates != _NULL ) { mCheckedStates . clear ( ) ; } if ( mCheckedIdStates != _NULL ) { mCheckedIdStates . clear ( ) ; } mCheckedCount = _NUM ; updateOnScreenCheckedViews ( ) ; }
47053	public static UIInput createInputText ( final String label ) { final UIInput comp = ( javax . faces . component . UIInput ) JSFComponentFactory . createComponent ( InputText . COMPONENT_TYPE ) ; if ( label != _NULL ) { comp . getAttributes ( ) . put ( _CHAR label _CHAR , label ) ; } return comp ; }
47076	public void lockSwipe ( String ... id ) { setLockSwipe ( _BOOL , id ) ; }
47079	protected void installListeners ( JComponent c ) { c . addPropertyChangeListener ( this ) ; }
47091	public boolean isMutable ( ) { return mutable ; }
47206	public boolean hasMcid ( ) { return properties != _NULL && properties . containsKey ( PdfName . MCID ) ; }
47211	@ AfterClass public void enableLogging ( ) { TestCaseUtils . setDefaultLogLevel ( Level . INFO ) ; }
47220	public Future < Long > activeCount ( String type ) { Future < Long > future = Future . future ( ) ; jobService . activeCount ( type , future . completer ( ) ) ; return future ; }
47229	public void startDocument ( ) throws SAXException { if ( contentHandler != _NULL ) { contentHandler . startDocument ( ) ; } }
47232	public static UIComponent createTreeComponent ( ) { return JSFComponentFactory . createComponent ( Tree . COMPONENT_TYPE ) ; }
47276	public boolean isWarnEnabled ( ) { return ( getLogger ( ) . isLoggable ( Level . WARNING ) ) ; }
47317	private static TypeDescription queryStateDescription ( ) { return new TypeDescription . Latent ( _CHAR org . apache . cassandra . service . QueryState _CHAR , Modifier . PUBLIC | Modifier . ABSTRACT , _NULL , _NULL ) ; }
47332	protected boolean isRequestWithoutSessionChange ( String uri ) { Pattern f = filter ; return f != _NULL && f . matcher ( uri ) . matches ( ) ; }
47349	public void incrementJspReloadCount ( ) { jspReloadCount . incrementAndGet ( ) ; }
47403	public boolean beginOccupyFullBrowserDisplay ( ChildDisplayEvent event ) { if ( loginDebug . messageEnabled ( ) ) { loginDebug . message ( _CHAR Login Status : _CHAR + ac . getStatus ( ) ) ; } if ( sessionUpgrade ) return _BOOL ; return _BOOL ; }
47408	@ Override public void shutdown ( ) { }
47441	public boolean enabled ( ) { return this . enabled && ! this . loading ; }
47454	@ Override public int doAfterBody ( ) throws JspException { return SKIP_BODY ; }
47455	public < C extends ConfigurationClient , S extends Configuration > R visitAggregation ( AggregationPropertyDefinition < C , S > pd , String v , P p ) { return visitUnknown ( pd , v , p ) ; }
47493	@ SuppressWarnings ( _CHAR unused _CHAR ) public static RectF resetRectToOrigin ( RectF rect ) { RectF newRect = new RectF ( rect ) ; newRect . offset ( - newRect . left , - newRect . top ) ; return newRect ; }
47527	private static void log ( final String message ) { System . out . println ( message ) ; }
47529	public static Builder newSuccessBuilder ( ) { return new Builder ( _BOOL ) ; }
47534	public static String sphinxify ( String comment ) { comment = CommentPatterns . BACK_QUOTE_PATTERN . matcher ( comment ) . replaceAll ( _CHAR _CHAR _CHAR ) ; comment = comment . replace ( _CHAR \ _CHAR _CHAR , _CHAR \\\ _CHAR _CHAR ) ; comment = sphinxifyProtoMarkdownLinks ( comment ) ; comment = sphinxifyAbsoluteMarkdownLinks ( comment ) ; return sphinxifyCloudMarkdownLinks ( comment ) . trim ( ) ; }
47570	public void printlnError ( String str ) { buff . append ( str ) . append ( _CHAR \ n _CHAR ) ; }
47579	public void addApplicationSSOTokenDestroyer ( ShutdownListener listener ) { appSSOTokenDestroyer = listener ; }
47582	public < C extends ConfigurationClient , S extends Configuration > R visitAggregation ( AggregationPropertyDefinition < C , S > pd , P p ) { return visitUnknown ( pd , p ) ; }
47588	private static int checkFieldTypeSignature ( final String signature , int pos ) { switch ( getChar ( signature , pos ) ) { case _CHAR : return checkClassTypeSignature ( signature , pos ) ; case _CHAR : return checkTypeSignature ( signature , pos + _NUM ) ; default : return checkTypeVariableSignature ( signature , pos ) ; } }
47607	public void startDocument ( ) throws SAXException { if ( DEBUG ) System . out . println ( _CHAR TransformerHandlerImpl # startDocument _CHAR ) ; m_insideParse = _BOOL ; if ( m_contentHandler != _NULL ) { if ( m_incremental ) { m_transformer . setSourceTreeDocForThread ( m_dtm . getDocument ( ) ) ; int cpriority = Thread . currentThread ( ) . getPriority ( ) ; m_transformer . runTransformThread ( cpriority ) ; } m_contentHandler . startDocument ( ) ; } }
47612	public R visitBoolean ( BooleanPropertyDefinition pd , P p ) { return visitUnknown ( pd , p ) ; }
47636	protected void onDropView ( final V view ) { }
47729	@ Override protected synchronized WZStreamingError startBroadcast ( ) { getBroadcastConfig ( ) . setAudioChannels ( isBluetoothActive ( ) ? BLUETOOTH_CHANNELS : mStoredChannels ) ; getBroadcastConfig ( ) . setAudioSampleRate ( isBluetoothActive ( ) ? BLUETOOTH_SAMPLE_RATE : mStoredSampleRate ) ; return super . startBroadcast ( ) ; }
47732	public ListBuffer < A > append ( final A x ) { x . getClass ( ) ; if ( shared ) { copy ( ) ; } last . head = x ; last . setTail ( new ImmutableList < A > ( _NULL , _NULL ) ) ; last = last . tail ; count ++ ; return this ; }
47792	public static JTextArea createNonEditableTextArea ( LocalizableMessage text , int rows , int cols ) { JTextArea ta = createTextArea ( text , rows , cols ) ; ta . setEditable ( _BOOL ) ; ta . setOpaque ( _BOOL ) ; ta . setForeground ( ColorAndFontConstants . foreground ) ; return ta ; }
47818	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR CUSTOMER \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
47837	public boolean hasAttributes ( ) { return DTM . NULL != dtm . getFirstAttribute ( node ) ; }
47851	public void requestAccountDisabledState ( ) { operations . add ( PasswordPolicyStateOperationType . GET_ACCOUNT_DISABLED_STATE ) ; }
47886	public BasicHttpProcessor copy ( ) { BasicHttpProcessor clone = new BasicHttpProcessor ( ) ; copyInterceptors ( clone ) ; return clone ; }
47905	private ConsulResponse < List < ConsulService >> lookupConsulService ( String serviceName , Long lastConsulIndexId ) { ConsulResponse < List < ConsulService >> response = client . lookupHealthService ( ConsulUtils . convertGroupToServiceName ( serviceName ) , lastConsulIndexId ) ; return response ; }
47908	@ DataProvider public Object [ ] [ ] createRenameTestData ( ) { return new Object [ ] [ ] { { _CHAR _CHAR , _CHAR _CHAR , _CHAR _CHAR , _CHAR _CHAR } , { _CHAR _CHAR , _CHAR _CHAR , _CHAR dc = x _CHAR , _CHAR dc = x _CHAR } , { _CHAR dc = x _CHAR , _CHAR _CHAR , _CHAR dc = y _CHAR , _CHAR dc = x , dc = y _CHAR } , { _CHAR dc = x _CHAR , _CHAR dc = x _CHAR , _CHAR dc = y _CHAR , _CHAR dc = y _CHAR } , { _CHAR dc = x , dc = y _CHAR , _CHAR dc = y _CHAR , _CHAR dc = z _CHAR , _CHAR dc = x , dc = z _CHAR } , { _CHAR dc = x , dc = y _CHAR , _CHAR dc = x , dc = y _CHAR , _CHAR dc = z _CHAR , _CHAR dc = z _CHAR } , { _CHAR dc = x , dc = y _CHAR , _CHAR dc = x _CHAR , _CHAR dc = z _CHAR , _CHAR dc = x , dc = y _CHAR } } ; }
47914	public void handleAdvancedOptionButtonRequest ( RequestInvocationEvent event ) throws ModelControlException { CoreAttributesViewBean vb = ( CoreAttributesViewBean ) getViewBean ( CoreAttributesViewBean . class ) ; unlockPageTrail ( ) ; passPgSessionMap ( vb ) ; vb . forwardTo ( getRequestContext ( ) ) ; }
47929	public TagField createField ( VorbisCommentFieldKey vorbisCommentFieldKey , String value ) throws KeyNotFoundException , FieldDataInvalidException { if ( value == _NULL ) { throw new IllegalArgumentException ( ErrorMessage . GENERAL_INVALID_NULL_ARGUMENT . getMsg ( ) ) ; } if ( vorbisCommentFieldKey == _NULL ) { throw new KeyNotFoundException ( ) ; } return new VorbisCommentTagField ( vorbisCommentFieldKey . getFieldName ( ) , value ) ; }
47938	private void findFreePorts ( ) throws IOException { int [ ] ports = TestCaseUtils . findFreePorts ( _NUM ) ; rs1Port = ports [ _NUM ] ; rs2Port = ports [ _NUM ] ; }
47945	public void logException ( Exception ex ) { if ( traceLevel >= TRACE_EXCEPTION ) { checkLogFile ( ) ; ex . printStackTrace ( ) ; if ( printWriter != _NULL ) ex . printStackTrace ( printWriter ) ; } }
47973	private void classFileEpilogue ( ) { mv . visitMaxs ( _NUM , _NUM ) ; mv . visitEnd ( ) ; }
48050	public static void stop ( Thread thread ) { if ( thread != _NULL ) { thread . interrupt ( ) ; } }
48057	protected void uninstallDefaults ( JComponent c ) { SynthContext context = getContext ( c , ENABLED ) ; style . uninstallDefaults ( context ) ; context . dispose ( ) ; style = _NULL ; }
48072	public static UIFields createFieldsRegion ( ) { return ( UIFields ) JSFComponentFactory . createComponent ( UIFields . COMPONENT_TYPE ) ; }
48119	public PdfIndirectReference createNextIndirectReference ( ) { checkClosingStatus ( ) ; return xref . createNextIndirectReference ( this ) ; }
48141	public final void calcScore ( ) { m_score = SCORE_OTHER ; if ( _NULL == m_targetString ) calcTargetString ( ) ; }
48154	private void notifyListener ( ) { if ( listener != _NULL ) { listener . update ( bytesRead , contentLength , items ) ; } }
48158	public boolean isMutable ( ) { return mutable ; }
48216	public boolean isMutable ( ) { return isMutable ; }
48227	public void visitLineNumber ( int line , Label start ) { if ( mv != _NULL ) { mv . visitLineNumber ( line , start ) ; } }
48251	public ByteBufferOutputStream append ( byte [ ] b ) { return append ( b , _NUM , b . length ) ; }
48263	public static Builder builder ( ) { return new Builder ( ) ; }
48266	public static ExecuteStatementWrapper executeStatementWrapper ( ) { return executeStatementWrapper ; }
48305	protected TreeCellEditor createDefaultCellEditor ( ) { if ( currentCellRenderer != _NULL && ( currentCellRenderer instanceof DefaultTreeCellRenderer ) ) { DefaultTreeCellEditor editor = new DefaultTreeCellEditor ( tree , ( DefaultTreeCellRenderer ) currentCellRenderer ) ; return editor ; } return new DefaultTreeCellEditor ( tree , _NULL ) ; }
48308	public static UIOutput createOutputText ( ) { return JSFComponentFactory . createOutputText ( _NULL ) ; }
48315	public boolean isCritical ( ) { return criticality ; }
48330	public Vector add ( Vector vec ) { x += vec . x ; y += vec . y ; z += vec . z ; return this ; }
48339	BufferedWriter newWriter ( File file ) throws IOException { return new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( file ) , Charset . forName ( _CHAR UTF - _NUM _CHAR ) ) ) ; }
48365	public void onRestoreInstanceState ( @ Nullable final Parcelable parcelable ) { if ( parcelable instanceof Bundle ) { Bundle bundle = ( Bundle ) parcelable ; mFirstAnimatedPosition = bundle . getInt ( SAVEDINSTANCESTATE_FIRSTANIMATEDPOSITION ) ; mLastAnimatedPosition = bundle . getInt ( SAVEDINSTANCESTATE_LASTANIMATEDPOSITION ) ; mShouldAnimate = bundle . getBoolean ( SAVEDINSTANCESTATE_SHOULDANIMATE ) ; } }
48370	public void skippedEntity ( String name ) throws SAXException { if ( contentHandler != _NULL ) { contentHandler . skippedEntity ( name ) ; } }
48371	public static void shutdown ( ) throws IOException { reset ( ) ; mockWebServer . shutdown ( ) ; }
48374	public static long readUINT64 ( InputStream stream ) throws IOException { long result = _NUM ; for ( int i = _NUM ; i <= _NUM ; i += _NUM ) { result |= ( long ) stream . read ( ) << i ; } return result ; }
48376	private Future < Job > reattempt ( ) { if ( this . backoff != _NULL ) { long delay = this . getBackoffImpl ( ) . apply ( attempts ) ; return this . setDelay ( delay ) . setPromote_at ( System . currentTimeMillis ( ) + delay ) . update ( ) . compose ( _NULL ) ; } else { return this . inactive ( ) ; } }
48387	public static < A extends Annotation > A createAnnotation ( Class < ? extends Annotation > annotationType , AnnotationMember [ ] elements ) { AnnotationFactory factory = new AnnotationFactory ( annotationType , elements ) ; return ( A ) Proxy . newProxyInstance ( annotationType . getClassLoader ( ) , new Class [ ] { annotationType } , factory ) ; }
48405	public static boolean checkSecurityToken ( Object name , Object token ) { Object refToken = securityTokens . get ( name ) ; return ( refToken == _NULL || refToken . equals ( token ) ) ; }
48410	public ArraySet < Pnt > facetOpposite ( Pnt vertex ) { ArraySet < Pnt > facet = new ArraySet < Pnt > ( this ) ; if ( ! facet . remove ( vertex ) ) throw new IllegalArgumentException ( _CHAR Vertex not in triangle _CHAR ) ; return facet ; }
48439	private void startRSHeartBeatMonitoring ( ConnectedRS rs ) { final long heartbeatInterval = config . getHeartbeatInterval ( ) ; if ( heartbeatInterval > _NUM ) { heartbeatMonitor = new HeartbeatMonitor ( getServerId ( ) , rs . getServerId ( ) , getBaseDN ( ) . toString ( ) , rs . session , heartbeatInterval ) ; heartbeatMonitor . start ( ) ; } }
48461	public final int yystate ( ) { return zzLexicalState ; }
48466	public static int d ( String tag , String msg ) { return Log . d ( tag , msg ) ; }
48474	private void compilePredicates ( int opPos , Expression [ ] predicates ) throws TransformerException { for ( int i = _NUM ; OpCodes . OP_PREDICATE == getOp ( opPos ) ; i ++ ) { predicates [ i ] = predicate ( opPos ) ; opPos = getNextOpPos ( opPos ) ; } }
48477	private void removeHeader ( int idx ) { MimeHeaderField mh = headers [ idx ] ; mh . recycle ( ) ; headers [ idx ] = headers [ count - _NUM ] ; headers [ count - _NUM ] = mh ; count -- ; }
48478	public boolean isEnabled ( ) { return enabled ; }
48482	public Builder implementation ( final MatchingRuleImpl implementation ) { this . impl = implementation ; return this ; }
48487	public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
48496	public StringBuilder encodeBody ( StringBuilder buffer ) { return buffer . append ( this . privacy ) ; }
48519	public boolean isNumericClumn ( final int visibleColIndex ) { return getTableColumn ( visibleColIndex ) . isNumeric ( ) ; }
48526	private void writeObject ( java . io . ObjectOutputStream out ) throws java . io . IOException { java . io . OutputStream tempOutputStream = outputStream ; outputStream = _NULL ; out . defaultWriteObject ( ) ; outputStream = tempOutputStream ; }
48581	public static void main ( String [ ] args ) { try { SelectAliasDialog dlg = new SelectAliasDialog ( new JDialog ( ) ) ; dlg . display ( new String [ ] { _CHAR test1 _CHAR , _CHAR test2 _CHAR } ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } }
48625	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR CUSTOMER \ _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR \ _CHAR NAME \ _CHAR TEXT NOT NULL ) ; _CHAR ) ; }
48650	public void notationDecl ( String name , String publicId , String systemId ) throws SAXException { if ( dtdHandler != _NULL ) { dtdHandler . notationDecl ( name , publicId , systemId ) ; } }
48661	public String encodeBody ( ) { return encodeBody ( new StringBuilder ( ) ) . toString ( ) ; }
48676	public boolean isMutable ( ) { return mutable ; }
48688	public boolean isConnected ( ) { return mClient . isConnected ( ) ; }
48704	private AccessRequest createAccessRequest ( ) throws NoSuchAlgorithmException { RequestAuthenticator ra = new RequestAuthenticator ( random , secret ) ; AccessRequest req = new AccessRequest ( getIdentifier ( ) , ra ) ; return req ; }
48718	public void visitLineNumber ( int line , Label start ) { if ( mv != _NULL ) { mv . visitLineNumber ( line , start ) ; } }
48738	public Promise < QueryResponse , ResourceException > queryPolicies ( Context context , QueryRequest request , QueryResourceHandler resultHandler ) { return policyResource . handleQuery ( context , request , resultHandler ) ; }
48739	public void end_scope ( ) throws IOException { current_indent_level -- ; new_line ( ) ; write ( END_SCOPE ) ; }
48747	public String join ( ) { return equalJoiner . join ( key , value ) ; }
48763	public Object shift ( ) { return remove ( _NUM ) ; }
48773	public static Column createColumn ( ) { return ( Column ) JSFComponentFactory . createComponent ( Column . COMPONENT_TYPE ) ; }
48776	public String productPublicationDate ( ) { return properties . getProperty ( _CHAR product . publication . date _CHAR ) ; }
48810	public boolean implies ( Permission permission ) { return _BOOL ; }
48811	public void addAll ( Collection < PdfObject > c ) { list . addAll ( c ) ; }
48845	public void printlnError ( String str ) { System . err . println ( str ) ; }
48859	public void stopServer ( boolean suppressOutput ) throws ApplicationException { stopServer ( suppressOutput , _BOOL ) ; }
48875	protected void freeBuffers ( ) { CryptoInputStream . freeDirectBuffer ( inBuffer ) ; CryptoInputStream . freeDirectBuffer ( outBuffer ) ; }
48879	public static < V > boolean addListNotNullValue ( List < V > sourceList , V value ) { return ( sourceList != _NULL && value != _NULL ) ? sourceList . add ( value ) : _BOOL ; }
48900	public boolean removeBackendPopulatedListener ( BackendPopulatedListener listener ) { return backendPopulatedListeners . remove ( listener ) ; }
48904	public void createSubConfig ( String name , String schemaName , Map values ) throws AMConsoleException { if ( ( name == _NULL ) || ( name . trim ( ) . length ( ) == _NUM ) ) { throw new AMConsoleException ( _CHAR subconfig . missing . subconfiguration . name . message _CHAR ) ; } subConfigMeta . createSubConfig ( name , schemaName , values ) ; }
48912	private void highLightMarker ( int index ) { highLightMarker ( markers . get ( index ) ) ; }
48927	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR URL_COLLECT \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
48990	public ZotifyApi cache ( ) { return this . obtain ( ZotifyApi . class , ApiProvider . ZOTIFY_URL , new ZotifyFilter ( ) ) ; }
49106	public void handleButton1Request ( RequestInvocationEvent event ) { CloseWindowViewBean vb = ( CloseWindowViewBean ) getViewBean ( CloseWindowViewBean . class ) ; vb . forwardTo ( getRequestContext ( ) ) ; }
49146	public static List sortKeyInMap ( Map map , Locale locale ) { List sorted = Collections . EMPTY_LIST ; if ( ( map != _NULL ) && ! map . isEmpty ( ) ) { sorted = sortItems ( map . keySet ( ) , locale ) ; } return sorted ; }
49157	@ Override ObservedObject createObservedObject ( ObjectName object ) { final GaugeMonitorObservedObject gmo = new GaugeMonitorObservedObject ( object ) ; gmo . setStatus ( RISING_OR_FALLING ) ; gmo . setPreviousScanGauge ( _NULL ) ; return gmo ; }
49248	public static boolean isLowerCase ( final String value ) { validate ( value , NULL_STRING_PREDICATE , NULL_STRING_MSG_SUPPLIER ) ; for ( int i = _NUM ; i < value . length ( ) ; i ++ ) { if ( Character . isUpperCase ( value . charAt ( i ) ) ) { return _BOOL ; } } return _BOOL ; }
49312	public static ExtOp decode ( EnumTargetOperator operator , String expr ) throws AciException { Set < String > extOpOIDs = Aci . decodeOID ( expr , WARN_ACI_SYNTAX_INVALID_TARGEXTOP_EXPRESSION . get ( expr ) ) ; return new ExtOp ( operator , extOpOIDs ) ; }
49317	@ Override public void removeExecutor ( Executor ex ) { synchronized ( executors ) { if ( executors . remove ( ex ) && getState ( ) . isAvailable ( ) ) { try { ex . stop ( ) ; } catch ( LifecycleException e ) { log . error ( _CHAR Executor . stop _CHAR , e ) ; } } } }
49361	private void doSignalAll ( Node first ) { lastWaiter = firstWaiter = _NULL ; do { Node next = first . nextWaiter ; first . nextWaiter = _NULL ; transferForSignal ( first ) ; first = next ; } while ( first != _NULL ) ; }
49392	public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
49407	public void validatePassword ( String password , Map envParams ) throws AMException { validatePassword ( password ) ; }
49439	public static void unlockOrientation ( Activity activity ) { activity . setRequestedOrientation ( ActivityInfo . SCREEN_ORIENTATION_UNSPECIFIED ) ; }
49440	public void updateBundle ( Bundle bundle ) throws UpdateException { try { bundle . update ( ) ; } catch ( BundleException e ) { throw new UpdateException ( _CHAR Can not update bundle _CHAR + bundle . toString ( ) , e ) ; } }
49452	public static String jsdocify ( String comment ) { comment = jsdocifyProtoMarkdownLinks ( comment ) ; comment = jsdocifyCloudMarkdownLinks ( comment ) ; return comment . trim ( ) ; }
49453	public synchronized void releaseLockAndNotify ( ) throws IllegalMonitorStateException { if ( owner == Thread . currentThread ( ) ) { if ( acquireCount > _NUM ) { acquireCount -- ; } else { owner = _NULL ; acquireCount = _NUM ; if ( waitCount > _NUM ) { if ( expired ) { this . notifyAll ( ) ; } else { this . notify ( ) ; } } } } else { throw new IllegalMonitorStateException ( _CHAR The calling thread is not the owner of the lock ! _CHAR ) ; } }
49481	public ConnectionEntryReader search ( SearchRequest request ) { addControls ( request ) ; return conn . getConnection ( ) . search ( request ) ; }
49492	public void beginDisplay ( DisplayEvent event ) throws ModelControlException { if ( isXuiAdminConsoleEnabled ( ) ) { redirectToXui ( getRequestContext ( ) . getRequest ( ) , XuiRedirectHelper . DEPLOYMENT_SERVERS ) ; } else { super . beginDisplay ( event ) ; } resetButtonState ( TBL_SERVER_BUTTON_DELETE ) ; resetButtonState ( TBL_SERVER_BUTTON_CLONE ) ; resetButtonState ( TBL_SITE_BUTTON_DELETE ) ; getSiteNames ( ) ; getServerNames ( ) ; }
49497	protected String accessJMXValue ( ) { try { Object result = getJMXConnection ( ) . getAttribute ( new ObjectName ( name ) , attribute ) ; if ( result != _NULL ) return result . toString ( ) ; } catch ( Exception e ) { } return _NULL ; }
49532	public void uninstallBundle ( Bundle bundle ) throws UpdateException { try { bundle . uninstall ( ) ; } catch ( BundleException e ) { throw new UpdateException ( _CHAR Can not uninstall bundle _CHAR + bundle . toString ( ) , e ) ; } }
49534	public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
49535	public boolean beginTextBoxDisplay ( ChildDisplayEvent event ) { return ( curCallback != _NULL ) && ( curCallback instanceof NameCallback ) ; }
49579	public static Date adddDaysToCurrentDate ( int numberOfDays ) { Date date = new Date ( ) ; Calendar instance = Calendar . getInstance ( ) ; instance . setTime ( date ) ; instance . add ( Calendar . DATE , numberOfDays ) ; return instance . getTime ( ) ; }
49585	public void addLayoutComponent ( String name , Component comp ) { invalidateLayout ( comp . getParent ( ) ) ; }
49609	public boolean useSASLExternal ( ) { return saslExternal ; }
49664	public void deleteArtworkField ( ) throws KeyNotFoundException { this . deleteField ( VorbisCommentFieldKey . METADATA_BLOCK_PICTURE ) ; this . deleteField ( VorbisCommentFieldKey . COVERART ) ; this . deleteField ( VorbisCommentFieldKey . COVERARTMIME ) ; }
49673	boolean isAcceptLicenseMode ( ) { return isAcceptLicenseMode ; }
49679	public static Executor createExecutor ( int threadPoolSize , int threadPriority ) { BlockingQueue < Runnable > taskQueue = new LinkedBlockingQueue < Runnable > ( ) ; return new ThreadPoolExecutor ( threadPoolSize , threadPoolSize , _NUM , TimeUnit . MILLISECONDS , taskQueue , createThreadFactory ( threadPriority , _CHAR uil - pool - _CHAR ) ) ; }
49824	@ Override public int hashCode ( ) { return transition . hashCode ( ) ^ offsetBefore . hashCode ( ) ^ Integer . rotateLeft ( offsetAfter . hashCode ( ) , _NUM ) ; }
49830	private static JsonValue flattenJson ( JsonValue original ) { return flattenJson ( _CHAR _CHAR , original ) ; }
49833	private static TypeDescription cqlStatementDescription ( ) { return new TypeDescription . Latent ( _CHAR org . apache . cassandra . cql3 . CQLStatement _CHAR , Modifier . INTERFACE , _NULL , _NULL ) ; }
49868	public void requestLastLoginTime ( ) { operations . add ( PasswordPolicyStateOperationType . GET_LAST_LOGIN_TIME ) ; }
49882	private < T > void buildImpl ( PropertyDefinition < T > pd ) { T value = pd . decodeValue ( propertyStringValue ) ; this . impl = new Impl < > ( pd , value ) ; }
49918	public Builder removeOptionalAttribute ( String attributeNameOrOID ) { this . optionalAttributes . remove ( attributeNameOrOID ) ; return this ; }
49997	public static float computeFrequency ( int station ) { return ( float ) station / CONVERT_RATE ; }
50006	protected Expression plus ( int opPos ) throws TransformerException { return compileOperation ( new Plus ( ) , opPos ) ; }
50011	public boolean hasSdcard ( ) { String state = Environment . getExternalStorageState ( ) ; if ( state . equals ( Environment . MEDIA_MOUNTED ) ) { return _BOOL ; } else { return _BOOL ; } }
50044	public static < V > boolean addListNotNullValue ( List < V > sourceList , V value ) { return ( sourceList != _NULL && value != _NULL ) ? sourceList . add ( value ) : _BOOL ; }
50104	public void modify ( ModifyRequest request ) throws LdapException { addControls ( request ) ; conn . getConnection ( ) . modify ( request ) ; }
50135	public final boolean hasSetting ( DOMTestDocumentBuilderFactory factory ) { return strategy . hasSetting ( factory ) == value ; }
50155	public void startServer ( ) throws ApplicationException { startServer ( _BOOL , _BOOL ) ; }
50229	public static OAuthProblemException handleOAuthProblemException ( String message ) { return OAuthProblemException . error ( OAuth2Constants . Error . INVALID_REQUEST ) . description ( message ) ; }
50294	public ZonkyOAuthApi oauth ( final CommonFilter filter ) { return this . obtain ( ZonkyOAuthApi . class , ApiProvider . ZONKY_URL , filter ) ; }
50406	public static String convertFromLong ( long value ) { return String . valueOf ( value ) ; }
50420	public boolean hasBinaryAttributes ( ) { return _BOOL ; }
50435	private void invokePostResponsePlugins ( ) { getPluginConfigManager ( ) . invokePostResponseSearchPlugins ( this ) ; }
50440	public HeaderGroup copy ( ) { HeaderGroup clone = new HeaderGroup ( ) ; clone . headers . addAll ( this . headers ) ; return clone ; }
50455	public void backup ( int amount ) { inBuf += amount ; if ( ( bufpos -= amount ) < _NUM ) bufpos += bufsize ; }
50481	public JKServletContext createJkServletContext ( ) { return new JKServletContext ( ) ; }
50501	public void removeUsers ( Set users ) throws UnsupportedOperationException { throw new UnsupportedOperationException ( ) ; }
50522	protected void remove ( SendfileData data ) { int rv = Poll . remove ( sendfilePollset , data . socket ) ; if ( rv == Status . APR_SUCCESS ) { sendfileCount -- ; } sendfileData . remove ( Long . valueOf ( data . socket ) ) ; }
50529	public List < Integer > findCheapestPath ( int begin , int end , float [ ] [ ] matrix ) { init ( matrix ) ; floyd ( matrix ) ; result . add ( begin ) ; findPath ( begin , end ) ; result . add ( end ) ; return result ; }
50534	public AclEntryType type ( ) { return type ; }
50560	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR ORDERS \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
50565	public void add_int ( int p_int ) { if ( ! write_enabled ) return ; try { file_writer . write ( ( new Integer ( p_int ) ) . toString ( ) ) ; file_writer . write ( _CHAR \ n _CHAR ) ; } catch ( IOException e2 ) { System . out . println ( _CHAR unable to write integer to logfile _CHAR ) ; } }
50604	public String toXML ( ) { StringBuilder sb = new StringBuilder ( ) ; Iterator iter = resourceResults . iterator ( ) ; while ( iter . hasNext ( ) ) { ResourceResult rr = ( ResourceResult ) iter . next ( ) ; sb . append ( rr . toXML ( ) ) ; } return sb . toString ( ) ; }
50615	static boolean charEqualsIgnoreCase ( char c1 , char c2 ) { return c1 == c2 || Character . toUpperCase ( c1 ) == Character . toUpperCase ( c2 ) || Character . toLowerCase ( c1 ) == Character . toLowerCase ( c2 ) ; }
50729	public void updateApps ( List < AppInfo > apps ) { mApps . updateApps ( apps ) ; }
50777	protected void countProximityPosition ( int i ) { if ( ! isReverseAxes ( ) ) super . countProximityPosition ( i ) ; else if ( i < m_proximityPositions . length ) m_proximityPositions [ i ] -- ; }
50807	public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
50872	public static void reportStart ( String str , Object [ ] param ) { writeProgressText ( str , param ) ; }
50888	public boolean isSecure ( ) { return _BOOL ; }
50894	public static ComponentUI createUI ( JComponent x ) { return new BasicOptionPaneUI ( ) ; }
50898	@ Override public boolean onCreatePanelMenu ( final int featureId , final Menu menu ) { return super . onCreatePanelMenu ( featureId , menu ) ; }
50909	@ RequestMapping ( value = _CHAR / hello _CHAR , method = RequestMethod . GET , produces = MediaTypes . TEXT_PLAIN_UTF_8 ) public String hello ( String name ) { return _CHAR Hello , _CHAR + name + _CHAR ! _CHAR ; }
50919	public static Scenario s9_empty_repository ( ) { return new ScenarioBuilder ( ) . getScenario ( ) ; }
50928	public static Charset forContentType ( String contentType ) { return forContentType ( contentType , DEFAULT_HTTP_ENCODING ) ; }
50986	protected void countProximityPosition ( int i ) { if ( i < m_proximityPositions . length ) m_proximityPositions [ i ] -- ; }
51000	public static boolean isTimeStamp ( final Class type ) { return Timestamp . class . isAssignableFrom ( type ) ; }
51011	private boolean isLoginFailureLockoutStoreInDS ( ) { return loginFailureLockoutStoreInDS ; }
51014	public AuditEvent convertToAuditEvent ( PersistentAuditEvent persistentAuditEvent ) { Instant instant = persistentAuditEvent . getAuditEventDate ( ) . atZone ( ZoneId . systemDefault ( ) ) . toInstant ( ) ; return new AuditEvent ( Date . from ( instant ) , persistentAuditEvent . getPrincipal ( ) , persistentAuditEvent . getAuditEventType ( ) , convertDataToObjects ( persistentAuditEvent . getData ( ) ) ) ; }
51048	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR SAVED_STORY \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
51110	protected RowView createTableRow ( Element elem ) { Object o = elem . getAttributes ( ) . getAttribute ( StyleConstants . NameAttribute ) ; if ( o == HTML . Tag . TR ) { return new RowView ( elem ) ; } return _NULL ; }
51149	public Builder removeSuperiorRule ( final int superiorRuleID ) { this . superiorRuleIDs . remove ( superiorRuleID ) ; return this ; }
51265	public static NewSuffixOptions createEmpty ( List < String > baseDNs ) { NewSuffixOptions ops = new NewSuffixOptions ( baseDNs ) ; ops . type = Type . LEAVE_DATABASE_EMPTY ; return ops ; }
51266	public static void reloadWhitelist ( ) { server . reloadWhitelist ( ) ; }
51294	public Future < Long > completeCount ( String type ) { Future < Long > future = Future . future ( ) ; jobService . completeCount ( type , future . completer ( ) ) ; return future ; }
51343	public static String convertFrameID23To22 ( String identifier ) { if ( identifier . length ( ) < _NUM ) { return _NULL ; } if ( ID3v23Frames . getInstanceOf ( ) . getIdToValueMap ( ) . containsKey ( identifier ) ) { return ID3Frames . convertv23Tov22 . get ( identifier . substring ( _NUM , _NUM ) ) ; } return _NULL ; }
51375	public boolean isAllowNullable ( ) { return this . allowNullable ; }
51408	public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
51409	public boolean isBorderOpaque ( ) { return _BOOL ; }
51432	public static void f ( String tag , String msg , Throwable throwable ) { if ( sLevel > LEVEL_FATAL ) { return ; } Log . wtf ( tag , msg , throwable ) ; }
51445	public Object clone ( ) { CharArrayIterator c = new CharArrayIterator ( chars , begin ) ; c . pos = this . pos ; return c ; }
51535	public static ConstraintResult newSuccess ( ) { return new ConstraintSuccessImpl ( ) ; }
51594	public static boolean isWifiConnected ( Context context ) { ConnectivityManager connectivityManager = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo mWifi = connectivityManager . getNetworkInfo ( ConnectivityManager . TYPE_WIFI ) ; return mWifi != _NULL && mWifi . isConnected ( ) ; }
51615	static IndexQuery createNullIndexQuery ( ) { return new NullIndexQuery ( ) ; }
51647	private void checkState ( ) { Utils . checkState ( context != _NUM ) ; }
51655	@ Override public TagField createField ( FieldKey genericKey , String value ) throws KeyNotFoundException , FieldDataInvalidException { if ( genericKey == _NULL ) { throw new KeyNotFoundException ( ) ; } return createField ( tagFieldToOggField . get ( genericKey ) , value ) ; }
51695	public MaterialBarcodeScanner build ( ) { if ( mUsed ) { throw new RuntimeException ( _CHAR You must not reuse a MaterialBarcodeScanner builder _CHAR ) ; } if ( mActivity == _NULL ) { throw new RuntimeException ( _CHAR Please pass an activity to the MaterialBarcodeScannerBuilder _CHAR ) ; } mUsed = _BOOL ; buildMobileVisionBarcodeDetector ( ) ; MaterialBarcodeScanner materialBarcodeScanner = new MaterialBarcodeScanner ( this ) ; materialBarcodeScanner . setOnResultListener ( onResultListener ) ; return materialBarcodeScanner ; }
51721	public Executor addEnv ( String name , String value ) { this . env . put ( name , value ) ; return this ; }
51743	public void deleteArtworkField ( ) throws KeyNotFoundException { throw new UnsupportedOperationException ( ErrorMessage . GENERIC_NOT_SUPPORTED . getMsg ( ) ) ; }
51770	public static boolean isJSF22 ( ) { final String version = FacesContext . class . getPackage ( ) . getImplementationVersion ( ) ; if ( version != _NULL ) { return version . startsWith ( _CHAR _NUM . _NUM _CHAR ) ; } else { try { Class . forName ( _CHAR javax . faces . flow . Flow _CHAR ) ; return _BOOL ; } catch ( final ClassNotFoundException ex ) { return _BOOL ; } } }
51772	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR GREEN_NEWS \ _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR \ _CHAR NEWSLISTJSON \ _CHAR TEXT ) ; _CHAR ) ; }
51783	public void fax4Encode ( byte [ ] data , int height ) { fax4Encode ( data , _NUM , rowbytes * height ) ; }
51795	private void readObject ( java . io . ObjectInputStream in ) throws java . io . IOException , ClassNotFoundException { in . defaultReadObject ( ) ; if ( sourcePath != _NULL && tokens == _NULL ) { tokens = getOffsetTokeniser ( new RandomAccessSourceFactory ( ) . setForceRead ( _BOOL ) . createBestSource ( sourcePath ) ) ; } }
51833	private static void log ( final String message ) { System . out . println ( message ) ; }
51847	public void stop ( ) throws IOException , InterruptedException { thread . interrupt ( ) ; selector . wakeup ( ) ; }
51925	@ SuppressWarnings ( _CHAR unused _CHAR ) public void draw ( Canvas canvas ) { if ( ! this . mVisible || this . mPath == _NULL ) return ; if ( this . mColors != _NULL && this . mColors . length == _NUM ) { this . mPaint . setColor ( this . mColors [ _NUM ] ) ; } this . onDraw ( canvas ) ; }
51959	@ Override public final GenericBindRequest nextBindRequest ( ) { return nextBindRequest ; }
51991	public AuditEvent convertToAuditEvent ( PersistentAuditEvent persistentAuditEvent ) { Instant instant = persistentAuditEvent . getAuditEventDate ( ) . atZone ( ZoneId . systemDefault ( ) ) . toInstant ( ) ; return new AuditEvent ( Date . from ( instant ) , persistentAuditEvent . getPrincipal ( ) , persistentAuditEvent . getAuditEventType ( ) , convertDataToObjects ( persistentAuditEvent . getData ( ) ) ) ; }
52038	public boolean isEnabled ( ) { return enabled ; }
52040	public static JTextField createShortTextField ( ) { JTextField tf = createTextField ( ) ; tf . setColumns ( _NUM ) ; return tf ; }
52076	protected void initTransportLayer ( ) throws IOException { input = super . getInputStream ( ) ; output = super . getOutputStream ( ) ; }
52077	public void onToggleTorch ( View v ) { if ( mWZCameraView == _NULL ) return ; WZCamera activeCamera = mWZCameraView . getCamera ( ) ; activeCamera . setTorchOn ( mBtnTorch . toggleState ( ) ) ; }
52080	public static int [ ] transformIntArray ( Integer [ ] source ) { int [ ] destin = new int [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
52091	public boolean isEnabled ( ) { return enabled ; }
52101	public Future < Long > failedCount ( String type ) { Future < Long > future = Future . future ( ) ; jobService . failedCount ( type , future . completer ( ) ) ; return future ; }
52157	public Vector multiply ( Vector vec ) { x *= vec . x ; y *= vec . y ; z *= vec . z ; return this ; }
52178	protected void onTakeView ( V view ) { }
52199	public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
52243	public boolean useStartTLS ( ) { return startTLS ; }
52267	@ SuppressWarnings ( _CHAR unchecked _CHAR ) public static < M > Iterator < M > emptyIterator ( ) { return ( Iterator < M > ) EMPTY_ITERATOR ; }
52292	@ Override public void accessEntry ( ) { this . access ( ) ; this . setPrimarySession ( _BOOL ) ; this . endAccess ( ) ; }
52331	public void addToListenersMap ( String name , Object listener ) { synchronized ( listenersMap ) { Set < Object > set = listenersMap . get ( name ) ; if ( set == _NULL ) { listenersMap . put ( name , CollectionUtils . asSet ( listener ) ) ; } else { set . add ( listener ) ; } } }
52373	void send404 ( PrintStream ps ) throws IOException { ps . println ( _CHAR Not Found \ n \ n _CHAR + _CHAR The requested resource was not found .\ n _CHAR ) ; }
52385	public boolean isServer ( ) { if ( this . firstTransactionSeen == _BOOL ) return this . serverTransactionFlag ; else return this . firstTransactionIsServerTransaction ; }
52391	public double num ( XPathContext xctxt ) throws javax . xml . transform . TransformerException { return m_val ; }
52427	private void disconnectFromReplServer ( ) throws Exception { String synchroServerStringDN = _CHAR cn = _CHAR + testName + _CHAR , cn = domains , '' + SYNCHRO_PLUGIN_DN ; assertNotNull ( synchroServerEntry ) ; DN synchroServerDN = DN . valueOf ( synchroServerStringDN ) ; deleteEntry ( synchroServerDN ) ; synchroServerEntry = _NULL ; configEntriesToCleanup . remove ( synchroServerDN ) ; }
52448	public int compareTo ( Date anotherDate ) { long thisTime = getMillisOf ( this ) ; long anotherTime = getMillisOf ( anotherDate ) ; return ( thisTime < anotherTime ? - _NUM : ( thisTime == anotherTime ? _NUM : _NUM ) ) ; }
52522	public boolean isReadOnly ( String beanName ) { return _BOOL ; }
52541	public boolean isPureJAAS ( ) { return jaasCheck ; }
52546	public void insertElementAt ( MarkData m , int index ) { oneMark [ _NUM ] = m ; replace ( index , _NUM , oneMark , _NUM ) ; }
52565	public void clearPasswordChangedTime ( ) { operations . add ( PasswordPolicyStateOperationType . CLEAR_PASSWORD_CHANGED_TIME ) ; }
52625	public boolean isMutable ( ) { return mutable ; }
52628	public void pushElemTemplateElement ( ElemTemplateElement elem ) { m_currentTemplateElements . push ( elem ) ; }
52647	void attachView ( ) { getPresenter ( ) . attachView ( delegateCallback . getMvpView ( ) ) ; }
52684	public static net . aimeizi . person . QueryParameter . Builder newBuilder ( ) { return new net . aimeizi . person . QueryParameter . Builder ( ) ; }
52709	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR _CHAR _CHAR ; db . execSQL ( sql ) ; }
52715	public void appendQuotedChars ( StringBuffer toAddTo ) { appendQuoted ( chars , toAddTo ) ; }
52718	public CTSDJLDAPv3PersistentSearchBuilder withSearchBaseDN ( DN searchBaseDN ) { Reject . ifNull ( searchBaseDN ) ; this . searchBaseDN = searchBaseDN ; return this ; }
52722	public boolean add ( ProtocolMessage pm ) { return protocolMessages . add ( pm ) ; }
52724	public Key decryptKey ( Element encryptedKey , String certAlias ) { return _NULL ; }
52755	@ Override public void init ( FilterConfig fConfig ) throws ServletException { this . filterConfig = fConfig ; this . attribute = fConfig . getInitParameter ( _CHAR attribute _CHAR ) ; }
52780	public void incrementTotalWrites ( ) { totalWrites ++ ; totalRequests ++ ; }
52823	public final void remove ( ) throws UnsupportedOperationException { throw new UnsupportedOperationException ( _CHAR Removing tokens is not supported . '' ) ; }
52850	public static void savePlayers ( ) { server . savePlayers ( ) ; }
52856	@ Override public void onDowngrade ( SQLiteDatabase db , int oldVersion , int newVersion ) { dropAllTables ( db ) ; onCreate ( db ) ; }
52890	private void processSynchPostOperationPlugins ( ) { for ( SynchronizationProvider < ? > provider : DirectoryServer . getSynchronizationProviders ( ) ) { try { provider . doPostOperation ( this ) ; } catch ( DirectoryException de ) { logger . traceException ( de ) ; logger . error ( ERR_MODDN_SYNCH_POSTOP_FAILED , getConnectionID ( ) , getOperationID ( ) , getExceptionMessage ( de ) ) ; setResponseData ( de ) ; return ; } } }
52907	private boolean isDigit ( final char c ) { return ( c >= ZERO && c < NINE ) ; }
52927	private void readObject ( java . io . ObjectInputStream in ) throws java . io . IOException , ClassNotFoundException { in . defaultReadObject ( ) ; if ( outputStream == _NULL ) { outputStream = new ByteArrayOutputStream ( ) . assignBytes ( getDebugBytes ( ) ) ; } }
52998	public boolean isSignificant ( ) { return _BOOL ; }
53004	public < E extends Enum < E >> R visitEnum ( EnumPropertyDefinition < E > pd , P p ) { return visitUnknown ( pd , p ) ; }
53014	private void makeRoom ( ) { if ( size <= MAX_SIZE ) { return ; } indexFiles ( ) ; int removals = size - MAX_SIZE ; Iterator < File > i = accessOrder . values ( ) . iterator ( ) ; do { delete ( i . next ( ) ) ; i . remove ( ) ; } while ( -- removals > _NUM ) ; }
53024	public Observable < List < GithubUser >> loadUserFollowingList ( String userName ) { return mHttpHelper . getService ( GithubApi . class ) . loadUserFollowingList ( userName ) . subscribeOn ( Schedulers . io ( ) ) . observeOn ( AndroidSchedulers . mainThread ( ) ) ; }
53053	public static boolean unequal ( final String first , final String second ) { return ! Objects . equals ( first , second ) ; }
53061	public void removeListener ( CircularProgressViewListener listener ) { listeners . remove ( listener ) ; }
53080	public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGetPost ( request , response ) ; }
53092	public static void f ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_FATAL ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . wtf ( tag , msg ) ; }
53094	public Object clone ( ) { AttrSet attrSet = new AttrSet ( ) ; int size = _attrs . size ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { attrSet . add ( ( Attr ) ( ( Attr ) _attrs . get ( i ) ) . clone ( ) ) ; } return attrSet ; }
53111	private static TypeDescription cqlStatementDescription ( ) { return new TypeDescription . Latent ( _CHAR org . apache . cassandra . cql3 . CQLStatement _CHAR , Modifier . INTERFACE , _NULL , _NULL ) ; }
53113	public boolean beginHiddenValueBoxDisplay ( ChildDisplayEvent event ) { return ( curCallback instanceof HiddenValueCallback ) ; }
53152	public static void v ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . v ( tag , msg ) ; }
53162	public static Component createHorizontalGlue ( ) { return new Filler ( new Dimension ( _NUM , _NUM ) , new Dimension ( _NUM , _NUM ) , new Dimension ( Short . MAX_VALUE , _NUM ) ) ; }
53179	public void normalizeDocument ( ) { }
53197	public static String encodeInToBase64 ( final String string ) { return Base64 . encodeBase64String ( string . getBytes ( ) ) ; }
53259	public static UIInput createTextArea ( ) { return ( UIInput ) JSFComponentFactory . createComponent ( HtmlInputTextarea . COMPONENT_TYPE ) ; }
53288	private String buildUploadUrl ( final String type ) { if ( pageContext . getRequest ( ) instanceof HttpServletRequest ) { return ( ( HttpServletRequest ) pageContext . getRequest ( ) ) . getContextPath ( ) . concat ( CKFINDER_UPLOAD_URL ) . concat ( type ) ; } else { return CKFINDER_UPLOAD_URL . concat ( type ) ; } }
53309	public JSONStringer endObject ( ) throws JSONException { return close ( Scope . EMPTY_OBJECT , Scope . NONEMPTY_OBJECT , _CHAR } _CHAR ) ; }
53312	public void stopServer ( ) throws ApplicationException { stopServer ( _BOOL ) ; }
53352	public static boolean displayConfirmation ( Component parent , LocalizableMessage msg , LocalizableMessage title ) { return JOptionPane . YES_OPTION == JOptionPane . showOptionDialog ( parent , wrapMsg ( String . valueOf ( msg ) , _NUM ) , String . valueOf ( title ) , JOptionPane . YES_NO_OPTION , JOptionPane . QUESTION_MESSAGE , _NULL , _NULL , _NULL ) ; }
53353	static String step2Groovy ( Step s ) throws UnsupportedOperationException { return object2Groovy ( new StringBuilder ( ) , s , _BOOL ) . toString ( ) ; }
53398	public boolean isLogEnabled ( ) { if ( logger == _NULL ) { return _BOOL ; } else { return logger . isLogEnabled ( ) ; } }
53400	protected void startDocumentInternal ( ) throws SAXException { if ( m_needToCallStartDocument ) { super . startDocumentInternal ( ) ; m_saxHandler . startDocument ( ) ; m_needToCallStartDocument = _BOOL ; } }
53418	public final void popCurrentNodeAndExpression ( ) { m_currentNodes . quickPop ( _NUM ) ; m_currentExpressionNodes . quickPop ( _NUM ) ; }
53419	public void removeSection ( String tag ) { this . sections . remove ( tag ) ; }
53428	public TagStructureContext removeAllConnectionsToTags ( ) { for ( PdfStructElem structElem : connectedModelToStruct . values ( ) ) { removeStructToModelConnection ( structElem ) ; } connectedModelToStruct . clear ( ) ; return this ; }
53461	protected void onSessionTimeout ( RequestContext requestContext ) throws ServletException { }
53471	public boolean isClosed ( ) { return this . closed ; }
53524	private String [ ] listTestParents ( ManagementContext context ) throws Exception { ManagedObject < RootCfgClient > root = context . getRootConfigurationManagedObject ( ) ; return root . listChildren ( TestCfg . getTestOneToManyParentRelationDefinition ( ) ) ; }
53564	public void SwitchTo ( int lexState ) { if ( lexState >= _NUM || lexState < _NUM ) throw new TokenMgrError ( _CHAR Error : Ignoring invalid lexical state : _CHAR + lexState + _CHAR . State unchanged . '' , TokenMgrError . INVALID_LEXICAL_STATE ) ; else curLexState = lexState ; }
53569	public void animateViewIfNecessary ( final int position , @ NonNull final View view , @ NonNull final Animator [ ] animators ) { if ( mShouldAnimate && position > mLastAnimatedPosition ) { if ( mFirstAnimatedPosition == - _NUM ) { mFirstAnimatedPosition = position ; } animateView ( position , view , animators ) ; mLastAnimatedPosition = position ; } }
53585	public String encode ( ) { String encoding = SIPConstants . SIP_VERSION_STRING + SP + statusCode ; if ( reasonPhrase != _NULL ) encoding += SP + reasonPhrase ; encoding += NEWLINE ; return encoding ; }
53599	public final AMAccessAuditEventBuilder response ( AccessAuditEventBuilder . ResponseStatus status , String statusCode ) { Object object = object ( field ( _CHAR status _CHAR , status == _NULL ? _NULL : status . toString ( ) ) , field ( _CHAR statusCode _CHAR , statusCode ) ) ; this . jsonValue . put ( _CHAR response _CHAR , object ) ; return this ; }
53601	public static UICommand createCommandButton ( final String value ) { final UICommand cmd = ( UICommand ) JSFComponentFactory . createComponent ( CommandButton . COMPONENT_TYPE ) ; cmd . setValueExpression ( TagAttributeConstants . VALUE , JSFComponentFactory . createLabelValueExpression ( value ) ) ; return cmd ; }
53615	public static int [ ] transformIntArray ( Integer [ ] source ) { int [ ] destin = new int [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
53620	public void removeSelectedMarker ( ) { this . markers . remove ( this . selectedMarker ) ; this . selectedMarker . remove ( ) ; }
53625	public RESTEndpointBuilder post ( ) { this . httpMethod = HTTPMethod . POST ; return this ; }
53645	public JKMobileContext createMobileContext ( ) { return new JKMobileContext ( ) ; }
53646	@ DataProvider ( name = _CHAR rsGroupIdProvider _CHAR ) private Object [ ] [ ] rsGroupIdProvider ( ) { return new Object [ ] [ ] { { ( byte ) _NUM } , { ( byte ) _NUM } } ; }
53681	public Authenticator authenticator ( ) { return authenticator ; }
53703	public void registerAboveContentView ( View v , LayoutParams params ) { if ( ! mBroadcasting ) mViewAbove = v ; }
53716	public static boolean validate ( SSOToken token , String clazz , Set values ) throws SMSException { try { SMSJAXRPCObject smsObj = new SMSJAXRPCObject ( ) ; return smsObj . validateServiceAttributes ( token , clazz , values ) ; } catch ( SSOException e ) { return _BOOL ; } }
53718	public static int readInt16 ( DataInput di ) throws IOException { final byte [ ] buf = { _NUM , _NUM } ; di . readFully ( buf , _NUM , _NUM ) ; final int i = ByteBuffer . wrap ( buf ) . getShort ( ) ; return i ; }
53719	public static void redirectToWebSite ( Context from , String url ) { Intent i = new Intent ( Intent . ACTION_VIEW ) ; i . setData ( Uri . parse ( url ) ) ; from . startActivity ( i ) ; }
53725	public boolean beginValidContentDisplay ( ChildDisplayEvent event ) { return ! LoginSuccess && ! LoginFail && ! bValidSession ; }
53728	public static final long fileTimeToWinTime ( FileTime ftime ) { return ( ftime . to ( TimeUnit . MICROSECONDS ) - WINDOWS_EPOCH_IN_MICROSECONDS ) * _NUM ; }
53748	public void fatalError ( SAXParseException e ) throws SAXException { if ( errorHandler != _NULL ) { errorHandler . fatalError ( e ) ; } }
53772	public void resetModifications ( ) { mods . clear ( ) ; }
53821	public void transact ( String script ) { mJsExecutor . transact ( script ) ; }
53822	public void requestAuthenticationFailureTimes ( ) { operations . add ( PasswordPolicyStateOperationType . GET_AUTHENTICATION_FAILURE_TIMES ) ; }
53869	public void onLoginFailure ( Map requestParamsMap , HttpServletRequest req , HttpServletResponse res ) throws AuthenticationException { }
53907	public String toString ( ) { return label ; }
53908	public void format ( CommandManager mgr ) throws CLIException { StringBuffer buff = new StringBuffer ( ) ; buff . append ( _CHAR \ n \ n _CHAR ) ; formatUsage ( mgr , buff ) ; formatGlobalOptions ( mgr , buff ) ; formatSubcmds ( mgr , buff ) ; mgr . getOutputWriter ( ) . printlnMessage ( buff . toString ( ) ) ; }
53920	public boolean addEdit ( UndoableEdit anEdit ) { return _BOOL ; }
53924	protected Expression numberlit ( int opPos ) { opPos = getFirstChildPos ( opPos ) ; return ( XNumber ) getTokenQueue ( ) . elementAt ( getOp ( opPos ) ) ; }
53941	protected synchronized void shutdown ( ) { if ( _ldapPool != _NULL ) { _ldapPool . close ( ) ; } _ldapPool = _NULL ; m_instance = _NULL ; }
53953	@ Override public boolean isPowered ( ) { return getItemType ( ) == Material . REDSTONE_COMPARATOR_ON ; }
53962	@ Override public EnumEvalResult evaluate ( AciEvalContext evalCtx ) { EnumEvalResult matched = getMatched ( evalCtx . getCurrentSSF ( ) ) ; return matched . getRet ( type , _BOOL ) ; }
53992	public boolean isLockedOut ( ) { boolean isLockedOut = amlc . isLockedOut ( ) ; if ( authDebug . messageEnabled ( ) ) { authDebug . message ( _CHAR isLockedOut : _CHAR + isLockedOut ) ; } return isLockedOut ; }
54017	public R visitInteger ( IntegerPropertyDefinition pd , P p ) { return visitUnknown ( pd , p ) ; }
54029	protected Expression minus ( int opPos ) throws TransformerException { return compileOperation ( new Minus ( ) , opPos ) ; }
54057	public String toXML ( ) { return toXML ( _BOOL ) ; }
54072	private Future < Void > publish ( Record record ) { if ( discovery == _NULL ) { try { start ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( _CHAR Can not create discovery service _CHAR ) ; } } Future < Void > future = Future . future ( ) ; discovery . publish ( record , _NULL ) ; return future ; }
54103	protected Expression literal ( int opPos ) { opPos = getFirstChildPos ( opPos ) ; return ( XString ) getTokenQueue ( ) . elementAt ( getOp ( opPos ) ) ; }
54139	private void processSynchPostOperationPlugins ( ) { for ( SynchronizationProvider < ? > provider : getSynchronizationProviders ( ) ) { try { provider . doPostOperation ( this ) ; } catch ( DirectoryException de ) { logger . traceException ( de ) ; logger . error ( ERR_DELETE_SYNCH_POSTOP_FAILED , getConnectionID ( ) , getOperationID ( ) , getExceptionMessage ( de ) ) ; setResponseData ( de ) ; return ; } } }
54144	@ SuppressWarnings ( _CHAR unchecked _CHAR ) final E itemAt ( int i ) { return ( E ) items [ i ] ; }
54148	public NewID createNewID ( Element value ) throws SAML2Exception { Object obj = SAML2SDKUtils . getObjectInstance ( SAML2SDKUtils . NEWID , value ) ; if ( obj == _NULL ) { return new NewIDImpl ( value ) ; } else { return ( NewID ) obj ; } }
54164	public void treeNodesChanged ( TreeModelEvent e ) { fireVisibleDataPropertyChange ( ) ; }
54182	public static File writeDataToTempFile ( final byte [ ] data , final String suffix ) { try { File file = File . createTempFile ( _CHAR jk - _CHAR , suffix ) ; return writeDataToFile ( data , file ) ; } catch ( IOException e ) { JKExceptionUtil . handle ( e ) ; return _NULL ; } }
54206	public void onToggleTorch ( View v ) { if ( mWZCameraView == _NULL ) return ; WZCamera activeCamera = mWZCameraView . getCamera ( ) ; activeCamera . setTorchOn ( mBtnTorch . toggleState ( ) ) ; }
54215	float nextTab ( float h ) { if ( mTabs != _NULL ) { return mTabs . nextTab ( h ) ; } return Layout . TabStops . nextDefaultStop ( h , Layout . TAB_INCREMENT ) ; }
54223	public void deleteArtworkField ( ) throws KeyNotFoundException { }
54291	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR HTML_ENTITY \ _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR \ _CHAR URL \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR TYPE \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR TITLE \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR HTML \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR SUMMARY \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR COLLECT \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR HIRE_DATE \ _CHAR INTEGER ) ; _CHAR ) ; }
54305	private void resetSettings ( ) { sharedPreferences . edit ( ) . clear ( ) . commit ( ) ; sharedPreferences . edit ( ) . putBoolean ( PREF_KEY_ACCEPTED_DISCAIMER , _BOOL ) ; sharedPreferences . edit ( ) . commit ( ) ; startActivity ( new Intent ( this , ActivitySettings . class ) ) ; finish ( ) ; }
54312	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR GREEN_UPDATE \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
54324	public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws SAXException { if ( contentHandler != _NULL ) { contentHandler . ignorableWhitespace ( ch , start , length ) ; } }
54340	public void addToPartialMatchMap ( String ua , String clientType ) { partialMatchMap . put ( ua , clientType ) ; }
54373	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR _CHAR ( _CHAR + _CHAR _CHAR INTEGER PRIMARY KEY AUTOINCREMENT , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR TEXT , _CHAR + _CHAR _CHAR INTEGER ) ; _CHAR ) ; }
54387	public boolean is_stitch_route ( ) { return is_stitch_route ; }
54405	public void addEventHandler ( final EventTypes event , final Class < ? extends IEventHandler > eventHandler ) { EventCommandData eventCommandData = new EventCommandData ( eventHandler ) ; eventHandlers . get ( event ) . add ( eventCommandData ) ; }
54428	@ Override public void onMessageReceived ( String from , Bundle data ) { if ( GcmHelper . DEBUG_ENABLED ) { Log . d ( GcmHelper . TAG , _CHAR GcmMessagingListener From : _CHAR + from ) ; GcmHelper . printBundle ( data ) ; } GcmHelper . getInstance ( ) . messageReceived ( getApplicationContext ( ) , from , data ) ; }
54429	@ Override public void pack ( ) { setPreferredSize ( new Dimension ( _NUM , _NUM ) ) ; addComponentListener ( new MinimumSizeComponentListener ( this , _NUM , _NUM ) ) ; super . pack ( ) ; closeButton . requestFocusInWindow ( ) ; getRootPane ( ) . setDefaultButton ( closeButton ) ; }
54437	public final void popCurrentNode ( ) { m_currentNodes . quickPop ( _NUM ) ; }
54462	public static long [ ] transformLongArray ( Long [ ] source ) { long [ ] destin = new long [ source . length ] ; for ( int i = _NUM ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
54466	private void findFreePorts ( ) throws Exception { int [ ] ports = TestCaseUtils . findFreePorts ( _NUM ) ; int i = _NUM ; rs1Port = ports [ i ++ ] ; rs2Port = ports [ i ++ ] ; rs3Port = ports [ i ++ ] ; }
54480	public void removeListener ( PrintStreamListener listener ) { listeners . remove ( listener ) ; }
54525	public String toBASE64EncodedString ( ) throws FSMsgException { if ( ( responseID == _NULL ) || ( responseID . length ( ) == _NUM ) ) { responseID = FSUtils . generateID ( ) ; if ( responseID == _NULL ) { FSUtils . debug . error ( _CHAR FSLogoutResponse . toBASE64EncodedString : _CHAR + _CHAR could n _CHAR_CHAR_CHAR_CHAR , null ) ; } } return Base64 . encode ( this . toXMLString ( ) . getBytes ( ) ) ; }
54530	public static boolean isDateEqaualed ( final java . util . Date date1 , final java . util . Date date2 ) { final String d1 = JKFormatUtil . formatDate ( date1 , JKFormatUtil . MYSQL_DATE_DB_PATTERN ) ; final String d2 = JKFormatUtil . formatDate ( date2 , JKFormatUtil . MYSQL_DATE_DB_PATTERN ) ; return d1 . equalsIgnoreCase ( d2 ) ; }
54561	private void displayError ( LocalizableMessage msg , LocalizableMessage title ) { Utilities . displayError ( this , msg , title ) ; toFront ( ) ; }
54568	@ DataProvider ( name = _CHAR kiloBytes _CHAR ) public Object [ ] [ ] kiloBytes ( ) { return new Object [ ] [ ] { { _NUM } , { _NUM } , { _NUM } , { _NUM } , { _NUM } } ; }
54607	public void schemaChanged ( String serviceName , String version ) { if ( debug . messageEnabled ( ) ) { debug . message ( _CHAR IdRepoPluginsCache : Schema changed called _CHAR + _CHAR Service name : _CHAR + serviceName ) ; } clearIdRepoPluginsCache ( ) ; }
54615	public void copyTo ( OutputStream outputStream ) throws IOException { outputStream . write ( bytes , _NUM , contentLength ) ; }
54643	private void enqueueNextTask ( String queueName , DispatcherTask dispatcherTask ) { synchronized ( syncRoot ) { Queue < DispatcherTask > queue = taskQueuesMap . get ( queueName ) ; if ( queue == _NULL ) { queue = new LinkedList < > ( ) ; taskQueuesMap . put ( queueName , queue ) ; } queue . add ( dispatcherTask ) ; } }
54644	@ Override public boolean matchFilter ( Filter filter , DataType userDefinedValue ) throws IllegalArgumentException { throw new IllegalArgumentException ( _CHAR Matching filter not found for the datatype '' + userDefinedValue . getClass ( ) . toString ( ) + _CHAR . _CHAR ) ; }
54664	public boolean isUserIDGeneratorEnabled ( ) { return userIDGeneratorEnabled ; }
54685	public static String generateTempFileAtExternalStorage ( String folder , String prefix , String ext ) { File file = generateFileOnExternalStorage ( folder , prefix , ext ) ; if ( file == _NULL ) return _NULL ; return Uri . fromFile ( file ) . getPath ( ) ; }
54802	public boolean isColumnEnabled ( final int col ) { return this . columnsValues . get ( col ) . isEnabled ( ) ; }
54811	private void writeHostnameContents ( ServerDescriptor desc , int maxLabelWidth ) { writeLabelValue ( INFO_HOSTNAME_LABEL . get ( ) , desc . getHostname ( ) , maxLabelWidth ) ; }
54820	public void characters ( char ch [ ] , int start , int length ) throws SAXException { if ( documentHandler != _NULL ) documentHandler . characters ( ch , start , length ) ; }
54828	public static int computeStation ( float frequency ) { return ( int ) ( frequency * CONVERT_RATE ) ; }
54851	public void delete ( ) throws AMException , SSOException { delete ( _BOOL ) ; }
54868	public void processingInstruction ( String target , String data ) throws SAXException { if ( DEBUG ) System . out . println ( _CHAR TransformerHandlerImpl # processingInstruction : _CHAR + target + _CHAR , _CHAR + data ) ; if ( m_contentHandler != _NULL ) { m_contentHandler . processingInstruction ( target , data ) ; } }
54871	public void addListener ( PrintStreamListener listener ) { listeners . add ( listener ) ; }
54927	public void commit ( ) throws CannotWriteException { try { save ( ) ; } catch ( IOException ioe ) { throw new CannotWriteException ( ioe ) ; } catch ( TagException te ) { throw new CannotWriteException ( te ) ; } }
54930	public TimeUnit timeunit ( ) { return values . timeunit ; }
54957	public void grantReadPermission ( Collection attributeNames ) { Iterator it = attributeNames . iterator ( ) ; if ( it != _NULL ) { while ( it . hasNext ( ) ) { String temp = ( String ) it . next ( ) ; readables . add ( temp . toLowerCase ( ) ) ; } } }
55001	@ Override public void flush ( ) throws IOException { out . flush ( ) ; }
55035	public Object clone ( ) { SimpleAttributeSet attr ; try { attr = ( SimpleAttributeSet ) super . clone ( ) ; attr . table = ( LinkedHashMap ) table . clone ( ) ; } catch ( CloneNotSupportedException cnse ) { attr = _NULL ; } return attr ; }
55063	@ Override public int hashCode ( ) { int code = _NUM ; if ( eSubject != _NULL ) { code += eSubject . hashCode ( ) ; } if ( pSubjectName != _NULL ) { code += pSubjectName . hashCode ( ) ; } return code ; }
55080	@ Override public void handleException ( final LdapException exception ) { notifyOffline ( exception ) ; }
55162	private void enableBle ( ) { final Intent enableIntent = new Intent ( BluetoothAdapter . ACTION_REQUEST_ENABLE ) ; startActivityForResult ( enableIntent , Utils . REQUEST_ENABLE_BT ) ; }
55227	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR URL_COLLECT \ _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR \ _CHAR URL \ _CHAR TEXT NOT NULL , _CHAR + _CHAR \ _CHAR COMMENT \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR DATE \ _CHAR INTEGER , _CHAR + _CHAR \ _CHAR G_TYPE \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR G_AUTHOR \ _CHAR TEXT ) ; _CHAR ) ; }
55264	public void updateReadTime ( long time ) { if ( time > _NUM && time < readTimeMin ) { readTimeMin = time ; } if ( time > readTimeMax ) { readTimeMax = time ; } readCumulativeCount += time ; readTimeAverage = readCumulativeCount / totalReads ; }
55270	public JKContext createDesktopContext ( ) { return new JKDesktopContext ( ) ; }
55274	@ Override public void onLoadFinished ( Loader < Cursor > loader , Cursor data ) { mAdapter . swapCursor ( data ) ; }
55334	@ AfterClass public void enableLogging ( ) { TestCaseUtils . setDefaultLogLevel ( Level . INFO ) ; }
55338	public static UIComponent createForm ( ) { return JSFComponentFactory . createComponent ( UIForm . COMPONENT_TYPE ) ; }
55356	private void findFreePorts ( ) throws IOException { int [ ] ports = TestCaseUtils . findFreePorts ( _NUM ) ; int i = _NUM ; rs1Port = ports [ i ++ ] ; rs2Port = ports [ i ++ ] ; rs3Port = ports [ i ++ ] ; }
55368	public void addWidgets ( WidgetsModel model ) { mView . setWidgets ( model ) ; mAdapter . setWidgetsModel ( model ) ; mAdapter . notifyDataSetChanged ( ) ; }
55376	public PdfPage addPage ( int index , PdfPage page ) { checkClosingStatus ( ) ; checkAndAddPage ( index , page ) ; currentPage = page ; dispatchEvent ( new PdfDocumentEvent ( PdfDocumentEvent . INSERT_PAGE , page ) ) ; return currentPage ; }
55409	public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = _CHAR DROP TABLE _CHAR + ( ifExists ? _CHAR IF EXISTS _CHAR : _CHAR _CHAR ) + _CHAR \ _CHAR HTML_ENTITY \ _CHAR _CHAR ; db . execSQL ( sql ) ; }
55428	public void removeAllChildren ( ) { children . clear ( ) ; }
55433	public Token peekNextToken ( ) throws ParseException { return ( Token ) peekNextToken ( _NUM ) [ _NUM ] ; }
55451	public void addAttribute ( String key , String value ) { extraSessionAttributes . put ( key , value ) ; }
55454	public static void stopServer ( ) { LDAPServer . getInstance ( ) . stop ( ) ; }
55455	public void processInput ( ) { mythread . start ( ) ; }
55467	public void grantWritePermission ( Collection attributeNames ) { Iterator it = attributeNames . iterator ( ) ; if ( it != _NULL ) { while ( it . hasNext ( ) ) { String temp = ( String ) it . next ( ) ; writables . add ( temp . toLowerCase ( ) ) ; } } }
55522	public InputSource resolveEntity ( String publicId , String systemId ) throws SAXException , IOException { if ( entityResolver != _NULL ) { return entityResolver . resolveEntity ( publicId , systemId ) ; } else { return _NULL ; } }
55532	private void publishInDebugLogger ( String message , Throwable t ) { tracer . traceException ( message , t ) ; }
55535	public void onLoginFailure ( Map requestParamsMap , HttpServletRequest req , HttpServletResponse res ) throws AuthenticationException { debug . message ( _CHAR FirstTimeLogin . onLoginFailure : called _CHAR ) ; }
55537	public int slowQueryThreshold ( ) { return values . slowQueryThresholdInMilliseconds ; }
55561	public static void usage ( ) { println ( _CHAR java Agent < nb_traps > _CHAR ) ; println ( _CHAR where _CHAR ) ; println ( _CHAR - nb_traps : _CHAR + _CHAR number of traps the SNMP agent will send . '' ) ; println ( _CHAR _CHAR + _CHAR If not specified , the agent will send traps continuously . '' ) ; }
55586	@ Override public void initParams ( HttpServletRequest request , IConfiguration configuration , Object ... params ) throws ConnectorException { super . initParams ( request , configuration ) ; this . files = new ArrayList < > ( ) ; getFilesListFromRequest ( request ) ; }
55596	public static String formatStation ( int station ) { float frequency = ( float ) station / CONVERT_RATE ; String result = String . format ( Locale . ENGLISH , _CHAR % . _NUM _CHAR , Float . valueOf ( frequency ) ) ; return result ; }
55613	public Vector zero ( ) { x = _NUM ; y = _NUM ; z = _NUM ; return this ; }
55641	public boolean isFinalResponse ( ) { return isFinalResponse ( statusLine . getStatusCode ( ) ) ; }
55737	public Builder removeAttribute ( String attributeOID ) { this . attributeOIDs . remove ( attributeOID ) ; return this ; }
55821	public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws SAXException { if ( DEBUG ) System . out . println ( _CHAR TransformerHandlerImpl # ignorableWhitespace : _CHAR + start + _CHAR , _CHAR + length ) ; if ( m_contentHandler != _NULL ) { m_contentHandler . ignorableWhitespace ( ch , start , length ) ; } }
55832	protected Textifier createTextifier ( ) { return new Textifier ( ) ; }
55857	protected void PushStack ( ) { arg_count ++ ; }
55869	public static Executor createTaskDistributor ( ) { return Executors . newCachedThreadPool ( createThreadFactory ( Thread . NORM_PRIORITY , _CHAR uil - pool - d - _CHAR ) ) ; }
55888	public void delete ( int startIndex , int endIndex ) { AccessibleEditableText at = getEditorAccessibleEditableText ( ) ; if ( at != _NULL ) { at . delete ( startIndex , endIndex ) ; } }
55906	public void endHeader ( ) { }
55923	protected void closeTransportLayer ( ) throws IOException { super . close ( ) ; if ( input != _NULL ) { input . close ( ) ; output . close ( ) ; } }
55957	public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? _CHAR IF NOT EXISTS _CHAR : _CHAR _CHAR ; db . execSQL ( _CHAR CREATE TABLE _CHAR + constraint + _CHAR \ _CHAR GREEN_STRATEGY \ _CHAR ( _CHAR + _CHAR \ _CHAR _id \ _CHAR INTEGER PRIMARY KEY , _CHAR + _CHAR \ _CHAR STRATEGYLISTJSON \ _CHAR TEXT , _CHAR + _CHAR \ _CHAR STRATEGYTYPE \ _CHAR TEXT ) ; _CHAR ) ; }
56059	private CompletionStage < Done > prepareWriteOffset ( CassandraSession session ) { return session . prepare ( _CHAR INSERT INTO cargo_offset ( partition , offset ) VALUES ( _NUM , ? ) _CHAR ) . thenApply ( _NULL ) ; }
56067	@ Override public boolean onCreatePanelMenu ( final int featureId , final Menu menu ) { return delegate . onCreatePanelMenu ( featureId , menu ) ; }
56071	public void add ( AddRequest request ) throws LdapException { addControls ( request ) ; conn . getConnection ( ) . add ( request ) ; }
56094	public void appendErrorNodeChild ( final int errorCode , final String name , final String path , final String type ) { ErrorNode errorNode = new ErrorNode ( path , type , name , errorCode ) ; errorList . add ( errorNode ) ; }
56101	public boolean isHtmlTag ( ) { return getLocalName ( ) . equals ( _CHAR html _CHAR ) ; }
56140	public void visitLocalVariable ( String name , String desc , String signature , Label start , Label end , int index ) { if ( mv != _NULL ) { mv . visitLocalVariable ( name , desc , signature , start , end , index ) ; } }
56147	public void visitInsn ( int opcode ) { if ( mv != _NULL ) { mv . visitInsn ( opcode ) ; } }
56196	private JSONObject toJSONObject ( ) throws JSONException { JSONObject jo = new JSONObject ( ) ; jo . put ( _CHAR propertyName _CHAR , propertyName ) ; jo . put ( _CHAR propertyValues _CHAR , propertyValues ) ; jo . put ( _CHAR pResponseProviderName _CHAR , pResponseProviderName ) ; return jo ; }
56258	public final void connectTarget ( boolean secure ) { if ( this . connected ) { throw new IllegalStateException ( _CHAR Already connected . '' ) ; } this . connected = _BOOL ; this . secure = secure ; }
56282	public Builder removeAllNames ( ) { this . names . clear ( ) ; return this ; }
56314	@ Override public String toString ( ) { String s = _NULL ; try { JSONObject jo = toJSONObject ( ) ; s = ( jo == _NULL ) ? super . toString ( ) : jo . toString ( _NUM ) ; } catch ( JSONException e ) { PolicyConstants . DEBUG . error ( _CHAR NotCondition . toString ( ) _CHAR , e ) ; } return s ; }
56320	public static void main ( String [ ] args ) { try { ProgressDialog dlg = new ProgressDialog ( new JFrame ( ) ) ; dlg . pack ( ) ; dlg . setVisible ( _BOOL ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } }
