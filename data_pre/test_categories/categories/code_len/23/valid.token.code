17730	public void check ( ) { while ( _BOOL ) { switch ( state ) { case INITIALIZE : try { synchronized ( this ) { if ( state == READY ) { return ; } wait ( _NUM ) ; } } catch ( InterruptedException e ) { } break ; case READY : return ; default : throw new RemoteExceptionWrapper ( new NoSuchObjectException ( _CHAR service is unavailable _CHAR ) ) ; } } }
28222	public static String delimiterConverter ( String delimiter ) { switch ( delimiter ) { case _CHAR | _CHAR : case _CHAR * _CHAR : case _CHAR . _CHAR : case _CHAR : _CHAR : case _CHAR ^ _CHAR : case _CHAR \\ _CHAR : case _CHAR $ _CHAR : case _CHAR + _CHAR : case _CHAR ? _CHAR : case _CHAR ( _CHAR : case _CHAR ) '' : case '' { _CHAR : case _CHAR } '' : case '' [ '' : case '' ] '' : return '' \\ '' + delimiter ; default : return delimiter ; } }
45815	public void deleteField ( FieldKey genericKey ) { switch ( genericKey ) { case ARTIST : setArtist ( _CHAR _CHAR ) ; break ; case ALBUM : setAlbum ( _CHAR _CHAR ) ; break ; case TITLE : setTitle ( _CHAR _CHAR ) ; break ; case GENRE : setGenre ( _CHAR _CHAR ) ; break ; case YEAR : setYear ( _CHAR _CHAR ) ; break ; case COMMENT : setComment ( _CHAR _CHAR ) ; break ; } }
49453	public synchronized void releaseLockAndNotify ( ) throws IllegalMonitorStateException { if ( owner == Thread . currentThread ( ) ) { if ( acquireCount > _NUM ) { acquireCount -- ; } else { owner = _NULL ; acquireCount = _NUM ; if ( waitCount > _NUM ) { if ( expired ) { this . notifyAll ( ) ; } else { this . notify ( ) ; } } } } else { throw new IllegalMonitorStateException ( _CHAR The calling thread is not the owner of the lock ! _CHAR ) ; } }
