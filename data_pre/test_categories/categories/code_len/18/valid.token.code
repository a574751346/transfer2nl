84	public void onException ( JMSException je ) { this . setConnected ( _BOOL ) ; Debug . logError ( je , _CHAR JMS connection exception _CHAR , module ) ; while ( ! isConnected ( ) ) { try { this . refresh ( ) ; } catch ( GenericServiceException e ) { try { Thread . sleep ( _NUM ) ; } catch ( InterruptedException ie ) { } continue ; } } }
320	public void terminate ( ) { run = _BOOL ; if ( ss != _NULL ) { try { ss . close ( ) ; } catch ( Exception e ) { logger . log ( Level . WARNING , _CHAR Exception closing Webster ServerSocket _CHAR , e ) ; } } if ( lifeCycle != _NULL ) { lifeCycle . unregister ( this ) ; } if ( pool != _NULL ) { pool . shutdown ( ) ; } }
2964	public void close ( ) throws JMSException { try { if ( ! m_closed ) { if ( _logger . isLoggable ( Level . FINE ) ) { _logger . fine ( _CHAR GSQueueBrowserImpl . close ( ) closing browser : _CHAR + toString ( ) ) ; } m_session . removeBrower ( this ) ; } m_closed = _BOOL ; } finally { if ( _NULL != gsIterator ) { gsIterator . cancel ( ) ; gsIterator = _NULL ; } } }
5192	public Properties readSettings ( ) { try { String pacScriptUrl = detectScriptUrlPerDHCP ( ) ; if ( pacScriptUrl == _NULL ) { pacScriptUrl = detectScriptUrlPerDNS ( ) ; } if ( pacScriptUrl == _NULL ) { return _NULL ; } Properties result = new Properties ( ) ; result . setProperty ( _CHAR url _CHAR , pacScriptUrl ) ; return result ; } catch ( IOException e ) { return new Properties ( ) ; } }
5231	private EtcdKeysResponse handleEtcdWatchErrors ( EtcdException exception ) { if ( exception . errorCode == ETCD_EVENT_INDEX_CLEARED_CODE ) { initialSetAllFlagz ( ) ; return _NULL ; } else if ( exception . errorCode == ETCD_WATCHER_CLEARED_CODE ) { try { Thread . sleep ( reelectionBackoffMs . get ( ) ) ; } catch ( InterruptedException e1 ) { } return _NULL ; } else { throw new EtcdFlagFieldUpdaterException . EtcdFetchingFailed ( exception ) ; } }
5759	public static void validateCmdLineArguments ( ITunesInputParameters inputParameters ) throws ArgumentValidationException { switch ( inputParameters . getCmdLineArgs ( ) . getMode ( ) ) { case convert : validateConvertMode ( inputParameters ) ; break ; case metadata : validateMetadataMode ( inputParameters ) ; break ; case audiomap : validateAudiomapMode ( inputParameters ) ; break ; case chapters : validateChaptersMode ( inputParameters ) ; break ; default : } }
7068	public boolean shouldJobPauseOrTerminate ( ) { if ( Singleton . getBackgroundJobsEnabled ( ) == _BOOL ) { return _BOOL ; } while ( CodeIndexer . shouldPauseAdding ( ) ) { if ( Singleton . getBackgroundJobsEnabled ( ) == _BOOL ) { return _BOOL ; } Singleton . getLogger ( ) . info ( _CHAR Pausing parser . '' ) ; try { Thread . sleep ( SLEEPTIME ) ; } catch ( InterruptedException ex ) { } } return _BOOL ; }
7271	public Properties readSettings ( ) { try { String pacScriptUrl = detectScriptUrlPerDHCP ( ) ; if ( pacScriptUrl == _NULL ) { pacScriptUrl = detectScriptUrlPerDNS ( ) ; } if ( pacScriptUrl == _NULL ) { return _NULL ; } Properties result = new Properties ( ) ; result . setProperty ( _CHAR url _CHAR , pacScriptUrl ) ; return result ; } catch ( IOException e ) { return new Properties ( ) ; } }
7331	private static boolean hasSelfPermission ( Context context , String permission ) { switch ( Build . MANUFACTURER ) { case _CHAR Xiaomi _CHAR : { return checkSelfPermissionForXiaomi ( context , permission ) ; } default : { try { return checkSelfPermission ( context , permission ) == PackageManager . PERMISSION_GRANTED ; } catch ( RuntimeException t ) { return _BOOL ; } } } }
12267	public T next ( ) { if ( enable ) { if ( done ) { return _NULL ; } if ( next == _NULL ) hasNext ( ) ; if ( next != _NULL ) { T result = ( T ) next ; next = _NULL ; return result ; } else { return _NULL ; } } else return iterator . next ( ) ; }
13344	public Object nextValue ( ) throws JSONException { int c = nextCleanInternal ( ) ; switch ( c ) { case - _NUM : throw syntaxError ( _CHAR End of input _CHAR ) ; case _CHAR : return readObject ( ) ; case _CHAR : return readArray ( ) ; case _CHAR_CHAR _CHAR _CHAR : return nextString ( ( char ) c ) ; default : pos -- ; return readLiteral ( ) ; } }
13680	public boolean isInteriorRight ( ) { double diff = v0 . point . y - v1 . point . y ; if ( diff == _NUM . _NUM ) { if ( v0 . point . x < v1 . point . x ) { return _BOOL ; } else { return _BOOL ; } } else if ( diff > _NUM . _NUM ) { return _BOOL ; } else { return _BOOL ; } }
13797	public synchronized void writeLock ( ) { while ( activeWriter || activeReaders != _NUM || waitingPriorityWriters != _NUM ) { try { waitingWriters ++ ; try { wait ( ) ; } finally { waitingWriters -- ; } } catch ( InterruptedException e ) { throw new ConcurrentLockException ( _CHAR write lock interrupted in thread _CHAR ) ; } } activeWriter = _BOOL ; }
15770	public static boolean isBindable ( TypeName typeName ) { if ( typeName instanceof ParameterizedTypeName ) { for ( TypeName t : ( ( ParameterizedTypeName ) typeName ) . typeArguments ) { if ( ! isBindable ( t ) ) { return _BOOL ; } } return _BOOL ; } else if ( typeName instanceof ClassName ) { return _BOOL ; } else if ( typeName instanceof WildcardTypeName ) { return _BOOL ; } else return typeName . isPrimitive ( ) ; }
16034	public boolean isSourcesModified ( ) { if ( myInitialItems == _NULL ) { return _BOOL ; } if ( getItems ( ) . size ( ) != myInitialItems . size ( ) ) { return _BOOL ; } for ( Row row : getItems ( ) ) { if ( row . isModified ( ) ) { return _BOOL ; } if ( ! myInitialItems . contains ( row . mySource ) ) { return _BOOL ; } } return _BOOL ; }
16183	private void updatePressPosition ( int buttonIndex , RectF rectF ) { if ( buttonIndex < _NUM ) { return ; } if ( isPointInRectF ( pressPointF , rectF ) ) { if ( ! pressInButton ) { updatePressState ( buttonIndex , _BOOL ) ; pressInButton = _BOOL ; } } else { if ( pressInButton ) { updatePressState ( buttonIndex , _BOOL ) ; pressInButton = _BOOL ; } } }
18825	@ ManagedOperation ( description = _CHAR Runs all recovery actions - to be used after a unclean server shutdown ( kill ) _CHAR ) public void recover ( ) { if ( ! stopRequested ) { publishUnpublishedAlarms ( ) ; } if ( ! stopRequested ) { refreshStateTags ( ) ; } if ( ! stopRequested ) { refreshDataTags ( ) ; } if ( ! stopRequested ) { notifyAllTagCacheListeners ( ) ; } if ( ! stopRequested ) { refreshSupervisionStatus ( ) ; } }
21846	private void handleStartedH ( boolean workOngoing ) { switch ( mVerb ) { case VERB_STARTING : mVerb = VERB_EXECUTING ; if ( ! workOngoing ) { handleFinishedH ( _BOOL ) ; return ; } if ( mCancelled . get ( ) ) { handleCancelH ( ) ; return ; } scheduleOpTimeOut ( ) ; break ; default : } }
23586	public String toString ( ) { if ( type == ERROR . type ) { return _CHAR StatusType . ERROR _CHAR ; } else if ( type == WARNING . type ) { return _CHAR StatusType . WARNING _CHAR ; } else if ( type == NOTICE . type ) { return _CHAR StatusType . NOTICE _CHAR ; } else if ( type == NORMAL . type ) { return _CHAR StatusType . NORMAL _CHAR ; } else { return _CHAR StatusType . '' + type ; } }
25352	public ElasticListView enableUpdateHeader ( boolean enable ) throws IllegalStateException { if ( enable ) { if ( ! mEnableUpdater ) { if ( getHeaderViewsCount ( ) > _NUM ) { throw new IllegalStateException ( _CHAR Make sure there is no _CHAR + _CHAR other headers in ListView before enable update header _CHAR ) ; } super . addHeaderView ( mUpdateHeader , _NULL , _BOOL ) ; } } else { if ( mEnableUpdater ) { removeHeaderView ( mUpdateHeader ) ; } } mEnableUpdater = enable ; return this ; }
25915	public void run ( ) { try { while ( _BOOL ) { Reference ref = queue . remove ( ) ; ref . clear ( ) ; synchronized ( refs ) { refs . remove ( ref ) ; if ( refs . isEmpty ( ) ) { reaper = _NULL ; return ; } } } } catch ( InterruptedException e ) { } }
27632	@ Override public void dispose ( ) { if ( receiveThread != _NULL ) { receiveThread . interrupt ( ) ; try { receiveThread . join ( ) ; } catch ( InterruptedException e ) { } receiveThread = _NULL ; } if ( serialPort != _NULL ) { serialPort . close ( ) ; serialPort = _NULL ; } logger . info ( _CHAR Stopped ZWave serial handler _CHAR ) ; super . dispose ( ) ; }
28845	@ Override public void preload ( ) { clusterCache . acquireReadLockOnKey ( aliveStatusInitialized ) ; try { preloadBuffer = fillBufferFromDB ( ) ; if ( preloadBuffer != _NULL ) { LOGGER . debug ( _CHAR Loading the cache from the buffer ... _CHAR ) ; loadCacheFromBuffer ( preloadBuffer ) ; LOGGER . debug ( _CHAR \ t ... done _CHAR ) ; } else { LOGGER . error ( _CHAR Attempt to call loadCacheFromBuffer with _NULL buffer : _CHAR + _CHAR this should not happen and needs investigating ! _CHAR ) ; } } finally { clusterCache . releaseReadLockOnKey ( aliveStatusInitialized ) ; } }
29237	public Song next ( ) { switch ( playMode ) { case LOOP : case LIST : case SINGLE : int newIndex = playingIndex + _NUM ; if ( newIndex >= songs . size ( ) ) { newIndex = _NUM ; } playingIndex = newIndex ; break ; case SHUFFLE : playingIndex = randomPlayIndex ( ) ; break ; } return songs . get ( playingIndex ) ; }
29364	private Object readResolve ( ) { if ( type == ERROR . type ) { return ERROR ; } else if ( type == WARNING . type ) { return WARNING ; } else if ( type == NOTICE . type ) { return NOTICE ; } else if ( type == NORMAL . type ) { return NORMAL ; } else { throw new IllegalArgumentException ( _CHAR illegal type _CHAR ) ; } }
29490	@ Override public void connect ( SLDEditorFileInterface editorFile ) { reset ( ) ; this . editorFileInterface = editorFile ; if ( editorFileInterface != _NULL ) { this . dataSourceProperties = editorFile . getDataSource ( ) ; if ( this . dataSourceProperties != _NULL ) { createExampleDataSource ( ) ; createUserLayerDataSources ( ) ; if ( this . dataSourceProperties . isEmpty ( ) ) { openWithoutDataSource ( ) ; } else { openExternalDataSource ( ) ; } } } }
32122	private void updateButtonState ( GeometryTypeEnum geometryType ) { boolean applyTransformEnabled = _BOOL ; switch ( geometryType ) { case POINT : case LINE : case POLYGON : applyTransformEnabled = _BOOL ; break ; case RASTER : break ; default : break ; } if ( applyTransformationCheckBox != _NULL ) { applyTransformationCheckBox . setEnabled ( applyTransformEnabled ) ; } }
39224	private void stopChangelog ( ) throws Exception { ReplicationBroker [ ] brokers1And2 = _NULL ; try { debugInfo ( _CHAR Starting stopChangelog _CHAR ) ; shutdown ( ) ; configure ( ) ; brokers1And2 = createReplicationBrokers1And2 ( ) ; newClient ( ) ; newClientWithFirstChanges ( ) ; newClientWithChangefromServer1 ( ) ; newClientWithChangefromServer2 ( ) ; debugInfo ( _CHAR Ending stopChangelog _CHAR ) ; } finally { stop ( brokers1And2 ) ; } }
40854	public Object nextValue ( ) throws JSONException { int c = nextCleanInternal ( ) ; switch ( c ) { case - _NUM : throw syntaxError ( _CHAR End of input _CHAR ) ; case _CHAR : return readObject ( ) ; case _CHAR : return readArray ( ) ; case _CHAR_CHAR _CHAR _CHAR : return nextString ( ( char ) c ) ; default : pos -- ; return readLiteral ( ) ; } }
41883	public void finalizePlugins ( ) { pluginLock . lock ( ) ; try { for ( DirectoryServerPlugin < ? extends PluginCfg > plugin : registeredPlugins . values ( ) ) { try { plugin . finalizePlugin ( ) ; } catch ( Exception e ) { logger . traceException ( e ) ; } } registeredPlugins . clear ( ) ; } finally { pluginLock . unlock ( ) ; } }
44768	protected void tearDown ( ) { try { if ( s != _NULL ) s . close ( ) ; } catch ( Exception e ) { } try { if ( ss != _NULL ) ss . close ( ) ; } catch ( Exception e ) { } try { if ( t != _NULL ) t . interrupt ( ) ; } catch ( Exception e ) { } }
44906	public void close ( ) { synchronized ( this ) { if ( ! closing ) { closing = _BOOL ; try { textOut . close ( ) ; out . close ( ) ; } catch ( IOException x ) { trouble = _BOOL ; } textOut = _NULL ; charOut = _NULL ; out = _NULL ; } } }
45279	private T wildcardResponseCombiner ( T ... matches ) { boolean wildcard = _BOOL ; for ( T match : matches ) { if ( wildcardMatch . equals ( match ) ) { wildcard = _BOOL ; } else if ( ! exactMatch . equals ( match ) ) { return match ; } } if ( wildcard ) { return wildcardMatch ; } else { return exactMatch ; } }
45487	private boolean execute ( boolean readResponse ) throws IOException { try { httpEngine . sendRequest ( ) ; if ( readResponse ) { httpEngine . readResponse ( ) ; } return _BOOL ; } catch ( IOException e ) { if ( handleFailure ( e ) ) { return _BOOL ; } else { throw e ; } } }
46333	public synchronized boolean isNotificationEnabled ( Notification notification ) { String type = notification . getType ( ) ; if ( type == _NULL ) { return _BOOL ; } try { for ( String prefix : enabledTypes ) { if ( type . startsWith ( prefix ) ) { return _BOOL ; } } } catch ( java . lang . NullPointerException e ) { return _BOOL ; } return _BOOL ; }
48596	void shutdown ( ) { initiateShutdown ( ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( getMessage ( _CHAR Shutting down status analyzer . '' ) ) ; } synchronized ( eventMonitor ) { eventMonitor . notifyAll ( ) ; } try { join ( _NUM ) ; } catch ( InterruptedException e ) { } if ( isAlive ( ) ) { interrupt ( ) ; } }
48853	private static String translateOSNameToFolderName ( String osName ) { if ( osName . contains ( _CHAR Windows _CHAR ) ) { return _CHAR Windows _CHAR ; } else if ( osName . contains ( _CHAR Mac _CHAR ) ) { return _CHAR Mac _CHAR ; } else if ( osName . contains ( _CHAR Linux _CHAR ) ) { return _CHAR Linux _CHAR ; } else if ( osName . contains ( _CHAR AIX _CHAR ) ) { return _CHAR AIX _CHAR ; } else { return osName . replaceAll ( _CHAR \\ W _CHAR , _CHAR _CHAR ) ; } }
48868	private Object readResolve ( ) { synchronized ( levels ) { for ( Level level : levels ) { if ( value != level . value ) { continue ; } if ( ! name . equals ( level . name ) ) { continue ; } if ( Objects . equal ( resourceBundleName , level . resourceBundleName ) ) { return level ; } } levels . add ( this ) ; return this ; } }
54056	public void dispose ( ) { if ( isVisible ( ) ) { setVisible ( _BOOL ) ; } if ( isSelected ( ) ) { try { setSelected ( _BOOL ) ; } catch ( PropertyVetoException pve ) { } } if ( ! isClosed ) { firePropertyChange ( IS_CLOSED_PROPERTY , Boolean . FALSE , Boolean . TRUE ) ; isClosed = _BOOL ; } fireInternalFrameEvent ( InternalFrameEvent . INTERNAL_FRAME_CLOSED ) ; }
