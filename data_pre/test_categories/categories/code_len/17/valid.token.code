696	public InputStream newInputStream ( int index ) throws IOException { synchronized ( DiskLruCache . this ) { if ( entry . currentEditor != this ) { throw new IllegalStateException ( ) ; } if ( ! entry . readable ) { return _NULL ; } try { return new FileInputStream ( entry . getCleanFile ( index ) ) ; } catch ( FileNotFoundException e ) { return _NULL ; } } }
1723	public InputStream newInputStream ( int index ) throws IOException { synchronized ( DiskLruCache . this ) { if ( entry . currentEditor != this ) { throw new IllegalStateException ( ) ; } if ( ! entry . readable ) { return _NULL ; } try { return new FileInputStream ( entry . getCleanFile ( index ) ) ; } catch ( FileNotFoundException e ) { return _NULL ; } } }
4260	private static String timeApprox ( int hour , int min ) { int mm ; mm = min % _NUM ; if ( ( mm == _NUM ) || ( mm == _NUM ) ) { return _CHAR exactly _CHAR ; } else if ( mm == _NUM ) { return _CHAR just after _CHAR ; } else if ( mm == _NUM ) { return _CHAR a little after _CHAR ; } else { return _CHAR almost _CHAR ; } }
4535	public Type < ? > findAncestor ( final Class < ? > ancestor ) { if ( ancestor . isInterface ( ) ) { return findInterface ( ancestor ) ; } else { if ( this . getRawType ( ) . equals ( ancestor ) ) { return this ; } else if ( ! TypeFactory . TYPE_OF_OBJECT . equals ( this ) ) { return getSuperType ( ) . findAncestor ( ancestor ) ; } else { return _NULL ; } } }
6887	public boolean isSet ( _Fields field ) { if ( field == _NULL ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case SERVICE_NAME : return isSetServiceName ( ) ; case SEQUENCE_ID : return isSetSequenceId ( ) ; case CALL_TYPE : return isSetCallType ( ) ; case TIMEOUT : return isSetTimeout ( ) ; } throw new IllegalStateException ( ) ; }
8785	protected void animateToState ( boolean checked ) { if ( mProcessAnimator == _NULL ) { return ; } if ( mProcessAnimator . isRunning ( ) ) { mProcessAnimator . cancel ( ) ; } mProcessAnimator . setDuration ( mAnimationDuration ) ; if ( checked ) { mProcessAnimator . setFloatValues ( mProcess , _NUM ) ; } else { mProcessAnimator . setFloatValues ( mProcess , _NUM ) ; } mProcessAnimator . start ( ) ; }
8818	public void callEvent ( Event event ) { if ( event . isAsynchronous ( ) ) { if ( Thread . holdsLock ( this ) ) { throw new IllegalStateException ( event . getEventName ( ) + _CHAR can not be triggered asynchronously from inside synchronized code . '' ) ; } if ( server . isPrimaryThread ( ) ) { throw new IllegalStateException ( event . getEventName ( ) + _CHAR can not be triggered asynchronously from primary server thread . '' ) ; } fireEvent ( event ) ; } else { synchronized ( this ) { fireEvent ( event ) ; } } }
9457	public static AccountOperationResponseCode delete ( String email ) { PersistenceManager pm = pmf . getPersistenceManager ( ) ; try { UserRecord user = findUserByEmail ( pm , email ) ; if ( user != _NULL ) { pm . deletePersistent ( user ) ; return AccountOperationResponseCode . OK ; } else { return AccountOperationResponseCode . USER_NOT_FOUND ; } } finally { pm . close ( ) ; } }
10130	public void advance ( ) throws ConcurrentModificationException , NoSuchElementException { if ( referenceCount != count ) { throw new ConcurrentModificationException ( ) ; } current = next ; try { while ( states [ ++ next ] != FULL ) { } } catch ( ArrayIndexOutOfBoundsException e ) { next =- _NUM ; if ( current < _NUM ) { throw new NoSuchElementException ( ) ; } } }
11166	private void saveTo ( File file ) throws IOException { FileOutputStream fos = _NULL ; try { fos = new FileOutputStream ( file ) ; ObjectOutputStream oos = new ObjectOutputStream ( fos ) ; try { oos . writeObject ( this ) ; } finally { close ( oos , _BOOL ) ; } } finally { close ( fos , _BOOL ) ; } }
12266	public boolean finish ( ) { if ( ! started ) return _BOOL ; boolean ok = _BOOL ; started = _BOOL ; try { out . write ( _NUM ) ; out . flush ( ) ; if ( closeStream ) { out . close ( ) ; } } catch ( IOException e ) { ok = _BOOL ; } return ok ; }
12912	public static AccountOperationResponseCode delete ( String email ) { PersistenceManager pm = pmf . getPersistenceManager ( ) ; try { UserRecord user = findUserByEmail ( pm , email ) ; if ( user != _NULL ) { pm . deletePersistent ( user ) ; return AccountOperationResponseCode . OK ; } else { return AccountOperationResponseCode . USER_NOT_FOUND ; } } finally { pm . close ( ) ; } }
12924	public void onPatchServiceResult ( boolean isUpgradePatch ) { if ( ! isRetryEnable ) { TinkerLog . w ( TAG , _CHAR onPatchServiceResult retry disabled , just return _CHAR ) ; return ; } if ( ! isUpgradePatch ) { TinkerLog . w ( TAG , _CHAR onPatchServiceResult is not upgrade patch , just return _CHAR ) ; return ; } if ( retryInfoFile . exists ( ) ) { SharePatchFileUtil . safeDeleteFile ( retryInfoFile ) ; } if ( tempPatchFile . exists ( ) ) { SharePatchFileUtil . safeDeleteFile ( tempPatchFile ) ; } }
14145	public static ValueCompressonHolder . UnCompressValue unCompressNonDecimalMaxMin ( DataType compDataType , DataType actualDataType ) { switch ( compDataType ) { case DATA_BYTE : return new UnCompressNonDecimalMaxMinByte ( ) ; case DATA_SHORT : return new UnCompressNonDecimalMaxMinShort ( ) ; case DATA_INT : return new UnCompressNonDecimalMaxMinInt ( ) ; case DATA_LONG : return new UnCompressNonDecimalMaxMinLong ( ) ; case DATA_FLOAT : return new UnCompressNonDecimalMaxMinFloat ( ) ; default : return new UnCompressNonDecimalMaxMinDefault ( ) ; } }
14343	public String formatValue ( Object value ) { if ( value == _NULL ) { return EMPTY ; } if ( value instanceof Number ) { try { return FORMAT_VALUE . format ( value ) ; } catch ( IllegalArgumentException ex ) { return NAN ; } } else { return String . valueOf ( value ) ; } }
15120	public void stopAutoCycle ( ) { if ( mCycleTask != _NULL ) { mCycleTask . cancel ( ) ; } if ( mCycleTimer != _NULL ) { mCycleTimer . cancel ( ) ; } if ( mResumingTimer != _NULL ) { mResumingTimer . cancel ( ) ; } if ( mResumingTask != _NULL ) { mResumingTask . cancel ( ) ; } mAutoCycle = _BOOL ; mCycling = _BOOL ; }
15319	protected void updateOKStatus ( ) { if ( fViewer != _NULL ) { if ( ! scopeCheckingElement ) { if ( ! selectedResourcesScope . getSelection ( ) ) { selectedResourcesScope . setSelection ( _BOOL ) ; participantScope . setSelection ( _BOOL ) ; workingSetScope . setSelection ( _BOOL ) ; updateSelectedResourcesScope ( ) ; } } setPageComplete ( areAnyElementsChecked ( ) != _NULL ) ; } else { setPageComplete ( _BOOL ) ; } }
15884	public void stop ( ) { synchronized ( this ) { mStopped = _BOOL ; if ( mListenerThread == _NULL ) { return ; } } mListenerThread . interrupt ( ) ; try { if ( mServerSocket != _NULL ) { mServerSocket . close ( ) ; } } catch ( IOException e ) { } }
16907	public static ValueCompressonHolder . UnCompressValue unCompressNonDecimal ( DataType compDataType , DataType actualDataType ) { switch ( compDataType ) { case DATA_BYTE : return new UnCompressNonDecimalByte ( ) ; case DATA_SHORT : return new UnCompressNonDecimalShort ( ) ; case DATA_INT : return new UnCompressNonDecimalInt ( ) ; case DATA_LONG : return new UnCompressNonDecimalLong ( ) ; case DATA_FLOAT : return new UnCompressNonDecimalFloat ( ) ; default : return new UnCompressNonDecimalDefault ( ) ; } }
17242	void registerTap ( ) { if ( isPromoAvailable ( ) ) { DisableablePromoTapCounter promoTapCounter = getPromoTapCounter ( ) ; if ( promoTapCounter . isEnabled ( ) ) { promoTapCounter . increment ( ) ; } } int tapsSinceOpen = mPreferenceManager . getContextualSearchTapCount ( ) ; mPreferenceManager . setContextualSearchTapCount ( ++ tapsSinceOpen ) ; if ( isUserUndecided ( ) ) { ContextualSearchUma . logTapsSinceOpenForUndecided ( tapsSinceOpen ) ; } else { ContextualSearchUma . logTapsSinceOpenForDecided ( tapsSinceOpen ) ; } }
17316	public static void abort ( @ Nullable AsyncAbortable abortable , boolean swallowIOException ) throws IOException { if ( _NULL == abortable ) { return ; } try { FutureUtils . result ( abortable . asyncAbort ( ) ) ; } catch ( IOException ioe ) { if ( swallowIOException ) { logger . warn ( _CHAR IOException thrown while aborting Abortable { } : _CHAR , abortable , ioe ) ; } else { throw ioe ; } } }
17718	public synchronized void start ( ) throws Exception { if ( running ) { throw new IllegalStateException ( _CHAR Monitor is already running _CHAR ) ; } for ( FileAlterationObserver observer : observers ) { observer . initialize ( ) ; } running = _BOOL ; if ( threadFactory != _NULL ) { thread = threadFactory . newThread ( this ) ; } else { thread = new Thread ( this ) ; } thread . start ( ) ; }
19743	public boolean finish ( ) { if ( ! started ) return _BOOL ; boolean ok = _BOOL ; started = _BOOL ; try { out . write ( _NUM ) ; out . flush ( ) ; if ( closeStream ) { out . close ( ) ; } } catch ( IOException e ) { ok = _BOOL ; } return ok ; }
21422	protected int maxDayInMonthFor ( int year , int month ) { if ( month == _NUM || month == _NUM || month == _NUM || month == _NUM ) { return _NUM ; } else if ( month == _NUM ) { if ( isLeapYear ( year ) ) { return _NUM ; } else { return _NUM ; } } else { return _NUM ; } }
21698	public void advance ( ) throws ConcurrentModificationException , NoSuchElementException { if ( referenceCount != count ) { throw new ConcurrentModificationException ( ) ; } current = next ; try { while ( states [ ++ next ] != FULL ) { } } catch ( ArrayIndexOutOfBoundsException e ) { next =- _NUM ; if ( current < _NUM ) { throw new NoSuchElementException ( ) ; } } }
23572	public static byte [ ] readInputStreamToByteArray ( InputStream is ) throws IOException { ByteArrayOutputStream bos = _NULL ; try { bos = new ByteArrayOutputStream ( ) ; readInputStream ( bos , is ) ; } finally { if ( _NULL != bos ) { bos . close ( ) ; } } if ( _NULL != bos ) { return bos . toByteArray ( ) ; } return _NULL ; }
25467	public boolean isSet ( _Fields field ) { if ( field == _NULL ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case APPKEY : return isSetAppkey ( ) ; case SEND_TIME : return isSetSendTime ( ) ; case LOAD_INFO : return isSetLoadInfo ( ) ; case STATUS : return isSetStatus ( ) ; } throw new IllegalStateException ( ) ; }
25616	private int determineValidPageNumberFrom ( int userPage ) { if ( userPage <= _NUM ) { return _NUM ; } if ( originalUserPages != _NULL ) { if ( userPage >= originalUserPages . length ) { return originalUserPages . length - _NUM ; } } else { if ( userPage >= documentPageCount ) { return documentPageCount - _NUM ; } } return userPage ; }
25634	public static ValueCompressonHolder . UnCompressValue unCompressMaxMin ( DataType compDataType , DataType actualDataType ) { switch ( compDataType ) { case DATA_BYTE : return new UnCompressMaxMinByte ( ) ; case DATA_SHORT : return new UnCompressMaxMinShort ( ) ; case DATA_INT : return new UnCompressMaxMinInt ( ) ; case DATA_LONG : return new UnCompressMaxMinLong ( ) ; case DATA_FLOAT : return new UnCompressMaxMinFloat ( ) ; default : return new UnCompressMaxMinDefault ( ) ; } }
26370	private void sortBySelectedMode ( ) { switch ( sizeSelectBox . getSelectedIndex ( ) ) { case _NUM : sortDrawablesAZ ( ) ; break ; case _NUM : sortDrawablesZA ( ) ; break ; case _NUM : sortDrawablesOldest ( ) ; break ; case _NUM : sortDrawablesNewest ( ) ; break ; } }
26971	public void put ( Object [ ] parameters ) { if ( ! this . isAlive ( ) ) { LOGGER . warn ( _CHAR HandlerThread has not being started yet and objects are being added ! _CHAR ) ; } else { if ( handlerEnabled ) { synchronized ( threadMonitorObject ) { incomingQueue . offer ( parameters ) ; threadMonitorObject . notify ( ) ; } } else { throw new IllegalStateException ( _CHAR The ThreadHandler is no longer enabled and can not accept any new objects . '' ) ; } } }
27431	protected void animateToState ( boolean checked ) { if ( mProcessAnimator == _NULL ) { return ; } if ( mProcessAnimator . isRunning ( ) ) { mProcessAnimator . cancel ( ) ; } mProcessAnimator . setDuration ( mAnimationDuration ) ; if ( checked ) { mProcessAnimator . setFloatValues ( mProcess , _NUM ) ; } else { mProcessAnimator . setFloatValues ( mProcess , _NUM ) ; } mProcessAnimator . start ( ) ; }
27737	public void onPatchServiceResult ( boolean isUpgradePatch ) { if ( ! isRetryEnable ) { TinkerLog . w ( TAG , _CHAR onPatchServiceResult retry disabled , just return _CHAR ) ; return ; } if ( ! isUpgradePatch ) { TinkerLog . w ( TAG , _CHAR onPatchServiceResult is not upgrade patch , just return _CHAR ) ; return ; } if ( retryInfoFile . exists ( ) ) { SharePatchFileUtil . safeDeleteFile ( retryInfoFile ) ; } if ( tempPatchFile . exists ( ) ) { SharePatchFileUtil . safeDeleteFile ( tempPatchFile ) ; } }
28265	public InputStream newInputStream ( int index ) throws IOException { synchronized ( DiskLruCache . this ) { if ( entry . currentEditor != this ) { throw new IllegalStateException ( ) ; } if ( ! entry . readable ) { return _NULL ; } try { return new FileInputStream ( entry . getCleanFile ( index ) ) ; } catch ( FileNotFoundException e ) { return _NULL ; } } }
28736	@ Override public void onClick ( View v ) { int id = v . getId ( ) ; switch ( id ) { case R . id . email_login_button : login ( ) ; break ; case R . id . guest_login : guestLogin ( ) ; break ; case R . id . gplus_login_button : signInWithGPlus ( ) ; break ; default : break ; } }
29822	public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case _NUM : return AVERAGE_LOAD ; case _NUM : return OLD_GC ; case _NUM : return THREAD_NUM ; case _NUM : return QUEUE_SIZE ; case _NUM : return METHOD_QPS_MAP ; default : return _NULL ; } }
30268	private int calcNumberOfLines ( ) throws DataFallbackException { int lines = _NUM ; openFallbackInputStream ( ) ; try { while ( getInput ( ) . readLine ( ) != _NULL ) { lines ++ ; } } catch ( IOException e ) { throw new DataFallbackException ( ) ; } finally { closeFallbackInputStream ( ) ; } return lines ; }
31219	public BpmResult login ( final LoginData loginData ) { switch ( loginData . getLoginType ( ) ) { case GOOGLE_AUTH : if ( loginData . isValidGoogleLogin ( ) ) { return logOnGoogleAuth ( loginData ) ; } break ; case PTC : if ( loginData . isValidPtcLogin ( ) ) { return logOnPtc ( loginData ) ; } break ; default : } return new BpmResult ( _CHAR Invalid Login Type _CHAR ) ; }
31599	private static String timeOfDay ( int hour , int min ) { int hh = hour ; if ( min > _NUM ) hh ++ ; if ( hh == _NUM ) { return _CHAR _CHAR ; } else if ( hh > _NUM ) { return _CHAR in the evening _CHAR ; } else if ( hh > _NUM ) { return _CHAR in the afternoon _CHAR ; } else { return _CHAR in the morning _CHAR ; } }
32258	public InputStream newInputStream ( int index ) throws IOException { synchronized ( DiskLruCache . this ) { if ( entry . currentEditor != this ) { throw new IllegalStateException ( ) ; } if ( ! entry . readable ) { return _NULL ; } try { return new FileInputStream ( entry . getCleanFile ( index ) ) ; } catch ( FileNotFoundException e ) { return _NULL ; } } }
32632	private void onActivePointerUp ( ) { if ( STATUS . isSwipingToRefresh ( mStatus ) ) { scrollSwipingToRefreshToDefault ( ) ; } else if ( STATUS . isSwipingToLoadMore ( mStatus ) ) { scrollSwipingToLoadMoreToDefault ( ) ; } else if ( STATUS . isReleaseToRefresh ( mStatus ) ) { mRefreshCallback . onRelease ( ) ; scrollReleaseToRefreshToRefreshing ( ) ; } else if ( STATUS . isReleaseToLoadMore ( mStatus ) ) { mLoadMoreCallback . onRelease ( ) ; scrollReleaseToLoadMoreToLoadingMore ( ) ; } }
33171	void endPaint ( ) { if ( isPaintingThread ( ) ) { PaintManager paintManager = _NULL ; synchronized ( this ) { if ( -- paintDepth == _NUM ) { paintManager = getPaintManager ( ) ; } } if ( paintManager != _NULL ) { paintManager . endPaint ( ) ; synchronized ( this ) { paintThread = _NULL ; } } } }
33741	public boolean equals ( Object o ) { if ( o == _NULL ) { return _BOOL ; } if ( this == o ) { return _BOOL ; } if ( ! ( o instanceof RADIUSPrincipal ) ) { return _BOOL ; } RADIUSPrincipal that = ( RADIUSPrincipal ) o ; if ( this . getName ( ) . equals ( that . getName ( ) ) ) { return _BOOL ; } return _BOOL ; }
34776	private int extensibleHashCode ( ) { int hashCode = _NUM ; if ( getAttributeType ( ) != _NULL ) { hashCode += getAttributeType ( ) . hashCode ( ) ; } if ( dnAttributes ) { hashCode ++ ; } if ( matchingRuleID != _NULL ) { hashCode += matchingRuleID . hashCode ( ) ; } if ( assertionValue != _NULL ) { hashCode += assertionValue . hashCode ( ) ; } return hashCode ; }
35594	public String toString ( ) { if ( stubDelegate == _NULL ) { setDefaultDelegate ( ) ; } String ior ; if ( stubDelegate != _NULL ) { ior = stubDelegate . toString ( this ) ; if ( ior == _NULL ) { return super . toString ( ) ; } else { return ior ; } } return super . toString ( ) ; }
36117	@ Override public boolean equals ( Object o ) { if ( o == _NULL ) { return _BOOL ; } if ( this == o ) { return _BOOL ; } if ( ! ( o instanceof SampleAuthPrincipal ) ) { return _BOOL ; } SampleAuthPrincipal that = ( SampleAuthPrincipal ) o ; if ( this . getName ( ) . equals ( that . getName ( ) ) ) { return _BOOL ; } return _BOOL ; }
38013	public void stop ( ) { if ( logger . isTraceEnabled ( ) && ! shutdown ) { debugInfo ( _CHAR is stopping and will close the connection to RS ( _CHAR + getRsServerId ( ) + _CHAR ) _CHAR ) ; } synchronized ( startStopLock ) { if ( shutdown ) { return ; } domain . publishReplicaOfflineMsg ( ) ; shutdown = _BOOL ; setConnectedRS ( ConnectedRS . stopped ( ) ) ; stopRSHeartBeatMonitoring ( ) ; stopChangeTimeHeartBeatPublishing ( ) ; deregisterReplicationMonitor ( ) ; } }
40888	@ Override protected void finalize ( ) throws IOException { try { if ( guard != _NULL ) { guard . warnIfOpen ( ) ; } close ( ) ; } finally { try { super . finalize ( ) ; } catch ( Throwable t ) { throw new AssertionError ( t ) ; } } }
41811	protected void release ( PooledConnection con ) { if ( con == _NULL ) return ; try { con . lock ( ) ; if ( con . release ( ) ) { size . addAndGet ( - _NUM ) ; con . setHandler ( _NULL ) ; } } finally { con . unlock ( ) ; } if ( waitcount . get ( ) > _NUM ) { idle . offer ( create ( _BOOL ) ) ; } }
42610	public Source newSource ( int index ) throws IOException { synchronized ( DiskLruCache . this ) { if ( entry . currentEditor != this ) { throw new IllegalStateException ( ) ; } if ( ! entry . readable ) { return _NULL ; } try { return fileSystem . source ( entry . cleanFiles [ index ] ) ; } catch ( FileNotFoundException e ) { return _NULL ; } } }
44409	public void callEvent ( Event event ) { if ( event . isAsynchronous ( ) ) { if ( Thread . holdsLock ( this ) ) { throw new IllegalStateException ( event . getEventName ( ) + _CHAR can not be triggered asynchronously from inside synchronized code . '' ) ; } if ( server . isPrimaryThread ( ) ) { throw new IllegalStateException ( event . getEventName ( ) + _CHAR can not be triggered asynchronously from primary server thread . '' ) ; } fireEvent ( event ) ; } else { synchronized ( this ) { fireEvent ( event ) ; } } }
45103	@ Override public void close ( ) throws SQLException { if ( ! isClosed ( ) ) { try { _pool . returnObject ( _key , this ) ; } catch ( final SQLException e ) { throw e ; } catch ( final RuntimeException e ) { throw e ; } catch ( final Exception e ) { throw new SQLException ( _CHAR Can not close preparedstatement ( return to pool failed ) _CHAR , e ) ; } } }
47972	@ Override public boolean abort ( ) throws LoginException { if ( principal == _NULL ) { return _BOOL ; } if ( committed ) { logout ( ) ; } else { committed = _BOOL ; principal = _NULL ; } if ( log . isDebugEnabled ( ) ) { log . debug ( _CHAR Abort _CHAR ) ; } return _BOOL ; }
48169	public static void writeToFile ( String file , String content ) throws IOException { FileOutputStream fout = _NULL ; try { fout = new FileOutputStream ( file ) ; fout . write ( content . getBytes ( ) ) ; } finally { if ( fout != _NULL ) { try { fout . close ( ) ; } catch ( IOException ioe ) { } } } }
48691	public boolean equals ( Object o ) { if ( o == _NULL ) { return _BOOL ; } if ( this == o ) { return _BOOL ; } if ( ! ( o instanceof HOTPPrincipal ) ) { return _BOOL ; } HOTPPrincipal that = ( HOTPPrincipal ) o ; if ( this . getName ( ) . equals ( that . getName ( ) ) ) { return _BOOL ; } return _BOOL ; }
48922	static void useImplement ( DoubledImplement di , boolean isOne ) { try { di . one ( ) ; if ( ! isOne ) { System . err . println ( _CHAR ERROR : did not get LinkageError on DI _CHAR ) ; } } catch ( LinkageError le ) { if ( ! isOne ) { System . out . println ( _CHAR Got LinkageError on DI ( late ) _CHAR ) ; } else { throw le ; } } }
49208	public void updateTaskCompletionState ( DirectoryException de ) { initState = TaskState . STOPPED_BY_ERROR ; try { if ( de == _NULL ) { initState = TaskState . COMPLETED_SUCCESSFULLY ; } else { taskCompletionError = de . getMessageObject ( ) ; } } finally { synchronized ( initState ) { initState . notify ( ) ; } } }
49811	@ Override public String toString ( ) { if ( hasStrValue ) { return strValue ; } switch ( type ) { case T_CHARS : strValue = charC . toString ( ) ; hasStrValue = _BOOL ; return strValue ; case T_BYTES : strValue = byteC . toString ( ) ; hasStrValue = _BOOL ; return strValue ; } return _NULL ; }
50762	protected static void checkInitialization ( ) throws SSOException { if ( tokenManager == _NULL ) { synchronized ( lock ) { if ( tokenManager == _NULL ) { try { tokenManager = SSOTokenManager . getInstance ( ) ; oCache = new Cache ( _NUM ) ; } catch ( SSOException ssoe ) { EntityUtils . debug . error ( _CHAR EntityObjectImpl : checkInitialization ( ) _CHAR + _CHAR : Unable to get SSOTokenManager _CHAR , ssoe ) ; throw ( ssoe ) ; } } } } }
50817	protected void createMBeans ( ) { Context context = _NULL ; try { context = ( Context ) ( new InitialContext ( ) ) . lookup ( _CHAR java : / _CHAR ) ; } catch ( NamingException e ) { log . error ( _CHAR No global naming context defined for server '' ) ; return ; } try { createMBeans ( _CHAR _CHAR , context ) ; } catch ( NamingException e ) { log . error ( _CHAR Exception processing Global JNDI Resources _CHAR , e ) ; } }
51493	public boolean equals ( Object obj ) { if ( obj == _NULL ) { return _BOOL ; } if ( this == obj ) { return _BOOL ; } if ( ! ( obj instanceof WindowsDesktopSSOPrincipal ) ) { return _BOOL ; } WindowsDesktopSSOPrincipal wtp = ( WindowsDesktopSSOPrincipal ) obj ; if ( name . equals ( wtp . getName ( ) ) ) { return _BOOL ; } return _BOOL ; }
51717	public boolean equals ( Object obj ) { if ( obj instanceof RemoteObject ) { if ( ref == _NULL ) { return obj == this ; } else { return ref . remoteEquals ( ( ( RemoteObject ) obj ) . ref ) ; } } else if ( obj != _NULL ) { return obj . equals ( this ) ; } else { return _BOOL ; } }
52201	public boolean handleExpare ( ) throws InterruptedException { try { log . info ( _CHAR handling expare stat _CHAR ) ; this . LoadingConfig ( ) ; for ( String key : Sailing . threadMap . keySet ( ) ) { if ( ! this . register ( key ) ) { return _BOOL ; } } return _BOOL ; } catch ( KeeperException e ) { e . printStackTrace ( ) ; return _BOOL ; } }
53307	public boolean read ( ) { if ( mBluetoothGatt == _NULL ) return _BOOL ; if ( mBroadcastCapabilitesCharacterisitc != _NULL ) { mBluetoothGatt . readCharacteristic ( mBroadcastCapabilitesCharacterisitc ) ; return _BOOL ; } else if ( mActiveSlotCharacteristic != _NULL ) { mBluetoothGatt . readCharacteristic ( mActiveSlotCharacteristic ) ; return _BOOL ; } else if ( mAdvertisingIntervalCharacteristic != _NULL ) { mBluetoothGatt . readCharacteristic ( mAdvertisingIntervalCharacteristic ) ; return _BOOL ; } return _BOOL ; }
54024	final int fullyRelease ( Node node ) { boolean failed = _BOOL ; try { int savedState = getState ( ) ; if ( release ( savedState ) ) { failed = _BOOL ; return savedState ; } else { throw new IllegalMonitorStateException ( ) ; } } finally { if ( failed ) node . waitStatus = Node . CANCELLED ; } }
54417	final int fullyRelease ( Node node ) { boolean failed = _BOOL ; try { int savedState = getState ( ) ; if ( release ( savedState ) ) { failed = _BOOL ; return savedState ; } else { throw new IllegalMonitorStateException ( ) ; } } finally { if ( failed ) node . waitStatus = Node . CANCELLED ; } }
55459	public void appendRemainingName ( Name name ) { if ( name == _NULL ) { return ; } if ( remainingName != _NULL ) { try { remainingName . addAll ( name ) ; } catch ( NamingException e ) { throw new IllegalArgumentException ( e . toString ( ) ) ; } } else { remainingName = ( Name ) ( name . clone ( ) ) ; } }
55865	final long fullyRelease ( Node node ) { boolean failed = _BOOL ; try { long savedState = getState ( ) ; if ( release ( savedState ) ) { failed = _BOOL ; return savedState ; } else { throw new IllegalMonitorStateException ( ) ; } } finally { if ( failed ) node . waitStatus = Node . CANCELLED ; } }
