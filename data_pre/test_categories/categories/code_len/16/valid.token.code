990	private void captureImageWithPermission ( ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . M ) { int rc = ActivityCompat . checkSelfPermission ( this , Manifest . permission . CAMERA ) ; if ( rc == PackageManager . PERMISSION_GRANTED ) { captureImage ( ) ; } else { Log . w ( TAG , _CHAR Camera permission is not granted . Requesting permission _CHAR ) ; requestCameraPermission ( ) ; } } else { captureImage ( ) ; } }
1475	private void readColumnSortInfo ( ) throws IOException { init ( ) ; try { columnSortInfo = ( ColumnSortInfo ) dictionarySortIndexThriftReader . read ( ) ; } catch ( IOException ie ) { LOGGER . error ( ie , _CHAR problem while reading the column sort info . '' ) ; throw new IOException ( _CHAR problem while reading the column sort info . '' , ie ) ; } finally { if ( _NULL != dictionarySortIndexThriftReader ) { dictionarySortIndexThriftReader . close ( ) ; } } }
1561	@ Override public void onEviction ( ResourceKey < K > resourceKey ) { for ( ; ; ) { Status status = resourceKey . getStatus ( ) ; switch ( status ) { case IDLE : if ( resourceKey . goFromIdleToRetired ( ) ) { cache . remove ( resourceKey ) ; return ; } break ; default : return ; } } }
1740	public static double ceil ( double x ) { double y ; if ( Double . isNaN ( x ) ) { return x ; } y = floor ( x ) ; if ( y == x ) { return y ; } y += _NUM . _NUM ; if ( y == _NUM ) { return x * y ; } return y ; }
2643	private void populateResultsBox ( IVScanResult ivScanResult ) { ivScanResult . sortCombinations ( ) ; populateResultsHeader ( ivScanResult ) ; if ( ivScanResult . getCount ( ) == _NUM ) { populateSingleIVMatch ( ivScanResult ) ; } else { populateMultipleIVMatch ( ivScanResult ) ; } setResultScreenPercentageRange ( ivScanResult ) ; adjustSeekbarsThumbs ( ) ; hideSeeAllLinkIfFlagSet ( ivScanResult ) ; populateAdvancedInformation ( ivScanResult ) ; populatePrevScanNarrowing ( ) ; }
2939	public static Map < String , String > parseKeyAndValueToMap ( String source ) { if ( StringUtil . isEmpty ( source ) ) { return _NULL ; } try { JSONObject jsonObject = new JSONObject ( source ) ; return parseKeyAndValueToMap ( jsonObject ) ; } catch ( JSONException e ) { if ( isPrintException ) { e . printStackTrace ( ) ; } return _NULL ; } }
4594	private void sortIfNeeded ( List listToSort ) { if ( sortLists ) { if ( listToSort . stream ( ) . anyMatch ( _NULL ) ) { try { Collections . sort ( listToSort ) ; } catch ( ClassCastException ignored ) { Collections . sort ( listToSort , variableTypedComparator ) ; } } else { Collections . sort ( listToSort , variableTypedComparator ) ; } } }
4734	private void lockIds ( int ... ids ) { try { lock . lock ( ) ; for ( int id : ids ) { boolean status = idList . get ( id ) ; if ( status ) { throw new IDFactoryError ( _CHAR ID _CHAR + id + _CHAR is already taken , fatal error ! ! ! _CHAR ) ; } idList . set ( id ) ; } } finally { lock . unlock ( ) ; } }
4743	public void despawnObjects ( boolean remove ) { for ( HouseObject < ? > obj : getSpawnedObjects ( ) ) { if ( obj . isInWorld ( ) ) { obj . getController ( ) . onDelete ( ) ; obj . clearKnownlist ( ) ; } if ( remove ) { obj . removeFromHouse ( ) ; } } if ( remove ) { setPersistentState ( PersistentState . UPDATE_REQUIRED ) ; save ( ) ; } }
5202	private static Object newInstanceNoServiceLoader ( Class < ? > providerClass ) { if ( System . getSecurityManager ( ) == _NULL ) { return _NULL ; } try { Method creationMethod = providerClass . getDeclaredMethod ( _CHAR newTransformerFactoryNoServiceLoader _CHAR ) ; return creationMethod . invoke ( _NULL , ( Object [ ] ) _NULL ) ; } catch ( NoSuchMethodException exc ) { return _NULL ; } catch ( Exception exc ) { return _NULL ; } }
5327	public static String pennPOSToWordnetPOS ( String s ) { if ( s . matches ( _CHAR NN | NNP | NNS | NNPS _CHAR ) ) { return _CHAR noun _CHAR ; } if ( s . matches ( _CHAR VB | VBD | VBG | VBN | VBZ | VBP | MD _CHAR ) ) { return _CHAR verb _CHAR ; } if ( s . matches ( _CHAR JJ | JJR | JJS | CD _CHAR ) ) { return _CHAR adjective _CHAR ; } if ( s . matches ( _CHAR RB | RBR | RBS | RP | WRB _CHAR ) ) { return _CHAR adverb _CHAR ; } return _NULL ; }
6031	public boolean isRasterSymbol ( ) { Style style = getStyle ( ) ; if ( style != _NULL ) { for ( FeatureTypeStyle fts : style . featureTypeStyles ( ) ) { for ( Rule rule : fts . rules ( ) ) { for ( Symbolizer symbolizer : rule . symbolizers ( ) ) { if ( symbolizer instanceof RasterSymbolizer ) { return _BOOL ; } } } } } return _BOOL ; }
6401	public void resetTemplates ( int instanceId ) { HashMap < SpawnTemplate , Boolean > states = poolUsedTemplates . get ( instanceId ) ; if ( states == _NULL ) { return ; } super . writeLock ( ) ; try { for ( SpawnTemplate template : states . keySet ( ) ) { states . put ( template , _BOOL ) ; } } finally { super . writeUnlock ( ) ; } }
9537	public void save ( ) throws IOException { if ( myFilename == _NULL ) { throw new IOException ( _CHAR No filename specified for PreferenceStore . '' ) ; } if ( myChanged ) { FileOutputStream out = new FileOutputStream ( myFilename ) ; try { save ( out , _NULL ) ; myChanged = _BOOL ; } finally { out . close ( ) ; } } }
9977	public static void spawnAll ( ) { if ( ! DeveloperConfig . SPAWN_ENABLE ) { log . info ( _CHAR Spawns are disabled _CHAR ) ; return ; } for ( WorldMapTemplate worldMapTemplate : DataManager . WORLD_MAPS_DATA ) { if ( worldMapTemplate . isInstance ( ) ) { continue ; } spawnBasedOnTemplate ( worldMapTemplate ) ; } DataManager . SPAWNS_DATA2 . clearTemplates ( ) ; printWorldSpawnStats ( ) ; ConquestSpawnManager . spawnAll ( ) ; }
10031	public String process ( Item syl ) throws ProcessException { Item ss = syl . getItemAs ( Relation . SYLLABLE_STRUCTURE ) ; if ( ss == _NULL ) { return _CHAR _NUM _CHAR ; } else if ( ss . getNext ( ) != _NULL ) { return _CHAR _NUM _CHAR ; } else if ( ss . getParent ( ) == _NULL ) { return _CHAR _NUM _CHAR ; } else { return wordBreak ( ss . getParent ( ) ) ; } }
10444	private void stopRequestingSensorEventData ( ) { if ( ! isRequestingSensorEventData ( ) ) { return ; } try { Log . v ( TAG , _CHAR Stopping to request sensor event data _CHAR ) ; for ( Map . Entry < String , SensorDataRequest > sensorDataRequestEntry : sensorDataRequests . entrySet ( ) ) { sensorDataRequestEntry . getValue ( ) . setEndTimestamp ( System . currentTimeMillis ( ) ) ; } sendSensorEventDataRequests ( ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } }
11127	public synchronized void stop ( long stopInterval ) throws Exception { if ( running == _BOOL ) { throw new IllegalStateException ( _CHAR Monitor is not running _CHAR ) ; } running = _BOOL ; try { thread . join ( stopInterval ) ; } catch ( InterruptedException e ) { Thread . currentThread ( ) . interrupt ( ) ; } for ( FileAlterationObserver observer : observers ) { observer . destroy ( ) ; } }
11673	public void selectFirstSymbol ( ) { if ( SelectedSymbol . getInstance ( ) . getSld ( ) != _NULL ) { symbolTree . setSelectionRow ( _NUM ) ; } else { if ( displayPanel != _NULL ) { displayPanel . show ( _NULL , _NULL ) ; } if ( renderList != _NULL ) { for ( RenderSymbolInterface render : renderList ) { render . renderSymbol ( ) ; } } } }
12025	private boolean _removeActivity ( Activity a ) { boolean r ; synchronized ( this ) { r = m_activities . remove ( a ) ; if ( r ) { if ( m_activities . size ( ) == _NUM ) { m_nextTime = Long . MAX_VALUE ; } } } if ( r ) { a . setScheduled ( _BOOL ) ; } return r ; }
12863	public void writeString ( String value ) throws JMSException { initializeWriting ( ) ; try { if ( value == _NULL ) { this . dataOut . write ( _NULL ) ; } else { this . dataOut . write ( _STRING ) ; this . dataOut . writeUTF ( value ) ; } } catch ( IOException ioe ) { raise ( ioe ) ; } }
13721	public void activate ( ) { getViewer ( ) . getSearchManager ( ) . setSearcher ( getSearcher ( ) ) ; getViewer ( ) . getSearchManager ( ) . getFindDialogAsToolBar ( ) . clearMessage ( ) ; if ( ! inSelection ) { inSelection = _BOOL ; try { chartSelection . clearSelectionAttributes ( ) ; chartSelection . setSelectedAttribute ( getSelectedLabels ( ) , _BOOL ) ; this . repaint ( ) ; } finally { inSelection = _BOOL ; } } }
15064	public int reduceFp ( int value ) { fpLock . lock ( ) ; try { int newFp = this . currentFp - value ; if ( newFp < _NUM ) { newFp = _NUM ; } this . currentFp = newFp ; } finally { fpLock . unlock ( ) ; } onReduceFp ( ) ; return currentFp ; }
15252	private void createUserLayerDataSources ( ) { if ( inlineDataSource == _NULL ) { ConsoleManager . getInstance ( ) . error ( this , _CHAR No inline data source creation object set _CHAR ) ; } else { userLayerDataSourceInfo = inlineDataSource . connect ( this . editorFileInterface ) ; if ( userLayerDataSourceInfo != _NULL ) { for ( DataSourceInfo dsInfo : userLayerDataSourceInfo ) { if ( dsInfo . hasData ( ) ) { dsInfo . populateFieldMap ( ) ; } } } } }
16435	public static void createFile ( String filePath , String content ) throws IOException { FileWriter writer = _NULL ; try { writer = new FileWriter ( filePath ) ; writer . write ( content ) ; } catch ( IOException ex ) { throw ex ; } finally { if ( writer != _NULL ) { writer . close ( ) ; } } }
17236	public void activate ( ) { getViewer ( ) . getSearchManager ( ) . setSearcher ( getSearcher ( ) ) ; getViewer ( ) . getSearchManager ( ) . getFindDialogAsToolBar ( ) . clearMessage ( ) ; if ( ! inSelection ) { inSelection = _BOOL ; try { chartSelection . clearSelectionClasses ( ) ; chartSelection . setSelectedClass ( getSelectedLabels ( ) , _BOOL ) ; this . repaint ( ) ; } finally { inSelection = _BOOL ; } } }
19979	protected boolean edgeCheck ( Edge e , boolean throwException ) { if ( ! e . isValid ( ) ) { if ( throwException ) { throw new IllegalArgumentException ( _CHAR Edge must be valid . '' ) ; } return _BOOL ; } if ( e . getGraph ( ) != this ) { if ( throwException ) { throw new IllegalArgumentException ( _CHAR Edge must be part of this Graph . '' ) ; } return _BOOL ; } return _BOOL ; }
20722	private void createFeature ( ) { if ( geometryType == GeometryTypeEnum . UNKNOWN ) { dataLoaded = _BOOL ; } else { DataSourceInterface dataSource = DataSourceFactory . getDataSource ( ) ; if ( geometryType == GeometryTypeEnum . RASTER ) { dataLoaded = ( dataSource . getGridCoverageReader ( ) != _NULL ) ; } else { featureList = dataSource . getExampleFeatureSource ( ) ; dataLoaded = _BOOL ; } } }
20794	public static long tick ( ) { long start = System . currentTimeMillis ( ) ; long end ; do { try { Thread . sleep ( _NUM ) ; } catch ( InterruptedException e ) { throw Throwables . propagate ( e ) ; } end = System . currentTimeMillis ( ) ; } while ( start == end ) ; return end ; }
21448	public long queryCount ( ) throws GenericEntityException { if ( dynamicViewEntity != _NULL ) { EntityListIterator iterator = _NULL ; try { iterator = queryIterator ( ) ; return iterator . getResultsSizeAfterPartialList ( ) ; } finally { if ( iterator != _NULL ) { iterator . close ( ) ; } } } return delegator . findCountByCondition ( entityName , makeWhereCondition ( _BOOL ) , havingEntityCondition , makeEntityFindOptions ( ) ) ; }
21690	public void shutdown ( ) { this . handlerEnabled = _BOOL ; synchronized ( threadMonitorObject ) { threadMonitorObject . notify ( ) ; } while ( ! incomingQueue . isEmpty ( ) ) { try { Thread . sleep ( _NUM ) ; } catch ( InterruptedException e ) { LOGGER . error ( _CHAR Interrupted while waiting . '' ) ; e . printStackTrace ( ) ; } } }
21717	public static RxJavaAssemblyException find ( Throwable ex ) { Set < Throwable > memory = new HashSet < Throwable > ( ) ; while ( ex != _NULL ) { if ( ex instanceof RxJavaAssemblyException ) { return ( RxJavaAssemblyException ) ex ; } if ( memory . add ( ex ) ) { ex = ex . getCause ( ) ; } else { return _NULL ; } } return _NULL ; }
22262	@ Override public boolean isEmpty ( ) { for ( ; ; ) { Node < E > node = top . get ( ) ; if ( node == _NULL ) { return _BOOL ; } E e = node . get ( ) ; if ( e == _NULL ) { top . compareAndSet ( node , node . next ) ; } else { return _BOOL ; } } }
22585	public boolean dynomiteCheck ( ) { logger . info ( _CHAR Dynomite check with Redis Ping _CHAR ) ; if ( ! dynomiteRedisCheck ( ) ) { try { logger . error ( _CHAR Dynomite was down _CHAR ) ; this . dynProcess . stop ( ) ; sleeper . sleepQuietly ( _NUM ) ; return _BOOL ; } catch ( IOException e ) { logger . error ( _CHAR Dynomite can not be restarted -- > Requires manual restart _CHAR + e . getMessage ( ) ) ; } } return _BOOL ; }
22689	private static boolean showFlagsForLanguages ( ) { if ( ourFlagSettingAvailable ) { try { if ( ourLanguageFlagField == _NULL ) { ourLanguageFlagField = UISettings . class . getDeclaredField ( _CHAR LANGUAGE_FLAGS _CHAR ) ; } return ourLanguageFlagField . getBoolean ( UISettings . getInstance ( ) ) ; } catch ( Throwable t ) { ourFlagSettingAvailable = _BOOL ; return _BOOL ; } } return _BOOL ; }
23111	@ Override public void deliverResult ( T data ) { if ( isReset ( ) ) { if ( data != _NULL ) { onReleaseResources ( data ) ; } } T oldData = mData ; mData = data ; if ( isStarted ( ) ) { super . deliverResult ( data ) ; } if ( oldData != _NULL ) { onReleaseResources ( oldData ) ; } }
23165	protected void awaitCompletionComputeValuesAndShutdown ( ) { { runExecutorAndAwaitCompletion ( ) ; } if ( logger . isDebugEnabled ( ) ) printStats ( ) ; executor . shutdown ( ) ; while ( ! executor . isTerminated ( ) ) { try { Thread . sleep ( _NUM ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } }
24315	public void stopRecording ( ) { if ( this . recorder != _NULL ) { try { if ( this . state == STATE . MEDIA_RUNNING ) { this . recorder . stop ( ) ; this . setState ( STATE . MEDIA_STOPPED ) ; } this . recorder . reset ( ) ; this . moveFile ( this . audioFile ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } }
26031	public void stopTasks ( ) { if ( task != _NULL ) { task . cancel ( _BOOL ) ; task = _NULL ; } if ( periodicTasks != _NULL ) { for ( Future < ? > periodicTask : this . periodicTasks ) { if ( periodicTask != _NULL ) { periodicTask . cancel ( _BOOL ) ; periodicTask = _NULL ; } } } stopPeriodicActions ( ) ; }
26714	public void useItem ( ItemId type ) throws RemoteServerException , LoginFailedException { if ( type == ItemId . UNRECOGNIZED ) { throw new IllegalArgumentException ( _CHAR You can not use item for UNRECOGNIZED '' ) ; } switch ( type ) { case ITEM_INCENSE_ORDINARY : case ITEM_INCENSE_SPICY : case ITEM_INCENSE_COOL : case ITEM_INCENSE_FLORAL : useIncense ( type ) ; break ; default : break ; } }
27421	public void select ( ) throws RemoteException { try { if ( _spaceMode == SpaceMode . NONE ) { _electManager . elect ( ) ; } else { _electManager . reelect ( ) ; } } catch ( ActiveElectionException e ) { throw new RemoteException ( _spaceMember + _CHAR failed to elect Primary space _CHAR , e ) ; } catch ( InterruptedException ex ) { } }
27534	protected boolean lockJobIfNeeded ( ) { try { if ( job . isExclusive ( ) ) { processEngineConfiguration . getCommandExecutor ( ) . execute ( new LockExclusiveJobCmd ( job ) ) ; } } catch ( Throwable lockException ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _CHAR Could not lock exclusive job . Unlocking job so it can be acquired again . Catched exception : _CHAR + lockException . getMessage ( ) ) ; } unacquireJob ( ) ; return _BOOL ; } return _BOOL ; }
27783	public static boolean exists ( String name ) { if ( cache . contains ( name ) ) { return _BOOL ; } try { if ( Helper . exists ( name , Access . class ) ) { cache . add ( name ) ; return _BOOL ; } } catch ( Exception e1 ) { log . error ( e1 . getMessage ( ) , e1 ) ; } return _BOOL ; }
28509	public void activate ( ) { getViewer ( ) . getSearchManager ( ) . setSearcher ( getSearcher ( ) ) ; getViewer ( ) . getSearchManager ( ) . getFindDialogAsToolBar ( ) . clearMessage ( ) ; if ( ! inSelection ) { inSelection = _BOOL ; try { chartSelection . clearSelectionSeries ( ) ; chartSelection . setSelectedSeries ( getSelectedLabels ( ) , _BOOL ) ; this . repaint ( ) ; } finally { inSelection = _BOOL ; } } }
29613	final public void put ( String name , Object o ) { if ( context == _NULL ) { context = new HashMap < String , Object > ( ) ; } if ( name == _NULL ) { return ; } if ( o == _NULL ) { context . remove ( name ) ; } else { context . put ( name , o ) ; } return ; }
29922	public void dataSinkUpdate ( DataSinkEvent evt ) { if ( evt instanceof EndOfStreamEvent ) { synchronized ( waitFileSync ) { fileDone = _BOOL ; waitFileSync . notifyAll ( ) ; } } else if ( evt instanceof DataSinkErrorEvent ) { synchronized ( waitFileSync ) { fileDone = _BOOL ; fileSuccess = _BOOL ; waitFileSync . notifyAll ( ) ; } } }
30749	private void transferToSpecificBuilderAndReset ( ) { if ( currentTag == Tag . VERSION ) { dataBuilder . setVersion ( buffer . toString ( ) ) ; } addToRobotBuilder ( ) ; addToBrowserBuilder ( ) ; addToOperatingSystemBuilder ( ) ; addToBrowserPatternBuilder ( ) ; addToBrowserTypeBuilder ( ) ; addToBrowserOsMappingBuilder ( ) ; addToOperatingSystemPatternBuilder ( ) ; addToDeviceBuilder ( ) ; addToDevicePatternBuilder ( ) ; buffer = new StringBuilder ( ) ; }
31104	public void cleanResult ( ) { consG . clear ( ) ; pointers . clear ( ) ; allocations . clear ( ) ; constraints . clear ( ) ; func2int . clear ( ) ; int2func . clear ( ) ; edgeMapping . clear ( ) ; hasTransformed = _BOOL ; hasExecuted = _BOOL ; System . gc ( ) ; System . gc ( ) ; System . gc ( ) ; System . gc ( ) ; }
31593	public void stopRecording ( ) { if ( this . recorder != _NULL ) { try { if ( this . state == STATE . MEDIA_RUNNING ) { this . recorder . stop ( ) ; this . setState ( STATE . MEDIA_STOPPED ) ; } this . recorder . reset ( ) ; this . moveFile ( this . audioFile ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } }
32620	public E peek ( ) { for ( ; ; ) { Node < E > node = top . get ( ) ; if ( node == _NULL ) { return _NULL ; } E e = node . get ( ) ; if ( e == _NULL ) { top . compareAndSet ( node , node . next ) ; } else { return e ; } } }
34174	void computeNextElement ( ) { while ( _BOOL ) { if ( currentBits != _NUM ) { mask = currentBits & - currentBits ; return ; } else if ( ++ index < bits . length ) { currentBits = bits [ index ] ; } else { mask = _NUM ; return ; } } }
34194	public boolean isTimedOut ( ) throws SessionException { if ( timedOutAt > _NUM ) { return _BOOL ; } if ( ! usingCachedBasedPolling ( ) && maxCachingTimeReached ( ) ) { try { refresh ( _BOOL ) ; } catch ( SessionTimedOutException e ) { latestRefreshTime = currentTimeMillis ( ) / _NUM ; timedOutAt = latestRefreshTime ; } } return timedOutAt > _NUM ; }
34934	public void truncate ( long length ) throws SerialException { isValid ( ) ; if ( length > len ) { throw new SerialException ( _CHAR Length more than what can be truncated _CHAR ) ; } else { len = length ; if ( len == _NUM ) { buf = new char [ ] { } ; } else { buf = ( this . getSubString ( _NUM , ( int ) len ) ) . toCharArray ( ) ; } } }
35100	public void pack ( ) { try { if ( isIcon ( ) ) { setIcon ( _BOOL ) ; } else if ( isMaximum ( ) ) { setMaximum ( _BOOL ) ; } } catch ( PropertyVetoException e ) { return ; } setSize ( getPreferredSize ( ) ) ; validate ( ) ; }
35690	@ Override public void closeJDBCConn ( ) { if ( conn != _NULL ) { try { System . out . println ( _CHAR StreamingQuoteDAOModeFull . closeJDBCConn ( ) : Closing JDBC connection for Streaming Quote ... '' ) ; conn . close ( ) ; } catch ( SQLException e ) { System . out . println ( _CHAR StreamingQuoteDAOModeFull . closeJDBCConn ( ) : SQLException on conn close _CHAR ) ; e . printStackTrace ( ) ; } } else { System . out . println ( _CHAR StreamingQuoteDAOModeFull . closeJDBCConn ( ) : WARNING : DB connection already _NULL _CHAR ) ; } }
36426	protected static Long convertTimepointToBucketingLong ( Date timepointToBeConverted ) { if ( timepointToBeConverted == _NULL ) { return _NULL ; } Long toReturn = timepointToBeConverted . getTime ( ) - PrimaryIndexBucketGeneratorImpl . TIMEPOINT_MIN ; if ( toReturn < _NUM ) { return _NUM ; } else if ( toReturn > PrimaryIndexBucketGeneratorImpl . TIMEPOINT_MAX ) { return PrimaryIndexBucketGeneratorImpl . TIMEPOINT_MAX ; } else { return toReturn ; } }
36458	public boolean equals ( String s ) { switch ( type ) { case T_STR : if ( strValue == _NULL ) { return s == _NULL ; } return strValue . equals ( s ) ; case T_CHARS : return charC . equals ( s ) ; case T_BYTES : return byteC . equals ( s ) ; default : return _BOOL ; } }
38587	protected void deleteLeastUsedEntry ( ) { try { poolLock . lock ( ) ; BasicPoolEntry entry = freeConnections . remove ( ) ; if ( entry != _NULL ) { deleteEntry ( entry ) ; } else if ( log . isDebugEnabled ( ) ) { log . debug ( _CHAR No free connection to delete . '' ) ; } } finally { poolLock . unlock ( ) ; } }
38628	@ Deprecated public static ObjectId massageToObjectId ( Object o ) { if ( o == _NULL ) { return _NULL ; } if ( o instanceof ObjectId ) { return ( ObjectId ) o ; } if ( o instanceof String ) { String s = o . toString ( ) ; if ( isValid ( s ) ) { return new ObjectId ( s ) ; } } return _NULL ; }
38765	private static void checkInitialization ( ) throws SAMLException { if ( assertionManager == _NULL ) { synchronized ( lock ) { if ( assertionManager == _NULL ) { try { assertionManager = AssertionManager . getInstance ( ) ; } catch ( SAMLException samle ) { SAMLUtils . debug . error ( _CHAR AssertionManagerImpl : Unable to get _CHAR + _CHAR AssertionManager _CHAR , samle ) ; throw ( samle ) ; } } } } }
38837	public boolean addLogger ( Logger logger ) { final String name = logger . getName ( ) ; if ( name == _NULL ) { throw new NullPointerException ( ) ; } drainLoggerRefQueueBounded ( ) ; LoggerContext cx = getUserContext ( ) ; if ( cx . addLocalLogger ( logger ) ) { loadLoggerHandlers ( logger , name , name + _CHAR . handlers _CHAR ) ; return _BOOL ; } else { return _BOOL ; } }
39111	@ Override public void flush ( ) { if ( this . os != _NULL ) { try { if ( this . writer != _NULL ) { this . writer . flush ( ) ; } else { this . os . flush ( ) ; } } catch ( Exception e ) { getErrorManager ( ) . error ( _CHAR Exception occurred when flushing the output stream _CHAR , e , ErrorManager . FLUSH_FAILURE ) ; } } }
39691	void removeEQ ( Object o ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { for ( Iterator < E > it = q . iterator ( ) ; it . hasNext ( ) ; ) { if ( o == it . next ( ) ) { it . remove ( ) ; break ; } } } finally { lock . unlock ( ) ; } }
39928	protected boolean isError ( final int code ) { switch ( code ) { case HTTP_BAD_REQUEST : case HTTP_UNAUTHORIZED : case HTTP_FORBIDDEN : case HTTP_NOT_FOUND : case HTTP_CONFLICT : case HTTP_GONE : case HTTP_UNPROCESSABLE_ENTITY : case HTTP_INTERNAL_ERROR : return _BOOL ; default : return _BOOL ; } }
41190	private boolean isDisplayedEntryRemote ( BasicNode node ) { if ( isFollowReferrals ( ) ) { if ( node == rootNode ) { return _BOOL ; } if ( node . getRemoteUrl ( ) != _NULL ) { return _BOOL ; } final BasicNode parent = ( BasicNode ) node . getParent ( ) ; if ( parent != _NULL ) { return isDisplayedEntryRemote ( parent ) ; } } return _BOOL ; }
41557	public boolean isNodeChild ( TreeNode aNode ) { boolean retval ; if ( aNode == _NULL ) { retval = _BOOL ; } else { if ( getChildCount ( ) == _NUM ) { retval = _BOOL ; } else { retval = ( aNode . getParent ( ) == this ) ; } } return retval ; }
42134	public void flush ( ) { if ( compressionStream != _NULL ) { try { if ( log . isDebugEnabled ( ) ) { log . debug ( _CHAR Flushing the compression stream ! _CHAR ) ; } compressionStream . flush ( ) ; } catch ( IOException e ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _CHAR Ignored exception while flushing gzip filter '' , e ) ; } } } }
42293	@ Override public void closeJDBCConn ( ) { if ( conn != _NULL ) { try { System . out . println ( _CHAR StreamingQuoteDAOModeQuote . closeJDBCConn ( ) : Closing JDBC connection for Streaming Quote ... '' ) ; conn . close ( ) ; } catch ( SQLException e ) { System . out . println ( _CHAR StreamingQuoteDAOModeQuote . closeJDBCConn ( ) : SQLException on conn close _CHAR ) ; e . printStackTrace ( ) ; } } else { System . out . println ( _CHAR StreamingQuoteDAOModeQuote . closeJDBCConn ( ) : WARNING : DB connection already _NULL _CHAR ) ; } }
42707	private boolean closeInternal ( ErrorCode errorCode ) { assert ( ! Thread . holdsLock ( this ) ) ; synchronized ( this ) { if ( this . errorCode != _NULL ) { return _BOOL ; } if ( source . finished && sink . finished ) { return _BOOL ; } this . errorCode = errorCode ; notifyAll ( ) ; } connection . removeStream ( id ) ; return _BOOL ; }
42889	public int nextMessageID ( ) { int msgID = nextMessageID . getAndIncrement ( ) ; if ( msgID < _NUM ) { synchronized ( nextMessageID ) { if ( nextMessageID . get ( ) < _NUM ) { nextMessageID . set ( _NUM ) ; return _NUM ; } else { return nextMessageID . getAndIncrement ( ) ; } } } return msgID ; }
43477	void updateValue ( Object value ) { try { if ( value == _NULL ) { String string = getFormattedTextField ( ) . getText ( ) ; value = stringToValue ( string ) ; } if ( getCommitsOnValidEdit ( ) ) { commitEdit ( ) ; } setEditValid ( _BOOL ) ; } catch ( ParseException pe ) { setEditValid ( _BOOL ) ; } }
44749	@ Override public void closeJDBCConn ( ) { if ( conn != _NULL ) { try { System . out . println ( _CHAR StreamingQuoteDAOModeLtp . closeJDBCConn ( ) : Closing JDBC connection for Streaming Quote ... '' ) ; conn . close ( ) ; } catch ( SQLException e ) { System . out . println ( _CHAR StreamingQuoteDAOModeLtp . closeJDBCConn ( ) : SQLException on conn close _CHAR ) ; e . printStackTrace ( ) ; } } else { System . out . println ( _CHAR StreamingQuoteDAOModeLtp . closeJDBCConn ( ) : WARNING : DB connection already _NULL _CHAR ) ; } }
45197	public boolean offer ( E e ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { q . offer ( e ) ; if ( q . peek ( ) == e ) { leader = _NULL ; available . signal ( ) ; } return _BOOL ; } finally { lock . unlock ( ) ; } }
45850	public Socket accept ( ) throws IOException { checkOpen ( ) ; if ( ! isBound ( ) ) { throw new SocketException ( _CHAR Socket is not bound _CHAR ) ; } Socket aSocket = new Socket ( ) ; try { implAccept ( aSocket ) ; } catch ( IOException e ) { aSocket . close ( ) ; throw e ; } return aSocket ; }
46564	public static void resetAllCounters ( ) { resetPreParseCount ( ) ; resetPreOperationCount ( ) ; resetPostOperationCount ( ) ; resetPostResponseCount ( ) ; resetPostSynchronizationCount ( ) ; resetSearchEntryCount ( ) ; resetSearchReferenceCount ( ) ; resetSubordinateModifyDNCount ( ) ; resetIntermediateResponseCount ( ) ; resetPostConnectCount ( ) ; resetPostDisconnectCount ( ) ; resetLDIFImportCount ( ) ; resetLDIFExportCount ( ) ; }
47453	public boolean equalsIgnoreCase ( String s ) { switch ( type ) { case T_STR : if ( strValue == _NULL ) { return s == _NULL ; } return strValue . equalsIgnoreCase ( s ) ; case T_CHARS : return charC . equalsIgnoreCase ( s ) ; case T_BYTES : return byteC . equalsIgnoreCase ( s ) ; default : return _BOOL ; } }
47465	public void write ( int b ) { try { synchronized ( this ) { ensureOpen ( ) ; out . write ( b ) ; if ( ( b == _CHAR ) && autoFlush ) out . flush ( ) ; } } catch ( InterruptedIOException x ) { Thread . currentThread ( ) . interrupt ( ) ; } catch ( IOException x ) { trouble = _BOOL ; } }
47593	public void ssoTokenChanged ( SSOTokenEvent evt ) { try { int type = evt . getType ( ) ; switch ( type ) { case SSOTokenEvent . SSO_TOKEN_IDLE_TIMEOUT : case SSOTokenEvent . SSO_TOKEN_MAX_TIMEOUT : case SSOTokenEvent . SSO_TOKEN_DESTROY : SSOToken token = evt . getToken ( ) ; clearAllData ( token . getTokenID ( ) ) ; break ; } } catch ( SSOException ssoe ) { } }
47659	@ Override public void mark ( int readLimit ) throws IOException { if ( readLimit >= _NUM ) { synchronized ( lock ) { if ( isOpen ( ) ) { markpos = pos ; } else { throw new IOException ( _CHAR StringReader is closed _CHAR ) ; } } } else { throw new IllegalArgumentException ( ) ; } }
49707	public void revalidate ( ) { if ( getParent ( ) == _NULL ) { return ; } if ( SunToolkit . isDispatchThreadForAppContext ( this ) ) { invalidate ( ) ; RepaintManager . currentManager ( this ) . addInvalidComponent ( this ) ; } else { if ( revalidateRunnableScheduled . getAndSet ( _BOOL ) ) { return ; } SunToolkit . executeOnEventHandlerThread ( this , _NULL ) ; } }
50260	public boolean hasNext ( Pattern pattern ) { ensureOpen ( ) ; if ( pattern == _NULL ) throw new NullPointerException ( ) ; hasNextPattern = _NULL ; saveState ( ) ; while ( _BOOL ) { if ( getCompleteTokenInBuffer ( pattern ) != _NULL ) { matchValid = _BOOL ; cacheResult ( ) ; return revertState ( _BOOL ) ; } if ( needInput ) readInput ( ) ; else return revertState ( _BOOL ) ; } }
50434	public void sync ( ) throws SyncFailedException { try { if ( Libcore . os . isatty ( this ) ) { Libcore . os . tcdrain ( this ) ; } else { Libcore . os . fsync ( this ) ; } } catch ( ErrnoException errnoException ) { SyncFailedException sfe = new SyncFailedException ( errnoException . getMessage ( ) ) ; sfe . initCause ( errnoException ) ; throw sfe ; } }
50799	public static boolean verifyTimestampCertificates ( TimeStampToken ts , KeyStore keystore , String provider ) { try { for ( X509Certificate certStoreX509 : SignUtils . getCertificates ( keystore ) ) { try { SignUtils . isSignatureValid ( ts , certStoreX509 , provider ) ; return _BOOL ; } catch ( Exception ex ) { } } } catch ( Exception e ) { } return _BOOL ; }
50849	public static long nextOperationID ( ) { long opID = nextOperationID . getAndIncrement ( ) ; if ( opID < _NUM ) { synchronized ( nextOperationID ) { if ( nextOperationID . get ( ) < _NUM ) { nextOperationID . set ( _NUM ) ; return _NUM ; } else { return nextOperationID . getAndIncrement ( ) ; } } } return opID ; }
50850	private void processMenuKeyEvent ( MenuKeyEvent e ) { switch ( e . getID ( ) ) { case KeyEvent . KEY_PRESSED : fireMenuKeyPressed ( e ) ; break ; case KeyEvent . KEY_RELEASED : fireMenuKeyReleased ( e ) ; break ; case KeyEvent . KEY_TYPED : fireMenuKeyTyped ( e ) ; break ; default : break ; } }
50931	private static void garbageCollect ( ) { try { System . gc ( ) ; Thread . sleep ( _NUM ) ; System . runFinalization ( ) ; Thread . sleep ( _NUM ) ; System . gc ( ) ; Thread . sleep ( _NUM ) ; System . runFinalization ( ) ; Thread . sleep ( _NUM ) ; } catch ( InterruptedException ex ) { ex . printStackTrace ( ) ; } }
51031	public long nextOperationID ( ) { long opID = nextOperationID . getAndIncrement ( ) ; if ( opID < _NUM ) { synchronized ( nextOperationID ) { if ( nextOperationID . get ( ) < _NUM ) { nextOperationID . set ( _NUM ) ; return _NUM ; } else { return nextOperationID . getAndIncrement ( ) ; } } } return opID ; }
51076	private boolean closeInternal ( int rstStatusCode ) { assert ( ! Thread . holdsLock ( this ) ) ; synchronized ( this ) { if ( this . rstStatusCode != - _NUM ) { return _BOOL ; } if ( in . finished && out . finished ) { return _BOOL ; } this . rstStatusCode = rstStatusCode ; notifyAll ( ) ; } connection . removeStream ( id ) ; return _BOOL ; }
51770	public static boolean isJSF22 ( ) { final String version = FacesContext . class . getPackage ( ) . getImplementationVersion ( ) ; if ( version != _NULL ) { return version . startsWith ( _CHAR _NUM . _NUM _CHAR ) ; } else { try { Class . forName ( _CHAR javax . faces . flow . Flow _CHAR ) ; return _BOOL ; } catch ( final ClassNotFoundException ex ) { return _BOOL ; } } }
52280	public boolean removeAll ( ) { lock . lock ( ) ; try { if ( cookieJar . isEmpty ( ) ) { return _BOOL ; } cookieJar . clear ( ) ; domainIndex . clear ( ) ; uriIndex . clear ( ) ; } finally { lock . unlock ( ) ; } return _BOOL ; }
52489	public StreamAllocation close ( ) { if ( bufferedRequestBody != _NULL ) { closeQuietly ( bufferedRequestBody ) ; } else if ( requestBodyOut != _NULL ) { closeQuietly ( requestBodyOut ) ; } if ( userResponse != _NULL ) { closeQuietly ( userResponse . body ( ) ) ; } else { streamAllocation . connectionFailed ( ) ; } return streamAllocation ; }
52536	public void shutdown ( ) { if ( ! shutdownThePool ) { shutdownThePool = _BOOL ; for ( WorkerThread thread : threads ) { thread . terminate ( ) ; } lock . lock ( ) ; try { hasTasks . signalAll ( ) ; } finally { lock . unlock ( ) ; } } }
52698	public boolean handleRequest ( final HttpServletRequest req , final HttpServletResponse res ) { if ( req . getHeader ( CORSConstants . ORIGIN ) == _NULL ) { return _BOOL ; } if ( ! isValidCORSRequest ( req ) ) { return _BOOL ; } if ( isPreflightFlow ( req ) ) { handlePreflightFlow ( req , res ) ; return _BOOL ; } else { return handleActualRequestFlow ( req , res ) ; } }
53093	public String toString ( ) { String initState = _CHAR _CHAR ; switch ( state ) { case UNINITIALIZED : initState = _CHAR < not initialized > _CHAR ; break ; case VERIFY : initState = _CHAR < initialized for verifying > '' ; break ; case SIGN : initState = _CHAR < initialized for signing > '' ; break ; } return _CHAR Signature object : _CHAR + getAlgorithm ( ) + initState ; }
53279	public PersistentObject assertOneEntry ( ) throws EntryNotFoundException , UMSException { PersistentObject entry = _NULL ; while ( hasMoreElements ( ) ) { entry = next ( ) ; break ; } if ( entry == _NULL ) { throw new EntryNotFoundException ( ) ; } if ( hasMoreElements ( ) ) { abandon ( ) ; throw new UMSException ( i18n . getString ( IUMSConstants . MULTIPLE_ENTRY ) ) ; } return entry ; }
53862	static SearchBuffer obtainSearchBuffer ( ) { SearchBuffer sb ; try { if ( ! searchBuffers . empty ( ) ) { sb = searchBuffers . pop ( ) ; } else { sb = new SearchBuffer ( ) ; } } catch ( EmptyStackException ese ) { sb = new SearchBuffer ( ) ; } return sb ; }
54260	public void add ( AbstractButton b ) { if ( b == _NULL ) { return ; } buttons . addElement ( b ) ; if ( b . isSelected ( ) ) { if ( selection == _NULL ) { selection = b . getModel ( ) ; } else { b . setSelected ( _BOOL ) ; } } b . getModel ( ) . setGroup ( this ) ; }
54703	public static int nextMessageID ( ) { int msgID = nextMessageID . getAndIncrement ( ) ; if ( msgID < _NUM ) { synchronized ( nextMessageID ) { if ( nextMessageID . get ( ) < _NUM ) { nextMessageID . set ( _NUM ) ; return _NUM ; } else { return nextMessageID . getAndIncrement ( ) ; } } } return msgID ; }
55366	@ Override public void addExecutor ( Executor ex ) { synchronized ( executors ) { if ( ! executors . contains ( ex ) ) { executors . add ( ex ) ; if ( getState ( ) . isAvailable ( ) ) { try { ex . start ( ) ; } catch ( LifecycleException x ) { log . error ( _CHAR Executor . start _CHAR , x ) ; } } } } }
56031	private int calculatePosition ( int spot , int width ) { if ( spot < BORDER_DRAG_THICKNESS ) { return _NUM ; } if ( spot < CORNER_DRAG_WIDTH ) { return _NUM ; } if ( spot >= ( width - BORDER_DRAG_THICKNESS ) ) { return _NUM ; } if ( spot >= ( width - CORNER_DRAG_WIDTH ) ) { return _NUM ; } return _NUM ; }
