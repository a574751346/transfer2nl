{"code": "boolean isForceUpgradeMode(){\n  return isForceUpgradeMode;\n}\n", "nl": "Returns the status of the force upgrade mode.", "id": "11696"}
{"code": "public static boolean isComparable(Object object){\n  return (object instanceof Comparable);\n}\n", "nl": "Returns true if the object implements Comparable. Otherwise, false.", "id": "5287"}
{"code": "public static PostReadResponseControl newControl(final Entry entry){\n  return new PostReadResponseControl(false,Entries.unmodifiableEntry(entry));\n}\n", "nl": "Creates a new post-read response control.", "id": "4821"}
{"code": "public static boolean isNameRegistrationSuccess(HttpServletRequest request){\n  String status=request.getParameter(IFSConstants.REGISTRATION_STATUS);\n  if (status != null && status.equalsIgnoreCase(IFSConstants.REGISTRATION_SUCCESS)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Returns true if name registration succeeds.", "id": "6015"}
{"code": "public void stop(){\n  end=currentTimeMillis();\n}\n", "nl": "Set Current Time as End Time.", "id": "13889"}
{"code": "public void addAppender(Appender appender){\n  this.logger.addAppender(appender);\n}\n", "nl": "This method allows you to add an external appender. This is useful for the case when you want to log to a different log stream than a file.", "id": "39711"}
{"code": "public void paintOptionPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the background of an option pane.", "id": "7603"}
{"code": "public static void pickImage(Context context,android.support.v4.app.Fragment fragment,int requestCode){\n  try {\n    fragment.startActivityForResult(getImagePicker(),requestCode);\n  }\n catch (  ActivityNotFoundException e) {\n    showImagePickerError(context);\n  }\n}\n", "nl": "Pick image from a support library Fragment with a custom request code", "id": "38438"}
{"code": "public void registerCallbackHandler(SMSObjectListener changeListener) throws SMSException {\n  LDAPEventManager.addObjectChangeListener(changeListener);\n}\n", "nl": "Registration of Notification Callbacks", "id": "38668"}
{"code": "public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {\n  return toXMLString(includeNS,declareNS,false);\n}\n", "nl": "Returns a String representation of the Logout Response.", "id": "53767"}
{"code": "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n  return encodeObject(serializableObject,NO_OPTIONS);\n}\n", "nl": "Serializes an object and returns the Base64-encoded version of that serialized object. <p>As of v 2.3, if the object cannot be serialized or there is another error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned a null value, but in retrospect that's a pretty poor way to handle it.</p> The object is not GZip-compressed before being encoded.", "id": "55426"}
{"code": "public static byte[] compress(byte[] data,int width,int height){\n  CCITTG4Encoder g4=new CCITTG4Encoder(width);\n  g4.fax4Encode(data,0,g4.rowbytes * height);\n  return g4.close();\n}\n", "nl": "Encodes a full image.", "id": "21003"}
{"code": "private GenericFrame createFrame(StatusGenericPanel panel){\n  return new GenericFrame(panel);\n}\n", "nl": "Creates the frame to be displayed using the provided panel.", "id": "37568"}
{"code": "public static BooleanArgument doNotStartArgument() throws ArgumentException {\n  return BooleanArgument.builder(\"doNotStart\").shortIdentifier('O').description(INFO_SETUP_DESCRIPTION_DO_NOT_START.get()).buildArgument();\n}\n", "nl": "Returns the \"do not start\" boolean argument.", "id": "19299"}
{"code": "public synchronized BukkitTask runTask(Plugin plugin) throws IllegalArgumentException, IllegalStateException {\n  checkState();\n  return setupId(Bukkit.getScheduler().runTask(plugin,(Runnable)this));\n}\n", "nl": "Schedules this in the Bukkit scheduler to run on next tick.", "id": "23325"}
{"code": "public ConnectionParameters adminUid(String uid){\n  adminUid=uid;\n  return this;\n}\n", "nl": "Sets the user id of the Global Administrator to use to bind to the server.", "id": "46809"}
{"code": "public boolean isThumbRollover(){\n  return thumbActive;\n}\n", "nl": "Returns true if the mouse is currently over the thumb.", "id": "392"}
{"code": "public void addBrowserEventListener(BrowserEventListener l){\n  listeners.add(l);\n}\n", "nl": "Add a BrowserEventListener to this controller.", "id": "22462"}
{"code": "public AMSearchResults searchPeopleContainers(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER),getSearchFilter(AMObject.PEOPLE_CONTAINER),wildcard,avPairs,searchControl);\n}\n", "nl": "Searches for people containers in this organizational unit using wildcards and * attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be  specifed so that DNs of people containers with matching attribute-value pairs will be returned.", "id": "17684"}
{"code": "protected void sourceReleased(IRandomAccessSource source) throws java.io.IOException {\n}\n", "nl": "Called when a given source is no longer the active source.  This gives subclasses the abilty to release resources, if appropriate.", "id": "23766"}
{"code": "@Override public Object pop(){\n  this.callStack.pop();\n  return super.pop();\n}\n", "nl": "Pop an object.", "id": "17034"}
{"code": "private void acceptPermanently(){\n  returnValue=ReturnType.ACCEPTED_PERMANENTLY;\n  dispose();\n}\n", "nl": "Method called when user clicks on ok.", "id": "17896"}
{"code": "public void deferOnDragEnd(){\n  mDeferOnDragEnd=true;\n}\n", "nl": "This is called to defer hiding the delete drop target until the drop animation has completed, instead of hiding immediately when the drag has ended.", "id": "30431"}
{"code": "public void push(final long value){\n  if (value == 0L || value == 1L) {\n    mv.visitInsn(Opcodes.LCONST_0 + (int)value);\n  }\n else {\n    mv.visitLdcInsn(value);\n  }\n}\n", "nl": "Generates the instruction to push the given value on the stack.", "id": "16548"}
{"code": "public static byte[] encodeBase64Chunked(final byte[] binaryData){\n  return encodeBase64(binaryData,true);\n}\n", "nl": "Encodes binary data using the base64 algorithm and chunks the encoded output into 76 character blocks", "id": "56043"}
{"code": "private void createAdministratorContainerEntry() throws ADSContextException {\n  AddRequest request=newAddRequest(getAdministratorContainerDN()).addAttribute(\"objectclass\",\"groupofurls\").addAttribute(\"memberURL\",\"ldap:///\" + getAdministratorContainerDN() + \"??one?(objectclass=*)\").addAttribute(\"description\",\"Group of identities which have full access.\");\n  createEntry(request);\n}\n", "nl": "Creates the administrator container entry.", "id": "37540"}
{"code": "public int makeLDIFMain(String[] args){\n  return makeLDIFMain(args,true,true,System.out,System.err);\n}\n", "nl": "Processes the provided set of command-line arguments and begins generating the LDIF content.", "id": "17610"}
{"code": "public void execute(TransformerImpl transformer) throws TransformerException {\n}\n", "nl": "Execute the element's primary function.  Subclasses of this function may recursivly execute down the element tree.", "id": "27718"}
{"code": "public static String readFileToString(File file,Charset encoding) throws IOException {\n  InputStream in=null;\n  try {\n    in=openInputStream(file);\n    return IOUtils.toString(in,Charsets.toCharset(encoding));\n  }\n  finally {\n    IOUtils.closeQuietly(in);\n  }\n}\n", "nl": "Reads the contents of a file into a String. The file is always closed.", "id": "33351"}
{"code": "@Override public boolean equals(Object obj){\n  if (obj == this) {\n    return true;\n  }\n  if (!(obj instanceof RC2ParameterSpec)) {\n    return false;\n  }\n  RC2ParameterSpec ps=(RC2ParameterSpec)obj;\n  return (effectiveKeyBits == ps.effectiveKeyBits) && (Arrays.equals(iv,ps.iv));\n}\n", "nl": "Compares the specified object to this <code>RC2ParameterSpec</code> instance.", "id": "15873"}
{"code": "void add(TimerTask task){\n  if (size + 1 == queue.length)   queue=Arrays.copyOf(queue,2 * queue.length);\n  queue[++size]=task;\n  fixUp(size);\n}\n", "nl": "Adds a new task to the priority queue.", "id": "52837"}
{"code": "protected void cleanRealEntries() throws Exception {\n  logger.error(LocalizableMessage.raw(\"ReplicationTestCase/Cleaning entries\"));\n  for (  DN dn : entriesToCleanup) {\n    deleteEntry(dn);\n  }\n  entriesToCleanup.clear();\n}\n", "nl": "Suppress all the real entries created by the tests in this class.", "id": "15741"}
{"code": "private void rangeCheck(int index){\n  if (index >= size)   throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n}\n", "nl": "Checks if the given index is in range.  If not, throws an appropriate runtime exception.  This method does *not* check if the index is negative: It is always used immediately prior to an array access, which throws an ArrayIndexOutOfBoundsException if index is negative.", "id": "40203"}
{"code": "public void makeImmutable(){\n  if (isMutable) {\n    isMutable=false;\n  }\n}\n", "nl": "Makes this object immutable.", "id": "16189"}
{"code": "public void run(){\n  allowToChange=false;\nsynchronized (actions) {\n    if (!actions.isEmpty()) {\n      for (Iterator iter=actions.iterator(); iter.hasNext(); ) {\n        doGroupAction(iter.next());\n        if (removeElementAfterAction) {\n          iter.remove();\n        }\n      }\n    }\n  }\n  reset();\n}\n", "nl": "Implements for TaskRunnable. Run the function of ScheduleableGroupAction on all the objects 1 by 1.", "id": "38747"}
{"code": "Source popImportSource(){\n  return (Source)m_importSourceStack.pop();\n}\n", "nl": "Pop a Source from a user provided URIResolver, corresponding to the URL popped from the m_importStack.", "id": "27723"}
{"code": "public org.omg.DynamicAny.DynAny copy(){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"copy\",_opsClass);\n  DynFixedOperations $self=(DynFixedOperations)$so.servant;\n  try {\n    return $self.copy();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked. The operation is polymorphic, that is, invoking it on one of the types derived from DynAny, such as DynStruct, creates the derived type but returns its reference as the DynAny base type.", "id": "16354"}
{"code": "public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {\n  propertySheetModel.clear();\n  forwardTo();\n}\n", "nl": "Handles reset button request.", "id": "990"}
{"code": "public LinkedListNode addFirst(Object object){\n  LinkedListNode node=new LinkedListNode(object,head.next,head);\n  node.previous.next=node;\n  node.next.previous=node;\n  return node;\n}\n", "nl": "Adds an object to the beginning of the list by automatically creating a a new node and adding it to the beginning of the list.", "id": "24939"}
{"code": "public int size(){\n  return cursors.size();\n}\n", "nl": "Get the amount of cursors in this collection.", "id": "10840"}
{"code": "public boolean hasParameter(String name){\n  return uriParms.getValue(name) != null;\n}\n", "nl": "Boolean to check if a parameter of a given name exists.", "id": "53012"}
{"code": "public void endPrefixMapping(String prefix) throws SAXException {\n}\n", "nl": "Receive notification of the end of a Namespace mapping. <p>By default, do nothing.  Application writers may override this method in a subclass to take specific actions at the end of each prefix mapping.</p>", "id": "37348"}
{"code": "protected void _skip7BitBinary() throws IOException {\n  int origBytes=_readUnsignedVInt();\n  int chunks=origBytes / 7;\n  int encBytes=chunks * 8;\n  origBytes-=7 * chunks;\n  if (origBytes > 0) {\n    encBytes+=1 + origBytes;\n  }\n  _skipBytes(encBytes);\n}\n", "nl": "Helper method for skipping length-prefixed binary data section", "id": "20258"}
{"code": "protected StackFrame newFrame(final Frame<?> src,AbstractInsnNode ain){\n  return new StackFrame(src,ain);\n}\n", "nl": "Constructs a new frame that is identical to the given frame.", "id": "16075"}
{"code": "public void updateSessionMaxAliveTime(int sessionAliveTime){\n  if (sessionAliveTime > this.sessionMaxAliveTime) {\nsynchronized (sessionMaxAliveTimeUpdateLock) {\n      if (sessionAliveTime > this.sessionMaxAliveTime) {\n        this.sessionMaxAliveTime=sessionAliveTime;\n      }\n    }\n  }\n}\n", "nl": "Updates the sessionMaxAliveTime attribute if the candidate value is larger than the current value.", "id": "31017"}
{"code": "public static CallSite altMetafactory(MethodHandles.Lookup caller,String invokedName,MethodType invokedType,Object... args){\n  throw new UnsupportedOperationException();\n}\n", "nl": "Stub method needed to satisfy Java 8 compilers when compiling lambdas.", "id": "19383"}
{"code": "private boolean hasNextTlsMode(){\n  return nextTlsMode != TLS_MODE_NULL;\n}\n", "nl": "Returns true if there's another TLS mode to try.", "id": "25251"}
{"code": "public ConnectionParameters ldapPort(int port){\n  ldapPort=port;\n  return this;\n}\n", "nl": "Sets the port on which the directory server listens for LDAP communication.", "id": "26852"}
{"code": "public boolean isPaused(){\n  return sessionDone.get();\n}\n", "nl": "Test if the writer is suspended.", "id": "40352"}
{"code": "@Override public String toString(){\n  return filename;\n}\n", "nl": "Returns the name of the file.", "id": "10180"}
{"code": "public static Boolean isHeartBitMsgPrintable(){\n  return QUOTE_STREAMING_HEART_BIT_MSG_PRINT;\n}\n", "nl": "Print config", "id": "7155"}
{"code": "public boolean isPasswordPolicySubentry(){\n  return hasObjectClass(OC_PWD_POLICY_SUBENTRY_LC);\n}\n", "nl": "Indicates whether the entry meets the criteria to consider it a LDAP password policy subentry (i.e., it contains the \"pwdPolicy\" objectclass of LDAP Password Policy Internet-Draft).", "id": "5257"}
{"code": "public void iterateDeclaredPrefixes(PrefixCallback callback) throws SAXException {\n  for (Enumeration e=nss.getDeclaredPrefixes(); e.hasMoreElements(); ) {\n    String p=(String)e.nextElement();\n    String uri=nss.getURI(p);\n    callback.onPrefixMapping(p,uri);\n  }\n}\n", "nl": "Iterates all newly declared namespace prefixes for this element.", "id": "28798"}
{"code": "protected List<RawModification> decodeRawMods(byte[] in) throws LDAPException, IOException {\n  List<RawModification> ldapmods=new ArrayList<>();\n  ASN1Reader asn1Reader=ASN1.getReader(in);\n  while (asn1Reader.hasNextElement()) {\n    ldapmods.add(LDAPModification.decode(asn1Reader));\n  }\n  return ldapmods;\n}\n", "nl": "Decode raw mods from the provided byte array.", "id": "18198"}
{"code": "public void addAnnotation(String a){\n  applicationIdentifiers.add(a);\n}\n", "nl": "Add an annotation. There can be any number of these.", "id": "29714"}
{"code": "public boolean isFlashEnabledByDefault(){\n  return mFlashEnabledByDefault;\n}\n", "nl": "Get the flash enabled by default value associated with this builder", "id": "55520"}
{"code": "public static ArgumentException unableToReadConnectionParameters(Exception cause){\n  LocalizableMessage message=ERR_DSCFG_ERROR_CANNOT_READ_CONNECTION_PARAMETERS.get(cause.getMessage());\n  return new ArgumentException(message,cause);\n}\n", "nl": "Creates an argument exception which should be used when the connection parameters could not be read from the standard input.", "id": "46817"}
{"code": "@Override public int hashCode(){\n  return (displayType == null) ? 0 : displayType.hashCode();\n}\n", "nl": "Returns hash code of the object.", "id": "23293"}
{"code": "public boolean equals(Object obj){\n  return (obj != null && obj instanceof MimeType && getStringValue().equals(((MimeType)obj).getStringValue()));\n}\n", "nl": "Determine if this MIME type object is equal to the given object. The two are equal if the given object is not null, is an instance of class net.jini.print.data.MimeType, and has the same canonical form as this MIME type object (that is, has the same type, subtype, and parameters). Thus, if two MIME type objects are the same except for comments, they are considered equal. However, \"text/plain\" and \"text/plain; charset=us-ascii\" are not considered equal, even though they represent the same media type (because the default character set for plain text is US-ASCII).", "id": "32054"}
{"code": "public final boolean hasTag(Tag t){\n  return allTags.contains(t);\n}\n", "nl": "Determines whether this managed object definition has the specified tag.", "id": "49300"}
{"code": "public XMLString newstr(FastStringBuffer fsb,int start,int length){\n  return new XStringForFSB(fsb,start,length);\n}\n", "nl": "Create a XMLString from a FastStringBuffer.", "id": "21342"}
{"code": "boolean publish(ReplicationMsg msg,boolean retryOnFailure){\n  return publish(msg,false,retryOnFailure);\n}\n", "nl": "Publish a message to the other servers.", "id": "3825"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodegetownerdocument.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "19908"}
{"code": "public void write(int b) throws IOException {\n  out.write(b);\n  cksum.update(b);\n}\n", "nl": "Writes a byte. Will block until the byte is actually written.", "id": "29349"}
{"code": "public boolean isRecordingEnabled(){\n  return enableRecording;\n}\n", "nl": "Retrieves whether recording is enabled.", "id": "11240"}
{"code": "public static PasswordModifyExtendedRequest newPasswordModifyExtendedRequest(){\n  return new PasswordModifyExtendedRequestImpl();\n}\n", "nl": "Creates a new password modify extended request, with no user identity, old password, or new password.", "id": "28073"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodeinsertbeforenewchilddiffdocument.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "16392"}
{"code": "public void disableVertexAttribute(String name){\n  int location=fetchAttributeLocation(name);\n  if (location == -1)   return;\n  GLES20.glDisableVertexAttribArray(location);\n}\n", "nl": "Disables the vertex attribute with the given name", "id": "8293"}
{"code": "public boolean isIdentity(){\n  return (state == APPLY_IDENTITY || (getType() == TYPE_IDENTITY));\n}\n", "nl": "Returns <code>true</code> if this <code>AffineTransform</code> is an identity transform.", "id": "48771"}
{"code": "public byte[] decode(byte[] bytes) throws DecoderException {\n  return decodeUrl(bytes);\n}\n", "nl": "Decodes an array of URL safe 7-bit characters into an array of  original bytes. Escaped characters are converted back to their  original representation.", "id": "29669"}
{"code": "public Set entrySet(){\n  if (entrySet == null)   entrySet=new SynchronizedSet(new EntrySet(),this);\n  return entrySet;\n}\n", "nl": "Returns a Set view of the entries contained in this Cache. Each element in this collection is a Map.Entry. The Set is backed by the Cache, so changes to the Cache are reflected in the Set, and vice-versa. The Set supports element removal (which removes the corresponding entry from the Cache), but not element addition.", "id": "3357"}
{"code": "protected String deserializeSessionId(byte[] data) throws IOException {\n  ReplicationStream ois=getReplicationStream(data);\n  String sessionId=ois.readUTF();\n  ois.close();\n  return sessionId;\n}\n", "nl": "Load sessionID", "id": "21115"}
{"code": "private void sendLogEntry(String logEntry){\n  Message.obtain(mHandler,MSG_NEW_LOG_ENTRY,logEntry).sendToTarget();\n}\n", "nl": "Send logcat log entry to view.", "id": "5441"}
{"code": "private void init(String publicId,String systemId,int lineNumber,int columnNumber){\n  this.publicId=publicId;\n  this.systemId=systemId;\n  this.lineNumber=lineNumber;\n  this.columnNumber=columnNumber;\n}\n", "nl": "Internal initialization method.", "id": "48661"}
{"code": "public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException {\n  fsb().sendSAXComment(lh,m_start,m_length);\n}\n", "nl": "Directly call the comment method on the passed LexicalHandler for the string-value.", "id": "6222"}
{"code": "public Object clone() throws CloneNotSupportedException {\n  OptionListModel clone=(OptionListModel)super.clone();\n  clone.value=(BitSet)value.clone();\n  clone.listenerList=new EventListenerList();\n  return clone;\n}\n", "nl": "Returns a clone of the receiver with the same selection. <code>listenerLists</code> are not duplicated.", "id": "10014"}
{"code": "private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n  in.defaultReadObject();\n}\n", "nl": "This method is invoked while deserialization", "id": "37858"}
{"code": "public static boolean isXML11Invalid(int c){\n  return !isXML11Valid(c);\n}\n", "nl": "Returns true if the specified character is invalid.", "id": "57247"}
{"code": "public boolean equals(Object object){\n  return super.equals(object) && object instanceof JobMediaSheets;\n}\n", "nl": "Returns whether this job media sheets attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: <OL TYPE=1> <LI> <CODE>object</CODE> is not null. <LI> <CODE>object</CODE> is an instance of class JobMediaSheets. <LI> This job media sheets attribute's value and <CODE>object</CODE>'s value are equal. </OL>", "id": "51314"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.ResourceIDElement createResourceIDElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.ResourceIDElementImpl();\n}\n", "nl": "Create an instance of ResourceIDElement", "id": "29230"}
{"code": "public List<String> tablesForLogging(){\n  return Collections.unmodifiableList(values.tablesForLogging);\n}\n", "nl": "List of tables to log slow queries on.", "id": "30822"}
{"code": "private ImageIcon createIcon(String path,String description){\n  ImageIcon icon=Utilities.createImageIcon(path);\n  if (description != null) {\n    icon.setDescription(description);\n    icon.getAccessibleContext().setAccessibleDescription(description);\n  }\n  return icon;\n}\n", "nl": "Creates an icon for a given path.", "id": "5566"}
{"code": "@Override public void reset() throws IOException {\n  in.reset();\n  lineNumber=markedLineNumber;\n  lastChar=markedLastChar;\n}\n", "nl": "Resets this stream to the last marked location. It also resets the line count to what is was when this stream was marked.", "id": "32669"}
{"code": "public static Object parseWithException(Reader in) throws IOException, ParseException {\n  JSONParser parser=new JSONParser();\n  return parser.parse(in);\n}\n", "nl": "Parse JSON text into java object from the input source.", "id": "11231"}
{"code": "public NSObject objectAtIndex(int i){\n  return array[i];\n}\n", "nl": "Returns the object stored at the given index. Equivalent to <code>getArray()[i]</code>.", "id": "4784"}
{"code": "public void removeClickingListener(OnWheelClickedListener listener){\n  clickingListeners.remove(listener);\n}\n", "nl": "Removes wheel clicking listener", "id": "35942"}
{"code": "@DataProvider public Object[][] invalidAttributeDescriptions(){\n  return new Object[][]{{\"cn+xxx\",false},{\"cn_xxx\",false},{\"cn.xxx\",false},{\"cn+xxx\",true},{\"cn;xxx+yyy\",false},{\"cn;xxx_yyy\",false},{\"cn;xxx.yyy\",false},{\"cn;xxx+yyy\",true}};\n}\n", "nl": "Returns test data for invalid attribute descriptions.", "id": "25908"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodeclonefalsenocopytext.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "29923"}
{"code": "public static void downloadFile(final String fileUrl,final String localFile) throws IOException {\n  final URL url=new URL(fileUrl);\n  final HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n  final byte[] data=JKIOUtil.readStream(connection.getInputStream());\n  JKIOUtil.writeBytesToFile(data,localFile);\n}\n", "nl": "Download file.", "id": "16587"}
{"code": "private void checkState(){\n  if (!start) {\n    throw new IllegalStateException(\"Cannot visit member before visit has been called.\");\n  }\n  if (end) {\n    throw new IllegalStateException(\"Cannot visit member after visitEnd has been called.\");\n  }\n}\n", "nl": "Checks that the visit method has been called and that visitEnd has not been called.", "id": "31219"}
{"code": "private int initializeServer(final PrintStream out,final PrintStream err){\n  try {\n    new DirectoryServer.InitializationBuilder(configFile.getValue()).requireCryptoServices().requireErrorAndDebugLogPublisher(out,err).initialize();\n    return 0;\n  }\n catch (  InitializationException ie) {\n    printWrappedText(err,ERR_CANNOT_INITIALIZE_SERVER_COMPONENTS.get(ie.getLocalizedMessage()));\n    return 1;\n  }\n}\n", "nl": "Initializes the directory server.", "id": "51933"}
{"code": "public void install(JTextComponent c){\n  component=c;\n  removeAllHighlights();\n}\n", "nl": "Called when the UI is being installed into the interface of a JTextComponent.  Installs the editor, and removes any existing highlights.", "id": "19474"}
{"code": "public WritableRaster createCompatibleDestRaster(Raster src){\n  Rectangle2D r=getBounds2D(src);\n  return src.createCompatibleWritableRaster((int)r.getX(),(int)r.getY(),(int)r.getWidth(),(int)r.getHeight());\n}\n", "nl": "Creates a zeroed destination <CODE>Raster</CODE> with the correct size and number of bands.  A <CODE>RasterFormatException</CODE> may be thrown if the transformed width or height is equal to 0.", "id": "491"}
{"code": "public static boolean isValidNmtoken(String nmtoken){\n  if (nmtoken.length() == 0)   return false;\n  for (int i=0; i < nmtoken.length(); i++) {\n    char ch=nmtoken.charAt(i);\n    if (!isName(ch)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Check to see if a string is a valid Nmtoken according to [7] in the XML 1.0 Recommendation", "id": "36272"}
{"code": "public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){\n  if (mv != null) {\n    mv.visitLocalVariable(name,desc,signature,start,end,index);\n  }\n}\n", "nl": "Visits a local variable declaration.", "id": "51059"}
{"code": "private boolean readEqualsSign(){\n  skipWhitespace();\n  if (pos < input.length() && input.charAt(pos) == '=') {\n    pos++;\n    return true;\n  }\n  return false;\n}\n", "nl": "Returns true if an equals sign was read and consumed.", "id": "50902"}
{"code": "@Override public void execute() throws BuildException {\n  super.execute();\n  execute(\"/list\");\n}\n", "nl": "Execute the requested operation.", "id": "38622"}
{"code": "protected void headerName(int tok) throws ParseException {\n  this.lexer.match(tok);\n  this.lexer.SPorHT();\n  this.lexer.match(':');\n  this.lexer.SPorHT();\n}\n", "nl": "Parse the header name until the colon  and chew WS after that.", "id": "14998"}
{"code": "@Override public void write(ASN1Writer stream) throws IOException {\n  stream.writeStartSequence(OP_TYPE_ADD_REQUEST);\n  stream.writeOctetString(dn);\n  stream.writeStartSequence();\n  for (  RawAttribute attr : attributes) {\n    attr.write(stream);\n  }\n  stream.writeEndSequence();\n  stream.writeEndSequence();\n}\n", "nl": "Writes this protocol op to an ASN.1 output stream.", "id": "16871"}
{"code": "public boolean isFailOnError(){\n  return failOnError;\n}\n", "nl": "Returns the value of the failOnError property.", "id": "52354"}
{"code": "@Override public void toString(StringBuilder buffer){\n  buffer.append(\"ServerSideSortResponseControl(resultCode=\");\n  buffer.append(resultCode);\n  if (attributeType != null) {\n    buffer.append(\", attributeType=\");\n    buffer.append(attributeType);\n  }\n  buffer.append(\")\");\n}\n", "nl": "Appends a string representation of this server-side sort response control to the provided buffer.", "id": "15666"}
{"code": "public AddressFactory createAddressFactory() throws PeerUnavailableException {\n  if (addressFactory == null) {\n    addressFactory=(AddressFactory)createSipFactory(\"javax.sip.address.AddressFactoryImpl\");\n  }\n  return addressFactory;\n}\n", "nl": "Creates an instance of the AddressFactory implementation. This method ensures that only one instance of an AddressFactory is returned to the application, no matter how often this method is called.", "id": "49667"}
{"code": "public int read() throws IOException {\nsynchronized (lock) {\n    ensureOpen();\n    for (; ; ) {\n      if (nextChar >= nChars) {\n        fill();\n        if (nextChar >= nChars)         return -1;\n      }\n      if (skipLF) {\n        skipLF=false;\n        if (cb[nextChar] == '\\n') {\n          nextChar++;\n          continue;\n        }\n      }\n      return cb[nextChar++];\n    }\n  }\n}\n", "nl": "Reads a single character.", "id": "35640"}
{"code": "public boolean isConnected(){\n  return isConnected;\n}\n", "nl": "Returns whether this socket is connected to a remote host.", "id": "46259"}
{"code": "private void toString(StringBuilder buffer){\n  toPOSIXString(this,buffer,\"Owner=\",\", Group=\",\", Other=\");\n}\n", "nl": "Appends a string representation of this file permission to the given buffer.", "id": "20060"}
{"code": "private void write(ByteChunk bc){\n  int length=bc.getLength();\n  checkLengthBeforeWrite(length);\n  System.arraycopy(bc.getBytes(),bc.getStart(),headerBuffer,pos,length);\n  pos=pos + length;\n}\n", "nl": "This method will write the contents of the specified byte chunk to the output stream, without filtering. This method is meant to be used to write the response header.", "id": "44757"}
{"code": "public void mousePressed(MouseEvent e){\n  isBeingPressed=true;\n}\n", "nl": "Callback when a mouse button has been pressed.", "id": "21510"}
{"code": "@Override public void focusLost(FocusEvent e){\n  if (isPopupVisible(comboBox)) {\n    setPopupVisible(comboBox,false);\n  }\n}\n", "nl": "Prevent action events from being fired on focusLost.", "id": "16887"}
{"code": "public Component add(Component component){\n  if (!(component instanceof UIResource)) {\n    addTab(component.getName(),component);\n  }\n else {\n    super.add(component);\n  }\n  return component;\n}\n", "nl": "Adds a <code>component</code> with a tab title defaulting to the name of the component which is the result of calling <code>component.getName</code>. Cover method for <code>insertTab</code>.", "id": "29396"}
{"code": "public void evictAll(){\n  List<Connection> connections;\nsynchronized (this) {\n    connections=new ArrayList<Connection>(this.connections);\n    this.connections.clear();\n  }\n  for (  Connection connection : connections) {\n    Util.closeQuietly(connection);\n  }\n}\n", "nl": "Close and remove all connections in the pool.", "id": "23371"}
{"code": "public void markCompletelyClean(JComponent aComponent){\n  RepaintManager delegate=getDelegate(aComponent);\n  if (delegate != null) {\n    delegate.markCompletelyClean(aComponent);\n    return;\n  }\nsynchronized (this) {\n    dirtyComponents.remove(aComponent);\n  }\n}\n", "nl": "Mark a component completely clean. <b>aComponent</b> will not get painted during the next paintDirtyRegions() call.", "id": "54356"}
{"code": "public void quit(){\n  logger.info(LocalizableMessage.raw(\"quitting application\"));\n  flushLogs();\n  System.exit(0);\n}\n", "nl": "Method called when we want to quit the setup (for instance when the user clicks on 'Close' or 'Quit' buttons and has confirmed that (s)he wants to quit the program.", "id": "36873"}
{"code": "public boolean computeScrollOffset(){\n  return mScroller.computeScrollOffset();\n}\n", "nl": "Call this when you want to know the new location.  If it returns true, the animation is not yet finished.  loc will be altered to provide the new location.", "id": "43013"}
{"code": "public void close(){\n  str=null;\n}\n", "nl": "Closes the stream and releases any system resources associated with it. Once the stream has been closed, further read(), ready(), mark(), or reset() invocations will throw an IOException. Closing a previously closed stream has no effect.", "id": "2897"}
{"code": "@Override public JapaneseDate dateYearDay(int prolepticYear,int dayOfYear){\n  return new JapaneseDate(LocalDate.ofYearDay(prolepticYear,dayOfYear));\n}\n", "nl": "Obtains a local date in Japanese calendar system from the proleptic-year and day-of-year fields. <p> The day-of-year in this factory is expressed relative to the start of the proleptic year. The Japanese proleptic year and day-of-year are the same as those in the ISO calendar system. They are not reset when the era changes.", "id": "46615"}
{"code": "public String asPath(){\n  return path;\n}\n", "nl": "Returns the realm in path format. e.g. '/realmA/realmB'.", "id": "47908"}
{"code": "void checkTargetForReferral(Entry entry,SearchScope searchScope) throws DirectoryException {\n  Set<String> referralURLs=entry.getReferralURLs();\n  if (referralURLs != null) {\n    throwReferralException(entry.getName(),entry.getName(),referralURLs,searchScope);\n  }\n}\n", "nl": "Checks whether the target of an operation is a referral entry and throws a Directory referral exception if it is.", "id": "7005"}
{"code": "int checkValidYear(long prolepticYear){\n  if (prolepticYear < getMinimumYear() || prolepticYear > getMaximumYear()) {\n    throw new DateTimeException(\"Invalid Hijrah year: \" + prolepticYear);\n  }\n  return (int)prolepticYear;\n}\n", "nl": "Check the validity of a year.", "id": "14825"}
{"code": "public synchronized void freeInstance(DTMIterator obj){\n  m_freeStack.add(obj);\n}\n", "nl": "Add an instance of the given object to the pool ", "id": "44760"}
{"code": "@After public void clean(){\n  mute(null);\n  mute(null);\n  mute(null);\n}\n", "nl": "Cleanups after each tests.", "id": "36785"}
{"code": "@Override public ApplicationParameter[] findApplicationParameters(){\nsynchronized (applicationParametersLock) {\n    return (applicationParameters);\n  }\n}\n", "nl": "Return the set of application parameters for this application.", "id": "29608"}
{"code": "@Override public void run(){\n  while (!stop) {\n    try {\n      Thread.sleep(1);\n    }\n catch (    InterruptedException iex) {\n      iex.printStackTrace();\n    }\n    if (!stop) {\n      System.out.print(\"\\r\" + prompt + \" \\r\"+ prompt);\n    }\n    System.out.flush();\n  }\n}\n", "nl": "Begin masking until asked to stop.", "id": "37307"}
{"code": "protected void onUncaughtException(RequestContext requestContext,Exception e) throws ServletException, IOException {\n  getDebug().error(\"ConsoleServletBase.onUncaughtException\",e);\n  requestContext.getResponse().sendRedirect(\"../base/AMUncaughtException\");\n}\n", "nl": "Forwards to uncaught exception view bean, to respond to uncaught  application error messages.", "id": "9046"}
{"code": "public String delete(String url,final int expectedStatusCode){\n  return delete(url,Collections.<String,String>emptyMap(),expectedStatusCode);\n}\n", "nl": "Issue an HTTP DELETE and assert the response status code.", "id": "53164"}
{"code": "public boolean isStatusBarTintEnabled(){\n  return mStatusBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system status bar?", "id": "52619"}
{"code": "private void expandRoot(){\n  TreeModel model=getModel();\n  if (model != null && model.getRoot() != null) {\n    expandPath(new TreePath(model.getRoot()));\n  }\n}\n", "nl": "Expands the root path, assuming the current TreeModel has been set.", "id": "8663"}
{"code": "public void addLogInfo(String key,Object value){\n  logInfoMap.put(key,value);\n}\n", "nl": "Adds to the log information map, the field key and its corresponding value.", "id": "37110"}
{"code": "public static ComponentUI createUI(JComponent c){\n  return new SynthTabbedPaneUI();\n}\n", "nl": "Creates a new UI object for the given component.", "id": "3865"}
{"code": "public int compare(int[] o1,int[] o2){\n  int m1=o1[0];\n  int m2=o2[0];\n  return Integer.compare(m1,m2);\n}\n", "nl": "The method used to sort the metrics array.", "id": "22254"}
{"code": "@Override public List<Foo> findByUuid(String uuid){\n  return findByUuid(uuid,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);\n}\n", "nl": "Returns all the foos where uuid = &#63;.", "id": "1867"}
{"code": "protected StringBuffer applyRules(final Calendar calendar,final StringBuffer buf){\n  return printer.applyRules(calendar,buf);\n}\n", "nl": "<p>Performs the formatting by applying the rules to the specified calendar.</p>", "id": "36282"}
{"code": "public com.sun.identity.wsfederation.jaxb.xmlsig.CanonicalizationMethodElement createCanonicalizationMethodElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.CanonicalizationMethodElementImpl();\n}\n", "nl": "Create an instance of CanonicalizationMethodElement", "id": "12980"}
{"code": "void doubleBufferingChanged(JRootPane rootPane){\n  getPaintManager().doubleBufferingChanged(rootPane);\n}\n", "nl": "Invoked when the doubleBuffered or useTrueDoubleBuffering properties of a JRootPane change.  This may come in on any thread.", "id": "49739"}
{"code": "private Object writeReplace() throws ObjectStreamException {\n  if (primitiveArray) {\n    return convertFromPrimitiveToWrapperTypes();\n  }\n else {\n    return this;\n  }\n}\n", "nl": "Nominate a replacement for this object in the stream before the object is written.", "id": "43360"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.SharedSecretDynamicPlaintextElement createSharedSecretDynamicPlaintextElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SharedSecretDynamicPlaintextElementImpl();\n}\n", "nl": "Create an instance of SharedSecretDynamicPlaintextElement", "id": "19692"}
{"code": "public float transformX(int x){\n  return ((float)x - offsetWx) * scalingX / extentWx;\n}\n", "nl": "Transform the specified value.", "id": "5178"}
{"code": "public void onSaveInstanceState(Bundle outState){\n  outState.putBoolean(\"SlidingActivityHelper.open\",mSlidingMenu.isMenuShowing());\n  outState.putBoolean(\"SlidingActivityHelper.secondary\",mSlidingMenu.isSecondaryMenuShowing());\n}\n", "nl": "Called to retrieve per-instance state from an activity before being killed so that the state can be restored in onCreate(Bundle) or onRestoreInstanceState(Bundle) (the Bundle populated by this method will be passed to both).", "id": "8965"}
{"code": "@Override public void onDestroy(){\n  if (mAdView != null) {\n    mAdView.destroy();\n  }\n  super.onDestroy();\n}\n", "nl": "Called before the activity is destroyed", "id": "45965"}
{"code": "boolean searchBaseDNInformation(){\n  return searchBaseDNInformation;\n}\n", "nl": "Returns whether we must search for base DN information or not.", "id": "37591"}
{"code": "public WriterProperties useDebugMode(){\n  this.debugMode=true;\n  return this;\n}\n", "nl": "This activates debug mode with pdfDebug tool. It causes additional overhead of duplicating document bytes into memory, so use it careful. NEVER use it in production or in any other cases except pdfDebug.", "id": "25813"}
{"code": "public static String showInputDialog(Object message) throws HeadlessException {\n  return showInputDialog(null,message);\n}\n", "nl": "Shows a question-message dialog requesting input from the user. The dialog uses the default frame, which usually means it is centered on the screen.", "id": "53254"}
{"code": "@OnMessage public void echoPongMessage(PongMessage pm){\n}\n", "nl": "Process a received pong. This is a NO-OP.", "id": "52527"}
{"code": "public Builder names(final String... names){\n  return names(Arrays.asList(names));\n}\n", "nl": "Adds the provided user friendly names.", "id": "20351"}
{"code": "private final void stop(){\n  logMessage(thread.getName() + \" received stop() request.\");\n  stopped=true;\n  thread.interrupt();\n}\n", "nl": "Stops this thread. This method may return before this thread actually dies.", "id": "48945"}
{"code": "public void addSource(final DOMImplementationSource s){\n  if (s == null) {\n    throw new NullPointerException();\n  }\n  if (!sources.contains(s)) {\n    sources.addElement(s);\n  }\n}\n", "nl": "Register an implementation.", "id": "6745"}
{"code": "public static void cacheResult(List<Foo> foos){\n  getPersistence().cacheResult(foos);\n}\n", "nl": "Caches the foos in the entity cache if it is enabled.", "id": "9122"}
{"code": "public static void main(String[] args){\n  int retCode=mainBackUpDB(args,true,System.out,System.err);\n  if (retCode != 0) {\n    System.exit(filterExitCode(retCode));\n  }\n}\n", "nl": "The main method for BackUpDB tool.", "id": "23132"}
{"code": "public boolean hasValue(AttributeType attributeType,ByteString value){\n  for (  Attribute a : getAllAttributes(attributeType)) {\n    if (!a.getAttributeDescription().hasOptions() && a.contains(value)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Indicates whether this entry contains the specified attribute value.", "id": "32284"}
{"code": "protected boolean end(TextView widget,Spannable buffer){\n  return false;\n}\n", "nl": "Performs an end movement action. Moves the cursor or scrolls to the start of the line or to the top of the document depending on whether the insertion point is being moved or the document is being scrolled.", "id": "11556"}
{"code": "protected String makeLegalForJAAS(final String src){\n  String result=src;\n  if (result == null) {\n    result=\"other\";\n  }\n  if (result.startsWith(\"/\")) {\n    result=result.substring(1);\n  }\n  return result;\n}\n", "nl": "Ensure the given name is legal for JAAS configuration. Added for Bugzilla 30869, made protected for easy customization in case my implementation is insufficient, which I think is very likely.", "id": "51139"}
{"code": "public AllowHeader createAllowHeader(String method) throws ParseException {\n  if (method == null)   throw new NullPointerException(\"null arg method\");\n  Allow allow=new Allow();\n  allow.setMethod(method);\n  return allow;\n}\n", "nl": "Creates a new AllowHeader based on the newly supplied method value.", "id": "30083"}
{"code": "public static com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(long fooId) throws com.liferay.portal.kernel.exception.PortalException {\n  return getService().deleteFoo(fooId);\n}\n", "nl": "Deletes the foo with the primary key from the database. Also notifies the appropriate model listeners.", "id": "7602"}
{"code": "public void checkNumberArgs(int argNum) throws WrongNumberArgsException {\n  if (argNum != 2)   reportWrongNumberArgs();\n}\n", "nl": "Check that the number of arguments passed to this function is correct.", "id": "47978"}
{"code": "public void requestSecondsUntilPasswordExpirationWarning(){\n  operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_PASSWORD_EXPIRATION_WARNING);\n}\n", "nl": "Returns the seconds until password expiration warning.", "id": "7750"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsfederation.FederationType createFederationType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.FederationTypeImpl();\n}\n", "nl": "Create an instance of FederationType", "id": "2501"}
{"code": "public static QrCode encodeSegments(List<QrSegment> segs,Ecc ecl){\n  return encodeSegments(segs,ecl,1,40,-1,true);\n}\n", "nl": "Returns a QR Code symbol representing the specified data segments at the specified error correction level or higher. The smallest possible QR Code version is automatically chosen for the output. <p>This function allows the user to create a custom sequence of segments that switches between modes (such as alphanumeric and binary) to encode text more efficiently. This function is considered to be lower level than simply encoding text or binary data.</p>", "id": "13872"}
{"code": "public boolean isNodeRelated(DefaultMutableTreeNode aNode){\n  return (aNode != null) && (getRoot() == aNode.getRoot());\n}\n", "nl": "Returns true if and only if <code>aNode</code> is in the same tree as this node.  Returns false if <code>aNode</code> is null.", "id": "2107"}
{"code": "public void clear(){\n  Arrays.fill(vals,null);\n  size=0;\n}\n", "nl": "Removes all mappings from this map.", "id": "8695"}
{"code": "public ListIterator listIterator(){\n  return sdpFields.listIterator();\n}\n", "nl": "Return a list iterator for the embedded field list.", "id": "35948"}
{"code": "private final boolean parkAndCheckInterrupt(){\n  LockSupport.park(this);\n  return Thread.interrupted();\n}\n", "nl": "Convenience method to park and then check if interrupted", "id": "18141"}
{"code": "protected void removeNextProtocolMessages(List<ProtocolMessage> protocolMessages,int fromIndex){\n  for (int i=protocolMessages.size() - 1; i >= fromIndex; i--) {\n    protocolMessages.remove(i);\n  }\n}\n", "nl": "In a case the protocol message received was not equal to the messages in our protocol message list, we have to clear our protocol message list.", "id": "35306"}
{"code": "public static ComponentUI createUI(JComponent a){\n  ComponentUI mui=new MultiTableHeaderUI();\n  return MultiLookAndFeel.createUIs(mui,((MultiTableHeaderUI)mui).uis,a);\n}\n", "nl": "Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI.  Otherwise, just returns the UI object obtained from the default <code>LookAndFeel</code>.", "id": "20309"}
{"code": "public String colorize(final String message){\n  if (SUPPORTED) {\n    final StringBuilder buff=new StringBuilder(start.length() + message.length() + END.length());\n    buff.append(start).append(message).append(END);\n    return buff.toString();\n  }\n else {\n    return message;\n  }\n}\n", "nl": "Wraps given <code>message</code> with special ansi control sequences and returns it", "id": "22817"}
{"code": "public static Response parseXML(InputStream is) throws SAMLException {\n  Document doc=XMLUtils.toDOMDocument(is,SAMLUtils.debug);\n  Element root=doc.getDocumentElement();\n  return new Response(root);\n}\n", "nl": "Returns Response object based on the XML document received from server. This method is used primarily at the client side. The schema of the XML document is describe above.", "id": "25249"}
{"code": "private boolean casHead(HeadIndex<K,V> cmp,HeadIndex<K,V> val){\n  return UNSAFE.compareAndSwapObject(this,headOffset,cmp,val);\n}\n", "nl": "compareAndSet head node", "id": "31595"}
{"code": "@Advice.OnMethodEnter public static long enter(){\n  final long startTime=System.currentTimeMillis();\n  return startTime;\n}\n", "nl": "Code executed before the intercepted method.", "id": "31147"}
{"code": "public byte[] reverse(byte[] data) throws TokenStrategyFailedException {\n  return apply(reverseStrategies,false,data);\n}\n", "nl": "Performs the reverse strategy on the byte array.", "id": "19500"}
{"code": "public static String formatDate(final java.util.Date date){\n  return formatDate(date,DEFAULT_DATE_PATTERN);\n}\n", "nl": "Format date.", "id": "26306"}
{"code": "@Override public void propertyChange(PropertyChangeEvent event){\n  if (!initialized)   return;\n  Object source=event.getSource();\n  if (source == namingResources) {\n    ContextAccessController.setWritable(getName(),token);\n    processGlobalResourcesChange(event.getPropertyName(),event.getOldValue(),event.getNewValue());\n    ContextAccessController.setReadOnly(getName());\n  }\n}\n", "nl": "Process property change events.", "id": "53821"}
{"code": "public byte peek(int offset){\n  return sequence.byteAt(pos + offset);\n}\n", "nl": "Returns the byte situated at the given offset from current position. The byte is not consumed.", "id": "51945"}
{"code": "public boolean errorEnabled(){\n  return getDebugServiceInstance().errorEnabled();\n}\n", "nl": "Checks if error debugging is enabled. <p/> <p> <b>NOTE:</b> Debugging is an IO intensive operation and may hurt application performance when abused. Particularly, note that Java evaluates arguments to <code>error()</code> even when error debugging is turned off. It is recommended that <code>errorEnabled()</code> be called to check the debug state before invoking any <code>error()</code> methods to avoid unnecessary argument evaluation and maximize application performance. </p>", "id": "15599"}
{"code": "public boolean equals(Object rhs){\n  try {\n    return equals((ShapeGraphicAttribute)rhs);\n  }\n catch (  ClassCastException e) {\n    return false;\n  }\n}\n", "nl": "Compares this <code>ShapeGraphicAttribute</code> to the specified <code>Object</code>.", "id": "27318"}
{"code": "public void rejectedExecution(Runnable r,ThreadPoolExecutor e){\n}\n", "nl": "Does nothing, which has the effect of discarding task r.", "id": "6861"}
{"code": "static int toCodePoint(char ch){\n  int codePoint=ch;\n  return codePoint;\n}\n", "nl": "Return the unicode code point represented by the char. A bit of a dummy method, since all it does is return the char, but as an int value. <p> This is not a public API.", "id": "27418"}
{"code": "public static List<Control> createDisconnectControlList(String section){\n  Control c=new DisconnectClientControl(false,section);\n  return CollectionUtils.newArrayList(c);\n}\n", "nl": "Retrieves a list containing a disconnect control with the specified section.", "id": "53661"}
{"code": "private void finishedDispatching(boolean dispatched){\n  this.dispatched=dispatched;\n  if (notifier != null) {\nsynchronized (notifier) {\n      notifier.notifyAll();\n    }\n  }\n  if (listener != null) {\n    listener.run();\n  }\n}\n", "nl": "Called when the event was dispatched or disposed", "id": "37025"}
{"code": "@Override public String toString(){\n  StringBuilder buffer=new StringBuilder();\n  buffer.append(getTotalCount());\n  buffer.append(\"    \");\n  buffer.append(className);\n  buffer.append('.');\n  buffer.append(methodName);\n  return buffer.toString();\n}\n", "nl": "Retrieves a string representation of this stack frame.  It will contain the total number of matching frames, the class name, and the method name.", "id": "21245"}
{"code": "@SuppressWarnings(\"unchecked\") @Override public PdfStream copyTo(PdfDocument document,boolean allowDuplicating){\n  return (PdfStream)super.copyTo(document,allowDuplicating);\n}\n", "nl": "Copies object to a specified document. Works only for objects that are read from existing document, otherwise an exception is thrown.", "id": "45090"}
{"code": "public static QrSegment makeBytes(byte[] data){\n  if (data == null)   throw new NullPointerException();\n  return new QrSegment(Mode.BYTE,data.length,data,data.length * 8);\n}\n", "nl": "Returns a segment representing the specified binary data encoded in byte mode.", "id": "48665"}
{"code": "protected void alert(byte level,byte description){\n  if (logger != null) {\n    logger.println(\"Alert.alert: \" + level + \" \"+ description);\n  }\n  this.alert[0]=level;\n  this.alert[1]=description;\n}\n", "nl": "Reports an alert to be sent/received by transport. This method is usually called during processing of the income TSL record: if it contains alert message from another peer, or if warning alert occured during the processing of the message and this warning should be sent to another peer.", "id": "42012"}
{"code": "protected void registerChildren(){\n  super.registerChildren();\n  registerChild(PGTITLE,CCPageTitle.class);\n  registerChild(TF_PARENTID,CCTextField.class);\n  registerChild(TF_CLIENT_TYPE,CCTextField.class);\n  registerChild(SEC_MH_COMMON,CCSecondaryMasthead.class);\n  registerChild(PROPERTY_ATTRIBUTE,AMPropertySheet.class);\n  ptModel.registerChildren(this);\n  propertySheetModel.registerChildren(this);\n}\n", "nl": "Registers user interface components used by this view bean.", "id": "9092"}
{"code": "public Object clone(){\n  try {\n    GridBagConstraints c=(GridBagConstraints)super.clone();\n    c.insets=(Insets)insets.clone();\n    return c;\n  }\n catch (  CloneNotSupportedException e) {\n    throw new InternalError(e);\n  }\n}\n", "nl": "Creates a copy of this grid bag constraint.", "id": "46455"}
{"code": "public static int round(float value){\n  long lx=(long)(value * (65536 * 256f));\n  return (int)((lx + 0x800000) >> 24);\n}\n", "nl": "Fast round from float to int. This is faster than Math.round() thought it may return slightly different results. It does not try to handle (in any meaningful way) NaN or infinities.", "id": "36633"}
{"code": "protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {\n  ElemTemplateElement parent=handler.getElemTemplateElement();\n  if (null != parent) {\n    parent.appendChild(elem);\n    handler.pushElemTemplateElement(elem);\n  }\n}\n", "nl": "Append the current template element to the current template element, and then push it onto the current template element stack.", "id": "26407"}
{"code": "@Override public URLConnection openConnection(URL url) throws IOException {\n  return openConnection(url,null);\n}\n", "nl": "Returns a connection to the a file pointed by this <code>URL</code> in the file system", "id": "42834"}
{"code": "public static boolean containsAny(final String value,final String[] needles,final boolean caseSensitive){\n  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);\n  return Arrays.stream(needles).anyMatch(null);\n}\n", "nl": "Verifies that one or more of needles are contained in value.", "id": "46220"}
{"code": "@Override public int read() throws IOException {\n  if (buffer == null) {\n    throw new IOException(\"Stream was closed.\");\n  }\n  while (pos == end) {\n    if (end_reached) {\n      return -1;\n    }\n    owner.needAppData();\n  }\n  return buffer[pos++] & 0xFF;\n}\n", "nl": "Reads one byte. If there is no data in the underlying buffer, this operation can block until the data will be available.", "id": "6520"}
{"code": "public static void init(Context context){\n  if (cameraManager == null) {\n    cameraManager=new CameraManager(context);\n  }\n}\n", "nl": "Initializes this static object with the Context of the calling Activity.", "id": "24033"}
{"code": "private boolean entryExists(ReadableTransaction txn,final DN entryDN){\n  EntryCache<?> entryCache=DirectoryServer.getEntryCache();\n  return (entryCache != null && entryCache.containsEntry(entryDN)) || dn2id.get(txn,entryDN) != null;\n}\n", "nl": "Indicates whether an entry with the specified DN exists.", "id": "6583"}
{"code": "public String toString(){\n  return getSize() + \" bytes\";\n}\n", "nl": "Because this is usually binary data and could be very long we just return the number of bytes held", "id": "39296"}
{"code": "public void postSingleLogoutSuccess(String hostedProviderID,HttpServletRequest request,HttpServletResponse response,String userDN,FSLogoutNotification logoutRequest,FSLogoutResponse logoutResponse,String sloProfile){\n  FSUtils.debug.message(\"In FSDefaultSPAdapter.postSingleLogoutSuccess.\");\n}\n", "nl": "Invokes after single logout is successful completed, i.e. user token has been invalidated.", "id": "55652"}
{"code": "public static boolean showSoftKeyBoard(Context context,View view){\n  InputMethodManager mgr=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);\n  return mgr.showSoftInput(view,InputMethodManager.SHOW_FORCED);\n}\n", "nl": "Show the soft keyboard.", "id": "56216"}
{"code": "public static void addDefaultProfile(SpringApplication app){\n  Map<String,Object> defProperties=new HashMap<>();\n  defProperties.put(SPRING_PROFILE_DEFAULT,Constants.SPRING_PROFILE_DEVELOPMENT);\n  app.setDefaultProperties(defProperties);\n}\n", "nl": "Set a default to use when no profile is configured.", "id": "32429"}
{"code": "public void paintToolBarContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n}\n", "nl": "Paints the border of the content area of a tool bar.", "id": "34410"}
{"code": "static <T>UnaryOperator<T> identity(){\n  return null;\n}\n", "nl": "Returns a unary operator that always returns its input argument.", "id": "28745"}
{"code": "public void windowDeiconified(WindowEvent e){\n  ((WindowListener)a).windowDeiconified(e);\n  ((WindowListener)b).windowDeiconified(e);\n}\n", "nl": "Handles the windowDeiconfied event by invoking the windowDeiconified methods on listener-a and listener-b.", "id": "56703"}
{"code": "public Builder names(final String... names){\n  return names(asList(names));\n}\n", "nl": "Adds the provided user friendly names.", "id": "55260"}
{"code": "private void runPatchers(){\n  if (patchers != null) {\n    for (int i=0; i < patchersLen; i++)     patchers[i].run();\n  }\n}\n", "nl": "Executes all the patchers.", "id": "36338"}
{"code": "void addEntry(IndexBuffer buffer,EntryID entryID,Entry entry) throws StorageRuntimeException, DirectoryException {\n  for (  MatchingRuleIndex index : indexIdToIndexes.values()) {\n    for (    ByteString key : index.indexEntry(entry)) {\n      buffer.put(index,key,entryID);\n    }\n  }\n}\n", "nl": "Update the attribute index for a new entry.", "id": "15554"}
{"code": "public AlphaComposite derive(int rule){\n  return (this.rule == rule) ? this : getInstance(rule,this.extraAlpha);\n}\n", "nl": "Returns a similar <code>AlphaComposite</code> object that uses the specified compositing rule. If this object already uses the specified compositing rule, this object is returned.", "id": "10435"}
{"code": "private JsonValue deleteGroup(String id) throws Exception {\n  System.out.println(\"1. Delete a group:\");\n  HttpResponse<String> response=Unirest.delete(azureEndpoint + \"/group/\" + id).header(\"x-openidm-username\",\"openidm-admin\").header(\"x-openidm-password\",\"openidm-admin\").asString();\n  return json(readJson(response.getBody()));\n}\n", "nl": "Demonstrates the REST call to delete a group by the group id.", "id": "41518"}
{"code": "public boolean messageEnabled(){\n  return getDebugServiceInstance().messageEnabled();\n}\n", "nl": "Checks if message debugging is enabled. <p/> <p> <b>NOTE:</b> Debugging is an IO intensive operation and may hurt application performance when abused. Particularly, note that Java evaluates arguments to <code>message()</code> even when debugging is turned off. It is recommended that <code>messageEnabled()</code> be called to check the debug state before invoking any <code>message()</code> methods to avoid unnecessary argument evaluation and maximize application performance. </p>", "id": "42804"}
{"code": "public void disableVertexAttribute(String name){\n  int location=fetchAttributeLocation(name);\n  if (location == -1)   return;\n  GLES20.glDisableVertexAttribArray(location);\n}\n", "nl": "Disables the vertex attribute with the given name", "id": "51041"}
{"code": "@Override protected void onDestroy(){\n  super.onDestroy();\n  if (isFinishing()) {\n    clean();\n  }\n}\n", "nl": "Releases the resources associated with the camera source, the associated detectors, and the rest of the processing pipeline.", "id": "16856"}
{"code": "public static void sort(char[] a){\n  doSort(a,0,a.length - 1);\n}\n", "nl": "Sorts the specified array into ascending numerical order.", "id": "25189"}
{"code": "private boolean isSeparator(final char c){\nswitch (c) {\ncase ' ':\ncase '-':\n    return true;\ndefault :\n  return false;\n}\n}\n", "nl": "Indicates whether the provided character is a valid separator for telephone number components when operating in strict mode.", "id": "39044"}
{"code": "public void addInitParameter(String name,String value){\n  if (parameters.containsKey(name)) {\n    return;\n  }\n  parameters.put(name,value);\n}\n", "nl": "Add an initialization parameter to the set of parameters associated with this servlet.", "id": "50954"}
{"code": "public Class<?>[] parameterArray(){\n  return ptypes.clone();\n}\n", "nl": "Presents the parameter types as an array (a convenience method). Changes to the array will not result in changes to the type.", "id": "50174"}
{"code": "public void updateReadRecordCountTime(long time){\n  if (time > 0 && time < readRecordTimeMin) {\n    readRecordTimeMin=time;\n  }\n  if (time > readRecordTimeMax) {\n    readRecordTimeMax=time;\n  }\n  readRecordCumulativeCount+=time;\n  readRecordTimeAverage=readRecordCumulativeCount / totalReadRecordCount;\n}\n", "nl": "Update the read record count request time count", "id": "43554"}
{"code": "public void addCallMethod(String pattern,String methodName){\n  addRule(pattern,new CallMethodRule(methodName));\n}\n", "nl": "Add an \"call method\" rule for a method which accepts no arguments.", "id": "236"}
{"code": "public static boolean isSupportedControl(String controlOID){\n  return DirectoryServer.isSupportedControl(controlOID);\n}\n", "nl": "Indicates whether the specified OID is registered with the Directory Server as a supported control.", "id": "48177"}
{"code": "private void advanceRunState(int targetState){\n  for (; ; ) {\n    int c=ctl.get();\n    if (runStateAtLeast(c,targetState) || ctl.compareAndSet(c,ctlOf(targetState,workerCountOf(c))))     break;\n  }\n}\n", "nl": "Transitions runState to given target, or leaves it alone if already at least the given target.", "id": "35198"}
{"code": "public static ModifyDNRequest unmodifiableModifyDNRequest(final ModifyDNRequest request){\n  if (request instanceof UnmodifiableModifyDNRequestImpl) {\n    return request;\n  }\n  return new UnmodifiableModifyDNRequestImpl(request);\n}\n", "nl": "Creates an unmodifiable modify DN request of the provided request.", "id": "14047"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignaturePropertyElement createSignaturePropertyElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignaturePropertyElementImpl();\n}\n", "nl": "Create an instance of SignaturePropertyElement", "id": "20151"}
{"code": "public static Reader newReader(ReadableByteChannel channel,String charsetName){\n  if (charsetName == null) {\n    throw new NullPointerException(\"charsetName == null\");\n  }\n  return newReader(channel,Charset.forName(charsetName).newDecoder(),-1);\n}\n", "nl": "Returns a reader that decodes bytes from a channel. This method creates a reader with a buffer of default size.", "id": "30708"}
{"code": "public synchronized void selectAll(){\n  this.selectionStart=0;\n  this.selectionEnd=getText().length();\n  TextComponentPeer peer=(TextComponentPeer)this.peer;\n  if (peer != null) {\n    peer.select(selectionStart,selectionEnd);\n  }\n}\n", "nl": "Selects all the text in this text component.", "id": "25895"}
{"code": "public static Intent buildStartInterpreterIntent(String interpreterName){\n  final ComponentName componentName=Constants.SL4A_SERVICE_LAUNCHER_COMPONENT_NAME;\n  Intent intent=new Intent();\n  intent.setComponent(componentName);\n  intent.setAction(Constants.ACTION_LAUNCH_INTERPRETER);\n  intent.putExtra(Constants.EXTRA_INTERPRETER_NAME,interpreterName);\n  return intent;\n}\n", "nl": "Builds an intent that launches an interpreter.", "id": "40463"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_commentgetcomment.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "26099"}
{"code": "public static void validateNull(String name,Object object){\n  if (object == null) {\n    throw new IllegalStateException(name.concat(\" cannot be null\"));\n  }\n}\n", "nl": "Validate null.", "id": "15997"}
{"code": "public int corner_count(){\n  return polyline.corner_count();\n}\n", "nl": "returns the number of corners of this trace", "id": "24407"}
{"code": "@After public void clean(){\n  mute(null);\n  mute(null);\n  mute(null);\n}\n", "nl": "Cleanups after each tests.", "id": "45491"}
{"code": "public boolean equals(Object object){\n  return (super.equals(object) && object instanceof JobMediaSheetsSupported);\n}\n", "nl": "Returns whether this job media sheets supported attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: <OL TYPE=1> <LI> <CODE>object</CODE> is not null. <LI> <CODE>object</CODE> is an instance of class JobMediaSheetsSupported. <LI> This job media sheets supported attribute's members and <CODE>object</CODE>'s members are the same. </OL>", "id": "11818"}
{"code": "public boolean canTraverseOutsideSubtree(){\n  return (null == m_arg0) ? false : super.canTraverseOutsideSubtree();\n}\n", "nl": "Tell if this expression or it's subexpressions can traverse outside the current subtree.", "id": "13699"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsse.KeyIdentifierType createKeyIdentifierType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsse.impl.KeyIdentifierTypeImpl();\n}\n", "nl": "Create an instance of KeyIdentifierType", "id": "44211"}
{"code": "public Duration plusSeconds(long secondsToAdd){\n  return plus(secondsToAdd,0);\n}\n", "nl": "Returns a copy of this duration with the specified duration in seconds added. <p> This instance is immutable and unaffected by this method call.", "id": "33608"}
{"code": "private int epochMonthToYear(int epochMonth){\n  return (epochMonth + hijrahStartEpochMonth) / 12;\n}\n", "nl": "Returns the year computed from the epochMonth", "id": "33937"}
{"code": "public void check(String name){\n  DeployedApplication app=deployed.get(name);\n  if (app != null) {\n    checkResources(app,true);\n  }\n  deployApps(name);\n}\n", "nl": "Check status of a specific web application and reload, redeploy or deploy it as necessary. This method is for use with functionality such as management web applications that upload new/updated web applications and need to trigger the appropriate action to deploy them. This method assumes that the web application is currently marked as serviced and that any uploading/updating has been completed before this method is called. Any action taken as a result of the checks will complete before this method returns.", "id": "54402"}
{"code": "public void addValue(String value){\n  setValue(this.value + \"\\u0000\" + value);\n}\n", "nl": "Add an additional String to the current String value", "id": "44854"}
{"code": "public void removeResponseProvider(ResponseProvider respProvider){\n  String respProviderName=respProviders.getResponseProviderName(respProvider);\n  if (respProviderName != null) {\n    removeResponseProvider(respProviderName);\n  }\n}\n", "nl": "Removes the <code>ResponseProvider</code> object. If a respProvider instance does not exist, the method will  return silently.", "id": "28044"}
{"code": "public static boolean endsWith(final String value,final String search,final boolean caseSensitive){\n  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);\n  return endsWith(value,search,value.length(),caseSensitive);\n}\n", "nl": "Test if value ends with search.", "id": "1457"}
{"code": "public static String fixPropertyKey(final String name){\n  return name.toLowerCase().replace(\"_\",\"-\");\n}\n", "nl": "Fix property key.", "id": "51987"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.OperationalProtectionType createOperationalProtectionType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.OperationalProtectionTypeImpl();\n}\n", "nl": "Create an instance of OperationalProtectionType", "id": "14963"}
{"code": "public boolean subSchemaChanged(){\n  if (!hasSubSchema()) {\n    return hasNewSubSchema();\n  }\n else {\n    boolean modified=hasNewSubSchema();\n    modified|=subSchema.subSchemaChanged();\n    return modified;\n  }\n}\n", "nl": "Returns true if the sub schema either has a new sub schema or sub schema", "id": "57476"}
{"code": "public static void unbindThread(Object obj,Object token){\n  if (ContextAccessController.checkSecurityToken(obj,token)) {\n    threadBindings.remove(Thread.currentThread());\n    threadObjectBindings.remove(Thread.currentThread());\n  }\n}\n", "nl": "Unbinds a thread and a naming context.", "id": "12576"}
{"code": "@Override protected Object createSsoServerLoggingSvcMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){\n  if (server != null)   loggingSvcGroup=new SsoServerLoggingSvcImpl(this,server);\n else   loggingSvcGroup=new SsoServerLoggingSvcImpl(this);\n  return loggingSvcGroup;\n}\n", "nl": "Factory method for \"SsoServerLoggingSvc\" group MBean. You can redefine this method if you need to replace the default generated MBean class with your own customized class.", "id": "3062"}
{"code": "public void removeTrigger(String triggerId){\n  if (triggers.contains(triggerId)) {\n    triggers.remove(triggerId);\n  }\n}\n", "nl": "Removes a Trigger's ID from the list of Triggers in this group.", "id": "20479"}
{"code": "public static void drawStringUnderlineCharAt(Graphics g,String text,int underlinedIndex,int x,int y){\n  SwingUtilities2.drawStringUnderlineCharAt(null,g,text,underlinedIndex,x,y);\n}\n", "nl": "Draw a string with the graphics <code>g</code> at location (<code>x</code>, <code>y</code>) just like <code>g.drawString</code> would. The character at index <code>underlinedIndex</code> in text will be underlined. If <code>index</code> is beyond the bounds of <code>text</code> (including &lt; 0), nothing will be underlined.", "id": "53440"}
{"code": "@Override public int available(){\n  return input.getLength();\n}\n", "nl": "Amount of bytes still available in a buffer.", "id": "24399"}
{"code": "public void stopAutoScroll(){\n  isAutoScroll=false;\n  mCircleHandler.removeCallbacksAndMessages(null);\n}\n", "nl": "Stop auto scroll.", "id": "9121"}
{"code": "public boolean isVisible(){\n  return true;\n}\n", "nl": "Preformatted lines are not suppressed if they have only whitespace, so they are always visible.", "id": "8591"}
{"code": "public boolean checkSessionLocal(SessionID sessionId) throws SessionException {\n  return sessionOperationStrategy.getOperation(sessionId).checkSessionLocal(sessionId);\n}\n", "nl": "Checks whether current session should be considered local (so that local invocations of SessionService methods are to be used) and if local and Session Failover is enabled will recover the Session if the Session is not found locally.", "id": "40955"}
{"code": "public void visitEnd(){\n  if (fv != null) {\n    fv.visitEnd();\n  }\n}\n", "nl": "Visits the end of the field. This method, which is the last one to be called, is used to inform the visitor that all the annotations and attributes of the field have been visited.", "id": "29496"}
{"code": "public void zoomOutImage(float deltaScale){\n  zoomOutImage(deltaScale,mCropRect.centerX(),mCropRect.centerY());\n}\n", "nl": "This method scales image down for given value related to image center.", "id": "20545"}
{"code": "public boolean isAccessibleChildSelected(int i){\n  return (i == getSelectionModel().getSelectedIndex());\n}\n", "nl": "Returns true if the current child of this object is selected.", "id": "18223"}
{"code": "public static boolean isDirty(Git git) throws NoWorkTreeException, GitAPIException {\n  Status status=git.status().call();\n  return !status.isClean();\n}\n", "nl": "Checks that underlying repository is dirty (modified with uncommitted changes).", "id": "52"}
{"code": "public boolean isRemote(){\n  return remoteArg.isPresent();\n}\n", "nl": "Returns whether the user specified to connect to a remote server.", "id": "47654"}
{"code": "private void storeInsn(final Type type,final int index){\n  mv.visitVarInsn(type.getOpcode(Opcodes.ISTORE),index);\n}\n", "nl": "Generates the instruction to store the top stack value in a local variable.", "id": "23525"}
{"code": "public static boolean isSpace(int c){\n  return c <= 0x20 && (CHARS[c] & MASK_SPACE) != 0;\n}\n", "nl": "Returns true if the specified character is a space character as defined by production [3] in the XML 1.0 specification.", "id": "6269"}
{"code": "boolean isPersisted(int id){\n  int bit=1 << id;\n  return (persisted & bit) != 0;\n}\n", "nl": "Returns true if this setting was persisted.", "id": "37923"}
{"code": "private static String H(String data){\n  try {\n    MessageDigest digest=MessageDigest.getInstance(\"MD5\");\n    return toHexString(digest.digest(data.getBytes()));\n  }\n catch (  NoSuchAlgorithmException ex) {\n    throw new RuntimeException(\"Failed to instantiate an MD5 algorithm\",ex);\n  }\n}\n", "nl": "Defined in rfc 2617 as H(data) = MD5(data);", "id": "16101"}
{"code": "private void uninstallBorder(JRootPane root){\n  LookAndFeel.uninstallBorder(root);\n}\n", "nl": "Removes any border that may have been installed.", "id": "22583"}
{"code": "public boolean equals(Object o){\n  if (o == null)   return false;\n  if (this == o)   return true;\n  if (!(o instanceof SAEPrincipal))   return false;\n  SAEPrincipal that=(SAEPrincipal)o;\n  if (this.getName().equals(that.getName()))   return true;\n  return false;\n}\n", "nl": "Compares the specified Object with this <code>SAEPrincipal</code> for equality.  Returns true if the given object is also a <code>SAEPrincipal</code> and the two SAEPrincipals have the same username. <p>", "id": "10841"}
{"code": "@Override public void close() throws IOException {\n}\n", "nl": "Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in this class can be called after the stream has been closed without generating an <tt>IOException</tt>.", "id": "20064"}
{"code": "public void paintRootPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n}\n", "nl": "Paints the border of a root pane.", "id": "57072"}
{"code": "void logFailed(String str,String error){\n  logFailed(str,\"LOGIN_FAILED\",true,error);\n}\n", "nl": "Log login failed", "id": "57381"}
{"code": "public JobService cardByType(String type,JobState state,Handler<AsyncResult<Long>> handler){\n  delegate.cardByType(type,state,handler);\n  return this;\n}\n", "nl": "Get cardinality by job type and state", "id": "45405"}
{"code": "static String byteArrayToAltBase64(byte[] a){\n  return byteArrayToBase64(a,true);\n}\n", "nl": "Translates the specified byte array into an \"alternate representation\" Base64 string.  This non-standard variant uses an alphabet that does not contain the uppercase alphabetic characters, which makes it suitable for use in situations where case-folding occurs.", "id": "19861"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(documentimportnode05.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "48152"}
{"code": "public Enumeration<Permission> elements(){\nsynchronized (this) {\n    return new PermissionsEnumerator(permsMap.values().iterator());\n  }\n}\n", "nl": "Returns an enumeration of all the Permission objects in all the PermissionCollections in this Permissions object.", "id": "30471"}
{"code": "public String toXMLString() throws XACMLException {\n  return toXMLString(true,false);\n}\n", "nl": "Returns a string representation of this object", "id": "30474"}
{"code": "public Condition removeCondition(String condition){\n  return conditions.removeCondition(condition);\n}\n", "nl": "Removes the condition with the given name.", "id": "38207"}
{"code": "protected void installListListeners(){\n  if ((listMouseListener=createListMouseListener()) != null) {\n    list.addMouseListener(listMouseListener);\n  }\n  if ((listMouseMotionListener=createListMouseMotionListener()) != null) {\n    list.addMouseMotionListener(listMouseMotionListener);\n  }\n  if ((listSelectionListener=createListSelectionListener()) != null) {\n    list.addListSelectionListener(listSelectionListener);\n  }\n}\n", "nl": "Adds the listeners to the list control.", "id": "18801"}
{"code": "@NonNull public static Interpolator divide(Interpolator dividend,Interpolator divisor){\n  return new DivideInterpolator(dividend,divisor);\n}\n", "nl": "An interpolator whose value at each point is the result of dividing the outcomes of the two provided interpolators. <strong>note that this does not guard against division by 0</strong>", "id": "55062"}
{"code": "public boolean equal_at_end(PlaPointInt p_point){\n  if (p_point == null)   return false;\n  PlaPoint last=corner_last();\n  return last.equals(p_point);\n}\n", "nl": "Returns true of the given point is equal at end of polyline", "id": "55666"}
{"code": "public String toString(){\n  removeUnusedSets();\n  String s=\"\";\n  for (  SmallAttributeSet set : attributesPool.keySet()) {\n    s=s + set + \"\\n\";\n  }\n  return s;\n}\n", "nl": "Converts a StyleContext to a String.", "id": "20800"}
{"code": "public void handleBtnRealmRequest(RequestInvocationEvent event){\n  submitCycle=true;\n  bRealmSelect=true;\n  forwardTo();\n}\n", "nl": "Refreshes the view so that search for services can be done.", "id": "18344"}
{"code": "void reset(){\n  try {\n    remove(0,getLength());\n    if (initialText != null) {\n      insertString(0,initialText,null);\n    }\n  }\n catch (  BadLocationException e) {\n  }\n}\n", "nl": "Resets the model by removing all the data, and restoring it to its initial state.", "id": "35528"}
{"code": "public void process(CommandManager mgr) throws CLIException {\n  if (argv.length == 0) {\n    UsageFormatter.getInstance().format(mgr);\n  }\n else   if (argv.length == 1) {\n    process(mgr,argv[0],null);\n  }\n else {\n    process(mgr,argv,null);\n  }\n}\n", "nl": "Processes the request.", "id": "20054"}
{"code": "protected boolean isHTMLFlavor(DataFlavor flavor){\n  DataFlavor[] flavors=htmlFlavors;\n  for (int i=0; i < flavors.length; i++) {\n    if (flavors[i].equals(flavor)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Returns whether or not the specified data flavor is an HTML flavor that is supported.", "id": "52103"}
{"code": "static void checkForCharacter(String name,char c) throws InvalidNameException {\n  if (name.indexOf(c) != -1) {\n    Character objs[]={new Character(c)};\n    throw (new InvalidNameException(ResBundleUtils.rbName,\"invalid_char_in_name\",objs,name,PolicyException.POLICY));\n  }\n}\n", "nl": "Checks for the char <code>c</code> in the String", "id": "52428"}
{"code": "final void updateHead(Node<E> h,Node<E> p){\n  if (h != p && casHead(h,p))   h.lazySetNext(h);\n}\n", "nl": "Tries to CAS head to p. If successful, repoint old head to itself as sentinel for succ(), below.", "id": "1185"}
{"code": "@Override public void close() throws IOException {\n  try {\n    out.close();\n  }\n  finally {\n    lockFile.delete();\n  }\n}\n", "nl": "Closes the file writer and deletes the lockfile (if possible).", "id": "19684"}
{"code": "public void auditLoginFailure(LoginState loginState){\n  auditLoginFailure(loginState,findFailureReason(loginState));\n}\n", "nl": "Log an authentication process failure event.", "id": "15690"}
{"code": "public void resetOriginals(){\n  mStartingStartTrim=0;\n  mStartingEndTrim=0;\n  mStartingRotation=0;\n  setStartTrim(0);\n  setEndTrim(0);\n  setRotation(0);\n}\n", "nl": "Reset the progress spinner to default rotation, start and end angles.", "id": "22783"}
{"code": "public SAML2ConfigBuilder keystorePassword(byte[] keystorePassword){\n  this.keystorePassword=keystorePassword;\n  return this;\n}\n", "nl": "Sets the keystore password on the SAML2ConfigBuilder.", "id": "25257"}
{"code": "public void deleteMetaObject(int index){\n  MetaObjects.set(index,null);\n}\n", "nl": "Deletes the MetaObject at the specified index.", "id": "21362"}
{"code": "public int stack_depth(){\n  return max_stack_level;\n}\n", "nl": "returns the maximum recursion depth for shoving the obstacle traces", "id": "40475"}
{"code": "public boolean isTracking(){\n  return isTracking;\n}\n", "nl": "Returns whether it's currently tracking the Session.", "id": "25946"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.EndpointType createEndpointType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.EndpointTypeImpl();\n}\n", "nl": "Create an instance of EndpointType", "id": "66"}
{"code": "public void ifPresent(IntConsumer consumer){\n  if (isPresent)   consumer.accept(value);\n}\n", "nl": "Have the specified consumer accept the value if a value is present, otherwise do nothing.", "id": "28606"}
{"code": "public Task create(Token token,ResultHandler<Token,?> handler){\n  return new CreateTask(token,handler);\n}\n", "nl": "Used to signal the creation of the given Token.", "id": "20525"}
{"code": "public boolean isOldToken(){\n  return oldToken;\n}\n", "nl": "Tests if this token's validity period has expired, i.e., the token is too old to be checked for duplication.", "id": "40182"}
{"code": "protected void fireEndElem(String name) throws org.xml.sax.SAXException {\n  if (m_tracer != null) {\n    flushMyWriter();\n    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENDELEMENT,name,(Attributes)null);\n  }\n}\n", "nl": "To fire off the end element trace event", "id": "2460"}
{"code": "static ReplayPromise<Float> replayPromiseFloat(final Duration timeout,final long time){\n  return new ReplayPromiseImpl<>(timeout,time);\n}\n", "nl": "Returns a Float promise Added to make static imports possible.", "id": "7263"}
{"code": "public void runTest() throws Throwable {\n  Document doc;\n  NodeList elementList;\n  doc=(Document)load(\"staffNS\",false);\n  elementList=doc.getElementsByTagNameNS(\"http://www.nomatch.com\",\"address\");\n  assertSize(\"matchSize\",0,elementList);\n}\n", "nl": "Runs the test case.", "id": "52226"}
{"code": "public boolean isMutable(){\n  return isMutable;\n}\n", "nl": "Returns true if object is mutable.", "id": "24345"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(getElementById01.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "31333"}
{"code": "public static boolean isRecognizedEncoding(String encoding){\n  EncodingInfo ei;\n  String normalizedEncoding=encoding.toUpperCase();\n  ei=(EncodingInfo)_encodingTableKeyJava.get(normalizedEncoding);\n  if (ei == null)   ei=(EncodingInfo)_encodingTableKeyMime.get(normalizedEncoding);\n  if (ei != null)   return true;\n  return false;\n}\n", "nl": "Determines if the encoding specified was recognized by the serializer or not.", "id": "58785"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.assertion.ConditionsElement createConditionsElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsElementImpl();\n}\n", "nl": "Create an instance of ConditionsElement", "id": "24305"}
{"code": "public QRCallbackBuilder addUriQueryComponent(String key,String value){\n  queryContents.put(key,value);\n  return this;\n}\n", "nl": "Add a query component to use in the QR Callback URI.", "id": "28622"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.RequiredElementsElement createRequiredElementsElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequiredElementsElementImpl();\n}\n", "nl": "Create an instance of RequiredElementsElement", "id": "51514"}
{"code": "public Set searchPeopleContainers(String wildcard,Map avPairs,int level) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER),getSearchFilter(AMObject.PEOPLE_CONTAINER),wildcard,avPairs,level);\n}\n", "nl": "Searches for people containers in this organizational unit using wildcards and * attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be  specifed so that DNs of people containers with matching attribute-value  pairs will be returned.", "id": "9724"}
{"code": "protected int countAncestors(ElemTemplateElement elem){\n  int count=0;\n  while (null != elem) {\n    count++;\n    elem=elem.getParentElem();\n  }\n  return count;\n}\n", "nl": "Count the number of ancestors that a ElemTemplateElement has.", "id": "40907"}
{"code": "public static long longForQuery(SQLiteDatabase db,String query,String[] selectionArgs){\n  SQLiteStatement prog=db.compileStatement(query);\n  try {\n    return longForQuery(prog,selectionArgs);\n  }\n  finally {\n    prog.close();\n  }\n}\n", "nl": "Utility method to run the query on the db and return the value in the first column of the first row.", "id": "2197"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(attrcreatedocumentfragment.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "56065"}
{"code": "public boolean targetEquals(String compareTargetId){\n  String normalizedCompId=mapping.getLinkType().normalizeTargetId(compareTargetId);\n  String normalizedTargetId=mapping.getLinkType().normalizeTargetId(targetId);\n  if (normalizedTargetId != null) {\n    return normalizedTargetId.equals(normalizedCompId);\n  }\n else {\n    return normalizedTargetId == normalizedCompId;\n  }\n}\n", "nl": "Compares the given Id to the current targetId, taking into account the settings for case sensitivity", "id": "53142"}
{"code": "public boolean equal(org.omg.DynamicAny.DynAny dyn_any){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"equal\",_opsClass);\n  DynUnionOperations $self=(DynUnionOperations)$so.servant;\n  try {\n    return $self.equal(dyn_any);\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Compares two DynAny values for equality. Two DynAny values are equal if their TypeCodes are equivalent and, recursively, all component DynAnys have equal values. The current position of the two DynAnys being compared has no effect on the result of equal.", "id": "1329"}
{"code": "public <TCol extends Collection<String>>TCol nextStrings(TCol output) throws DataFormatException {\n  final int colSize=nextByte();\n  for (int i=0; i < colSize; i++) {\n    output.add(nextString());\n  }\n  return output;\n}\n", "nl": "Reads the next UTF8-encoded strings in the provided collection.", "id": "44824"}
{"code": "public com.sun.identity.liberty.ws.paos.jaxb.StatusElement createStatusElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.paos.jaxb.impl.StatusElementImpl();\n}\n", "nl": "Create an instance of StatusElement", "id": "51944"}
{"code": "public static LdapException newLdapException(ResultCode resultCode,CharSequence diagnosticMessage){\n  return newLdapException(resultCode,diagnosticMessage,null);\n}\n", "nl": "Creates a new LDAP exception with the provided result code and diagnostic message.", "id": "50874"}
{"code": "public void initialize(Map initParams){\n}\n", "nl": "Initializes the fedlet adapter, this method will only be executed once after creation of the adapter instance.", "id": "45047"}
{"code": "public void deleteRows(final int[] rows){\n  for (int i=rows.length - 1; i >= 0; i--) {\n    deleteRow(rows[i]);\n  }\n}\n", "nl": "Delete rows.", "id": "20861"}
{"code": "public boolean isCompromised(){\n  return fIsCompromised;\n}\n", "nl": "Returns the status of the key.", "id": "30954"}
{"code": "public void removeAuthenticationHeader(String callId){\n  this.authorizationHeaders.remove(callId);\n}\n", "nl": "Remove a cached authorization header.", "id": "56728"}
{"code": "public void init(String componentName) throws DataStoreProviderException {\n}\n", "nl": "Initializes the provider.", "id": "43057"}
{"code": "protected void uninstallListeners(JPanel p){\n  p.removePropertyChangeListener(this);\n}\n", "nl": "Uninstalls listeners from the panel.", "id": "26800"}
{"code": "public void apply(Animator animator,float currValue,float endValue,float velocity){\n  apply(animator,currValue,endValue,velocity,Math.abs(endValue - currValue));\n}\n", "nl": "Applies the interpolator and length to the animator, such that the fling animation is consistent with the finger motion.", "id": "27043"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.LAltCNElement createLAltCNElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LAltCNElementImpl();\n}\n", "nl": "Create an instance of LAltCNElement", "id": "25519"}
{"code": "private boolean includesEphemerals(){\n  return portrange[0] == 0;\n}\n", "nl": "Returns true if the permission has specified zero as its value (or lower bound) signifying the ephemeral range", "id": "13640"}
{"code": "private void pauseLogging(){\n  try {\n    mLogcatViewerService.pause();\n  }\n catch (  RemoteException e) {\n    Log.e(LOG_TAG,\"Pausing logcat failed\");\n  }\n}\n", "nl": "Pause listening to logcat logs.", "id": "1165"}
{"code": "private void assertion(boolean b,String msg){\n  if (!b) {\n    String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{msg});\n    throw new RuntimeException(fMsg);\n  }\n}\n", "nl": "Notify the user of an assertion error, and probably throw an exception.", "id": "15417"}
{"code": "public void remove(int childIndex){\n  MutableTreeNode child=(MutableTreeNode)getChildAt(childIndex);\n  children.removeElementAt(childIndex);\n  child.setParent(null);\n}\n", "nl": "Removes the child at the specified index from this node's children and sets that node's parent to null. The child node to remove must be a <code>MutableTreeNode</code>.", "id": "48141"}
{"code": "static XMPNode findSchemaNode(XMPNode tree,String namespaceURI,boolean createNodes) throws XMPException {\n  return findSchemaNode(tree,namespaceURI,null,createNodes);\n}\n", "nl": "Find or create a schema node if <code>createNodes</code> is false and", "id": "36199"}
{"code": "public void clear(){\n  decimalAt=0;\n  count=0;\n}\n", "nl": "Clears out the digits. Use before appending them. Typically, you set a series of digits with append, then at the point you hit the decimal point, you set myDigitList.decimalAt = myDigitList.count; then go on appending digits.", "id": "13503"}
{"code": "protected void decrypt() throws IOException {\n  inBuffer.flip();\n  outBuffer.clear();\n  try {\n    cipher.update(inBuffer,outBuffer);\n  }\n catch (  ShortBufferException e) {\n    throw new IOException(e);\n  }\n  inBuffer.clear();\n  outBuffer.flip();\n}\n", "nl": "Does the decryption using inBuffer as input and outBuffer as output. Upon return, inBuffer is cleared; the decrypted data starts at outBuffer.position() and ends at outBuffer.limit().", "id": "52177"}
{"code": "public void dispatch(NamingListener listener){\nswitch (type) {\ncase OBJECT_ADDED:\n    ((NamespaceChangeListener)listener).objectAdded(this);\n  break;\ncase OBJECT_REMOVED:\n((NamespaceChangeListener)listener).objectRemoved(this);\nbreak;\ncase OBJECT_RENAMED:\n((NamespaceChangeListener)listener).objectRenamed(this);\nbreak;\ncase OBJECT_CHANGED:\n((ObjectChangeListener)listener).objectChanged(this);\nbreak;\n}\n}\n", "nl": "Invokes the appropriate listener method on this event. The default implementation of this method handles the following event types: <tt>OBJECT_ADDED</TT>, <TT>OBJECT_REMOVED</TT>, <TT>OBJECT_RENAMED</TT>, <TT>OBJECT_CHANGED</TT>. <p> The listener method is executed in the same thread as this method.  See the <a href=package-summary.html#THREADING>package description</a> for more information on threading issues.", "id": "49492"}
{"code": "public boolean shouldStripSourceNode(Node textNode) throws javax.xml.transform.TransformerException {\n  return false;\n}\n", "nl": "Tells, through the combination of the default-space attribute on xsl:stylesheet, xsl:strip-space, xsl:preserve-space, and the xml:space attribute, whether or not extra whitespace should be stripped from the node.  Literal elements from template elements should <em>not</em> be tested with this function.", "id": "11926"}
{"code": "protected void tearDown(){\n}\n", "nl": "Tears down the fixture, for example, close a network connection. This method is called after a test is executed.", "id": "33845"}
{"code": "public void addCharOption(LocalizableMessage c,LocalizableMessage description,MenuCallback<T> callback){\n  charKeys.add(c);\n  charSynopsis.add(description);\n  charCallbacks.add(callback);\n}\n", "nl": "Adds a menu choice to the menu which will have a single letter as its key.", "id": "28477"}
{"code": "public RequestedAuthnContext createRequestedAuthnContext() throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.REQUESTED_AUTHN_CONTEXT);\n  if (obj == null) {\n    return new RequestedAuthnContextImpl();\n  }\n else {\n    return (RequestedAuthnContext)obj;\n  }\n}\n", "nl": "Returns a mutable requested authentication context object.", "id": "50131"}
{"code": "public void dupX1(){\n  mv.visitInsn(Opcodes.DUP_X1);\n}\n", "nl": "Generates a DUP_X1 instruction.", "id": "12005"}
{"code": "public static void removeAttributeDefaultValues(String serviceName,String schemaType,String attrName,Set defaultValues) throws UpgradeException {\n  removeAttributeDefaultValues(serviceName,schemaType,attrName,defaultValues,false);\n}\n", "nl": "Removes attribute default values from service schema.", "id": "50277"}
{"code": "public void removeAllUserDevices(@Nonnull AMIdentity id) throws IdRepoException, SSOException {\n  Reject.ifNull(id);\n  id.removeAttributes(Collections.singleton(getConfigStorageAttributeName()));\n  id.store();\n}\n", "nl": "Removes all user's current devices of this type.", "id": "9338"}
{"code": "public void updateUI(){\n  setUI((ScrollBarUI)UIManager.getUI(this));\n}\n", "nl": "Overrides <code>JComponent.updateUI</code>.", "id": "47679"}
{"code": "public void _read(InputStream input){\n  value=input.read_any();\n}\n", "nl": "Reads from <code>input</code> and initalizes the value in the Holder with the unmarshalled data.", "id": "44253"}
{"code": "public boolean isCreate(){\n  return isCreate;\n}\n", "nl": "Indicates whether this exception was thrown during managed object creation or during modification.", "id": "56865"}
{"code": "protected ZipEntry createZipEntry(String name){\n  JarEntry e=new JarEntry(name);\n  if (man != null) {\n    e.attr=man.getAttributes(name);\n  }\n  return e;\n}\n", "nl": "Creates a new <code>JarEntry</code> (<code>ZipEntry</code>) for the specified JAR file entry name. The manifest attributes of the specified JAR file entry name will be copied to the new <CODE>JarEntry</CODE>.", "id": "33399"}
{"code": "public String toXMLString() throws SAML2Exception {\n  return toXMLString(true,false);\n}\n", "nl": "Returns the <code>LogoutResponse</code> in an XML document String format based on the <code>LogoutResponse</code> schema described above.", "id": "23333"}
{"code": "public void repaint(){\n}\n", "nl": "Overridden for performance reasons. See the <a href=\"#override\">Implementation Note</a> for more information.", "id": "56471"}
{"code": "@Override public void body(String namespace,String name,String text) throws Exception {\n  ResourceBase resourceBase=(ResourceBase)digester.peek();\n  resourceBase.setProperty(\"mappedName\",text.trim());\n}\n", "nl": "Process the body text of this element.", "id": "31851"}
{"code": "private void interruptIdleWorkers(){\n  interruptIdleWorkers(false);\n}\n", "nl": "Common form of interruptIdleWorkers, to avoid having to remember what the boolean argument means.", "id": "48235"}
{"code": "public static PropertyMapper resourceType(){\n  return ResourceTypePropertyMapper.INSTANCE;\n}\n", "nl": "Returns a property mapper which maps a JSON property containing the resource type to its associated LDAP object classes.", "id": "17566"}
{"code": "public float nextTabStop(float x,int tabOffset){\n  if (tabSize == 0) {\n    return x;\n  }\n  int ntabs=(((int)x) - tabBase) / tabSize;\n  return tabBase + ((ntabs + 1) * tabSize);\n}\n", "nl": "Returns the next tab stop position after a given reference position. This implementation does not support things like centering so it ignores the tabOffset argument.", "id": "2147"}
{"code": "public static byte[] serialize(Serializable msg) throws IOException {\n  ByteArrayOutputStream outs=new ByteArrayOutputStream();\n  ObjectOutputStream out=new ObjectOutputStream(outs);\n  out.writeObject(msg);\n  out.flush();\n  byte[] data=outs.toByteArray();\n  return data;\n}\n", "nl": "Serializes a message into cluster data", "id": "1607"}
{"code": "private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n  if (duplicateStream == null) {\n    throw new NotSerializableException(this.getClass().getName() + \": debug mode is disabled!\");\n  }\n  OutputStream tempOutputStream=outputStream;\n  outputStream=null;\n  out.defaultWriteObject();\n  outputStream=tempOutputStream;\n}\n", "nl": "This method is invoked while serialization", "id": "36972"}
{"code": "public boolean isReverseAxes(){\n  return m_iterator.isReverse();\n}\n", "nl": "Tells if this is a reverse axes.  Overrides AxesWalker#isReverseAxes.", "id": "48502"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.StatusElement createStatusElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.StatusElementImpl();\n}\n", "nl": "Create an instance of StatusElement", "id": "36573"}
{"code": "public Name add(int posn,String comp) throws InvalidNameException {\n  impl.add(posn,comp);\n  return this;\n}\n", "nl": "Adds a single component at a specified position within this composite name. Components of this composite name at or after the index of the new component are shifted up by one (away from index 0) to accommodate the new component.", "id": "40150"}
{"code": "boolean isValid(){\n  if (!ss.isValid()) {\n    return false;\n  }\n  if (smsEntry.isValid() && smsEntry.isDirty()) {\n    smsEntry.refresh();\n  }\n  return (smsEntry.isValid());\n}\n", "nl": "Checks if the entry is still valid", "id": "2620"}
{"code": "private static int bigDigitLength(BigInteger b){\n  if (b.signum == 0)   return 1;\n  int r=(int)((((long)b.bitLength() + 1) * 646456993) >>> 31);\n  return b.compareMagnitude(bigTenToThe(r)) < 0 ? r : r + 1;\n}\n", "nl": "Returns the length of the absolute value of a BigInteger, in decimal digits.", "id": "53783"}
{"code": "boolean isExclusive(){\n  return exclusive;\n}\n", "nl": "Returns <code>exclusive</code> state of this object", "id": "26859"}
{"code": "private int rotateWordLeft(int x,int y){\n  x&=0xffff;\n  return (x << y) | (x >> (16 - y));\n}\n", "nl": "return the result rotating the 16 bit number in x left by y", "id": "41468"}
{"code": "public boolean isSecure(){\n  return this.getScheme().equalsIgnoreCase(SIPS);\n}\n", "nl": "Returns true if this SipURI is secure i.e. if this SipURI represents a sips URI. A sip URI returns false.", "id": "58300"}
{"code": "private void init(String servicePrincipal,int mask){\n  if (servicePrincipal == null)   throw new NullPointerException(\"service principal can't be null\");\n  if ((mask & ALL) != mask)   throw new IllegalArgumentException(\"invalid actions mask\");\n  this.mask=mask;\n}\n", "nl": "Initialize the ServicePermission object.", "id": "53339"}
{"code": "public org.w3c.dom.Element signWithUserNameToken(org.w3c.dom.Document doc,java.security.cert.Certificate cert,java.lang.String algorithm,java.util.List ids) throws XMLSignatureException {\n  return null;\n}\n", "nl": "Sign part of the xml document referered by the supplied a list of id attributes  of nodes", "id": "58346"}
{"code": "public int hashCode(){\n  return sessionID.hashCode();\n}\n", "nl": "Returns a hash code for this session. The value is the hash code of the session ID.", "id": "832"}
{"code": "private void uninstallListeners(){\n  if (window != null) {\n    window.removeWindowListener(windowListener);\n    window.removePropertyChangeListener(propertyChangeListener);\n  }\n}\n", "nl": "Uninstalls the necessary listeners.", "id": "5371"}
{"code": "public void repaint(long time,int x,int y,int width,int height){\n  if (RepaintManager.HANDLE_TOP_LEVEL_PAINT) {\n    RepaintManager.currentManager(this).addDirtyRegion(this,x,y,width,height);\n  }\n else {\n    super.repaint(time,x,y,width,height);\n  }\n}\n", "nl": "Repaints the specified rectangle of this component within <code>time</code> milliseconds.  Refer to <code>RepaintManager</code> for details on how the repaint is handled.", "id": "37843"}
{"code": "public void invokePostSynchronizationDeletePlugins(PostSynchronizationDeleteOperation deleteOperation){\n  for (  DirectoryServerPlugin p : postSynchronizationDeletePlugins) {\n    try {\n      p.doPostSynchronization(deleteOperation);\n    }\n catch (    Exception e) {\n      logException(deleteOperation,p,e,ERR_PLUGIN_POST_SYNCHRONIZATION_PLUGIN_EXCEPTION);\n    }\n  }\n}\n", "nl": "Invokes the set of post-synchronization delete plugins that have been configured in the Directory Server.", "id": "18874"}
{"code": "protected boolean isPlainSupported(){\n  return plainData != null;\n}\n", "nl": "Should the plain text flavors be offered?  If so, the method getPlainData should be implemented to provide something reasonable.", "id": "17917"}
{"code": "@Override public String format(DateTimeFormatter formatter){\n  Objects.requireNonNull(formatter,\"formatter\");\n  return formatter.format(this);\n}\n", "nl": "Formats this date using the specified formatter. <p> This date will be passed to the formatter to produce a string.", "id": "22863"}
{"code": "public static void write(byte[] data,OutputStream output) throws IOException {\n  if (data != null) {\n    output.write(data);\n  }\n}\n", "nl": "Writes bytes from a <code>byte[]</code> to an <code>OutputStream</code>.", "id": "13772"}
{"code": "public boolean registerClient(LDAPClientConnection clientConnection){\n  if (shutdownRequested) {\n    clientConnection.disconnect(DisconnectReason.SERVER_SHUTDOWN,true,ERR_LDAP_REQHANDLER_REJECT_DUE_TO_SHUTDOWN.get());\n    return false;\n  }\nsynchronized (pendingConnectionsLock) {\n    pendingConnections.add(clientConnection);\n  }\n  selector.wakeup();\n  return true;\n}\n", "nl": "Registers the provided client connection with this request handler so that any requests received from that client will be processed.", "id": "5013"}
{"code": "public static AnonymousSASLBindRequest unmodifiableAnonymousSASLBindRequest(final AnonymousSASLBindRequest request){\n  if (request instanceof UnmodifiableAnonymousSASLBindRequestImpl) {\n    return request;\n  }\n  return new UnmodifiableAnonymousSASLBindRequestImpl(request);\n}\n", "nl": "Creates an unmodifiable anonymous SASL bind request of the provided request.", "id": "50077"}
{"code": "@Override public void put(String name,long value){\n  emulatedFields.put(name,value);\n}\n", "nl": "Find and set the long value of a given field named <code>name</code> in the receiver.", "id": "34166"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsfederation.PseudonymType createPseudonymType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.PseudonymTypeImpl();\n}\n", "nl": "Create an instance of PseudonymType", "id": "24423"}
{"code": "public void addNotify(){\nsynchronized (getTreeLock()) {\n    if (peer == null)     peer=getToolkit().createPanel(this);\n    super.addNotify();\n  }\n}\n", "nl": "Creates the Panel's peer.  The peer allows you to modify the appearance of the panel without changing its functionality.", "id": "49352"}
{"code": "public void componentMoved(ComponentEvent e){\n  ((ComponentListener)a).componentMoved(e);\n  ((ComponentListener)b).componentMoved(e);\n}\n", "nl": "Handles the componentMoved event by invoking the componentMoved methods on listener-a and listener-b.", "id": "28384"}
{"code": "public static boolean isNativeCodeLoaded(){\n  return NativeCodeLoader.isNativeCodeLoaded();\n}\n", "nl": "Checks whether the native code has been successfully loaded for the platform.", "id": "51994"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(characterdataindexsizeerrdeletedataoffsetnegative.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "39801"}
{"code": "public void deregister(VirtualAttributeRule rule){\n  rules.remove(getDummyDN(rule));\n}\n", "nl": "Deregisters the provided virtual attribute rule.", "id": "45335"}
{"code": "public LibPackage pkg_get(int p_package_no){\n  LibPackage result=package_list.elementAt(p_package_no - 1);\n  if (result.pkg_no != p_package_no) {\n    System.err.println(classname + \"pkg_get: inconsistent padstack number\");\n  }\n  return result;\n}\n", "nl": "Returns the package with index p_package_no.  Packages numbers are from 1 to package count included", "id": "45249"}
{"code": "public static boolean bootstrap(BootstrapData bootstrapInfo,boolean reinit) throws Exception {\n  return (getConfiguration(bootstrapInfo,reinit,true) != null);\n}\n", "nl": "Returns <code>true</code> if able to bootstrap the system.", "id": "8393"}
{"code": "@Override public void close(){\n  if (rootRenderer != null) {\n    rootRenderer.close();\n  }\n  pdfDocument.close();\n}\n", "nl": "Closes the document and associated PdfDocument.", "id": "13261"}
{"code": "public void addAttributeName(String attributeName){\n  if (attributeName != null) {\n    if (m_attrSet == null) {\n      m_attrSet=new AttrSet();\n    }\n    m_attrSet.add(new Attr(attributeName));\n  }\n}\n", "nl": "Adds the attribute name to the list of attributes to be returned on a search.", "id": "54721"}
{"code": "public Enumeration<Permission> elements(){\nsynchronized (this) {\n    return Collections.enumeration(perms);\n  }\n}\n", "nl": "Returns an enumeration of all the DelegationPermission objects in the container.", "id": "3020"}
{"code": "public Element first(){\nswitch (type) {\ncase '&':\ncase '|':\ncase '*':\ncase '?':\n    return null;\ncase '+':\ncase ',':\n  return ((ContentModel)content).first();\ndefault :\nreturn (Element)content;\n}\n}\n", "nl": "Return the element that must be next.", "id": "22344"}
{"code": "private void buildStatic(ClassWriter classWriter,List<Instruction> staticIns,List<ExceptionTable> exceptionTable){\n  MethodVisitor methodVisitor=classWriter.visitMethod(Opcodes.ACC_STATIC,\"<clinit>\",\"()V\",null,null);\n  buildInstructions(methodVisitor,new CodeInfo(0),staticIns,exceptionTable,VoidType.get());\n  methodVisitor.visitEnd();\n}\n", "nl": "build static block (clinit).", "id": "14978"}
{"code": "public void updateUI(){\n  setUI((SpinnerUI)UIManager.getUI(this));\n  invalidate();\n}\n", "nl": "Resets the UI property with the value from the current look and feel.", "id": "52442"}
{"code": "public static AddRequest unmodifiableAddRequest(final AddRequest request){\n  if (request instanceof UnmodifiableAddRequestImpl) {\n    return request;\n  }\n  return new UnmodifiableAddRequestImpl(request);\n}\n", "nl": "Creates an unmodifiable add request of the provided request.", "id": "39837"}
{"code": "protected void redefine(int nodetype,String namespace,String localName,int hash){\n  this.nodetype=nodetype;\n  this.namespace=namespace;\n  this.localName=localName;\n  this.hash=hash;\n}\n", "nl": "Redefine this ExtendedType object to represent a different extended type. This is intended to be used ONLY on the hashET object. Using it elsewhere will mess up existing hashtable entries!", "id": "47644"}
{"code": "@Override public void addModification(Modification modification) throws DirectoryException {\n  modifiedEntry.applyModification(modification,permissiveModify);\n  super.addModification(modification);\n}\n", "nl": "Adds the provided modification to the set of modifications to this modify operation. In addition, the modification is applied to the modified entry. <p> This may only be called by pre-operation plugins.", "id": "40693"}
{"code": "public String decode(String pString,String charset) throws DecoderException, UnsupportedEncodingException {\n  if (pString == null) {\n    return null;\n  }\n  return new String(decode(pString.getBytes(StringEncodings.US_ASCII)),charset);\n}\n", "nl": "Decodes a URL safe string into its original form using the  specified encoding. Escaped characters are converted back  to their original representation.", "id": "57566"}
{"code": "private void remove(ThreadGroup g){\nsynchronized (groups) {\n    for (Iterator<ThreadGroup> i=groups.iterator(); i.hasNext(); ) {\n      ThreadGroup threadGroup=i.next();\n      if (threadGroup.equals(g)) {\n        i.remove();\n        break;\n      }\n    }\n  }\n  destroyIfEmptyDaemon();\n}\n", "nl": "Removes an immediate subgroup.", "id": "45068"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.JobTitleElement createJobTitleElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.JobTitleElementImpl();\n}\n", "nl": "Create an instance of JobTitleElement", "id": "58786"}
{"code": "public static void removeAll(){\n  getPersistence().removeAll();\n}\n", "nl": "Removes all the foos from the database.", "id": "48998"}
{"code": "public void detach(){\n  if (m_allowDetach) {\n    m_traverser=null;\n    super.detach();\n  }\n}\n", "nl": "Detaches the iterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state. After<code>detach</code> has been invoked, calls to <code>nextNode</code> or<code>previousNode</code> will raise the exception INVALID_STATE_ERR.", "id": "49905"}
{"code": "private void replaceTop(Scope topOfStack){\n  stack.set(stack.size() - 1,topOfStack);\n}\n", "nl": "Replace the value on the top of the stack with the given value.", "id": "32667"}
{"code": "@Override protected void writeValue(ASN1Writer writer) throws IOException {\n  writer.writeStartSequence(ASN1.UNIVERSAL_OCTET_STRING_TYPE);\n  writer.writeInteger(delayDuration);\n  writer.writeEndSequence();\n}\n", "nl": "Writes this control's value to an ASN.1 writer. The value (if any) must be written as an ASN1OctetString.", "id": "18908"}
{"code": "public static PollingWaitCallbackBuilder makeCallback(){\n  return new PollingWaitCallbackBuilder();\n}\n", "nl": "Gets a new PollingWaitCallbackBuilder to use for construction of a PollingWaitCallback.", "id": "9250"}
{"code": "protected int baseCharactersCount(){\n  int count=0;\n  for (  IRenderer child : childRenderers) {\n    if (child instanceof TextRenderer) {\n      count+=((TextRenderer)child).baseCharactersCount();\n    }\n  }\n  return count;\n}\n", "nl": "Returns the number of base characters, i.e. non-mark characters", "id": "24666"}
{"code": "public static String rightTrim(final String value){\n  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);\n  return value.replaceAll(\"\\\\s+$\",\"\");\n}\n", "nl": "Remove all spaces on right.", "id": "39589"}
{"code": "public void addLine(String line){\n  int index=line.indexOf(\":\");\n  if (index == -1) {\n    addLenient(\"\",line);\n  }\n else {\n    addLenient(line.substring(0,index),line.substring(index + 1));\n  }\n}\n", "nl": "Add an HTTP header line containing a field name, a literal colon, and a value.", "id": "10300"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodesetprefix01.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "6172"}
{"code": "@Override public int hashCode(){\n  return totalSeconds;\n}\n", "nl": "A hash code for this offset.", "id": "36419"}
{"code": "public void flush() throws IOException {\nsynchronized (lock) {\n    flushBuffer();\n    out.flush();\n  }\n}\n", "nl": "Flushes the stream.", "id": "14277"}
{"code": "public void handleButton2Request(RequestInvocationEvent event){\n  backTrail();\n  RMRealmViewBean vb=(RMRealmViewBean)getViewBean(RMRealmViewBean.class);\n  passPgSessionMap(vb);\n  vb.forwardTo(getRequestContext());\n}\n", "nl": "Handles cancel request.", "id": "53382"}
{"code": "protected void assembleSystemMenu(){\n}\n", "nl": "Override the parent's method to do nothing. Metal frames do not have system menus.", "id": "37454"}
{"code": "public boolean accept(File dir,String name){\n  return false;\n}\n", "nl": "Returns false.", "id": "632"}
{"code": "protected boolean isXMLName(String s,boolean xml11Version){\n  if (s == null) {\n    return false;\n  }\n  if (!xml11Version)   return XMLChar.isValidName(s);\n else   return XML11Char.isXML11ValidName(s);\n}\n", "nl": "Taken from org.apache.xerces.dom.CoreDocumentImpl Check the string against XML's definition of acceptable names for elements and attributes and so on using the XMLCharacterProperties utility class", "id": "57360"}
{"code": "public TagField createArtworkField(byte[] data){\n  return new Mp4TagCoverField(data);\n}\n", "nl": "Create artwork field", "id": "22242"}
{"code": "public Attribute createAttribute(String xml) throws XACMLException {\n  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.ATTRIBUTE,xml);\n  if (obj == null) {\n    return new AttributeImpl(xml);\n  }\n else {\n    return (Attribute)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>Attribute</code>. The return object is immutable.", "id": "33826"}
{"code": "private void checkAWTPermission(){\n  SecurityManager sm=System.getSecurityManager();\n  if (sm != null) {\n    sm.checkPermission(new AWTPermission(\"showWindowWithoutWarningBanner\"));\n  }\n}\n", "nl": "Calls to the security manager's <code>checkPermission</code> method with an <code>AWTPermission(\"showWindowWithoutWarningBanner\")</code> permission.", "id": "33936"}
{"code": "void registerConnection(final Connection<?> connection,final GrizzlyLDAPConnection ldapConnection){\n  LDAP_CONNECTION_ATTR.set(connection,ldapConnection);\n}\n", "nl": "Associate a LDAP connection to the provided Grizzly connection.", "id": "13774"}
{"code": "protected Expression div(int opPos) throws TransformerException {\n  return compileOperation(new Div(),opPos);\n}\n", "nl": "Compile a 'div' operation.", "id": "280"}
{"code": "public Resource subResource(final SubResource subResource){\n  this.subResources.add(subResource);\n  return this;\n}\n", "nl": "Specifies a parent-child relationship with another resource. Sub-resources are inherited by sub-types and may be overridden.", "id": "54394"}
{"code": "public boolean isField(){\n  return testAllFlags(IS_FIELD);\n}\n", "nl": "Query whether this member is a field.", "id": "56898"}
{"code": "public void paintToolBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintToolBarBackground(context,g,x,y,w,h);\n}\n", "nl": "Paints the background of a tool bar. This implementation invokes the method of the same name without the orientation.", "id": "22752"}
{"code": "public Name join(Name rhs){\n  List<NamePiece> newPieceList=new ArrayList<>();\n  newPieceList.addAll(namePieces);\n  newPieceList.addAll(rhs.namePieces);\n  return new Name(newPieceList);\n}\n", "nl": "Returns a new Name containing the pieces from this Name plus the pieces of the given name added on the end.", "id": "31522"}
{"code": "public SoapSTSServerCryptoStateBuilder signatureKeyAlias(String signatureKeyAlias){\n  this.signatureKeyAlias=signatureKeyAlias;\n  return this;\n}\n", "nl": "In a asymmetric binding, messages from server to client must be signed by the server's private key as identified by this alias.", "id": "22479"}
{"code": "public void readString(ASN1StringType type) throws IOException {\n  if (tag == type.id) {\n    readContent();\n  }\n else   if (tag == type.constrId) {\n    throw new ASN1Exception(\"Decoding constructed ASN.1 string type is not provided\");\n  }\n else {\n    throw expected(\"string\");\n  }\n}\n", "nl": "Decodes ASN.1 String type", "id": "22414"}
{"code": "@Override public void close(){\n  connection.close();\n}\n", "nl": "Closes this connection entry writer, including the underlying connection. Closing a previously closed entry writer has no effect.", "id": "30546"}
{"code": "public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {\n  return super.newInstance(javaContentInterface);\n}\n", "nl": "Create an instance of the specified Java content interface.", "id": "3603"}
{"code": "@Override public void flushBuffer() throws IOException {\n  outputBuffer.flush();\n}\n", "nl": "Flush the buffer and commit this response.", "id": "31702"}
{"code": "public int namespaceIndex(String namespace,Vector extensions){\n  for (int i=0; i < extensions.size(); i++) {\n    if (((ExtensionNamespaceSupport)extensions.get(i)).getNamespace().equals(namespace))     return i;\n  }\n  return -1;\n}\n", "nl": "Get the index for a namespace entry in the extension namespace Vector, -1 if no such entry yet exists.", "id": "46377"}
{"code": "public void deinstall(JTextComponent c){\n  component=null;\n}\n", "nl": "Called when the UI is being removed from the interface of a JTextComponent.", "id": "37921"}
{"code": "public ShapeTileBox offset_box(int p_half_width,int p_no){\n  PlaSegmentInt curr_line_segment=segment_get(p_no + 1);\n  ShapeTileBox result=curr_line_segment.bounding_box().offset(p_half_width);\n  return result;\n}\n", "nl": "Calculates for the p_no-th line segment a box shape around this line  where the border lines have the distance p_half_width from the center line. 0 <= p_no <= arr.length - 3", "id": "35210"}
{"code": "@Override protected void initializeInjector(ApplicationComponent applicationComponent){\n  applicationComponent.inject(this);\n  comicsComponent=DaggerComicsComponent.builder().applicationComponent(applicationComponent).activityModule(new ActivityModule(this)).comicsModule(new ComicsModule()).build();\n}\n", "nl": "Initialize injections by field.", "id": "28262"}
{"code": "public Set searchStaticGroups(String wildcard,Map avPairs,int level) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.GROUP),wildcard,avPairs,level);\n}\n", "nl": "Searches for static groups in this organizational unit using wildcards and attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be specifed so that DNs of static groups with matching attribute-value pairs will be returned.", "id": "33896"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodelistreturnfirstitem.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "42169"}
{"code": "public static boolean putFloat(Context context,String key,float value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putFloat(key,value);\n  return editor.commit();\n}\n", "nl": "put float preferences", "id": "18782"}
{"code": "public Builder removeName(final String name){\n  names.remove(name);\n  return this;\n}\n", "nl": "Removes the provided user friendly name.", "id": "46764"}
{"code": "private boolean checkActualReceiver(){\n  mv.visitInsn(Opcodes.DUP);\n  mv.visitVarInsn(Opcodes.ALOAD,localsMap[0]);\n  mv.visitMethodInsn(Opcodes.INVOKESTATIC,MHI,\"assertSame\",LLV_SIG,false);\n  return true;\n}\n", "nl": "Generates code to check that actual receiver and LambdaForm matches", "id": "31084"}
{"code": "public void addLayoutComponent(Component comp,Object constraints){\n  invalidateLayout(comp.getParent());\n}\n", "nl": "Adds the specified component to the layout, using the specified constraint object. Used by this class to know when to invalidate layout.", "id": "30168"}
{"code": "public short nextShort() throws DataFormatException {\n  try {\n    return bytes.readShort();\n  }\n catch (  IndexOutOfBoundsException e) {\n    throw new DataFormatException(e.getMessage());\n  }\n}\n", "nl": "Reads the next short.", "id": "31811"}
{"code": "public static void removeByField2(boolean field2){\n  getPersistence().removeByField2(field2);\n}\n", "nl": "Removes all the foos where field2 = &#63; from the database.", "id": "27206"}
{"code": "public X509Certificate generateX509Certificate(PrivateKey key) throws SecurityException, SignatureException, InvalidKeyException {\n  try {\n    return generateX509Certificate(key,\"BC\",null);\n  }\n catch (  NoSuchProviderException e) {\n    throw new SecurityException(\"BC provider not installed!\");\n  }\n}\n", "nl": "generate an X509 certificate, based on the current issuer and subject using the default provider \"BC\".", "id": "50221"}
{"code": "private int findLine(int offset){\n  int[] lineEnds=lineCache.get();\n  if (offset < lineEnds[0]) {\n    return 0;\n  }\n else   if (offset > lineEnds[lineCount - 1]) {\n    return lineCount;\n  }\n else {\n    return findLine(lineEnds,offset,0,lineCount - 1);\n  }\n}\n", "nl": "Binary search in the cache for line containing specified offset (which is relative to the beginning of the view). This method assumes that cache exists.", "id": "14481"}
{"code": "public Builder populatedBuilder(){\n  return new Builder().setUUID(uuid).setName(name).setDescription(description).addPatterns(new HashSet<String>(patterns)).addActions(new HashMap<String,Boolean>(actions)).setCreatedBy(createdBy).setCreationDate(creationDate).setLastModifiedBy(lastModifiedBy).setLastModifiedDate(lastModifiedDate);\n}\n", "nl": "Create a builder for this ResourceType with all fields populated and ready for modification.", "id": "12756"}
{"code": "public int hashCode(){\n  return attr.hashCode() + entries.hashCode();\n}\n", "nl": "Returns the hash code for this Manifest.", "id": "49151"}
{"code": "protected void initializeRequestContext(RequestContext requestContext){\n  super.initializeRequestContext(requestContext);\n  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);\n  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);\n}\n", "nl": "Initialize request context and set the viewbean manager", "id": "32412"}
{"code": "@Override public long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){\n  return _fooLocalService.dynamicQueryCount(dynamicQuery);\n}\n", "nl": "Returns the number of rows matching the dynamic query.", "id": "29201"}
{"code": "public static void writeLines(File file,Collection<?> lines,String lineEnding) throws IOException {\n  writeLines(file,null,lines,lineEnding,false);\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to the specified <code>File</code> line by line. The default VM encoding and the specified line ending will be used.", "id": "42737"}
{"code": "public static Matcher findMatch(String self,String pattern){\n  if (pattern != null) {\n    Matcher matcher=compile(pattern,CASE_INSENSITIVE | UNICODE_CHARACTER_CLASS).matcher(self);\n    if (matcher.find()) {\n      return matcher.reset();\n    }\n  }\n  return null;\n}\n", "nl": "Find a matcher that matches the given pattern (case-insensitive)", "id": "21522"}
{"code": "public static CacheStats createInstance(String instanceName,Debug debugObject){\n  CacheStats cStats=new CacheStats(instanceName,debugObject);\n  if (stats.isEnabled()) {\n    stats.addStatsListener(cStats);\n  }\n  return cStats;\n}\n", "nl": "Creates a new CacheStats object, adds the object as a listener to the Stats class and returns the object.", "id": "30205"}
{"code": "public WhereBuilder and(String columnName,String op,Object value){\n  appendCondition(whereItems.size() == 0 ? null : \"AND\",columnName,op,value);\n  return this;\n}\n", "nl": "add AND condition", "id": "54185"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(namednodemapremovenameditemns04.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "26169"}
{"code": "public boolean pop_snapshot(){\n  return undo_items.pop_snapshot();\n}\n", "nl": "Removes the top snapshot from the undo stack, so that its situation cannot be restored any more.", "id": "45219"}
{"code": "private boolean onlyClientSetChanged(RadiusServiceConfig cfg,RadiusServiceConfig currentCfg){\n  return cfg.getPort() == currentCfg.getPort() && cfg.isEnabled() == currentCfg.isEnabled() && cfg.getThreadPoolConfig() != null && cfg.getThreadPoolConfig().equals(currentCfg.getThreadPoolConfig());\n}\n", "nl": "Returns true if the only changes made are the addition, changing, or removal of the defined set of clients.", "id": "22675"}
{"code": "protected IRoutingResult<R> findRouteMatch(R requestContext){\n  return getRouter().route(requestContext);\n}\n", "nl": "Find the route handlers to call.", "id": "53286"}
{"code": "public void newInstance(final Type type){\n  typeInsn(Opcodes.NEW,type);\n}\n", "nl": "Generates the instruction to create a new object.", "id": "24627"}
{"code": "protected boolean isValid(){\n  return isValid;\n}\n", "nl": "Returns true if this ElementInfo is valid.", "id": "10804"}
{"code": "public int lastIndexOf(String string){\n  return lastIndexOf(string,count);\n}\n", "nl": "Searches for the last index of the specified character. The search for the character starts at the end and moves towards the beginning.", "id": "49801"}
{"code": "private void migrateInternal(int operationType,InstFinderInteractionsRunner iFinderRunner,InstallState installState,InstallLogger migrateLog) throws InstallException {\n  InteractionsRunner iRunner=new InteractionsRunner(getRunInfo(),null);\n  iRunner.setStateAccess(installState.getStateAccess());\n  executeInteractionsAndTasks(iRunner,migrateLog);\n  updateStateInformation(iFinderRunner,iRunner,migrateLog);\n}\n", "nl": "execute tasks of migrate each instance.", "id": "16541"}
{"code": "private void displayInformationMessage(LocalizableMessage msg,LocalizableMessage title){\n  Utilities.displayInformationMessage(parent,msg,title);\n  toFront();\n}\n", "nl": "Displays an information message dialog.", "id": "1624"}
{"code": "private void logMessage(String message){\n  checkLogFile();\n  String logInfo=message;\n  if (printWriter != null) {\n    printWriter.println(logInfo);\n  }\n  if (sipStack.isLoggingEnabled()) {\n    stackLogger.logInfo(logInfo);\n  }\n}\n", "nl": "Log a message into the log file.", "id": "6986"}
{"code": "private static void scale(double constant,double vector[]){\n  if (constant == 1.0)   return;\n  for (int i=0; i < vector.length; i++) {\n    vector[i]*=constant;\n  }\n}\n", "nl": "scales a vector by a constant", "id": "1022"}
{"code": "public boolean isCachedFile(){\n  return true;\n}\n", "nl": "Returns <code>true</code> since this <code>ImageOutputStream</code> maintains a file cache.", "id": "6983"}
{"code": "public static boolean fileExists(String path){\n  return new File(path).isFile();\n}\n", "nl": "Returns whether the provided path is a file and exists.", "id": "6682"}
{"code": "public boolean blocksForInput(ConversationContext context){\n  return true;\n}\n", "nl": "Ensures that the prompt waits for the user to provide input.", "id": "5765"}
{"code": "public String toString(){\n  return getClass().getName() + \"[name=\" + getName()+ \",maxpri=\"+ maxPriority+ \"]\";\n}\n", "nl": "Returns a string representation of this Thread group.", "id": "31652"}
{"code": "@Override public void processError(Exception error){\n  store.addTokenOperation(null,operation,false);\n  handler.processError(error);\n}\n", "nl": "Logs the option then delegates to the wrapped implementation.", "id": "12343"}
{"code": "public static String generateTOTP512(byte[] key,String time,String returnDigits){\n  return generateTOTP(key,time,returnDigits,\"HmacSHA512\");\n}\n", "nl": "This method generates a TOTP value for the given set of parameters.", "id": "93"}
{"code": "public boolean can_pull_tight(){\n  return pull_tight;\n}\n", "nl": "Returns, if traces of this nets class can be pulled tight.", "id": "39138"}
{"code": "protected static boolean isCloneable(Object obj){\n  return obj instanceof Cloneable;\n}\n", "nl": "Return true if this supports reflection based cloning.", "id": "25288"}
{"code": "public com.sun.identity.wsfederation.jaxb.xmlsig.SPKIDataType createSPKIDataType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SPKIDataTypeImpl();\n}\n", "nl": "Create an instance of SPKIDataType", "id": "39368"}
{"code": "public RebuildIndexParameters baseDN(String baseDN){\n  this.baseDN=baseDN;\n  return this;\n}\n", "nl": "Sets the base Dn for user information in the directory server.", "id": "11232"}
{"code": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"ApplicationFilterConfig[\");\n  sb.append(\"name=\");\n  sb.append(filterDef.getFilterName());\n  sb.append(\", filterClass=\");\n  sb.append(filterDef.getFilterClass());\n  sb.append(\"]\");\n  return (sb.toString());\n}\n", "nl": "Return a String representation of this object.", "id": "3780"}
{"code": "public boolean isSimple(){\n  return m_simpleString != null;\n}\n", "nl": "Returns true if this AVT is simple", "id": "44770"}
{"code": "public int hashCode(){\n  return super.hashCode();\n}\n", "nl": "Return a hash code for this <code>AuthenticatedSharedAgents</code>.", "id": "19035"}
{"code": "@Override public Expected<T> ifEmpty(final Runnable runnable){\n  if (isEmpty()) {\n    runnable.run();\n  }\n  return this;\n}\n", "nl": "If a value is not present or present but empty, invoke the runnable.", "id": "44146"}
{"code": "public static boolean remove(String file){\n  File f=new File(file);\n  if (!f.exists()) {\n    return true;\n  }\n  return f.delete();\n}\n", "nl": "Remove a file", "id": "17060"}
{"code": "private static boolean isTainted(Object o){\n  try {\n    checkTypeSafe(o);\n  }\n catch (  IllegalArgumentException e) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Returns true if o is a non-Role object.", "id": "51042"}
{"code": "public void collectRequestEvent(SipProvider provider) throws TooManyListenersException {\n  initCollectors(provider);\n  provider.addSipListener(requestCollector);\n}\n", "nl": "Collects the first javax.sip.RequestEvent fired by the specified provider. All subsequent events and events other than javax.sip.RequestEvent are ignored.", "id": "52564"}
{"code": "@Override protected void createButtonsForButtonBar(Composite parent){\n  mOkButton=createButton(parent,IDialogConstants.OK_ID,IDialogConstants.OK_LABEL,true);\n  createButton(parent,IDialogConstants.CANCEL_ID,IDialogConstants.CANCEL_LABEL,false);\n  updateButtonState();\n}\n", "nl": "Create contents of the button bar.", "id": "24094"}
{"code": "protected String paramString(){\n  return super.paramString();\n}\n", "nl": "Returns a string representation of this <code>JMenu</code>. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be <code>null</code>.", "id": "33726"}
{"code": "public void afterPropertiesSet(){\n}\n", "nl": "Initializes the foo persistence.", "id": "26377"}
{"code": "@Override public int hashCode(){\n  final int prime=31;\n  int result=1;\n  result=prime * result + ((normalizedHost == null) ? 0 : normalizedHost.hashCode());\n  result=prime * result + port;\n  return result;\n}\n", "nl": "Retrieves a hash code for this HostPort object.", "id": "169"}
{"code": "public void paintMenuBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the background of a menu.", "id": "27808"}
{"code": "public void waitForSuspension() throws InterruptedException, ExecutionException {\n  if (programPromise == null)   return;\n  CpsThreadGroup g=programPromise.get();\n  g.scheduleRun().get();\n}\n", "nl": "Waits for the workflow to move into the SUSPENDED state.", "id": "6808"}
{"code": "public static XMLReader createXMLReader(String className) throws SAXException {\n  return loadClass(ss.getContextClassLoader(),className);\n}\n", "nl": "Attempt to create an XML reader from a class name. <p>Given a class name, this method attempts to load and instantiate the class as an XML reader.</p> <p>Note that this method will not be usable in environments where the caller (perhaps an applet) is not permitted to load classes dynamically.</p>", "id": "41837"}
{"code": "public static boolean isStatic(final Field field){\n  return Modifier.isStatic(field.getModifiers());\n}\n", "nl": "Checks if is static.", "id": "42721"}
{"code": "@Override public Foo fetchByUUID_G(String uuid,long groupId){\n  return fetchByUUID_G(uuid,groupId,true);\n}\n", "nl": "Returns the foo where uuid = &#63; and groupId = &#63; or returns <code>null</code> if it could not be found. Uses the finder cache.", "id": "25455"}
{"code": "public void clear(){\n  cache.edit().clear().apply();\n}\n", "nl": "Clears out all token information stored in this cache.", "id": "3392"}
{"code": "public static IntegerArgument ldapPortArgument(final int defaultLdapPort) throws ArgumentException {\n  return IntegerArgument.builder(\"ldapPort\").shortIdentifier(OPTION_SHORT_PORT).description(INFO_ARGUMENT_DESCRIPTION_LDAPPORT.get()).range(1,65535).defaultValue(defaultLdapPort).valuePlaceholder(INFO_PORT_PLACEHOLDER.get()).buildArgument();\n}\n", "nl": "Returns the \"LDAP port\" integer argument.", "id": "23761"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.protocol.SubjectQueryElement createSubjectQueryElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.SubjectQueryElementImpl();\n}\n", "nl": "Create an instance of SubjectQueryElement", "id": "3924"}
{"code": "public static void clearRecipes(){\n  server.clearRecipes();\n}\n", "nl": "Clears the list of crafting recipes.", "id": "25469"}
{"code": "public final Set<AwtreeObject> overlapping_objects(ShapeConvex p_shape,int p_layer){\n  return search_tree_manager.get_default_tree().find_overlap_objects(p_shape,p_layer,NetNosList.EMPTY);\n}\n", "nl": "Returns all SearchTreeObjects on layer p_layer, which overlap with p_shape. If p_layer < 0, the layer is ignored", "id": "37550"}
{"code": "public Vector multiply(float m){\n  x*=m;\n  y*=m;\n  z*=m;\n  return this;\n}\n", "nl": "Performs scalar multiplication, multiplying all components with a scalar.", "id": "16060"}
{"code": "public void onSwitcher(){\n  this.on=true;\n}\n", "nl": "turn on switcher", "id": "27213"}
{"code": "public boolean markSupported(){\n  return stream.markSupported();\n}\n", "nl": "Tests whether this audio input stream supports the <code>mark</code> and <code>reset</code> methods.", "id": "29406"}
{"code": "public boolean beginHrefDisplay(ChildDisplayEvent event){\n  return true;\n}\n", "nl": "Returns if it begins href display", "id": "39411"}
{"code": "public static int resetPostResponseCount(){\n  return postResponseCounter.getAndSet(0);\n}\n", "nl": "Resets the post-response plugin invocation count to zero.", "id": "8702"}
{"code": "@Override public String toString(){\n  StringBuilder buffer=new StringBuilder();\n  toString(buffer);\n  return buffer.toString();\n}\n", "nl": "Retrieves a string representation of this LDAP message.", "id": "1932"}
{"code": "public void modify(Attr attr,ModificationType modificationType){\n  Modification modification=new Modification(modificationType,attr.toLDAPAttribute());\n  modify(Collections.singleton(modification));\n}\n", "nl": "Modifies the values of a single attribute for the entity. <P> IMPORTANT: To make the changes persistent, you need to call the save method to save the changes. <P>", "id": "10074"}
{"code": "private synchronized void requestToKillLogcatRunnableThread(){\n  mShouldLogcatRunnableBeKilled=true;\n}\n", "nl": "Make request to kill LogcatRunnable thread.", "id": "42706"}
{"code": "public Resource createResource(){\n  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.RESOURCE);\n  if (obj == null) {\n    return new ResourceImpl();\n  }\n else {\n    return (Resource)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>Resource</code>.", "id": "6659"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(attrgetownerelement04.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "26826"}
{"code": "public static void fill(boolean[] array,boolean value){\n  for (int i=0; i < array.length; i++) {\n    array[i]=value;\n  }\n}\n", "nl": "Fills the specified array with the specified element.", "id": "13915"}
{"code": "public void stopStreaming(){\nsynchronized (SyncOp) {\n    videoClient.stopStreaming();\n    audioClient.stop();\n    rtmpSender.stop();\n    LogTools.d(\"RESClient,stopStreaming()\");\n  }\n}\n", "nl": "stop streaming", "id": "4414"}
{"code": "public com.sun.identity.liberty.ws.soapbinding.jaxb.ConsentElement createConsentElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.ConsentElementImpl();\n}\n", "nl": "Create an instance of ConsentElement", "id": "49747"}
{"code": "public boolean next(){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"next\",_opsClass);\n  DynStructOperations $self=(DynStructOperations)$so.servant;\n  try {\n    return $self.next();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Advances the current position to the next component. The operation returns true while the resulting current position indicates a component, false otherwise. A false return value leaves the current position at -1. Invoking next on a DynAny without components leaves the current position at -1 and returns false.", "id": "41890"}
{"code": "public Templater androidBuildToolsVersion(String androidBuildToolsVersion){\n  this.androidBuildToolsVersion=androidBuildToolsVersion;\n  return this;\n}\n", "nl": "<p> Sets the Android build tools version, defaults to 23.0.1. </p>", "id": "40571"}
{"code": "private BigInteger remainderKnuth(BigInteger val){\n  MutableBigInteger q=new MutableBigInteger(), a=new MutableBigInteger(this.mag), b=new MutableBigInteger(val.mag);\n  return a.divideKnuth(b,q).toBigInteger(this.signum);\n}\n", "nl": "Long division", "id": "57155"}
{"code": "public void clear(){\n  dict.clear();\n}\n", "nl": "Removes all key-value pairs from this dictionary.", "id": "36863"}
{"code": "public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {\n  if (!isAllocationValid()) {\n    Rectangle alloc=a.getBounds();\n    setSize(alloc.width,alloc.height);\n  }\n  return super.modelToView(pos,a,b);\n}\n", "nl": "Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.  This makes sure the allocation is valid before calling the superclass.", "id": "42018"}
{"code": "public boolean isAffiliationMember(String providerID,String affID){\n  return false;\n}\n", "nl": "Returns whether the specified provider is a member of the specified affiliation or not.", "id": "7669"}
{"code": "public NameIDMappingRequest createNameIDMappingRequest(String value) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NAMEIDMAPPING_REQ,value);\n  if (obj == null) {\n    return new NameIDMappingRequestImpl(value);\n  }\n else {\n    return (NameIDMappingRequest)obj;\n  }\n}\n", "nl": "Returns the <code>NameIDMappingRequest</code> Object.", "id": "26273"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_namednodemapwrongdocumenterr.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "30261"}
{"code": "public void print(PrintStream out,PropertyDefinition<?> pd){\n  pd.accept(pimpl,out);\n}\n", "nl": "Print detailed syntax information about a property definition.", "id": "43103"}
{"code": "protected boolean isBefore(int x,int y,Rectangle innerAlloc){\n  if (majorAxis == View.X_AXIS) {\n    return (x < innerAlloc.x);\n  }\n else {\n    return (y < innerAlloc.y);\n  }\n}\n", "nl": "Determines if a point falls before an allocated region.", "id": "47913"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_documentinvalidcharacterexceptioncreateelement1.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "9821"}
{"code": "private String createRegistrationAccessToken(Client client,OAuth2Request request) throws ServerException, NotFoundException {\n  final AccessToken rat=tokenStore.createAccessToken(null,OAuth2Constants.Bearer.BEARER,null,client.getClientID(),client.getClientID(),null,Collections.<String>emptySet(),null,null,null,request);\n  return rat.getTokenId();\n}\n", "nl": "Creates a fresh registration access token for the case where open dynamic registration is enabled and the client has registered without providing an access token. This allows the client to use the client registration endpoint to manage their registration.", "id": "24279"}
{"code": "public boolean isSameServer(ServerDescriptor server){\n  return getId().equals(server.getId());\n}\n", "nl": "Tells whether the provided server descriptor represents the same server as this object.", "id": "26220"}
{"code": "public static boolean isAccessTokenValid(String accessToken){\n  if (TextUtils.isEmpty(accessToken)) {\n    return false;\n  }\n  if (!accessToken.startsWith(\"pk.\") && !accessToken.startsWith(\"sk.\") && !accessToken.startsWith(\"tk.\")) {\n    return false;\n  }\n  return true;\n}\n", "nl": "Checks that the provided access token is not empty or null, and that it starts with the right prefixes. Note that this method does not check Mapbox servers to verify that it actually belongs to an account.", "id": "18149"}
{"code": "private void addLenient(String fieldName,String value){\n  namesAndValues.add(fieldName);\n  namesAndValues.add(value.trim());\n}\n", "nl": "Add a field with the specified value without any validation. Only appropriate for headers from the remote peer.", "id": "46746"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_nodeinsertbeforenodename.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "20030"}
{"code": "public static MouseMotionListener add(MouseMotionListener a,MouseMotionListener b){\n  return (MouseMotionListener)addInternal(a,b);\n}\n", "nl": "Adds mouse-motion-listener-a with mouse-motion-listener-b and returns the resulting multicast listener.", "id": "58124"}
{"code": "public boolean isAfter(LocalTime other){\n  return compareTo(other) > 0;\n}\n", "nl": "Checks if this time is after the specified time. <p> The comparison is based on the time-line position of the time within a day.", "id": "47139"}
{"code": "public boolean isApplicable(AciTargetMatchContext matchCtx){\n  boolean ret=matchesFilter(matchCtx.getResourceEntry());\n  if (op.equals(EnumTargetOperator.NOT_EQUALITY)) {\n    return !ret;\n  }\n  return ret;\n}\n", "nl": "Checks if a targetfilter matches an evaluation context.", "id": "43604"}
{"code": "public boolean equals(Object object){\n  return (super.equals(object) && object instanceof PrinterURI);\n}\n", "nl": "Returns whether this printer name attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: <OL TYPE=1> <LI> <CODE>object</CODE> is not null. <LI> <CODE>object</CODE> is an instance of class PrinterURI. <LI> This PrinterURI attribute's underlying URI and <CODE>object</CODE>'s underlying URI are equal. </OL>", "id": "7549"}
{"code": "public boolean isWallSign(){\n  return getItemType() == Material.WALL_SIGN;\n}\n", "nl": "Check if this sign is attached to a wall", "id": "39383"}
{"code": "public com.sun.identity.saml2.jaxb.assertion.AssertionElement createAssertionElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.assertion.impl.AssertionElementImpl();\n}\n", "nl": "Create an instance of AssertionElement", "id": "957"}
{"code": "public static Entry makeEntry(List<String> ldifLines){\n  return makeEntry(ldifLines.toArray(new String[ldifLines.size()]));\n}\n", "nl": "Builds an entry from the provided lines of LDIF.", "id": "55754"}
{"code": "@Override public void doPost(HttpServletRequest req,HttpServletResponse res) throws IOException, ServletException {\n  if (debug > 0)   log(\"SSIServlet.doPost()\");\n  requestHandler(req,res);\n}\n", "nl": "Process and forward the POST request to our <code>requestHandler()</code>.", "id": "33133"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(elementhasattribute02.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "27641"}
{"code": "public boolean isShowing(){\n  return getTextComponent().isShowing();\n}\n", "nl": "Determines if the object is showing.  This is determined by checking the visibility of the object and its ancestors. Note: this will return true even if the object is obscured by another (for example, it is underneath a menu that was pulled down).", "id": "20254"}
{"code": "public void addDSInfos(List<DSInfo> dsInfos){\nsynchronized (remoteDirectoryServers) {\n    for (    LightweightServerHandler ls : remoteDirectoryServers.values()) {\n      dsInfos.add(ls.toDSInfo());\n    }\n  }\n}\n", "nl": "Add the DSinfos of the connected Directory Servers to the List of DSInfo provided as a parameter.", "id": "53121"}
{"code": "public void addApplicationIdentifier(String id){\n  applicationIdentifiers.add(id);\n}\n", "nl": "Add an application identifier. There can be any number of these.", "id": "45457"}
{"code": "public boolean isImageCachable(int w,int h){\n  return (w * h) < maxSingleImagePixelSize;\n}\n", "nl": "Check if the image size is to big to be stored in the cache", "id": "1236"}
{"code": "public void triplet(Object obj1,Object obj2,int x){\n  Object localObj;\nsynchronized (obj1) {\nsynchronized (obj1) {\n      if (x == 0) {\nsynchronized (obj1) {\n          localObj=obj2;\n        }\n      }\n else {\n        localObj=obj1;\n      }\n    }\n  }\n  doNothing(localObj);\n}\n", "nl": "Lock the monitor two or three times, and make use of the locked or unlocked object.", "id": "700"}
{"code": "public void internalEntityDecl(String name,String value) throws SAXException {\n  if (null != m_resultDeclHandler)   m_resultDeclHandler.internalEntityDecl(name,value);\n}\n", "nl": "Report an internal entity declaration. <p>Only the effective (first) declaration for each entity will be reported.</p>", "id": "22096"}
{"code": "public static Foo findByUuid_C_First(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {\n  return getPersistence().findByUuid_C_First(uuid,companyId,orderByComparator);\n}\n", "nl": "Returns the first foo in the ordered set where uuid = &#63; and companyId = &#63;.", "id": "9184"}
{"code": "public void endContent(){\n}\n", "nl": "Finish printing the table contents.", "id": "27094"}
{"code": "@SuppressWarnings(\"unused\") static <T>Promise<T> promise(Class<T> cls){\n  return new BasePromise<>();\n}\n", "nl": "Generic promise. Added to make static imports possible.", "id": "47604"}
{"code": "public String toString(){\n  return buf.toString();\n}\n", "nl": "Return the buffer's current value as a string.", "id": "26338"}
{"code": "static double powerOfTwoD(int n){\n  assert (n >= DoubleConsts.MIN_EXPONENT && n <= DoubleConsts.MAX_EXPONENT);\n  return Double.longBitsToDouble((((long)n + (long)DoubleConsts.EXP_BIAS) << (DoubleConsts.SIGNIFICAND_WIDTH - 1)) & DoubleConsts.EXP_BIT_MASK);\n}\n", "nl": "Returns a floating-point power of two in the normal range.", "id": "36029"}
{"code": "public com.sun.identity.liberty.ws.authnsvc.jaxb.SASLRequestType.DataType createSASLRequestTypeDataType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.SASLRequestTypeImpl.DataTypeImpl();\n}\n", "nl": "Create an instance of SASLRequestTypeDataType", "id": "37824"}
{"code": "protected static EventListener addInternal(EventListener a,EventListener b){\n  if (a == null)   return b;\n  if (b == null)   return a;\n  return new AWTEventMulticaster(a,b);\n}\n", "nl": "Returns the resulting multicast listener from adding listener-a and listener-b together. If listener-a is null, it returns listener-b; If listener-b is null, it returns listener-a If neither are null, then it creates and returns a new AWTEventMulticaster instance which chains a with b.", "id": "42533"}
{"code": "private static void removeTransientNameIDFromCache(NameID nameID){\n  if (nameID == null) {\n    return;\n  }\n  if (SAML2Constants.NAMEID_TRANSIENT_FORMAT.equals(nameID.getFormat())) {\n    String nameIDValue=nameID.getValue();\n    if (IDPCache.userIDByTransientNameIDValue.containsKey(nameIDValue)) {\n      IDPCache.userIDByTransientNameIDValue.remove(nameIDValue);\n    }\n  }\n}\n", "nl": "Removes transient nameid from the cache.", "id": "14469"}
{"code": "public InputStream newInputStream(int index) throws IOException {\nsynchronized (DiskLruCache.this) {\n    if (entry.currentEditor != this) {\n      throw new IllegalStateException();\n    }\n    if (!entry.readable) {\n      return null;\n    }\n    try {\n      return new FileInputStream(entry.getCleanFile(index));\n    }\n catch (    FileNotFoundException e) {\n      return null;\n    }\n  }\n}\n", "nl": "Returns an unbuffered input stream to read the last committed value, or null if no value has been committed.", "id": "3302"}
{"code": "private static String newString(final byte[] bytes,final Charset charset){\n  return bytes == null ? null : new String(bytes,charset);\n}\n", "nl": "Constructs a new <code>String</code> by decoding the specified array of bytes using the given charset.", "id": "35546"}
{"code": "public void endElement(String uri,String localName,String qName) throws SAXException {\n}\n", "nl": "Receive notification of the end of an element. <p>By default, do nothing.  Application writers may override this method in a subclass to take specific actions at the end of each element (such as finalising a tree node or writing output to a file).</p>", "id": "2326"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodesetprefix06.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "36655"}
{"code": "public AttributeStatement createAttributeStatement(org.w3c.dom.Element elem) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ATTRIBUTE_STATEMENT,elem);\n  if (obj == null) {\n    return new AttributeStatementImpl(elem);\n  }\n else {\n    return (AttributeStatement)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>AttributeStatement</code>. The return object is immutable.", "id": "57049"}
{"code": "public String toXMLString() throws SAML2Exception {\n  return this.toXMLString(true,false);\n}\n", "nl": "Returns a String representation", "id": "43877"}
{"code": "public com.sun.identity.saml2.jaxb.xmlenc.EncryptionMethodType createEncryptionMethodType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptionMethodTypeImpl();\n}\n", "nl": "Create an instance of EncryptionMethodType", "id": "50744"}
{"code": "public com.sun.identity.liberty.ws.disco.jaxb.QueryType.RequestedServiceTypeType createQueryTypeRequestedServiceTypeType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.disco.jaxb.impl.QueryTypeImpl.RequestedServiceTypeTypeImpl();\n}\n", "nl": "Create an instance of QueryTypeRequestedServiceTypeType", "id": "47986"}
{"code": "public boolean delete(Long parameterID){\n  if (parameterID == null) {\n    throw new IllegalArgumentException(\"primary key null.\");\n  }\n  return database.delete(DATABASE_TABLE,KEY_ACTIONPARAMETERID + \"=\" + parameterID,null) > 0;\n}\n", "nl": "Delete a RegisteredActionParameter record", "id": "46326"}
{"code": "public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {\n  return super.newInstance(javaContentInterface);\n}\n", "nl": "Create an instance of the specified Java content interface.", "id": "52997"}
{"code": "ByteString toByteString(){\n  if (value == null) {\n    value=ByteString.valueOfLong(id);\n  }\n  return value;\n}\n", "nl": "Get the value of the ID in tree format.", "id": "10061"}
{"code": "protected void writeEndTag(String endTag) throws IOException {\n  decrIndent();\n  indent();\n  write(endTag);\n  write(NEWLINE);\n}\n", "nl": "Writes out an end tag appropriately indented.  Also decrements the indent level.", "id": "10531"}
{"code": "public RxGalleryFinal cropropCompressionQuality(@IntRange(from=0) int compressQuality){\n  configuration.setCompressionQuality(compressQuality);\n  return this;\n}\n", "nl": "Set compression quality [0-100] that will be used to save resulting Bitmap.", "id": "10813"}
{"code": "public void fine(String msg){\n  log(Level.FINE,msg);\n}\n", "nl": "Log a FINE message. <p> If the logger is currently enabled for the FINE message level then the given message is forwarded to all the registered output Handler objects. <p>", "id": "17027"}
{"code": "public int hashCode(){\n  return value;\n}\n", "nl": "Returns a hash code value for this enumeration value. The hash code is just this enumeration value's integer value.", "id": "9470"}
{"code": "public void paintScrollBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n}\n", "nl": "Paints the background of a scrollbar.", "id": "27033"}
{"code": "public static Reader newReader(ReadableByteChannel channel,CharsetDecoder decoder,int minBufferCapacity){\n  return new InputStreamReader(new ChannelInputStream(channel),decoder);\n}\n", "nl": "Returns a reader that decodes bytes from a channel.", "id": "24309"}
{"code": "protected void finalize(){\n  this.stopStack();\n}\n", "nl": "Finalization -- stop the stack on finalization. Exit the transaction scanner and release all resources.", "id": "16378"}
{"code": "public static ComponentUI createUI(JComponent x){\n  return new SynthMenuBarUI();\n}\n", "nl": "Creates a new UI object for the given component.", "id": "4096"}
{"code": "public AuditRequestContext copy(){\n  return new AuditRequestContext(transactionId,properties);\n}\n", "nl": "Create a new instance of <code>RequestContext</code>, which will have a reference to the original <code>TransactionId</code> and a copy of the original properties. A copy can be used to hand over the context from one thread to another and therefore we make a copy of the properties in order to keep the map thread-safe. The transactionId is thread-safe and we want to see the sequence of sub-transactionIds shared across threads.", "id": "36124"}
{"code": "public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){\n  if (api < Opcodes.ASM5) {\n    throw new RuntimeException();\n  }\n  if (fv != null) {\n    return fv.visitTypeAnnotation(typeRef,typePath,desc,visible);\n  }\n  return null;\n}\n", "nl": "Visits an annotation on the type of the field.", "id": "6696"}
{"code": "public static KeyStoreParameters newKeyStoreParameters(final ConnectionFactory factory,final DN baseDN,final Options options){\n  return new KeyStoreParameters(factory,baseDN,options);\n}\n", "nl": "Creates a set of LDAP key store parameters with custom options. See the class Javadoc for more information about the parameters.", "id": "20906"}
{"code": "public void doubleBufferingChanged(JRootPane rootPane){\n}\n", "nl": "Invoked when the doubleBuffered or useTrueDoubleBuffering properties of a JRootPane change.  This may come in on any thread.", "id": "18610"}
{"code": "public static final boolean isDebugEnabled(){\n  return isDebugEnabled;\n}\n", "nl": "Indicates if we are in debug mode.", "id": "6134"}
{"code": "public static BufferedImage createCompatibleTranslucentImage(int width,int height){\n  return isHeadless() ? new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB) : getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);\n}\n", "nl": "<p>Returns a new translucent compatible image of the specified width and height. That is, the returned <code>BufferedImage</code> is compatible with the graphics hardware. If the method is called in a headless environment, then the returned BufferedImage will be compatible with the source image.</p>", "id": "58182"}
{"code": "public void disableDragItem(){\n  itemDragEnabled=false;\n  mItemTouchHelper=null;\n}\n", "nl": "Disable drag items.", "id": "31480"}
{"code": "public boolean equals(java.lang.Object ts){\n  if (ts instanceof Timestamp) {\n    return this.equals((Timestamp)ts);\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Tests to see if this <code>Timestamp</code> object is equal to the given object. This version of the method <code>equals</code> has been added to fix the incorrect signature of <code>Timestamp.equals(Timestamp)</code> and to preserve backward compatibility with existing class files. Note: This method is not symmetric with respect to the <code>equals(Object)</code> method in the base class.", "id": "46648"}
{"code": "public com.sun.identity.saml2.jaxb.xmlenc.AgreementMethodType.KANonce createAgreementMethodTypeKANonce() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlenc.impl.AgreementMethodTypeImpl.KANonceImpl();\n}\n", "nl": "Create an instance of AgreementMethodTypeKANonce", "id": "53777"}
{"code": "public void postIdle(final Runnable runnable){\n  post(new IdleRunnable(runnable));\n}\n", "nl": "Schedule runnable to run when the queue goes idle.", "id": "14663"}
{"code": "public static void bakeAll(){\nsynchronized (allLists) {\n    for (    HandlerList h : allLists) {\n      h.bake();\n    }\n  }\n}\n", "nl": "Bake all handler lists. Best used just after all normal event registration is complete, ie just after all plugins are loaded if you're using fevents in a plugin system.", "id": "34878"}
{"code": "public void putAll(PdfDictionary d){\n  map.putAll(d.map);\n}\n", "nl": "Inserts all the key-value pairs into this PdfDictionary.", "id": "46856"}
{"code": "public void addFactoryCreate(String pattern,ObjectCreationFactory creationFactory,boolean ignoreCreateExceptions){\n  creationFactory.setDigester(this);\n  addRule(pattern,new FactoryCreateRule(creationFactory,ignoreCreateExceptions));\n}\n", "nl": "Add a \"factory create\" rule for the specified parameters.", "id": "42643"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_nodevalue02.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "48621"}
{"code": "public AttributeFilter includeAllUserAttributes(final boolean include){\n  this.includeAllUserAttributes=include;\n  return this;\n}\n", "nl": "Specifies whether all user attributes should be included in filtered entries. By default user attributes are included.", "id": "1292"}
{"code": "protected void addUrl(URL url){\n  if (urls.contains(url)) {\n    LOGGER.info(\"Skipped CRL url (duplicate): \" + url);\n    return;\n  }\n  urls.add(url);\n  LOGGER.info(\"Added CRL url: \" + url);\n}\n", "nl": "Adds an URL to the list of CRL URLs", "id": "35215"}
{"code": "public boolean equals(Object obj){\n  return (obj != null && obj instanceof CompoundName && impl.equals(((CompoundName)obj).impl));\n}\n", "nl": "Determines whether obj is syntactically equal to this compound name. If obj is null or not a CompoundName, false is returned. Two compound names are equal if each component in one is \"equal\" to the corresponding component in the other. <p> Equality is also defined in terms of the syntax of this compound name. The default implementation of CompoundName uses the syntax properties jndi.syntax.ignorecase and jndi.syntax.trimblanks when comparing two components for equality.  If case is ignored, two strings with the same sequence of characters but with different cases are considered equal. If blanks are being trimmed, leading and trailing blanks are ignored for the purpose of the comparison. <p> Both compound names must have the same number of components. <p> Implementation note: Currently the syntax properties of the two compound names are not compared for equality. They might be in the future.", "id": "29277"}
{"code": "public boolean markSupported(){\n  return in.markSupported();\n}\n", "nl": "Tells whether this stream supports the mark() operation.", "id": "56903"}
{"code": "public void updateUI(){\n  setUI((MenuBarUI)UIManager.getUI(this));\n}\n", "nl": "Resets the UI property with a value from the current look and feel.", "id": "14570"}
{"code": "public static List<String> readLines(InputStream input,String encoding) throws IOException {\n  return readLines(input,Charsets.toCharset(encoding));\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a list of Strings, one entry per line, using the specified character encoding. <p> Character encoding names can be found at <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>. <p> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>.", "id": "23318"}
{"code": "public Period withYears(int years){\n  if (years == this.years) {\n    return this;\n  }\n  return create(years,months,days);\n}\n", "nl": "Returns a copy of this period with the specified amount of years. <p> This sets the amount of the years unit in a copy of this period. The months and days units are unaffected. <p> The months unit is not automatically normalized with the years unit. This means that a period of \"15 months\" is different to a period of \"1 year and 3 months\". <p> This instance is immutable and unaffected by this method call.", "id": "52707"}
{"code": "public int readWord() throws IOException {\n  length+=2;\n  int k1=in.read();\n  if (k1 < 0)   return 0;\n  return (k1 + (in.read() << 8)) & 0xffff;\n}\n", "nl": "Read the next word from the InputStream.", "id": "40411"}
{"code": "protected void stopAnimationTimer(){\n  if (animator != null) {\n    animator.stop();\n  }\n}\n", "nl": "Stops the animation thread. This method is invoked when the indeterminate animation should be stopped. Reasons for this may include: <ul> <li>The progress bar changes to determinate <li>The progress bar is no longer part of a displayable hierarchy <li>This UI in uninstalled </ul> If you implement your own animation thread, you must override this method.", "id": "4714"}
{"code": "public boolean equals(Object object){\n  return (super.equals(object) && object instanceof PrinterName);\n}\n", "nl": "Returns whether this printer name attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: <OL TYPE=1> <LI> <CODE>object</CODE> is not null. <LI> <CODE>object</CODE> is an instance of class PrinterName. <LI> This printer name attribute's underlying string and <CODE>object</CODE>'s underlying string are equal. <LI> This printer name attribute's locale and <CODE>object</CODE>'s locale are equal. </OL>", "id": "20792"}
{"code": "public Set searchGroups(String wildcard,int level) throws AMException, SSOException {\n  return searchGroups(wildcard,null,level);\n}\n", "nl": "Searches for groups in this group using wildcards. Wildcards can be specified such as a*, *, *a.", "id": "30513"}
{"code": "public static ArgumentException unableToReadBindPasswordInteractively(){\n  LocalizableMessage message=ERR_DSCFG_ERROR_BIND_PASSWORD_NONINTERACTIVE.get();\n  return new ArgumentException(message);\n}\n", "nl": "Creates an argument exception which should be used when the bind password could not be read from the standard input because the application is non-interactive.", "id": "50707"}
{"code": "public static Foo findByUuid_C_First(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {\n  return getPersistence().findByUuid_C_First(uuid,companyId,orderByComparator);\n}\n", "nl": "Returns the first foo in the ordered set where uuid = &#63; and companyId = &#63;.", "id": "58128"}
{"code": "public InitializationBuilder requirePasswordStorageSchemes(){\n  requireCryptoServices();\n  Collections.addAll(subSystemsToInitialize,SubSystem.PASSWORD_STORAGE_SCHEME);\n  return this;\n}\n", "nl": "Requires to setup and start Password Storage Schemes. Crypto services are needed for Password Storage, so it will also set them up if not already done.", "id": "41343"}
{"code": "@Override public boolean onOptionsItemSelected(MenuItem item){\nswitch (item.getItemId()) {\ncase MENU_HELP:\n    help();\n  return true;\n}\nreturn super.onOptionsItemSelected(item);\n}\n", "nl": "Called when an item of options menu is clicked", "id": "33089"}
{"code": "public Matcher useTransparentBounds(boolean b){\n  transparentBounds=b;\n  return this;\n}\n", "nl": "Sets the transparency of region bounds for this matcher. <p> Invoking this method with an argument of <tt>true</tt> will set this matcher to use <i>transparent</i> bounds. If the boolean argument is <tt>false</tt>, then <i>opaque</i> bounds will be used. <p> Using transparent bounds, the boundaries of this matcher's region are transparent to lookahead, lookbehind, and boundary matching constructs. Those constructs can see beyond the boundaries of the region to see if a match is appropriate. <p> Using opaque bounds, the boundaries of this matcher's region are opaque to lookahead, lookbehind, and boundary matching constructs that may try to see beyond them. Those constructs cannot look past the boundaries so they will fail to match anything outside of the region. <p> By default, a matcher uses opaque bounds.", "id": "15037"}
{"code": "public PlaPointInt center_get(){\n  return abit_center;\n}\n", "nl": "Override in subclasses", "id": "50957"}
{"code": "public void write(PdfDocument document) throws IOException {\n  setXfaForm(this,document);\n}\n", "nl": "Write the XfaForm to the provided PdfDocument.", "id": "22568"}
{"code": "public void addEditActionListener(ActionListener listener){\n  editButton.addActionListener(listener);\n}\n", "nl": "Adds an action listener to this panel.  The action listener will be invoked when the user clicks on the 'Edit' button.", "id": "22077"}
{"code": "public String toString(){\n  return String.valueOf(val);\n}\n", "nl": "Returns the string representing the object.", "id": "23625"}
{"code": "static void createFileLicenseApproved(){\n  if (getApproval()) {\n    try {\n      new File(getInstanceLegalDirectory(),ACCEPTED_LICENSE_FILE_NAME).createNewFile();\n    }\n catch (    IOException e) {\n    }\n  }\n}\n", "nl": "Create a file which indicates that the license has been approved.", "id": "15062"}
{"code": "public boolean isReverseAxes(){\n  return true;\n}\n", "nl": "Tells if this is a reverse axes.  Overrides AxesWalker#isReverseAxes.", "id": "57458"}
{"code": "public static boolean isSynthetic(int mod){\n  return (mod & ACC_SYNTHETIC) != 0;\n}\n", "nl": "Tells whether a given access modifier is synthetic. A modifier is synthetic if it is marked with the ACC_SYNTHETIC flag (0x1000), as specified in JLS8, 4.6 <tt>Methods</tt>.", "id": "2825"}
{"code": "public void modifyAllPolicyTemplates(String serviceName,Set policyDNs) throws AMException, SSOException {\n  throw new UnsupportedOperationException();\n}\n", "nl": "Modifies all the templates under this organization that contain any policyDN in given policyDNs.", "id": "56210"}
{"code": "public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {\n  return new XNumber((int)(left.num() / right.num()));\n}\n", "nl": "Apply the operation to two operands, and return the result.", "id": "6730"}
{"code": "public boolean isStored(){\n  return isISStored;\n}\n", "nl": "Returns whether the InternalSession represented has been stored. If this is true, changes to this object will update the stored version. return <code>true</code> if the internal session is stored <code>false</code> otherwise", "id": "6912"}
{"code": "public static int encode(byte[] data,int off,int length,OutputStream out) throws IOException {\n  return encoder.encode(data,off,length,out);\n}\n", "nl": "Hex encode the byte data writing it to the given output stream.", "id": "45229"}
{"code": "public final void yyreset(java.io.Reader reader){\n  zzReader=reader;\n  zzAtBOL=true;\n  zzAtEOF=false;\n  zzEndRead=zzStartRead=0;\n  zzCurrentPos=zzMarkedPos=0;\n  yyline=yychar=yycolumn=0;\n  zzLexicalState=YYINITIAL;\n}\n", "nl": "Resets the scanner to read from a new input stream. Does not close the old reader. All internal variables are reset, the old input stream  <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical state is set to <tt>ZZ_INITIAL</tt>.", "id": "45452"}
{"code": "public static int mainCompare(String[] args){\n  return mainCompare(args,true,System.out,System.err);\n}\n", "nl": "Parses the provided command-line arguments and uses that information to run the ldapcompare tool.", "id": "43430"}
{"code": "@Override protected void stopInternal() throws LifecycleException {\n  setState(LifecycleState.STOPPING);\n  try {\n    protocolHandler.stop();\n  }\n catch (  Exception e) {\n    throw new LifecycleException(sm.getString(\"coyoteConnector.protocolHandlerStopFailed\"),e);\n  }\n}\n", "nl": "Terminate processing requests via this Connector.", "id": "14976"}
{"code": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"StandardService[\");\n  sb.append(getName());\n  sb.append(\"]\");\n  return (sb.toString());\n}\n", "nl": "Return a String representation of this component.", "id": "41487"}
{"code": "protected static void cleanDomainMap(String canonOrgDN){\nsynchronized (canonicalDomainMap) {\n    canonicalDomainMap.remove(canonOrgDN);\n  }\nsynchronized (domainMap) {\n    domainMap.remove(canonOrgDN);\n  }\n}\n", "nl": "This is a protected method used by the notification event listener thread to clean the domain map, when organization entry is changed.", "id": "9106"}
{"code": "void increment(){\n  count.incrementAndGet();\n  rateWindow.incrementForTimestamp(timerGetter.now());\n}\n", "nl": "Increments the cumulative count for an operation and recalculates the rate at which the operation has been made. <br/> Only synchronizes the count increment, NOT the whole method.", "id": "22106"}
{"code": "private void writeObject(ObjectOutputStream s) throws IOException {\n  s.defaultWriteObject();\n  if (getUIClassID().equals(uiClassID)) {\n    byte count=JComponent.getWriteObjCounter(this);\n    JComponent.setWriteObjCounter(this,--count);\n    if (count == 0 && ui != null) {\n      ui.installUI(this);\n    }\n  }\n}\n", "nl": "See readObject() and writeObject() in JComponent for more information about serialization in Swing.", "id": "6072"}
{"code": "private static int hash(Object x,int length){\n  int h=System.identityHashCode(x);\n  return ((h << 1) - (h << 8)) & (length - 1);\n}\n", "nl": "Returns index for Object x.", "id": "38722"}
{"code": "public SessionIndex createSessionIndex(String value){\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SESSION_INDEX,value);\n  if (obj == null) {\n    return new SessionIndexImpl(value);\n  }\n else {\n    return (SessionIndex)obj;\n  }\n}\n", "nl": "Returns the <code>SessionIndex</code> Object.", "id": "12842"}
{"code": "protected void onSessionTimeout(RequestContext requestContext) throws ServletException {\n}\n", "nl": "Ignores HTTP session time out.  Console uses SSO Token Session.", "id": "58803"}
{"code": "public void writeTo(Writer out) throws IOException {\nsynchronized (lock) {\n    out.write(buf,0,count);\n  }\n}\n", "nl": "Writes the contents of the buffer to another character stream.", "id": "34206"}
{"code": "public byte[] toBytes(){\n  return cipherSuiteCode;\n}\n", "nl": "Returns cipher suite code as byte array", "id": "24335"}
{"code": "public void addSessionPartner(SAML2SessionPartner sessionPartner){\n  Iterator i=sessionPartners.iterator();\n  while (i.hasNext()) {\n    if (((SAML2SessionPartner)i.next()).equals(sessionPartner)) {\n      return;\n    }\n  }\n  sessionPartners.add(sessionPartner);\n}\n", "nl": "Adds a session partner.", "id": "37013"}
{"code": "public boolean isUseSSL(){\n  return currentConfig.isUseSSL();\n}\n", "nl": "Determines whether clients are allowed to connect over JMX using SSL.", "id": "45679"}
{"code": "public void visit(String name,Object value){\n  if (av != null) {\n    av.visit(name,value);\n  }\n}\n", "nl": "Visits a primitive value of the annotation.", "id": "47691"}
{"code": "public <M extends Configuration>void deregisterAddListener(InstantiableRelationDefinition<?,M> d,ConfigurationAddListener<M> listener){\n  validateRelationDefinition(d);\n  DN baseDN=DNBuilder.create(path,d);\n  deregisterAddListener(baseDN,listener);\n}\n", "nl": "Deregisters an existing configuration add listener.", "id": "11054"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.LanguageElement createLanguageElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LanguageElementImpl();\n}\n", "nl": "Create an instance of LanguageElement", "id": "55888"}
{"code": "public boolean isClosed(){\n  return closed;\n}\n", "nl": "Returns true if this stream was closed locally.", "id": "14164"}
{"code": "public void printStackTrace(PrintStream s){\n  super.printStackTrace(s);\n  if (cause != null) {\n    cause.printStackTrace(s);\n  }\n}\n", "nl": "Prints this <code>XMLSignatureException</code>, its backtrace and the cause's backtrace to the specified print stream.", "id": "6463"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(elementreplaceexistingattributegevalue.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "44482"}
{"code": "public void update(DN baseDN,ServerState serverState){\n  for (  CSN csn : serverState) {\n    update(baseDN,csn);\n  }\n}\n", "nl": "Update the ServerState of the provided baseDN with the provided server state.", "id": "31742"}
{"code": "public void invalidateFileCache(){\n  if (loadThread != null) {\n    loadThread.interrupt();\n    loadThread.cancelRunnables();\n    loadThread=null;\n  }\n}\n", "nl": "This method is used to interrupt file loading thread.", "id": "52321"}
{"code": "private String attributeName(Request request){\n  return getClass().getName() + ':' + request.getUri().getScheme()+ ':'+ request.getUri().getHost()+ ':'+ request.getUri().getPort()+ ':'+ \"userpass\";\n}\n", "nl": "Resolves a session attribute name for the remote server specified in the specified request.", "id": "23648"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodesetnodevaluenomodificationallowederrEE.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "30835"}
{"code": "protected Object clone(){\n  try {\n    return super.clone();\n  }\n catch (  CloneNotSupportedException e) {\n    throw new InternalError(e);\n  }\n}\n", "nl": "Creates a copy of this <code>TextLayout</code>.", "id": "43933"}
{"code": "private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){\n  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);\n}\n", "nl": "CAS waitStatus field of a node.", "id": "35570"}
{"code": "public void changedUpdate(DocumentEvent changes,Shape a,ViewFactory f){\n  setPropertiesFromAttributes();\n  layoutChanged(X_AXIS);\n  layoutChanged(Y_AXIS);\n  super.changedUpdate(changes,a,f);\n}\n", "nl": "Gives notification from the document that attributes were changed in a location that this view is responsible for.", "id": "32411"}
{"code": "public void itemStateChanged(ItemEvent e){\n  ((ItemListener)a).itemStateChanged(e);\n  ((ItemListener)b).itemStateChanged(e);\n}\n", "nl": "Handles the itemStateChanged event by invoking the itemStateChanged methods on listener-a and listener-b.", "id": "45989"}
{"code": "boolean isNewEntry(){\n  return (smsEntry.isNewEntry());\n}\n", "nl": "Checks if the entry exists in the directory", "id": "38415"}
{"code": "private int performAddOperation(boolean authenticate) throws Exception {\n  String filePath=TestCaseUtils.createTempFile(\"dn: o=rejectTestCase,o=test\",\"objectclass: top\",\"objectclass: organization\",\"o: rejectTestCase\",\"description: Reject Test Case\");\n  return LDAPModify.mainModify(addArgs(authenticate,filePath),false,null,null);\n}\n", "nl": "Utility method which is called by the testcase sending an ADD request.", "id": "37383"}
{"code": "@Override public boolean isInGroup(Group group){\nsynchronized (groups) {\n    return (groups.contains(group));\n  }\n}\n", "nl": "Is this user in the specified group?", "id": "20862"}
{"code": "public void reload(){\n  internalLoad();\n}\n", "nl": "Invalidates the cache of known service provider class names.", "id": "44464"}
{"code": "private boolean shouldLog(TraceSettings settings){\n  return settings.getLevel() != DISABLED;\n}\n", "nl": "Indicates if there is something to log.", "id": "27944"}
{"code": "public static void sort(Object[] array){\n  ComparableTimSort.sort(array);\n}\n", "nl": "Sorts the specified array in ascending natural order.", "id": "41631"}
{"code": "public void close(){\n  if (mythread != null) {\n    mythread.interrupt();\n    mythread=null;\n  }\n}\n", "nl": "Close the message channel.", "id": "54444"}
{"code": "public boolean beginTabCommonDisplay(ChildDisplayEvent event){\n  return (tabModel.getNodeCount() > 1);\n}\n", "nl": "Returns <code>true</code> if tab set has more than one tab.", "id": "27361"}
{"code": "@Override public void bind(Name name,Object obj) throws NamingException {\n  getBoundContext().bind(parseName(name),obj);\n}\n", "nl": "Binds a name to an object. All intermediate contexts and the target context (that named by all but terminal atomic component of the name) must already exist.", "id": "22864"}
{"code": "private Object readResolve(){\n  return object;\n}\n", "nl": "Returns the object that will replace this one.", "id": "43606"}
{"code": "public boolean isPsuedoVar(){\n  java.lang.String ns=m_qname.getNamespaceURI();\n  if ((null != ns) && ns.equals(RedundentExprEliminator.PSUEDOVARNAMESPACE)) {\n    if (m_qname.getLocalName().startsWith(\"#\"))     return true;\n  }\n  return false;\n}\n", "nl": "Tell if this is a psuedo variable reference, declared by Xalan instead  of by the user.", "id": "10580"}
{"code": "public void addDisallowedString(final String string){\n  disallowedStrings.add(string.toLowerCase());\n}\n", "nl": "Adds the specified string to the list of disallowed strings.", "id": "44801"}
{"code": "public static ValueExp value(int val){\n  return new NumericValueExp((long)val);\n}\n", "nl": "Returns a numeric value expression that can be used in any Query call that expects a ValueExp.", "id": "2152"}
{"code": "protected String undeploy(ContextName cn,StringManager smClient){\n  StringWriter stringWriter=new StringWriter();\n  PrintWriter printWriter=new PrintWriter(stringWriter);\n  super.undeploy(printWriter,cn,smClient);\n  return stringWriter.toString();\n}\n", "nl": "Undeploy the web application at the specified context path.", "id": "51311"}
{"code": "@Override public JapaneseDate dateEpochDay(long epochDay){\n  return new JapaneseDate(LocalDate.ofEpochDay(epochDay));\n}\n", "nl": "Obtains a local date in the Japanese calendar system from the epoch-day.", "id": "10873"}
{"code": "public void print(char ch){\n  print(String.valueOf(ch));\n}\n", "nl": "Prints the string representation of the specified character to the target.", "id": "33884"}
{"code": "public com.sun.identity.liberty.ws.interaction.jaxb.InquiryType createInquiryType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.InquiryTypeImpl();\n}\n", "nl": "Create an instance of InquiryType", "id": "18067"}
{"code": "@Override public void toString(StringBuilder buffer){\n  buffer.append(\"PersistentSearchControl(changeTypes=\\\"\");\n  PersistentSearchChangeType.changeTypesToString(changeTypes,buffer);\n  buffer.append(\"\\\",changesOnly=\");\n  buffer.append(changesOnly);\n  buffer.append(\",returnECs=\");\n  buffer.append(returnECs);\n  buffer.append(\")\");\n}\n", "nl": "Appends a string representation of this persistent search control to the provided buffer.", "id": "10076"}
{"code": "protected void startDocumentInternal() throws org.xml.sax.SAXException {\n  if (m_tracer != null)   this.fireStartDoc();\n}\n", "nl": "This method handles what needs to be done at a startDocument() call, whether from an external caller, or internally called in the  serializer.  For historical reasons the serializer is flexible to startDocument() not always being called. Even if no external call is made into startDocument() this method will always be called as a self generated internal startDocument, it handles what needs to be done at a startDocument() call. This method exists just to make sure that startDocument() is only ever called from an external caller, which in principle is just a matter of style.", "id": "34360"}
{"code": "public void startElement(String elementNamespaceURI,String elementLocalName,String elementName) throws SAXException {\n  super.startElement(elementNamespaceURI,elementLocalName,elementName);\n}\n", "nl": "From XSLTC", "id": "25406"}
{"code": "public DateTime parseTimestamp(String timestamp){\n  DateTimeFormatter parser=ISODateTimeFormat.dateTime();\n  return parser.withOffsetParsed().parseDateTime(timestamp);\n}\n", "nl": "Parses an ISO8601 compliant timestamp into a DateTime object.", "id": "53864"}
{"code": "public static AdjustmentListener add(AdjustmentListener a,AdjustmentListener b){\n  return (AdjustmentListener)addInternal(a,b);\n}\n", "nl": "Adds adjustment-listener-a with adjustment-listener-b and returns the resulting multicast listener.", "id": "18106"}
{"code": "public void registerModifiedIndex(AbstractIndexDescriptor index){\n  modifiedIndexes.add(index);\n  indexModified(index);\n}\n", "nl": "Registers an index as modified.  This is used by the panels to be able to inform the user that a rebuild of the index is required.", "id": "31320"}
{"code": "public Object object(){\n  return str();\n}\n", "nl": "Since this object is incomplete without the length and the offset, we  have to convert to a string when this function is called.", "id": "29168"}
{"code": "private void validateProvidedCookie(final MultiDomainServerState cookie,Set<DN> excludedBaseDNs) throws DirectoryException {\n  if (cookie != null && !cookie.isEmpty()) {\n    replicationServer.validateCookie(cookie,excludedBaseDNs);\n  }\n}\n", "nl": "Validates the cookie contained in search parameters by checking its content with the actual replication server state.", "id": "677"}
{"code": "public boolean equals(Object object){\n  return (super.equals(object) && object instanceof JobPrioritySupported);\n}\n", "nl": "Returns whether this job priority supported attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: <OL TYPE=1> <LI> <CODE>object</CODE> is not null. <LI> <CODE>object</CODE> is an instance of class JobPrioritySupported. <LI> This job priority supported attribute's value and <CODE>object</CODE>'s value are equal. </OL>", "id": "46663"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodeentitynodename.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "18771"}
{"code": "public static com.liferay.blade.samples.servicebuilder.model.Foo addFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){\n  return getService().addFoo(foo);\n}\n", "nl": "Adds the foo to the database. Also notifies the appropriate model listeners.", "id": "1155"}
{"code": "private void cancelAnimation(){\n  if (mCurrentAnimation != null) {\n    mCurrentAnimation.setDuration(0);\n    mCurrentAnimation.cancel();\n    mCurrentAnimation=null;\n  }\n}\n", "nl": "Cancels the current animation.", "id": "777"}
{"code": "public static <T>void find(ManagedObjectPath<?,?> path,PropertyDefinition<T> pd,Collection<DN> dependencies){\n  Visitor<T> v=new Visitor<>(dependencies);\n  DefaultBehaviorProvider<T> db=pd.getDefaultBehaviorProvider();\n  db.accept(v,path);\n}\n", "nl": "Finds the dependencies associated with the provided property definition.", "id": "3613"}
{"code": "public AMSearchResults searchUsers(String wildcard,AMSearchControl searchControl,String avfilter) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(USER),getSearchFilter(AMObject.USER),wildcard,searchControl,avfilter);\n}\n", "nl": "Searches for users in this people container using wildcards and attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be specifed so that DNs of users with matching attribute-value pairs will be returned.", "id": "54204"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_notationssetnameditemns1.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "31718"}
{"code": "public boolean hasTag(){\n  return hasParameter(ParameterNames.TAG);\n}\n", "nl": "Boolean function", "id": "44635"}
{"code": "public void mouseReleased(MouseEvent e){\n  JMenu menu=(JMenu)menuItem;\n  if (!menu.isEnabled())   return;\n  MenuSelectionManager manager=MenuSelectionManager.defaultManager();\n  manager.processMouseEvent(e);\n  if (!e.isConsumed())   manager.clearSelectedPath();\n}\n", "nl": "Invoked when the mouse has been released on the menu. Delegates the mouse event to the MenuSelectionManager.", "id": "41514"}
{"code": "@Override public void attributeAdded(ServletContextAttributeEvent event){\n  log(\"attributeAdded('\" + event.getName() + \"', '\"+ event.getValue()+ \"')\");\n}\n", "nl": "Record the fact that a servlet context attribute was added.", "id": "2397"}
{"code": "private boolean hasNextInetSocketAddress(){\n  return nextInetSocketAddressIndex < inetSocketAddresses.size();\n}\n", "nl": "Returns true if there's another socket address to try.", "id": "42151"}
{"code": "public boolean removeElement(int s){\n  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));\n  return super.removeElement(s);\n}\n", "nl": "Removes the first occurrence of the argument from this vector. If the object is found in this vector, each component in the vector with an index greater or equal to the object's index is shifted downward to have an index one smaller than the value it had previously.", "id": "9388"}
{"code": "private void ensureValidPosition(){\n  int length=component.getDocument().getLength();\n  if (dot > length || mark > length) {\n    handleSetDot(length,Position.Bias.Forward);\n  }\n}\n", "nl": "This is invoked after the document changes to verify the current dot/mark is valid. We do this in case the <code>NavigationFilter</code> changed where to position the dot, that resulted in the current location being bogus.", "id": "26238"}
{"code": "public IDPList createIDPList(String value) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.IDPLIST,value);\n  if (obj == null) {\n    return new IDPListImpl(value);\n  }\n else {\n    return (IDPList)obj;\n  }\n}\n", "nl": "Returns the <code>IDPList</code> Object.", "id": "33342"}
{"code": "static void writeShort(final byte[] b,final int index,final int s){\n  b[index]=(byte)(s >>> 8);\n  b[index + 1]=(byte)s;\n}\n", "nl": "Writes a short value in the given byte array.", "id": "55623"}
{"code": "public final int readPort(LocalizableMessage prompt,final int defaultValue) throws ClientException {\n  if (defaultValue != -1) {\n    prompt=INFO_PROMPT_SINGLE_DEFAULT.get(prompt,defaultValue);\n  }\n  return readValidatedInput(prompt,Utils.portValidationCallback(defaultValue),CONFIRMATION_MAX_TRIES);\n}\n", "nl": "Interactively retrieves a port value from the console.", "id": "21249"}
{"code": "protected void handleText(char text[]){\n}\n", "nl": "Called when PCDATA is encountered.", "id": "7865"}
{"code": "public boolean delete(Long actionID){\n  if (actionID == null) {\n    throw new IllegalArgumentException(\"primary key null.\");\n  }\n  return database.delete(DATABASE_TABLE,KEY_ACTIONID + \"=\" + actionID,null) > 0;\n}\n", "nl": "Delete a RegisteredAction record", "id": "10278"}
{"code": "boolean isSystemTheme(){\n  return (getClass() == DefaultMetalTheme.class);\n}\n", "nl": "Returns true if this is a theme provided by the core platform.", "id": "28537"}
{"code": "public static ValueExp value(Number val){\n  return new NumericValueExp(val);\n}\n", "nl": "Returns a numeric value expression that can be used in any Query call that expects a ValueExp.", "id": "7161"}
{"code": "public void onTerminate(){\n  sContext.unregisterReceiver(mModel);\n  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(sContext);\n  launcherApps.removeOnAppsChangedCallback(mModel);\n  PackageInstallerCompat.getInstance(sContext).onStop();\n}\n", "nl": "Call from Application.onTerminate(), which is not guaranteed to ever be called.", "id": "10482"}
{"code": "public RxGalleryFinal cropUseSourceImageAspectRatio(){\n  configuration.setAspectRatioX(0);\n  configuration.setAspectRatioY(0);\n  return this;\n}\n", "nl": "Set an aspect ratio for crop bounds that is evaluated from source image width and height. User won't see the menu with other ratios options.", "id": "35329"}
{"code": "private void endArguments(){\n  if (argumentStack % 2 != 0) {\n    buf.append('>');\n  }\n  argumentStack/=2;\n}\n", "nl": "Ends the type arguments of a class or inner class type.", "id": "40498"}
{"code": "public static void onlyForTestsAddlocalReplicationServer(String server){\n  localPorts.add(HostPort.valueOf(server).getPort());\n}\n", "nl": "WARNING : only use this methods for tests purpose. Add the Replication Server given as a parameter in the list of local replication servers.", "id": "4554"}
{"code": "private boolean isNeverExpires(){\n  return getExpiryTime() == defaultExpireTime();\n}\n", "nl": "Get whether or not token expires.", "id": "48438"}
{"code": "public static CommandResult execCommand(String command,boolean isRoot){\n  return execCommand(new String[]{command},isRoot,true);\n}\n", "nl": "execute shell command, default return result msg", "id": "26235"}
{"code": "@RemoveOnceSwitchingAttributes(comment=\"once using the non immutable SDK's Attribute class, \" + \"we can incrementally build an attribute by using the add(String attrName, Object attrValue) method\") public void add(String attrName,Collection<?> attrValues){\n  AttributeBuilder builder=new AttributeBuilder(attrName);\n  builder.addAllStrings(attrValues);\n  attrs.add(builder.toAttribute());\n}\n", "nl": "Adds an attribute with the provided name and values.", "id": "53901"}
{"code": "@Override public void destroyModuleState(){\n  userTokenId=null;\n  userPrincipal=null;\n}\n", "nl": "Destroy the module state.", "id": "34872"}
{"code": "private String outOfBoundsMsg(int index){\n  return \"Index: \" + index + \", Size: \"+ size;\n}\n", "nl": "Constructs an IndexOutOfBoundsException detail message. Of the many possible refactorings of the error handling code, this \"outlining\" performs best with both server and client VMs.", "id": "31944"}
{"code": "@Override public void cacheResult(List<Foo> foos){\n  for (  Foo foo : foos) {\n    if (entityCache.getResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,foo.getPrimaryKey()) == null) {\n      cacheResult(foo);\n    }\n else {\n      foo.resetOriginalValues();\n    }\n  }\n}\n", "nl": "Caches the foos in the entity cache if it is enabled.", "id": "1365"}
{"code": "public MaterialBarcodeScannerBuilder withOnlyQRCodeScanning(){\n  mBarcodeFormats=Barcode.QR_CODE;\n  return this;\n}\n", "nl": "Enables exclusive scanning on QR Codes, no other barcodes will be detected", "id": "28904"}
{"code": "public boolean add(String valueString){\n  return add(ByteString.valueOfUtf8(valueString));\n}\n", "nl": "Adds the specified attribute value to this attribute builder if it is not already present.", "id": "847"}
{"code": "public void clear_add_field(){\n  if (write_protected)   return;\n  statusPanel.add_message.setText(EMPTY);\n  prev_target_layer_name=EMPTY;\n}\n", "nl": "Clears the additional field, which is among others used to display the layer of the nearest target item.", "id": "58464"}
{"code": "public GSERParser skipMSP() throws DecodeException {\n  skip(GSER_MSP);\n  return this;\n}\n", "nl": "Skips the input matching one or more space characters.", "id": "4141"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.QueryType createQueryType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.QueryTypeImpl();\n}\n", "nl": "Create an instance of QueryType", "id": "57268"}
{"code": "private static Document createPrefsDoc(String qname){\n  try {\n    DOMImplementation di=DocumentBuilderFactory.newInstance().newDocumentBuilder().getDOMImplementation();\n    DocumentType dt=di.createDocumentType(qname,null,PREFS_DTD_URI);\n    return di.createDocument(null,qname,dt);\n  }\n catch (  ParserConfigurationException e) {\n    throw new AssertionError(e);\n  }\n}\n", "nl": "Create a new prefs XML document.", "id": "7034"}
{"code": "synchronized void establishConnection() throws IOException {\n  if (isConnected) {\n    throw new IOException(\"Pipe already connected\");\n  }\n  if (buffer == null) {\n    buffer=new byte[PipedInputStream.PIPE_SIZE];\n  }\n  isConnected=true;\n}\n", "nl": "Establishes the connection to the PipedOutputStream.", "id": "26538"}
{"code": "public void track(File file,Object marker,FileDeleteStrategy deleteStrategy){\n  if (file == null) {\n    throw new NullPointerException(\"The file must not be null\");\n  }\n  addTracker(file.getPath(),marker,deleteStrategy);\n}\n", "nl": "Track the specified file, using the provided marker, deleting the file when the marker instance is garbage collected. The speified deletion strategy is used.", "id": "18029"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.AuthzServiceElement createAuthzServiceElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.AuthzServiceElementImpl();\n}\n", "nl": "Create an instance of AuthzServiceElement", "id": "47827"}
{"code": "private void addStaticPerms(PermissionCollection perms,PermissionCollection statics){\n  if (statics != null) {\nsynchronized (statics) {\n      Enumeration<Permission> e=statics.elements();\n      while (e.hasMoreElements()) {\n        perms.add(e.nextElement());\n      }\n    }\n  }\n}\n", "nl": "add static permissions to provided permission collection", "id": "43963"}
{"code": "public static <T>boolean remove(Collection<T> collection,T element){\n  if (element == null) {\n    return false;\n  }\n  if (CollectionUtils.isEmpty(collection)) {\n    return false;\n  }\n  return collection.remove(element);\n}\n", "nl": "Safe method to remove an element from collection. If either collection is empty or element is null - returns false.", "id": "45699"}
{"code": "public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {\n  if (documentHandler != null) {\n    qAtts.setAttributes(atts);\n    documentHandler.startElement(qName,qAtts);\n  }\n}\n", "nl": "Adapt a SAX2 start element event.", "id": "26905"}
{"code": "protected final void appendTextChunk(CharSequence text){\n  result.append(text);\n}\n", "nl": "Used to actually append text to the text results.  Subclasses can use this to insert text that wouldn't normally be included in text parsing (e.g. result of OCR performed against image content)", "id": "54506"}
{"code": "synchronized void removeResourceBundle(AbstractManagedObjectDefinition<?,?> d){\n  removeResourceBundle(d,Locale.getDefault());\n}\n", "nl": "Forcefully removes any resource bundles associated with the provided definition and using the default locale. <p> This method is intended for internal testing only.", "id": "15788"}
{"code": "public boolean hasParameter(String name){\n  return authParams.getNameValue(name) != null;\n}\n", "nl": "boolean function", "id": "34828"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.MsgMethodElement createMsgMethodElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.MsgMethodElementImpl();\n}\n", "nl": "Create an instance of MsgMethodElement", "id": "16721"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsse.UsernameTokenElement createUsernameTokenElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsse.impl.UsernameTokenElementImpl();\n}\n", "nl": "Create an instance of UsernameTokenElement", "id": "42884"}
{"code": "void sendPendingStatusMessages(){\n  final PendingStatusMessages savedState;\nsynchronized (pendingStatusMessagesLock) {\n    savedState=pendingStatusMessages;\n    pendingStatusMessages=new PendingStatusMessages();\n  }\n  sendPendingChangeTimeHeartbeatMsgs(savedState);\n  sendPendingTopologyMsgs(savedState);\n  sendPendingMonitorMsgs(savedState);\n}\n", "nl": "Sends any enqueued status messages to the rest of the topology.", "id": "43586"}
{"code": "@Deprecated public static void track(File file,Object marker,FileDeleteStrategy deleteStrategy){\n  theInstance.track(file,marker,deleteStrategy);\n}\n", "nl": "Track the specified file, using the provided marker, deleting the file when the marker instance is garbage collected. The speified deletion strategy is used.", "id": "48592"}
{"code": "public ECPResponse createECPResponse(String value) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ECP_RESPONSE,value);\n  if (obj == null) {\n    return new ECPResponseImpl(value);\n  }\n else {\n    return (ECPResponse)obj;\n  }\n}\n", "nl": "Returns the <code>ECPResponse</code> Object.", "id": "16442"}
{"code": "public static String readPascalString(RandomAccessFile raf) throws IOException {\n  int len=raf.read();\n  byte[] buf=new byte[len + 1];\n  raf.read(buf,1,len);\n  buf[0]=(byte)len;\n  return bytesToPascalString(buf);\n}\n", "nl": "Read a Pascal string from the file.", "id": "53576"}
{"code": "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {\n  return XBoolean.S_FALSE;\n}\n", "nl": "Execute the function.  The function must return a valid object.", "id": "8984"}
{"code": "public static boolean isWeakKey(byte[] key,int offset,int length){\n  for (int i=offset; i < length; i+=DES_KEY_LENGTH) {\n    if (DESParameters.isWeakKey(key,i)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "return true if the passed in key is a DES-EDE weak key.", "id": "6547"}
{"code": "public void remove_all_doors(ExpandRoom p_room){\n  for (  ExpandDoor curr_door : p_room.get_doors()) {\n    ExpandRoom other_room=curr_door.other_room(p_room);\n    if (other_room == null)     continue;\n    other_room.remove_door(curr_door);\n    if (other_room instanceof ExpandRoomFreespaceIncomplete) {\n      remove_incomplete_expansion_room((ExpandRoomFreespaceIncomplete)other_room);\n    }\n  }\n  p_room.clear_doors();\n}\n", "nl": "Removes all doors from p_room", "id": "34527"}
{"code": "public static TypeReference newTryCatchReference(int tryCatchBlockIndex){\n  return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));\n}\n", "nl": "Returns a reference to the type of the exception declared in a 'catch' clause of a method.", "id": "23873"}
{"code": "public boolean compressObjectClassSets(){\n  return compressObjectClassSets;\n}\n", "nl": "Indicates whether the encoded entry should use compressed object class sets.", "id": "44020"}
{"code": "public void paintScrollBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the background of a scrollbar.", "id": "37657"}
{"code": "private JsonValue updateValueWithObject(String resourceID,JsonValue value,JsonPointer path,Object obj) throws ResourceException {\n  ensureJsonPointerExists(path,value);\n  value.put(path,obj);\n  return performUpdate(resourceID,value);\n}\n", "nl": "Adds an object to a JsonValue and performs an update", "id": "44600"}
{"code": "public void dup2(){\n  mv.visitInsn(Opcodes.DUP2);\n}\n", "nl": "Generates a DUP2 instruction.", "id": "40964"}
{"code": "private List<String> toList(String[] array){\n  List<String> ret=new ArrayList<String>();\n  if (array != null && array.length > 0) {\n    ret.addAll(Arrays.asList(array));\n  }\n  return ret;\n}\n", "nl": "Returns a list of string by adding string in an array to it.", "id": "52852"}
{"code": "@Override public com.liferay.blade.samples.servicebuilder.model.Foo createFoo(long fooId){\n  return _fooLocalService.createFoo(fooId);\n}\n", "nl": "Creates a new foo with the primary key. Does not add the foo to the database.", "id": "2289"}
{"code": "public void rectangle(float x,float y,float w,float h){\n  moveTo(x,y);\n  lineTo(x + w,y);\n  lineTo(x + w,y + h);\n  lineTo(x,y + h);\n  closeSubpath();\n}\n", "nl": "Appends a rectangle to the current path as a complete subpath.", "id": "3071"}
{"code": "@Override public com.liferay.blade.samples.servicebuilder.model.Foo updateFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){\n  return _fooLocalService.updateFoo(foo);\n}\n", "nl": "Updates the foo in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.", "id": "21130"}
{"code": "private String outOfBoundsMsg(int index){\n  return \"Index: \" + index + \", Size: \"+ size;\n}\n", "nl": "Constructs an IndexOutOfBoundsException detail message. Of the many possible refactorings of the error handling code, this \"outlining\" performs best with both server and client VMs.", "id": "21071"}
{"code": "protected void notifySubscribers(Response data){\n  subject.onNext(data);\n}\n", "nl": "Notify the subscribers of the subject of data change", "id": "22273"}
{"code": "private String packagePrefix(String subpackage){\n  if (!Strings.isNullOrEmpty(subpackage)) {\n    return new StringBuilder(packagePrefix).append('.').append(subpackage).toString();\n  }\n  return packagePrefix;\n}\n", "nl": "Returns packagePrefix with subpackage appended if not empty.", "id": "49926"}
{"code": "public void flush() throws IOException {\n  if (prefix_ != -1)   bf_.writeBits(prefix_,numBits_);\n  bf_.writeBits(endOfInfo_,numBits_);\n  bf_.flush();\n}\n", "nl": "Indicate to compressor that no more data to go so write out any remaining buffered data.", "id": "22636"}
{"code": "public boolean isEqual(AttributeSet attr){\n  return attributes.isEqual(attr);\n}\n", "nl": "Checks whether two attribute sets are equal.", "id": "6593"}
{"code": "@Override public String toString(){\n  return \"Rectangle: \" + getWidth() + 'x'+ getHeight();\n}\n", "nl": "Gets the string representation of rectangle.", "id": "49165"}
{"code": "public static boolean isConfiguration(SchemaElement fileElement){\n  String fileName=getElementSchemaFile(fileElement);\n  if (fileName != null) {\n    return configurationSchemaFileNames.contains(fileName);\n  }\n  String xOrigin=getElementOrigin(fileElement);\n  return xOrigin != null && configurationSchemaOrigins.contains(xOrigin);\n}\n", "nl": "Returns whether the provided schema element is part of the configuration.", "id": "57717"}
{"code": "public static int sizeOfDouble(){\n  return 8;\n}\n", "nl": "Returns the size in bytes of a primitive double.", "id": "23369"}
{"code": "public static Cookie newCookie(String name,String value,String path){\n  return newCookie(name,value,defAge,path,null);\n}\n", "nl": "Constructs a cookie with a specified name and value and sets a path for the cookie to which the client should return the cookie.", "id": "5101"}
{"code": "private boolean addIndexEntry(ServiceType resourceType,String resourceName,String policyName) throws PolicyException {\n  ResourceIndex resourceIndex=(ResourceIndex)resourceIndices.get(resourceType.getName());\n  if (resourceIndex == null) {\n    resourceIndex=refreshResourceIndexFromDataStore(resourceType);\n  }\n  return resourceIndex.addIndexEntry(resourceName,policyName);\n}\n", "nl": "Adds a new index entry or updates an existing index entry", "id": "6169"}
{"code": "public int hashCode(){\n  return name.hashCode();\n}\n", "nl": "Returns a hash code for this <code>DataStorePrincipal</code>.", "id": "4377"}
{"code": "public CipherParameters generateDerivedParameters(int keySize){\n  keySize=keySize / 8;\n  byte[] dKey=generateDerivedKey(keySize);\n  return new KeyParameter(dKey,0,keySize);\n}\n", "nl": "Generate a key parameter derived from the password, salt, and iteration count we are currently initialised with.", "id": "43472"}
{"code": "public Builder removeSuperiorObjectClass(String objectClassNameOrOID){\n  this.superiorClasses.remove(objectClassNameOrOID);\n  return this;\n}\n", "nl": "Removes the provided superior object class.", "id": "25158"}
{"code": "public void endCompose(StylesheetRoot sroot) throws TransformerException {\n  int length=getParamElemCount();\n  for (int i=0; i < length; i++) {\n    ElemWithParam ewp=getParamElem(i);\n    ewp.endCompose(sroot);\n  }\n  super.endCompose(sroot);\n}\n", "nl": "This after the template's children have been composed.", "id": "52418"}
{"code": "public static Map<String,Object> params(String key1,Object value1,String key2,Object value2,String key3,Object value3){\n  return map(key1,value1,key2,value2,key3,value3);\n}\n", "nl": "Creates a Map&lt;String, Object&gt; map.", "id": "20645"}
{"code": "public int maxAgeSeconds(){\n  return maxAgeSeconds;\n}\n", "nl": "The duration past the response's served date that it can be served without validation.", "id": "32110"}
{"code": "public void updateBytesRead(int bytesRead){\n  this.bytesRead.getAndAdd(bytesRead);\n}\n", "nl": "Updates the appropriate set of counters to indicate that the specified number of bytes have been read by the client.", "id": "20262"}
{"code": "Method copy(){\n  if (this.root != null)   throw new IllegalArgumentException(\"Can not copy a non-root Method\");\n  Method res=new Method(clazz,name,parameterTypes,returnType,exceptionTypes,modifiers,slot,signature,annotations,parameterAnnotations,annotationDefault);\n  res.root=this;\n  res.methodAccessor=methodAccessor;\n  return res;\n}\n", "nl": "Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Method. The copy's \"root\" field points to this Method.", "id": "40744"}
{"code": "private boolean _isRunning(JComponent c){\n  return (c == component && timer != null && timer.isRunning());\n}\n", "nl": "Returns true if autoscrolling is currently running for the specified widget.", "id": "28905"}
{"code": "public static Files newInstance(int service){\n  Files fragment=new Files();\n  Bundle args=new Bundle();\n  args.putInt(ARG_SERVICE,service);\n  fragment.setArguments(args);\n  return fragment;\n}\n", "nl": "Use this factory method to create a new instance of this fragment using the provided parameters.", "id": "6304"}
{"code": "public synchronized int capacity(){\n  return elementData.length;\n}\n", "nl": "Returns the number of elements this vector can hold without growing.", "id": "5080"}
{"code": "public static void checkRethrow(final Throwable t){\n  if (t instanceof ThreadDeath) {\n    throw (ThreadDeath)t;\n  }\n  if (t instanceof VirtualMachineError) {\n    throw (VirtualMachineError)t;\n  }\n}\n", "nl": "Should the supplied Throwable be re-thrown (eg if it is an instance of one of the Throwables that should never be swallowed). Used by the pool error handling for operations that throw exceptions that normally need to be ignored.", "id": "48337"}
{"code": "boolean skipReplicationPortCheck(){\n  return skipPortCheckArg.isPresent();\n}\n", "nl": "Returns whether the user asked to skip the replication port checks (if the ports are free) or not.", "id": "5803"}
{"code": "public void clear(TrayPreference... modules){\n  for (  TrayPreference module : modules) {\n    if (module == null) {\n      continue;\n    }\n    module.clear();\n  }\n}\n", "nl": "clears the stated modules", "id": "15138"}
{"code": "public void validateToken(SSOToken token) throws SSOException {\n  try {\n    SSOTokenImpl tokenImpl=(SSOTokenImpl)token;\n    tokenImpl.validate();\n  }\n catch (  Exception e) {\n    if (debug.messageEnabled()) {\n      debug.message(\"validateToken: \",e);\n    }\n    throw new SSOException(SSOProviderBundle.rbName,\"invalidtoken\",null);\n  }\n}\n", "nl": "Checks if the single sign on token is valid.", "id": "46846"}
{"code": "@Override public List<Foo> findByField2(boolean field2){\n  return findByField2(field2,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);\n}\n", "nl": "Returns all the foos where field2 = &#63;.", "id": "50355"}
{"code": "public void destroyToken(SSOToken token) throws SSOException {\n  getProvider(token).destroyToken(token);\n}\n", "nl": "Destroys a single sign on token.", "id": "38278"}
{"code": "@Override public void show(final FragmentManager manager,final String tag){\n  delegate.show(manager,tag);\n}\n", "nl": "Display the dialog, adding the fragment to the given FragmentManager.  This is a convenience for explicitly creating a transaction, adding the fragment to it with the given tag, and committing it.  This does <em>not</em> add the transaction to the back stack.  When the fragment is dismissed, a new transaction will be executed to remove it from the activity.", "id": "46177"}
{"code": "public void paintProgressBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBorder(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the border of a progress bar.", "id": "15738"}
{"code": "@Override public void flush() throws IOException {\n  out.flush();\n}\n", "nl": "Flush the stream.", "id": "8084"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_nodelistreturnlastitem.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "43413"}
{"code": "public boolean isRunning(){\n  return DirectoryServer.isRunning();\n}\n", "nl": "Indicates whether this server is currently running.", "id": "38021"}
{"code": "@Override public void write(ASN1Writer stream) throws IOException {\n  stream.writeNull(OP_TYPE_UNBIND_REQUEST);\n}\n", "nl": "Writes this protocol op to an ASN.1 output stream.", "id": "9494"}
{"code": "private static int nextKeyIndex(int i,int len){\n  return (i + 2 < len ? i + 2 : 0);\n}\n", "nl": "Circularly traverses table of size len.", "id": "29488"}
{"code": "private void enqueue(E x){\n  items[putIndex]=x;\n  putIndex=inc(putIndex);\n  count++;\n  notEmpty.signal();\n}\n", "nl": "Inserts element at current put position, advances, and signals. Call only when holding lock.", "id": "22935"}
{"code": "@Override public void commence(HttpServletRequest request,HttpServletResponse response,AuthenticationException arg2) throws IOException, ServletException {\n  log.debug(\"Pre-authenticated entry point called. Rejecting access\");\n  response.sendError(HttpServletResponse.SC_UNAUTHORIZED,\"Access Denied\");\n}\n", "nl": "Always returns a 401 error code to the client.", "id": "8062"}
{"code": "public void printProfileData(){\n  System.out.println(\"Total Intervals:     \" + totalIntervals);\n  System.out.println(\"Total Duration:      \" + totalDuration);\n  System.out.println();\n  System.out.println();\n  for (  ProfileStackFrame frame : getRootFrames()) {\n    printFrame(frame,0);\n  }\n}\n", "nl": "Prints the profile information to standard output in a human-readable form.", "id": "35314"}
{"code": "public void handleButton2Request(RequestInvocationEvent event){\n  forwardTo();\n}\n", "nl": "Handles reset request.", "id": "24386"}
{"code": "public String typeName(){\n  return typeName;\n}\n", "nl": "Returns the fully qualified name of the unavailable type.", "id": "39897"}
{"code": "public ConfigException createDecodingExceptionAdaptor(ServerManagedObjectDecodingException e){\n  DN dn=e.getPartialManagedObject().getDN();\n  LocalizableMessage message=ERR_ADMIN_MANAGED_OBJECT_DECODING_PROBLEM.get(dn,stackTraceToSingleLineString(e,true));\n  return new ConfigException(message,e);\n}\n", "nl": "Create a configuration exception from a server managed object decoding exception.", "id": "15707"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(isSupported04.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "56386"}
{"code": "public boolean equals(Object obj){\n  if (obj == null)   return false;\n  if (!(obj instanceof ParsePosition))   return false;\n  ParsePosition other=(ParsePosition)obj;\n  return (index == other.index && errorIndex == other.errorIndex);\n}\n", "nl": "Overrides equals", "id": "28555"}
{"code": "private static void rdf_ParseTypeLiteralPropertyElement() throws XMPException {\n  throw new XMPException(\"ParseTypeLiteral property element not allowed\",BADXMP);\n}\n", "nl": "7.2.17 parseTypeLiteralPropertyElt start-element ( URI == propertyElementURIs, attributes == set ( idAttr?, parseLiteral ) ) literal end-element()", "id": "54230"}
{"code": "private SessionID generateSessionId(String domain) throws SessionException {\n  SessionID sid;\n  do {\n    sid=SessionID.generateSessionID(serverConfig,domain);\n  }\n while (sessionAccessManager.getInternalSession(sid) != null || sessionAccessManager.getInternalSessionByHandle(sid.toString()) != null);\n  return sid;\n}\n", "nl": "Generates new SessionID", "id": "56754"}
{"code": "private float caretToPointDistance(float[] caretInfo,float x,float y){\n  float lineDistance=isVerticalLine ? y : x;\n  float distanceOffBaseline=isVerticalLine ? -x : y;\n  return lineDistance - caretInfo[0] + (distanceOffBaseline * caretInfo[1]);\n}\n", "nl": "Returns the distance from the point (x,&nbsp;y) to the caret along the line direction defined in <code>caretInfo</code>.  Distance is negative if the point is to the left of the caret on a horizontal line, or above the caret on a vertical line. Utility for use by hitTestChar.", "id": "45070"}
{"code": "private void startProgressingAnimation(){\n  if (animationState == STATE_PROGRESSING || !isWindowFocused) {\n    return;\n  }\n  if (mProgressingController == null) {\n    initProgressingAnimationController();\n  }\n  if (mProgressingController.isRunning()) {\n    mProgressingController.end();\n    mProgressingController.cancel();\n  }\n  mProgressingController.start();\n}\n", "nl": "Start progressing animation separately.", "id": "21753"}
{"code": "public Period withDays(int days){\n  if (days == this.days) {\n    return this;\n  }\n  return create(years,months,days);\n}\n", "nl": "Returns a copy of this period with the specified amount of days. <p> This sets the amount of the days unit in a copy of this period. The years and months units are unaffected. <p> This instance is immutable and unaffected by this method call.", "id": "15146"}
{"code": "public void execute(TransformerImpl transformer) throws TransformerException {\n  String data=transformer.transformToString(this);\n  transformer.getMsgMgr().message(this,data,m_terminate);\n  if (m_terminate)   transformer.getErrorListener().fatalError(new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_STYLESHEET_DIRECTED_TERMINATION,null)));\n}\n", "nl": "Send a message to diagnostics. The xsl:message instruction sends a message in a way that is dependent on the XSLT transformer. The content of the xsl:message instruction is a template. The xsl:message is instantiated by instantiating the content to create an XML fragment. This XML fragment is the content of the message.", "id": "778"}
{"code": "private static boolean isNullOrEmpty(final String s){\n  return s == null || s.isEmpty();\n}\n", "nl": "Returns true if the String to test is null nor empty.", "id": "54975"}
{"code": "public boolean hasPort(){\n  return port != -1;\n}\n", "nl": "Returns boolean value indicating if Header has port", "id": "38637"}
{"code": "public static GenericBindRequest newGenericBindRequest(final String name,final byte authenticationType,final byte[] authenticationValue){\n  Reject.ifNull(name,authenticationValue);\n  return new GenericBindRequestImpl(name,authenticationType,authenticationValue);\n}\n", "nl": "Creates a new generic bind request using the provided name, authentication type, and authentication information. <p> The LDAP protocol defines the Bind name to be a distinguished name, however some LDAP implementations have relaxed this constraint and allow other identities to be used, such as the user's email address.", "id": "50132"}
{"code": "public Builder requiredAttributes(final String... nameOrOIDs){\n  return requiredAttributes(Arrays.asList(nameOrOIDs));\n}\n", "nl": "Adds the provided required attributes.", "id": "16456"}
{"code": "public int size(){\n  return collections.size();\n}\n", "nl": "Returns number of entries in collection.", "id": "33176"}
{"code": "public boolean isEmpty(){\n  return size() == 0;\n}\n", "nl": "Returns <tt>true</tt> if this map contains no key-value mappings. This result is a snapshot, and may not reflect unprocessed entries that will be removed before next attempted access because they are no longer referenced.", "id": "10269"}
{"code": "public static NSObject parse(byte[] bytes) throws ParseException {\n  ASCIIPropertyListParser parser=new ASCIIPropertyListParser(bytes);\n  return parser.parse();\n}\n", "nl": "Parses an ASCII property list from a byte array.", "id": "42259"}
{"code": "@Override public void dump(final String prefix,final FileDescriptor fd,final PrintWriter writer,final String[] args){\n  super.dump(prefix,fd,writer,args);\n}\n", "nl": "Print the Activity's state into the given stream.  This gets invoked if you run \"adb shell dumpsys activity <activity_component_name>\".", "id": "11883"}
{"code": "public void applyModification(Modification mod) throws DirectoryException {\n  applyModification(mod,false);\n}\n", "nl": "Applies the provided modification to this entry.  No schema checking will be performed.", "id": "41486"}
{"code": "@Override public void flush(){\n  flush(false);\n}\n", "nl": "Flushes page and it's content stream. <br> <br> If the page belongs to the document which is tagged, page flushing also triggers flushing of the tags, which are considered to belong to the page. The logic that defines if the given tag (structure element) belongs to the page is the following: if all the marked content references (dictionary or number references), that are the descenders of the given structure element, belong to the current page - the tag is considered to belong to the page. If tag has descenders from several pages - it is flushed, if all other pages except the current one are flushed.", "id": "28107"}
{"code": "@AfterClass public void entryCacheTestFini() throws Exception {\n  super.cache.finalizeEntryCache();\n}\n", "nl": "Finalize the entry cache test.", "id": "13812"}
{"code": "public double toDouble(){\n  try {\n    return Double.valueOf(m_str).doubleValue();\n  }\n catch (  NumberFormatException nfe) {\n    return Double.NaN;\n  }\n}\n", "nl": "Convert a string to a double -- Allowed input is in fixed notation ddd.fff.", "id": "58789"}
{"code": "public Area createTransformedArea(AffineTransform t){\n  Area a=new Area(this);\n  a.transform(t);\n  return a;\n}\n", "nl": "Creates a new <code>Area</code> object that contains the same geometry as this <code>Area</code> transformed by the specified <code>AffineTransform</code>.  This <code>Area</code> object is unchanged.", "id": "48955"}
{"code": "public Marker pop(){\n  try {\n    int idx=(trail.size() - 2);\n    return (idx < 0) ? backTo(0) : backTo(idx);\n  }\n catch (  AMConsoleException e) {\n    return null;\n  }\n}\n", "nl": "Pops the last item in the list.", "id": "124"}
{"code": "@DataProvider(name=\"passwordExpiringControlData\") public Object[][] createPasswordExpiringControlData(){\n  return new Object[][]{{true,1},{false,2}};\n}\n", "nl": "Create values for PasswordControl.", "id": "12293"}
{"code": "public static String readStream(InputStream is) throws IOException {\n  return readStream(is,DEFAULT_ENCODING);\n}\n", "nl": "Reads the InputStream and tries to interpret its content as String using UTF-8 encoding.", "id": "20200"}
{"code": "public static StringArgument trustStorePasswordArgument() throws ArgumentException {\n  return StringArgument.builder(OPTION_LONG_TRUSTSTORE_PWD).shortIdentifier(OPTION_SHORT_TRUSTSTORE_PWD).description(INFO_DESCRIPTION_TRUSTSTOREPASSWORD.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_PLACEHOLDER.get()).buildArgument();\n}\n", "nl": "Returns the \"truststorepw\" string argument.", "id": "15879"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n}\n", "nl": "Ensures that the Directory Server is running.", "id": "31901"}
{"code": "public String readNString() throws SQLException {\n  return (String)getNextAttribute();\n}\n", "nl": "Reads the next attribute in the stream and returns it as a <code>String</code> in the Java programming language. It is intended for use when accessing  <code>NCHAR</code>,<code>NVARCHAR</code> and <code>LONGNVARCHAR</code> columns.", "id": "24565"}
{"code": "public final MappedByteBuffer force(){\n  checkIsMapped();\n  if (mapMode == MapMode.READ_WRITE) {\n    try {\n      Libcore.os.msync(block.toLong(),block.getSize(),MS_SYNC);\n    }\n catch (    ErrnoException errnoException) {\n      throw new AssertionError(errnoException);\n    }\n  }\n  return this;\n}\n", "nl": "Flushes changes made to the in-memory buffer back to the mapped file. Unless you call this, changes may not be written back until the finalizer runs. This method waits for the write to complete before returning.", "id": "16054"}
{"code": "@Override public WidgetsModel clone(){\n  return new WidgetsModel(this);\n}\n", "nl": "Create a snapshot of the widgets model. <p> Usage case: view binding without being modified from package updates.", "id": "8214"}
{"code": "private void registerAuth(ConnectionWrapper conn){\n  LDAPURL url=makeLDAPUrl(conn);\n  try {\n    registerAuth(url,conn.getBindDn(),conn.getBindPassword(),false);\n  }\n catch (  LdapException x) {\n    throw new RuntimeException(\"Bug\");\n  }\n}\n", "nl": "Register authentication data from an existing connection. This routine recreates the LDAP URL corresponding to the connection and passes it to registerAuth(LDAPURL).", "id": "45845"}
{"code": "public SetupParameters ldifFile(String ldif){\n  this.ldifFiles.add(ldif);\n  return this;\n}\n", "nl": "Add an ldif file to import after setup.", "id": "28354"}
{"code": "public boolean continueOnError(){\n  return continueOnError;\n}\n", "nl": "Return the continueOnError flag value.", "id": "35652"}
{"code": "Shape adjustPaintRegion(Shape a){\n  return adjustAllocation(a);\n}\n", "nl": "Adjusts <code>a</code> based on the visible region and returns it.", "id": "26413"}
{"code": "public static boolean isByte(String desc){\n  return desc.endsWith(\"B\");\n}\n", "nl": "Tells whether a given type is a byte", "id": "50916"}
{"code": "public static String encryptLocal(String clearText){\n  return encode(clearText,localEncryptor);\n}\n", "nl": "<p> Encrypt a String using the client's encryption key </p>", "id": "36670"}
{"code": "public static ComponentUI createUI(JComponent a){\n  ComponentUI mui=new MultiInternalFrameUI();\n  return MultiLookAndFeel.createUIs(mui,((MultiInternalFrameUI)mui).uis,a);\n}\n", "nl": "Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI.  Otherwise, just returns the UI object obtained from the default <code>LookAndFeel</code>.", "id": "37186"}
{"code": "public synchronized int size(){\n  return count;\n}\n", "nl": "Return the current size of the byte array.", "id": "54169"}
{"code": "public void addReferralPrivilege(ReferralPrivilege referralPrivilege){\n  referralPrivileges.add(referralPrivilege);\n}\n", "nl": "Adds referralPrivilege to this set.", "id": "34021"}
{"code": "public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {\n  String str=str();\n  ch.characters(str.toCharArray(),0,str.length());\n}\n", "nl": "Directly call the characters method on the passed ContentHandler for the string-value. Multiple calls to the ContentHandler's characters methods may well occur for a single call to this method.", "id": "649"}
{"code": "@NonNull public static Interpolator anticipate(){\n  return new AnticipateInterpolator();\n}\n", "nl": "<strong>ANDROID INTERPOLATOR</strong><br/><br/> An interpolator where the change starts backward then flings forward.", "id": "18401"}
{"code": "public final int ordinal(){\n  return ordinal;\n}\n", "nl": "Returns the position of the enum constant in the declaration. The first constant has an ordinal value of zero.", "id": "11685"}
{"code": "public boolean isPaused(){\n  return paused;\n}\n", "nl": "Returns true if the Job is in the \"paused\" state, false otherwise", "id": "31706"}
{"code": "public void addAll(Collection<T> newData){\n  data.addAll(newData);\n}\n", "nl": "Adds all the elements in the collection to the list model.", "id": "15576"}
{"code": "public static ImageTypeSpecifier createGrayscale(int bits,int dataType,boolean isSigned){\n  return new ImageTypeSpecifier.Grayscale(bits,dataType,isSigned,false,false);\n}\n", "nl": "Returns a specifier for a grayscale image format that will pack pixels of the given bit depth into array elements of the specified data type.", "id": "52758"}
{"code": "void parseParameters(){\n  if (parsedParams) {\n    return;\n  }\n  parameters=new ParameterMap<>();\n  parameters.putAll(getRequest().getParameterMap());\n  mergeParameters();\n  ((ParameterMap<String,String[]>)parameters).setLocked(true);\n  parsedParams=true;\n}\n", "nl": "Parses the parameters of this request. If parameters are present in both the query string and the request content, they are merged.", "id": "23224"}
{"code": "protected void clearAllTrails(SSOTokenID tokenID){\n  boolean removed=false;\n  String key=tokenID.toString();\nsynchronized (mapTokenIDs) {\n    removed=(mapTokenIDs.remove(key) != null);\n  }\n}\n", "nl": "Clears all registered page trails of a given single sign on token ID", "id": "15120"}
{"code": "public void checkAccess() throws SecurityException {\n  checkPermission();\n}\n", "nl": "Check that the current context is trusted to modify the logging configuration.  This requires LoggingPermission(\"control\"). <p> If the check fails we throw a SecurityException, otherwise we return normally.", "id": "21302"}
{"code": "protected void engineUpdate(byte input){\n  oneByte[0]=input;\n  SHA1Impl.updateHash(buffer,oneByte,0,0);\n  messageLength++;\n}\n", "nl": "Supplements a byte to current message. <BR> The method overrides \"engineUpdate(byte)\" in class MessageDigestSpi. <BR>", "id": "47325"}
{"code": "@Override public synchronized void reset() throws IOException {\n  if (buf == null) {\n    throw new IOException(\"Stream is closed\");\n  }\n  if (-1 == markpos) {\n    throw new IOException(\"Mark has been invalidated.\");\n  }\n  pos=markpos;\n}\n", "nl": "Resets this stream to the last marked location.", "id": "18050"}
{"code": "private String stringRep(String s,int n){\n  StringBuilder sb=new StringBuilder(s.length() * n);\n  for (int i=0; i < n; i++) {\n    sb.append(s);\n  }\n  return sb.toString();\n}\n", "nl": "Repeats string `s` `n` times.", "id": "21846"}
{"code": "public AMGroup createAssignableDynamicGroup(String name,Map attributes,Map serviceNameAndAttrs) throws AMException, SSOException {\n  return createGroup(name,attributes,serviceNameAndAttrs,AMObject.ASSIGNABLE_DYNAMIC_GROUP);\n}\n", "nl": "Creates assignable dynamic group. Takes serviceNameAndAttr map so that services can be assigned to the group which is just created.", "id": "27291"}
{"code": "public void close() throws IOException {\n  if (!closed) {\n    super.close();\n    closed=true;\n  }\n}\n", "nl": "Closes this input stream and releases any system resources associated with the stream.", "id": "35868"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.WssSamlV20Token11Element createWssSamlV20Token11Element() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssSamlV20Token11ElementImpl();\n}\n", "nl": "Create an instance of WssSamlV20Token11Element", "id": "3161"}
{"code": "@Override public void commit(int aggregationWindow,String ruleActionId) throws IOException {\n  flush();\n}\n", "nl": "Emit the aggregates for a given ruleActionId and reset the counters for it", "id": "47193"}
{"code": "public boolean isRoot(){\n  return true;\n}\n", "nl": "Tell if this is the root of the stylesheet tree.", "id": "7190"}
{"code": "public void slashSlashComments(boolean flag){\n  slashSlashComments=flag;\n}\n", "nl": "Specifies whether \"slash-slash\" (C++-style) comments shall be recognized. This kind of comment ends at the end of the line.", "id": "5038"}
{"code": "public void close() throws IOException {\n  byte[] buffer;\n  while ((buffer=buf) != null) {\n    if (bufUpdater.compareAndSet(this,buffer,null)) {\n      InputStream input=in;\n      in=null;\n      if (input != null)       input.close();\n      return;\n    }\n  }\n}\n", "nl": "Closes this input stream and releases any system resources associated with the stream. Once the stream has been closed, further read(), available(), reset(), or skip() invocations will throw an IOException. Closing a previously closed stream has no effect.", "id": "34127"}
{"code": "public AnnotationVisitor visitAnnotation(String name,String desc){\n  if (av != null) {\n    return av.visitAnnotation(name,desc);\n  }\n  return null;\n}\n", "nl": "Visits a nested annotation value of the annotation.", "id": "14704"}
{"code": "@Override public void processResults(T result){\n  store.addTokenOperation(null,operation,true);\n  handler.processResults(result);\n}\n", "nl": "Logs the option then delegates to the wrapped implementation.", "id": "3055"}
{"code": "private static int totalSeconds(int hours,int minutes,int seconds){\n  return hours * SECONDS_PER_HOUR + minutes * SECONDS_PER_MINUTE + seconds;\n}\n", "nl": "Calculates the total offset in seconds.", "id": "2338"}
{"code": "@Override public boolean isShow(HttpServletRequest request) throws PortalException {\n  return true;\n}\n", "nl": "Returns <code>true</code> if the Control Menu entry is visible in the Control Menu.", "id": "16037"}
{"code": "public static SessionResponse parseXML(String xml) throws SessionException {\n  SessionResponseParser parser=new SessionResponseParser(xml);\n  return parser.parseXML();\n}\n", "nl": "This method is used primarily at the client side to reconstruct a <code>SessionResponse</code> object based on the XML document received from server. The DTD of this XML document is described above.", "id": "14541"}
{"code": "public static FontProgram createType1Font(byte[] afm,byte[] pfb,boolean cached) throws java.io.IOException {\n  return createType1Font(null,null,afm,pfb,cached);\n}\n", "nl": "Creates a new Type 1 font by the byte contents of the corresponding AFM/PFM and PFB files", "id": "23038"}
{"code": "public Set searchUsers(String wildcard,Map avPairs,int level) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(USER),getSearchFilter(AMObject.USER),wildcard,avPairs,level);\n}\n", "nl": "Searches for users in this group using wildcards and attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be specifed so that DNs of users with matching attribute-value pairs will be returned.", "id": "27645"}
{"code": "public int countPredicates(int opPos) throws TransformerException {\n  int count=0;\n  while (OpCodes.OP_PREDICATE == getOp(opPos)) {\n    count++;\n    opPos=getNextOpPos(opPos);\n  }\n  return count;\n}\n", "nl": "Count the number of predicates in the step.", "id": "36097"}
{"code": "public int addNodeInDocOrder(int node,XPathContext support){\n  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));\n  return addNodeInDocOrder(node,true,support);\n}\n", "nl": "Add the node into a vector of nodes where it should occur in document order.", "id": "49427"}
{"code": "public ClusterListener[] findClusterListeners(){\n  if (clusterListeners.size() > 0) {\n    ClusterListener[] listener=new ClusterListener[clusterListeners.size()];\n    clusterListeners.toArray(listener);\n    return listener;\n  }\n else   return new ClusterListener[0];\n}\n", "nl": "Get the cluster listeners associated with this cluster. If this Array has no listeners registered, a zero-length array is returned.", "id": "189"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.LengthElement createLengthElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.LengthElementImpl();\n}\n", "nl": "Create an instance of LengthElement", "id": "8882"}
{"code": "public boolean isCertification(){\n  return certification;\n}\n", "nl": "Getter to find out if the signature is a certification signature.", "id": "24048"}
{"code": "protected void onRead(ByteBuffer buf){\n}\n", "nl": "Read event handler.", "id": "23907"}
{"code": "public String encodeBody(){\n  return encodeBody(new StringBuilder()).toString();\n}\n", "nl": "Encode into canonical form.", "id": "50102"}
{"code": "private Context buildContextStructure(final Realm realm){\n  return ClientContext.newInternalClientContext(new RealmContext(subjectContext,realm));\n}\n", "nl": "Creates a server context hierarchy based on the passed realm.", "id": "50048"}
{"code": "public Process executeAsync(final CommandLine command,final Map<String,String> environment,final ExecuteResultHandler handler) throws IOException {\n  if (workingDirectory != null && !workingDirectory.exists()) {\n    throw new IOException(workingDirectory + \" doesn't exist.\");\n  }\n  return executeInternal(command,environment,workingDirectory,streamHandler,handler);\n}\n", "nl": "Methods for starting asynchronous execution. The child process inherits all environment variables of the parent process. Result provided to callback handler.", "id": "42003"}
{"code": "public SwitchFilter addResponseCase(final Expression<Boolean> condition,final Handler handler){\n  responseCases.add(new Case(condition,handler));\n  return this;\n}\n", "nl": "Add a response switch case with a condition and the handler to execute if condition yields.", "id": "13842"}
{"code": "public static void createTable(SQLiteDatabase db,boolean ifNotExists){\n  String constraint=ifNotExists ? \"IF NOT EXISTS \" : \"\";\n  db.execSQL(\"CREATE TABLE \" + constraint + \"\\\"SAVED_TOP_STORY\\\" (\"+ \"\\\"_id\\\" INTEGER PRIMARY KEY ,\"+ \"\\\"IMAGE\\\" TEXT,\"+ \"\\\"TITLE\\\" TEXT);\");\n}\n", "nl": "Creates the underlying database table.", "id": "14069"}
{"code": "public boolean contains(int x,int y){\n  return contains((double)x,(double)y);\n}\n", "nl": "Determines whether the specified coordinates are inside this <code>Polygon</code>. <p>", "id": "50516"}
{"code": "@Override public com.liferay.blade.samples.servicebuilder.model.Foo updateFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){\n  return _fooLocalService.updateFoo(foo);\n}\n", "nl": "Updates the foo in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.", "id": "57415"}
{"code": "private static boolean isPowerOfTwo(int value){\n  return (value & (value - 1)) == 0;\n}\n", "nl": "Not every even number is a power of two.", "id": "12782"}
{"code": "@SuppressWarnings(\"unused\") public void openFileChooser(ValueCallback<Uri> uploadMsg,String acceptType,String capture){\n  openFileChooser(uploadMsg,acceptType);\n}\n", "nl": "may not work on KitKat due to lack of implementation of openFileChooser() or onShowFileChooser() https://code.google.com/p/android/issues/detail?id=62220 however newer versions of KitKat fixed it on some devices", "id": "46238"}
{"code": "public static void logModifyRequest(ModifyOperation modifyOperation){\n  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {\n    publisher.logModifyRequest(modifyOperation);\n  }\n}\n", "nl": "Writes a message to the access logger with information about the modify request associated with the provided modify operation.", "id": "49604"}
{"code": "@SuppressWarnings(\"deprecation\") public void hide(){\n  Component component=getComponent();\n  if (component instanceof JWindow) {\n    component.hide();\n    ((JWindow)component).getContentPane().removeAll();\n  }\n  dispose();\n}\n", "nl": "Hides and disposes of the <code>Popup</code>. Once a <code>Popup</code> has been disposed you should no longer invoke methods on it. A <code>dispose</code>d <code>Popup</code> may be reclaimed and later used based on the <code>PopupFactory</code>. As such, if you invoke methods on a <code>disposed</code> <code>Popup</code>, indeterminate behavior will result.", "id": "487"}
{"code": "public String toString(){\n  return this.encode();\n}\n", "nl": "Alias for the encode function above.", "id": "47757"}
{"code": "public static byte[] toBytes(boolean bool,byte[] data,int offset){\n  data[offset]=(byte)(bool ? 1 : 0);\n  return data;\n}\n", "nl": "Converts a boolean and put it in a byte array.", "id": "48980"}
{"code": "public void cancelExistingAnimation(@NonNull final View view){\n  int hashCode=view.hashCode();\n  Animator animator=mAnimators.get(hashCode);\n  if (animator != null) {\n    animator.end();\n    mAnimators.remove(hashCode);\n  }\n}\n", "nl": "Cancels any existing animations for given View.", "id": "26116"}
{"code": "private void copyFrom(final Tag source){\n  final Iterator<TagField> fieldIterator=source.getFields();\n  while (fieldIterator.hasNext()) {\n    final TagField copy=copyFrom(fieldIterator.next());\n    if (copy != null) {\n      super.addField(copy);\n    }\n  }\n}\n", "nl": "This method copies tag fields from the source.<br>", "id": "49586"}
{"code": "@Override public void storeChildren(PrintWriter aWriter,int indent,Object aInterceptor,StoreDescription parentDesc) throws Exception {\n  if (aInterceptor instanceof StaticMembershipInterceptor) {\n    ChannelInterceptor interceptor=(ChannelInterceptor)aInterceptor;\n    storeElementArray(aWriter,indent + 2,interceptor.getMembers());\n  }\n}\n", "nl": "Store the specified Interceptor child.", "id": "10162"}
{"code": "public void endPrefixMapping(String prefix) throws SAXException {\n  if (DEBUG)   System.out.println(\"TransformerHandlerImpl#endPrefixMapping: \" + prefix);\n  if (m_contentHandler != null) {\n    m_contentHandler.endPrefixMapping(prefix);\n  }\n}\n", "nl": "Filter an end Namespace prefix mapping event.", "id": "19311"}
{"code": "public boolean remove(BrdViaInfo p_via_info){\n  return vinfo_list.remove(p_via_info);\n}\n", "nl": "Removes p_via_info from this list. Returns false, if p_via_info was not contained in the list.", "id": "20484"}
{"code": "public String encode(){\n  return headerName + COLON + SP+ encodeBody(new StringBuilder()).toString()+ NEWLINE;\n}\n", "nl": "Encode the header into a String.", "id": "27937"}
{"code": "public void handleBtnGroupSearchRequest(RequestInvocationEvent event){\n  forwardTo();\n}\n", "nl": "Handles search request.", "id": "42627"}
{"code": "public void erasePurchase(String sku){\n  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);\n}\n", "nl": "Erase a purchase (locally) from the inventory, given its product ID. This just modifies the Inventory object locally and has no effect on the server! This is useful when you have an existing Inventory object which you know to be up to date, and you have just consumed an item successfully, which means that erasing its purchase data from the Inventory you already have is quicker than querying for a new Inventory.", "id": "7727"}
{"code": "public void add(Permission permission){\n  if (!(permission instanceof ServicePermission))   throw new IllegalArgumentException(\"invalid permission: \" + permission);\n  if (isReadOnly())   throw new SecurityException(\"attempt to add a Permission to a readonly PermissionCollection\");\nsynchronized (this) {\n    perms.add(0,permission);\n  }\n}\n", "nl": "Adds a permission to the ServicePermissions. The key for the hash is the name.", "id": "44319"}
{"code": "protected void invalidate(boolean first){\n  super.invalidate(first);\n  getParent().invalidate(true);\n}\n", "nl": "Overriden to invalidate the TableRowElementInfo as well as the TableCellElementInfo.", "id": "97"}
{"code": "OperationStore createOperationStore(){\n  return new OperationStore();\n}\n", "nl": "Returns a new instance of the OperationStore.", "id": "42491"}
{"code": "public static boolean isUrl(String url){\n  Pattern pattern=Pattern.compile(\"^([hH][tT]{2}[pP]://|[hH][tT]{2}[pP][sS]://)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\\\\/])+$\");\n  return pattern.matcher(url).matches();\n}\n", "nl": "is url", "id": "24537"}
{"code": "static XMLReader createParser(){\n  try {\n    SAXParserFactory factory=SAXParserFactory.newInstance();\n    factory.setNamespaceAware(true);\n    factory.setValidating(false);\n    factory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\",false);\n    return factory.newSAXParser().getXMLReader();\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Couldn't create XMLReader: \" + e.getMessage());\n  }\n}\n", "nl": "Creates a SAX parser using JAXP", "id": "58190"}
{"code": "public boolean removeElement(Object key){\n  return false;\n}\n", "nl": "Not implemented in this monitor. Always returns false.", "id": "44398"}
{"code": "public int read() throws IOException {\n  int len=read(rbuf,0,1);\n  if (len <= 0)   return -1;\n  return (rbuf[0] & 0xFF);\n}\n", "nl": "Reads a single byte of compressed data from the input stream. This method will block until some input can be read and compressed.", "id": "16522"}
{"code": "public ECPRequest createECPRequest(Element value) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ECP_REQUEST,value);\n  if (obj == null) {\n    return new ECPRequestImpl(value);\n  }\n else {\n    return (ECPRequest)obj;\n  }\n}\n", "nl": "Returns the <code>ECPRequest</code> Object.", "id": "18832"}
{"code": "public boolean canStripWhiteSpace(){\n  return (null != m_whiteSpaceInfoList);\n}\n", "nl": "Get information about whether or not whitespace can be stripped.", "id": "51154"}
{"code": "public boolean doAccessibleAction(int i){\n  if (i == 0) {\n    doClick();\n    return true;\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Perform the specified Action on the object", "id": "56828"}
{"code": "public static com.liferay.blade.samples.servicebuilder.model.Foo fetchFooByUuidAndGroupId(java.lang.String uuid,long groupId){\n  return getService().fetchFooByUuidAndGroupId(uuid,groupId);\n}\n", "nl": "Returns the foo matching the UUID and group.", "id": "52895"}
{"code": "public boolean hasTransport(){\n  return hasParameter(TRANSPORT);\n}\n", "nl": "Return true if the transport parameter is defined.", "id": "53089"}
{"code": "public void assertBuildCompletedSuccessfully() throws Exception {\n  assertBuildCompletedSuccessfully(b);\n}\n", "nl": "Verifies that 'b' has completed successfully.", "id": "54200"}
{"code": "public String encodeBody(){\n  return encodeBody(new StringBuilder()).toString();\n}\n", "nl": "Encode into a string.", "id": "12810"}
{"code": "public boolean isLockout(){\n  return locked;\n}\n", "nl": "Returns true if user was locked out", "id": "44779"}
{"code": "public static Optional<String> head(final String value){\n  return first(value,1);\n}\n", "nl": "Return the first char of String", "id": "29784"}
{"code": "public void runTest() throws Throwable {\n  Document doc;\n  DocumentFragment documentFragmentNode;\n  int nodeType;\n  doc=(Document)load(\"staff\",true);\n  documentFragmentNode=doc.createDocumentFragment();\n  nodeType=(int)documentFragmentNode.getNodeType();\n  assertEquals(\"nodeDocumentFragmentNodeTypeAssert1\",11,nodeType);\n}\n", "nl": "Runs the test case.", "id": "58485"}
{"code": "public boolean isCaseSensitive(){\n  return sensitive;\n}\n", "nl": "Does the object represent case sensitive comparison.", "id": "58034"}
{"code": "public static void stop(JComponent c){\n  sharedInstance._stop(c);\n}\n", "nl": "Stops autoscroll events from happening on the specified component.", "id": "48891"}
{"code": "public void paint(Graphics a,JComponent b){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).paint(a,b);\n  }\n}\n", "nl": "Invokes the <code>paint</code> method on each UI handled by this object.", "id": "29221"}
{"code": "@Override public void addValve(Valve valve){\n  if (valve instanceof ClusterValve && (!valves.contains(valve)))   valves.add(valve);\n}\n", "nl": "Add cluster valve Cluster Valves are only add to container when cluster is started!", "id": "39317"}
{"code": "public String linkForMessage(ProtoElement element){\n  if (isExternalFile(element.getFile())) {\n    String fullName=element.getFullName();\n    return String.format(\"[%s]{@link external:\\\"%s\\\"}\",fullName,fullName);\n  }\n else {\n    String simpleName=element.getSimpleName();\n    return String.format(\"[%s]{@link %s}\",simpleName,simpleName);\n  }\n}\n", "nl": "Returns the JSDoc format of link to the element.", "id": "22631"}
{"code": "public void startRefresh(BrowserNodeInfo nodeInfo){\n  BasicNode node=nodeInfo != null ? nodeInfo.getNode() : rootNode;\n  stopRefreshNode(node);\n  startRefreshNode(node,null,true);\n}\n", "nl": "Start a refresh from the specified node. If some refresh are on-going on descendant nodes, they are stopped. If nodeInfo is null, refresh is started from the root.", "id": "12027"}
{"code": "public static <T>T orderWrites(T ref){\n  theVolatile=0;\n  return ref;\n}\n", "nl": "Informally: Ensures that a use of the given reference with the effect of reading or writing a field (or if an array, element) of the referenced object, prior to the invocation of this method occur before a subsequent write of the reference. For details, see the class documentation for this class.", "id": "39913"}
{"code": "public synchronized Enumeration keys(){\n  return new Enumerator(KEYS,false);\n}\n", "nl": "Returns an enumeration of the keys in this Cache.", "id": "48793"}
{"code": "public com.sun.identity.saml2.jaxb.assertion.BaseIDElement createBaseIDElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.assertion.impl.BaseIDElementImpl();\n}\n", "nl": "Create an instance of BaseIDElement", "id": "31080"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.EntityDescriptorElement createEntityDescriptorElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.EntityDescriptorElementImpl();\n}\n", "nl": "Create an instance of EntityDescriptorElement", "id": "48737"}
{"code": "public static String fromByteArray(byte[] bytes){\n  return new String(asCharArray(bytes));\n}\n", "nl": "Convert an array of 8 bit characters into a string.", "id": "22689"}
{"code": "public static boolean isLECPProfile(HttpServletRequest request){\n  return FSServiceUtils.isLECPProfile(request);\n}\n", "nl": "Determines if a HTTP servlet request is Liberty-enabled client and  proxy profile.", "id": "5373"}
{"code": "public ChunkGenerator generator(){\n  return generator;\n}\n", "nl": "Gets the generator that will be used to create or load the world. <p> This may be null, in which case the \"natural\" generator for this environment will be used.", "id": "52484"}
{"code": "public static boolean isRestricted(SSOToken token) throws SSOException {\n  return token.getProperty(TOKEN_RESTRICTION_PROP) != null;\n}\n", "nl": "Returns true if the SSOToken is restricted, false otherwise", "id": "30470"}
{"code": "public Future<Job> complete(){\n  return this.setProgress(100).set(\"progress\",\"100\").compose(null);\n}\n", "nl": "Complete a job.", "id": "11118"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(attrspecifiedvalue.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "17836"}
{"code": "public static PlainSASLBindRequest newPlainSASLBindRequest(final String authenticationID,final char[] password){\n  return new PlainSASLBindRequestImpl(authenticationID,getBytes(password));\n}\n", "nl": "Creates a new Plain SASL bind request having the provided authentication ID and password, but no authorization ID.", "id": "30793"}
{"code": "public Map preProcessModify(SSOToken token,String entryDN,Map oldAttributes,Map newAttributes,int objectType) throws AMPreCallBackException {\n  return newAttributes;\n}\n", "nl": "Method which gets invoked before a modify operation is performed.", "id": "44075"}
{"code": "public void actionPerformed(ActionEvent e){\n  ((ActionListener)a).actionPerformed(e);\n  ((ActionListener)b).actionPerformed(e);\n}\n", "nl": "Handles the actionPerformed event by invoking the actionPerformed methods on listener-a and listener-b.", "id": "20540"}
{"code": "public JobService completeCount(String type,Handler<AsyncResult<Long>> handler){\n  delegate.completeCount(type,handler);\n  return this;\n}\n", "nl": "Get cardinality of completed jobs", "id": "52492"}
{"code": "public com.sun.identity.wsfederation.jaxb.xmlsig.RSAKeyValueElement createRSAKeyValueElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.RSAKeyValueElementImpl();\n}\n", "nl": "Create an instance of RSAKeyValueElement", "id": "53413"}
{"code": "public String toString(){\n  return (sun.security.util.ResourcesMgr.getString(\"LoginModuleControlFlag.\") + controlFlag);\n}\n", "nl": "Return a String representation of this controlFlag. <p> The String has the format, \"LoginModuleControlFlag: <i>flag</i>\", where <i>flag</i> is either <i>required</i>, <i>requisite</i>, <i>sufficient</i>, or <i>optional</i>.", "id": "12827"}
{"code": "public BuilderImages<T> size(Size size){\n  this.config.setSize(size);\n  return this;\n}\n", "nl": "Sets the size for the retrieved image.", "id": "13865"}
{"code": "public boolean isBool(STypeDef requiredType,LineCol lineCol) throws SyntaxException {\n  return (requiredType == null || requiredType instanceof BoolTypeDef || requiredType instanceof SClassDef && requiredType.isAssignableFrom(getTypeWithName(\"java.lang.Boolean\",lineCol)));\n}\n", "nl": "check whetehr the required type is bool type", "id": "11632"}
{"code": "public Object clone(){\n  try {\n    @SuppressWarnings(\"unchecked\") CopyOnWriteArrayList<E> clone=(CopyOnWriteArrayList<E>)super.clone();\n    clone.resetLock();\n    return clone;\n  }\n catch (  CloneNotSupportedException e) {\n    throw new InternalError();\n  }\n}\n", "nl": "Returns a shallow copy of this list.  (The elements themselves are not copied.)", "id": "10612"}
{"code": "@Override public void resetBuffer(){\n  try {\n    jspWriter.clearBuffer();\n  }\n catch (  IOException ioe) {\n  }\n}\n", "nl": "Clears the output buffer of the JspWriter associated with the including page.", "id": "25864"}
{"code": "public boolean remove(HDR obj){\n  if (hlist.size() == 0)   return false;\n else   return hlist.remove(obj);\n}\n", "nl": "Remove a sip header from this list of sip headers.", "id": "58154"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(attrparentnodenull.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "23965"}
{"code": "public void finishResponse() throws IOException {\n  if (responseFinished) {\n    return;\n  }\n  if (lastActiveFilter != -1) {\n    activeFilters[lastActiveFilter].end();\n  }\n  flushBuffer(true);\n  responseFinished=true;\n}\n", "nl": "Finish writing the response.", "id": "46571"}
{"code": "public boolean hasExtensions(){\n  return extensions != null;\n}\n", "nl": "Return whether or not the holder's certificate contains extensions.", "id": "37593"}
{"code": "public static void main(String[] args){\n  try {\n    SecurityOptionsDialog dlg=new SecurityOptionsDialog(new JFrame(),SecurityOptions.createNoCertificateOptions());\n    dlg.pack();\n    dlg.setVisible(true);\n  }\n catch (  Exception ex) {\n    ex.printStackTrace();\n  }\n}\n", "nl": "Method written for testing purposes.", "id": "45113"}
{"code": "@Override public void close() throws IOException {\n  eos=true;\n  super.close();\n}\n", "nl": "Closes this stream and any underlying streams.", "id": "31943"}
{"code": "public void pushSAXLocatorNull(){\n  m_saxLocations.push(null);\n}\n", "nl": "Push a slot on the locations stack so that setSAXLocator can be  repeatedly called.", "id": "23920"}
{"code": "public TagField createField(Artwork artwork) throws FieldDataInvalidException {\n  return new Mp4TagCoverField(artwork.getBinaryData());\n}\n", "nl": "Create artwork field", "id": "56960"}
{"code": "protected void parseDOMAttributes(Element element) throws SAML2Exception {\n  super.parseDOMAttributes(element);\n}\n", "nl": "Parses attributes of the Docuemnt Element for this object.", "id": "55220"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(characterdatareplacedataexceedslengthofdata.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "28"}
{"code": "public static String toKebabCase(final String value){\n  return toDecamelize(value,\"-\");\n}\n", "nl": "Transform to kebab-case.", "id": "52412"}
{"code": "public int hashCode(){\n  if (myhash == -1) {\n    myhash=timestamp.hashCode() + signerCertPath.hashCode();\n  }\n  return myhash;\n}\n", "nl": "Returns the hash code value for this timestamp. The hash code is generated using the date and time of the timestamp and the TSA's certificate path.", "id": "16774"}
{"code": "public synchronized void ensureCapacity(int minimumCapacity){\n  if (elementData.length < minimumCapacity) {\n    int next=(capacityIncrement <= 0 ? elementData.length : capacityIncrement) + elementData.length;\n    grow(minimumCapacity > next ? minimumCapacity : next);\n  }\n}\n", "nl": "Ensures that this vector can hold the specified number of elements without growing.", "id": "28089"}
{"code": "public boolean match(Object other){\n  if (other instanceof ContentLength)   return true;\n else   return false;\n}\n", "nl": "Pattern matcher ignores content length.", "id": "37123"}
{"code": "public String toString(){\n  return getClass().getName() + \"[field=\" + field+ \",attribute=\"+ attribute+ \",beginIndex=\"+ beginIndex+ \",endIndex=\"+ endIndex+ ']';\n}\n", "nl": "Return a string representation of this FieldPosition.", "id": "6221"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.QNameAssertionType createQNameAssertionType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.QNameAssertionTypeImpl();\n}\n", "nl": "Create an instance of QNameAssertionType", "id": "3904"}
{"code": "@Override public void memberDisappeared(Member member){\n  table.dataModel.getValueAt(-1,-1);\n}\n", "nl": "Invoked when a member leaves the group", "id": "2299"}
{"code": "public boolean equals(Object o){\n  if (o instanceof LDAPRoles) {\n    LDAPRoles roles=(LDAPRoles)o;\n    if ((selectedRoleDNs != null) && (roles.selectedRoleDNs != null) && (selectedRoleDNs.equals(roles.selectedRoleDNs))) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Indicates whether some other object is \"equal to\" this one.", "id": "58618"}
{"code": "public boolean isRedirectionDone(){\n  return redirectionDone;\n}\n", "nl": "Returns true if the response has been redirected already to another URL, returns false otherwise.", "id": "24961"}
{"code": "public void disableVertexAttribute(String name){\n  int location=fetchAttributeLocation(name);\n  if (location == -1)   return;\n  GLES20.glDisableVertexAttribArray(location);\n}\n", "nl": "Disables the vertex attribute with the given name", "id": "28952"}
{"code": "public static int registerDirectory(String dirPath){\n  return FontProgramFactory.registerFontDirectory(dirPath);\n}\n", "nl": "Registers all the fonts in a directory.", "id": "31045"}
{"code": "public synchronized void addHyperlinkListener(HyperlinkListener listener){\n  listenerList.add(HyperlinkListener.class,listener);\n}\n", "nl": "Adds a hyperlink listener for notification of any changes, for example when a link is selected and entered.", "id": "35250"}
{"code": "@Override public synchronized void reset() throws IOException {\n  in.reset();\n  pos=mark;\n}\n", "nl": "Invokes the delegate's <code>reset()</code> method.", "id": "44031"}
{"code": "public void handleCloseError(Throwable ex){\n  System.err.println(ERR_LOGGER_ERROR_CLOSING_FILE.get(publisherConfigDN,stackTraceToSingleLineString(ex)));\n}\n", "nl": "Handle an exception which occurred while trying to close a log file.", "id": "12957"}
{"code": "public String objectTypeName(Field field){\n  return objectTypeName(field.getTypeUrl());\n}\n", "nl": "Returns a name for an object field's type. <p>May be overridden by individual language contexts.", "id": "27927"}
{"code": "public void append(String s){\n  templateValue.append(s);\n}\n", "nl": "Appends the provided string to this template value.", "id": "8400"}
{"code": "@Override public Promise<ActionResponse,ResourceException> actionCollection(Context context,ActionRequest request){\n  return RestUtils.generateUnsupportedOperation();\n}\n", "nl": "Not Supported Action Collection Operation.", "id": "64"}
{"code": "public boolean empty(){\n  return m_firstFree == 0;\n}\n", "nl": "Tests if this stack is empty.", "id": "36152"}
{"code": "public PlaLineInt plaline_first(){\n  return plaline(0);\n}\n", "nl": "this would be the \"starting line", "id": "18271"}
{"code": "protected void addDependenciesInCustomRequestScope(R requestContext){\n  addRequestContextInCustomRequestScope(requestContext);\n}\n", "nl": "Add dependencies to the custom request scope", "id": "16303"}
{"code": "public void insertSeparator(int index){\n  if (index < 0) {\n    throw new IllegalArgumentException(\"index less than zero.\");\n  }\n  ensurePopupMenuCreated();\n  popupMenu.insert(new JPopupMenu.Separator(),index);\n}\n", "nl": "Inserts a separator at the specified position.", "id": "15582"}
{"code": "public com.sun.identity.wsfederation.jaxb.xmlsig.DigestMethodType createDigestMethodType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.DigestMethodTypeImpl();\n}\n", "nl": "Create an instance of DigestMethodType", "id": "2309"}
{"code": "public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {\n  return super.newInstance(javaContentInterface);\n}\n", "nl": "Create an instance of the specified Java content interface.", "id": "5195"}
{"code": "public static boolean isRightMouseButton(MouseEvent anEvent){\n  return ((anEvent.getModifiersEx() & InputEvent.BUTTON3_DOWN_MASK) != 0 || anEvent.getButton() == MouseEvent.BUTTON3);\n}\n", "nl": "Returns true if the mouse event specifies the right mouse button.", "id": "895"}
{"code": "public boolean equals(Object object){\n  return (super.equals(object) && object instanceof PrinterResolution);\n}\n", "nl": "Returns whether this printer resolution attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: <OL TYPE=1> <LI> <CODE>object</CODE> is not null. <LI> <CODE>object</CODE> is an instance of class PrinterResolution. <LI> This attribute's cross feed direction resolution is equal to <CODE>object</CODE>'s cross feed direction resolution. <LI> This attribute's feed direction resolution is equal to <CODE>object</CODE>'s feed direction resolution. </OL>", "id": "14030"}
{"code": "public boolean hasProperty(String key){\n  return getProperties().has(key);\n}\n", "nl": "Convenience method to check if a member with the specified name is present in this object.", "id": "33920"}
{"code": "@Override public void execute(String tokenId,Task task){\n  try {\n    task.execute(adapter);\n  }\n catch (  DataLayerException e) {\n    error(\"processing task\",e);\n  }\n}\n", "nl": "The simple executor that executes a task. TokenId is unused in this implementation.", "id": "38196"}
{"code": "public void paintTreeCellBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the background of the row containing a cell in a tree.", "id": "54581"}
{"code": "protected final AttributeDescription loadAttribute(final byte[] encodedAttribute,final String attributeName,final Collection<String> attributeOptions){\n  final int id=decodeId(encodedAttribute);\n  return loadAttributeToMaps(id,attributeName,attributeOptions,getMappings());\n}\n", "nl": "Loads an encoded attribute into this compressed schema. This method may called by implementations during initialization when loading content from disk.", "id": "36960"}
{"code": "public ObjectSlot[] slots(){\n  return slotsToSerialize;\n}\n", "nl": "Return the array of ObjectSlot the receiver represents.", "id": "19346"}
{"code": "public static Foo findByUuid_Last(java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {\n  return getPersistence().findByUuid_Last(uuid,orderByComparator);\n}\n", "nl": "Returns the last foo in the ordered set where uuid = &#63;.", "id": "51359"}
{"code": "void reExecutePeriodic(RunnableScheduledFuture<?> task){\n  if (canRunInCurrentRunState(true)) {\n    super.getQueue().add(task);\n    if (!canRunInCurrentRunState(true) && remove(task))     task.cancel(false);\n else     ensurePrestart();\n  }\n}\n", "nl": "Requeues a periodic task unless current run state precludes it. Same idea as delayedExecute except drops task rather than rejecting.", "id": "44585"}
{"code": "public Optional<Investment> invest(final int loanId,final int loanAmount){\n  return Investor.invest(this.zonkyApi,loanId,loanAmount,this.initialBalance.intValue());\n}\n", "nl": "One of the two entry points to the investment API. Takes a particular loan and invests a given amount into it.", "id": "15783"}
{"code": "public boolean isMaximizable(){\n  return maximizable;\n}\n", "nl": "Gets the value of the <code>maximizable</code> property.", "id": "28313"}
{"code": "private void invokePostResponsePlugins(boolean workflowExecuted){\n  if (workflowExecuted) {\n    List<LocalBackendCompareOperation> localOperations=(List)getAttachment(Operation.LOCALBACKENDOPERATIONS);\n    if (localOperations != null) {\n      for (      LocalBackendCompareOperation localOperation : localOperations) {\n        getPluginConfigManager().invokePostResponseComparePlugins(localOperation);\n      }\n    }\n  }\n else {\n    getPluginConfigManager().invokePostResponseComparePlugins(this);\n  }\n}\n", "nl": "Invokes the post response plugins. If a workflow has been executed then invoke the post response plugins provided by the workflow elements of the workflow, otherwise invoke the post response plugins that have been registered with the current operation.", "id": "33273"}
{"code": "public static <T>List<T> nCopies(final int length,T object){\n  return new CopiesList<T>(length,object);\n}\n", "nl": "Returns a list containing the specified number of the specified element. The list cannot be modified. The list is serializable.", "id": "16159"}
{"code": "public AudienceRestriction createAudienceRestriction(){\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUDIENCE_RESTRICTION);\n  if (obj == null) {\n    return new AudienceRestrictionImpl();\n  }\n else {\n    return (AudienceRestriction)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>AudienceRestriction</code>.", "id": "14214"}
{"code": "public ShapelessRecipe removeIngredient(MaterialData ingredient){\n  return removeIngredient(ingredient.getItemType(),ingredient.getData());\n}\n", "nl": "Removes an ingredient from the list. If the ingredient occurs multiple times, only one instance of it is removed. If the data value is -1, only ingredients with a -1 data value will be removed.", "id": "24413"}
{"code": "public String basicTypeNameBoxed(Field field){\n  return javaCommon.boxedTypeName(basicTypeName(field));\n}\n", "nl": "Returns the Java representation of a basic-typed field's type, in boxed form.", "id": "52638"}
{"code": "public static LdapException newLdapException(ResultCode resultCode){\n  return newLdapException(resultCode,null,null);\n}\n", "nl": "Creates a new LDAP exception with the provided result code and an empty diagnostic message.", "id": "41924"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(isSupported06.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "56500"}
{"code": "@Override public void customize(ConfigurableEmbeddedServletContainer container){\n  MimeMappings mappings=new MimeMappings(MimeMappings.DEFAULT);\n  mappings.add(\"html\",\"text/html;charset=utf-8\");\n  mappings.add(\"json\",\"text/html;charset=utf-8\");\n  container.setMimeMappings(mappings);\n}\n", "nl": "Customize the Servlet engine: Mime types, the document root, the cache.", "id": "5880"}
{"code": "public static String formatMessage(String formatStr,Object[] objs){\n  return MessageFormat.format(formatStr,objs);\n}\n", "nl": "Formats to format messages using <code>MessageFormat</code> Class. given params to format them with", "id": "20579"}
{"code": "public boolean isEditable(){\n  return this.editable && isVisible();\n}\n", "nl": "Checks if is editable.", "id": "32103"}
{"code": "@Bean(initMethod=\"start\",destroyMethod=\"stop\") @Profile(Constants.SPRING_PROFILE_DEVELOPMENT) public Server h2TCPServer() throws SQLException {\n  return Server.createTcpServer(\"-tcp\",\"-tcpAllowOthers\");\n}\n", "nl": "Open the TCP port for the H2 database, so it is available remotely.", "id": "8150"}
{"code": "public static ManageDsaITRequestControl newControl(final boolean isCritical){\n  return isCritical ? CRITICAL_INSTANCE : NONCRITICAL_INSTANCE;\n}\n", "nl": "Creates a new ManageDsaIT request control having the provided criticality.", "id": "15453"}
{"code": "public char next(){\n  if (pos < chars.length - 1) {\n    pos++;\n    return chars[pos];\n  }\n else {\n    pos=chars.length;\n    return DONE;\n  }\n}\n", "nl": "Increments the iterator's index by one and returns the character at the new index.  If the resulting index is greater or equal to getEndIndex(), the current index is reset to getEndIndex() and a value of DONE is returned.", "id": "47844"}
{"code": "public boolean debugEnabled(){\n  return (debugLevel > Debug.WARNING);\n}\n", "nl": "Checks if message debugging is enabled. <p><b>NOTE:</b> It is recommended that <code>messageEnabled()</code> be used instead of <code>debugEnabled()</code> as the former is more  intuitive.</>", "id": "45456"}
{"code": "public void write(int c) throws IOException {\n  if (sink == null) {\n    throw new IOException(\"Pipe not connected\");\n  }\n  sink.receive(c);\n}\n", "nl": "Writes the specified <code>char</code> to the piped output stream. If a thread was reading data characters from the connected piped input stream, but the thread is no longer alive, then an <code>IOException</code> is thrown. <p> Implements the <code>write</code> method of <code>Writer</code>.", "id": "23374"}
{"code": "public String toStringNoRevision(){\n  return Utils.joinAsString(\".\",major,minor,point);\n}\n", "nl": "Returns a string representation of the BuildVersion including the major, minor and point versions, but excluding the revision number.", "id": "14310"}
{"code": "public static ComponentUI createUI(JComponent c){\n  return new SynthToolTipUI();\n}\n", "nl": "Creates a new UI object for the given component.", "id": "40733"}
{"code": "void destroyInternalSession(SessionID sessionID){\n  InternalSession internalSession=removeCachedInternalSession(sessionID);\n  if (internalSession != null && internalSession.getState() != SessionState.INVALID) {\n    signalRemove(internalSession,SessionEventType.DESTROY);\n    sessionAuditor.auditActivity(internalSession.toSessionInfo(),AM_SESSION_DESTROYED);\n  }\n  sessionAccessManager.removeSessionId(sessionID);\n}\n", "nl": "Destroy a Internal Session, whose session id has been specified.", "id": "54069"}
{"code": "public int hashCode(){\n  return subjectRoles.hashCode();\n}\n", "nl": "Return a hash code for this <code>DSAMERole</code>.", "id": "48023"}
{"code": "public void processingInstruction(String target,String data) throws SAXException {\n}\n", "nl": "Receive notification of a processing instruction. <p>By default, do nothing.  Application writers may override this method in a subclass to take specific actions for each processing instruction, such as setting status variables or invoking other methods.</p>", "id": "35336"}
{"code": "public static int computeStringWidth(FontMetrics fm,String str){\n  return SwingUtilities2.stringWidth(null,fm,str);\n}\n", "nl": "Compute the width of the string using a font with the specified \"metrics\" (sizes).", "id": "51490"}
{"code": "public void makeImmutable(){\n  mutable=false;\n}\n", "nl": "Makes the object immutable", "id": "21388"}
{"code": "static synchronized void reset(){\n  caches.clear();\n}\n", "nl": "For testing.", "id": "15112"}
{"code": "public String toStringImpl(){\n  return new StringBuilder().append(portType).toString();\n}\n", "nl": "Used by super class to log the attribute's contents when packet logging is enabled.", "id": "54725"}
{"code": "public boolean isConfigured(){\n  return AMSetupServlet.isConfigured(baseDir);\n}\n", "nl": "Determines if the instance of OpenAM is configured.", "id": "19608"}
{"code": "public void addToRequestQueue(CLIRequest request){\n  requestQueue.add(request);\n}\n", "nl": "Adds request to request queue.", "id": "28179"}
{"code": "@NonNull public static Interpolator decelerate(){\n  return new DecelerateInterpolator();\n}\n", "nl": "<strong>ANDROID INTERPOLATOR</strong><br/><br/> An interpolator where the rate of change starts out quickly and and then decelerates.", "id": "35774"}
{"code": "public static void fill(short[] array,int start,int end,short value){\n  Arrays.checkStartAndEnd(array.length,start,end);\n  for (int i=start; i < end; i++) {\n    array[i]=value;\n  }\n}\n", "nl": "Fills the specified range in the array with the specified element.", "id": "24821"}
{"code": "public static AMIdentity createATestGroup(SSOToken adminToken,String groupName,String realm) throws IdRepoException, SSOException {\n  AMIdentityRepository amir=new AMIdentityRepository(adminToken,realm);\n  return amir.createIdentity(IdType.GROUP,groupName,Collections.EMPTY_MAP);\n}\n", "nl": "Create a AMIdentity Group for using in Test cases.", "id": "5338"}
{"code": "public static Date parseDate(String date){\n  return parseDate(date,JKFormatUtil.DEFAULT_DATE_PATTERN);\n}\n", "nl": "Parses the date.", "id": "11585"}
{"code": "public boolean doVerifierAction(String logName,boolean result){\n  if (result) {\n    if (Debug.messageEnabled()) {\n      Debug.message(logName + \":Verification Successful\");\n    }\n  }\n else {\n    Debug.error(logName + \":Verification Failure\");\n  }\n  return result;\n}\n", "nl": "Does the action based on the result of the verification process.", "id": "35511"}
{"code": "public static String validateFileName(CharSequence filename){\n  return SPACE.matcher(ILLEGAL_CHARACTERS.matcher(filename).replaceAll(\"\")).replaceAll(\" \").trim();\n}\n", "nl": "Strip file name of invalid characters", "id": "47452"}
{"code": "public void processingInstruction(String target,String data) throws SAXException {\n  if (contentHandler != null) {\n    contentHandler.processingInstruction(target,data);\n  }\n}\n", "nl": "Filter a processing instruction event.", "id": "17265"}
{"code": "public SearchRequest addAttribute(final String... attributeDescriptions){\n  for (  final String attributeDescription : attributeDescriptions) {\n    attributes.add(Reject.checkNotNull(attributeDescription));\n  }\n  return this;\n}\n", "nl": "To be removed.", "id": "34650"}
{"code": "public CipherParameters generateDerivedParameters(int keySize){\n  keySize=keySize / 8;\n  byte[] dKey=generateDerivedKey(keySize);\n  return new KeyParameter(dKey,0,keySize);\n}\n", "nl": "Generate a key parameter derived from the password, salt, and iteration count we are currently initialised with.", "id": "41078"}
{"code": "public Array readArray() throws SQLException {\n  return (Array)getNextAttribute();\n}\n", "nl": "Reads an SQL <code>ARRAY</code> value from the stream and returns it as an <code>Array</code> object in the Java programming language. <P> This method does not perform type-safe checking to determine if the returned type is the expected type as this responsibility is delegated to the UDT mapping as implemented by a <code>SQLData</code> implementation.", "id": "16138"}
{"code": "public boolean isHidden(){\n  return isHidden;\n}\n", "nl": "Indicates whether this subcommand should be hidden from the usage information.", "id": "19858"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hasAttributes02.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "39346"}
{"code": "public void update(Graphics a,JComponent b){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).update(a,b);\n  }\n}\n", "nl": "Invokes the <code>update</code> method on each UI handled by this object.", "id": "42484"}
{"code": "public void delete() throws SMSException, SSOException {\n  if (readOnly) {\n    if (debug.warningEnabled()) {\n      debug.warning(\"SMSEntry: Attempted to delete an entry that \" + \"is marked as read-only: \" + dn);\n    }\n    throw (new SMSException(SMSException.STATUS_NO_PERMISSION,\"sms-INSUFFICIENT_ACCESS_RIGHTS\"));\n  }\n  delete(ssoToken);\n}\n", "nl": "Delete the entry in the datastore. This will delete sub-entries also!", "id": "8112"}
{"code": "public void startTransactionTimer(){\n  if (this.transactionTimerStarted.compareAndSet(false,true)) {\n    if (sipStack.getTimer() != null && transactionTimerLock != null) {\nsynchronized (transactionTimerLock) {\n        if (!transactionTimerCancelled) {\n          transactionTimer=new TransactionTimer();\n          sipStack.getTimer().scheduleWithFixedDelay(transactionTimer,baseTimerInterval,baseTimerInterval);\n        }\n      }\n    }\n  }\n}\n", "nl": "Start the timer task.", "id": "14092"}
{"code": "public void info(String msg){\n  log(Level.INFO,msg);\n}\n", "nl": "Log an INFO message. <p> If the logger is currently enabled for the INFO message level then the given message is forwarded to all the registered output Handler objects. <p>", "id": "495"}
{"code": "protected StringBuilder encodeBody(StringBuilder buffer){\n  if (scheme != null)   buffer.append(scheme).append(' ');\n  return parameters.encode(buffer);\n}\n", "nl": "Value of header encoded in canonical form.", "id": "32386"}
{"code": "protected void diagnoseMultistepList(int matchCount,int lengthToTest,boolean isGlobal){\n  if (matchCount > 0) {\n    System.err.print(\"Found multistep matches: \" + matchCount + \", \"+ lengthToTest+ \" length\");\n    if (isGlobal)     System.err.println(\" (global)\");\n else     System.err.println();\n  }\n}\n", "nl": "Print out diagnostics about partial multistep evaluation.", "id": "20207"}
{"code": "public static Hyphenation hyphenate(String lang,String country,String word,int leftMin,int rightMin){\n  return hyphenate(lang,country,null,word,leftMin,rightMin);\n}\n", "nl": "Hyphenates a word.", "id": "29755"}
{"code": "public void arrayStore(final Type type){\n  mv.visitInsn(type.getOpcode(Opcodes.IASTORE));\n}\n", "nl": "Generates the instruction to store an element in an array.", "id": "55354"}
{"code": "public com.sun.identity.wsfederation.jaxb.wspolicy.PolicyReferenceElement createPolicyReferenceElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wspolicy.impl.PolicyReferenceElementImpl();\n}\n", "nl": "Create an instance of PolicyReferenceElement", "id": "52324"}
{"code": "@SuppressWarnings(\"unused\") static <T>Promise<T> blockingPromise(Class<T> cls,final Duration duration){\n  return new BlockingPromise<>(duration);\n}\n", "nl": "Generic promise. Added to make static imports possible. Create a blocking promise. NOTE BLOCKING PROMISES ARE FOR LEGACY INTEGRATION AND TESTING ONLY!!!", "id": "16176"}
{"code": "@Override protected void finalize(){\n  disconnect(DisconnectReason.OTHER,false,null);\n}\n", "nl": "Called by the Gc when the object is garbage collected Release the cursor in case the iterator was badly used and releaseCursor was never called.", "id": "3666"}
{"code": "public static void updateComboBoxModel(Collection<?> newElements,DefaultComboBoxModel model){\n  updateComboBoxModel(newElements,model,null);\n}\n", "nl": "Updates a combo box model with a number of items. The method assumes that is being called from the event thread.", "id": "45676"}
{"code": "public boolean isDefined(Object key){\n  if (key instanceof StyleConstants) {\n    Object cssKey=css.styleConstantsKeyToCSSKey((StyleConstants)key);\n    if (cssKey != null) {\n      return super.isDefined(cssKey);\n    }\n  }\n  return super.isDefined(key);\n}\n", "nl": "Checks whether a given attribute is defined.", "id": "47712"}
{"code": "public Builder names(final String... names){\n  return names(asList(names));\n}\n", "nl": "Adds the provided user friendly names.", "id": "3690"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_textwithnomarkup.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "44768"}
{"code": "protected void shutdown(){\n  alert[0]=0;\n  alert[1]=0;\n  recordProtocol=null;\n}\n", "nl": "Shutdown the protocol. It will be impossible to use the instance after the calling of this method.", "id": "38258"}
{"code": "public boolean containsRuleActionId(String ruleActionId){\n  return getAggregationMap().containsKey(ruleActionId);\n}\n", "nl": "Is this aggregator processing data for a supplied ruleActionId key", "id": "457"}
{"code": "public Builder optionalAttributes(final String... nameOrOIDs){\n  return optionalAttributes(Arrays.asList(nameOrOIDs));\n}\n", "nl": "Adds the provided optional attributes.", "id": "33818"}
{"code": "boolean isLegalInsertText(String text){\n  return true;\n}\n", "nl": "Returns true if the text in <code>text</code> can be inserted.  This does not mean the text will ultimately be inserted, it is used if text can trivially reject certain characters.", "id": "10423"}
{"code": "public int compareTo(ModelItem anotherItem){\n  return this.toString().compareTo((anotherItem).toString());\n}\n", "nl": "Compare toString() methods.", "id": "37808"}
{"code": "public boolean hasParameters(){\n  return authParams.size() != 0;\n}\n", "nl": "Boolean function", "id": "6462"}
{"code": "@DataProvider(name=\"certificateExactMatchInvalidAssertionValues\") public Object[][] createCertificateExactMatchingRuleInvalidAssertionValues(){\n  return new Object[][]{{\"{serialnumber 123,issuer rdnSequence:\\\"c=DE\\\"}\"},{\"{serialNumber 123,issuer rdnSequence:\\\"invalid\\\"}\"},{\"{serialNumber 0123,issuer rdnSequence: \\\"cn=issuer\\\"}\"},{\"{  serialNumber  123  ,  issuer  rdnSequence:\\\"c=DE\\\"  }  trailing\"}};\n}\n", "nl": "Generate invalid assertion values for the certificateExactMatch matching rule test.", "id": "30224"}
{"code": "public Location add(Location vec){\n  if (vec == null || vec.getWorld() != getWorld()) {\n    throw new IllegalArgumentException(\"Cannot add Locations of differing worlds\");\n  }\n  x+=vec.x;\n  y+=vec.y;\n  z+=vec.z;\n  return this;\n}\n", "nl": "Adds the location by another.", "id": "38813"}
{"code": "public byte[] readStreamBytes(PdfStream stream,boolean decode) throws IOException {\n  byte[] b=readStreamBytesRaw(stream);\n  if (decode && b != null) {\n    return decodeBytes(b,stream);\n  }\n else {\n    return b;\n  }\n}\n", "nl": "Reads, decrypt and optionally decode stream bytes. Note, this method doesn't store actual bytes in any internal structures.", "id": "28835"}
{"code": "public Object[] keys(){\n  if (arrayTable == null) {\n    return null;\n  }\n  return arrayTable.getKeys(null);\n}\n", "nl": "Returns the <code>Action</code> names that are bound in this <code>ActionMap</code>.", "id": "3124"}
{"code": "public com.sun.identity.saml2.jaxb.xmlsig.SignatureElement createSignatureElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureElementImpl();\n}\n", "nl": "Create an instance of SignatureElement", "id": "48702"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.security.RequesterAuthorizationElement createRequesterAuthorizationElement(javax.xml.namespace.QName value) throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.RequesterAuthorizationElementImpl(value);\n}\n", "nl": "Create an instance of RequesterAuthorizationElement", "id": "30903"}
{"code": "public String toXMLString() throws FSMsgException {\n  String xml=this.toXMLString(true,false);\n  return xml;\n}\n", "nl": "Returns the string representation of this object.", "id": "24158"}
{"code": "private Identity doAuth(String username,String password){\n  Set<String> memberships=LDAPHelper.validate(username,password,config.getLdap());\n  if (memberships != null) {\n    return new UserIdentity(username,memberships).applyResolvePermissions(config);\n  }\n else {\n    return null;\n  }\n}\n", "nl": "Authenticate, if the username matches the password.", "id": "3355"}
{"code": "public int hashCode(){\n  return (ref == null) ? super.hashCode() : ref.remoteHashCode();\n}\n", "nl": "Returns a hashcode for a remote object.  Two remote object stubs that refer to the same remote object will have the same hash code (in order to support remote objects as keys in hash tables).", "id": "13472"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlsig.DSAKeyValueType createDSAKeyValueType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.DSAKeyValueTypeImpl();\n}\n", "nl": "Create an instance of DSAKeyValueType", "id": "52277"}
{"code": "public void pushSAXLocator(SourceLocator location){\n  m_saxLocations.push(location);\n}\n", "nl": "Set the current locater in the stylesheet.", "id": "32163"}
{"code": "public void addAttachment(final Attachment attachment){\n  this.attachements.add(attachment);\n}\n", "nl": "Adds the attachment.", "id": "19835"}
{"code": "public boolean hasTimeout(){\n  return hasTimeout;\n}\n", "nl": "Gets the timeout marker for the future update ack.", "id": "37278"}
{"code": "public AnnotationVisitor visitInsnAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){\n  if (api < Opcodes.ASM5) {\n    throw new RuntimeException();\n  }\n  if (mv != null) {\n    return mv.visitInsnAnnotation(typeRef,typePath,desc,visible);\n  }\n  return null;\n}\n", "nl": "Visits an annotation on an instruction. This method must be called just <i>after</i> the annotated instruction. It can be called several times for the same instruction.", "id": "19978"}
{"code": "private boolean containsPan(){\n  return component.containsGesture(HighLevelGesture.PAN_START) || component.containsGesture(HighLevelGesture.PAN_MOVE) || component.containsGesture(HighLevelGesture.PAN_END);\n}\n", "nl": "Tell whether component contains pan gesture", "id": "14693"}
{"code": "public void postProcessModify(SSOToken token,String entryDN,Map oldAttributes,Map newAttributes,int objectType) throws AMPostCallBackException {\n}\n", "nl": "Method which gets invoked after a entry is modified", "id": "25305"}
{"code": "public void paintSeparatorBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintSeparatorBackground(context,g,x,y,w,h);\n}\n", "nl": "Paints the background of a separator. This implementation invokes the method of the same name without the orientation.", "id": "9543"}
{"code": "public String mapToXACMLActionEffect(String nativeActionEffect,String serviceName) throws XACMLException {\n  return null;\n}\n", "nl": "Returns XACML  context decision effect", "id": "17546"}
{"code": "private static String convertToQuotedString(String s){\n  if (s == null || s.isEmpty()) {\n    return null;\n  }\n  if (s.charAt(0) == '\"' && s.charAt(s.length() - 1) == '\"') {\n    return s;\n  }\n  return '\\\"' + s + '\\\"';\n}\n", "nl": "Encloses the incoming string inside double quotes, if it isn't already quoted.", "id": "43380"}
{"code": "protected Object createSubtreeEvaluationMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){\n  subtreePolicyEvaluation=new SubtreeEvaluationImpl(this);\n  return subtreePolicyEvaluation;\n}\n", "nl": "Factory method for \"SubtreeEvaluation\" MBean. You can redefine this method if you need to replace the default generated MBean class with your own customized class.", "id": "19315"}
{"code": "public Element signWithWSSSAMLTokenProfile(Document doc,java.security.cert.Certificate cert,String assertionID,String algorithm,List ids) throws XMLSignatureException {\n  return signWithWSSSAMLTokenProfile(doc,cert,assertionID,algorithm,ids,SOAPBindingConstants.WSF_10_VERSION);\n}\n", "nl": "Sign part of the xml document referered by the supplied a list of id attributes of nodes", "id": "47959"}
{"code": "public boolean notifyOriginalRequestor(){\n  return notifyOriginalRequestor;\n}\n", "nl": "Indicates whether the original requestor should receive a response to the request if the operation is canceled.", "id": "37872"}
{"code": "@Override public void firePropertyChange(String propertyName,int oldValue,int newValue){\n}\n", "nl": "Overridden for performance reasons.", "id": "58337"}
{"code": "@Override public boolean ready() throws IOException {\n  return false;\n}\n", "nl": "Tell whether this stream is ready to be read.", "id": "3005"}
{"code": "public void firePropertyChange(String propertyName,float oldValue,float newValue){\n}\n", "nl": "Overridden for performance reasons. See the <a href=\"#override\">Implementation Note</a> for more information.", "id": "46867"}
{"code": "@Override public Promise<Void,AuthenticationException> cleanSubject(MessageInfoContext messageInfo,Subject subject){\n  return newResultPromise(null);\n}\n", "nl": "Nothing to clean.", "id": "3129"}
{"code": "private void hideSoftKeyboard(){\n  hideSoftKeyboard(editText);\n}\n", "nl": "Hide keyboard", "id": "21539"}
{"code": "public synchronized void stop() throws Exception {\n  stop(interval);\n}\n", "nl": "Stop monitoring.", "id": "7403"}
{"code": "public static String base64Encode(final String value){\n  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);\n  return Base64.getEncoder().encodeToString(value.getBytes());\n}\n", "nl": "Encodes data with MIME base64.", "id": "14675"}
{"code": "public boolean removeCSN(CSN expectedCSN){\n  if (expectedCSN == null) {\n    return false;\n  }\n  if (serverIdToCSN.remove(expectedCSN.getServerId(),expectedCSN)) {\n    saved=false;\n    return true;\n  }\n  return false;\n}\n", "nl": "Removes the mapping to the provided CSN if it is present in this ServerState.", "id": "36172"}
{"code": "public boolean isSubscript(){\n  sync();\n  return subscript;\n}\n", "nl": "Determines if the glyphs should be rendered as superscript.", "id": "12115"}
{"code": "public static AudioFile read(File f) throws CannotReadException, IOException, TagException, ReadOnlyFileException, InvalidAudioFrameException {\n  return getDefaultAudioFileIO().readFile(f);\n}\n", "nl": "Read the tag contained in the given file.", "id": "23154"}
{"code": "public static void handleException(Exception ex,StackLogger stackLogger){\n  System.err.println(\"Unexpected internal error  \" + ex.getMessage());\n  stackLogger.logError(\"UNEXPECTED INTERNAL ERROR \" + ex.getMessage());\n  ex.printStackTrace();\n  stackLogger.logException(ex);\n  throw new RuntimeException(\"Unexpected internal error !! \" + ex.getMessage(),ex);\n}\n", "nl": "Handle an unexpected exception.", "id": "25097"}
{"code": "public boolean isFocusTraversable(){\n  return false;\n}\n", "nl": "Overridden to unconditionally return false.", "id": "45171"}
{"code": "public boolean isInteractive(){\n  return !noPromptArg.isPresent();\n}\n", "nl": "Tells whether the user specified to have an interactive uninstall or not. This method must be called after calling parseArguments.", "id": "43863"}
{"code": "public void init(){\n  lastToken=firstToken=null;\n}\n", "nl": "Clears the list of tokens.", "id": "39075"}
{"code": "public static KeyListener remove(KeyListener l,KeyListener oldl){\n  return (KeyListener)removeInternal(l,oldl);\n}\n", "nl": "Removes the old key-listener from key-listener-l and returns the resulting multicast listener.", "id": "29686"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_documentcreateelementcasesensitive.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "57023"}
{"code": "public Condition createCondition(String xml) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.CONDITION,xml);\n  if (obj == null) {\n    return new ConditionImpl(xml);\n  }\n else {\n    return (Condition)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>Condition</code>. The return object is immutable.", "id": "54039"}
{"code": "public StringBuffer append(float f){\n  RealToString.getInstance().appendFloat(this,f);\n  return this;\n}\n", "nl": "Adds the string representation of the specified float to the end of this StringBuffer.", "id": "42410"}
{"code": "public void removeChildren(){\n  children=null;\n}\n", "nl": "Removes all children from the node.", "id": "15470"}
{"code": "protected void log(String s){\n  if (mLog) {\n    Logger.global.fine(s);\n  }\n}\n", "nl": "Print to the log file (if logging enabled)", "id": "20113"}
{"code": "public String subtype(){\n  return subtype;\n}\n", "nl": "Returns a specific media subtype, such as \"plain\" or \"png\", \"mpeg\", \"mp4\" or \"xml\".", "id": "53939"}
{"code": "@DataProvider(name=\"stringValues\") public Object[][] createStringValues(){\n  return new Object[][]{{\"\\\"\\\"\",true},{\"\\\"escaped\\\"\\\"dquotes\\\"\",true},{\"\\\"valid Unicode \\u00D6\\u00C4\\\"\",true},{\"\\\"only one \\\" \\\"\",false},{\"invalid without dquotes\",false},{\"\\\"missing end\",false},{\"\\\"valid string\\\" with extra trailing characters\",false}};\n}\n", "nl": "Create data for the <CODE>testString</CODE> test case.", "id": "29462"}
{"code": "private SOAPMessage FormSOAPError(String faultCode,Throwable throwable,Message req){\n  String faultString=throwable.getMessage();\n  if (faultString == null || faultString.length() == 0) {\n    faultString=Utils.bundle.getString(\"unknownError\");\n  }\n  return FormSOAPError(req,faultCode,faultString);\n}\n", "nl": "Constructs a SOAPMessage with specified fault code and Throwable. The fault string will be Throwable.getMessage(); The fault code will have same namespace of soap envelope.", "id": "46515"}
{"code": "public PrivacyHeader createPrivacyHeader(String privacyType){\n  if (privacyType == null)   throw new NullPointerException(\"null privacyType arg\");\n  Privacy privacy=new Privacy(privacyType);\n  return privacy;\n}\n", "nl": "Privacy header", "id": "14896"}
{"code": "public AuthnContext createAuthnContext(){\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHN_CONTEXT);\n  if (obj == null) {\n    return new AuthnContextImpl();\n  }\n else {\n    return (AuthnContext)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>AuthnContext</code>. Caller may need to call setters of the class to populate the object.", "id": "35828"}
{"code": "private void processModifyDN(DN oldEntryDN,DN newEntryDN){\n  for (  DN baseDN : getBaseDNsToSearch()) {\n    searchBaseDN(baseDN,oldEntryDN,newEntryDN);\n  }\n}\n", "nl": "Used by the background thread to process the specified old entry DN and new entry DN. Each base DN or public naming context (if the base DN configuration is empty) is checked to see  if they contain entries with references to the old entry DN that need to be changed to the new entry DN.", "id": "30002"}
{"code": "public static boolean isNetworkAvailable(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetworkInfo=connectivityManager.getActiveNetworkInfo();\n  return activeNetworkInfo != null && activeNetworkInfo.isConnected();\n}\n", "nl": "Checks if network is available", "id": "46652"}
{"code": "@Override public void toString(StringBuilder buffer){\n  buffer.append(handlerName);\n}\n", "nl": "Appends a string representation of this connection handler to the provided buffer.", "id": "2919"}
{"code": "public boolean remove(Object targetChild){\n  return remove(targetChild,true);\n}\n", "nl": "Removes a child from this BeanContext.  If the child object is not for adding then this method throws an IllegalStateException.", "id": "4330"}
{"code": "public Boolean isZipEnabled(){\n  return zipEnable;\n}\n", "nl": "is zip enable", "id": "44499"}
{"code": "public boolean usesShiftModifier(){\n  return usesShift;\n}\n", "nl": "Returns whether this MenuShortcut must be invoked using the SHIFT key.", "id": "848"}
{"code": "public final PlaPointInt mirror_horizontal(PlaPointInt p_pole){\n  PlaVectorInt v=difference_by(p_pole);\n  v=v.mirror_at_x_axis();\n  return p_pole.translate_by(v);\n}\n", "nl": "Mirrors this point at the horizontal line through p_pole", "id": "5130"}
{"code": "public static void deregisterShutdownListener(ServerShutdownListener listener){\n  directoryServer.shutdownListeners.remove(listener);\n}\n", "nl": "Deregisters the provided shutdown listener with the Directory Server.", "id": "13120"}
{"code": "public static StringArgument propertiesFileArgument() throws ArgumentException {\n  return StringArgument.builder(OPTION_LONG_PROP_FILE_PATH).description(INFO_DESCRIPTION_PROP_FILE_PATH.get()).valuePlaceholder(INFO_PROP_FILE_PATH_PLACEHOLDER.get()).buildArgument();\n}\n", "nl": "Returns the \"propertiesFilePath\" string argument.", "id": "21573"}
{"code": "public boolean isLogEnabled(){\n  if (logger == null) {\n    return false;\n  }\n else {\n    return logger.isLogEnabled();\n  }\n}\n", "nl": "Checks if the logging is enabled.", "id": "48872"}
{"code": "public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){\n  if (api < Opcodes.ASM5) {\n    throw new RuntimeException();\n  }\n  if (cv != null) {\n    return cv.visitTypeAnnotation(typeRef,typePath,desc,visible);\n  }\n  return null;\n}\n", "nl": "Visits an annotation on a type in the class signature.", "id": "37932"}
{"code": "public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){\n}\n", "nl": "Overridden for performance reasons. See the <a href=\"#override\">Implementation Note</a> for more information.", "id": "4226"}
{"code": "@Override public boolean genStringAsCharArray(){\n  return this.genStringAsCharArray;\n}\n", "nl": "Are Text strings to be generated as char arrays?", "id": "20424"}
{"code": "public void countDown(){\n  sync.releaseShared(1);\n}\n", "nl": "Decrements the count of the latch, releasing all waiting threads if the count reaches zero. <p>If the current count is greater than zero then it is decremented. If the new count is zero then all waiting threads are re-enabled for thread scheduling purposes. <p>If the current count equals zero then nothing happens.", "id": "12837"}
{"code": "@Override public List<Foo> findAll(){\n  return findAll(QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);\n}\n", "nl": "Returns all the foos.", "id": "31473"}
{"code": "public static void calculateAlignedPositions(int allocated,SizeRequirements total,SizeRequirements[] children,int[] offsets,int[] spans){\n  calculateAlignedPositions(allocated,total,children,offsets,spans,true);\n}\n", "nl": "Creates a bunch of offset/span pairs specifying how to lay out a set of components with the specified alignments. The resulting span allocations will overlap, with each one fitting as well as possible into the given total allocation. This method requires that you specify the total amount of space to be allocated, the size requirements for each component to be placed (specified as an array of SizeRequirements), and the total size requirements of the set of components (only the alignment field of which is actually used). You can get the total size requirement by invoking getAlignedSizeRequirements. Normal alignment will be done with an alignment value of 0.0f representing the left/top edge of a component.", "id": "40617"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(importNode16.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "1233"}
{"code": "public static boolean isNative(int mod){\n  return (mod & ACC_NATIVE) != 0;\n}\n", "nl": "Tells whether a given access modifier is native", "id": "19390"}
{"code": "public static String toStudlyCase(final String value){\n  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);\n  String[] words=collapseWhitespace(value.trim()).split(\"\\\\s*(_|-|\\\\s)\\\\s*\");\n  return Arrays.stream(words).filter(null).map(null).collect(joining());\n}\n", "nl": "Transform to StudlyCaps.", "id": "4777"}
{"code": "public void appendQuotedExtension(StringBuffer toAddTo){\n  appendQuoted(extension,toAddTo);\n}\n", "nl": "Gets the current extension, quoted", "id": "36622"}
{"code": "public void ifPresent(LongConsumer consumer){\n  if (isPresent)   consumer.accept(value);\n}\n", "nl": "Have the specified consumer accept the value if a value is present, otherwise do nothing.", "id": "17053"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlenc.AgreementMethodType.KANonce createAgreementMethodTypeKANonce(byte[] value) throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.AgreementMethodTypeImpl.KANonceImpl(value);\n}\n", "nl": "Create an instance of AgreementMethodTypeKANonce", "id": "20692"}
{"code": "@Override public void update(){\n  if (!tileExit) {\n    yPos-=pushThreshold;\n    updatePosition();\n    if (!collide(false))     tileExit=true;\n    return;\n  }\n  if (collide(true)) {\n    completeCycle=true;\n    consumedStats=true;\n    Main.updateScore(1000);\n  }\n}\n", "nl": "Powerup Logic. Executed by <em>GameLoop</em> class.", "id": "36458"}
{"code": "public static String removeRight(final String value,final String suffix){\n  return removeRight(value,suffix,true);\n}\n", "nl": "Returns a new string with the 'suffix' removed, if present. Search is case sensitive.", "id": "3926"}
{"code": "public static List<ModificationType> values(){\n  return IMMUTABLE_ELEMENTS;\n}\n", "nl": "Returns an unmodifiable list containing the set of available modification change types indexed on their integer value as defined in RFC 4511 section 4.6.", "id": "44026"}
{"code": "@Override public void onUIRefreshComplete(PtrFrameLayout frame){\n  mDrawable.stop();\n}\n", "nl": "perform UI after refresh", "id": "23094"}
{"code": "public RxGalleryFinal cropMaxBitmapSize(@IntRange(from=100) int maxBitmapSize){\n  configuration.setMaxBitmapSize(maxBitmapSize);\n  return this;\n}\n", "nl": "Setter for max size for both width and height of bitmap that will be decoded from an input Uri and used in the view.", "id": "15480"}
{"code": "protected <V>RunnableScheduledFuture<V> decorateTask(Runnable runnable,RunnableScheduledFuture<V> task){\n  return task;\n}\n", "nl": "Modifies or replaces the task used to execute a runnable. This method can be used to override the concrete class used for managing internal tasks. The default implementation simply returns the given task.", "id": "45669"}
{"code": "@AfterClass public static void cleanupClass(){\n  try {\n    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());\n  }\n catch (  Exception ignore) {\n    System.err.println(\"cannot remove \" + scenario.getRepositoryLocation());\n  }\n}\n", "nl": "Cleanup the whole junit scenario ; deletes the created git repository.", "id": "36044"}
{"code": "@Override public void initializeForTemplate(TemplateFile templateFile,Template template,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {\n  initializeInternal(templateFile,arguments,lineNumber);\n}\n", "nl": "Performs any initialization for this tag that may be needed while parsing a template definition.", "id": "22021"}
{"code": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"StandardEngine[\");\n  sb.append(getName());\n  sb.append(\"]\");\n  return (sb.toString());\n}\n", "nl": "Return a String representation of this component.", "id": "27877"}
{"code": "@SuppressWarnings(\"rawtypes\") public Iterator iterator(){\n  return children.iterator();\n}\n", "nl": "Gets the array of children affected by this event.", "id": "3270"}
{"code": "public static void ping(ConnectionWrapper connWrapper){\n  SearchRequest request=newSearchRequest(\"\",BASE_OBJECT,\"objectClass=*\",NO_ATTRIBUTES).setSizeLimit(0).setTimeLimit(0).setDereferenceAliasesPolicy(NEVER);\n  connWrapper.getConnection().search(request).close();\n}\n", "nl": "Ping the specified connection. This method sends a search request on the root entry of the DIT and forward the corresponding exception (if any).", "id": "43556"}
{"code": "public void addReferral(String name,Referral referral) throws NameAlreadyExistsException, InvalidNameException {\n  referrals.addReferral(name,referral);\n}\n", "nl": "Adds a new policy referral.", "id": "50325"}
{"code": "public boolean isFocusTraversable(){\n  return false;\n}\n", "nl": "Returns whether this object can accept focus or not.   Objects that can accept focus will also have the <code>AccessibleState.FOCUSABLE</code> state set in their <code>AccessibleStateSet</code>.", "id": "30110"}
{"code": "public void finish() throws IOException {\n  if (!def.finished()) {\n    def.finish();\n    while (!def.finished()) {\n      deflate();\n    }\n  }\n}\n", "nl": "Finishes writing compressed data to the output stream without closing the underlying stream. Use this method when applying multiple filters in succession to the same output stream.", "id": "32824"}
{"code": "void replaceEntry(WriteableTransaction txn,Entry before,Entry after) throws StorageRuntimeException {\n  deleteEntry(txn,before);\n  addEntry(txn,after);\n}\n", "nl": "Update the referral tree for an entry that has been replaced. Does not do anything unless the entry before it was replaced or the entry after it was replaced is a referral entry.", "id": "36346"}
{"code": "public static boolean wasPerformed(Context context,ReconAction action){\n  try {\n    PendingActionContext pendingActionContext=getPendingActionContext(context,action);\n    if (pendingActionContext.getPendingAction().equals(action.toString())) {\n      return !pendingActionContext.isPending();\n    }\n  }\n catch (  IllegalArgumentException e) {\n    logger.debug(\"No PendingActionContext found\");\n  }\n  return false;\n}\n", "nl": "Search for a PendingActionContext matching the supplied action and check if the action was performed It's critical that the context passed in originally was populated with the pending action data to get  an accurate response as it may use the absence of the pending action data as a marker or the pending  action having been performed and removed.", "id": "32100"}
{"code": "public AMSearchResults searchFilteredRoles(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(FILTERED_ROLE),getSearchFilter(AMObject.FILTERED_ROLE),wildcard,avPairs,searchControl);\n}\n", "nl": "Searches for filtered roles in this organization using wildcards and attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be specifed so that DNs of filtered roles with matching attribute-value pairs will be returned.", "id": "48106"}
{"code": "private Future<CheckoutResult> sendOrderAwaitResult(Order order){\n  Future<CheckoutResult> future=Future.future();\n  vertx.eventBus().send(CheckoutService.ORDER_EVENT_ADDRESS,order.toJson(),null);\n  return future;\n}\n", "nl": "Send the order to the order microservice and wait for reply.", "id": "15303"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.IPSecType createIPSecType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.IPSecTypeImpl();\n}\n", "nl": "Create an instance of IPSecType", "id": "51334"}
{"code": "public synchronized void freeInstance(Object obj){\n  freeStack.add(obj);\n}\n", "nl": "Add an instance of the given object to the pool ", "id": "9265"}
{"code": "static Class lookUpFactoryClass(String factoryId) throws ConfigurationError {\n  return lookUpFactoryClass(factoryId,null,null);\n}\n", "nl": "Finds the implementation Class object in the specified order.  The specified order is the following: <ol> <li>query the system property using <code>System.getProperty</code> <li>read <code>$java.home/lib/<i>propertiesFilename</i></code> file <li>read <code>META-INF/services/<i>factoryId</i></code> file <li>use fallback classname </ol>", "id": "48690"}
{"code": "public static com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){\n  return getService().deleteFoo(foo);\n}\n", "nl": "Deletes the foo from the database. Also notifies the appropriate model listeners.", "id": "43446"}
{"code": "public void register(Command cmd){\n  for (  World world : Photon.getServer().getWorlds()) {\n    world.getCommandRegistry().register(cmd,null);\n  }\n}\n", "nl": "Registers a server command.", "id": "49890"}
{"code": "private void ensureOpen() throws IOException {\n  if (buf == null)   throw new IOException(\"Stream closed\");\n}\n", "nl": "Checks to make sure that the stream has not been closed", "id": "41968"}
{"code": "public void cleanDomainMap(String canonOrgDN){\nsynchronized (canonicalDomainMap) {\n    canonicalDomainMap.remove(canonOrgDN);\n  }\nsynchronized (domainMap) {\n    domainMap.remove(canonOrgDN);\n  }\n}\n", "nl": "This is a public method used by the notification event listener thread to clean the domain map, when organization entry is changed.", "id": "43919"}
{"code": "public void releaseEglSurface(){\n  mEglCore.releaseSurface(mEGLSurface);\n  mEGLSurface=EGL14.EGL_NO_SURFACE;\n  mWidth=mHeight=-1;\n}\n", "nl": "Release the EGL surface.", "id": "36504"}
{"code": "protected final void outputLineSep() throws IOException {\n  m_writer.write(m_lineSep,0,m_lineSepLen);\n}\n", "nl": "Output a system-dependent line break.", "id": "46762"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireServerEntropyElement createRequireServerEntropyElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireServerEntropyElementImpl();\n}\n", "nl": "Create an instance of RequireServerEntropyElement", "id": "8152"}
{"code": "public boolean containsNone(){\n  return prompts.contains(PROMPT_NONE);\n}\n", "nl": "Determines if the prompt contains 'none'.", "id": "12407"}
{"code": "public Node.Nodes parse(String inFileName) throws JasperException, IOException {\n  isTagFile=ctxt.isTagFile();\n  directiveOnly=false;\n  return doParse(inFileName,null,ctxt.getTagFileJar());\n}\n", "nl": "Parses a JSP page or tag file. This is invoked by the compiler.", "id": "35705"}
{"code": "public synchronized BukkitTask runTaskLaterAsynchronously(Plugin plugin,long delay) throws IllegalArgumentException, IllegalStateException {\n  checkState();\n  return setupId(Bukkit.getScheduler().runTaskLaterAsynchronously(plugin,(Runnable)this,delay));\n}\n", "nl": "<b>Asynchronous tasks should never access any API in Bukkit. Great care should be taken to assure the thread-safety of asynchronous tasks.</b> <p> Schedules this to run asynchronously after the specified number of server ticks.", "id": "34727"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_nodeinsertbeforeinvalidnodetype.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "6398"}
{"code": "private void write(String str) throws IOException {\n  writer.write(str);\n}\n", "nl": "Writes a String to the output.", "id": "10000"}
{"code": "public String toString(){\n  return (\"ADPrincipal:  \" + name);\n}\n", "nl": "Return a string representation of this <code>ADPrincipal</code>.", "id": "49479"}
{"code": "public boolean isAllowed(SSOToken token,String resourceName,String actionName) throws PolicyException, SSOException {\n  PolicyManager.initAdminSubject();\n  return (isAllowed(token,resourceName,actionName,new HashMap()));\n}\n", "nl": "Evaluates a simple privilege of boolean type. The privilege indicate if the user can perform specified action on the specified resource. Invoking this method would result in <code>PolicyException</code>, if the syntax for the <code>actionName</code> is not declared to be boolean, in the service schema.", "id": "14209"}
{"code": "@Override public int hashCode(){\n  int code=super.hashCode();\n  if (eCondition != null) {\n    code+=eCondition.hashCode();\n  }\n  if (pConditionName != null) {\n    code+=pConditionName.hashCode();\n  }\n  return code;\n}\n", "nl": "Returns hash code of the object", "id": "21393"}
{"code": "public static ComponentUI createUI(JComponent a){\n  ComponentUI mui=new MultiDesktopPaneUI();\n  return MultiLookAndFeel.createUIs(mui,((MultiDesktopPaneUI)mui).uis,a);\n}\n", "nl": "Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI.  Otherwise, just returns the UI object obtained from the default <code>LookAndFeel</code>.", "id": "57184"}
{"code": "public void paint(Graphics a,JComponent b){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).paint(a,b);\n  }\n}\n", "nl": "Invokes the <code>paint</code> method on each UI handled by this object.", "id": "32508"}
{"code": "public boolean isEnabled(){\n  return enabled;\n}\n", "nl": "Whether the service is enabled.", "id": "29599"}
{"code": "public boolean isConnected(){\n  return connectedRS.get().isConnected();\n}\n", "nl": "Check if the broker is connected to a ReplicationServer and therefore ready to received and send Replication Messages.", "id": "48036"}
{"code": "public void makeImmutable(){\n  if (isMutable) {\n    if (idpList != null) {\n      idpList.makeImmutable();\n    }\n    if (requesterIDList != null) {\n      for (      RequesterID reqID : requesterIDList) {\n        reqID.makeImmutable();\n      }\n    }\n    isMutable=false;\n  }\n}\n", "nl": "Makes this object immutable.", "id": "12424"}
{"code": "private String convertIntToIntString(int quoteParam){\n  String quoteParamString=(new Integer(quoteParam)).toString();\n  return quoteParamString;\n}\n", "nl": "convertIntToIntString - private method to convert Integer to Integer String", "id": "21019"}
{"code": "public com.sun.identity.liberty.ws.disco.jaxb11.StatusElement createStatusElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.disco.jaxb11.impl.StatusElementImpl();\n}\n", "nl": "Create an instance of StatusElement", "id": "42175"}
{"code": "public void map(Context context,MessageBytes uri,MappingData mappingData) throws IOException {\n  ContextVersion contextVersion=contextObjectToContextVersionMap.get(context);\n  uri.toChars();\n  CharChunk uricc=uri.getCharChunk();\n  uricc.setLimit(-1);\n  internalMapWrapper(contextVersion,uricc,mappingData);\n}\n", "nl": "Map the specified URI relative to the context, mutating the given mapping data.", "id": "21258"}
{"code": "public static void main(String[] args){\n  int exitCode=main(args,System.out,System.err);\n  if (exitCode != 0) {\n    System.exit(exitCode);\n  }\n}\n", "nl": "Parse the command line arguments and create an RC script that can be used to control the server.", "id": "7305"}
{"code": "protected static boolean isCallerValid(){\n  if (!checkCaller) {\n    return (true);\n  }\n  return (isCallerValid(CLASSNAME));\n}\n", "nl": "Check to determine if the calling class has the privilege to execute sensitive methods which returns passwords, decrypts data, etc. This method uses the stack trace to determine the calling class.", "id": "27688"}
{"code": "protected Expression mod(int opPos) throws TransformerException {\n  return compileOperation(new Mod(),opPos);\n}\n", "nl": "Compile a 'mod' operation.", "id": "49795"}
{"code": "public static String decEncode(final String value){\n  return encode(value,5,10);\n}\n", "nl": "Convert string chars to decimal unicode (5 digits)", "id": "8834"}
{"code": "public boolean hasNext(){\n  return pos < length;\n}\n", "nl": "Determines if the GSER String contains at least one character to be read.", "id": "51925"}
{"code": "private void readObject(java.io.ObjectInputStream in) throws NotSerializableException {\n  throw new NotSerializableException(\"Not serializable.\");\n}\n", "nl": "Throws NotSerializableException, since PreferenceChangeEvent objects are not intended to be serializable.", "id": "53960"}
{"code": "public void enableWindowsService() throws ApplicationException {\n  int code=ConfigureWindowsService.enableService(System.out,System.err);\n  LocalizableMessage errorMessage=INFO_ERROR_ENABLING_WINDOWS_SERVICE.get();\nswitch (code) {\ncase ConfigureWindowsService.SERVICE_ENABLE_SUCCESS:\n    break;\ncase ConfigureWindowsService.SERVICE_ALREADY_ENABLED:\n  break;\ndefault :\nthrow new ApplicationException(ReturnCode.WINDOWS_SERVICE_ERROR,errorMessage,null);\n}\n}\n", "nl": "This methods enables this server as a Windows service.", "id": "47631"}
{"code": "public void addProgressUpdateListener(ProgressUpdateListener l){\n  listeners.add(l);\n}\n", "nl": "Adds a ProgressUpdateListener that will be notified of updates in the install progress.", "id": "57071"}
{"code": "@Override protected Object createSsoServerPolicyAgentsMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){\n  if (server != null)   policyAgentsGroup=new SsoServerPolicyAgentsImpl(this,server);\n else   policyAgentsGroup=new SsoServerPolicyAgentsImpl(this);\n  return policyAgentsGroup;\n}\n", "nl": "Factory method for \"SsoServerPolicyAgents\" group MBean. You can redefine this method if you need to replace the default generated MBean class with your own customized class.", "id": "49273"}
{"code": "public void addMember(Guid guid) throws UMSException {\n  Principal principal=getPrincipal();\n  if (principal == null) {\n    throw new IllegalArgumentException(i18n.getString(IUMSConstants.BAD_PRINCIPAL_HDL));\n  }\n  DataLayer.getInstance().addAttributeValue(principal,guid,MEMBER_ATTR_NAME,this.getDN());\n}\n", "nl": "Adds a member to the role. The change is saved to persistent storage.", "id": "39607"}
{"code": "public static void clear(Context context){\n  try {\n    PendingActionContext pendingActionContext=context.asContext(PendingActionContext.class);\n    pendingActionContext.clear();\n  }\n catch (  IllegalArgumentException e) {\n    logger.debug(\"No PendingActionContext found\");\n  }\n}\n", "nl": "Clears a PendingActionContext if found, removing the pending action data and marking it as no longer pending.", "id": "6389"}
{"code": "void onShutdown(){\n}\n", "nl": "Performs any further cleanup following run state transition on invocation of shutdown.  A no-op here, but used by ScheduledThreadPoolExecutor to cancel delayed tasks.", "id": "34358"}
{"code": "protected void initCipher() throws IOException {\n  try {\n    cipher.init(Cipher.DECRYPT_MODE,key,params);\n  }\n catch (  InvalidKeyException e) {\n    throw new IOException(e);\n  }\ncatch (  InvalidAlgorithmParameterException e) {\n    throw new IOException(e);\n  }\n}\n", "nl": "Initializes the cipher.", "id": "6315"}
{"code": "private boolean hasBookendSpaces(String name){\n  return (name == null || name.isEmpty() || name.trim().length() < name.length());\n}\n", "nl": "Validates that the username passed to it is not made shorter by performing trim(), and also that it's not null or empty.", "id": "3626"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodetextnodename.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "563"}
{"code": "public void addSigner(PrivateKey key,X509Certificate cert,String digestOID,CMSAttributeTableGenerator signedAttrGen,CMSAttributeTableGenerator unsignedAttrGen) throws IllegalArgumentException {\n  addSigner(key,cert,getEncOID(key,digestOID),digestOID,signedAttrGen,unsignedAttrGen);\n}\n", "nl": "add a signer with extra signed/unsigned attributes based on generators.", "id": "8718"}
{"code": "public boolean isNullable(){\n  return nullable;\n}\n", "nl": "Returns a boolean indicating if the field is nullable.", "id": "58476"}
{"code": "public boolean hasNext(){\n  return hasNextInetSocketAddress() || hasNextProxy() || hasNextPostponed();\n}\n", "nl": "Returns true if there's another route to attempt. Every address has at least one route.", "id": "47144"}
{"code": "protected void beginMarkedContent(PdfName tag,PdfDictionary dict){\n  markedContentStack.push(new CanvasTag(tag).setProperties(dict));\n}\n", "nl": "Add to the marked content stack", "id": "41653"}
{"code": "public static POIResult newInstance(String category){\n  POIResult fragment=new POIResult();\n  Bundle args=new Bundle();\n  args.putString(ARG_CATEGORY,category);\n  fragment.setArguments(args);\n  return fragment;\n}\n", "nl": "Use this factory method to create a new instance of this fragment using the provided parameters.", "id": "38404"}
{"code": "public int nextNode(){\n  if ((m_next) < this.size()) {\n    int next=this.elementAt(m_next);\n    m_next++;\n    return next;\n  }\n else   return DTM.NULL;\n}\n", "nl": "Returns the next node in the set and advances the position of the iterator in the set. After a DTMIterator is created, the first call to nextNode() returns the first node in the set.", "id": "32226"}
{"code": "private static String buildGlobalAciValue(String... aciFields){\n  return _buildAciValue(ATTR_AUTHZ_GLOBAL_ACI + \": \",aciFields);\n}\n", "nl": "Create an ACI string with the specified variable string list. The method uses the global ACI attribute type name, instead of \"aci\".", "id": "20802"}
{"code": "public void windowClosing(WindowEvent e){\n  setSelected(false);\n}\n", "nl": "Deselect the menu when the popup is closed from outside.", "id": "5283"}
{"code": "public AccountService retrieveByUsername(String username,Handler<AsyncResult<Account>> resultHandler){\n  delegate.retrieveByUsername(username,resultHandler);\n  return this;\n}\n", "nl": "Retrieve the user account with certain `username`.", "id": "33397"}
{"code": "public Environment createEnvironment(String xml) throws XACMLException {\n  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.ENVIRONMENT,xml);\n  if (obj == null) {\n    return new EnvironmentImpl(xml);\n  }\n else {\n    return (Environment)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>Environment</code>. The return object is immutable.", "id": "48389"}
{"code": "public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {\n  return super.newInstance(javaContentInterface);\n}\n", "nl": "Create an instance of the specified Java content interface.", "id": "18144"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ps.EncryptedNameIdentifierElement createEncryptedNameIdentifierElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.EncryptedNameIdentifierElementImpl();\n}\n", "nl": "Create an instance of EncryptedNameIdentifierElement", "id": "7966"}
{"code": "public boolean remove(Object attrval){\n  int i=find(attrval);\n  if (i >= 0) {\n    values.removeElementAt(i);\n    return true;\n  }\n  return false;\n}\n", "nl": "Removes a specified value from this attribute. <p> By default, <tt>Object.equals()</tt> is used when comparing <tt>attrVal</tt> with this attribute's values except when <tt>attrVal</tt> is an array. For an array, each element of the array is checked using <tt>Object.equals()</tt>. A subclass may use schema information to determine equality.", "id": "20267"}
{"code": "public static World createWorld(WorldCreator creator){\n  return server.createWorld(creator);\n}\n", "nl": "Creates or loads a world with the given name using the specified options. <p> If the world is already loaded, it will just return the equivalent of getWorld(creator.name()).", "id": "41685"}
{"code": "public com.sun.identity.wsfederation.jaxb.xmlsig.DigestValueElement createDigestValueElement(byte[] value) throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.DigestValueElementImpl(value);\n}\n", "nl": "Create an instance of DigestValueElement", "id": "58390"}
{"code": "public int compareTo(TIFFField o){\n  if (o == null) {\n    throw new IllegalArgumentException();\n  }\n  int oTag=o.getTag();\n  if (tag < oTag) {\n    return -1;\n  }\n else   if (tag > oTag) {\n    return 1;\n  }\n else {\n    return 0;\n  }\n}\n", "nl": "Compares this <code>TIFFField</code> with another <code>TIFFField</code> by comparing the tags. <p><b>Note: this class has a natural ordering that is inconsistent with <code>equals()</code>.</b>", "id": "21200"}
{"code": "public void warning(SAXParseException e) throws SAXException {\n}\n", "nl": "Receive notification of a parser warning. <p>The default implementation does nothing.  Application writers may override this method in a subclass to take specific actions for each warning, such as inserting the message in a log file or printing it to the console.</p>", "id": "46543"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.WssUsernameToken10Element createWssUsernameToken10Element() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssUsernameToken10ElementImpl();\n}\n", "nl": "Create an instance of WssUsernameToken10Element", "id": "14950"}
{"code": "@Override public String toString(){\n  return \"Internal Connection Handler\";\n}\n", "nl": "Retrieves a string representation of this connection handler.", "id": "30129"}
{"code": "public String createHttpConnector(String parent,String address,int port) throws Exception {\n  return createConnector(parent,address,port,false,false);\n}\n", "nl": "Create a new HttpConnector", "id": "44087"}
{"code": "public void prepend(String s){\n  content=s + content;\n}\n", "nl": "Prepends a string to this string.", "id": "53399"}
{"code": "public int size(){\n  return _frameTop;\n}\n", "nl": "Get size of the stack.", "id": "30639"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(removeAttributeNS02.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "8705"}
{"code": "public static int countByUuid_C(java.lang.String uuid,long companyId){\n  return getPersistence().countByUuid_C(uuid,companyId);\n}\n", "nl": "Returns the number of foos where uuid = &#63; and companyId = &#63;.", "id": "33174"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(documentimportnode21.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "50101"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(characterdatadeletedataexceedslength.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "30030"}
{"code": "@Override public boolean equals(Object theObject){\n  if (theObject instanceof Timestamp) {\n    return equals((Timestamp)theObject);\n  }\n  return false;\n}\n", "nl": "Tests to see if this timestamp is equal to a supplied object.", "id": "52121"}
{"code": "public static MatchedValuesFilter createLessOrEqualFilter(String rawAttributeType,ByteString rawAssertionValue){\n  Reject.ifNull(rawAttributeType,rawAssertionValue);\n  return new MatchedValuesFilter(LESS_OR_EQUAL_TYPE,rawAttributeType,rawAssertionValue,null,null,null,null);\n}\n", "nl": "Creates a new lessOrEqual filter with the provided information.", "id": "17604"}
{"code": "public static ImageData create(java.awt.Image image,java.awt.Color color) throws java.io.IOException {\n  return AwtImageDataFactory.create(image,color,false);\n}\n", "nl": "Gets an instance of an Image from a java.awt.Image", "id": "11517"}
{"code": "public boolean containsAudience(String audience){\n  if ((audience != null) && !(audience.length() == 0)) {\n    if (_audience.contains((String)audience)) {\n      return true;\n    }\n else {\n      return false;\n    }\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Returns true if a particular audience string is contained within this <code>AudienceRestrictionCondition</code> object", "id": "13248"}
{"code": "private byte[] randomSalt(){\nsynchronized (saltLock) {\n    int sb1=randomSaltIndex.nextInt(SALT_CHARS.length);\n    int sb2=randomSaltIndex.nextInt(SALT_CHARS.length);\n    return new byte[]{SALT_CHARS[sb1],SALT_CHARS[sb2]};\n  }\n}\n", "nl": "Return a random 2-byte salt.", "id": "13563"}
{"code": "public void removeNotify(){\n  dropTargetContextPeer=null;\n  transferable=null;\n}\n", "nl": "Called when disassociated with the <code>DropTargetContextPeer</code>.", "id": "56556"}
{"code": "public byte[] encodePassword(IdType type,Set<String> passwordValues){\n  if (type.equals(IdType.USER)) {\n    if (passwordValues != null && !passwordValues.isEmpty()) {\n      return encodePassword(passwordValues.iterator().next());\n    }\n  }\n  return null;\n}\n", "nl": "Encodes the password to use the \"correct\" character encoding for AD.", "id": "20786"}
{"code": "public boolean hasDisplayableAttributes(String serviceName){\n  SchemaType st=SchemaType.USER;\n  if ((getEntityType() != null) && (!getEntityType().equals(\"user\"))) {\n    st=SchemaType.DYNAMIC;\n  }\n  return hasAttributeSchema(serviceName,st);\n}\n", "nl": "This is a convenience method to check if there is  displayable  attributes for a given service.", "id": "5995"}
{"code": "public boolean isRootVisible(){\n  return rootVisible;\n}\n", "nl": "Returns true if the root node of the tree is displayed.", "id": "19425"}
{"code": "int convertToDigit(char ch){\n  int val=ch - zeroDigit;\n  return (val >= 0 && val <= 9) ? val : -1;\n}\n", "nl": "Checks whether the character is a digit, based on the currently set zero character.", "id": "22440"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic128Sha256Rsa15Element createBasic128Sha256Rsa15Element() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic128Sha256Rsa15ElementImpl();\n}\n", "nl": "Create an instance of Basic128Sha256Rsa15Element", "id": "20112"}
{"code": "public static TypeReference newExceptionReference(int exceptionIndex){\n  return new TypeReference((THROWS << 24) | (exceptionIndex << 8));\n}\n", "nl": "Returns a reference to the type of an exception, in a 'throws' clause of a method.", "id": "26814"}
{"code": "public void showSecondaryMenu(){\n  mSlidingMenu.showSecondaryMenu();\n}\n", "nl": "Open the SlidingMenu and show the secondary menu view. Will default to the regular menu if there is only one.", "id": "17188"}
{"code": "public int next(){\n  return this.icuIterator.next();\n}\n", "nl": "Obtains the next collation element in the source string.", "id": "22839"}
{"code": "public void handleTblServerConfigXMLServerButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {\n  ServerConfigXMLAddServerViewBean vb=(ServerConfigXMLAddServerViewBean)getViewBean(ServerConfigXMLAddServerViewBean.class);\n  unlockPageTrail();\n  vb.setPageSessionAttribute(ServerConfigXMLAddServerViewBean.PG_ATTR_SERVER_GROUP_TYPE,\"sms\");\n  passPgSessionMap(vb);\n  vb.forwardTo(getRequestContext());\n}\n", "nl": "Handles add server group entry request.", "id": "51680"}
{"code": "@Override public String toString(){\n  return toString;\n}\n", "nl": "Returns a String representation of the object.", "id": "14345"}
{"code": "public boolean isEmpty(){\n  return type == EMPTY;\n}\n", "nl": "Check if empty", "id": "19269"}
{"code": "public void update(final BackendDescriptor backend){\n  backendName.setText(backend.getBackendID());\n}\n", "nl": "Updates the contents of the panel with the provided backend.", "id": "26779"}
{"code": "@Override public int hashCode(){\n  return oid.hashCode();\n}\n", "nl": "Returns the hash code for this matching rule use. It will be calculated as the hash code of the numeric OID.", "id": "44013"}
{"code": "protected void initializeGlobalArguments(Collection<Argument> args,ArgumentGroup argGroup) throws ArgumentException {\n  for (  Argument arg : args) {\n    addGlobalArgument(arg,argGroup);\n  }\n  setFilePropertiesArgument(propertiesFileArg);\n}\n", "nl": "Initialize the global options with the provided set of arguments.", "id": "30052"}
{"code": "public boolean equals(Object object){\n  return (super.equals(object) && object instanceof NumberUpSupported);\n}\n", "nl": "Returns whether this number up supported attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: <OL TYPE=1> <LI> <CODE>object</CODE> is not null. <LI> <CODE>object</CODE> is an instance of class NumberUpSupported. <LI> This number up supported attribute's members and <CODE>object</CODE>'s members are the same. </OL>", "id": "53989"}
{"code": "public final float readFloat() throws IOException {\n  return Float.intBitsToFloat(readInt());\n}\n", "nl": "Reads a big-endian 32-bit float from the current position in this file. Blocks until four bytes have been read, the end of the file is reached or an exception is thrown.", "id": "27001"}
{"code": "@Override public boolean isValidToken(SSOToken token){\n  return isValidToken(token,true);\n}\n", "nl": "Checks the validity of the single sign on token", "id": "7520"}
{"code": "public void startup(){\n  try {\n    (new LoginLogoutMapping()).init(servletct);\n  }\n catch (  Exception ex) {\n  }\n}\n", "nl": "Starts the instance of OpenAM", "id": "31267"}
{"code": "public static DecodeException fatalError(final LocalizableMessage message){\n  return new DecodeException(message,true,null);\n}\n", "nl": "Creates a new fatal decode exception with the provided message. The associated input source can no longer be used.", "id": "47191"}
{"code": "public String nextString() throws DataFormatException {\n  try {\n    final int offset=findZeroSeparator();\n    if (offset > 0) {\n      final String s=bytes.readStringUtf8(offset);\n      skipZeroSeparator();\n      return s;\n    }\n    skipZeroSeparator();\n    return null;\n  }\n catch (  IndexOutOfBoundsException e) {\n    throw new DataFormatException(e.getMessage());\n  }\n}\n", "nl": "Reads the next UTF8-encoded string.", "id": "3891"}
{"code": "public boolean isOnLine1(){\n  return onLine1;\n}\n", "nl": "Determine if the intersecting point lands on line 1 or not.", "id": "17411"}
{"code": "public Object peek(int n){\n  try {\n    return m_map[m_firstFree - (1 + n)];\n  }\n catch (  ArrayIndexOutOfBoundsException e) {\n    throw new EmptyStackException();\n  }\n}\n", "nl": "Looks at the object at the position the stack counting down n items.", "id": "35200"}
{"code": "private static boolean fieldsEqual(Object a,Object b){\n  return a == b || (a != null && a.equals(b));\n}\n", "nl": "Checks to see if two objects are equal either as nulls or through their comparator", "id": "55659"}
{"code": "public void removeAllElements(){\n  m_firstFree=0;\n  m_buildCache=m_map0;\n  m_buildCacheStartIndex=0;\n}\n", "nl": "Wipe it out. Currently defined as equivalent to setSize(0).", "id": "37735"}
{"code": "private Object writeReplace(){\n  return new SerializationProxy(this);\n}\n", "nl": "Returns a <a href=\"../../../../serialized-form.html#java.util.concurrent.atomic.DoubleAccumulator.SerializationProxy\"> SerializationProxy</a> representing the state of this instance.", "id": "5491"}
{"code": "@Override public void onPause(){\n  if (mAdView != null) {\n    mAdView.pause();\n  }\n  super.onPause();\n}\n", "nl": "Called when leaving the activity", "id": "47548"}
{"code": "public long memPercentToBytes(int percent){\n  return (reservableMemory * percent / 100) * ONE_MEGABYTE;\n}\n", "nl": "Translates a percentage of memory to the equivalent number of bytes.", "id": "41764"}
{"code": "public static boolean isPrintable(final byte b){\n  return 32 <= b && b <= 126;\n}\n", "nl": "Returns whether the byte is a printable ASCII character.", "id": "42841"}
{"code": "public boolean isOffRoute(Position position,RouteLeg route) throws ServicesException, TurfException {\n  for (int stepIndex=0; stepIndex < route.getSteps().size(); stepIndex++) {\n    if (isInStep(position,route,stepIndex)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Method to check whether the position given is outside the route using the threshold.", "id": "39189"}
{"code": "@Override public ExpandRoomComplete other_room_complete(ExpandRoomComplete p_room){\n  ExpandRoom result=other_room(p_room);\n  if (result == null)   return null;\n  if (result instanceof ExpandRoomComplete)   return (ExpandRoomComplete)result;\n  return null;\n}\n", "nl": "Returns the other room of this door, or null,  if p_roon is neither equal to this.first_room nor to this.second_room, or if the other room is not a CompleteExpansionRoom.", "id": "55445"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.XACMLAuthzDecisionQueryDescriptorType createXACMLAuthzDecisionQueryDescriptorType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.XACMLAuthzDecisionQueryDescriptorTypeImpl();\n}\n", "nl": "Create an instance of XACMLAuthzDecisionQueryDescriptorType", "id": "21217"}
{"code": "public com.sun.identity.saml2.jaxb.assertion.ConditionsType createConditionsType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl();\n}\n", "nl": "Create an instance of ConditionsType", "id": "31475"}
{"code": "public org.omg.CORBA.TypeCode _type(){\n  return ORB.init().get_primitive_tc(TCKind.tk_value);\n}\n", "nl": "Returns the <code>TypeCode</code> object corresponding to the value held in the Holder.", "id": "29132"}
{"code": "public void insertElementAt(int value,int at){\n  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));\n  super.insertElementAt(value,at);\n}\n", "nl": "Inserts the specified node in this vector at the specified index. Each component in this vector with an index greater or equal to the specified index is shifted upward to have an index one greater than the value it had previously.", "id": "9382"}
{"code": "static boolean exists(){\n  return getFile().exists();\n}\n", "nl": "Checks if the license file exists.", "id": "36241"}
{"code": "private TypeSpec.Builder generateTypeBuilder(){\n  String clzName=parser.getClzName();\n  clzName=clzName + SUFFIX;\n  return TypeSpec.classBuilder(clzName).addJavadoc(\"This class is generated by annotation @Params\").addModifiers(Modifier.PUBLIC);\n}\n", "nl": "create generate class builder", "id": "32546"}
{"code": "public TimeUnit timeunit(){\n  return values.timeunit;\n}\n", "nl": "Heartbeat period time unit getter.", "id": "28772"}
{"code": "public org.omg.DynamicAny.DynAny copy(){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"copy\",_opsClass);\n  DynEnumOperations $self=(DynEnumOperations)$so.servant;\n  try {\n    return $self.copy();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked. The operation is polymorphic, that is, invoking it on one of the types derived from DynAny, such as DynStruct, creates the derived type but returns its reference as the DynAny base type.", "id": "44488"}
{"code": "@Override public int hashCode(){\n  return zeroDigit + positiveSign + negativeSign+ decimalSeparator;\n}\n", "nl": "A hash code for this DecimalStyle.", "id": "26990"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic128Rsa15Element createBasic128Rsa15Element() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic128Rsa15ElementImpl();\n}\n", "nl": "Create an instance of Basic128Rsa15Element", "id": "37880"}
{"code": "public void addNotify(){\n  super.addNotify();\n  firePropertyChange(\"ancestor\",null,getParent());\n  registerWithKeyboardManager(false);\n  registerNextFocusableComponent();\n}\n", "nl": "Notifies this component that it now has a parent component. When this method is invoked, the chain of parent components is set up with <code>KeyboardAction</code> event listeners. This method is called by the toolkit internally and should not be called directly by programs.", "id": "46079"}
{"code": "public final int intValue(){\n  return this.value;\n}\n", "nl": "Gets the integer value indicating this level.", "id": "44695"}
{"code": "public int compareTo(Short object){\n  return compare(value,object.value);\n}\n", "nl": "Compares this object to the specified short object to determine their relative order.", "id": "15617"}
{"code": "public boolean isNull(){\n  return !linkSourceContent.isSuccess() && extendedTrim(linkSourceContent.getHtmlCode()).equals(\"\") && !isImage(linkSourceContent.getFinalUrl());\n}\n", "nl": "Verifies if the content could not be retrieved", "id": "36858"}
{"code": "public CMSSignedData generate(CMSProcessable content,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {\n  return generate(content,CMSUtils.getProvider(sigProvider));\n}\n", "nl": "generate a signed object that for a CMS Signed Data object using the given provider.", "id": "21834"}
{"code": "static Promise<Float> blockingPromiseFloat(final Duration duration){\n  return new BlockingPromise<>(duration);\n}\n", "nl": "Returns a Float promise Added to make static imports possible. Create a blocking promise. NOTE BLOCKING PROMISES ARE FOR LEGACY INTEGRATION AND TESTING ONLY!!!", "id": "20631"}
{"code": "public static AuthorizationIdentityResponseControl newControl(final String authorizationID){\n  return new AuthorizationIdentityResponseControl(false,authorizationID);\n}\n", "nl": "Creates a new authorization identity response control using the provided authorization ID.", "id": "21881"}
{"code": "public synchronized void release(){\n  for (int i=current; i >= 0; i--) {\n    doRelease(handlers[i]);\n  }\n}\n", "nl": "Calls the release() method of all available tag handlers in this tag handler pool.", "id": "6988"}
{"code": "public boolean isVolatile(){\n  return Modifier.isVolatile(flags);\n}\n", "nl": "Utility method to query the modifier flags of this member.", "id": "33157"}
{"code": "BaseDnRegistry copy(){\n  final BaseDnRegistry registry=new BaseDnRegistry(true);\n  registry.baseDNs.putAll(baseDNs);\n  registry.publicNamingContexts.putAll(publicNamingContexts);\n  registry.allPublicNamingContexts.putAll(allPublicNamingContexts);\n  registry.privateNamingContexts.putAll(privateNamingContexts);\n  return registry;\n}\n", "nl": "Returns a copy of this registry.", "id": "36203"}
{"code": "private static void connectStartTLS(){\n  secureConnect();\n}\n", "nl": "Authenticate using StartTLS.", "id": "11747"}
{"code": "private Object readResolve(){\n  return object;\n}\n", "nl": "Returns the object that will replace this one.", "id": "27941"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsaddr.AttributedUnsignedLongType createAttributedUnsignedLongType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.AttributedUnsignedLongTypeImpl();\n}\n", "nl": "Create an instance of AttributedUnsignedLongType", "id": "3413"}
{"code": "@NonNull public static Animator createCircularReveal(@NonNull View rootView,@IdRes int startViewId,@NonNull Interpolator interpolator){\n  final View startView=rootView.findViewById(startViewId);\n  return createCircularReveal(startView,rootView,interpolator);\n}\n", "nl": "Create a simple circular reveal for a given view id within a root view. This reveal will start from the start view's boundaries until it fills the root layout.", "id": "16405"}
{"code": "public static FileBasedArgument rootDNPwdFileArgument() throws ArgumentException {\n  return FileBasedArgument.builder(\"rootUserPasswordFile\").shortIdentifier(OPTION_SHORT_BINDPWD_FILE).description(INFO_ARGUMENT_DESCRIPTION_ROOTPWFILE.get()).valuePlaceholder(INFO_ROOT_USER_PWD_FILE_PLACEHOLDER.get()).buildArgument();\n}\n", "nl": "Returns the \"directory manager DN password file\" file argument.", "id": "10243"}
{"code": "@Override public Promise<ResourceResponse,ResourceException> deleteInstance(Context context,String resourceId,DeleteRequest request){\n  return RestUtils.generateUnsupportedOperation();\n}\n", "nl": "Unsupported by this endpoint.", "id": "44424"}
{"code": "public void allowDetachToRelease(boolean allowRelease){\n  m_allowRelease=allowRelease;\n}\n", "nl": "Specify if it's OK for detach to release the iterator for reuse.", "id": "6702"}
{"code": "public static String formatTime(final Time time){\n  return formatDate(time,\"hh:mm\");\n}\n", "nl": "Format time.", "id": "39804"}
{"code": "public void rewind(){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"rewind\",_opsClass);\n  DynArrayOperations $self=(DynArrayOperations)$so.servant;\n  try {\n    $self.rewind();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Is equivalent to seek(0).", "id": "6645"}
{"code": "public static <C extends ConfigurationClient,S extends Configuration>CreateSubCommandHandler<C,S> create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,OptionalRelationDefinition<C,S> r) throws ArgumentException {\n  return new CreateSubCommandHandler<>(parser,p,r,null,p.child(r));\n}\n", "nl": "Creates a new create-xxx sub-command for an optional relation.", "id": "57744"}
{"code": "public com.sun.identity.saml2.jaxb.xmlenc.AgreementMethodType.RecipientKeyInfo createAgreementMethodTypeRecipientKeyInfo() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlenc.impl.AgreementMethodTypeImpl.RecipientKeyInfoImpl();\n}\n", "nl": "Create an instance of AgreementMethodTypeRecipientKeyInfo", "id": "19055"}
{"code": "public AMSearchResults searchUsers(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(USER),getSearchFilter(AMObject.USER),wildcard,avPairs,searchControl);\n}\n", "nl": "Searches for users in this organization using wildcards and attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be specifed so that DNs of users with matching attribute-value pairs will be returned.", "id": "11396"}
{"code": "public static Entry modifyEntry(final Entry entry,final Modification change,final Collection<? super ByteString> conflictingValues) throws LdapException {\n  return modifyEntry0(entry,change,conflictingValues,true);\n}\n", "nl": "Applies the provided modification to an entry. This method implements \"permissive\" modify semantics, recording attempts to add duplicate values or attempts to remove values which do not exist in the provided collection if provided.", "id": "11666"}
{"code": "public void handleButton2Request(RequestInvocationEvent event){\n  forwardToAgentsViewBean();\n}\n", "nl": "Handles cancel request.", "id": "56204"}
{"code": "public static boolean isValidIP(String ipAddress){\n  return ValidateIPaddress.isIPv4(ipAddress) || ValidateIPaddress.isIPv6(ipAddress);\n}\n", "nl": "Determines if an IP address is valid.", "id": "7814"}
{"code": "public void elementDecl(String name,String model) throws SAXException {\n  if (null != m_resultDeclHandler)   m_resultDeclHandler.elementDecl(name,model);\n}\n", "nl": "Report an element type declaration. <p>The content model will consist of the string \"EMPTY\", the string \"ANY\", or a parenthesised group, optionally followed by an occurrence indicator.  The model will be normalized so that all whitespace is removed,and will include the enclosing parentheses.</p>", "id": "50741"}
{"code": "protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, java.io.IOException {\n  processRequest(request,response);\n}\n", "nl": "Handles the HTTP <code>POST</code> method.", "id": "14436"}
{"code": "public static String generateTOTP(byte[] key,String time,String returnDigits){\n  return generateTOTP(key,time,returnDigits,\"HmacSHA1\");\n}\n", "nl": "This method generates a TOTP value for the given set of parameters.", "id": "49893"}
{"code": "static void selfInterrupt(){\n  Thread.currentThread().interrupt();\n}\n", "nl": "Convenience method to interrupt current thread.", "id": "5739"}
{"code": "public static PermissiveModifyRequestControl newControl(final boolean isCritical){\n  return isCritical ? CRITICAL_INSTANCE : NONCRITICAL_INSTANCE;\n}\n", "nl": "Creates a new permissive modify request control having the provided criticality.", "id": "283"}
{"code": "public JsonObject build(){\n  jsonObject.put(key,list);\n  return jsonObject;\n}\n", "nl": "Builds the json array and inserts it into its parent json object.", "id": "16298"}
{"code": "public final void removeElementAt(int i){\n  if (i > m_firstFree)   System.arraycopy(m_map,i + 1,m_map,i,m_firstFree);\n else   m_map[i]=java.lang.Integer.MIN_VALUE;\n  m_firstFree--;\n}\n", "nl": "Deletes the component at the specified index. Each component in this vector with an index greater or equal to the specified index is shifted downward to have an index one smaller than the value it had previously.", "id": "52886"}
{"code": "public final String yytext(){\n  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);\n}\n", "nl": "Returns the text matched by the current regular expression.", "id": "16420"}
{"code": "public void reset(){\n  super.reset();\n  if (null != m_firstWalker) {\n    m_lastUsedWalker=m_firstWalker;\n    m_firstWalker.setRoot(m_context);\n  }\n}\n", "nl": "Reset the iterator.", "id": "27578"}
{"code": "public boolean resourceNameTypesEnabled(){\n  return false;\n}\n", "nl": "Returns true if generated types are supported for resource name fields.", "id": "43812"}
{"code": "public static XMPDateTime convertToDate(String rawValue) throws XMPException {\n  if (rawValue == null || rawValue.length() == 0) {\n    throw new XMPException(\"Empty convert-string\",XMPError.BADVALUE);\n  }\n else {\n    return ISO8601Converter.parse(rawValue);\n  }\n}\n", "nl": "Converts a string value to an <code>XMPDateTime</code>.", "id": "40194"}
{"code": "public static void fill(byte[] array,int start,int end,byte value){\n  Arrays.checkStartAndEnd(array.length,start,end);\n  for (int i=start; i < end; i++) {\n    array[i]=value;\n  }\n}\n", "nl": "Fills the specified range in the array with the specified element.", "id": "40079"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(getAttributeNS03.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "39027"}
{"code": "@Override public String toString(){\n  return gserValue;\n}\n", "nl": "Returns the GSER encoded String value.", "id": "35151"}
{"code": "public void activate() throws AMException, SSOException {\n  setStringAttribute(statusAN,\"active\");\n  store();\n}\n", "nl": "Activates the resource", "id": "42481"}
{"code": "public static double readSwappedDouble(byte[] data,int offset){\n  return Double.longBitsToDouble(readSwappedLong(data,offset));\n}\n", "nl": "Reads a \"double\" value from a byte array at a given offset. The value is converted to the opposed endian system while reading.", "id": "57219"}
{"code": "protected String arrayTypeName(Field field){\n  return arrayTypeName(elementTypeName(field));\n}\n", "nl": "Returns a name for an array field's type. <p>May be overridden by individual language contexts.", "id": "34059"}
{"code": "public void waitForMonitor(){\n  while (!monitorDone) {\n    StaticUtils.sleep(10);\n  }\n}\n", "nl": "Waits for the monitor thread to complete any necessary processing.  This method will not return until the monitor thread has stopped running.", "id": "17716"}
{"code": "public static String formatFullTime(final Date date){\n  return JKDateTimeUtil.formatDate(date,\"hh:mm:ss SSS\");\n}\n", "nl": "Format full time.", "id": "53194"}
{"code": "@Override public Set<DefaultPooledObjectInfo> listAllObjects(){\n  final Set<DefaultPooledObjectInfo> result=new HashSet<>(allObjects.size());\n  for (  final PooledObject<T> p : allObjects.values()) {\n    result.add(new DefaultPooledObjectInfo(p));\n  }\n  return result;\n}\n", "nl": "Provides information on all the objects in the pool, both idle (waiting to be borrowed) and active (currently borrowed). <p> Note: This is named listAllObjects so it is presented as an operation via JMX. That means it won't be invoked unless the explicitly requested whereas all attributes will be automatically requested when viewing the attributes for an object in a tool like JConsole.", "id": "48285"}
{"code": "@Override public String toString(){\n  return backend.getUserFriendlyName().toString();\n}\n", "nl": "Return a user friendly readable name for this backend.", "id": "31181"}
{"code": "public static PropertyException illegalPropertyValueException(final PropertyDefinition<?> pd,final Object value){\n  return new PropertyException(pd,createMessage(pd,value));\n}\n", "nl": "Creates a new illegal property value exception.", "id": "35054"}
{"code": "public synchronized void startPreview(){\n  Camera theCamera=camera;\n  if (theCamera != null && !previewing) {\n    theCamera.startPreview();\n    previewing=true;\n    autoFocusManager=new AutoFocusManager(context,camera);\n  }\n}\n", "nl": "Asks the camera hardware to begin drawing preview frames to the screen.", "id": "28244"}
{"code": "@Override protected Object createSsoServerEntitlementSvcMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){\n  if (server != null)   entitlementsGroup=new SsoServerEntitlementSvcImpl(this,server);\n else   entitlementsGroup=new SsoServerEntitlementSvcImpl(this);\n  return entitlementsGroup;\n}\n", "nl": "Factory method for \"SsoServerEntitlementSvc\" group MBean. You can redefine this method if you need to replace the default generated MBean class with your own customized class.", "id": "49727"}
{"code": "public static boolean checkIfFileIsHtmlFile(final String file,final IConfiguration configuration){\n  return configuration.getHTMLExtensions().contains(getFileExtension(file).toLowerCase());\n}\n", "nl": "check if file has html file extension.", "id": "50430"}
{"code": "public boolean isEnabled(){\n  return parent.isEnabled();\n}\n", "nl": "Determine if the object is enabled.  Objects that are enabled will also have the AccessibleState.ENABLED state set in their AccessibleStateSet.", "id": "9326"}
{"code": "@Override public void backgroundProcess(){\n  if (started) {\n    if (watchEnabled) {\n      count=(count + 1) % processDeployFrequency;\n      if (count == 0) {\n        watcher.check();\n      }\n    }\n    removeInvalidFileFactories();\n  }\n}\n", "nl": "Call watcher to check for deploy changes", "id": "19324"}
{"code": "public void postSingleFile(Context context,Handler h,String fileParam,String fileName,String fileType,InputStream inputStream){\n  postSingleFile(context,h,null,fileParam,fileName,fileType,inputStream);\n}\n", "nl": "upload file without post params", "id": "4616"}
{"code": "public void fatal(Object message,Throwable t){\n}\n", "nl": "Do nothing", "id": "44574"}
{"code": "private LocalDateTime with(LocalDate newDate,LocalTime newTime){\n  if (date == newDate && time == newTime) {\n    return this;\n  }\n  return new LocalDateTime(newDate,newTime);\n}\n", "nl": "Returns a copy of this date-time with the new date and time, checking to see if a new object is in fact required.", "id": "18573"}
{"code": "@Override public void initialize() throws UpgradeException {\n  if (isCurrentVersionLessThan(AM_13,true)) {\n    identifyApplicationsAndPoliciesRequiringUpgrade();\n  }\n}\n", "nl": "Default applications will have resource types associated with them during the schema upgrade, so here we list the other applications that does not already have resource types. We also list policies that does not yet have resource types.", "id": "23736"}
{"code": "public byte[] remainingBytesZeroTerminated(){\n  final int length=byteArray.length - (bytes.position() + 1);\n  final byte[] result=nextByteArray(length);\n  bytes.skip(1);\n  return result;\n}\n", "nl": "Return a new byte array containing all remaining bytes in this ByteArrayScanner bar the last one which is a zero terminated byte (compatible with legacy code).", "id": "53919"}
{"code": "private static void deleteEntry(DN dstDN){\n  DeleteOperation delOperation=getRootConnection().processDelete(dstDN);\n  if (delOperation.getResultCode() != ResultCode.SUCCESS) {\n    logger.debug(INFO_TRUSTSTORESYNC_DELETE_FAILED,dstDN,delOperation.getErrorMessage());\n  }\n}\n", "nl": "Delete an entry from the local trust store.", "id": "5131"}
{"code": "public Object clone(){\n  AMIdentitySubject theClone=null;\n  try {\n    theClone=(AMIdentitySubject)super.clone();\n  }\n catch (  CloneNotSupportedException e) {\n    throw new InternalError();\n  }\n  if (subjectValues != null) {\n    theClone.subjectValues=new HashSet();\n    theClone.subjectValues.addAll(subjectValues);\n  }\n  return theClone;\n}\n", "nl": "Creates and returns a copy of this object.", "id": "22350"}
{"code": "public void backendPopulated(Set<BackendDescriptor> backends){\n  BackendPopulatedEvent ev=new BackendPopulatedEvent(backends);\n  for (  BackendPopulatedListener listener : backendPopulatedListeners) {\n    listener.backendPopulated(ev);\n  }\n}\n", "nl": "Informs that a set of backends have been populated.  The method will notify to all the backend populated listeners.", "id": "33501"}
{"code": "public void removeFactory(FileMessage msg){\n  fileFactories.remove(msg.getFileName());\n}\n", "nl": "Remove file (war) from messages", "id": "23913"}
{"code": "public static int calculateShadowColorLeftBottom(int baseColor){\n  return Color.rgb((int)(Color.red(baseColor) * 173f / 214),(int)(Color.green(baseColor) * 209f / 230),(int)(Color.blue(baseColor) * 113f / 133));\n}\n", "nl": "Calculate the shadow color face left-bottom corner.", "id": "57092"}
{"code": "public static List<String> readLines(File file,String encoding) throws IOException {\n  return readLines(file,Charsets.toCharset(encoding));\n}\n", "nl": "Reads the contents of a file line by line to a List of Strings. The file is always closed.", "id": "25314"}
{"code": "public void makeImmutable(){\n}\n", "nl": "Makes the object immutable", "id": "28544"}
{"code": "public void add(FilterMap filterMap){\nsynchronized (lock) {\n    FilterMap results[]=Arrays.copyOf(array,array.length + 1);\n    results[array.length]=filterMap;\n    array=results;\n  }\n}\n", "nl": "Add a filter mapping at the end of the current set of filter mappings.", "id": "38146"}
{"code": "@Override public View create(Element elem){\n  return new PasswordView(elem);\n}\n", "nl": "Creates a view (PasswordView) for an element.", "id": "53833"}
{"code": "@Override public void addChangeListener(ConfigurationChangeListener<ExternalChangelogDomainCfg> listener){\n}\n", "nl": "Register to be notified when this External Changelog Domain is changed.", "id": "38973"}
{"code": "public static float signum(float f){\n  return (f == 0.0f || Float.isNaN(f)) ? f : copySign(1.0f,f);\n}\n", "nl": "Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero. <p>Special Cases: <ul> <li> If the argument is NaN, then the result is NaN. <li> If the argument is positive zero or negative zero, then the result is the same as the argument. </ul>", "id": "3035"}
{"code": "public void addSigner(PrivateKey key,byte[] subjectKeyID,String digestOID,AttributeTable signedAttr,AttributeTable unsignedAttr) throws IllegalArgumentException {\n  addSigner(key,subjectKeyID,getEncOID(key,digestOID),digestOID,signedAttr,unsignedAttr);\n}\n", "nl": "add a signer with extra signed/unsigned attributes.", "id": "38633"}
{"code": "public void close(){\n}\n", "nl": "Close the stream.  This method does not release the buffer, since its contents might still be required. Note: Invoking this method in this class will have no effect.", "id": "51050"}
{"code": "public static String gensalt(int log_rounds){\n  return gensalt(log_rounds,new SecureRandom());\n}\n", "nl": "Generate a salt for use with the BCrypt.hashpw() method.", "id": "33999"}
{"code": "ElemTemplateElement popElemTemplateElement(){\n  return (ElemTemplateElement)m_elems.pop();\n}\n", "nl": "Get the current XSLTElementProcessor from the top of the stack.", "id": "19372"}
{"code": "public static void putObject(String key,Object value){\n  if (mGson == null || value == null) {\n    return;\n  }\n  putString(key,mGson.toJson(value));\n}\n", "nl": "Put a object in the preferences editor.", "id": "56382"}
{"code": "public void runTest() throws Throwable {\n  Document doc;\n  NodeList nameList;\n  doc=(Document)load(\"hc_staff\",false);\n  nameList=doc.getElementsByTagName(\"strong\");\n  assertSize(\"documentGetElementsByTagNameLengthAssert\",5,nameList);\n}\n", "nl": "Runs the test case.", "id": "424"}
{"code": "public static Map<String,File> filesInDirectory(String dir,String regex,boolean recursively){\n  return filesInDirectory(new File(dir),regex,recursively);\n}\n", "nl": "get files in the directory. the result would be a fileName =&gt; File map.", "id": "16503"}
{"code": "public static DN rootDN(){\n  return ROOT_DN;\n}\n", "nl": "Returns the Root DN. The Root DN does not contain and RDN components and is superior to all other DNs.", "id": "30373"}
{"code": "public static CipherProvider cipherProvider(String transformation,String preferredProvider,int maxSize){\n  return new PerThreadCipherProvider(new JCECipherProvider(transformation,preferredProvider),maxSize);\n}\n", "nl": "Gets a pre-configured Cipher provider that caches ciphers in a per-thread LRU cache.", "id": "1467"}
{"code": "public final PlaPointInt rotate_90_deg(int p_factor,PlaPointInt p_pole){\n  PlaVectorInt v=difference_by(p_pole);\n  v=v.rotate_90_deg(p_factor);\n  return p_pole.translate_by(v);\n}\n", "nl": "Turns this point by p_factor times 90 degree around p_pole.", "id": "26898"}
{"code": "public void close() throws IOException {\n  if (!closed) {\n    try {\n      byte buffer[]=new byte[BUFFER_SIZE];\n      while (read(buffer) >= 0) {\n      }\n    }\n  finally {\n      closed=true;\n    }\n  }\n}\n", "nl": "<p>Reads until the end of the known length of content.</p> <p>Does not close the underlying socket input, but instead leaves it primed to parse the next response.</p>", "id": "7559"}
{"code": "public void endDocument() throws org.xml.sax.SAXException {\n}\n", "nl": "Receive notification of the end of a document. <p>The SAX parser will invoke this method only once, and it will be the last method invoked during the parse.  The parser shall not invoke this method until it has either abandoned parsing (because of an unrecoverable error) or reached the end of input.</p>", "id": "35540"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.assertion.ConditionAbstractType createConditionAbstractType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionAbstractTypeImpl();\n}\n", "nl": "Create an instance of ConditionAbstractType", "id": "29202"}
{"code": "public Builder names(final Collection<String> names){\n  this.names.addAll(names);\n  return this;\n}\n", "nl": "Adds the provided user friendly names.", "id": "56206"}
{"code": "private void stopAutoStopRecording(){\n  if (currentRecord.getRecordProperties().isAutoStopEnabled()) {\n    if (currentRecord.getRecordProperties().isAutoStopTimeEnabled()) {\n      currentScheduledAutoStopTime.cancel(false);\n    }\n    if (currentRecord.getRecordProperties().isAutoStopFileSizeEnabled()) {\n      currentScheduledAutoStopFileSize.cancel(false);\n    }\n  }\n}\n", "nl": "Stop threads in charge of stopping the recording", "id": "32871"}
{"code": "public void verify(PublicKey key) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException {\n}\n", "nl": "Does nothing", "id": "29988"}
{"code": "public static int collectDefaults(){\n  int flags=0;\n  for (  Feature f : values()) {\n    if (f.enabledByDefault()) {\n      flags|=f.getMask();\n    }\n  }\n  return flags;\n}\n", "nl": "Method that calculates bit set (flags) of all features that are enabled by default.", "id": "53969"}
{"code": "@Override public synchronized void close() throws SecurityException {\n  flushAndClose();\n}\n", "nl": "Close the current output stream. <p> The <tt>Formatter</tt>'s \"tail\" string is written to the stream before it is closed.  In addition, if the <tt>Formatter</tt>'s \"head\" string has not yet been written to the stream, it will be written before the \"tail\" string.", "id": "25497"}
{"code": "public Builder removeAllOptionalAttributes(){\n  this.optionalAttributeOIDs.clear();\n  return this;\n}\n", "nl": "Clears the list of attribute types that entries subject to this DIT content rule may contain.", "id": "25696"}
{"code": "public int sp2px(float spValue){\n  final float fontScale=mContext.getResources().getDisplayMetrics().scaledDensity;\n  return (int)(spValue * fontScale + 0.5f);\n}\n", "nl": "Paint.setTextSize(float textSize) default unit is px.", "id": "25611"}
{"code": "private boolean isIgnoreErrors(){\n  return ignoreErrors.isPresent();\n}\n", "nl": "Force to ignore the errors during the upgrade process. Continues rather than fails.", "id": "46420"}
{"code": "private void writeDataToFile(File file) throws FileNotFoundException, IOException {\n  FileOutputStream fos=new FileOutputStream(file);\n  try {\n    fos.write(CONTENT_AS_BYTES);\n  }\n  finally {\n    fos.close();\n  }\n}\n", "nl": "Initializes test file.", "id": "7936"}
{"code": "public org.omg.CORBA.Policy _get_policy(int policy_type){\n  throw new org.omg.CORBA.NO_IMPLEMENT(reason);\n}\n", "nl": "Throws an <code>org.omg.CORBA.NO_IMPLEMENT</code> exception with the message \"This is a locally constrained object.\" This method does not apply to local objects and is therefore not implemented. This method is the default implementation of the <code>org.omg.CORBA.Object</code> method.<P>", "id": "41975"}
{"code": "@NonNull public static Interpolator pingPong(Interpolator interpolator){\n  return join(interpolator,reverse(interpolator));\n}\n", "nl": "Plays an interpolator and reverses it, each part taking half the duration of the animation", "id": "5949"}
{"code": "private Object readResolve() throws ObjectStreamException {\n  if (primitiveArray) {\n    return convertFromWrapperToPrimitiveTypes();\n  }\n else {\n    return this;\n  }\n}\n", "nl": "Replace/resolve the object read from the stream before it is returned to the caller.", "id": "36333"}
{"code": "public boolean containsKey(Object key){\n  return isValidKey(key) && vals[((Enum<?>)key).ordinal()] != null;\n}\n", "nl": "Returns <tt>true</tt> if this map contains a mapping for the specified key.", "id": "11153"}
{"code": "protected void init(String owner,MethodNode m) throws AnalyzerException {\n}\n", "nl": "Initializes this analyzer. This method is called just before the execution of control flow analysis loop in #analyze. The default implementation of this method does nothing.", "id": "20222"}
{"code": "public Set searchAssignableDynamicGroups(String wildcard,Map avPairs,int level) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP),wildcard,avPairs,level);\n}\n", "nl": "Searches for assignable dynamic groups in this organizational unit using wildcards and attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be specifed so that DNs of dynamic groups with matching attribute-value pairs will be returned.", "id": "10270"}
{"code": "@Override public int read() throws IOException {\nsynchronized (lock) {\n    checkNotClosed();\n    int ch=readChar();\n    if (lastWasCR && ch == '\\n') {\n      ch=readChar();\n    }\n    lastWasCR=false;\n    return ch;\n  }\n}\n", "nl": "Reads a single character from this reader and returns it with the two higher-order bytes set to 0. If possible, BufferedReader returns a character from the buffer. If there are no characters available in the buffer, it fills the buffer and then returns a character. It returns -1 if there are no more characters in the source reader.", "id": "24360"}
{"code": "public InputStream newInputStream(int index) throws IOException {\nsynchronized (DiskLruCache.this) {\n    if (entry.currentEditor != this) {\n      throw new IllegalStateException();\n    }\n    if (!entry.readable) {\n      return null;\n    }\n    try {\n      return new FileInputStream(entry.getCleanFile(index));\n    }\n catch (    FileNotFoundException e) {\n      return null;\n    }\n  }\n}\n", "nl": "Returns an unbuffered input stream to read the last committed value, or null if no value has been committed.", "id": "25274"}
{"code": "public boolean isLeadingEdge(){\n  return isLeadingEdge;\n}\n", "nl": "Returns <code>true</code> if the leading edge of the character was hit.", "id": "32516"}
{"code": "public TemplatesHandler newTemplatesHandler() throws TransformerConfigurationException {\n  return new StylesheetHandler(this);\n}\n", "nl": "Create a new Transformer object that performs a copy of the source to the result.", "id": "32610"}
{"code": "protected Expression gte(int opPos) throws TransformerException {\n  return compileOperation(new Gte(),opPos);\n}\n", "nl": "Compile a '>=' operation.", "id": "33951"}
{"code": "public void paintToolBarDragWindowBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n}\n", "nl": "Paints the border of the window containing the tool bar when it has been detached from it's primary frame.", "id": "38462"}
{"code": "@Override public int hashCode(){\n  return printer.hashCode();\n}\n", "nl": "<p>Returns a hashcode compatible with equals.</p>", "id": "42752"}
{"code": "public boolean isMimeTypeEqual(String mimeType){\n  if (mimeType == null) {\n    throw new NullPointerException(\"mimeType\");\n  }\n  if (this.mimeType == null) {\n    return false;\n  }\n  try {\n    return this.mimeType.match(new MimeType(mimeType));\n  }\n catch (  MimeTypeParseException mtpe) {\n    return false;\n  }\n}\n", "nl": "Returns whether the string representation of the MIME type passed in is equivalent to the MIME type of this <code>DataFlavor</code>. Parameters are not included in the comparison.", "id": "32996"}
{"code": "public static Optional<String> trimEnd(final String input,String... chars){\n  return Optional.ofNullable(input).filter(null).map(null);\n}\n", "nl": "Removes trailing characters from string.", "id": "35990"}
{"code": "public static void bindContext(Object obj,Context context,Object token){\n  if (ContextAccessController.checkSecurityToken(obj,token)) {\n    objectBindings.put(obj,context);\n  }\n}\n", "nl": "Binds an object and a naming context.", "id": "2917"}
{"code": "public void onOffhook() throws IllegalStateException {\n  currentState.offhook();\n}\n", "nl": "Action for phone on off-hook.", "id": "29763"}
{"code": "public boolean isNodeChild(TreeNode aNode){\n  boolean retval;\n  if (aNode == null) {\n    retval=false;\n  }\n else {\n    if (getChildCount() == 0) {\n      retval=false;\n    }\n else {\n      retval=(aNode.getParent() == this);\n    }\n  }\n  return retval;\n}\n", "nl": "Returns true if <code>aNode</code> is a child of this node.  If <code>aNode</code> is null, this method returns false.", "id": "37344"}
{"code": "public static MatchedValuesFilter createExtensibleMatchFilter(String rawAttributeType,String matchingRuleID,ByteString rawAssertionValue){\n  Reject.ifNull(rawAttributeType,matchingRuleID,rawAssertionValue);\n  return new MatchedValuesFilter(EXTENSIBLE_MATCH_TYPE,rawAttributeType,rawAssertionValue,null,null,null,matchingRuleID);\n}\n", "nl": "Creates a new extensibleMatch filter with the provided information.", "id": "19010"}
{"code": "public boolean isMutable(){\n  return isMutable;\n}\n", "nl": "Returns value true if object is mutable.", "id": "2681"}
{"code": "public String[] processName(String qName,String[] parts,boolean isAttribute){\n  String[] name=currentContext.processName(qName,isAttribute);\n  if (name == null)   return null;\n  System.arraycopy(name,0,parts,0,3);\n  return parts;\n}\n", "nl": "Process a raw XML 1.0 name. <p>This method processes a raw XML 1.0 name in the current context by removing the prefix and looking it up among the prefixes currently declared.  The return value will be the array supplied by the caller, filled in as follows:</p> <dl> <dt>parts[0]</dt> <dd>The Namespace URI, or an empty string if none is in use.</dd> <dt>parts[1]</dt> <dd>The local name (without prefix).</dd> <dt>parts[2]</dt> <dd>The original raw name.</dd> </dl> <p>All of the strings in the array will be internalized.  If the raw name has a prefix that has not been declared, then the return value will be null.</p> <p>Note that attribute names are processed differently than element names: an unprefixed element name will received the default Namespace (if any), while an unprefixed element name will not.</p>", "id": "47522"}
{"code": "static <T>ReplayPromise<Void> allReplay(final Duration timeout,final long time,final List<Promise<T>> promises){\n  return allReplay(timeout,time,promises.toArray(new Promise[promises.size()]));\n}\n", "nl": "All promises must complete.", "id": "48172"}
{"code": "@SuppressWarnings(\"unused\") public static int valueRangeLimit(int value,int startValue,int endValue){\n  return (int)ScWidget.valueRangeLimit((float)value,(float)startValue,(float)endValue);\n}\n", "nl": "Limit number within a values range. This method not consider the sign and the upper and lower values limit order.", "id": "29480"}
{"code": "@Override public void reset() throws IOException {\n  fInputStream.reset();\n}\n", "nl": "Reset the stream.  If the stream has been marked, then attempt to reposition it at the mark.  If the stream has not been marked, then attempt to reset it in some way appropriate to the particular stream, for example by repositioning it to its starting point.  Not all character-input streams support the reset() operation, and some support reset() without supporting mark().", "id": "40673"}
{"code": "public IStoreFactory findStoreFactory(String aClassName){\n  StoreDescription desc=findDescription(aClassName);\n  if (desc != null)   return desc.getStoreFactory();\n else   return null;\n}\n", "nl": "Find factory from class name.", "id": "12405"}
{"code": "public void installUI(JComponent a){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).installUI(a);\n  }\n}\n", "nl": "Invokes the <code>installUI</code> method on each UI handled by this object.", "id": "51591"}
{"code": "public void copyContent(TagField field){\n  throw new UnsupportedOperationException();\n}\n", "nl": "This method copies the data of the given field to the current data.<br>", "id": "54672"}
{"code": "public synchronized StringBuffer delete(int start,int end){\n  delete0(start,end);\n  return this;\n}\n", "nl": "Deletes a range of characters.", "id": "19322"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(createDocument07.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "37449"}
{"code": "public static void parseTaskTab(String taskSchedule) throws DirectoryException {\n  parseTaskTab(taskSchedule,new boolean[][]{null,null,null,null,null},false);\n}\n", "nl": "Parse and validate recurring task schedule.", "id": "36105"}
{"code": "public void unread(byte[] b) throws IOException {\n  unread(b,0,b.length);\n}\n", "nl": "Pushes back an array of bytes by copying it to the front of the pushback buffer.  After this method returns, the next byte to be read will have the value <code>b[0]</code>, the byte after that will have the value <code>b[1]</code>, and so forth.", "id": "37561"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.assertion.AssertionType createAssertionType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AssertionTypeImpl();\n}\n", "nl": "Create an instance of AssertionType", "id": "50780"}
{"code": "public String encodeBody(){\n  return encodeBody(new StringBuilder()).toString();\n}\n", "nl": "Encode into a canonical string.", "id": "29279"}
{"code": "@After public void clean(){\n  mute(null);\n  mute(null);\n  mute(null);\n}\n", "nl": "Cleanups after each tests.", "id": "26656"}
{"code": "public AuthzDecisionStatement createAuthzDecisionStatement(org.w3c.dom.Element elem) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHZ_DECISION_STATEMENT,elem);\n  if (obj == null) {\n    return null;\n  }\n else {\n    return (AuthzDecisionStatement)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>AuthzDecisionStatement</code>. The return object is immutable.", "id": "1572"}
{"code": "public void clear(){\n  values.clear();\n}\n", "nl": "Removes all attribute values from this attribute builder.", "id": "9125"}
{"code": "public final boolean equals(Object node){\n  try {\n    return equals((Node)node);\n  }\n catch (  ClassCastException cce) {\n    return false;\n  }\n}\n", "nl": "Test for equality based on node number.", "id": "20285"}
{"code": "@Override public void onAttachFragment(final Fragment childFragment){\n  delegate.onAttachFragment(childFragment);\n}\n", "nl": "Called when a fragment is attached as a child of this fragment. <p>This is called after the attached fragment's <code>onAttach</code> and before the attached fragment's <code>onCreate</code> if the fragment has not yet had a previous call to <code>onCreate</code>.</p>", "id": "53621"}
{"code": "public R visitIPAddressMask(IPAddressMaskPropertyDefinition pd,AddressMask v,P p){\n  return visitUnknown(pd,v,p);\n}\n", "nl": "Visit a IP address mask.", "id": "20070"}
{"code": "public void body(String namespace,String name,String text) throws Exception {\n}\n", "nl": "This method is called when the body of a matching XML element is encountered.  If the element has no body, this method is not called at all. The default implementation is a NO-OP.", "id": "35994"}
{"code": "public void requestSecondsUntilPasswordExpiration(){\n  operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_PASSWORD_EXPIRATION);\n}\n", "nl": "Returns the seconds until password expiration.", "id": "44060"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(setAttributeNS07.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "46440"}
{"code": "public boolean isValidID3v2FrameIdentifier(String identifier){\n  Matcher m=ID3v24Frame.validFrameIdentifier.matcher(identifier);\n  return m.matches();\n}\n", "nl": "Does the frame identifier meet the syntax for a idv3v2 frame identifier. must start with a capital letter and only contain capital letters and numbers", "id": "42712"}
{"code": "public boolean hasPostDial(){\n  return parameters.getValue(POSTDIAL) != null;\n}\n", "nl": "returns true if th PostDial field exists", "id": "42560"}
{"code": "public void append(String str){\n  Document doc=getDocument();\n  if (doc != null) {\n    try {\n      doc.insertString(doc.getLength(),str,null);\n    }\n catch (    BadLocationException e) {\n    }\n  }\n}\n", "nl": "Appends the given text to the end of the document.  Does nothing if the model is null or the string is null or empty.", "id": "52795"}
{"code": "private boolean addRowInDsIntTable(){\n  return false;\n}\n", "nl": "addRowInDsIntTable Not Supported.", "id": "43553"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(domimplementationcreatedocumenttype04.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "37730"}
{"code": "public static String reverse(final String value){\n  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);\n  return new StringBuilder(value).reverse().toString();\n}\n", "nl": "Reverse the input String", "id": "5313"}
{"code": "@SuppressWarnings(\"unchecked\") private V report(int s) throws ExecutionException {\n  Object x=outcome;\n  if (s == NORMAL)   return (V)x;\n  if (s >= CANCELLED)   throw new CancellationException();\n  throw new ExecutionException((Throwable)x);\n}\n", "nl": "Returns result or throws exception for completed task.", "id": "6367"}
{"code": "private void ensureOpen() throws IOException {\n  if (closed) {\n    throw new IOException(\"Stream closed\");\n  }\n}\n", "nl": "Checks to make sure that this stream has not been closed.", "id": "51510"}
{"code": "public void paintSliderBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintBorder(context,g,x,y,w,h,orientation);\n}\n", "nl": "Paints the border of a slider. This implementation invokes the method of the same name without the orientation.", "id": "25265"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodehaschildnodesfalse.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "33326"}
{"code": "public final Collection<? extends Certificate> generateCertificates(InputStream inStream) throws CertificateException {\n  return spiImpl.engineGenerateCertificates(inStream);\n}\n", "nl": "Generates and initializes a collection of (unrelated) certificates from the provided input stream.", "id": "29502"}
{"code": "public static void main(String[] args){\n  int exitCode=mainSearch(args,true,System.out,System.err);\n  if (exitCode != 0) {\n    System.exit(filterExitCode(exitCode));\n  }\n}\n", "nl": "Provides the command line arguments to the <CODE>mainSearch</CODE> method so that they can be processed.", "id": "32462"}
{"code": "public void addHeader(Header header){\n  if (header == null) {\n    return;\n  }\n  headers.add(header);\n}\n", "nl": "Adds the given header to the group.  The order in which this header was added is preserved.", "id": "12139"}
{"code": "public int depth(){\n  if (elementStack == null) {\n    return 0;\n  }\n  return elementStack.size();\n}\n", "nl": "Fetches the current depth of element tree.", "id": "18636"}
{"code": "private SessionOperations logAndWrap(SessionID sessionID,SessionOperations op,SessionMonitorType type){\n  if (debug.messageEnabled()) {\n    debug.message(sessionID + \": \" + op.getClass().getSimpleName()+ \" selected.\");\n  }\n  return new MonitoredOperations(op,type,store);\n}\n", "nl": "Inline logging function.", "id": "7322"}
{"code": "public boolean contains_padstack(freert.library.LibPadstack p_padstack){\n  for (  BrdViaInfo curr_info : this.vinfo_list) {\n    if (curr_info.get_padstack() == p_padstack) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Returns true, if this rule contains a via with padstack p_padstack", "id": "25297"}
{"code": "private void startConversationsClient(){\n  if (mConversationsClient != null) {\n    return;\n  }\n  mConversationsClient=TwilioConversationsClient.create(mAccessManager,conversationsClientListener());\n  mConversationsClient.listen();\n}\n", "nl": "Start the TwilioConversationsClient.", "id": "27687"}
{"code": "protected void registerLayer(PdfLayer layer){\n  if (layer == null)   throw new IllegalArgumentException(\"layer argument is null\");\n  layers.add(layer);\n}\n", "nl": "This method registers a new layer in the OCProperties.", "id": "19071"}
{"code": "public synchronized void removePropertyChangeListener(PropertyChangeListener listener){\n  if (changeSupport == null) {\n    return;\n  }\n  changeSupport.removePropertyChangeListener(listener);\n}\n", "nl": "Removes a PropertyChangeListener from the listener list. This removes a PropertyChangeListener that was registered for all properties.", "id": "2312"}
{"code": "public static void hideToast(){\n  if (null != toast) {\n    toast.cancel();\n  }\n}\n", "nl": "Hide the toast, if any.", "id": "30746"}
{"code": "@SuppressWarnings(\"unchecked\") public static <M>Function<M,M,NeverThrowsException> identityFunction(){\n  return (Function<M,M,NeverThrowsException>)IDENTITY;\n}\n", "nl": "Returns a function which always returns the value that it was provided with.", "id": "45997"}
{"code": "private static boolean equalsMayBeNull(Object obj1,Object obj2){\n  return (obj2 == obj1) || ((null != obj1) && (null != obj2) && obj2.equals(obj1));\n}\n", "nl": "Tell if two objects are equal, when either one may be null. If both are null, they are considered equal.", "id": "146"}
{"code": "public boolean contains(Object child){\n  return children.contains(child);\n}\n", "nl": "Is the child specified affected by the event?", "id": "19025"}
{"code": "public static boolean isKeyChar(final char c,final boolean allowCompatChars){\n  final ASCIICharProp cp=ASCIICharProp.valueOf(c);\n  return cp != null ? cp.isKeyChar(allowCompatChars) : false;\n}\n", "nl": "Indicates whether the provided character is a keychar.", "id": "36428"}
{"code": "public void cancelCellEditing(){\n  delegate.cancelCellEditing();\n}\n", "nl": "Forwards the message from the <code>CellEditor</code> to the <code>delegate</code>.", "id": "52304"}
{"code": "public boolean isFresh(){\n  return (m_next == 0);\n}\n", "nl": "Tells if this NodeSet is \"fresh\", in other words, if the first nextNode() that is called will return the first node in the set.", "id": "30733"}
{"code": "private final boolean isSpecialPath(final String path){\n  return !allowSpecialPaths && (path.toUpperCase(Locale.ENGLISH).startsWith(\"/WEB-INF\") || path.toUpperCase(Locale.ENGLISH).startsWith(\"/META-INF\"));\n}\n", "nl": "Checks whether a given path refers to a resource under <code>WEB-INF</code> or <code>META-INF</code>.", "id": "10360"}
{"code": "public void runTest() throws Throwable {\n  Document doc;\n  Element createdNode;\n  Node parentNode;\n  doc=(Document)load(\"hc_staff\",false);\n  createdNode=doc.createElement(\"br\");\n  parentNode=createdNode.getParentNode();\n  assertNull(\"parentNode\",parentNode);\n}\n", "nl": "Runs the test case.", "id": "53546"}
{"code": "public StringBuilder encodeMessage(StringBuilder retval){\n  if (statusLine != null) {\n    statusLine.encode(retval);\n    super.encodeSIPHeaders(retval);\n  }\n else {\n    retval=super.encodeSIPHeaders(retval);\n  }\n  return retval;\n}\n", "nl": "Encode the message except for the body.", "id": "1261"}
{"code": "public void create(Token token,ResultHandler<Token,?> handler) throws CoreTokenException {\n  Reject.ifNull(token);\n  try {\n    taskExecutor.execute(token.getTokenId(),taskFactory.create(token,handler));\n  }\n catch (  DataLayerException e) {\n    throw new CoreTokenException(\"Error in data layer\",e);\n  }\n}\n", "nl": "The CTS Token to create in the persistent store.", "id": "21065"}
{"code": "public void recompose(StylesheetRoot root){\n  root.recomposeAttributeSets(this);\n}\n", "nl": "This function is called during recomposition to control how this element is composed.", "id": "19130"}
{"code": "public void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {\n  try {\n    writeNormalizedChars(ch,start,length,m_lineSepUse);\n  }\n catch (  IOException ioe) {\n    throw new SAXException(ioe);\n  }\n}\n", "nl": "If available, when the disable-output-escaping attribute is used, output raw text without escaping.", "id": "42370"}
{"code": "boolean isIgnoreErrorsMode(){\n  return isIgnoreErrorsMode;\n}\n", "nl": "Returns the ignore error mode.", "id": "52725"}
{"code": "public String toUpperCamel(){\n  return toCamel(CaseFormat.UPPER_CAMEL);\n}\n", "nl": "Returns the identifier in upper-camel format.", "id": "15335"}
{"code": "private <T>boolean removeModification(PropertyEditorModification<T> mod){\n  return mods.remove(mod);\n}\n", "nl": "Removes a modification from the list of modifications that have been performed.", "id": "22064"}
{"code": "@BeforeClass public void disableLogging(){\n  TestCaseUtils.setDefaultLogLevel(Level.SEVERE);\n}\n", "nl": "Disables logging before the tests.", "id": "56373"}
{"code": "public void eventDispatched(AWTEvent event){\n  getListener().eventDispatched(event);\n}\n", "nl": "Forwards the AWT event to the listener delegate.", "id": "57920"}
{"code": "public static AddRequest newAddRequest(final String name){\n  return Requests.newAddRequest(name).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));\n}\n", "nl": "Creates an LDAP add request that will propagate the common audit transaction id if the target LDAP server supports it (i.e., is OpenDJ).", "id": "55785"}
{"code": "@Indexable(type=IndexableType.REINDEX) @Override public Foo addFoo(Foo foo){\n  foo.setNew(true);\n  return fooPersistence.update(foo);\n}\n", "nl": "Adds the foo to the database. Also notifies the appropriate model listeners.", "id": "41537"}
{"code": "public void removeAttributeValue(Principal principal,Guid guid,String name,String value) throws UMSException {\n  modifyAttributeValue(ModificationType.DELETE,principal,guid,name,value);\n}\n", "nl": "Removes value for an attribute and saves the change in the database.", "id": "44777"}
{"code": "public boolean containsExtensionElementURI(String uri){\n  if (null == m_ExtensionElementURIs)   return false;\n  return m_ExtensionElementURIs.contains(uri);\n}\n", "nl": "Find out if the given \"extension-element-prefix\" property is defined.", "id": "48859"}
{"code": "@Override public int read() throws IOException {\n  if (buf == null) {\n    throw new IOException();\n  }\n  if (pos < buf.length) {\n    return (buf[pos++] & 0xFF);\n  }\n  return in.read();\n}\n", "nl": "Reads a single byte from this stream and returns it as an integer in the range from 0 to 255. If the pushback buffer does not contain any available bytes then a byte from the source input stream is returned. Blocks until one byte has been read, the end of the source stream is detected or an exception is thrown.", "id": "29724"}
{"code": "public String toString(){\n  return toString(true,false);\n}\n", "nl": "Creates a String representation of the  attribute statement", "id": "37518"}
{"code": "public void shutdown(){\nsynchronized (msgQueue) {\n    msgQueue.clear();\n    msgQueue.notify();\n    msgQueue.notifyAll();\n  }\n  DirectoryServer.deregisterMonitorProvider(this);\n}\n", "nl": "Shutdown this handler.", "id": "34979"}
{"code": "public boolean isSessionBlacklistingEnabled(){\n  return hotSwappableSessionServiceConfig.sessionBlacklistEnabled;\n}\n", "nl": "Whether session blacklisting is enabled for stateless session logout. Defaults to false.", "id": "7764"}
{"code": "@Override public boolean exists(UUID uuid){\n  if (uuid == null) {\n    return false;\n  }\n  BoundStatement bs=new BoundStatement(existStmt);\n  bindUUIDWhere(bs,uuid);\n  return (getSession().execute(bs).one().getLong(0) > 0);\n}\n", "nl": "Checks to see if an IndexCreatedEvent exists by UUID.", "id": "33275"}
{"code": "public void refreshVisibility(){\n  this.visibilityManager.refreshVisibility();\n  fireTableStructureChanged();\n}\n", "nl": "Refresh visibility.", "id": "39374"}
{"code": "public void endDocument() throws SAXException {\n}\n", "nl": "Receive notification of the end of the document. <p>By default, do nothing.  Application writers may override this method in a subclass to take specific actions at the end of a document (such as finalising a tree or closing an output file).</p>", "id": "9261"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodegetlastchild.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "2684"}
{"code": "public void installUI(JComponent a){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).installUI(a);\n  }\n}\n", "nl": "Invokes the <code>installUI</code> method on each UI handled by this object.", "id": "52178"}
{"code": "public static TypeReference newTypeParameterReference(int sort,int paramIndex){\n  return new TypeReference((sort << 24) | (paramIndex << 16));\n}\n", "nl": "Returns a reference to a type parameter of a generic class or method.", "id": "13996"}
{"code": "public void destroy() throws Exception {\n}\n", "nl": "Final processing.", "id": "26873"}
{"code": "public static Foo fetchByUuid_C_First(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator){\n  return getPersistence().fetchByUuid_C_First(uuid,companyId,orderByComparator);\n}\n", "nl": "Returns the first foo in the ordered set where uuid = &#63; and companyId = &#63;.", "id": "6156"}
{"code": "public boolean verifyXMLSignature(org.w3c.dom.Element element,java.lang.String certAlias) throws XMLSignatureException {\n  return verifyXMLSignature(element,DEF_ID_ATTRIBUTE,certAlias);\n}\n", "nl": "Verify the signature of the xml document", "id": "34824"}
{"code": "public static String acronym(String self){\n  return compile(\"\\\\s|\\\\B\\\\p{Alnum}+\",UNICODE_CHARACTER_CLASS).matcher(space(sortName(self),\" \")).replaceAll(\"\");\n}\n", "nl": "Get acronym, i.e. first letter of each word. e.g. \"Deep Space 9\" -> \"DS9\"", "id": "29465"}
{"code": "public com.sun.identity.saml2.jaxb.entityconfig.AttributeQueryConfigElement createAttributeQueryConfigElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.entityconfig.impl.AttributeQueryConfigElementImpl();\n}\n", "nl": "Create an instance of AttributeQueryConfigElement", "id": "25410"}
{"code": "public void print(int i){\n  writer.print(i);\n}\n", "nl": "Prints the given int.", "id": "21823"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsfederation.RequireReferenceTokenElement createRequireReferenceTokenElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.RequireReferenceTokenElementImpl();\n}\n", "nl": "Create an instance of RequireReferenceTokenElement", "id": "1189"}
{"code": "public boolean dependsOn(String backupID){\n  return dependencies.contains(backupID);\n}\n", "nl": "Indicates whether this backup has a dependency on the backup with the provided ID.", "id": "54968"}
{"code": "public void removeProperty(String name){\n  properties.remove(name);\n}\n", "nl": "Remove a configured property.", "id": "36752"}
{"code": "private void beginText(){\n  eventOccurred(null,EventType.BEGIN_TEXT);\n}\n", "nl": "Used to trigger beginTextBlock on the renderListener", "id": "33510"}
{"code": "public boolean isTypesOnly(){\n  return typesOnly;\n}\n", "nl": "To be removed.", "id": "13508"}
{"code": "private static void deleteEmptySchemas(XMPNode tree){\n  for (Iterator it=tree.iterateChildren(); it.hasNext(); ) {\n    XMPNode schema=(XMPNode)it.next();\n    if (!schema.hasChildren()) {\n      it.remove();\n    }\n  }\n}\n", "nl": "Remove all empty schemas from the metadata tree that were generated during the rdf parsing.", "id": "8079"}
{"code": "public static void computeMonitoringPossibleResults(SearchResultEntry monitor1,SearchResultEntry monitor2,List<Integer> possibleResults,Collection<String> attrNames){\n  for (  String attrName : attrNames) {\n    possibleResults.add(compareForAttribute(monitor1,monitor2,attrName));\n  }\n}\n", "nl": "Computes the possible comparison results for monitoring information.", "id": "34334"}
{"code": "public void validate(ValidatableObject vo) throws SAXException {\n  if (validatedObjects.add(ProxyGroup.unwrap(vo))) {\n    MSVValidator.validate(jaxbContext,this,vo);\n  }\n else {\n    reportEvent(vo,Messages.format(Messages.CYCLE_DETECTED));\n  }\n}\n", "nl": "Validates the sub-tree rooted at <code>vo</code> and reports any errors/warnings to the error handler.", "id": "7338"}
{"code": "public void _write(OutputStream output){\n  output.write_boolean(value);\n}\n", "nl": "Marshals the value in this <code>BooleanHolder</code> object's <code>value</code> field to the output stream <code>output</code>.", "id": "51706"}
{"code": "@SuppressWarnings(\"unused\") public static void swapArrayPosition(int[] source,int first,int second){\n  int temp=source[first];\n  source[first]=source[second];\n  source[second]=temp;\n}\n", "nl": "Swap two array elements position.", "id": "11839"}
{"code": "@Override public int available() throws IOException {\n  try {\n    return super.available();\n  }\n catch (  IOException e) {\n    handleIOException(e);\n    return 0;\n  }\n}\n", "nl": "Invokes the delegate's <code>available()</code> method.", "id": "51567"}
{"code": "public void removeTargetAttributes(){\n  _targetAttributes=null;\n}\n", "nl": "Removes the QualifiedCollection of targetAttributes that contol the attributes to which this ACI apllies", "id": "48610"}
{"code": "public void addIndexSelectionListener(IndexSelectionListener listener){\n  backendIndexesPanel.addIndexSelectionListener(listener);\n  backendVLVIndexesPanel.addIndexSelectionListener(listener);\n}\n", "nl": "Adds an index selection listener.", "id": "31808"}
{"code": "@Override public boolean add(T o){\n  if (locked)   throw new IllegalStateException(sm.getString(\"resourceSet.locked\"));\n  return (super.add(o));\n}\n", "nl": "Add the specified element to this set if it is not already present. Return <code>true</code> if the element was added.", "id": "94"}
{"code": "protected void registerChildren(){\n  registerChild(REDIRECT_URL,StaticTextField.class);\n}\n", "nl": "Registers child components/views", "id": "30493"}
{"code": "public TreePath removeAllUnderRoot(){\n  stopRefresh();\n  removeAllChildNodes(rootNode,false);\n  return new TreePath(treeModel.getPathToRoot(rootNode));\n}\n", "nl": "Remove all the suffixes. The controller removes all the nodes from the JTree except the root.", "id": "54627"}
{"code": "public String toPattern(){\n  return pattern;\n}\n", "nl": "Returns a pattern string describing this date format.", "id": "27865"}
{"code": "public static void registerRetentionPolicy(DN configEntryDN,RetentionPolicy<?> policy){\n  Reject.ifNull(configEntryDN,policy);\n  directoryServer.retentionPolicies.put(configEntryDN,policy);\n}\n", "nl": "Registers the provided log retention policy with the Directory Server. If a policy is already registered for the provided configuration entry DN, then it will be replaced.", "id": "47572"}
{"code": "public boolean accept(String name){\n  return (pattern == null) ? true : (pattern.matcher(name.toLowerCase()).matches());\n}\n", "nl": "Returns <code>true</code> if <code>name</code> matches the filter.", "id": "29146"}
{"code": "public boolean isCellEditable(int p_row,int p_col){\n  return p_col >= 1;\n}\n", "nl": "Don't need to implement this method unless your table's editable.", "id": "39264"}
{"code": "public WritableRaster createCompatibleDestRaster(Raster src){\n  return src.createCompatibleWritableRaster();\n}\n", "nl": "Creates a zeroed-destination <code>Raster</code> with the correct size and number of bands, given this source.", "id": "46096"}
{"code": "public ManageNameIDRequest createManageNameIDRequest(String value) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.MANAGE_NAMEID_REQUEST,value);\n  if (obj == null) {\n    return new ManageNameIDRequestImpl(value);\n  }\n else {\n    return (ManageNameIDRequest)obj;\n  }\n}\n", "nl": "Returns an immutable manage name identifier request object.", "id": "45696"}
{"code": "public void removeUpdate(DocumentEvent changes,Shape a,ViewFactory f){\n  updateDamage(changes,a,f);\n}\n", "nl": "Gives notification that something was removed from the document in a location that this view is responsible for.", "id": "34657"}
{"code": "public final boolean checkTag(int identifier){\n  return this.id == identifier || this.constrId == identifier;\n}\n", "nl": "Tests provided identifier.", "id": "56605"}
{"code": "public void deleteAssignableDynamicGroups(Set groupDNs) throws AMException, SSOException {\n  Iterator iter=groupDNs.iterator();\n  while (iter.hasNext()) {\n    String groupDN=(String)iter.next();\n    AMAssignableDynamicGroup group=new AMAssignableDynamicGroupImpl(super.token,groupDN);\n    group.delete();\n  }\n}\n", "nl": "Deletes assignable dynamic groups in this group.", "id": "38333"}
{"code": "public String toXML(){\n  StringBuilder stringBuilder=new StringBuilder();\n  return stringBuilder.toString();\n}\n", "nl": "Default toXML Method to Marshal Object into XML.", "id": "3002"}
{"code": "public GenericObject next(){\n  return (NetObject)super.next();\n}\n", "nl": "returns the next element", "id": "37152"}
{"code": "public void storeOriginals(){\n  mStartingStartTrim=mStartTrim;\n  mStartingEndTrim=mEndTrim;\n  mStartingRotation=mRotation;\n}\n", "nl": "If the start / end trim are offset to begin with, store them so that animation starts from that offset.", "id": "210"}
{"code": "public boolean valueIsAcceptable(final ByteSequence value,final LocalizableMessageBuilder invalidReason){\n  return impl.valueIsAcceptable(schema,value,invalidReason);\n}\n", "nl": "Indicates whether the provided value is acceptable for use in an attribute with this syntax. If it is not, then the reason may be appended to the provided buffer.", "id": "43614"}
{"code": "public Node renameNode(Node n,String namespaceURI,String name) throws DOMException {\n  return n;\n}\n", "nl": "DOM Level 3 Renaming node", "id": "34200"}
{"code": "public long min(){\n  final long min=deltaMin.get();\n  return min == INITIAL_DELTA_MIN ? 0 : min;\n}\n", "nl": "Get running-minimum time-delta, in nanoseconds.", "id": "2271"}
{"code": "public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){\n}\n", "nl": "This method gets invoked when a service's global configuration data has been changed. The parameter <code>groupName</code> denote the name of the configuration grouping (e.g. default) and <code>serviceComponent</code> denotes the service's sub-component that changed (e.g. <code>/NamedPolicy</code>, <code>/Templates</code>).", "id": "33373"}
{"code": "public boolean remove(Object o){\n  DigraphNode node=(DigraphNode)poNodes.get(o);\n  if (node == null) {\n    return false;\n  }\n  poNodes.remove(o);\n  node.dispose();\n  return true;\n}\n", "nl": "Removes an <code>Object</code> from this <code>PartiallyOrderedSet</code>.", "id": "23598"}
{"code": "public void rescanCurrentDirectory(JFileChooser a){\n  for (int i=0; i < uis.size(); i++) {\n    ((FileChooserUI)(uis.elementAt(i))).rescanCurrentDirectory(a);\n  }\n}\n", "nl": "Invokes the <code>rescanCurrentDirectory</code> method on each UI handled by this object.", "id": "28188"}
{"code": "@BeforeClass public static void initClass(){\n  scenario=Scenarios.s8_main_and_branch_with_intermediate_light_tag();\n  if (Misc.isDebugMode()) {\n    System.out.println(\"git repository created under: \" + scenario.getRepositoryLocation());\n  }\n}\n", "nl": "Initialiaze the whole junit class tests ; creates the git scenario.", "id": "2728"}
{"code": "public void pushStylesheet(Stylesheet s){\n  if (m_stylesheets.size() == 0)   m_stylesheetRoot=(StylesheetRoot)s;\n  m_stylesheets.push(s);\n}\n", "nl": "Push the current stylesheet being constructed. If no other stylesheets have been pushed onto the stack, assume the argument is a stylesheet root, and also set the stylesheet root member.", "id": "30467"}
{"code": "public static SerializedFragment newInstance(String serialized){\n  SerializedFragment fragment=new SerializedFragment();\n  Bundle args=new Bundle();\n  args.putString(SERIALIZED,serialized);\n  fragment.setArguments(args);\n  return fragment;\n}\n", "nl": "Use this factory method to create a new instance of this fragment using the provided parameters.", "id": "55296"}
{"code": "@Override public Foo remove(long fooId) throws NoSuchFooException {\n  return remove((Serializable)fooId);\n}\n", "nl": "Removes the foo with the primary key from the database. Also notifies the appropriate model listeners.", "id": "7221"}
{"code": "public void move(int p_component_no,PlaVectorInt p_vector){\n  BrdComponent curr_component=get(p_component_no);\n  undo_list.save_for_undo(curr_component);\n  curr_component.translate_by(p_vector);\n}\n", "nl": "Moves the component with number p_component_no.  Works contrary to Component.translate_by with the undo algorithm of the board.", "id": "26100"}
{"code": "public void write(final Record<K,V> record) throws ChangelogException {\n  try {\n    write(parser.encodeRecord(record));\n    writer.flush();\n  }\n catch (  Exception e) {\n    throw new ChangelogException(ERR_CHANGELOG_UNABLE_TO_ADD_RECORD.get(record.toString(),writer.getFile().getPath()),e);\n  }\n}\n", "nl": "Writes the provided record to the log file.", "id": "45631"}
{"code": "public Set searchUsers(String wildcard,Map avPairs,int level) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(USER),getSearchFilter(AMObject.USER),wildcard,avPairs,level);\n}\n", "nl": "Searches for users in this organizational unit using wildcards and attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be specifed so that DNs of users with matching attribute-value pairs will be returned.", "id": "25903"}
{"code": "public T sourceObjectId(String sourceObjectId){\n  jsonValue.put(SOURCE_OBJECT_ID,sourceObjectId);\n  return self();\n}\n", "nl": "Saves the sourceObjectId on the event.", "id": "31810"}
{"code": "public Action createAction(Element elem) throws XACMLException {\n  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.ACTION,elem);\n  if (obj == null) {\n    return new ActionImpl(elem);\n  }\n else {\n    return (Action)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>Action</code>. The return object is immutable.", "id": "11829"}
{"code": "public Scanner reset(){\n  delimiter=DEFAULT_DELIMITER;\n  setLocale(Locale.getDefault());\n  currentRadix=DEFAULT_RADIX;\n  return this;\n}\n", "nl": "Resets this scanner's delimiter, locale, and radix.", "id": "57025"}
{"code": "public static String toHexString(byte b,boolean upperCase){\n  return IntegralToString.byteToHexString(b,upperCase);\n}\n", "nl": "Returns a two-digit hex string. That is, -1 becomes \"ff\" or \"FF\" and 2 becomes \"02\".", "id": "30264"}
{"code": "public void mouseEntered(MouseEvent e){\n  hasMouseOver=true;\n  repaint();\n}\n", "nl": "Callback when mouse entered a component.", "id": "19696"}
{"code": "private boolean backendSupportsControl(final String oid){\n  return backend != null && backend.supportsControl(oid);\n}\n", "nl": "Indicates if the backend supports the control corresponding to provided oid.", "id": "14889"}
{"code": "public void add(RxAction action,Subscription subscription){\n  Pair<Integer,Subscription> old=mMap.put(action.getType(),getPair(action,subscription));\n  if (old != null && !old.second.isUnsubscribed())   old.second.unsubscribe();\n}\n", "nl": "Given an action and a subscription, add the new subscription and unsubscribe if there was an existing one.", "id": "57512"}
{"code": "public boolean isPointValue(){\n  return unitType == POINT;\n}\n", "nl": "Returns whether or not the value is stored in points (pt)", "id": "42733"}
{"code": "public AssertionIDRequest createAssertionIDRequest() throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ASSERTION_ID_REQUEST);\n  if (obj == null) {\n    return new AssertionIDRequestImpl();\n  }\n else {\n    return (AssertionIDRequest)obj;\n  }\n}\n", "nl": "Returns the <code>AssertionIDRequest</code> Object.", "id": "5767"}
{"code": "public boolean containsValue(Date val){\n  for (  NSObject o : dict.values()) {\n    if (o.getClass().equals(NSDate.class)) {\n      NSDate dat=(NSDate)o;\n      if (dat.getDate().equals(val))       return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks whether a given value is contained in this dictionary.", "id": "44438"}
{"code": "@Override public void firePropertyChange(String propertyName,byte oldValue,byte newValue){\n}\n", "nl": "Overridden for performance reasons.", "id": "11107"}
{"code": "public String encode(String value){\n  return doubleMetaphone(value);\n}\n", "nl": "Encode the value using DoubleMetaphone.", "id": "41808"}
{"code": "@Override public boolean isShow(HttpServletRequest request) throws PortalException {\n  return true;\n}\n", "nl": "Returns <code>true</code> if the Control Menu entry is visible in the Control Menu.", "id": "1719"}
{"code": "public static String print(Node node){\n  return print(node,\"UTF-8\");\n}\n", "nl": "Print a Node tree recursively using UTF-8 encoding.", "id": "49813"}
{"code": "public void installUI(JComponent a){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).installUI(a);\n  }\n}\n", "nl": "Invokes the <code>installUI</code> method on each UI handled by this object.", "id": "9060"}
{"code": "@Before public void registerIdlingResource(){\n  Espresso.registerIdlingResources(mAddTaskIntentsTestRule.getActivity().getCountingIdlingResource());\n}\n", "nl": "Prepare your test fixture for this test. In this case we register an IdlingResources with Espresso. IdlingResource resource is a great way to tell Espresso when your app is in an idle state. This helps Espresso to synchronize your test actions, which makes tests significantly more reliable.", "id": "9291"}
{"code": "@Override public void onAttachFragment(final Fragment fragment){\n  delegate.onAttachFragment(fragment);\n}\n", "nl": "Called when a fragment is attached to the activity. <p>This is called after the attached fragment's <code>onAttach</code> and before the attached fragment's <code>onCreate</code> if the fragment has not yet had a previous call to <code>onCreate</code>.</p>", "id": "28851"}
{"code": "@Indexable(type=IndexableType.REINDEX) @Override public Foo updateFoo(Foo foo){\n  return fooPersistence.update(foo);\n}\n", "nl": "Updates the foo in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.", "id": "48836"}
{"code": "public static String escapeXml(String buffer){\n  String result=escapeXml(buffer.toCharArray(),buffer.length());\n  if (result == null) {\n    return buffer;\n  }\n else {\n    return result;\n  }\n}\n", "nl": "Performs the following substring replacements (to facilitate output to XML/HTML pages): &amp; -&gt; &amp;amp; &lt; -&gt; &amp;lt; &gt; -&gt; &amp;gt; \" -&gt; &amp;#034; ' -&gt; &amp;#039; See also OutSupport.writeEscapedXml(). taken from org.apache.taglibs.standard.tag.common.core.Util", "id": "104"}
{"code": "public XMLString xstr(){\n  return this;\n}\n", "nl": "Cast result object to a string.", "id": "416"}
{"code": "protected void clearTrace(){\nsynchronized (this.traceList) {\n    this.traceList.clear();\n  }\n}\n", "nl": "Clear the list of objects being traced by this object.", "id": "17539"}
{"code": "public String toXMLString() throws SAML2Exception {\n  return toXMLString(true,false);\n}\n", "nl": "Returns a String representation of this Object.", "id": "50655"}
{"code": "public void init(ServletConfig config) throws ServletException {\n  super.init(config);\n  metaManager=FSUtils.getIDFFMetaManager();\n}\n", "nl": "Initializes the servlet.", "id": "50699"}
{"code": "public boolean removeEdge(DigraphNode node){\n  if (!outNodes.contains(node)) {\n    return false;\n  }\n  outNodes.remove(node);\n  node.inNodes.remove(this);\n  node.decrementInDegree();\n  return true;\n}\n", "nl": "Removes a directed edge from the graph.  The outNodes list of this node is updated and the in-degree of the other node is decremented.", "id": "36918"}
{"code": "public static final boolean isLeapYear(int year){\n  return ((year & 0x3) == 0) && ((year % 100 != 0) || (year % 400 == 0));\n}\n", "nl": "Return true if the given year is a leap year.", "id": "24721"}
{"code": "private ReconciliationContext newReconContext(ReconAction reconAction,ObjectMapping mapping,JsonValue reconParams,JsonValue config) throws ResourceException {\n  if (mappings == null) {\n    throw new BadRequestException(\"Unknown mapping type, no mappings configured\");\n  }\n  Context context=ObjectSetContext.get();\n  return new ReconciliationContext(reconAction,mapping,context,reconParams,config,this);\n}\n", "nl": "Allocates a new reconciliation run's context, including its identifier Separate from the actual execution so that the execution can happen asynchronously, whilst we hand back the identifier to the caller.", "id": "37453"}
{"code": "public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException {\n  lh.comment((char[])m_obj,m_start,m_length);\n}\n", "nl": "Directly call the comment method on the passed LexicalHandler for the string-value.", "id": "24868"}
{"code": "public static AdditionalLogItem quotedKeyValue(final Class<?> source,final String key,final Object value){\n  Reject.ifNull(source,key,value);\n  return new AdditionalLogItem(source,key,value,true);\n}\n", "nl": "Creates a new additional log item using the provided source, key, and value. The value will be surrounded by quotes when serialized as a string.", "id": "13507"}
{"code": "public final void writeDouble(double v) throws IOException {\n  writeLong(Double.doubleToLongBits(v));\n}\n", "nl": "Converts the double argument to a <code>long</code> using the <code>doubleToLongBits</code> method in class <code>Double</code>, and then writes that <code>long</code> value to the underlying output stream as an 8-byte quantity, high byte first. If no exception is thrown, the counter <code>written</code> is incremented by <code>8</code>.", "id": "8543"}
{"code": "public void deinstall(JEditorPane c){\n  c.removeCaretListener(inputAttributeUpdater);\n  c.removePropertyChangeListener(inputAttributeUpdater);\n  currentRun=null;\n  currentParagraph=null;\n}\n", "nl": "Called when the kit is being removed from the JEditorPane.  This is used to unregister any listeners that were attached.", "id": "24857"}
{"code": "public void configChanged(ConfigurationActionEvent e){\n  if (Utils.debug.messageEnabled()) {\n    Utils.debug.message(\"Utils.configChanged\");\n  }\n  setValues();\n}\n", "nl": "This method will be invoked when a component's  configuration data has been changed. The parameters componentName, realm and configName denotes the component name, organization and configuration instance name that are changed  respectively.", "id": "20675"}
{"code": "public Version noQualifier(){\n  return new Version(major,minor,patch,Collections.emptyList());\n}\n", "nl": "Creates a new Version object from the current one, but removes all qualifiers from it.", "id": "51655"}
{"code": "@AfterClass @Override public void classCleanUp() throws Exception {\n  super.classCleanUp();\n}\n", "nl": "Clean up the environment.", "id": "41141"}
{"code": "public Response createResponse(org.w3c.dom.Element elem) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.RESPONSE,elem);\n  if (obj == null) {\n    return new ResponseImpl(elem);\n  }\n else {\n    return (Response)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>Response</code>. The return object is immutable.", "id": "44283"}
{"code": "public static boolean isContent(int c){\n  return (c < 0x10000 && (CHARS[c] & MASK_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);\n}\n", "nl": "Returns true if the specified character can be considered content.", "id": "13311"}
{"code": "public int read() throws IOException {\n  int b=in.read();\n  if (b != -1) {\n    cksum.update(b);\n  }\n  return b;\n}\n", "nl": "Reads a byte. Will block if no input is available.", "id": "56842"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_nodetextnodename.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "42117"}
{"code": "public void printAVPairs(Map avPairs){\n  printAVPairs(avPairs,0);\n}\n", "nl": "Prints AV Pairs with no indentation. this method calls the toString method of the objects which are in the Map.", "id": "23442"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsse.TransformationParametersElement createTransformationParametersElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsse.impl.TransformationParametersElementImpl();\n}\n", "nl": "Create an instance of TransformationParametersElement", "id": "24251"}
{"code": "public AMSearchResults searchAssignableDynamicGroups(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP),wildcard,avPairs,searchControl);\n}\n", "nl": "Searches for assignable dynamic groups in this organizational unit using wildcards and attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be specifed so that DNs of dynamic groups with matching attribute-value pairs will be returned.", "id": "16312"}
{"code": "public void attributeDecl(String eName,String aName,String type,String valueDefault,String value) throws SAXException {\n  if (null != m_resultDeclHandler)   m_resultDeclHandler.attributeDecl(eName,aName,type,valueDefault,value);\n}\n", "nl": "Report an attribute type declaration. <p>Only the effective (first) declaration for an attribute will be reported.  The type will be one of the strings \"CDATA\", \"ID\", \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\", \"ENTITIES\", or \"NOTATION\", or a parenthesized token group with  the separator \"|\" and all whitespace removed.</p>", "id": "18307"}
{"code": "public static void main(String[] args){\n  int retCode=mainSearch(args,true,false,System.out,System.err);\n  if (retCode != 0) {\n    System.exit(filterExitCode(retCode));\n  }\n}\n", "nl": "The main method for LDAPSearch tool.", "id": "54676"}
{"code": "public final void add(final Problem problem){\n  this.problems.add(problem);\n}\n", "nl": "Add a problem.", "id": "52887"}
{"code": "public boolean isRequired(){\n  return this.required;\n}\n", "nl": "Checks if is required.", "id": "2669"}
{"code": "public static DragSourceListener remove(DragSourceListener l,DragSourceListener oldl){\n  return (DragSourceListener)removeInternal(l,oldl);\n}\n", "nl": "Removes the old drag-source-listener from drag-source-listener-l and returns the resulting multicast listener.", "id": "53536"}
{"code": "public void flush() throws IOException {\n  out.flush();\n}\n", "nl": "Flush any buffered messages.", "id": "14573"}
{"code": "public void _read(org.omg.CORBA.portable.InputStream in){\n  value=org.omg.CORBA.ServiceInformationHelper.read(in);\n}\n", "nl": "Reads unmarshalled data from the input stream <code>in</code> and assigns it to the <code>value</code> field in this <code>ServiceInformationHolder</code> object.", "id": "21489"}
{"code": "public static String binEncode(final String value){\n  return encode(value,16,2);\n}\n", "nl": "Convert string chars to binary unicode (16 digits)", "id": "18133"}
{"code": "public long toEpochSecond(){\n  return transition.toEpochSecond(offsetBefore);\n}\n", "nl": "Gets the transition instant as an epoch second.", "id": "2557"}
{"code": "private boolean excludeResultNSDecl(String prefix,String uri) throws TransformerException {\n  if (null != m_excludeResultPrefixes) {\n    return containsExcludeResultPrefix(prefix,uri);\n  }\n  return false;\n}\n", "nl": "Tell if the result namespace decl should be excluded.  Should be called before namespace aliasing (I think).", "id": "50040"}
{"code": "public SIPHeader parse() throws ParseException {\n  ReplyTo replyTo=new ReplyTo();\n  if (debug)   dbg_enter(\"ReplyTo.parse\");\n  try {\n    headerName(TokenTypes.REPLY_TO);\n    replyTo.setHeaderName(SIPHeaderNames.REPLY_TO);\n    super.parse(replyTo);\n    return replyTo;\n  }\n  finally {\n    if (debug)     dbg_leave(\"ReplyTo.parse\");\n  }\n}\n", "nl": "parse the String message and generate the ReplyTo List Object", "id": "12880"}
{"code": "public final Key doPhase(Key key,boolean lastPhase) throws InvalidKeyException, IllegalStateException {\n  return spiImpl.engineDoPhase(key,lastPhase);\n}\n", "nl": "Does the next (or the last) phase of the key agreement, using the specified key.", "id": "13770"}
{"code": "public static File createTemplateFile(String baseDN,int numEntries) throws IOException {\n  Set<String> baseDNs=new HashSet<>(1);\n  baseDNs.add(baseDN);\n  return createTemplateFile(baseDNs,numEntries);\n}\n", "nl": "Creates a MakeLDIF template file using the provided information.", "id": "45783"}
{"code": "protected void fireStartEntity(String name) throws org.xml.sax.SAXException {\n  if (m_tracer != null) {\n    flushMyWriter();\n    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENTITYREF,name);\n  }\n}\n", "nl": "To fire off start entity trace event", "id": "48948"}
{"code": "public String encode(){\n  String encoded_string=BANDWIDTH_FIELD;\n  if (bwtype != null)   encoded_string+=bwtype + Separators.COLON;\n  return encoded_string + bandwidth + Separators.NEWLINE;\n}\n", "nl": "Get the string encoded version of this object", "id": "17980"}
{"code": "public String toString(){\n  return getClass().getName() + \"[hgap=\" + hgap+ \",vgap=\"+ vgap+ \",rows=\"+ rows+ \",cols=\"+ cols+ \"]\";\n}\n", "nl": "Returns the string representation of this grid layout's values.", "id": "41300"}
{"code": "@Override public String toString(){\n  return currentParsed().toString();\n}\n", "nl": "Returns a string version of the context for debugging.", "id": "4709"}
{"code": "@AfterClass public static void cleanupClass(){\n  try {\n    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());\n  }\n catch (  Exception ignore) {\n    System.err.println(\"cannot remove \" + scenario.getRepositoryLocation());\n  }\n}\n", "nl": "Cleanup the whole junit scenario ; deletes the created git repository.", "id": "54768"}
{"code": "public static boolean isECLEnabledDomain(DN baseDN){\n  waitForStartup();\n  final LDAPReplicationDomain domain=domains.get(baseDN);\n  return domain != null && domain.isECLEnabled();\n}\n", "nl": "Returns whether the provided baseDN represents a replication domain enabled for the external changelog.", "id": "25757"}
{"code": "public static Boolean isStreamingQuoteStartAtBootup(){\n  return QUOTE_STREAMING_START_AT_BOOTUP;\n}\n", "nl": "Common Configurations", "id": "38976"}
{"code": "public void flush() throws IOException {\n  se.flush();\n}\n", "nl": "Flushes the stream.", "id": "4516"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodelistindexgetlength.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "15786"}
{"code": "public boolean containsHeader(String name){\n  return this._getHttpServletResponse() != null ? this._getHttpServletResponse().containsHeader(name) : internalHeaders.containsKey(name);\n}\n", "nl": "The default behavior of this method is to call containsHeader(String name) on the wrapped response object. Serialized.", "id": "25107"}
{"code": "public static Document createDocument(){\n  return createDocument(false);\n}\n", "nl": "DOM Level 1 did not have a standard mechanism for creating a new Document object. This function provides a DOM-implementation-independent abstraction for that for that concept. It's typically used when  outputting a new DOM as the result of an operation.", "id": "44962"}
{"code": "public static ScheduleOption defaultValue(){\n  return RUN_NOW;\n}\n", "nl": "The default option to be proposed to the user.", "id": "44055"}
{"code": "protected void addServiced(String name) throws Exception {\n  String[] params={name};\n  String[] signature={\"java.lang.String\"};\n  mBeanServer.invoke(oname,\"addServiced\",params,signature);\n}\n", "nl": "Mark a context as being services.", "id": "38971"}
{"code": "public final SecretKey translateKey(SecretKey key) throws InvalidKeyException {\n  return spiImpl.engineTranslateKey(key);\n}\n", "nl": "Translates the specified secret key into an instance of the corresponding key from the provider of this key factory.", "id": "47761"}
{"code": "public void skippedEntity(String name) throws org.xml.sax.SAXException {\n}\n", "nl": "Receive notification of a skipped entity. <p>The Parser will invoke this method once for each entity skipped.  Non-validating processors may skip entities if they have not seen the declarations (because, for example, the entity was declared in an external DTD subset).  All processors may skip external entities, depending on the values of the http://xml.org/sax/features/external-general-entities and the http://xml.org/sax/features/external-parameter-entities properties.</p>", "id": "2997"}
{"code": "public static boolean isEnclosedBetween(final String input,final String encloser){\n  return isEnclosedBetween(input,encloser,encloser);\n}\n", "nl": "Verifies whether String is enclosed by encloser", "id": "2227"}
{"code": "public InputStream _invoke(OutputStream output) throws ApplicationException, RemarshalException {\n  throw new org.omg.CORBA.NO_IMPLEMENT(reason);\n}\n", "nl": "Throws an <code>org.omg.CORBA.NO_IMPLEMENT</code> exception with the message \"This is a locally constrained object.\" This method is the default implementation of the <code>org.omg.CORBA.Object</code> method. <P>Called to invoke an operation. The stub provides an <code>OutputStream</code> that was previously returned by a <code>_request()</code> call. <code>_invoke</code> returns an <code>InputStream</code> which contains the marshaled reply. If an exception occurs, <code>_invoke</code> may throw an <code>ApplicationException</code> object which contains an <code>InputStream</code> from which the user exception state may be unmarshaled.<P>", "id": "22340"}
{"code": "public void addElement(MarkData m){\n  insertElementAt(m,size());\n}\n", "nl": "Add a mark to the end", "id": "23562"}
{"code": "public static int bytes(int nbFields){\n  return nbFields;\n}\n", "nl": "Helper method that returns the number of bytes that would be used by the byte fields when appended to a ByteArrayBuilder.", "id": "42458"}
{"code": "public void fixupVariables(java.util.Vector vars,int globalsSize){\n}\n", "nl": "XObjects should not normally need to fix up variables.", "id": "29285"}
{"code": "NetClass append(String p_name,board.BrdLayerStructure p_layer_structure,ClearanceMatrix p_clearance_matrix){\n  NetClass new_class=new NetClass(p_name,p_layer_structure,p_clearance_matrix);\n  class_list.add(new_class);\n  return new_class;\n}\n", "nl": "Appends a new empty class with name p_name to the class array", "id": "23948"}
{"code": "protected boolean isDescendant(int identity){\n  return (_parent(identity) >= _startNode) || (_startNode == identity);\n}\n", "nl": "Tell if this node identity is a descendant.  Assumes that the node info for the element has already been obtained. This one-sided test works only if the parent has been previously tested and is known to be a descendent. It fails if the parent is the _startNode's next sibling, or indeed any node that follows _startNode in document order.  That may suffice for this iterator, but it's not really an isDescendent() test. %REVIEW% rename?", "id": "1959"}
{"code": "public static ByteString valueOfUtf8(final char[] chars){\n  if (chars.length == 0) {\n    return EMPTY;\n  }\n  return wrap(StaticUtils.getBytes(chars));\n}\n", "nl": "Returns a byte string containing the UTF-8 encoded bytes of the provided char array.", "id": "55649"}
{"code": "public void endCDATA() throws org.xml.sax.SAXException {\n  m_inCData=false;\n}\n", "nl": "Report the end of a CDATA section.", "id": "17665"}
{"code": "private String quote(String p_string){\n  return string_quote + p_string + string_quote;\n}\n", "nl": "Puts p_sting into quotes.", "id": "19399"}
{"code": "public void updateUI(){\n  setUI((PanelUI)UIManager.getUI(this));\n}\n", "nl": "Resets the UI property with a value from the current look and feel.", "id": "2964"}
{"code": "public final StringBuffer format(Object[] arguments,StringBuffer result,FieldPosition pos){\n  return subformat(arguments,result,pos,null);\n}\n", "nl": "Formats an array of objects and appends the <code>MessageFormat</code>'s pattern, with format elements replaced by the formatted objects, to the provided <code>StringBuffer</code>. <p> The text substituted for the individual format elements is derived from the current subformat of the format element and the <code>arguments</code> element at the format element's argument index as indicated by the first matching line of the following table. An argument is <i>unavailable</i> if <code>arguments</code> is <code>null</code> or has fewer than argumentIndex+1 elements. <table border=1 summary=\"Examples of subformat,argument,and formatted text\"> <tr> <th>Subformat <th>Argument <th>Formatted Text <tr> <td><i>any</i> <td><i>unavailable</i> <td><code>\"{\" + argumentIndex + \"}\"</code> <tr> <td><i>any</i> <td><code>null</code> <td><code>\"null\"</code> <tr> <td><code>instanceof ChoiceFormat</code> <td><i>any</i> <td><code>subformat.format(argument).indexOf('{') &gt;= 0 ?<br> (new MessageFormat(subformat.format(argument), getLocale())).format(argument) : subformat.format(argument)</code> <tr> <td><code>!= null</code> <td><i>any</i> <td><code>subformat.format(argument)</code> <tr> <td><code>null</code> <td><code>instanceof Number</code> <td><code>NumberFormat.getInstance(getLocale()).format(argument)</code> <tr> <td><code>null</code> <td><code>instanceof Date</code> <td><code>DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale()).format(argument)</code> <tr> <td><code>null</code> <td><code>instanceof String</code> <td><code>argument</code> <tr> <td><code>null</code> <td><i>any</i> <td><code>argument.toString()</code> </table> <p> If <code>pos</code> is non-null, and refers to <code>Field.ARGUMENT</code>, the location of the first formatted string will be returned.", "id": "50627"}
{"code": "private void applyTextAdjust(float tj){\n  float adjustBy=-tj / 1000f * getGraphicsState().getFontSize() * (getGraphicsState().getHorizontalScaling() / 100f);\n  textMatrix=new Matrix(adjustBy,0).multiply(textMatrix);\n}\n", "nl": "Adjusts the text matrix for the specified adjustment value (see TJ operator in the PDF spec for information)", "id": "39388"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsse.TransformationParametersType createTransformationParametersType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsse.impl.TransformationParametersTypeImpl();\n}\n", "nl": "Create an instance of TransformationParametersType", "id": "17498"}
{"code": "@SideOnly(Side.CLIENT) public static void addHolderInfo(ItemStack stack,List<String> tooltip){\n  if (isTeslaHolder(stack,EnumFacing.DOWN))   addHolderInfo(getTeslaHolder(stack,EnumFacing.DOWN),tooltip);\n}\n", "nl": "Adds Tesla holder info to a tooltip.", "id": "27019"}
{"code": "public LDAPConnection connect(PrintStream out,PrintStream err) throws LDAPConnectionException, ArgumentException {\n  return connect(this.args,out,err);\n}\n", "nl": "Creates a new LDAPConnection and invokes a connect operation using information provided in the parsed set of arguments that were provided by the user.", "id": "1610"}
{"code": "public void reinitializeWithFullSchema(Schema schema) throws InitializationException {\n  final Map<String,EntryListeners> exportedListeners=exportListeners();\n  finalize();\n  File configFileToUse=preInitialization();\n  loadConfiguration(configFileToUse,schema);\n  importListeners(exportedListeners,schema);\n}\n", "nl": "Re-initializes the configuration handler with a fully initialized schema. <p> Previously registered listeners are preserved.", "id": "39198"}
{"code": "private void startAnimation(){\n  mAnimImage.setAnimation(mAnimation);\n  mAnimImage.setVisibility(View.VISIBLE);\n  Log.d(TAG,\"FmRadioActivity.startAnimation end\");\n}\n", "nl": "Start animation", "id": "50316"}
{"code": "public int byteLength(){\n  return places.length;\n}\n", "nl": "Returns the length of the data as a byte array.", "id": "46526"}
{"code": "public short readShort(){\n  if (remaining() < 2) {\n    throw new IndexOutOfBoundsException();\n  }\n  short v=0;\n  for (int i=0; i < 2; i++) {\n    v<<=8;\n    v|=sequence.byteAt(pos++) & 0xFF;\n  }\n  return v;\n}\n", "nl": "Relative read method for reading an short value. Reads the next 2 bytes at this reader's current position, composing them into an short value according to big-endian byte order, and then increments the position by two.", "id": "30218"}
{"code": "private Session deleteSession(SessionID sessionID){\n  Reject.ifNull(sessionID);\n  SessionCuller sessionCuller=sessionCullerTable.remove(sessionID);\n  if (sessionCuller != null) {\n    sessionCuller.cancel();\n  }\n  return sessionTable.remove(sessionID);\n}\n", "nl": "Delete the Session from the table.", "id": "45140"}
{"code": "public void remove(int childIndex){\n  FHTreeStateNode node=(FHTreeStateNode)getChildAt(childIndex);\n  node.removeFromMapping();\n  super.remove(childIndex);\n}\n", "nl": "Messaged when this node is removed from its parent, this messages <code>removedFromMapping</code> to remove all the children.", "id": "28753"}
{"code": "public Instant plusNanos(long nanosToAdd){\n  return plus(0,nanosToAdd);\n}\n", "nl": "Returns a copy of this instant with the specified duration in nanoseconds added. <p> This instance is immutable and unaffected by this method call.", "id": "50287"}
{"code": "public static void writeStringToFile(File file,String data,String encoding,boolean append) throws IOException {\n  writeStringToFile(file,data,Charsets.toCharset(encoding),append);\n}\n", "nl": "Writes a String to a file creating the file if it does not exist.", "id": "1020"}
{"code": "protected void installComboBoxModelListeners(ComboBoxModel model){\n  if (model != null && (listDataListener=createListDataListener()) != null) {\n    model.addListDataListener(listDataListener);\n  }\n}\n", "nl": "Installs the listeners on the combo box model. Any listeners installed on the combo box model should be removed in <code>uninstallComboBoxModelListeners</code>.", "id": "57634"}
{"code": "public void removeParameter(String name){\n  parameters.remove(name);\n}\n", "nl": "Remove any value associated with the given name.", "id": "34735"}
{"code": "public void put(String key,Object value){\n  globalScope.put(key,value);\n}\n", "nl": "Sets the specified key/value pair in the Global Scope.", "id": "3078"}
{"code": "public void init(int size,int certainty,SecureRandom random){\n  this.size=size;\n  this.certainty=certainty;\n  this.random=random;\n}\n", "nl": "Initialise the parameters generator.", "id": "6630"}
{"code": "public void printStackTrace(PrintStream s){\n  super.printStackTrace(s);\n  if (cause != null) {\n    cause.printStackTrace(s);\n  }\n}\n", "nl": "Prints this <code>TransformException</code>, its backtrace and the cause's backtrace to the specified print stream.", "id": "655"}
{"code": "public boolean isGetAllReturnAttributesEnabled(){\n  return getAllAttributesEnabled;\n}\n", "nl": "Returns true if the option for getting all attributes has been enabled.", "id": "11593"}
{"code": "@Override public STypeDef type(){\n  return classClassDef;\n}\n", "nl": "this value type", "id": "48469"}
{"code": "private Expression next_exp(boolean expectingStartNode) throws SyntaxException {\n  nextNode(false);\n  return get_exp(expectingStartNode);\n}\n", "nl": "parse next expression<br> nextNode(false) would be invoked", "id": "27061"}
{"code": "public void encode(ByteStringBuilder buffer,EntryEncodeConfig config) throws DirectoryException {\n  encodeV3(buffer,config);\n}\n", "nl": "Encodes this entry into a form that is suitable for long-term persistent storage.  The encoding will have a version number so that if the way we store entries changes in the future we will still be able to read entries encoded in an older format.", "id": "44986"}
{"code": "public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  doGetPost(request,response);\n}\n", "nl": "Handles the HTTP GET request.", "id": "3065"}
{"code": "@Override public String toString(){\n  return \"Document{\" + \"id=\" + id + \", table=\"+ table+ \", object=\"+ object+ '}';\n}\n", "nl": "Returns a string representation of the object.", "id": "56489"}
{"code": "public void invalidateWheel(boolean clearCaches){\n  if (clearCaches) {\n    recycle.clearAll();\n    if (itemsLayout != null) {\n      itemsLayout.removeAllViews();\n    }\n    scrollingOffset=0;\n  }\n else   if (itemsLayout != null) {\n    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange(),currentItem);\n  }\n  invalidate();\n}\n", "nl": "Invalidates wheel", "id": "43453"}
{"code": "public boolean add(AccessibleState state){\n  if (states == null) {\n    states=new Vector();\n  }\n  if (!states.contains(state)) {\n    states.addElement(state);\n    return true;\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Adds a new state to the current state set if it is not already present.  If the state is already in the state set, the state set is unchanged and the return value is false.  Otherwise, the state is added to the state set and the return value is true.", "id": "557"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n}\n", "nl": "Ensures that the Directory Server is running.", "id": "18310"}
{"code": "private void fillOccupation(int time,int duration){\n  for (int i=0; i < duration; i++) {\n    occupationTable[time + i]++;\n  }\n}\n", "nl": "Updates the occupation table with a new established call", "id": "29256"}
{"code": "void onDropChild(View child){\n  if (child != null) {\n    LayoutParams lp=(LayoutParams)child.getLayoutParams();\n    lp.dropped=true;\n    child.requestLayout();\n  }\n}\n", "nl": "Mark a child as having been dropped. At the beginning of the drag operation, the child may have been on another screen, but it is re-parented before this method is called.", "id": "41332"}
{"code": "protected KeyListener createKeyListener(){\n  return null;\n}\n", "nl": "Creates the key listener that will be added to the combo box. If this method returns null then it will not be added to the combo box.", "id": "31294"}
{"code": "@SuppressWarnings(\"unchecked\") @Override public PdfNumber copyTo(PdfDocument document){\n  return (PdfNumber)super.copyTo(document,true);\n}\n", "nl": "Copies object to a specified document. Works only for objects that are read from existing document, otherwise an exception is thrown.", "id": "19742"}
{"code": "@Override public AsyncContext startAsync() throws IllegalStateException {\n  return request.startAsync();\n}\n", "nl": "The default behavior of this method is to return startAsync() on the wrapped request object.", "id": "27852"}
{"code": "static Method findMethod(Class<?> cls,String methodName,int argCount){\n  return findMethod(cls,methodName,argCount,null);\n}\n", "nl": "Find a target methodName on a given class.", "id": "37721"}
{"code": "public boolean nodeIsExpanded(BasicNode node){\n  TreePath tp=new TreePath(treeModel.getPathToRoot(node));\n  return tree.isExpanded(tp);\n}\n", "nl": "Returns true if the node is expanded.", "id": "49279"}
{"code": "public void startPreview(){\n  if (camera != null && !previewing) {\n    camera.startPreview();\n    previewing=true;\n  }\n}\n", "nl": "Asks the camera hardware to begin drawing preview frames to the screen.", "id": "14094"}
{"code": "public static URI toNormalizedURI(String filename){\n  return toNormalizedURI(new File(filename));\n}\n", "nl": "This method makes a normalized URI from a given filename.", "id": "38201"}
{"code": "public static void w(String tag,String msg){\n  if (sLevel > LEVEL_WARNING) {\n    return;\n  }\n  Log.w(tag,msg);\n}\n", "nl": "Send a WARNING log message", "id": "47762"}
{"code": "public void entering(String sourceClass,String sourceMethod){\n  logp(Level.FINER,sourceClass,sourceMethod,\"ENTRY\");\n}\n", "nl": "Log a method entry. <p> This is a convenience method that can be used to log entry to a method.  A LogRecord with message \"ENTRY\", log level FINER, and the given sourceMethod and sourceClass is logged. <p>", "id": "30022"}
{"code": "@Override public MapboxMapMatching build() throws ServicesException {\n  validateAccessToken(accessToken);\n  validateProfile();\n  validateGpsPrecision();\n  validateTrace();\n  return new MapboxMapMatching(this);\n}\n", "nl": "Builder method", "id": "51370"}
{"code": "public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException {\n}\n", "nl": "Directly call the comment method on the passed LexicalHandler for the string-value.", "id": "24854"}
{"code": "public int lastIndexOf(Object elem){\n  return delegate.lastIndexOf(elem);\n}\n", "nl": "Returns the index of the last occurrence of <code>elem</code>.", "id": "54747"}
{"code": "public Duration minusSeconds(long secondsToSubtract){\n  return (secondsToSubtract == Long.MIN_VALUE ? plusSeconds(Long.MAX_VALUE).plusSeconds(1) : plusSeconds(-secondsToSubtract));\n}\n", "nl": "Returns a copy of this duration with the specified duration in seconds subtracted. <p> This instance is immutable and unaffected by this method call.", "id": "23427"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(characterdatainsertdatabeginning.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "53024"}
{"code": "private boolean hasNextPostponed(){\n  return !postponedRoutes.isEmpty();\n}\n", "nl": "Returns true if there is another postponed route to try.", "id": "55855"}
{"code": "public void seek(long pos) throws java.io.IOException {\n  byteSourcePosition=pos;\n  isBack=false;\n}\n", "nl": "Sets the current position in the source to the specified index.", "id": "1545"}
{"code": "public void connectToHost(String bindDN,String bindPassword,AtomicInteger nextMessageID) throws LDAPConnectionException {\n  connectToHost(bindDN,bindPassword,nextMessageID,0);\n}\n", "nl": "Connects to the directory server instance running on specified hostname and port number.", "id": "34156"}
{"code": "public double noise(double x,double frequency,double amplitude){\n  return noise(x,0,0,frequency,amplitude);\n}\n", "nl": "Generates noise for the 1D coordinates using the specified number of octaves and parameters", "id": "29158"}
{"code": "private void showDlgApplications(){\n  RuleBuilder.instance().resetActionPath();\n  Intent intent=new Intent();\n  intent.setClass(getApplicationContext(),ActivityDlgApplications.class);\n  startActivityForResult(intent,REQUEST_ADD_ACTION);\n}\n", "nl": "Starts up the initial activity for adding a new action.", "id": "40121"}
{"code": "@Override public List<Foo> findByField2(boolean field2){\n  return findByField2(field2,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);\n}\n", "nl": "Returns all the foos where field2 = &#63;.", "id": "34291"}
{"code": "protected synchronized Runnable waitForWork(){\n  while (tasks.size() == 0) {\n    try {\n      wait();\n    }\n catch (    InterruptedException ie) {\n      return null;\n    }\n  }\n  Runnable work=tasks.firstElement();\n  tasks.removeElementAt(0);\n  return work;\n}\n", "nl": "Used by the worker thread to get a new task to execute", "id": "8804"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.SingleLogoutServiceElement createSingleLogoutServiceElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.SingleLogoutServiceElementImpl();\n}\n", "nl": "Create an instance of SingleLogoutServiceElement", "id": "25476"}
{"code": "private void writeStatusContents(ServerDescriptor desc,int maxLabelWidth){\n  writeLabelValue(INFO_SERVER_STATUS_LABEL.get(),getStatus(desc).toString(),maxLabelWidth);\n}\n", "nl": "Writes the status contents displaying with what is specified in the provided ServerDescriptor object.", "id": "31494"}
{"code": "public static List<Control> createDelayControlList(long delay){\n  Control c=new DelayRequestControl(false,delay);\n  return CollectionUtils.newArrayList(c);\n}\n", "nl": "Retrieves a list containing a delay request LDAP control with the specified delay.", "id": "6951"}
{"code": "public boolean isPurgeHistoricalSubcommand(){\n  return isSubcommand(PURGE_HISTORICAL_SUBCMD_NAME);\n}\n", "nl": "Returns whether the user provided subcommand is the purge historical or not.", "id": "14902"}
{"code": "private static String prefixIfRequired(String authClassRef){\n  if ((authClassRef != null) && (authClassRef.indexOf(':') == -1)) {\n    return SAML2Constants.AUTH_CTX_PREFIX + authClassRef;\n  }\n else {\n    return authClassRef;\n  }\n}\n", "nl": "Adds prefix to the authn class reference only when there is  no \":\" present.", "id": "4190"}
{"code": "public static String formatDateLong(Date d){\n  if (d == null) {\n    return \"\";\n  }\n  return new SimpleDateFormat(LONG_DATE_FORMAT).format(d);\n}\n", "nl": "Convert date and time to string like \"yyyy-MM-dd HH:mm:ss\".", "id": "5069"}
{"code": "public static void updateTableSizes(JTable table){\n  updateTableSizes(table,-1);\n}\n", "nl": "Updates the size of the table rows according to the size of the rendered component.", "id": "45120"}
{"code": "public void init(boolean forEncryption,CipherParameters params){\n  if (params instanceof KeyParameter) {\n    workingKey=((KeyParameter)params).getKey();\n    setKey(workingKey);\n    return;\n  }\n  throw new IllegalArgumentException(\"invalid parameter passed to RC4 init - \" + params.getClass().getName());\n}\n", "nl": "initialise a RC4 cipher.", "id": "49582"}
{"code": "@Override public String toString(){\n  return getClass().getName() + \"[index=\" + currentPosition+ \", errorIndex=\"+ errorIndex+ \"]\";\n}\n", "nl": "Returns the string representation of this parse position.", "id": "52710"}
{"code": "public void editingCanceled(ChangeEvent e){\n  getHandler().editingCanceled(e);\n}\n", "nl": "Messaged when editing has been canceled in the tree.", "id": "29244"}
{"code": "public void removeDuration(){\n  super.removeParameter(DURATION);\n}\n", "nl": "remove duration field", "id": "30915"}
{"code": "public boolean hasSASLMechanism(String saslMechanism){\n  return this.saslMechanism.equals(saslMechanism);\n}\n", "nl": "Indicates whether the client is currently authenticated using the specified SASL mechanism.", "id": "35411"}
{"code": "public void outline(Graphics2D g,Instruction inst){\n  TokenRange range=inst.getFile().getTokenRangeFor(inst);\n  if (range != null) {\n    outline(g,range);\n  }\n}\n", "nl": "Assumes that the graphics context is in this view's coordinate system.", "id": "4989"}
{"code": "@DataProvider(name=\"uncaughtInvalidFilters\") public Object[][] paramsCreateFilterFromStringUncaughtInvalidFilters(){\n  return new Object[][]{{\"(cn=**)\"},{\"( sn = test )\"},{\"&(cn=*)\"},{\"(!(sn=test)(sn=test2))\"},{\"(objectclass=**)\"}};\n}\n", "nl": "This is more or less the same as what's above, but it's for invalid filters that are not currently detected by the parser.  To turn these on, remove them from the broken group.  As the code is modified to handle these cases, please add these test cases to the paramsCreateFilterFromStringInvalidFilters DataProvider.", "id": "17251"}
{"code": "long longValue(){\n  return id;\n}\n", "nl": "Get the value of the entry ID as a long.", "id": "33256"}
{"code": "public boolean mkdir(){\n  SecurityManager security=System.getSecurityManager();\n  if (security != null) {\n    security.checkWrite(path);\n  }\n  if (isInvalid()) {\n    return false;\n  }\n  return fs.createDirectory(this);\n}\n", "nl": "Creates the directory named by this abstract pathname.", "id": "57491"}
{"code": "private <T>Handler<AsyncResult<SQLConnection>> connHandler(Handler<AsyncResult<T>> h1,Handler<SQLConnection> h2){\n  return null;\n}\n", "nl": "A helper methods that generates async handler for SQLConnection", "id": "32214"}
{"code": "public void paint(Graphics g,JComponent c){\n  Shape clip=g.getClip();\n  paintImpl(g,c);\n  g.setClip(clip);\n  paintDropLine(g);\n}\n", "nl": "Paint the rows that intersect the Graphics objects clipRect.  This method calls paintCell as necessary.  Subclasses may want to override these methods.", "id": "22717"}
{"code": "private void writeObject(ObjectOutputStream s) throws IOException {\n  s.defaultWriteObject();\n  s.writeObject(myMimeType.getMimeType());\n}\n", "nl": "Write the instance to a stream (ie serialize the object).", "id": "31609"}
{"code": "@Override public int hashCode(){\n  return PlainSocketFactory.class.hashCode();\n}\n", "nl": "Obtains a hash code for this object. All instances of this class have the same hash code. There is only one instance of this class.", "id": "58212"}
{"code": "boolean isValidMask(){\n  return validMask;\n}\n", "nl": "Returns true if the current mask is valid.", "id": "38594"}
{"code": "@Override public void close(){\n}\n", "nl": "Closing this writer has no effect.", "id": "8181"}
{"code": "protected String start(ContextName cn,StringManager smClient){\n  StringWriter stringWriter=new StringWriter();\n  PrintWriter printWriter=new PrintWriter(stringWriter);\n  super.start(printWriter,cn,smClient);\n  return stringWriter.toString();\n}\n", "nl": "Start the web application at the specified context path.", "id": "42979"}
{"code": "public void mouseExited(MouseEvent e){\n}\n", "nl": "Invoked when the mouse exits a component. <P>", "id": "30015"}
{"code": "public com.sun.identity.saml2.jaxb.metadataextquery.ActionNamespaceElement createActionNamespaceElement(java.lang.String value) throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadataextquery.impl.ActionNamespaceElementImpl(value);\n}\n", "nl": "Create an instance of ActionNamespaceElement", "id": "53715"}
{"code": "@Override public boolean equals(Object obj){\n  if (this == obj) {\n    return true;\n  }\n  if (obj instanceof ZoneOffset) {\n    return totalSeconds == ((ZoneOffset)obj).totalSeconds;\n  }\n  return false;\n}\n", "nl": "Checks if this offset is equal to another offset. <p> The comparison is based on the amount of the offset in seconds. This is equivalent to a comparison by ID.", "id": "13081"}
{"code": "private String stringUID(int i){\n  return String.format(\"11111111-1111-1111-1111-%012x\",i);\n}\n", "nl": "Builds and return a uuid from an integer. This methods assume that unique integers are used and does not make any unicity checks. It is only responsible for generating a uid with a correct syntax.", "id": "9904"}
{"code": "@Override public boolean supportsAuthentication(){\n  if (DEBUG.messageEnabled()) {\n    DEBUG.message(\"supportsAuthentication invoked\");\n  }\n  return true;\n}\n", "nl": "Tells whether this identity repository supports authentication.", "id": "390"}
{"code": "public OutputStream _request(String operation,boolean responseExpected){\n  throw new org.omg.CORBA.NO_IMPLEMENT(reason);\n}\n", "nl": "Throws an <code>org.omg.CORBA.NO_IMPLEMENT</code> exception with the message \"This is a locally constrained object.\" This method is the default implementation of the <code>org.omg.CORBA.Object</code> method. <P>Called by a stub to obtain an OutputStream for marshaling arguments. The stub must supply the operation name, and indicate if a response is expected (i.e is this a oneway call).<P>", "id": "5260"}
{"code": "public void stop(){\nsynchronized (eventMutex) {\n    if (this.refCount > 0)     this.refCount--;\n    if (this.refCount == 0) {\n      isStopped=true;\n      eventMutex.notify();\n    }\n  }\n}\n", "nl": "Stop the event scanner. Decrement the reference count and exit the scanner thread if the ref count goes to 0.", "id": "39636"}
{"code": "public Set searchDynamicGroups(String wildcard,Map avPairs,int level) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.DYNAMIC_GROUP),wildcard,avPairs,level);\n}\n", "nl": "Searches for dynamic groups in this organization unit using wildcards and attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be specifed so that DNs of dynamic groups with matching attribute-value pairs will be returned.", "id": "22886"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationPinType createActivationPinType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationPinTypeImpl();\n}\n", "nl": "Create an instance of ActivationPinType", "id": "46876"}
{"code": "public void forceDelete(SSOToken adminToken) throws SMSException, SSOException {\n  delete(adminToken);\n}\n", "nl": "Delete the entry in the datastore. This will delete sub-entries also! TODO: There is no way to set read-only to false, we should see what we can about this.", "id": "15683"}
{"code": "private void adjust_table(){\n  this.table_model=new NetClassTableModel();\n  this.table=new NetClassTable(this.table_model);\n  this.main_panel.remove(this.center_panel);\n  this.add_table();\n  this.pack();\n  this.board_frame.refresh_windows();\n}\n", "nl": "Adjusts the displayed window with the net class table after the size of the table has been changed.", "id": "30176"}
{"code": "public static String[] split(final String value,final String regex){\n  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);\n  return value.split(regex);\n}\n", "nl": "Alias to String split function. Defined only for completeness.", "id": "27128"}
{"code": "private synchronized static void establishCacheManager(){\n  URL url=PreparedStatementFactory.class.getResource(\"/ehcache.xml\");\n  logger.debug(\"Establishing cache manager with config file: \" + url.getPath());\n  if (manager == null) {\n    manager=CacheManager.newInstance(url);\n  }\n  cacheManagerEstablished=true;\n}\n", "nl": "Establishes the cache if it doesn't exist.", "id": "33433"}
{"code": "public int countUndos(UndoOwner[] owners){\n  if (owners == null) {\n    return mUndos.size();\n  }\n  int count=0;\n  int i=0;\n  while ((i=findNextState(mUndos,owners,i)) >= 0) {\n    count++;\n    i++;\n  }\n  return count;\n}\n", "nl": "Return the number of undo states on the undo stack.", "id": "42692"}
{"code": "public void validateObject() throws InvalidObjectException {\n  try {\n    for (    JComponent root : roots) {\n      SwingUtilities.updateComponentTreeUI(root);\n    }\n  }\n  finally {\n    readObjectCallbacks.remove(inputStream);\n  }\n}\n", "nl": "This is the method that's called after the entire graph of objects has been read in.  It initializes the UI property of all of the copmonents with <code>SwingUtilities.updateComponentTreeUI</code>.", "id": "4245"}
{"code": "public static String convertFrameID23To24(String identifier){\n  if (identifier.length() < 4) {\n    return null;\n  }\n  if (ID3v23Frames.getInstanceOf().getIdToValueMap().containsKey(identifier)) {\n    if (ID3v24Frames.getInstanceOf().getIdToValueMap().containsKey(identifier)) {\n      return identifier;\n    }\n else {\n      return ID3Frames.convertv23Tov24.get(identifier.substring(0,4));\n    }\n  }\n  return null;\n}\n", "nl": "Convert from ID3v23 FrameIdentifier to ID3v24", "id": "9096"}
{"code": "static public boolean areEqual(Object aThis,Object aThat){\n  return aThis == null ? aThat == null : aThis.equals(aThat);\n}\n", "nl": "Possibly-null object field. Includes type-safe enumerations and collections, but does not include arrays. See class comment.", "id": "18231"}
{"code": "public void handleButton2Request(RequestInvocationEvent event){\n  CCAddRemove view=(CCAddRemove)getChild(ATTR_NAME_SECURITY_MECH_ID);\n  view.resetStateData();\n  populateMechID();\n  populateValues=true;\n  forwardTo();\n}\n", "nl": "Handles reset request.", "id": "33134"}
{"code": "private static String property(String string){\n  int length=string.length();\n  if (length == 0) {\n    return \"\";\n  }\n else   if (length == 1) {\n    return string.toLowerCase();\n  }\n else {\n    return string.substring(0,1).toLowerCase() + string.substring(1);\n  }\n}\n", "nl": "Get the POJO property name of an getter/setter", "id": "3189"}
{"code": "public void fatalError(SAXParseException e) throws SAXException {\n  throw e;\n}\n", "nl": "Report a fatal XML parsing error. <p>The default implementation throws a SAXParseException. Application writers may override this method in a subclass if they need to take specific actions for each fatal error (such as collecting all of the errors into a single report): in any case, the application must stop all regular processing when this method is invoked, since the document is no longer reliable, and the parser may no longer report parsing events.</p>", "id": "52297"}
{"code": "public StringBuilder encodeBody(StringBuilder retval){\n  return optionTag != null ? retval.append(optionTag) : retval.append(\"\");\n}\n", "nl": "Just the encoded body of the header.", "id": "53281"}
{"code": "public void visitJumpInsn(int opcode,Label label){\n  if (mv != null) {\n    mv.visitJumpInsn(opcode,label);\n  }\n}\n", "nl": "Visits a jump instruction. A jump instruction is an instruction that may jump to another instruction.", "id": "52722"}
{"code": "public static boolean hasControlCharaters(String s){\n  return cntrl_pattern.matcher(s).find();\n}\n", "nl": "Checks if a string contains control characters.", "id": "49959"}
{"code": "Route flipTlsMode(){\n  return new Route(address,proxy,inetSocketAddress,!modernTls);\n}\n", "nl": "Returns a copy of this route with flipped TLS mode.", "id": "30661"}
{"code": "public com.sun.identity.liberty.ws.meta.jaxb.OrganizationType createOrganizationType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.meta.jaxb.impl.OrganizationTypeImpl();\n}\n", "nl": "Create an instance of OrganizationType", "id": "9572"}
{"code": "public static TypeReference newFormalParameterReference(int paramIndex){\n  return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));\n}\n", "nl": "Returns a reference to the type of a formal parameter of a method.", "id": "978"}
{"code": "public boolean isContentAreaFilled(){\n  return contentAreaFilled;\n}\n", "nl": "Gets the <code>contentAreaFilled</code> property.", "id": "2959"}
{"code": "public void readAndExecute(LDAPConnection connection,List<String> lines,LDAPDeleteOptions deleteOptions) throws IOException, LDAPException {\n  for (  String line : lines) {\n    executeDelete(connection,line,deleteOptions);\n  }\n}\n", "nl": "Execute the delete request on the specified list of DNs.", "id": "30664"}
{"code": "public void deleteArtworkField() throws KeyNotFoundException {\n  this.deleteField(FieldKey.COVER_ART);\n}\n", "nl": "Delete all instance of artwork Field", "id": "15650"}
{"code": "public double board_to_dsn(double p_val){\n  return p_val / scale_factor;\n}\n", "nl": "Scale a value from the board to the dsn coordinate system", "id": "16216"}
{"code": "@SuppressWarnings(\"deprecation\") public static void addFile(File f) throws IOException {\n  addURL(f.toURL());\n}\n", "nl": "Add a file to the classpath.", "id": "33128"}
{"code": "public com.sun.identity.saml2.jaxb.xmlsig.TransformElement createTransformElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlsig.impl.TransformElementImpl();\n}\n", "nl": "Create an instance of TransformElement", "id": "13665"}
{"code": "boolean isApplicableToUser(SSOToken token) throws PolicyException, SSOException {\n  return users.isMember(token);\n}\n", "nl": "Checks whether the policy is applicable to user identified by sso token", "id": "30390"}
{"code": "public void uninstallUI(JComponent a){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);\n  }\n}\n", "nl": "Invokes the <code>uninstallUI</code> method on each UI handled by this object.", "id": "29507"}
{"code": "@Override public boolean isWZAudioSampleListenerEnabled(){\n  return true;\n}\n", "nl": "Indicates if audio samples should be sent to the onWZAudioSampleRecorded method or not", "id": "36598"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(characterdatasetdatanomodificationallowederrEE.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "52630"}
{"code": "@Override public void execute() throws BuildException {\n  super.execute();\n  execute(createQueryString(\"/reload\").toString());\n}\n", "nl": "Execute the requested operation.", "id": "2192"}
{"code": "public void swap(final Type prev,final Type type){\n  if (type.getSize() == 1) {\n    if (prev.getSize() == 1) {\n      swap();\n    }\n else {\n      dupX2();\n      pop();\n    }\n  }\n else {\n    if (prev.getSize() == 1) {\n      dup2X1();\n      pop2();\n    }\n else {\n      dup2X2();\n      pop2();\n    }\n  }\n}\n", "nl": "Generates the instructions to swap the top two stack values.", "id": "80"}
{"code": "public boolean isRepresentationClassCharBuffer(){\n  return java.nio.CharBuffer.class.isAssignableFrom(representationClass);\n}\n", "nl": "Returns whether the representation class for this <code>DataFlavor</code> is <code>java.nio.CharBuffer</code> or a subclass thereof.", "id": "46439"}
{"code": "public void checkNumberArgs(int argNum) throws WrongNumberArgsException {\n  if (argNum != 0)   reportWrongNumberArgs();\n}\n", "nl": "Check that the number of arguments passed to this function is correct. This method is meant to be overloaded by derived classes, to check for  the number of arguments for a specific function type.  This method is  called by the compiler for static number of arguments checking.", "id": "37415"}
{"code": "public void revokeWritePermission(Collection attributeNames){\n  Iterator it=attributeNames.iterator();\n  if (it != null) {\n    while (it.hasNext()) {\n      String temp=(String)it.next();\n      writables.remove(temp.toLowerCase());\n    }\n  }\n}\n", "nl": "Revoke write permission on attributes.", "id": "55691"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlsig.ManifestType createManifestType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.ManifestTypeImpl();\n}\n", "nl": "Create an instance of ManifestType", "id": "33114"}
{"code": "public static boolean isCopyAllowed(int permissions){\n  return (EncryptionConstants.ALLOW_COPY & permissions) == EncryptionConstants.ALLOW_COPY;\n}\n", "nl": "Tells you if copying is allowed.", "id": "53642"}
{"code": "public void handleBtnSearchRequest(RequestInvocationEvent event){\n  forwardTo();\n}\n", "nl": "Handles search request.", "id": "41474"}
{"code": "public void removePropertyChangeListener(PropertyChangeListener listener){\n  support.removePropertyChangeListener(listener);\n}\n", "nl": "Remove a property change listener from this component.", "id": "1535"}
{"code": "public static ServerSocket bindFreePort() throws IOException {\n  for (int port=10000; port < 32768; port++) {\n    try {\n      return bindPort(port);\n    }\n catch (    BindException e) {\n    }\n  }\n  throw new BindException(\"Unable to bind to a free port\");\n}\n", "nl": "Find and binds to a free server socket port on the local host. Avoid allocating ephemeral ports since these may be used by client applications such as dsconfig. Instead scan through ports starting from a reasonably high number which avoids most reserved services (see /etc/services) and continues up to the beginning of the ephemeral port range. On most Linux OSes this is 32768, but may be higher.", "id": "32689"}
{"code": "public final int _type2(int identity){\n  int eType;\n  if (identity < m_blocksize)   eType=m_exptype_map0[identity];\n else   eType=m_exptype_map[identity >>> m_SHIFT][identity & m_MASK];\n  if (NULL != eType)   return m_extendedTypes[eType].getNodeType();\n else   return NULL;\n}\n", "nl": "The optimized version of DTMDefaultBase._type().", "id": "35759"}
{"code": "void dumpAsTextFiles() throws ChangelogException {\n  log.dumpAsTextFile(log.getPath());\n}\n", "nl": "Dump this DB as text files, intended for debugging purpose only.", "id": "41516"}
{"code": "@AfterClass public static void afterClass(){\n  f.clearTestTables();\n}\n", "nl": "Cleanup that is performed once after all of the tests in this class are executed.", "id": "58201"}
{"code": "public long roundTripTime(long timeout,TimeUnit unit) throws InterruptedException {\n  if (latch.await(timeout,unit)) {\n    return received - sent;\n  }\n else {\n    return -2;\n  }\n}\n", "nl": "Returns the round trip time for this ping in nanoseconds, or -1 if the response was cancelled, or -2 if the timeout elapsed before the round trip completed.", "id": "27090"}
{"code": "@Override public void processServerShutdown(LocalizableMessage reason){\n  stopRequested=true;\n  while (backGroundThread != null && backGroundThread.isAlive()) {\n    try {\n      backGroundThread.interrupt();\n      backGroundThread.join();\n    }\n catch (    InterruptedException ex) {\n    }\n  }\n  DirectoryServer.deregisterShutdownListener(this);\n  backGroundThread=null;\n}\n", "nl": "Process a server shutdown. If the background thread is running it needs to be interrupted so it can read the stop request variable and exit.", "id": "12673"}
{"code": "@Override public Foo create(long fooId){\n  Foo foo=new FooImpl();\n  foo.setNew(true);\n  foo.setPrimaryKey(fooId);\n  String uuid=PortalUUIDUtil.generate();\n  foo.setUuid(uuid);\n  foo.setCompanyId(companyProvider.getCompanyId());\n  return foo;\n}\n", "nl": "Creates a new foo with the primary key. Does not add the foo to the database.", "id": "23969"}
{"code": "public boolean isExactMatch(){\n  return useExactMatch;\n}\n", "nl": "<p>Is exact matching being used.</p> <p>This rule uses <code>org.apache.commons.beanutils.MethodUtils</code> to introspect the relevant objects so that the right method can be called. Originally, <code>MethodUtils.invokeExactMethod</code> was used. This matches methods very strictly and so may not find a matching method when one exists. This is still the behaviour when exact matching is enabled.</p> <p>When exact matching is disabled, <code>MethodUtils.invokeMethod</code> is used. This method finds more methods but is less precise when there are several methods with correct signatures. So, if you want to choose an exact signature you might need to enable this property.</p> <p>The default setting is to disable exact matches.</p>", "id": "53758"}
{"code": "public static Map<String,Object> params(String key1,Object value1,String key2,Object value2){\n  return map(key1,value1,key2,value2);\n}\n", "nl": "Creates a Map&lt;String, Object&gt; map.", "id": "15820"}
{"code": "public void actionPerformed(ActionEvent e){\n  JTextComponent target=getTextComponent(e);\n  if (target != null) {\n    if ((!target.isEditable()) || (!target.isEnabled())) {\n      UIManager.getLookAndFeel().provideErrorFeedback(target);\n      return;\n    }\n    target.replaceSelection(\"\\n\");\n  }\n}\n", "nl": "The operation to perform when this action is triggered.", "id": "45711"}
{"code": "public boolean newrow(String rowdata[]){\n  if (rowdata != null) {\n    if (maxrows > 0 && nrows >= maxrows) {\n      atmaxrows=true;\n      return true;\n    }\n    rows.addElement(rowdata);\n    nrows++;\n  }\n  return false;\n}\n", "nl": "Callback method used while the query is executed.", "id": "16756"}
{"code": "@Override public void write(String s,int off,int len) throws IOException {\n  if (suspended) {\n    return;\n  }\n  if (s == null) {\n    throw new NullPointerException(sm.getString(\"outputBuffer.writeNull\"));\n  }\n  cb.append(s,off,len);\n  charsWritten+=len;\n}\n", "nl": "Append a string to the buffer", "id": "40859"}
{"code": "public void clear(){\n  int max=bits.length;\n  for (int i=0; i < max; i++) {\n    bits[i]=0;\n  }\n}\n", "nl": "Clears all bits (sets to false).", "id": "4967"}
{"code": "public com.sun.identity.saml2.jaxb.assertion.AdviceType createAdviceType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl();\n}\n", "nl": "Create an instance of AdviceType", "id": "2591"}
{"code": "public SignatureVisitor visitSuperclass(){\n  return this;\n}\n", "nl": "Visits the type of the super class.", "id": "31688"}
{"code": "public String toString(){\n  return Integer.toString(get());\n}\n", "nl": "Returns the String representation of the current value.", "id": "32691"}
{"code": "public static String composeArrayItemPath(String arrayName,int itemIndex) throws XMPException {\n  if (itemIndex > 0) {\n    return arrayName + '[' + itemIndex+ ']';\n  }\n else   if (itemIndex == XMPConst.ARRAY_LAST_ITEM) {\n    return arrayName + \"[last()]\";\n  }\n else {\n    throw new XMPException(\"Array index must be larger than zero\",XMPError.BADINDEX);\n  }\n}\n", "nl": "Compose the path expression for an item in an array.", "id": "45211"}
{"code": "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {\n  return new XNumber(Math.ceil(m_arg0.execute(xctxt).num()));\n}\n", "nl": "Execute the function.  The function must return a valid object.", "id": "57302"}
{"code": "public boolean isDefaultNamespace(String namespaceURI){\n  return false;\n}\n", "nl": "DOM Level 3: Experimental This method checks if the specified <code>namespaceURI</code> is the default namespace or not.", "id": "21353"}
{"code": "public String toString(){\n  return \"NotificationResult: earliest=\" + getEarliestSequenceNumber() + \"; next=\"+ getNextSequenceNumber()+ \"; nnotifs=\"+ getTargetedNotifications().length;\n}\n", "nl": "Returns a string representation of the object.  The result should be a concise but informative representation that is easy for a person to read.", "id": "13895"}
{"code": "@SideOnly(Side.CLIENT) public static void addHolderInfo(long stored,long capacity,List<String> tooltip){\n  tooltip.add(ChatFormatting.DARK_AQUA + I18n.format(\"tooltip.tesla.powerinfo\",Long.toString(stored),Long.toString(capacity)));\n}\n", "nl": "Adds Tesla holder info to a tooltip.", "id": "33070"}
{"code": "public boolean hide(){\n  boolean previous=hidden;\n  hidden=true;\n  return previous;\n}\n", "nl": "Request for rats nest hide and return previous status", "id": "24524"}
{"code": "public void trimToSize(){\n  if (count < value.length) {\n    char[] newValue=new char[count];\n    System.arraycopy(value,0,newValue,0,count);\n    value=newValue;\n    shared=false;\n  }\n}\n", "nl": "Trims off any extra capacity beyond the current length. Note, this method is NOT guaranteed to change the capacity of this object.", "id": "23321"}
{"code": "@Override public TagResult generateValue(TemplateEntry templateEntry,TemplateValue templateValue){\n  DN dn=templateEntry.getDN();\n  if (dn != null && !dn.isRootDN()) {\n    templateValue.getValue().append(dn.rdn());\n  }\n  return TagResult.SUCCESS_RESULT;\n}\n", "nl": "Generates the content for this tag by appending it to the provided tag.", "id": "7323"}
{"code": "public void forceDataStructureChange(){\n  updateDataArray();\n  fireTableStructureChanged();\n  fireTableDataChanged();\n}\n", "nl": "Updates the table model contents, sorts its contents depending on the sort options set by the user and updates the column structure.", "id": "38905"}
{"code": "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  types=null;\n}\n", "nl": "Explicitly set all transient fields.", "id": "24663"}
{"code": "public void postMail(String recipients[],String subject,String message,String from,String charset) throws MessagingException {\n  postMail(recipients,subject,message,from,\"text/plain\",charset);\n}\n", "nl": "Posts e-mail messages to users. This method will wait on for the timeouts when the specified host is down. Use this method in a separate thread so that it will not hang when the mail server is down.", "id": "10031"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ps.ScopingType createScopingType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl();\n}\n", "nl": "Create an instance of ScopingType", "id": "9671"}
{"code": "private static void createAndRegisterWorkflows(Backend<?> backend) throws DirectoryException {\n  for (  DN curBaseDN : backend.getBaseDNs()) {\n    createWorkflow(curBaseDN,backend);\n  }\n}\n", "nl": "Creates a set of workflows for a given backend and registers the workflows with the default network group, the internal network group and he admin network group. There are as many workflows as base DNs defined in the backend.", "id": "9314"}
{"code": "public static boolean notifyAbandonedOperations(){\n  return directoryServer.notifyAbandonedOperations;\n}\n", "nl": "Indicates whether the Directory Server should send a response to an operation that has been abandoned.  Sending such a response is technically a violation of the LDAP protocol specification, but not doing so in that case can cause problems with clients that are expecting a response and may hang until they get one.", "id": "39493"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.assertion.DoNotCacheConditionElement createDoNotCacheConditionElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.DoNotCacheConditionElementImpl();\n}\n", "nl": "Create an instance of DoNotCacheConditionElement", "id": "6082"}
{"code": "public static StringArgument equivalentCommandFileArgument(final LocalizableMessage description) throws ArgumentException {\n  return StringArgument.builder(OPTION_LONG_EQUIVALENT_COMMAND_FILE_PATH).description(description).valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildArgument();\n}\n", "nl": "Returns the \"commandFilePath\" string argument.", "id": "56298"}
{"code": "public void update(byte[] input){\n  engineUpdate(input,0,input.length);\n  state=IN_PROGRESS;\n}\n", "nl": "Updates the digest using the specified array of bytes.", "id": "53625"}
{"code": "protected void closeCDATA() throws org.xml.sax.SAXException {\n  try {\n    m_writer.write(CDATA_DELIMITER_CLOSE);\n    m_cdataTagOpen=false;\n  }\n catch (  IOException e) {\n    throw new SAXException(e);\n  }\n}\n", "nl": "This helper method to writes out \"]]>\" when closing a CDATA section.", "id": "42022"}
{"code": "@Override public String toString(){\n  return \"L\" + System.identityHashCode(this);\n}\n", "nl": "Returns a string representation of this label.", "id": "29731"}
{"code": "public void shrink(int maximumCapacity){\n  if (maximumCapacity < 0)   throw new IllegalArgumentException(\"maximumCapacity must be >= 0: \" + maximumCapacity);\n  if (size > maximumCapacity)   maximumCapacity=size;\n  if (capacity <= maximumCapacity)   return;\n  maximumCapacity=nextPowerOfTwo(maximumCapacity);\n  resize(maximumCapacity);\n}\n", "nl": "Reduces the size of the backing arrays to be the specified capacity or less. If the capacity is already less, nothing is done. If the map contains more items than the specified capacity, the next highest power of two capacity is used instead.", "id": "49621"}
{"code": "public boolean isEmpty(){\n  return map.isEmpty();\n}\n", "nl": "Returns <tt>true</tt> if this set contains no elements.", "id": "26203"}
{"code": "public String toString(){\n  return description;\n}\n", "nl": "Returns the textual description of this <code>ColorType</code>. This is the same value that the <code>ColorType</code> was created with.", "id": "18040"}
{"code": "public static NoContentLicenseEntry noContent(String name,String author,String link){\n  return new NoContentLicenseEntry(name,author,link);\n}\n", "nl": "Create LicenseEntry from provided name, author and link. This method can be used when the library is not hosted on GitHub, and does not provide license info.", "id": "627"}
{"code": "private void refresh() throws UMSException {\n  m_schema=m_datalayer.getSchema(m_principal);\n}\n", "nl": "Refreshes the schema in memory. Should be called if want to retrieve schema information and you are not sure whether or not the schema has been modified outside of this SchemaManager", "id": "9446"}
{"code": "public NodeIterator nodeset() throws javax.xml.transform.TransformerException {\n  return (m_origObj instanceof NodeIterator) ? (NodeIterator)m_origObj : super.nodeset();\n}\n", "nl": "Cast result object to a nodelist. Always issues an error.", "id": "40060"}
{"code": "public SAML2ConfigBuilder spAcsUrl(String spAcsUrl){\n  this.spAcsUrl=spAcsUrl;\n  return this;\n}\n", "nl": "Sets the SP ACS url on the SAML2ConfigBuilder.", "id": "39882"}
{"code": "protected static void cleanDeletedOrgCache(String orgDN){\n  String tdn=orgDN;\n  while (!tdn.equalsIgnoreCase(rootSuffix)) {\n    if (deletedOrg.containsKey(tdn)) {\nsynchronized (deletedOrg) {\n        deletedOrg.remove(tdn);\n      }\n    }\n    tdn=DN.valueOf(tdn).parent().toString().toLowerCase();\n  }\n}\n", "nl": "Method to clean up the deletedOrg cache, when an event notification occurs from the directory", "id": "14997"}
{"code": "public boolean is_cross_hair_cursor(){\n  return custom_cursor != null;\n}\n", "nl": "If the result is true, the custom crosshair cursor will be used in display. Otherwise the standard Cursor will be used. Using the custom cursor may slow down the display performance a lot.", "id": "42592"}
{"code": "public void displayRefreshIcon(boolean display){\n  if (display != displayRefreshIcon) {\n    displayRefreshIcon=display;\n    repaint();\n  }\n}\n", "nl": "Displays a refresh icon on the text field (this is used for instance in the browsers that use this text field to specify a filter: the refresh icon is displayed to show that the filter is being displayed).", "id": "20195"}
{"code": "@Override public boolean markSupported(){\n  return true;\n}\n", "nl": "Answers a boolean indicating whether or not this StringReader supports mark() and reset(). This method always returns true.", "id": "44107"}
{"code": "public ElemTemplateElement appendChild(ElemTemplateElement newChild){\n  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});\n  return null;\n}\n", "nl": "Add a child to the child list.", "id": "34627"}
{"code": "public void end(){\n  stop=true;\n  while (!stopped) {\n    try {\n      Thread.sleep(10);\n    }\n catch (    InterruptedException e) {\n      Log.e(TAG,e.getMessage());\n    }\n  }\n}\n", "nl": "Gracefully stops recording microphone data. Make sure this is called when data no longer needs to be collected to ensure this thread and its resources are properly cleaned up.", "id": "41387"}
{"code": "public Enumeration<Permission> elements(){\nsynchronized (this) {\n    return Collections.enumeration(perms.values());\n  }\n}\n", "nl": "Returns an enumeration of all the BasicPermission objects in the container.", "id": "23673"}
{"code": "protected List<Modification> decodeMods(byte[] in) throws IOException, LDAPException {\n  List<Modification> mods=new ArrayList<>();\n  ASN1Reader reader=ASN1.getReader(in);\n  while (reader.hasNextElement()) {\n    mods.add(LDAPModification.decode(reader).toModification());\n  }\n  return mods;\n}\n", "nl": "Decode mods from the provided byte array.", "id": "4576"}
{"code": "public boolean isSecureProcessing(){\n  return m_isSecureProcessing;\n}\n", "nl": "Return the state of the secure processing feature", "id": "31347"}
{"code": "public static void closeInputmethod(IBinder binder,Context context){\n  InputMethodManager inputMethodManager=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);\n  if (inputMethodManager.isActive()) {\n    inputMethodManager.hideSoftInputFromWindow(binder,InputMethodManager.HIDE_NOT_ALWAYS);\n  }\n}\n", "nl": "Close Soft input method.", "id": "1316"}
{"code": "public static GSSAPISASLBindRequest newGSSAPISASLBindRequest(final String authenticationID,final byte[] password){\n  return new GSSAPISASLBindRequestImpl(authenticationID,password);\n}\n", "nl": "Creates a new GSSAPI SASL bind request having the provided authentication ID and password, but no realm, KDC address, or authorization ID.", "id": "16058"}
{"code": "public void error(String msg){\n  getDebugServiceInstance().error(msg,null);\n}\n", "nl": "Prints error messages only when debug level is greater than DEBUG.OFF.", "id": "46529"}
{"code": "private Template templateWithAnyAttribute(){\n  Template template=mock(Template.class);\n  when(template.hasAttribute(any(AttributeType.class))).thenReturn(true);\n  return template;\n}\n", "nl": "Helper method to build a template that always return true on attribute type check.", "id": "48664"}
{"code": "public void unregisterConnection(ConnectionWrapper conn) throws LdapException {\n  LDAPURL url=makeLDAPUrl(conn);\n  unRegisterAuth(url);\n  String key=makeKeyFromLDAPUrl(url);\n  connectionTable.remove(key);\n}\n", "nl": "Unregisters a connection from this connection pool.", "id": "28871"}
{"code": "public static boolean isDegradedPrintingAllowed(int permissions){\n  return (EncryptionConstants.ALLOW_DEGRADED_PRINTING & permissions) == EncryptionConstants.ALLOW_DEGRADED_PRINTING;\n}\n", "nl": "Tells you if degraded printing is allowed.", "id": "26867"}
{"code": "@Override public void onDestroyView(){\n  super.onDestroyView();\n}\n", "nl": "Remove dialog.", "id": "51055"}
{"code": "public void commitEdit() throws ParseException {\n  JComponent editor=getEditor();\n  if (editor instanceof DefaultEditor) {\n    ((DefaultEditor)editor).commitEdit();\n  }\n}\n", "nl": "Commits the currently edited value to the <code>SpinnerModel</code>. <p> If the editor is an instance of <code>DefaultEditor</code>, the call if forwarded to the editor, otherwise this does nothing.", "id": "11030"}
{"code": "public ByteArrayBuilder appendLong(long l){\n  builder.appendLong(l);\n  return this;\n}\n", "nl": "Append a long to this ByteArrayBuilder.", "id": "30387"}
{"code": "public synchronized boolean isClosed(){\n  return journalWriter == null;\n}\n", "nl": "Returns true if this cache has been closed.", "id": "47824"}
{"code": "public void exiting(String sourceClass,String sourceMethod,Object result){\n  logp(Level.FINER,sourceClass,sourceMethod,\"RETURN {0}\",result);\n}\n", "nl": "Log a method return, with result object. <p> This is a convenience method that can be used to log returning from a method.  A LogRecord with message \"RETURN {0}\", log level FINER, and the gives sourceMethod, sourceClass, and result object is logged. <p>", "id": "168"}
{"code": "protected void printChildren(Graphics g){\n  paintChildren(g);\n}\n", "nl": "Prints this component's children. This is implemented to invoke <code>paintChildren</code> on the component. Override this if you wish to print the children differently than painting.", "id": "2881"}
{"code": "public static boolean isDynamicalOrIgnoredProfile(String realm){\n  String profileAttribute=getProfileAttribute(realm);\n  return profileAttribute != null && (profileAttribute.equalsIgnoreCase(DYNAMIC_PROFILE) || profileAttribute.equalsIgnoreCase(CREATE_ALIAS_PROFILE) || profileAttribute.equalsIgnoreCase(IGNORE_PROFILE));\n}\n", "nl": "Checks if dynamical profile creation or ignore profile is enabled.", "id": "42089"}
{"code": "public void onProviderDisabled(String provider){\n}\n", "nl": "Required to implement. Do nothing.", "id": "7620"}
{"code": "public static char byteToASCII(final byte b){\n  if (isPrintable(b)) {\n    return (char)b;\n  }\n  return ' ';\n}\n", "nl": "Retrieves the printable ASCII representation of the provided byte.", "id": "52954"}
{"code": "public void removeApps(List<AppInfo> apps){\n  mApps.removeApps(apps);\n}\n", "nl": "Removes some apps from the list.", "id": "3757"}
{"code": "@Override public void write(int b) throws IOException {\n  throw exception;\n}\n", "nl": "Throws the configured exception.", "id": "35631"}
{"code": "public boolean isForgottenPasswordEnabled(){\n  return forgottenPasswordEnabled;\n}\n", "nl": "Gets whether forgotten password is enabled.", "id": "53190"}
{"code": "public com.sun.identity.liberty.ws.soapbinding.jaxb11.TimeoutElement createTimeoutElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.soapbinding.jaxb11.impl.TimeoutElementImpl();\n}\n", "nl": "Create an instance of TimeoutElement", "id": "56509"}
{"code": "protected String parsePolicyRule(String policyRule){\n  return policyRule.replace(FULL_SINGLE_LEVEL_WILDCARD,ABBREVIATED_SINGLE_LEVEL_WILDCARD);\n}\n", "nl": "Parse the policy rule of special wildcards into a simple form.", "id": "53856"}
{"code": "private static boolean isSpace(char ch){\n  return XMLCharacterRecognizer.isWhiteSpace(ch);\n}\n", "nl": "Returns whether the specified <var>ch</var> conforms to the XML 1.0 definition of whitespace.  Refer to <A href=\"http://www.w3.org/TR/1998/REC-xml-19980210#NT-S\"> the definition of <CODE>S</CODE></A> for details.", "id": "36007"}
{"code": "private void pop(final int elements){\n  if (outputStackTop >= elements) {\n    outputStackTop-=elements;\n  }\n else {\n    owner.inputStackTop-=elements - outputStackTop;\n    outputStackTop=0;\n  }\n}\n", "nl": "Pops the given number of types from the output frame stack.", "id": "27918"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(documentimportnode14.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "46823"}
{"code": "public String scmUrl(){\n  return properties.getProperty(\"scm.url\");\n}\n", "nl": "Returns the URL of the source repository location on which this build is based.", "id": "37834"}
{"code": "public com.sun.identity.saml2.jaxb.xmlsig.MgmtDataElement createMgmtDataElement(java.lang.String value) throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlsig.impl.MgmtDataElementImpl(value);\n}\n", "nl": "Create an instance of MgmtDataElement", "id": "34076"}
{"code": "public static SearchRequest newSingleEntrySearchRequest(final String dn,String... attributeDescriptions){\n  return Requests.newSingleEntrySearchRequest(dn,SearchScope.BASE_OBJECT,Filter.objectClassPresent().toString(),attributeDescriptions).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));\n}\n", "nl": "Returns a single-entry search request for the given entry DN and attributes.", "id": "42535"}
{"code": "public final void redirect(final ConnectionSecurityProvider provider){\n  redirect=provider.getChannel();\n}\n", "nl": "Redirects a byte channel to a byte channel associated with the specified provider.", "id": "5166"}
{"code": "public static boolean isWritable(Object name){\n  return !(readOnlyContexts.containsKey(name));\n}\n", "nl": "Is the context is writable?", "id": "10862"}
{"code": "public boolean isSameNode(Node other){\n  return this == other;\n}\n", "nl": "Returns whether this node is the same node as the given one. <br>This method provides a way to determine whether two <code>Node</code> references returned by the implementation reference the same object. When two <code>Node</code> references are references to the same object, even if through a proxy, the references may be used completely interchangably, such that all attributes have the same values and calling the same DOM method on either reference always has exactly the same effect.", "id": "13393"}
{"code": "public boolean isPluginDeclared(String id){\n  if (pluginDcls.contains(id))   return true;\n  pluginDcls.add(id);\n  return false;\n}\n", "nl": "Check if the plugin ID has been previously declared.  Make a note that this Id is now declared.", "id": "27679"}
{"code": "public org.omg.CORBA.TypeCode type(){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"type\",_opsClass);\n  DynFixedOperations $self=(DynFixedOperations)$so.servant;\n  try {\n    return $self.type();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Returns the TypeCode associated with this DynAny object. A DynAny object is created with a TypeCode value assigned to it. This TypeCode value determines the type of the value handled through the DynAny object. Note that the TypeCode associated with a DynAny object is initialized at the time the DynAny is created and cannot be changed during lifetime of the DynAny object.", "id": "34653"}
{"code": "public final int pop(){\n  return m_map[--m_firstFree];\n}\n", "nl": "Removes the object at the top of this stack and returns that object as the value of this function.", "id": "24698"}
{"code": "private void verifyTable(String database,String table){\n  Identifier tableId=new Identifier(database,table);\n  if (!tablesRepo.exists(tableId)) {\n    throw new ItemNotFoundException(\"Table not found: \" + tableId.toString());\n  }\n}\n", "nl": "Verifies if a setTable exists or not.", "id": "37116"}
{"code": "public Crop withAspect(int x,int y){\n  cropIntent.putExtra(Extra.ASPECT_X,x);\n  cropIntent.putExtra(Extra.ASPECT_Y,y);\n  return this;\n}\n", "nl": "Set fixed aspect ratio for crop area", "id": "51083"}
{"code": "public int hashCode(){\n  return selectedUserDNs.hashCode();\n}\n", "nl": "Return a hash code for this <code>LDAPUsers</code>.", "id": "40936"}
{"code": "public void makeImmutable(){\n  if (isMutable) {\n    isMutable=false;\n  }\n}\n", "nl": "Makes this object immutable.", "id": "17064"}
{"code": "protected void fireValueChanged(boolean isAdjusting){\n  fireValueChanged(getMinSelectionIndex(),getMaxSelectionIndex(),isAdjusting);\n}\n", "nl": "Notify listeners that we are beginning or ending a series of value changes", "id": "22091"}
{"code": "public void writeUnrecognizedMessage(final int messageID,final byte messageTag,final ByteString messageBytes) throws IOException {\n  logger.trace(\"ENCODE LDAP UNKNOWN MESSAGE(messageID=%d, messageTag=%x, messageBytes=%s)\",messageID,messageTag,messageBytes);\n  writeMessageHeader(messageID);\n{\n    writer.writeOctetString(messageTag,messageBytes);\n  }\n  writer.writeEndSequence();\n}\n", "nl": "Writes a message with the provided id, tag and content bytes.", "id": "52173"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(getAttributeNodeNS01.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "31452"}
{"code": "static <T>Promise<Void> anyBlocking(final List<Promise<T>> promises){\n  return anyBlocking(promises.toArray(new Promise[promises.size()]));\n}\n", "nl": "Any promises must complete.", "id": "15912"}
{"code": "public boolean visitFunction(ExpressionOwner owner,Function func){\n  if ((func instanceof FuncCurrent) || (func instanceof FuncExtFunction))   m_isAbs=false;\n  return true;\n}\n", "nl": "Visit a function.", "id": "33329"}
{"code": "public com.sun.identity.liberty.ws.soapbinding.jaxb11.ServiceInstanceUpdateElement createServiceInstanceUpdateElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.soapbinding.jaxb11.impl.ServiceInstanceUpdateElementImpl();\n}\n", "nl": "Create an instance of ServiceInstanceUpdateElement", "id": "54284"}
{"code": "public static boolean isVendor(String vendor){\n  String javaVendor=System.getProperty(\"java.vendor\");\n  return javaVendor.startsWith(vendor);\n}\n", "nl": "Test if a platform java vendor property starts with the specified vendor string.", "id": "31826"}
{"code": "public InternalSearchOperation processSearch(final SearchRequest request){\n  return processSearch(request,null);\n}\n", "nl": "Processes an internal search operation with the provided information.", "id": "15158"}
{"code": "public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {\n  writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to an <code>OutputStream</code> line by line, using the specified character encoding and the specified line ending. <p> Character encoding names can be found at <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.", "id": "50967"}
{"code": "public String toXML(){\n  StringBuilder stringBuilder=new StringBuilder();\n  return stringBuilder.toString();\n}\n", "nl": "Default toXML Method to Marshal Object into XML.", "id": "58219"}
{"code": "public void goTo(final Label label){\n  mv.visitJumpInsn(Opcodes.GOTO,label);\n}\n", "nl": "Generates the instruction to jump to the given label.", "id": "28533"}
{"code": "public void addResponseProvider(ResponseProvider responseProvider) throws NameAlreadyExistsException {\n  addResponseProvider(null,responseProvider);\n}\n", "nl": "Adds a <code>ResponseProvider</code> object to this instance of <code>ResponseProviders</code>. Since the name is not provided it will be dynamically assigned such that it is unique within this instance of the <code>ResponseProviders</code> . However if a <code>ResponseProvider</code> entry with the same name already  exists in the <code>ResponseProviders</code>, <code>NameAlreadyExistsException</code>  will be thrown.", "id": "45061"}
{"code": "@Override public Connector[] findConnectors(){\n  return connectors;\n}\n", "nl": "Find and return the set of Connectors associated with this Service.", "id": "47029"}
{"code": "public boolean isActive(){\n  return isAlive() && operation != null;\n}\n", "nl": "Indicates whether this worker thread is actively processing a request. Note that this is a point-in-time determination and if a reliable answer is expected then the server should impose some external constraint to ensure that no new requests are enqueued.", "id": "30544"}
{"code": "public void submit(DispatcherTask dispatcherTask){\n  submit(DEFAULT_QUEUE_NAME,dispatcherTask);\n}\n", "nl": "Submits task to the default queue.", "id": "14518"}
{"code": "public void processingInstruction(String target,String data) throws SAXException {\n  if (documentHandler != null)   documentHandler.processingInstruction(target,data);\n}\n", "nl": "Adapt a SAX2 processing instruction event.", "id": "47233"}
{"code": "@Override public boolean isLeapYear(){\n  return chrono.isLeapYear(prolepticYear);\n}\n", "nl": "Checks if the year is a leap year, according to the Hijrah calendar system rules.", "id": "47524"}
{"code": "public void addSeparator(){\n  addSeparator(null);\n}\n", "nl": "Appends a separator of default size to the end of the tool bar. The default size is determined by the current look and feel.", "id": "54104"}
{"code": "protected void handleUnexpectedTextException(String text,RuntimeException e) throws SAXException {\n  reportError(Messages.format(Messages.UNEXPECTED_TEXT,text),e,true);\n}\n", "nl": "Called when a RuntimeException is thrown during unmarshalling a text.", "id": "15775"}
{"code": "public org.omg.CORBA.Any to_any(){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"to_any\",_opsClass);\n  DynValueOperations $self=(DynValueOperations)$so.servant;\n  try {\n    return $self.to_any();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Creates an any value from a DynAny object. A copy of the TypeCode associated with the DynAny object is assigned to the resulting any. The value associated with the DynAny object is copied into the any.", "id": "58679"}
{"code": "public void resetForNewRuleEditing(ModelEvent rootEvent){\n  rule=new Rule();\n  rule.setRootEvent(rootEvent);\n  resetFilterPath();\n  resetActionPath();\n}\n", "nl": "Initialize with a root event. This should be used when the user wants to create a brand new rule.", "id": "53860"}
{"code": "@Override public int hashCode(){\n  int hashCode=dn.hashCode();\n  for (  ObjectClass oc : objectClasses.keySet()) {\n    hashCode+=oc.hashCode();\n  }\n  hashCode+=hashCode(userAttributes.values());\n  hashCode+=hashCode(operationalAttributes.values());\n  return hashCode;\n}\n", "nl": "Retrieves a hash code for this entry.", "id": "16679"}
{"code": "protected void configureScroller(){\n  scroller.setFocusable(false);\n  scroller.getVerticalScrollBar().setFocusable(false);\n  scroller.setBorder(null);\n  installScrollerListeners();\n}\n", "nl": "Configures the scrollable portion which holds the list within the combo box popup. This method is called when the UI class is created.", "id": "31068"}
{"code": "public void doUpgrade(HttpServletRequest request,HttpServletResponse response,ServerEndpointConfig sec,Map<String,String> pathParams) throws ServletException, IOException {\n  UpgradeUtil.doUpgrade(this,request,response,sec,pathParams);\n}\n", "nl": "Until the WebSocket specification provides such a mechanism, this Tomcat proprietary method is provided to enable applications to programmatically determine whether or not to upgrade an individual request to WebSocket. <p> Note: This method is not used by Tomcat but is used directly by third-party code and must not be removed.", "id": "56657"}
{"code": "private static Object maskNull(Object key){\n  return (key == null ? NULL_KEY : key);\n}\n", "nl": "Use NULL_KEY for key if it is null.", "id": "30144"}
{"code": "public void visitFormalTypeParameter(String name){\n}\n", "nl": "Visits a formal type parameter.", "id": "40409"}
{"code": "public void addField(String vorbisCommentKey,String value) throws KeyNotFoundException, FieldDataInvalidException {\n  TagField tagfield=createField(vorbisCommentKey,value);\n  addField(tagfield);\n}\n", "nl": "Create and add field with name of vorbisCommentkey", "id": "808"}
{"code": "public static Foo removeByUUID_G(java.lang.String uuid,long groupId) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {\n  return getPersistence().removeByUUID_G(uuid,groupId);\n}\n", "nl": "Removes the foo where uuid = &#63; and groupId = &#63; from the database.", "id": "55184"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.GenerationType createGenerationType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.GenerationTypeImpl();\n}\n", "nl": "Create an instance of GenerationType", "id": "6881"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.RoleDescriptorType createRoleDescriptorType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.RoleDescriptorTypeImpl();\n}\n", "nl": "Create an instance of RoleDescriptorType", "id": "7357"}
{"code": "public PdfObject put(PdfName key,PdfObject value){\n  assert value != null;\n  return map.put(key,value);\n}\n", "nl": "Inserts the value into this PdfDictionary and associates it with the specified key. If the key is already present in this PdfDictionary, this method will override the old value with the specified one.", "id": "51222"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n  schemaBackend=(SchemaBackend)DirectoryServer.getBackend(\"schema\");\n  assertNotNull(schemaBackend);\n}\n", "nl": "Ensures that the Directory Server is running and gets a reference to the schema backend.", "id": "45408"}
{"code": "public boolean toThunderState(){\n  return to;\n}\n", "nl": "Gets the state of thunder that the world is being set to", "id": "23652"}
{"code": "protected void initCipher() throws IOException {\n  try {\n    cipher.init(Cipher.ENCRYPT_MODE,key,params);\n  }\n catch (  InvalidKeyException e) {\n    throw new IOException(e);\n  }\ncatch (  InvalidAlgorithmParameterException e) {\n    throw new IOException(e);\n  }\n}\n", "nl": "Initializes the cipher.", "id": "8496"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(characterdataindexsizeerrreplacedataoffsetnegative.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "34419"}
{"code": "public void startPreview(){\n  if (camera != null && !previewing) {\n    camera.startPreview();\n    previewing=true;\n  }\n}\n", "nl": "Asks the camera hardware to begin drawing preview frames to the screen.", "id": "8333"}
{"code": "public static SmsRouteTreeBuilder branch(String uriTemplate,SmsRouteTreeBuilder... subTreeBuilders){\n  return new SmsRouteTreeBuilder(uriTemplate).subTrees(subTreeBuilders);\n}\n", "nl": "Creates a builder which adds a branch to the route tree.", "id": "33171"}
{"code": "LambdaFormBuffer insertExpression(int pos,Name expr){\n  assert (!expr.isParam());\n  insertName(pos,expr,false);\n  return this;\n}\n", "nl": "Insert a fresh expression.", "id": "17125"}
{"code": "public int discardBodyData() throws MalformedStreamException, IOException {\n  return readBodyData(null);\n}\n", "nl": "<p> Reads <code>body-data</code> from the current <code>encapsulation</code> and discards it. <p>Use this method to skip encapsulations you don't need or don't understand.", "id": "43185"}
{"code": "public void reset(AsynchronousSocketChannel channel,SocketWrapperBase<Nio2Channel> socket) throws IOException {\n  this.sc=channel;\n  this.socket=socket;\n  bufHandler.reset();\n}\n", "nl": "Reset the channel.", "id": "36673"}
{"code": "public void paintTabbedPaneTabAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintTabbedPaneTabAreaBackground(context,g,x,y,w,h);\n}\n", "nl": "Paints the background of the area behind the tabs of a tabbed pane. This implementation invokes the method of the same name without the orientation.", "id": "21229"}
{"code": "@Override public OkHttpClient clone(){\n  return new OkHttpClient(this);\n}\n", "nl": "Returns a shallow copy of this OkHttpClient.", "id": "27607"}
{"code": "public void callback(String instanceId,String callback,String data){\n  callback(instanceId,callback,data,false);\n}\n", "nl": "Invoke JavaScript callback", "id": "2798"}
{"code": "public final char readChar() throws IOException {\n  return (char)readShort();\n}\n", "nl": "Reads a big-endian 16-bit character from the current position in this file. Blocks until two bytes have been read, the end of the file is reached or an exception is thrown.", "id": "38817"}
{"code": "public double doubleValue(){\n  return doubleValue;\n}\n", "nl": "The number's double value.", "id": "12333"}
{"code": "protected final void endOfInput(boolean streamCancelled) throws IOException {\n  if (cacheRequest != null) {\n    cacheBody.close();\n  }\n  httpEngine.release(streamCancelled);\n}\n", "nl": "Closes the cache entry and makes the socket available for reuse. This should be invoked when the end of the body has been reached.", "id": "46598"}
{"code": "public void runTest() throws Throwable {\n  String namespaceURI=\"*\";\n  String localName=\"*\";\n  Document doc;\n  NodeList newList;\n  doc=(Document)load(\"staffNS\",false);\n  newList=doc.getElementsByTagNameNS(namespaceURI,localName);\n  assertSize(\"throw_Size\",37,newList);\n}\n", "nl": "Runs the test case.", "id": "15908"}
{"code": "public com.sun.identity.saml2.jaxb.xmlenc.AgreementMethodType.KANonce createAgreementMethodTypeKANonce(byte[] value) throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlenc.impl.AgreementMethodTypeImpl.KANonceImpl(value);\n}\n", "nl": "Create an instance of AgreementMethodTypeKANonce", "id": "650"}
{"code": "public void jspError(Exception e,String errCode,String... args) throws JasperException {\n  dispatch(null,errCode,args,e);\n}\n", "nl": "Dispatches the given JSP parse error to the configured error handler. The given error code is localized. If it is not found in the resource bundle for localized error messages, it is used as the error message.", "id": "58331"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.MustSupportRefExternalURIElement createMustSupportRefExternalURIElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.MustSupportRefExternalURIElementImpl();\n}\n", "nl": "Create an instance of MustSupportRefExternalURIElement", "id": "57877"}
{"code": "private void releaseLockAndNotify() throws IllegalMonitorStateException {\n  rwlock.writeLock().unlock();\n}\n", "nl": "Release the lock of this ShutdownManager. IllegalMonitorStateException will be thrown if the current thread is not holding the lock.", "id": "1193"}
{"code": "void dispose(){\n  Component component=getComponent();\n  Window window=SwingUtilities.getWindowAncestor(component);\n  if (component instanceof JWindow) {\n    ((Window)component).dispose();\n    component=null;\n  }\n  if (window instanceof DefaultFrame) {\n    window.dispose();\n  }\n}\n", "nl": "Frees any resources the <code>Popup</code> may be holding onto.", "id": "47401"}
{"code": "public boolean visitInstruction(ElemTemplateElement elem){\n  return true;\n}\n", "nl": "Visit an XSLT instruction.  Any element that isn't called by one  of the other visit methods, will be called by this method.", "id": "39055"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsfederation.WebBindingElement createWebBindingElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.WebBindingElementImpl();\n}\n", "nl": "Create an instance of WebBindingElement", "id": "41329"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.PPType createPPType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.PPTypeImpl();\n}\n", "nl": "Create an instance of PPType", "id": "56368"}
{"code": "public int read() throws IOException {\n  ensureOpen();\n  return read(singleByteBuf,0,1) == -1 ? -1 : Byte.toUnsignedInt(singleByteBuf[0]);\n}\n", "nl": "Reads a byte of uncompressed data. This method will block until enough input is available for decompression.", "id": "19488"}
{"code": "public static String[] array(String... values){\n  return values;\n}\n", "nl": "Create an array of String based on the strings given as parameters.", "id": "7631"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlenc.ReferenceListType.DataReference createReferenceListTypeDataReference() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.ReferenceListTypeImpl.DataReferenceImpl();\n}\n", "nl": "Create an instance of ReferenceListTypeDataReference", "id": "15895"}
{"code": "@Override public void run(){\n  DirectoryServer.shutDown(CLASS_NAME,shutdownMessage);\n}\n", "nl": "Invokes the Directory Server shutdown process.", "id": "13991"}
{"code": "public static void readFully(InputStream in,byte[] dst) throws IOException {\n  readFully(in,dst,0,dst.length);\n}\n", "nl": "Fills 'dst' with bytes from 'in', throwing EOFException if insufficient bytes are available.", "id": "29954"}
{"code": "public boolean hasTimeout(){\n  return hasTimeout;\n}\n", "nl": "Tells if the matching update had timeout.", "id": "38239"}
{"code": "@Issue(\"JENKINS-29922\") @Test public void dollar_class_must_die2() throws Exception {\n  WorkflowJob p=r.jenkins.createProject(WorkflowJob.class,\"die2\");\n  p.setDefinition(new CpsFlowDefinition(\"california ocean:'pacific', mountain:'sierra', moderate:true\"));\n  r.assertLogContains(\"Introducing california\\nCalifornia from pacific to sierra\",r.assertBuildStatusSuccess(p.scheduleBuild2(0)));\n}\n", "nl": "Split arguments between meta step and state", "id": "32156"}
{"code": "private void notify_readers(){\n  currentReaders+=queuedReaders;\n  queuedReaders=0;\n  notifyAll();\n}\n", "nl": "Notify all the threads that have been waiting to read.", "id": "9792"}
{"code": "@SuppressWarnings(\"unused\") static <T>Promise<List<T>> promiseList(Class<T> componentType){\n  return new BasePromise<>();\n}\n", "nl": "Generic list promise. Added to make static imports possible.", "id": "14674"}
{"code": "protected void invokeOperator(PdfLiteral operator,List<PdfObject> operands){\n  IContentOperator op=operators.get(operator.toString());\n  if (op == null)   op=operators.get(DEFAULT_OPERATOR);\n  op.invoke(this,operator,operands);\n}\n", "nl": "Invokes an operator.", "id": "25248"}
{"code": "static MutableBigInteger modInverseBP2(MutableBigInteger mod,int k){\n  return fixup(new MutableBigInteger(1),new MutableBigInteger(mod),k);\n}\n", "nl": "Calculate the multiplicative inverse of 2^k mod mod, where mod is odd.", "id": "49033"}
{"code": "public static void assertPrefix(String prefix) throws XMPException {\n  if (prefix == null || prefix.length() == 0) {\n    throw new XMPException(\"Empty prefix\",XMPError.BADPARAM);\n  }\n}\n", "nl": "Asserts that a prefix is set.", "id": "10132"}
{"code": "public boolean isGroupWritable(){\n  return is(encodedPermission,GROUP_WRITABLE);\n}\n", "nl": "Indicates whether this file permission includes the group write permission.", "id": "39270"}
{"code": "public static String parseMatchingRuleUseOID(String definition) throws DirectoryException {\n  return parseOID(definition,ERR_PARSING_MATCHING_RULE_USE_OID);\n}\n", "nl": "Returns the OID from the provided matching rule use definition, assuming the definition is valid. <p> This method does not perform any check.", "id": "3752"}
{"code": "public JsonValue build() throws IOException {\n  return JsonValueBuilder.toJsonValue(JsonValueBuilder.getObjectMapper().writeValueAsString(this));\n}\n", "nl": "Builds this ScriptResponse into a JsonValue for transport to the SDK.", "id": "34104"}
{"code": "public static int collectDefaults(){\n  int flags=0;\n  for (  Feature f : values()) {\n    if (f.enabledByDefault()) {\n      flags|=f.getMask();\n    }\n  }\n  return flags;\n}\n", "nl": "Method that calculates bit set (flags) of all features that are enabled by default.", "id": "22944"}
{"code": "public com.sun.identity.liberty.ws.meta.jaxb.EntitiesDescriptorType createEntitiesDescriptorType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.meta.jaxb.impl.EntitiesDescriptorTypeImpl();\n}\n", "nl": "Create an instance of EntitiesDescriptorType", "id": "51868"}
{"code": "@Override protected Object createSsoServerPolicySvcMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){\n  if (server != null)   policySvcGroup=new SsoServerPolicySvcImpl(this,server);\n else   policySvcGroup=new SsoServerPolicySvcImpl(this);\n  return policySvcGroup;\n}\n", "nl": "Factory method for \"SsoServerPolicySvc\" group MBean. You can redefine this method if you need to replace the default generated MBean class with your own customized class.", "id": "34389"}
{"code": "public void beginDisplay(DisplayEvent event) throws ModelControlException {\n  super.beginDisplay(event);\n  PWResetSuccessModel model=(PWResetSuccessModel)getModel();\n  setDisplayFieldValue(CC_TITLE,model.getTitleString());\n  setDisplayFieldValue(RESET_MESSAGE,resetMsg);\n}\n", "nl": "Set the required information to display the page.", "id": "32510"}
{"code": "protected void drawRadioField(PdfCanvas canvas,float width,float height,boolean on){\n  canvas.saveState();\n  if (on) {\n    canvas.resetFillColorRgb().circle(width / 2,height / 2,Math.min(width,height) / 4).fill();\n  }\n  canvas.restoreState();\n}\n", "nl": "Draws a radio button.", "id": "56124"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(documentcreatecomment.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "58303"}
{"code": "public boolean isCancelled(){\n  return this.cancelled;\n}\n", "nl": "Indicates whether this operation has been cancelled.", "id": "13410"}
{"code": "@Override public void removeByUuid_C(String uuid,long companyId){\n  for (  Foo foo : findByUuid_C(uuid,companyId,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {\n    remove(foo);\n  }\n}\n", "nl": "Removes all the foos where uuid = &#63; and companyId = &#63; from the database.", "id": "55087"}
{"code": "public void parseArguments(final String[] rawArguments) throws ArgumentException {\n  parseArguments(rawArguments,null);\n}\n", "nl": "Parses the provided set of arguments and updates the information associated with this parser accordingly.", "id": "56760"}
{"code": "public static String format(Date d){\n  return d == null ? null : format(d.getTime());\n}\n", "nl": "Retrieves the generalized time representation of the provided date.", "id": "9405"}
{"code": "public int intValue(){\n  return intValue;\n}\n", "nl": "Returns the integer value of this alias dereferencing policy as defined in RFC 4511 section 4.5.1.", "id": "147"}
{"code": "private void zzScanError(int errorCode){\n  String message;\n  try {\n    message=ZZ_ERROR_MSG[errorCode];\n  }\n catch (  ArrayIndexOutOfBoundsException e) {\n    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];\n  }\n  throw new Error(message);\n}\n", "nl": "Reports an error that occured while scanning. In a wellformed scanner (no or only correct usage of  yypushback(int) and a match-all fallback rule) this method  will only be called with things that \"Can't Possibly Happen\". If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.). Usual syntax/scanner level error handling should be done in error fallback rules.", "id": "47833"}
{"code": "@Override public void flush(){\n  Logger logger=LoggerFactory.getLogger(PdfDocument.class);\n  logger.warn(\"PdfCatalog cannot be flushed manually\");\n}\n", "nl": "PdfCatalog will be flushed in PdfDocument.close(). User mustn't flush PdfCatalog!", "id": "45210"}
{"code": "@SuppressWarnings({\"rawtypes\",\"unchecked\"}) static int compareComparables(Class<?> kc,Object k,Object x){\n  return (x == null || x.getClass() != kc ? 0 : ((Comparable)k).compareTo(x));\n}\n", "nl": "Returns k.compareTo(x) if x matches kc (k's screened comparable class), else 0.", "id": "16956"}
{"code": "public void removeAllOperations(){\n  if (operationHandlerThreadHandler != null) {\n    operationHandlerThreadHandler.removeCallbacksAndMessages(null);\n  }\n  operationQueue.clear();\n}\n", "nl": "Remove all pending Operations that are in OperationQueue", "id": "43612"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.OrganizationNameElement createOrganizationNameElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.OrganizationNameElementImpl();\n}\n", "nl": "Create an instance of OrganizationNameElement", "id": "4287"}
{"code": "protected void removeDomain(Entry... domainCfgEntries) throws Exception {\n  for (  Entry entry : domainCfgEntries) {\n    if (entry != null) {\n      deleteEntry(entry.getName());\n    }\n  }\n}\n", "nl": "Utility method : removes a domain deleting the passed config entry", "id": "10954"}
{"code": "@Override public void toString(StringBuilder buffer){\n  buffer.append(\"InternalClientConnection(connID=\");\n  buffer.append(connectionID);\n  buffer.append(\", authDN=\\\"\");\n  if (getAuthenticationInfo() != null) {\n    buffer.append(getAuthenticationInfo().getAuthenticationDN());\n  }\n  buffer.append(\"\\\")\");\n}\n", "nl": "Appends a string representation of this client connection to the provided buffer.", "id": "38894"}
{"code": "public void cache(String dn,ReferralPrivilege p,String realm){\n  rwlock.writeLock().lock();\n  try {\n    cache.put(dn,p);\n  }\n  finally {\n    rwlock.writeLock().unlock();\n  }\n}\n", "nl": "Caches a referral privilege.", "id": "15871"}
{"code": "public synchronized void newPixels(byte[] newpix,ColorModel newmodel,int offset,int scansize){\n  this.pixels=newpix;\n  this.model=newmodel;\n  this.pixeloffset=offset;\n  this.pixelscan=scansize;\n  newPixels();\n}\n", "nl": "Changes to a new byte array to hold the pixels for this image. If the animation flag has been turned on through the setAnimated() method, then the new pixels will be immediately delivered to any ImageConsumers that are currently interested in the data for this image.", "id": "37227"}
{"code": "public void deleteSessionJwtCookie(MessageInfo messageInfo){\n  getServerAuthModule().deleteSessionJwtCookie(messageInfo);\n}\n", "nl": "Provides a way to delete the Jwt Session Cookie, by setting a new cookie with the same name, null value and max age 0. Calls into the underlying Jaspi module.", "id": "9276"}
{"code": "public boolean isSingleEntrySearch(){\n  return sizeLimit == 1 || SearchScope.BASE_OBJECT.equals(scope);\n}\n", "nl": "To be removed.", "id": "41795"}
{"code": "public void parse(String systemId) throws IOException, SAXException {\n  parse(new InputSource(systemId));\n}\n", "nl": "Parse an XML document.", "id": "29697"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodedocumentnodevalue.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "16717"}
{"code": "private void updateFilteredTokens(){\n  setFilteredTokens(getFilteredTokens(getRawTokens()));\n}\n", "nl": "Updates the tokens to create a set of filtered tokens that make up the various XML elements etc for final creation of in-memory XML representation.", "id": "56404"}
{"code": "public boolean isRequired(){\n  return getFieldFlag(FF_REQUIRED);\n}\n", "nl": "Gets the Required flag, specifying whether or not the field must be filled in.", "id": "22501"}
{"code": "public DNLock tryWriteLockEntry(final DN entry){\n  return acquireLockFromCache(entry).tryWriteLockEntry();\n}\n", "nl": "Acquires the write lock for the specified entry. This method will block if the entry is already read or write locked or if the entry, or any of its parents, have the subtree write lock taken.", "id": "14813"}
{"code": "public boolean isFragment(){\n  return fragment;\n}\n", "nl": "Whether this attribute is of type JspFragment.", "id": "6831"}
{"code": "public static void main(String[] args){\n  getInstance().registerHanders(\"com.jk.annotations\");\n  JKExceptionUtil.handle(new IOException(\"test exception\"));\n}\n", "nl": "The main method.", "id": "9148"}
{"code": "public Set searchFilteredRoles(String wildcard,int level) throws AMException, SSOException {\n  return searchFilteredRoles(wildcard,null,level);\n}\n", "nl": "Searches for filtered roles in this organizational unit using wildcards. Wildcards can be specified such as a*, *, *a.", "id": "37470"}
{"code": "public void beginDisplay(DisplayEvent event) throws ModelControlException {\n  super.beginDisplay(event);\n  setDisplayFieldValue(FORM_ACTION,urlViewBean);\n}\n", "nl": "Set value for form action.", "id": "35629"}
{"code": "public AnnotationVisitor visitAnnotation(String desc,boolean visible){\n  if (cv != null) {\n    return cv.visitAnnotation(desc,visible);\n  }\n  return null;\n}\n", "nl": "Visits an annotation of the class.", "id": "40018"}
{"code": "public static DecodeException error(final LocalizableMessage message,final Throwable cause){\n  return new DecodeException(message,false,cause);\n}\n", "nl": "Creates a new non-fatal decode exception with the provided message and root cause.", "id": "10022"}
{"code": "@SuppressWarnings(\"unchecked\") @Override public Object clone(){\n  HashMap<K,V> result;\n  try {\n    result=(HashMap<K,V>)super.clone();\n  }\n catch (  CloneNotSupportedException e) {\n    throw new InternalError(e);\n  }\n  result.reinitialize();\n  result.putMapEntries(this,false);\n  return result;\n}\n", "nl": "Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.", "id": "51615"}
{"code": "@Override public String toString(){\n  return \"WaspHash [path=\" + path + \"] total size: (K) \"+ FileUtils.sizeOf(new File(path));\n}\n", "nl": "Return some information about this WaspHash", "id": "53295"}
{"code": "public static String toLowerCase(String value){\n  return value != null ? value.toLowerCase() : null;\n}\n", "nl": "Converts all of the characters in a string to lower case.", "id": "37156"}
{"code": "protected Entry<K,V> nextEntry(){\n  if (modCount != expectedModCount)   throw new ConcurrentModificationException();\n  if (nextKey == null && !hasNext())   throw new NoSuchElementException();\n  lastReturned=entry;\n  entry=entry.next;\n  currentKey=nextKey;\n  nextKey=null;\n  return lastReturned;\n}\n", "nl": "The common parts of next() across different types of iterators", "id": "26440"}
{"code": "private Object readResolve() throws ObjectStreamException {\n  return m_dialogStateArray[m_dialogState];\n}\n", "nl": "Returns the designated type as an alternative object to be used when writing an object to a stream. This method would be used when for example serializing DialogState.EARLY and deserializing it afterwards results again in DialogState.EARLY. If you do not implement readResolve(), you would not get DialogState.EARLY but an instance with similar content.", "id": "40928"}
{"code": "EntitlementSubject migrateSubjectCondition(String conditionClassName,PolicySubject subject,MigrationReport migrationReport){\n  return subjectConditionsUpgradeMap.get(conditionClassName).migrate(subject,migrationReport);\n}\n", "nl": "Migrates the specified subject from the old policy subject condition class to the corresponding new entitlement subject condition.", "id": "49377"}
{"code": "public ArrayList<ArtLayer> art_layer_list(){\n  return layers_list;\n}\n", "nl": "Return the direct reference to the layer list that baks the config This can be used in a table model, until the table model is merged here...", "id": "30905"}
{"code": "public static void removeAll(){\n  getPersistence().removeAll();\n}\n", "nl": "Removes all the foos from the database.", "id": "33974"}
{"code": "public void mouse_moved(Point p_point){\n  if (board_is_read_only)   return;\n  if (interactive_state != null && gdi_context != null) {\n    current_mouse_position=gdi_context.coordinate_transform.screen_to_board(p_point);\n    StateInteractive return_state=interactive_state.mouse_moved();\n    if (return_state != interactive_state) {\n      set_interactive_state(return_state);\n      repaint();\n    }\n  }\n}\n", "nl": "Actions to be taken in the current interactive state when the mouse pointer has moved.", "id": "21965"}
{"code": "public CodeStream putFloat(final float f){\n  return putInt(Float.floatToRawIntBits(f));\n}\n", "nl": "Puts a float into this byte stream. The byte stream is automatically enlarged if necessary.", "id": "41032"}
{"code": "public void update(LdapDataLayerConfiguration config){\n  config.updateExternalLdapConfiguration(hosts,username,password,maxConnections,sslMode,heartbeat);\n}\n", "nl": "Causes this instance to refresh its configuration.", "id": "56683"}
{"code": "public com.sun.identity.liberty.ws.interaction.jaxb.InteractionRequestElement createInteractionRequestElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.InteractionRequestElementImpl();\n}\n", "nl": "Create an instance of InteractionRequestElement", "id": "19303"}
{"code": "public boolean isDataModified(){\n  if (this.deletedRecords.size() > 0) {\n    return true;\n  }\n  for (  final JKTableRecord rec : this.records) {\n    if (rec.getStatus() == RecordStatus.MODIFIED) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks if is data modified.", "id": "2609"}
{"code": "private boolean containsHeader(final Map<String,Object> headerMap,final String headerName){\n  for (  final String name : headerMap.keySet()) {\n    if (name.trim().equalsIgnoreCase(headerName)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Case-insensitive search for presence of a header.", "id": "34402"}
{"code": "private void init(Class<?> defClass,String name,Object type,int flags){\n  this.clazz=defClass;\n  this.name=name;\n  this.type=type;\n  this.flags=flags;\n  assert (testAnyFlags(ALL_KINDS));\n  assert (this.resolution == null);\n}\n", "nl": "Initialize a query.   It is not resolved.", "id": "33374"}
{"code": "public boolean isAmbient(){\n  return ambient;\n}\n", "nl": "Makes potion effect produce more, translucent, particles.", "id": "58450"}
{"code": "@Override public void close() throws Exception {\n  save();\nsynchronized (groups) {\nsynchronized (users) {\n      users.clear();\n      groups.clear();\n    }\n  }\n}\n", "nl": "Finalize access to this user database.", "id": "1276"}
{"code": "public void makeImmutable(){\n  if (isMutable) {\n    isMutable=false;\n  }\n}\n", "nl": "Makes this object immutable.", "id": "39679"}
{"code": "public static BooleanArgument cliArgument() throws ArgumentException {\n  return BooleanArgument.builder(OPTION_LONG_CLI).shortIdentifier(OPTION_SHORT_CLI).description(INFO_ARGUMENT_DESCRIPTION_CLI.get()).buildArgument();\n}\n", "nl": "Returns the \"CLI\" boolean argument. <br> <i> N.B : the 'i' short option is also used by encoding.</i>", "id": "47641"}
{"code": "private void returnBuffer(ByteBuffer buf){\n  if (buf != null) {\n    buf.clear();\n    bufferPool.add(buf);\n  }\n}\n", "nl": "Returns direct buffer to pool.", "id": "11104"}
{"code": "public boolean isOnLine2(){\n  return onLine2;\n}\n", "nl": "Determine if the intersecting point lands on line 2 or not.", "id": "5224"}
{"code": "public void detach(){\n  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_DETACH_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));\n}\n", "nl": "Detaches the <code>DTMIterator</code> from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state. After <code>detach</code> has been invoked, calls to <code>nextNode</code> or <code>previousNode</code> will raise a runtime exception. In general, detach should only be called once on the object.", "id": "38962"}
{"code": "public static void error(Level level,String msgid,String data[]){\n  error(level,msgid,data,null);\n}\n", "nl": "Logs error messages to ID-FF error log.", "id": "18884"}
{"code": "public boolean isCellEditable(int rowIndex,int columnIndex){\n  return false;\n}\n", "nl": "Returns false.  This is the default implementation for all cells.", "id": "14409"}
{"code": "@Fluent public Job onPromotion(Handler<Job> handler){\n  this.on(\"promotion\",null);\n  return this;\n}\n", "nl": "Add on promotion handler on event bus.", "id": "24707"}
{"code": "public void handleButton3Request(RequestInvocationEvent event){\n  forwardToAuthServicesView(event);\n}\n", "nl": "Handles reset request.", "id": "28673"}
{"code": "public void reload(){\n  diagnostics.reload();\n}\n", "nl": "Diagnostics' configuration reload operation.", "id": "31366"}
{"code": "@Override public MatchStrength hasFormat(InputAccessor acc) throws IOException {\n  return MatchStrength.INCONCLUSIVE;\n}\n", "nl": "Sub-classes need to override this method", "id": "47426"}
{"code": "public static com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){\n  return getService().deleteFoo(foo);\n}\n", "nl": "Deletes the foo from the database. Also notifies the appropriate model listeners.", "id": "44325"}
{"code": "public com.sun.identity.liberty.ws.disco.jaxb.ServiceTypeElement createServiceTypeElement(java.lang.String value) throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.disco.jaxb.impl.ServiceTypeElementImpl(value);\n}\n", "nl": "Create an instance of ServiceTypeElement", "id": "15315"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hasAttributeNS01.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "35754"}
{"code": "public AccountService initializePersistence(Handler<AsyncResult<Void>> resultHandler){\n  delegate.initializePersistence(resultHandler);\n  return this;\n}\n", "nl": "Initialize the persistence.", "id": "12047"}
{"code": "public static CompletionStatus from_int(int i){\nswitch (i) {\ncase _COMPLETED_YES:\n    return COMPLETED_YES;\ncase _COMPLETED_NO:\n  return COMPLETED_NO;\ncase _COMPLETED_MAYBE:\nreturn COMPLETED_MAYBE;\ndefault :\nthrow new org.omg.CORBA.BAD_PARAM();\n}\n}\n", "nl": "Creates a <code>CompletionStatus</code> object from the given <code>int</code>.", "id": "54146"}
{"code": "public boolean isFocusTraversable(JComboBox c){\n  return !comboBox.isEditable();\n}\n", "nl": "Determines if the JComboBox is focus traversable.  If the JComboBox is editable this returns false, otherwise it returns true.", "id": "55067"}
{"code": "public NSObject remove(String key){\n  return dict.remove(key);\n}\n", "nl": "Removes a key-value pair from this dictionary.", "id": "34652"}
{"code": "public boolean isDeclared(String uri,String localName){\n  int index=getIndex(uri,localName);\n  if (index < 0)   throw new IllegalArgumentException(\"No such attribute: local=\" + localName + \", namespace=\"+ uri);\n  return declared[index];\n}\n", "nl": "Returns the current value of the attribute's \"declared\" flag.", "id": "48701"}
{"code": "public Builder withName(String name){\n  this.handlerName=name;\n  return this;\n}\n", "nl": "Add the handler name.", "id": "54857"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(attrnextsiblingnull.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "13"}
{"code": "@Override public void cacheResult(Foo foo){\n  entityCache.putResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,foo.getPrimaryKey(),foo);\n  finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,new Object[]{foo.getUuid(),foo.getGroupId()},foo);\n  foo.resetOriginalValues();\n}\n", "nl": "Caches the foo in the entity cache if it is enabled.", "id": "19843"}
{"code": "public int hashCode(){\n  return map.hashCode();\n}\n", "nl": "Returns hash code of the map.", "id": "8722"}
{"code": "public void dragOver(DropTargetDragEvent dtde){\n}\n", "nl": "Called when a drag operation is ongoing, while the mouse pointer is still over the operable part of the drop site for the <code>DropTarget</code> registered with this listener.", "id": "48237"}
{"code": "public static boolean isAlpha(final char c){\n  final ASCIICharProp cp=ASCIICharProp.valueOf(c);\n  return cp != null ? cp.isLetter() : false;\n}\n", "nl": "Indicates whether the provided character is an ASCII alphabetic character.", "id": "8297"}
{"code": "public boolean contributesToDomainState(){\n  return true;\n}\n", "nl": "Whether the current message can update the \"ds-sync-state\" attribute.", "id": "57649"}
{"code": "@Override public String toString(){\n  StringBuilder risul=new StringBuilder(1000);\n  risul.append(\"ShapeSearchTree \\n\");\n  risul.append(\"objects: ... \\n\");\n  risul.append(\"methods: statistics() \\n\");\n  return risul.toString();\n}\n", "nl": "Used to have some meaningful info on this object Mostly used for beanshell", "id": "3713"}
{"code": "public static String decode(String s){\n  String ret=null;\n  try {\n    ret=decode(s,UTF_8);\n  }\n catch (  UnsupportedEncodingException e) {\n  }\n  return ret;\n}\n", "nl": "Decodes a <code>application/x-www-form-urlencoded</code> string using the UTF-8 encoding scheme. The <a href=\"http://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars\"> World Wide Web Consortium Recommendation</a> states that UTF-8 should be used to ensure compatibilities.", "id": "34966"}
{"code": "public void update(Graphics g){\n  paint(g);\n}\n", "nl": "Just calls <code>paint(g)</code>.  This method was overridden to prevent an unnecessary call to clear the background.", "id": "16134"}
{"code": "public static void writeLines(File file,String encoding,Collection<?> lines,boolean append) throws IOException {\n  writeLines(file,encoding,lines,null,append);\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to the specified <code>File</code> line by line, optionally appending. The specified character encoding and the default line ending will be used.", "id": "46697"}
{"code": "public void paintSplitPaneDividerForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n}\n", "nl": "Paints the foreground of the divider of a split pane.", "id": "12124"}
{"code": "public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {\n  flushPending();\n  if (m_tracer != null)   super.fireEscapingEvent(target,data);\n}\n", "nl": "Receive notification of a processing instruction. <p>The Parser will invoke this method once for each processing instruction found: note that processing instructions may occur before or after the main document element.</p> <p>A SAX parser should never report an XML declaration (XML 1.0, section 2.8) or a text declaration (XML 1.0, section 4.3.1) using this method.</p>", "id": "56515"}
{"code": "public final String toString(){\n  return (name + \", early reflection delay \" + earlyReflectionDelay+ \" ns, early reflection intensity \"+ earlyReflectionIntensity+ \" dB, late deflection delay \"+ lateReflectionDelay+ \" ns, late reflection intensity \"+ lateReflectionIntensity+ \" dB, decay time \"+ decayTime);\n}\n", "nl": "Provides a <code>String</code> representation of the reverb type, including its name and its parameter settings. The exact contents of the string may vary between implementations of Java Sound.", "id": "29472"}
{"code": "public boolean logout(String sessionID,HttpServletRequest request,HttpServletResponse response) throws SSOException {\n  return AuthUtils.logout(sessionID,request,response);\n}\n", "nl": "Performs a logout on a given token ensuring the post auth classes are called.", "id": "12000"}
{"code": "public static AbandonRequest newAbandonRequest(final int requestID){\n  return new AbandonRequestImpl(requestID);\n}\n", "nl": "Creates a new abandon request using the provided message ID.", "id": "388"}
{"code": "public void addZoneAdjustment(ZoneAdjustment za){\n  zoneAdjustments.add(za);\n}\n", "nl": "Add an element to the zone adjustment list.", "id": "50914"}
{"code": "private RunnableScheduledFuture<?> peekExpired(){\n  RunnableScheduledFuture<?> first=queue[0];\n  return (first == null || first.getDelay(NANOSECONDS) > 0) ? null : first;\n}\n", "nl": "Returns first element only if it is expired. Used only by drainTo.  Call only when holding lock.", "id": "4626"}
{"code": "public void enqueueNormal(String methodName,int count){\n  Deque<InvocationHandler> handlers=getHandlers(methodName);\n  for (int i=0; i < count; i++) {\n    handlers.add(delegateHandler);\n  }\n}\n", "nl": "Enqueues the specified number of normal operations. Useful to delay faults.", "id": "8176"}
{"code": "public boolean equals(Object object){\n  return (super.equals(object) && object instanceof PageRanges);\n}\n", "nl": "Returns whether this page ranges attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: <OL TYPE=1> <LI> <CODE>object</CODE> is not null. <LI> <CODE>object</CODE> is an instance of class PageRanges. <LI> This page ranges attribute's members and <CODE>object</CODE>'s members are the same. </OL>", "id": "20557"}
{"code": "Builder addLenient(String name,String value){\n  namesAndValues.add(name);\n  namesAndValues.add(value.trim());\n  return this;\n}\n", "nl": "Add a field with the specified value without any validation. Only appropriate for headers from the remote peer or cache.", "id": "40070"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.protocol.StatusMessageElement createStatusMessageElement(java.lang.String value) throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.StatusMessageElementImpl(value);\n}\n", "nl": "Create an instance of StatusMessageElement", "id": "16486"}
{"code": "@Override public boolean change_layer_action(int p_new_layer){\n  int r_layer=i_brd.set_layer(p_new_layer);\n  actlog_start_scope(LogfileScope.CHANGE_LAYER,r_layer);\n  layer_changed=r_layer == p_new_layer;\n  return layer_changed;\n}\n", "nl": "Changes the first layer of the items in the copy list to p_new_layer.", "id": "9436"}
{"code": "@Override public int hashCode(){\n  long nod=toNanoOfDay();\n  return (int)(nod ^ (nod >>> 32));\n}\n", "nl": "A hash code for this time.", "id": "13973"}
{"code": "public boolean has_trace_half_width(int p_trace_half_width){\n  int layer_count=layer_count();\n  for (int index=0; index < layer_count; index++) {\n    if (trace_half_width_arr[index] != p_trace_half_width)     return false;\n  }\n  return true;\n}\n", "nl": "Cheks if all layers have a trace half width given", "id": "12914"}
{"code": "public StringBuilder encodeBody(StringBuilder buffer){\n  return buffer.append(rSeqNumber).append(SP).append(cSeqNumber).append(SP).append(method);\n}\n", "nl": "Encode the body of this header (the stuff that follows headerName). A.K.A headerValue.", "id": "19660"}
{"code": "public static boolean isRegisteredFont(String fontName){\n  return fontRegisterProvider.isRegisteredFont(fontName);\n}\n", "nl": "Checks if a certain font is registered.", "id": "16285"}
{"code": "public AttributeTable add(ASN1ObjectIdentifier attrType,ASN1Encodable attrValue){\n  AttributeTable newTable=new AttributeTable(attributes);\n  newTable.addAttribute(attrType,new Attribute(attrType,new DERSet(attrValue)));\n  return newTable;\n}\n", "nl": "Return a new table with the passed in attribute added.", "id": "26411"}
{"code": "private void push(final ClassWriter cw,final String desc){\n  int type=type(cw,desc);\n  if (type != 0) {\n    push(type);\n    if (type == LONG || type == DOUBLE) {\n      push(TOP);\n    }\n  }\n}\n", "nl": "Pushes a new type onto the output frame stack.", "id": "42900"}
{"code": "@Override public String toString(){\n  return \"FastDateFormat[\" + printer.getPattern() + \",\"+ printer.getLocale()+ \",\"+ printer.getTimeZone().getID()+ \"]\";\n}\n", "nl": "<p>Gets a debugging string version of this formatter.</p>", "id": "56251"}
{"code": "public void paintScrollBarTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintScrollBarTrackBackground(context,g,x,y,w,h);\n}\n", "nl": "Paints the background of the track of a scrollbar. The track contains the thumb. This implementation invokes the method of the same name without the orientation.", "id": "9318"}
{"code": "private static BeanInfo findExplicitBeanInfo(Class<?> beanClass){\n  return ThreadGroupContext.getContext().getBeanInfoFinder().find(beanClass);\n}\n", "nl": "Looks for an explicit BeanInfo class that corresponds to the Class. First it looks in the existing package that the Class is defined in, then it checks to see if the class is its own BeanInfo. Finally, the BeanInfo search path is prepended to the class and searched.", "id": "49966"}
{"code": "public void register(String elemname,String classname){\n  if (elemmap == null) {\n    elemmap=new Hashtable();\n  }\n  elemmap.put(elemname,classname);\n}\n", "nl": "Registers a call back function.", "id": "23733"}
{"code": "@Override public boolean isStretchWidth(){\n  return true;\n}\n", "nl": "Returns true, in other words the region width is 100%.", "id": "1398"}
{"code": "@Override public R visitVariable(VariableElement e,P p){\n  return scan(e.getEnclosedElements(),p);\n}\n", "nl": "This implementation scans the enclosed elements.", "id": "11134"}
{"code": "protected Document createDefaultModel(){\n  return new PlainDocument();\n}\n", "nl": "Creates the default implementation of the model to be used at construction if one isn't explicitly given.  A new instance of PlainDocument is returned.", "id": "11093"}
{"code": "@Deprecated public String toLocaleString(){\n  DateFormat formatter=DateFormat.getDateTimeInstance();\n  return formatter.format(this);\n}\n", "nl": "Creates a string representation of this <tt>Date</tt> object in an implementation-dependent form. The intent is that the form should be familiar to the user of the Java application, wherever it may happen to be running. The intent is comparable to that of the \"<code>%c</code>\" format supported by the <code>strftime()</code> function of ISO&nbsp;C.", "id": "6264"}
{"code": "public Object eval(Reader reader,Bindings bindings) throws ScriptException {\n  ScriptContext ctxt=getScriptContext(bindings);\n  return eval(reader,ctxt);\n}\n", "nl": "<code>eval(Reader, Bindings)</code> calls the abstract <code>eval(Reader, ScriptContext)</code> method, passing it a <code>ScriptContext</code> whose Reader, Writers and Bindings for scopes other that <code>ENGINE_SCOPE</code> are identical to those members of the protected <code>context</code> field.  The specified <code>Bindings</code> is used instead of the <code>ENGINE_SCOPE</code> <code>Bindings</code> of the <code>context</code> field.", "id": "33822"}
{"code": "public Object clone(){\n  ChoiceFormat other=(ChoiceFormat)super.clone();\n  other.choiceLimits=choiceLimits.clone();\n  other.choiceFormats=choiceFormats.clone();\n  return other;\n}\n", "nl": "Overrides Cloneable", "id": "15526"}
{"code": "@Override public void removeByField2(boolean field2){\n  for (  Foo foo : findByField2(field2,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {\n    remove(foo);\n  }\n}\n", "nl": "Removes all the foos where field2 = &#63; from the database.", "id": "26336"}
{"code": "@Override public String format(DateTimeFormatter formatter){\n  Objects.requireNonNull(formatter,\"formatter\");\n  return formatter.format(this);\n}\n", "nl": "Formats this date-time using the specified formatter. <p> This date-time will be passed to the formatter to produce a string.", "id": "24278"}
{"code": "public final boolean sameNodeAs(Node other){\n  if (!(other instanceof DTMNodeProxy))   return false;\n  DTMNodeProxy that=(DTMNodeProxy)other;\n  return this.dtm == that.dtm && this.node == that.node;\n}\n", "nl": "FUTURE DOM: Test node identity, in lieu of Node==Node", "id": "38733"}
{"code": "public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){\n}\n", "nl": "This method will be invoked when a service's global configuration data has been changed. The parameter <code>groupName</code> denotes the name of the configuration grouping (e.g. default) and <code>serviceComponent</code> denotes the service's sub-component that changed (e.g. <code>/NamedPolicy</code>, <code>/Templates</code>).", "id": "13688"}
{"code": "public static double bearing(Position p1,Position p2){\n  return bearing(Point.fromCoordinates(p1),Point.fromCoordinates(p2));\n}\n", "nl": "Takes two positions and finds the geographic bearing between them.", "id": "29518"}
{"code": "private void doTargetRefresh(SIPMessage sipMessage){\n  ContactList contactList=sipMessage.getContactHeaders();\n  if (contactList != null) {\n    Contact contact=(Contact)contactList.getFirst();\n    this.setRemoteTarget(contact);\n  }\n}\n", "nl": "Do taget refresh dialog state updates. RFC 3261: Requests within a dialog MAY contain Record-Route and Contact header fields. However, these requests do not cause the dialog's route set to be modified, although they may modify the remote target URI. Specifically, requests that are not target refresh requests do not modify the dialog's remote target URI, and requests that are target refresh requests do. For dialogs that have been established with an INVITE, the only target refresh request defined is re-INVITE (see Section 14). Other extensions may define different target refresh requests for dialogs established in other ways.", "id": "51032"}
{"code": "public static boolean isOpenIdConnectFragmentErrorType(Set<String> requestedResponseTypes){\n  return requestedResponseTypes.contains(ID_TOKEN) || requestedResponseTypes.contains(TOKEN);\n}\n", "nl": "When using the OpenId Connect authorization Implicit Flow the response_type value is \"id_token token\" or \"id_token\". When using the Hybrid Flow, this value is \"code id_token\", \"code token\", or \"code id_token\" token.", "id": "37958"}
{"code": "void shutdown(){\n  cursor=NONE;\n  if (nextIndex >= 0)   nextIndex=REMOVED;\n  if (lastRet >= 0) {\n    lastRet=REMOVED;\n    lastItem=null;\n  }\n  prevTakeIndex=DETACHED;\n}\n", "nl": "Called to notify the iterator that the queue is empty, or that it has fallen hopelessly behind, so that it should abandon any further iteration, except possibly to return one more element from next(), as promised by returning true from hasNext().", "id": "13443"}
{"code": "protected boolean isOk(final int code){\nswitch (code) {\ncase HTTP_OK:\ncase HTTP_CREATED:\ncase HTTP_ACCEPTED:\n    return true;\ndefault :\n  return false;\n}\n}\n", "nl": "Does status code denote a non-error response?", "id": "53878"}
{"code": "public boolean addElement(Object key){\n  return false;\n}\n", "nl": "Implements for TaskRunnable interface, always return false.", "id": "41932"}
{"code": "public static Attribute create(AttributeType attributeType,String name,String valueString){\n  return create(attributeType,name,ByteString.valueOfUtf8(valueString));\n}\n", "nl": "Creates a new single-valued attribute with the attribute type and value.", "id": "20206"}
{"code": "public void handleButton3Request(RequestInvocationEvent event){\n  MAPClientManagerViewBean vb=(MAPClientManagerViewBean)getViewBean(MAPClientManagerViewBean.class);\n  passPgSessionMap(vb);\n  vb.forwardTo(getRequestContext());\n}\n", "nl": "Handles cancel request.", "id": "50123"}
{"code": "public ReconAuditEventBuilder ambiguousTargetIds(String ambiguousTargetIds){\n  jsonValue.put(AMBIGUOUS_TARGET_IDS,ambiguousTargetIds);\n  return self();\n}\n", "nl": "Sets the ambiguousTargetIds that are already expected to be a common delimited list of unquoted ids.", "id": "45775"}
{"code": "public void parse(InputSource input) throws SAXException, IOException {\n  setupParse();\n  parent.parse(input);\n}\n", "nl": "Parse a document.", "id": "51990"}
{"code": "public void mergeDifferent(PdfDictionary other){\n  for (  PdfName key : other.keySet()) {\n    if (!containsKey(key))     put(key,other.get(key));\n  }\n}\n", "nl": "This method merges different fields from two dictionaries into the current one", "id": "42032"}
{"code": "public void resetFactory(){\n  sipStackList.clear();\n  messageFactory=null;\n  headerFactory=null;\n  addressFactory=null;\n  sipStackByName=new Hashtable();\n  pathName=\"gov.nist\";\n}\n", "nl": "This method reset's the SipFactory's references to the object's it has created. It allows these objects to be garbage collected assuming the application no longer holds references to them. This method must be called to reset the factories references to a specific vendors implementation of this specification before it creates another vendors implementation of this specification by changing the <var>pathname</var> of the SipFactory.", "id": "47297"}
{"code": "public boolean isEnabled(){\n  return logStatus;\n}\n", "nl": "Returns true if logging is enabled.", "id": "50549"}
{"code": "public void process(String name,Vector elems,Hashtable atts,String pcdata){\n  str=pcdata;\n}\n", "nl": "The method that implements the ParseOutput interface. This is called by the SAX parser.", "id": "15917"}
{"code": "public boolean removeAudience(java.lang.String audience){\n  if ((audience != null) && !(audience.length() == 0)) {\n    _audience.remove(audience);\n    return true;\n  }\n else   return false;\n}\n", "nl": "Removes an audience from the <code>List</code> within this Condition element", "id": "38337"}
{"code": "public UserPrincipal principal(){\n  return who;\n}\n", "nl": "Returns the principal component.", "id": "51482"}
{"code": "public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {\n  return toXMLString(includeNS,declareNS,false);\n}\n", "nl": "Returns a String representation of the Logout Response.", "id": "41728"}
{"code": "public void print(String s){\n  writer.print(s);\n}\n", "nl": "Prints the given string. The string must not contain any '\\n', otherwise the line count will be off.", "id": "44645"}
{"code": "public void addAttributes(final List<JKKeyValue<String,String>> attributes){\n  for (  final JKKeyValue<String,String> keyValue : attributes) {\n    addAttribue(keyValue.getKey(),keyValue.getValue());\n  }\n}\n", "nl": "Adds the attributes.", "id": "7451"}
{"code": "public void stopServer() throws Exception {\n  Method method=catalinaDaemon.getClass().getMethod(\"stopServer\",(Class[])null);\n  method.invoke(catalinaDaemon,(Object[])null);\n}\n", "nl": "Stop the standalone server.", "id": "44495"}
{"code": "public void insertUpdate(FlowView fv,DocumentEvent e,Rectangle alloc){\n  sync(fv);\n  super.insertUpdate(fv,e,alloc);\n}\n", "nl": "Gives notification that something was inserted into the document in a location that the given flow view is responsible for.  The strategy should update the appropriate changed region (which depends upon the strategy used for repair).", "id": "525"}
{"code": "public void rejectedExecution(Runnable r,ThreadPoolExecutor e){\n}\n", "nl": "Does nothing, which has the effect of discarding task r.", "id": "30808"}
{"code": "public static String gensalt(){\n  return gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);\n}\n", "nl": "Generate a salt for use with the BCrypt.hashpw() method, selecting a reasonable default for the number of hashing rounds to apply.", "id": "10496"}
{"code": "public static void removeByUuid_C(java.lang.String uuid,long companyId){\n  getPersistence().removeByUuid_C(uuid,companyId);\n}\n", "nl": "Removes all the foos where uuid = &#63; and companyId = &#63; from the database.", "id": "31716"}
{"code": "public static boolean isMemoryDB(String dbURL) throws InvalidException {\n  if (dbURL == null) {\n    throw new InvalidException(\"dbURL is not set\");\n  }\n  return dbURL.startsWith(\"memory:\");\n}\n", "nl": "Whether the URL represents a memory DB", "id": "29544"}
{"code": "public void replaceReferral(String name,Referral referral) throws NameNotFoundException {\n  referrals.replaceReferral(name,referral);\n}\n", "nl": "Replaces an existing referral with the same name by the current one. If a referral with the same name does not exist, it will be added.", "id": "4434"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(namednodemapremovenameditemns01.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "19502"}
{"code": "public void run(){\n  if (Debug.messageEnabled()) {\n    Debug.message(fileName + \":FileHandler:TimeBufferingTask.run() called\");\n  }\n  nonBlockingFlush();\n}\n", "nl": "The method which implements the GeneralTaskRunnable.", "id": "3320"}
{"code": "protected void onRequestHandlerNotSpecified(RequestContext requestContext) throws ServletException {\n  ViewBeanManager viewBeanManager=requestContext.getViewBeanManager();\n  ViewBean targetView=viewBeanManager.getViewBean(AMInvalidURLViewBean.class);\n  targetView.forwardTo(requestContext);\n  throw new CompleteRequestException();\n}\n", "nl": "Forwards to invalid URL view bean, in case of no handler specified", "id": "27149"}
{"code": "public final String peek(){\n  return (m_firstFree <= 0) ? null : m_map[m_firstFree - 1];\n}\n", "nl": "Get the string at the tail of this vector without popping.", "id": "38187"}
{"code": "public synchronized void replaceItem(String newValue,int index){\n  remove(index);\n  add(newValue,index);\n}\n", "nl": "Replaces the item at the specified index in the scrolling list with the new string.", "id": "4933"}
{"code": "public void delete(String tokenID,String objName) throws SMSException, SSOException, RemoteException {\n  initialize();\n  if (debug.messageEnabled()) {\n    debug.message(\"SMSJAXRPCObjectImpl::delete dn: \" + objName);\n  }\n  SMSEntry entry=new SMSEntry(getToken(tokenID),objName);\n  entry.delete();\n}\n", "nl": "Delete the entry in the datastore. This should delete sub-entries also", "id": "7362"}
{"code": "public static void d(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_DEBUG) {\n    return;\n  }\n  Log.d(tag,msg,throwable);\n}\n", "nl": "Send a DEBUG log message", "id": "38834"}
{"code": "public void addProperty(String key,JsonElement value){\n  getProperties().add(key,value);\n}\n", "nl": "Convenience method to add a JsonElement member.", "id": "26059"}
{"code": "public void warning(SAXParseException e) throws SAXException {\n}\n", "nl": "Receive notification of a parser warning. <p>The default implementation does nothing.  Application writers may override this method in a subclass to take specific actions for each warning, such as inserting the message in a log file or printing it to the console.</p>", "id": "5769"}
{"code": "public Session readSession(SessionID sessionID){\n  Reject.ifNull(sessionID);\n  return sessionTable.get(sessionID);\n}\n", "nl": "Reads a Session from the Session table.", "id": "20092"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.IPAddressElement createIPAddressElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.IPAddressElementImpl();\n}\n", "nl": "Create an instance of IPAddressElement", "id": "16918"}
{"code": "public static long hash64(final byte[] data,int length){\n  return hash64(data,length,0xe17a1465);\n}\n", "nl": "Generates 64 bit hash from byte array with default seed value.", "id": "16931"}
{"code": "public boolean isAppSession(){\n  return sessionType == SessionType.APPLICATION;\n}\n", "nl": "Determine whether it is an application session.", "id": "43129"}
{"code": "public int startX(){\n  return (int)(surfaceSize.x * (viewportRect.left - minX) / (maxX - minX));\n}\n", "nl": "Returns start X value to perform scroll or fling", "id": "5711"}
{"code": "public boolean isShuttingDown(){\n  return shuttingDown;\n}\n", "nl": "Indicates whether the server is currently in the process of shutting down.", "id": "55406"}
{"code": "private String htmlDecode(String content){\n  return Jsoup.parse(content).text();\n}\n", "nl": "Transforms from html to normal string", "id": "1968"}
{"code": "protected void handleGenericException(Exception e) throws SAXException {\n  reportError(e.getMessage(),e,false);\n}\n", "nl": "Last resort when something goes terribly wrong within the unmarshaller.", "id": "53992"}
{"code": "public void addUsers(Set users) throws AMException, SSOException {\n  SSOTokenManager.getInstance().validateToken(super.token);\n  dsServices.modifyMemberShip(super.token,users,super.entryDN,ROLE,ADD_MEMBER);\n}\n", "nl": "Adds users to the role.", "id": "14751"}
{"code": "protected boolean pageDown(TextView widget,Spannable buffer){\n  return false;\n}\n", "nl": "Performs a page-down movement action. Moves the cursor or scrolls down by one page.", "id": "24699"}
{"code": "@Override protected void thresholdReached() throws IOException {\n  if (prefix != null) {\n    outputFile=File.createTempFile(prefix,suffix,directory);\n  }\n  FileOutputStream fos=new FileOutputStream(outputFile);\n  memoryOutputStream.writeTo(fos);\n  currentOutputStream=fos;\n  memoryOutputStream=null;\n}\n", "nl": "Switches the underlying output stream from a memory based stream to one that is backed by disk. This is the point at which we realise that too much data is being written to keep in memory, so we elect to switch to disk-based storage.", "id": "17193"}
{"code": "public synchronized long resetByteCount(){\n  long tmp=this.count;\n  this.count=0;\n  return tmp;\n}\n", "nl": "Set the byte count back to 0.  <p> NOTE: This method is an alternative for <code>resetCount()</code>. It was added because that method returns an integer which will result in incorrect count for files over 2GB.", "id": "58252"}
{"code": "@Override public boolean accept(File file,String name){\n  for (  String prefix : prefixes) {\n    if (caseSensitivity.checkStartsWith(name,prefix)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks to see if the filename starts with the prefix.", "id": "14186"}
{"code": "public String toString(){\n  return (\"FederationPrincipal:  \" + name);\n}\n", "nl": "Return a string representation of this <code>FederationPrincipal</code>. <p>", "id": "5862"}
{"code": "protected boolean hasCompressedThumbnail(){\n  return mThumbnail != null;\n}\n", "nl": "Returns true it this header contains a compressed thumbnail.", "id": "26577"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(localName02.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "54005"}
{"code": "public String displayStructureAsXML(){\n  createXMLStructureFormatter();\n  tagFormatter.openHeadingElement(\"file\",this.getFile().getAbsolutePath());\n  if (this.getID3v1Tag() != null) {\n    this.getID3v1Tag().createStructure();\n  }\n  if (this.getID3v2Tag() != null) {\n    this.getID3v2Tag().createStructure();\n  }\n  tagFormatter.closeHeadingElement(\"file\");\n  return tagFormatter.toString();\n}\n", "nl": "Displays MP3File Structure", "id": "36033"}
{"code": "public Builder withParentSpanId(String parentSpanId){\n  this.parentSpanId=parentSpanId;\n  return this;\n}\n", "nl": "Sets the ID of the span that spawned this span instance (the logical \"parent\" of this span), or pass in null if no such parent exists. If you pass in null then this instance will be a root span for the distributed trace - the ultimate ancestor of all other spans in the trace tree.", "id": "25510"}
{"code": "public final boolean hasSetting(DOMDocumentBuilderFactory factory){\n  return strategy.hasSetting(factory) == value;\n}\n", "nl": "Determines current value of setting.", "id": "19078"}
{"code": "public CSN nextCSN() throws DataFormatException {\n  try {\n    return CSN.valueOf(bytes.readByteSequence(CSN.BYTE_ENCODING_LENGTH));\n  }\n catch (  IndexOutOfBoundsException e) {\n    throw new DataFormatException(e.getMessage());\n  }\n}\n", "nl": "Reads the next CSN.", "id": "29526"}
{"code": "public int size(){\n  return waitingQueue.size() + workingList.size();\n}\n", "nl": "Return the number of object in this queue (i.e. the  number of object in both sub-queues).", "id": "18082"}
{"code": "@Override public String toJson(){\n  GsonBuilder gson=new GsonBuilder();\n  gson.registerTypeAdapter(Position.class,new PositionSerializer());\n  return gson.create().toJson(this);\n}\n", "nl": "Convert feature collection into JSON.", "id": "23550"}
{"code": "protected void loadChildren(ViewFactory f){\n  Document doc=getDocument();\n  int offs0=getStartOffset();\n  int offs1=getEndOffset();\n  append(createZone(offs0,offs1));\n  handleInsert(offs0,offs1 - offs0);\n}\n", "nl": "Loads all of the children to initialize the view. This is called by the <code>setParent</code> method. This is reimplemented to not load any children directly (as they are created by the zones).  This method creates the initial set of zones.  Zones don't actually get populated however until an attempt is made to display them or to do model/view coordinate translation.", "id": "21050"}
{"code": "private void writeObject(ObjectOutputStream s) throws IOException, ClassNotFoundException {\n  ObjectOutputStream.PutField fields=s.putFields();\n  fields.put(\"baseTypeName\",baseTypeName);\n  fields.put(\"object\",object);\n  fields.put(\"reference\",reference instanceof Serializable ? reference : null);\n  s.writeFields();\n}\n", "nl": "writeObject is called to save the state of the SerialRef to a stream.", "id": "26418"}
{"code": "public boolean isCachedFile(){\n  return false;\n}\n", "nl": "Returns <code>false</code> since this <code>ImageInputStream</code> does not maintain a file cache.", "id": "36219"}
{"code": "private static void debugPrintln(String msg){\n  if (DEBUG) {\n    System.err.println(\"JAXP: \" + msg);\n  }\n}\n", "nl": "Prints a message to standard error if debugging is enabled.", "id": "20789"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsaddr.RelatesToType createRelatesToType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.RelatesToTypeImpl();\n}\n", "nl": "Create an instance of RelatesToType", "id": "7840"}
{"code": "public static String applyErrorBackgroundToHtml(String html){\n  return DIV_OPEN_ERROR_BACKGROUND + html + DIV_CLOSE;\n}\n", "nl": "Returns the html text passed as parameter with the error background applied to it.", "id": "40120"}
{"code": "public String toString(){\n  return \"(unresolved \" + type + \" \"+ name+ \" \"+ actions+ \")\";\n}\n", "nl": "Returns a string describing this UnresolvedPermission.  The convention is to specify the class name, the permission name, and the actions, in the following format: '(unresolved \"ClassName\" \"name\" \"actions\")'.", "id": "37672"}
{"code": "public final char yycharat(int pos){\n  return zzBuffer[zzStartRead + pos];\n}\n", "nl": "Returns the character at position <tt>pos</tt> from the  matched text.  It is equivalent to yytext().charAt(pos), but faster", "id": "8856"}
{"code": "protected boolean shouldClose(PooledConnection con,int action){\n  if (con.getConnectionVersion() < getPoolVersion())   return true;\n  if (con.isDiscarded())   return true;\n  if (isClosed())   return true;\n  if (!con.validate(action))   return true;\n  if (!terminateTransaction(con))   return true;\n  if (con.isMaxAgeExpired())   return true;\n else   return false;\n}\n", "nl": "Determines if a connection should be closed upon return to the pool.", "id": "30569"}
{"code": "void createFinish(String instanceId){\n  if (!isDomThread()) {\n    throw new WXRuntimeException(\"CreateFinish operation must be done in dom thread\");\n  }\n  WXDomStatement statement=mDomRegistries.get(instanceId);\n  if (statement == null) {\n    return;\n  }\n  statement.createFinish();\n}\n", "nl": "Notify the creating of whole dom tree has finished. This message is sent by JS.", "id": "25233"}
{"code": "public void dropActionChanged(DropTargetDragEvent dtde){\n}\n", "nl": "Called if the user has modified the current drop gesture.", "id": "17324"}
{"code": "private static boolean isTainted(Collection<?> c){\n  try {\n    checkTypeSafe(c);\n  }\n catch (  IllegalArgumentException e) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Returns true if c contains any non-RoleUnresolved objects.", "id": "52596"}
{"code": "private void webServerRefresh(){\n  mAppManager.startService(WebServerService.class,WEB_SERVER_SERVICE_REFRESH);\n}\n", "nl": "Refresh the web server", "id": "31926"}
{"code": "protected void finishDraggingTo(int location){\n  splitPaneUI.finishDraggingTo(location);\n}\n", "nl": "Messages the BasicSplitPaneUI with finishDraggingTo that this instance is contained in.", "id": "7315"}
{"code": "BasicType parameterType(int n){\n  return parameter(n).type;\n}\n", "nl": "Report the N-th argument type.", "id": "48663"}
{"code": "public boolean change_layer_action(int p_new_layer){\n  if (interactive_state == null)   return false;\n  if (board_is_read_only)   return false;\n  return interactive_state.change_layer_action(p_new_layer);\n}\n", "nl": "Actions to be taken in the current interactive state when the current board layer is changed.", "id": "14230"}
{"code": "public static byte[] toByteArray(Reader input) throws IOException {\n  return toByteArray(input,Charset.defaultCharset());\n}\n", "nl": "Get the contents of a <code>Reader</code> as a <code>byte[]</code> using the default character encoding of the platform. <p> This method buffers the input internally, so there is no need to use a <code>BufferedReader</code>.", "id": "35064"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlsig.X509IssuerSerialType createX509IssuerSerialType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.X509IssuerSerialTypeImpl();\n}\n", "nl": "Create an instance of X509IssuerSerialType", "id": "43871"}
{"code": "public com.sun.identity.saml2.jaxb.xmlenc.AgreementMethodType.OriginatorKeyInfo createAgreementMethodTypeOriginatorKeyInfo() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlenc.impl.AgreementMethodTypeImpl.OriginatorKeyInfoImpl();\n}\n", "nl": "Create an instance of AgreementMethodTypeOriginatorKeyInfo", "id": "30952"}
{"code": "public void init(int size,int certainty,SecureRandom random){\n  this.use186_3=false;\n  this.L=size;\n  this.N=getDefaultN(size);\n  this.certainty=certainty;\n  this.random=random;\n}\n", "nl": "initialise the key generator.", "id": "42272"}
{"code": "public void enableVertexAttribute(String name){\n  int location=fetchAttributeLocation(name);\n  if (location == -1)   return;\n  GLES20.glEnableVertexAttribArray(location);\n}\n", "nl": "Enables the vertex attribute with the given name", "id": "40618"}
{"code": "public boolean hasMoreElements(){\n  return hasMoreTokens();\n}\n", "nl": "Returns the same value as the <code>hasMoreTokens</code> method. It exists so that this class can implement the <code>Enumeration</code> interface.", "id": "48881"}
{"code": "public static PdfAction createURI(String uri,boolean isMap){\n  return new PdfAction().put(PdfName.S,PdfName.URI).put(PdfName.URI,new PdfString(uri)).put(PdfName.IsMap,new PdfBoolean(isMap));\n}\n", "nl": "Creates a URI action (section 12.6.4.7 of ISO 32000-1).", "id": "50450"}
{"code": "public void removeAttribute(String attrName) throws SMSException, SSOException {\n  validatePluginConfig();\n  SMSEntry e=pc.getSMSEntry();\n  SMSUtils.removeAttribute(e,attrName);\n  saveSMSEntry(e);\n}\n", "nl": "Removes a configuration parameter from the service plugin.", "id": "39116"}
{"code": "public void println(){\n  javaLine++;\n  writer.println(\"\");\n}\n", "nl": "Prints a '\\n'", "id": "48476"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_namednodemapsetnameditemreturnvalue.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "20796"}
{"code": "@SuppressWarnings(\"deprecation\") @Deprecated public final void suspend(){\n  if (suspendHelper()) {\n    Thread.currentThread().suspend();\n  }\n}\n", "nl": "Suspends every thread in this group and recursively in all its subgroups.", "id": "8694"}
{"code": "public void notationDecl(String name,String publicId,String systemId) throws SAXException {\n}\n", "nl": "Receive notification of a notation declaration. <p>By default, do nothing.  Application writers may override this method in a subclass if they wish to keep track of the notations declared in a document.</p>", "id": "46153"}
{"code": "public AMSearchResults searchDynamicGroups(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {\n  return searchDynamicGroups(wildcard,null,searchControl);\n}\n", "nl": "Searches for dynamic groups in this organization unit using wildcards. Wildcards can be specified such as a*, *, *a.", "id": "24371"}
{"code": "public static OAuth2BearerWWWAuthenticateHeader valueOf(final Message message){\n  return valueOf(parseSingleValuedHeader(message,NAME));\n}\n", "nl": "Constructs a new header, initialized from the specified message.", "id": "20782"}
{"code": "public void serializeDOM3(Node node) throws IOException {\n  try {\n    DOM3TreeWalker walker=new DOM3TreeWalker(fSerializationHandler,fErrorHandler,fSerializerFilter,fNewLine);\n    walker.traverse(node);\n  }\n catch (  org.xml.sax.SAXException se) {\n    throw new WrappedRuntimeException(se);\n  }\n}\n", "nl": "Serializes the Level 3 DOM node by creating an instance of DOM3TreeWalker which traverses the DOM tree and invokes handler events to serialize the DOM NOde. Throws an exception only if an I/O exception occured while serializing. This interface is a public API.", "id": "17021"}
{"code": "protected String mapTypeName(Field field){\n  return mapTypeName(keyTypeName(field),valueTypeName(field));\n}\n", "nl": "Returns a name for a map field's type. <p>May be overridden by individual language contexts.", "id": "1896"}
{"code": "@Override public boolean shouldShowRequestPermissionRationale(@NonNull final String permission){\n  return delegate.shouldShowRequestPermissionRationale(permission);\n}\n", "nl": "Gets whether you should show UI with rationale for requesting a permission. You should do this only if you do not have the permission and the context in which the permission is requested does not clearly communicate to the user what would be the benefit from granting this permission. <p> For example, if you write a camera app, requesting the camera permission would be expected by the user and no rationale for why it is requested is needed. If however, the app needs location for tagging photos then a non-tech savvy user may wonder how location is related to taking photos. In this case you may choose to show UI with rationale of requesting this permission. </p>", "id": "9619"}
{"code": "public static String upperInitial(String self){\n  return replaceHeadTail(self,null,null);\n}\n", "nl": "Upper-case all initials. e.g. \"The Day a new Demon was born\" -> \"The Day A New Demon Was Born\"", "id": "3615"}
{"code": "public <O extends UCrop.Options>BuilderImage<T> crop(O options){\n  this.config.setCrop(options);\n  return this;\n}\n", "nl": "Call it when crop option is required as such as configuring the options of the cropping action.", "id": "52792"}
{"code": "public static boolean sendAckSync(int options){\n  return ((Channel.SEND_OPTIONS_USE_ACK & options) == Channel.SEND_OPTIONS_USE_ACK) && ((Channel.SEND_OPTIONS_SYNCHRONIZED_ACK & options) == Channel.SEND_OPTIONS_SYNCHRONIZED_ACK);\n}\n", "nl": "Utility method, returns true if the options flag indicates that an ack is to be sent after the message has been received and processed", "id": "37911"}
{"code": "public boolean hasOwnOrModelProperty(int property){\n  return properties.containsKey(property) || (null != getModelElement() && getModelElement().hasProperty(property));\n}\n", "nl": "Checks if this renderer or its model element have the specified property, i.e. if it was set to this very element or its very model element earlier.", "id": "45485"}
{"code": "public boolean isMutable(){\n  return mutable;\n}\n", "nl": "Returns the mutability of the object.", "id": "40788"}
{"code": "public static boolean isLollipop(){\n  return getSdkVersion() >= Build.VERSION_CODES.LOLLIPOP;\n}\n", "nl": "Determine if the device is running API level 21 or higher.", "id": "15782"}
{"code": "private boolean noEvents(){\n  for (int i=0; i < NUM_PRIORITIES; i++) {\n    if (queues[i].head != null) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Returns whether an event is pending on any of the separate Queues.", "id": "57718"}
{"code": "public boolean isBinary(){\n  return true;\n}\n", "nl": "Determines whether the represented field contains (is made up of) binary data, instead of text data.<br> Software can identify fields to be displayed because they are human readable if this method returns <code>false</code>.", "id": "49051"}
{"code": "private static boolean isUrlPrefix(URL firstURL,URL secondURL){\n  return firstURL != null && firstURL.getProtocol().equalsIgnoreCase(secondURL.getProtocol()) && firstURL.getHost().equalsIgnoreCase(secondURL.getHost()) && firstURL.getPort() == secondURL.getPort() && secondURL.getPath().startsWith(firstURL.getPath());\n}\n", "nl": "Checks if the first URL is a prefix of the second URL. Protocol and Host are compared case-insensitively but the path is compared case-sensitively.", "id": "31032"}
{"code": "private SAXUnmarshallerHandler createUnmarshallerHandler(Locator locator){\n  SAXUnmarshallerHandler unmarshaller=new SAXUnmarshallerHandlerImpl(this,grammarInfo);\n  try {\n    if (isValidating()) {\n      unmarshaller=ValidatingUnmarshaller.create(context.getGrammar(),unmarshaller,locator);\n    }\n  }\n catch (  JAXBException e) {\n    e.printStackTrace();\n  }\n  return unmarshaller;\n}\n", "nl": "Creates and configures a new unmarshalling pipe line. Depending on the setting, we put a validator as a filter.", "id": "13578"}
{"code": "public static GitHubLicenseEntry fromGitHub(String gitRepo){\n  return new GitHubLicenseEntry(DEF_LICENSE_NAME,gitRepo,DEF_BRANCH,null,FILE_TXT);\n}\n", "nl": "create LicenseEntry from GitHub repository url. Regard license as Apache v2, and License text file name as \"LICENSE.txt\"", "id": "57560"}
{"code": "@Override public void execute() throws BuildException {\n  if ((username == null) || (password == null) || (url == null)) {\n    throw new BuildException(\"Must specify all of 'username', 'password', and 'url'\");\n  }\n}\n", "nl": "Execute the specified command.  This logic only performs the common attribute validation required by all subclasses; it does not perform any functional logic directly.", "id": "404"}
{"code": "public boolean remove_via(BrdViaInfo p_via){\n  return vinfo_list.remove(p_via);\n}\n", "nl": "Removes p_via from the rule. Returns false, if p_via was not contained in the rule.", "id": "29457"}
{"code": "public static void logAddResponse(AddOperation addOperation){\n  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {\n    publisher.logAddResponse(addOperation);\n  }\n}\n", "nl": "Writes a message to the access logger with information about the add response associated with the provided add operation.", "id": "49913"}
{"code": "@Override public void send(HandshakeIODataStream out){\n  if (exchange_keys.length != 0) {\n    if (!isRSA || isTLS) {\n      out.writeUint16(exchange_keys.length);\n    }\n    out.write(exchange_keys);\n  }\n}\n", "nl": "Sends message", "id": "21764"}
{"code": "public static Map<String,File> filesInDirectory(File dir,String regex,boolean recursively){\n  return filesInDirectory(dir,Pattern.compile(regex),recursively);\n}\n", "nl": "get files in the directory. the result would be a fileName =&gt; File map.", "id": "40013"}
{"code": "@Override public String toString(){\n  StringBuilder risul=new StringBuilder(1000);\n  risul.append(\"RoutingBoard \\n\");\n  risul.append(\"object: search_tree_manager \\n\");\n  return risul.toString();\n}\n", "nl": "Used to have some meaningful info on this object Mostly used for beanshell", "id": "38212"}
{"code": "public void runTest() throws Throwable {\n  Document doc;\n  NamedNodeMap attrList;\n  doc=(Document)load(\"hc_staff\",false);\n  attrList=doc.getAttributes();\n  assertNull(\"doc_attributes_is_null\",attrList);\n}\n", "nl": "Runs the test case.", "id": "24769"}
{"code": "protected ReadRequest newValidateRequest(JsonValue relationshipField){\n  return Requests.newReadRequest(relationshipField.get(REFERENCE_ID).asString());\n}\n", "nl": "Returns the readrequest that will retrieve the relationship field using the _ref id.", "id": "33504"}
{"code": "public boolean useStartTLS(){\n  return state.useStartTLS;\n}\n", "nl": "Indicates whether a connection should use StartTLS based on this interaction.", "id": "26016"}
{"code": "public String paramString(){\n  String typeStr;\nswitch (id) {\ncase ACTION_PERFORMED:\n    typeStr=\"ACTION_PERFORMED\";\n  break;\ndefault :\ntypeStr=\"unknown type\";\n}\nreturn typeStr + \",cmd=\" + actionCommand+ \",when=\"+ when+ \",modifiers=\"+ KeyEvent.getKeyModifiersText(modifiers);\n}\n", "nl": "Returns a parameter string identifying this action event. This method is useful for event-logging and for debugging.", "id": "23399"}
{"code": "public boolean isAlive(){\n  return !socket.isClosed() && !socket.isInputShutdown() && !socket.isOutputShutdown();\n}\n", "nl": "Returns true if this connection is alive.", "id": "20305"}
{"code": "private static void debugPrintln(String msg){\n  if (debug) {\n    System.err.println(\"JAXP: \" + msg);\n  }\n}\n", "nl": "<p>Conditional debug printing.</p>", "id": "40262"}
{"code": "public synchronized void undo() throws CannotUndoException {\n  if (inProgress) {\n    UndoableEdit edit=editToBeUndone();\n    if (edit == null) {\n      throw new CannotUndoException();\n    }\n    undoTo(edit);\n  }\n else {\n    super.undo();\n  }\n}\n", "nl": "Undoes the appropriate edits.  If <code>end</code> has been invoked this calls through to the superclass, otherwise this invokes <code>undo</code> on all edits between the index of the next edit and the last significant edit, updating the index of the next edit appropriately.", "id": "57329"}
{"code": "public boolean hasOrganizationAttributes(){\n  Set o=AMAdminUtils.getDisplayableAttributeNames(serviceName,SchemaType.ORGANIZATION);\n  Set d=AMAdminUtils.getDisplayableAttributeNames(serviceName,SchemaType.DYNAMIC);\n  return (!o.isEmpty() || !d.isEmpty());\n}\n", "nl": "Returns true if a service has displayable organizational attributes.", "id": "36507"}
{"code": "public static PdfVersion fromString(String value){\n  for (  PdfVersion version : values) {\n    if (version.toString().equals(value)) {\n      return version;\n    }\n  }\n  throw new IllegalArgumentException(\"The provided pdf version was not found.\");\n}\n", "nl": "Creates a PdfVersion class from a String object if the specified version can be found.", "id": "54434"}
{"code": "public java.lang.String toXMLString() throws SAML2Exception {\n  return toXMLString(true,false);\n}\n", "nl": "Returns a String representation of this Object.", "id": "43479"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodeappendchildchildexists.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "10926"}
{"code": "public synchronized Integer addNotification(String type,String message,Object userData,Date date) throws java.lang.IllegalArgumentException {\n  return (addNotification(type,message,userData,date,0,0));\n}\n", "nl": "Creates a new timer notification with the specified <CODE>type</CODE>, <CODE>message</CODE> and <CODE>userData</CODE> and inserts it into the list of notifications with a given date and a null period and number of occurrences. <P> The timer notification will be handled once at the specified date. <P> If the timer notification to be inserted has a date that is before the current date, the method behaves as if the specified date were the current date and the notification is delivered immediately.", "id": "33247"}
{"code": "public String toString(){\n  return (\"OblixPrincipal:  \" + name);\n}\n", "nl": "Returns a string representation of this <code>OblixPrincipal</code>.", "id": "27508"}
{"code": "public boolean accept(String fileName,String firstLine){\n  return accept(null,fileName,firstLine);\n}\n", "nl": "Returns true if the edit mode is suitable for editing the specified file. The buffer name and first line is checked against the file name and first line globs, respectively.", "id": "50663"}
{"code": "public Evidence createEvidence(){\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.EVIDENCE);\n  if (obj == null) {\n    return null;\n  }\n else {\n    return (Evidence)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>Evidence</code>. Caller may need to call setters of the class to populate the object.", "id": "23545"}
{"code": "protected void copy(byte[] src,byte[] dst,int dstOffset){\n  System.arraycopy(src,0,dst,dstOffset,src.length);\n}\n", "nl": "This method will copy all bytes of <code>src</code> to <code>dst</code> at the specified location.", "id": "7625"}
{"code": "public final HashCode append(long value){\n  hashCode=combine(hashCode,value);\n  return this;\n}\n", "nl": "Appends value's hashCode to the current hashCode.", "id": "32746"}
{"code": "public void removeSources(){\n  sources=new Vector();\n}\n", "nl": "Clears the list of source images.", "id": "22998"}
{"code": "public static BooleanArgument startTLSArgument() throws ArgumentException {\n  return BooleanArgument.builder(OPTION_LONG_START_TLS).shortIdentifier(OPTION_SHORT_START_TLS).description(INFO_DESCRIPTION_START_TLS.get()).buildArgument();\n}\n", "nl": "Returns the \"startTLS\" boolean argument.", "id": "41784"}
{"code": "public static double fastAbs(double input){\n  return input < 0 ? -input : input;\n}\n", "nl": "A fast absolute value function. <p>", "id": "53221"}
{"code": "public void addCircleOfTrustMember(String realm,String cotName,String protocolType,String entityId) throws COTException {\n  addCircleOfTrustMember(realm,cotName,protocolType,entityId,true);\n}\n", "nl": "Adds entity identifier to a circle of trust under the realm.", "id": "47642"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(documentcreateattribute.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "3609"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.security.ProxySubjectElement createProxySubjectElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.ProxySubjectElementImpl();\n}\n", "nl": "Create an instance of ProxySubjectElement", "id": "5483"}
{"code": "private boolean isConfigBackend(String id){\n  return \"tasks\".equalsIgnoreCase(id) || \"schema\".equalsIgnoreCase(id) || \"config\".equalsIgnoreCase(id)|| \"monitor\".equalsIgnoreCase(id)|| \"backup\".equalsIgnoreCase(id)|| ADSContext.getDefaultBackendName().equalsIgnoreCase(id)|| \"ads-truststore\".equalsIgnoreCase(id);\n}\n", "nl": "An convenience method to know if the provided ID corresponds to a configuration backend or not.", "id": "50179"}
{"code": "boolean isOutlineMode(){\n  return outlineMode;\n}\n", "nl": "This flag determines if Outline tree of the document has been built via calling getOutlines method. If this flag is false all outline operations will be ignored", "id": "8952"}
{"code": "private void appendToList(List<String> list,String[] array){\n  if (array != null && array.length > 0) {\n    list.addAll(Arrays.asList(array));\n  }\n}\n", "nl": "Adds string in an array to a list.", "id": "52743"}
{"code": "private static boolean wantAssertionSigned(String realm,String pepEntityID) throws SAML2MetaException {\n  XACMLAuthzDecisionQueryDescriptorElement pepDescriptor=saml2MetaManager.getPolicyEnforcementPointDescriptor(realm,pepEntityID);\n  return pepDescriptor.isWantAssertionsSigned();\n}\n", "nl": "Returns true if the assertion is to be signed. The PEP Standard metdata configuration is retreived to get the value of the attribute WantAssertionsSigned.", "id": "31734"}
{"code": "public static char[] encode(byte[] in){\n  return encode(in,0,in.length);\n}\n", "nl": "Encodes a byte array into Base64 format. No blanks or line breaks are inserted in the output.", "id": "37174"}
{"code": "public void add(String method,Object... args){\n  Object[] argsCopy=new Object[args.length];\n  System.arraycopy(args,0,argsCopy,0,args.length);\n  methods.add(method);\n  argLists.add(argsCopy);\n}\n", "nl": "Adds a method call with a variable list of arguments.", "id": "20898"}
{"code": "@Override public void recycle(){\n  contentLength=-1;\n  remaining=0;\n  endChunk.recycle();\n}\n", "nl": "Make the filter ready to process the next request.", "id": "51229"}
{"code": "public ECPRequest createECPRequest(String value) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ECP_REQUEST,value);\n  if (obj == null) {\n    return new ECPRequestImpl(value);\n  }\n else {\n    return (ECPRequest)obj;\n  }\n}\n", "nl": "Returns the <code>ECPRequest</code> Object.", "id": "12128"}
{"code": "public static void removeMapEntries(Map map,Set set){\n  if ((set != null) && !set.isEmpty()) {\n    for (Iterator iter=set.iterator(); iter.hasNext(); ) {\n      map.remove(iter.next());\n    }\n  }\n}\n", "nl": "Removes the mapping of which keys matches with items in a given set.", "id": "1704"}
{"code": "public static String wrapText(final LocalizableMessage message,final int width,final int indent){\n  return wrapText(message.toString(),width,indent);\n}\n", "nl": "Inserts line breaks into the provided buffer to wrap text at no more than the specified column width. Wrapping will only be done at space boundaries and if there are no spaces within the specified width, then wrapping will be performed at the first space after the specified column. In addition each line will be indented by the specified amount.", "id": "45664"}
{"code": "public void decrementActiveSessions(){\n  monitoringOperations.decrementActiveSessions();\n}\n", "nl": "Decrements number of active sessions", "id": "22911"}
{"code": "private void verifyInitialize(LoginModule... modules){\n  for (  LoginModule module : modules) {\n    verify(module).initialize(same(subject),same(handler),anyMap(),eq(optionCache.get(module)));\n  }\n}\n", "nl": "Convenient method verifying invocation of the initialize method against the passed modules.", "id": "52460"}
{"code": "public boolean isRecordingEnabled(){\n  return enableRecording;\n}\n", "nl": "Retrieves whether recording is enabled.", "id": "40899"}
{"code": "public void visitCode(){\n  if (mv != null) {\n    mv.visitCode();\n  }\n}\n", "nl": "Starts the visit of the method's code, if any (i.e. non abstract method).", "id": "38161"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(attrspecifiedvaluechanged.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "55232"}
{"code": "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {\n  DTMIterator nl=m_arg0.asIterator(xctxt,xctxt.getCurrentNode());\n  int i=nl.getLength();\n  nl.detach();\n  return new XNumber((double)i);\n}\n", "nl": "Execute the function.  The function must return a valid object.", "id": "28710"}
{"code": "@Override public Foo fetchByPrimaryKey(long fooId){\n  return fetchByPrimaryKey((Serializable)fooId);\n}\n", "nl": "Returns the foo with the primary key or returns <code>null</code> if it could not be found.", "id": "5064"}
{"code": "public static boolean isStatic(int mod){\n  return (mod & ACC_STATIC) != 0;\n}\n", "nl": "Tells whether a given access modifier is static", "id": "18287"}
{"code": "private static Object maskNull(Object key){\n  return (key == null ? NULL_KEY : key);\n}\n", "nl": "Use NULL_KEY for key if it is null.", "id": "21236"}
{"code": "public static ComponentUI createUI(JComponent b){\n  return new SynthInternalFrameUI((JInternalFrame)b);\n}\n", "nl": "Creates a new UI object for the given component.", "id": "4110"}
{"code": "public void entering(String sourceClass,String sourceMethod,Object param1){\n  logp(Level.FINER,sourceClass,sourceMethod,\"ENTRY {0}\",param1);\n}\n", "nl": "Log a method entry, with one parameter. <p> This is a convenience method that can be used to log entry to a method.  A LogRecord with message \"ENTRY {0}\", log level FINER, and the given sourceMethod, sourceClass, and parameter is logged. <p>", "id": "30479"}
{"code": "public boolean isBorderOpaque(){\n  return color != null;\n}\n", "nl": "Returns whether or not the border is opaque.", "id": "47992"}
{"code": "private boolean handleTopologyCache(TopologyCache cache,UninstallUserData userData) throws UserDataException, ClientException {\n  boolean result=handleTopologyCache0(cache,userData);\n  logger.info(LocalizableMessage.raw(\"Return value: \" + result));\n  return result;\n}\n", "nl": "Method that interacts with the user depending on what errors where encountered in the TopologyCache object.  This method assumes that the TopologyCache has been reloaded.", "id": "21049"}
{"code": "@NonNull public static Interpolator linear(){\n  return new LinearInterpolator();\n}\n", "nl": "<strong>ANDROID INTERPOLATOR</strong><br/><br/> A linear interpolator. This returns the value passed in", "id": "6064"}
{"code": "public static Foo fetchByUUID_G(java.lang.String uuid,long groupId){\n  return getPersistence().fetchByUUID_G(uuid,groupId);\n}\n", "nl": "Returns the foo where uuid = &#63; and groupId = &#63; or returns <code>null</code> if it could not be found. Uses the finder cache.", "id": "41615"}
{"code": "public static Message sendRequest(Message req,String connectTo) throws SOAPBindingException, SOAPFaultException {\n  return sendRequest(req,connectTo,null,null);\n}\n", "nl": "Sends a request to a SOAP endpoint and returns the response. The server only contains one servlet for different web services. So the SOAP endpoint URL has format 'servlet_URL/key'", "id": "40779"}
{"code": "public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {\n  removePageSessionAttribute(PAGE_MODIFIED);\n  super.handleButton1Request(event);\n}\n", "nl": "Handles save request.", "id": "24364"}
{"code": "public static void message(CommandManager mgr,String msg){\n  dumpToOutput(mgr,msg,null);\n  mgr.getDebugger().message(msg);\n}\n", "nl": "Prints messages only when the debug state is either Debug.MESSAGE or Debug.ON. <p><b>NOTE:</b> Debugging is an IO intensive operation and may hurt application performance when abused. Particularly, note that Java evaluates arguments to <code>message()</code> even when debugging is turned off. So when the argument to this method involves the String concatenation operator '+' or any other method invocation, <code>messageEnabled</code> <b>MUST</b> be used. It is recommended that the debug state be checked by invoking <code>messageEnabled()</code> before invoking any <code>message()</code> methods to avoid unnecessary argument evaluation and maximize application performance.</p>", "id": "2560"}
{"code": "public void startDocument() throws org.xml.sax.SAXException {\n  m_stylesheetLevel++;\n  pushSpaceHandling(false);\n}\n", "nl": "Receive notification of the beginning of the document.", "id": "57937"}
{"code": "Subject fetchSubject(String subjectName){\n  QualifiedSubject answer=(QualifiedSubject)users.get(subjectName);\n  return (answer != null) ? answer.getSubject() : null;\n}\n", "nl": "Returns the <code>Subject</code> object associated with the given subject name.", "id": "38764"}
{"code": "public Builder withMessageDispatcherSize(long maxSize){\n  config.setMessageDispatcherSize(maxSize);\n  return this;\n}\n", "nl": "The size of the internal message dispatcher cache.", "id": "15250"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_elementinvalidcharacterexception.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "55309"}
{"code": "public void unsetPermission(String name){\n  permissions.remove(name.toLowerCase(java.util.Locale.ENGLISH));\n  permissible.recalculatePermissions();\n}\n", "nl": "Removes the specified permission from this attachment. <p> If the permission does not exist in this attachment, nothing will happen.", "id": "27680"}
{"code": "public void selectAllAccessibleSelection(){\n  JList.this.addSelectionInterval(0,getAccessibleChildrenCount() - 1);\n}\n", "nl": "Causes every selected item in the object to be selected if the object supports multiple selections.", "id": "14942"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorTransportProtocolType createAuthenticatorTransportProtocolType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatorTransportProtocolTypeImpl();\n}\n", "nl": "Create an instance of AuthenticatorTransportProtocolType", "id": "27351"}
{"code": "private void unregisterTask(Task task){\n  tasks.remove(task);\n}\n", "nl": "Unregisters a task.", "id": "24804"}
{"code": "public void _releaseReply(InputStream input){\n  throw new org.omg.CORBA.NO_IMPLEMENT(reason);\n}\n", "nl": "Throws an <code>org.omg.CORBA.NO_IMPLEMENT</code> exception with the message \"This is a locally constrained object.\" This method is the default implementation of the <code>org.omg.CORBA.Object</code> method. <P>May optionally be called by a stub to release a reply stream back to the ORB when the unmarshaling has completed. The stub passes the <code>InputStream</code> returned by <code>_invoke()</code> or <code>ApplicationException.getInputStream()</code>. A null value may also be passed to <code>_releaseReply</code>, in which case the method is a no-op.<P>", "id": "43214"}
{"code": "@Override public boolean onOptionsItemSelected(MenuItem item){\nswitch (item.getItemId()) {\ncase MENU_HELP:\n    help();\n  return true;\n}\nreturn super.onOptionsItemSelected(item);\n}\n", "nl": "Called when an item of options menu is clicked", "id": "3145"}
{"code": "public String toString(){\n  if (options == null) {\n    return module + \" \" + flag;\n  }\n else {\n    return module + \" \" + flag+ \" \"+ options;\n  }\n}\n", "nl": "Returns string representation of this object.", "id": "25068"}
{"code": "public void beginDisplay(DisplayEvent event) throws ModelControlException {\n  if (getPrimaryModel() == null) {\n    throw new ModelControlException(\"Primary model is null\");\n  }\n  if (questionKeys != null) {\n    getPrimaryModel().setSize(questionKeys.size());\n  }\n else {\n    getPrimaryModel().setSize(0);\n  }\n  super.beginDisplay(event);\n  resetTileIndex();\n}\n", "nl": "Set the required information to display a page.", "id": "34744"}
{"code": "private void ensureOpen() throws IOException {\n  if (str == null)   throw new IOException(\"Stream closed\");\n}\n", "nl": "Check to make sure that the stream has not been closed", "id": "53480"}
{"code": "public LoginConfiguration sessionUpgrade(String ssoTokenId){\n  if (ssoTokenId != null) {\n    this.ssoTokenId=ssoTokenId;\n  }\n  return this;\n}\n", "nl": "Sets the user's current session SSO Token Id to use in session upgrade.", "id": "844"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.XACMLPDPDescriptorType createXACMLPDPDescriptorType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.XACMLPDPDescriptorTypeImpl();\n}\n", "nl": "Create an instance of XACMLPDPDescriptorType", "id": "6437"}
{"code": "public void remove_item(BrdItem p_item){\n  if (p_item == null)   return;\n  p_item.art_item_clear();\n  search_tree_manager.remove(p_item);\n  undo_items.delete(p_item);\n  observers.notify_deleted(p_item);\n}\n", "nl": "Removes an item from the board", "id": "47307"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(namednodemapgetnameditemns03.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "25052"}
{"code": "synchronized String addListener(ServiceListener listener){\n  String id=SMSUtils.getUniqueID();\n  listenerObjects.put(id,listener);\n  return (id);\n}\n", "nl": "Registers for changes to organization's configuration. The object will be called when configuration for this organization is changed.", "id": "10699"}
{"code": "@Override public void treeExpanded(TreeExpansionEvent event){\n  if (!automaticallyExpandedNode) {\n    automaticExpand=false;\n  }\n  BasicNode basicNode=(BasicNode)event.getPath().getLastPathComponent();\n  if (basicNode.isRefreshNeededOnExpansion()) {\n    basicNode.setRefreshNeededOnExpansion(false);\n    startRefreshNode(basicNode,null,true);\n  }\n}\n", "nl": "For BrowserController private use.  When a node is expanded, refresh it if it needs it (to search the children for instance).", "id": "5397"}
{"code": "private static TypeDescription queryOptionsDescription(){\n  return new TypeDescription.Latent(\"org.apache.cassandra.cql3.QueryOptions\",Modifier.PUBLIC,null,null);\n}\n", "nl": "QueryOptions class type description helper.", "id": "54350"}
{"code": "public char current(){\n  if (pos >= begin && pos < end) {\n    return text.charAt(pos);\n  }\n else {\n    return DONE;\n  }\n}\n", "nl": "Implements CharacterIterator.current() for String.", "id": "21121"}
{"code": "@AfterClass public static void cleanupClass(){\n  try {\n    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());\n  }\n catch (  Exception ignore) {\n    System.err.println(\"cannot remove \" + scenario.getRepositoryLocation());\n  }\n}\n", "nl": "Cleanup the whole junit scenario ; deletes the created git repository.", "id": "48229"}
{"code": "public boolean equals(MenuShortcut s){\n  return (s != null && (s.getKey() == key) && (s.usesShiftModifier() == usesShift));\n}\n", "nl": "Returns whether this MenuShortcut is the same as another: equality is defined to mean that both MenuShortcuts use the same key and both either use or don't use the SHIFT key.", "id": "34091"}
{"code": "public void push(AwtreeNode p_element){\n  if (p_element == null)   return;\n  node_list.add(p_element);\n}\n", "nl": "Pushed p_element onto the stack.", "id": "55300"}
{"code": "public AlphaComposite derive(float alpha){\n  return (this.extraAlpha == alpha) ? this : getInstance(this.rule,alpha);\n}\n", "nl": "Returns a similar <code>AlphaComposite</code> object that uses the specified alpha value. If this object already has the specified alpha value, this object is returned.", "id": "39697"}
{"code": "public static EntryReader newEntryCollectionReader(final Collection<Entry> entries){\n  return new EntryIteratorReader(entries.iterator());\n}\n", "nl": "Returns an entry reader over the provided entry collection.", "id": "19340"}
{"code": "public RxGalleryFinal cropFreeStyleCropEnabled(boolean enabled){\n  configuration.setFreestyleCropEnabled(enabled);\n  return this;\n}\n", "nl": "set to true to let user resize crop bounds (disabled by default)", "id": "48615"}
{"code": "private boolean isReplicaOfflineMsgOutdated(final ReplicaOfflineMsg offlineMsg,final UpdateMsg updateMsg){\n  return offlineMsg != null && updateMsg != null && offlineMsg.getCSN().isOlderThanOrEqualTo(updateMsg.getCSN());\n}\n", "nl": "It could also mean that the replica offline message has already been consumed.", "id": "2802"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(namednodemapnumberofnodes.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "3656"}
{"code": "public String toXMLString() throws FSMsgException {\n  return toXMLString(true,true);\n}\n", "nl": "Returns the string representation of this object. This method translates the response to an XML document string.", "id": "11826"}
{"code": "@Override public void clear(){\n  Arrays.fill(elements,null);\n  size=0;\n}\n", "nl": "Removes all the elements of the priority queue.", "id": "9938"}
{"code": "public void handleButton3Request(RequestInvocationEvent event){\n  FSSAMLServiceViewBean vb=(FSSAMLServiceViewBean)getViewBean(FSSAMLServiceViewBean.class);\n  backTrail();\n  unlockPageTrailForSwapping();\n  passPgSessionMap(vb);\n  vb.setValues();\n  vb.forwardTo(getRequestContext());\n}\n", "nl": "Handles back request.", "id": "46033"}
{"code": "public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){\n}\n", "nl": "Notification for organization config changes to IdRepoService", "id": "16710"}
{"code": "public void logCompareResponse(CompareOperation compareOperation){\n}\n", "nl": "Writes a message to the access logger with information about the compare response associated with the provided compare operation. <p> The default implementation is to not log anything.", "id": "45700"}
{"code": "boolean isSubregion(){\n  return getRegion().isSubregion();\n}\n", "nl": "A convenience method for <code>getRegion().isSubregion()</code>.", "id": "2660"}
{"code": "@DataProvider(name=\"simpleConnect\") Object[][] createCredentials(){\n  return new Object[][]{{\"cn=directory manager\",\"password\",false},{\"cn=Privileged User,o=test\",\"password\",true},{\"cn=Privileged User,o=test\",\"wrongPassword\",false},{\"cn=wrong user\",\"password\",false},{\"invalid DN\",\"password\",false},{\"cn=Privileged User,o=test\",null,false},{null,\"password\",false},{null,null,false}};\n}\n", "nl": "Build data for the simpleConnect test.", "id": "10845"}
{"code": "public static boolean needPolicyEvalLookup(){\n  return policyEvalLookup;\n}\n", "nl": "Returns a boolean value which indicates whether policy evaluation is needed for discovery lookup.", "id": "39159"}
{"code": "public Object clone(){\n  return new LdapName(unparsed,rdns,0,rdns.size());\n}\n", "nl": "Generates a new copy of this name. Subsequent changes to the components of this name will not affect the new copy, and vice versa.", "id": "18463"}
{"code": "public Builder withRegion(String region){\n  config.setRegion(region);\n  return this;\n}\n", "nl": "Sets the region of the SNS configuration.", "id": "26959"}
{"code": "static void checkDesc(final String desc,final boolean canBeVoid){\n  int end=checkDesc(desc,0,canBeVoid);\n  if (end != desc.length()) {\n    throw new IllegalArgumentException(\"Invalid descriptor: \" + desc);\n  }\n}\n", "nl": "Checks that the given string is a valid type descriptor.", "id": "5235"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlsig.MgmtDataElement createMgmtDataElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.MgmtDataElementImpl();\n}\n", "nl": "Create an instance of MgmtDataElement", "id": "43985"}
{"code": "public PdfXObject addImage(ImageData image,float x,float y,float height,boolean asInline,boolean dummy){\n  return addImage(image,height / image.getHeight() * image.getWidth(),0,0,height,x,y,asInline);\n}\n", "nl": "Creates Image XObject from image and adds it to the specified position with specified width preserving aspect ratio.", "id": "6776"}
{"code": "public boolean seek(ByteBuffer byteBuffer){\n  byte[] buffer=new byte[FIELD_TAGID_LENGTH];\n  byteBuffer.get(buffer,0,FIELD_TAGID_LENGTH);\n  return (Arrays.equals(buffer,TAG_ID));\n}\n", "nl": "Does a tag of this version exist within the byteBuffer", "id": "991"}
{"code": "boolean validateDefaults(Map<String,Set<String>> attributeSet) throws SMSException {\n  return validateAttributes(null,attributeSet,false,null,true);\n}\n", "nl": "Validate default values - permits an empty Set of values.", "id": "16279"}
{"code": "public boolean hasToTag(){\n  return hasParameter(ParameterNames.TO_TAG);\n}\n", "nl": "Boolean function", "id": "3853"}
{"code": "public void error(SAXParseException e) throws SAXException {\n  if (errorHandler != null) {\n    errorHandler.error(e);\n  }\n}\n", "nl": "Filter an error event.", "id": "23041"}
{"code": "public AccountService updateAccount(Account account,Handler<AsyncResult<Account>> resultHandler){\n  delegate.updateAccount(account,resultHandler);\n  return this;\n}\n", "nl": "Update user account info.", "id": "50399"}
{"code": "public boolean isLeaf(Object node){\n  if (asksAllowsChildren)   return !((TreeNode)node).getAllowsChildren();\n  return ((TreeNode)node).isLeaf();\n}\n", "nl": "Returns whether the specified node is a leaf node. The way the test is performed depends on the <code>askAllowsChildren</code> setting.", "id": "35012"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.EncryptKeyElement createEncryptKeyElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.EncryptKeyElementImpl();\n}\n", "nl": "Create an instance of EncryptKeyElement", "id": "27275"}
{"code": "private Object doCall(Invoker invoker,Object receiver,String method,Object... args) throws Throwable {\n  return filterReturnValue(invoker.call(receiver,method,filterArgs(args)));\n}\n", "nl": "Performs an actual call to the given method on the given receiver object using the given invoker. The arguments and return value are filtered according to the sandbox, but the receiver is not.", "id": "50720"}
{"code": "public boolean isExplicitPolicyRequired(){\n  return explicitPolicyRequired;\n}\n", "nl": "Returns whether an acceptable policy needs to be explicit identified in every certificate.", "id": "32180"}
{"code": "public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {\n  return super.newInstance(javaContentInterface);\n}\n", "nl": "Create an instance of the specified Java content interface.", "id": "6188"}
{"code": "private boolean isValidItemIndex(int index){\n  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());\n}\n", "nl": "Checks whether intem index is valid", "id": "23266"}
{"code": "private Component createInstructionsPane(){\n  LocalizableMessage instructions=INFO_SECURITY_OPTIONS_INSTRUCTIONS.get();\n  JTextComponent instructionsPane=UIFactory.makeHtmlPane(instructions,UIFactory.INSTRUCTIONS_FONT);\n  instructionsPane.setOpaque(false);\n  instructionsPane.setEditable(false);\n  return instructionsPane;\n}\n", "nl": "Creates and returns the instructions sub panel.", "id": "17989"}
{"code": "public void push(short val){\n  this.push(new BaseTypeWrapper(val));\n}\n", "nl": "Pushes a short onto the top of this stack.", "id": "11766"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlsig.TransformType.XPath createTransformTypeXPath() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.TransformTypeImpl.XPathImpl();\n}\n", "nl": "Create an instance of TransformTypeXPath", "id": "2906"}
{"code": "public static DeleteSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,InstantiableRelationDefinition<?,?> r) throws ArgumentException {\n  return new DeleteSubCommandHandler(parser,p,r,p.child(r,\"DUMMY\"));\n}\n", "nl": "Creates a new delete-xxx sub-command for an instantiable relation.", "id": "20192"}
{"code": "public static Throwable unwrapInvocationTargetException(Throwable t){\n  if (t instanceof InvocationTargetException && t.getCause() != null) {\n    return t.getCause();\n  }\n  return t;\n}\n", "nl": "Checks whether the supplied Throwable is an instance of <code>InvocationTargetException</code> and returns the throwable that is wrapped by it, if there is any.", "id": "4957"}
{"code": "public void refresh(){\n  freert.graphics.ColorIntensityTable color_intensity_table=this.get_board_handling().gdi_context.color_intensity_table;\n  for (int i=0; i < ColorIntensityName.values().length; ++i) {\n    this.set_slider_value(i,color_intensity_table.get_value(i));\n  }\n}\n", "nl": "Refreshs the displayed values in this window.", "id": "41880"}
{"code": "public boolean includeVirtualAttributes(){\n  return includeVirtualAttributes;\n}\n", "nl": "Indicates whether virtual attributes should be included in the export.", "id": "28263"}
{"code": "public boolean canCreateNewResource(String realmName,String svcTypeName){\n  boolean can=false;\n  try {\n    PolicyManager mgr=getPolicyManager(realmName);\n    can=mgr.canCreateNewResource(svcTypeName);\n  }\n catch (  AMConsoleException e) {\n    debug.warning(\"PolicyModelImpl.canCreateNewResource\",e);\n  }\n  return can;\n}\n", "nl": "Returns true of new resource can be created under a realm of a given service type.", "id": "42702"}
{"code": "public void addTreeModelListener(TreeModelListener l){\n  listenerList.add(TreeModelListener.class,l);\n}\n", "nl": "Adds a listener for the TreeModelEvent posted after the tree changes.", "id": "54734"}
{"code": "public double distance(PlaPointFloat p_from_point){\n  double result=p_from_point.distance(nearest_point_approx(p_from_point));\n  return result;\n}\n", "nl": "Calculates the distance of p_from_point to the the nearest point on this polyline", "id": "21636"}
{"code": "static Promise<Void> all(final Promise<?>... promises){\n  return new AllPromise(promises);\n}\n", "nl": "All promises must complete.", "id": "34676"}
{"code": "public boolean isCompiledTemplate(){\n  return false;\n}\n", "nl": "Tell if this template is a compiled template.", "id": "30825"}
{"code": "public MessageBytes addValue(byte b[],int startN,int len){\n  MimeHeaderField mhf=createHeader();\n  mhf.getName().setBytes(b,startN,len);\n  return mhf.getValue();\n}\n", "nl": "Create a new named header using un-translated byte[]. The conversion to chars can be delayed until encoding is known.", "id": "16286"}
{"code": "@Override public long skip(long n) throws IOException {\n  throw exception;\n}\n", "nl": "Throws the configured exception.", "id": "32420"}
{"code": "private static void handleForwardException(Exception exception) throws SAML2Exception {\n  debug.error(\"Failed to forward to auto submitting JSP\",exception);\n  throw new SAML2Exception(bundle.getString(\"postToTargetFailed\"));\n}\n", "nl": "Handles any exception when attempting to forward.", "id": "12977"}
{"code": "boolean useSecondServerAsSchemaSource(){\n  return useSecondServerAsSchemaSourceArg.isPresent();\n}\n", "nl": "Returns whether the user asked to use the second server to initialize the schema of the first server.", "id": "36639"}
{"code": "public void clear(){\n  m.clear();\n}\n", "nl": "Removes all of the elements from this set.", "id": "35648"}
{"code": "final boolean isOwnedBy(AbstractQueuedLongSynchronizer sync){\n  return sync == AbstractQueuedLongSynchronizer.this;\n}\n", "nl": "Returns true if this condition was created by the given synchronization object.", "id": "35917"}
{"code": "public boolean isNavigationAtBottom(){\n  return (mSmallestWidthDp >= 600 || mInPortrait);\n}\n", "nl": "Should a navigation bar appear at the bottom of the screen in the current device configuration? A navigation bar may appear on the right side of the screen in certain configurations.", "id": "11470"}
{"code": "@Override protected void thresholdReached() throws IOException {\n  if (prefix != null) {\n    outputFile=File.createTempFile(prefix,suffix,directory);\n  }\n  FileOutputStream fos=new FileOutputStream(outputFile);\n  memoryOutputStream.writeTo(fos);\n  currentOutputStream=fos;\n  memoryOutputStream=null;\n}\n", "nl": "Switches the underlying output stream from a memory based stream to one that is backed by disk. This is the point at which we realise that too much data is being written to keep in memory, so we elect to switch to disk-based storage.", "id": "4888"}
{"code": "public static void addToCurrentCast(Sprite... sprites){\n  MAIN_CAST.addAll(Arrays.asList(sprites));\n}\n", "nl": "Adds Sprite to a separate list. Only Sprites that do not implement any of the Interfaces shall be added.", "id": "46864"}
{"code": "public synchronized void disableType(String prefix){\n  enabledTypes.remove(prefix);\n}\n", "nl": "Removes the given prefix from the prefix list. <BR>If the specified prefix is not in the list of enabled notification types, this method has no effect.", "id": "20180"}
{"code": "public boolean containsValue(boolean val){\n  for (  NSObject o : dict.values()) {\n    if (o.getClass().equals(NSNumber.class)) {\n      NSNumber num=(NSNumber)o;\n      if (num.isBoolean() && num.boolValue() == val)       return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks whether a given value is contained in this dictionary.", "id": "57232"}
{"code": "static boolean shouldReconfigure(PropertyChangeEvent e){\n  if (e.getPropertyName() == null) {\nsynchronized (AbstractAction.class) {\n      if (RECONFIGURE_ON_NULL == null) {\n        RECONFIGURE_ON_NULL=Boolean.valueOf(AccessController.doPrivileged(new GetPropertyAction(\"swing.actions.reconfigureOnNull\",\"false\")));\n      }\n      return RECONFIGURE_ON_NULL;\n    }\n  }\n  return false;\n}\n", "nl": "Whether or not to reconfigure all action properties from the specified event.", "id": "47601"}
{"code": "public void skippedEntity(String name) throws SAXException {\n}\n", "nl": "Adapt a SAX2 skipped entity event.", "id": "48869"}
{"code": "public boolean shouldImportRequestObjectParamType(Field field){\n  return true;\n}\n", "nl": "Returns true if the request object param type for the given field should be imported.", "id": "52494"}
{"code": "private void init(SSLParametersImpl sslParameters) throws IOException {\n  init(sslParameters,NativeCrypto.getDefaultProtocols(),NativeCrypto.getDefaultCipherSuites());\n}\n", "nl": "Initialize the SSL socket and set the certificates for the future handshaking.", "id": "17544"}
{"code": "public boolean isColored(){\n  return getPdfObject().getAsNumber(PdfName.PaintType).intValue() == PaintType.COLORED;\n}\n", "nl": "Checks if this pattern have colored paint type.", "id": "36390"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(importNode02.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "35387"}
{"code": "public void readFully(long position,byte[] buffer) throws IOException {\n  readFully(position,buffer,0,buffer.length);\n}\n", "nl": "Reads the specified number of bytes from a given position within a stream. This does not change the current offset of the stream and is thread-safe.", "id": "2520"}
{"code": "public static int mainImportLDIF(String[] args,boolean initializeServer,OutputStream outStream,OutputStream errStream){\n  ImportLDIF tool=new ImportLDIF();\n  return tool.process(args,initializeServer,outStream,errStream);\n}\n", "nl": "Processes the command-line arguments and invokes the import process.", "id": "53606"}
{"code": "public void addFocusListener(FocusListener l){\n}\n", "nl": "Adds the specified focus listener to receive focus events from this component.", "id": "22288"}
{"code": "public static XMPMeta parseFromBuffer(byte[] buffer,ParseOptions options) throws XMPException {\n  return XMPMetaParser.parse(buffer,options);\n}\n", "nl": "Creates an <code>XMPMeta</code>-object from a byte-buffer.", "id": "33929"}
{"code": "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {\n  return m_arg0.execute(xctxt).bool() ? XBoolean.S_FALSE : XBoolean.S_TRUE;\n}\n", "nl": "Execute the function.  The function must return a valid object.", "id": "29878"}
{"code": "public void notifyDataSetChanged(){\n  if (adapter != null)   adapter.notifyDataSetChanged();\n}\n", "nl": "Notifies a change in the data set.", "id": "53479"}
{"code": "public void checkNumberArgs(int argNum) throws WrongNumberArgsException {\n  if (argNum < 2)   reportWrongNumberArgs();\n}\n", "nl": "Check that the number of arguments passed to this function is correct.", "id": "37336"}
{"code": "public boolean containsEntryID(ReadableTransaction txn,EntryID entryID){\n  checkNotNull(txn,\"txn must not be null\");\n  checkNotNull(entryID,\"entryID must not be null\");\n  try (final Cursor<ByteString,ByteString> cursor=txn.openCursor(getName())){\n    return cursor.positionToKey(entryID.toByteString());\n  }\n }\n", "nl": "Check that a record entry exists in the entry tree.", "id": "37224"}
{"code": "private void repaintPath(TreePath path){\n  if (path != null) {\n    Rectangle bounds=getPathBounds(tree,path);\n    if (bounds != null) {\n      tree.repaint(bounds.x,bounds.y,bounds.width,bounds.height);\n    }\n  }\n}\n", "nl": "Invokes <code>repaint</code> on the JTree for the passed in TreePath, <code>path</code>.", "id": "16124"}
{"code": "public static Result newResult(final ResultCode resultCode){\n  Reject.ifNull(resultCode);\n  return new ResultImpl(resultCode);\n}\n", "nl": "Creates a new result using the provided result code.", "id": "27784"}
{"code": "public XMLString trim(){\n  return new XString(str().trim());\n}\n", "nl": "Removes white space from both ends of this string.", "id": "41617"}
{"code": "public void invalidate(){\n  super.invalidate();\n  if (getParent() != null) {\n    preferenceChanged(null,true,true);\n  }\n}\n", "nl": "The components invalid layout needs to be propagated through the view hierarchy so the views (which position the component) can have their layout recomputed.", "id": "56887"}
{"code": "public double noise(double x,double frequency,double amplitude,boolean normalized){\n  return noise(x,0,0,frequency,amplitude,normalized);\n}\n", "nl": "Generates noise for the 1D coordinates using the specified number of octaves and parameters", "id": "12098"}
{"code": "public synchronized void close() throws IOException {\n  if (journalWriter == null) {\n    return;\n  }\n  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {\n    if (entry.currentEditor != null) {\n      entry.currentEditor.abort();\n    }\n  }\n  trimToSize();\n  journalWriter.close();\n  journalWriter=null;\n}\n", "nl": "Closes this cache. Stored values will remain on the filesystem.", "id": "21254"}
{"code": "@Deprecated public final void stop(){\n  if (stopOrSuspend(false))   Thread.currentThread().stop();\n}\n", "nl": "Stops all threads in this thread group. <p> First, the <code>checkAccess</code> method of this thread group is called with no arguments; this may result in a security exception. <p> This method then calls the <code>stop</code> method on all the threads in this thread group and in all of its subgroups.", "id": "36410"}
{"code": "public Pnt bisector(Pnt point){\n  dimCheck(point);\n  Pnt diff=this.subtract(point);\n  Pnt sum=this.add(point);\n  double dot=diff.dot(sum);\n  return diff.extend(-dot / 2);\n}\n", "nl": "Perpendicular bisector of two Pnts. Works in any dimension.  The coefficients are returned as a Pnt of one higher dimension (e.g., (A,B,C,D) for an equation of the form Ax + By + Cz + D = 0).", "id": "21845"}
{"code": "public void clearBuffer(){\n  buff=new StringBuffer();\n}\n", "nl": "Clears the buffer.", "id": "52563"}
{"code": "public Name add(String comp) throws InvalidNameException {\n  return add(size(),comp);\n}\n", "nl": "Adds a single component to the end of this LDAP name.", "id": "30914"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.ModifyResponseElement createModifyResponseElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.ModifyResponseElementImpl();\n}\n", "nl": "Create an instance of ModifyResponseElement", "id": "54456"}
{"code": "@Override protected StringBuilder encodeBody(StringBuilder buffer){\n  return buffer.append(method);\n}\n", "nl": "Return body encoded in canonical form.", "id": "28605"}
{"code": "private boolean expectVlvResponse(){\n  Boolean expected=Boolean.FALSE;\n  try {\n    expected=(Boolean)get(EXPECT_VLV_RESPONSE);\n  }\n catch (  Exception e) {\n  }\n  return expected == null ? false : expected.booleanValue();\n}\n", "nl": "Check if this search result expects a VLV response control", "id": "8028"}
{"code": "public void paintMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the background of a menu item.", "id": "20158"}
{"code": "public static ArrayList<String> matches(String text){\n  return matches(text,ALL);\n}\n", "nl": "It finds urls inside the text and return the matched ones", "id": "40201"}
{"code": "public boolean isMutable(){\n  return mutable;\n}\n", "nl": "Checks if the object is mutable", "id": "10534"}
{"code": "private void validateSourceAndDestinationServersOptions(LocalizableMessageBuilder buf){\n  if (hostNameSourceArg.getValue().equalsIgnoreCase(hostNameDestinationArg.getValue()) && !isInteractive() && portSourceArg.getValue().equals(portDestinationArg.getValue())) {\n    LocalizableMessage message=ERR_SOURCE_DESTINATION_INITIALIZE_SAME_SERVER_PORT.get(hostNameSourceArg.getValue(),portSourceArg.getValue());\n    addMessage(buf,message);\n  }\n}\n", "nl": "Checks the initialize replication subcommand options and updates the provided LocalizableMessageBuilder with the errors that were encountered with the subcommand options. This method assumes that the method parseArguments for the parser has already been called.", "id": "16872"}
{"code": "public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {\n  return super.newInstance(javaContentInterface);\n}\n", "nl": "Create an instance of the specified Java content interface.", "id": "35593"}
{"code": "public static String defaultAgentContainerName(){\n  initialize();\n  return (defaultAC);\n}\n", "nl": "Returns the default agent container name.", "id": "31531"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsse.PasswordString createPasswordString() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsse.impl.PasswordStringImpl();\n}\n", "nl": "Create an instance of PasswordString", "id": "6542"}
{"code": "public static boolean isValidFilter(String filter){\n  try {\n    getFilterFromString(filter);\n  }\n catch (  IllegalArgumentException e) {\n    return false;\n  }\n  return true;\n}\n", "nl": "Indicates whether or not the given filter is supported by the data type.", "id": "8030"}
{"code": "public void printStackTrace(PrintStream s){\n  super.printStackTrace(s);\n}\n", "nl": "Prints this <code>KeySelectorException</code>, its backtrace and the cause's backtrace to the specified print stream.", "id": "12791"}
{"code": "public boolean isFixed(){\n  return minSmallest == minLargest && maxSmallest == maxLargest;\n}\n", "nl": "Is the value range fixed and fully known. <p> For example, the ISO day-of-month runs from 1 to between 28 and 31. Since there is uncertainty about the maximum value, the range is not fixed. However, for the month of January, the range is always 1 to 31, thus it is fixed.", "id": "23702"}
{"code": "private boolean isGenerateFullConfig(JsonValue requestConfig){\n  return !requestConfig.get(CONNECTOR_REF).isNull() && !requestConfig.get(CONNECTOR_REF).get(CONNECTOR_NAME).isNull() && !requestConfig.get(CONFIGURATION_PROPERTIES).isNull();\n}\n", "nl": "Validates that connectorRef and configurationProperties inside the connector configuration are both not null", "id": "29740"}
{"code": "public final Key unwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {\n  if (mode != UNWRAP_MODE) {\n    throw new IllegalStateException();\n  }\n  return spiImpl.engineUnwrap(wrappedKey,wrappedKeyAlgorithm,wrappedKeyType);\n}\n", "nl": "Unwraps a key using this cipher instance.", "id": "56670"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(documenttypegetnotationstype.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "6916"}
{"code": "public void write(byte b[]) throws IOException {\n  write(b,0,b.length);\n}\n", "nl": "Writes the array. If the array does not fit within the buffer, it is not split, but rather written out as one large chunk.", "id": "22342"}
{"code": "@NonNull public final Agera subscribeOn(@NonNull Executor executor){\n  return new AgeraSubscribeOnExecutor(this,executor);\n}\n", "nl": "Makes sure the addUpdatable and removeUpdatable for this Agera is called on the specified Executor.", "id": "13089"}
{"code": "public static long currentUnixTime(){\n  Calendar calendar=getCalendarInstance();\n  calendar.setTimeInMillis(currentTimeMillis());\n  return toUnixTime(calendar);\n}\n", "nl": "Generates the current timestamp in Unix time format.", "id": "23288"}
{"code": "int expressionCount(){\n  return names.length - arity;\n}\n", "nl": "Report the number of expressions (non-parameter names).", "id": "28231"}
{"code": "protected static void waitShortForMessage(){\n  sleep(MESSAGES_ARRIVE_FOR / 2);\n}\n", "nl": "waits a good long time for messages.", "id": "4716"}
{"code": "protected void selectNextIndex(){\n  int s=list.getSelectedIndex();\n  if ((s + 1) < list.getModel().getSize()) {\n    s+=1;\n    list.setSelectedIndex(s);\n    list.ensureIndexIsVisible(s);\n  }\n}\n", "nl": "Selected the previous row and force it to be visible.", "id": "35340"}
{"code": "public void extend_selection_to_whole_nets(){\n  if (board_is_read_only)   return;\n  if (!is_StateSelectedItem())   return;\n  set_interactive_state(((StateSelectedItem)interactive_state).extent_to_whole_nets());\n}\n", "nl": "Selects also all items belonging to a net of a currently selecte item.", "id": "42330"}
{"code": "public void acceptCertificate(X509Certificate[] chain,String authType,String host){\n  acceptedChains.add(chain);\n  acceptedAuthTypes.add(authType);\n  acceptedHosts.add(host);\n}\n", "nl": "This method is called when the user accepted a certificate.", "id": "31935"}
{"code": "public boolean isActivated(){\n  return (getData() & 0x8) != 0;\n}\n", "nl": "Test if hook is currently activated", "id": "2494"}
{"code": "public AssertionIDRef createAssertionIDRef(String xml) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ASSERTION_ID_REF,xml);\n  if (obj == null) {\n    return new AssertionIDRefImpl(xml);\n  }\n else {\n    return (AssertionIDRef)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>AssertionIDRef</code>. The return object is immutable.", "id": "22216"}
{"code": "@Override public void close(){\n  StaticUtils.close(asn1Reader);\n  StaticUtils.close(socket);\n}\n", "nl": "Closes this LDAP reader and the underlying socket.", "id": "32840"}
{"code": "public void addChild(XMPNode node) throws XMPException {\n  assertChildNotExisting(node.getName());\n  node.setParent(this);\n  getChildren().add(node);\n}\n", "nl": "Adds a node as child to this node.", "id": "38280"}
{"code": "void ensurePrestart(){\n  int wc=workerCountOf(ctl.get());\n  if (wc < corePoolSize)   addWorker(null,true);\n else   if (wc == 0)   addWorker(null,false);\n}\n", "nl": "Same as prestartCoreThread except arranges that at least one thread is started even if corePoolSize is 0.", "id": "21933"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic192Sha256Rsa15Element createBasic192Sha256Rsa15Element() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic192Sha256Rsa15ElementImpl();\n}\n", "nl": "Create an instance of Basic192Sha256Rsa15Element", "id": "39719"}
{"code": "public void mouse_wheel_moved(int p_rotation){\n  StateInteractive return_state=interactive_state.mouse_wheel_moved(p_rotation);\n  if (return_state != interactive_state) {\n    set_interactive_state(return_state);\n    repaint();\n  }\n}\n", "nl": "Actions to be taken in the current interactive state when the mouse wheel is moved This is called by the GUI callback", "id": "871"}
{"code": "public final boolean isFinished(){\n  return mScrollerX.mFinished && mScrollerY.mFinished;\n}\n", "nl": "Returns whether the scroller has finished scrolling.", "id": "35419"}
{"code": "public void assignRole(String roleDN) throws AMException, SSOException {\n  SSOTokenManager.getInstance().validateToken(super.token);\n  Set userDNs=new HashSet();\n  userDNs.add(super.entryDN);\n  dsServices.modifyMemberShip(super.token,userDNs,roleDN,ROLE,ADD_MEMBER);\n}\n", "nl": "Assigns a role to the user.", "id": "29364"}
{"code": "public void clear(){\n  int oldSize=size();\n  super.clear();\n  if (oldSize > 0 && getComponent() != null) {\n    getComponent().componentInputMapChanged(this);\n  }\n}\n", "nl": "Removes all the mappings from this object.", "id": "52491"}
{"code": "public void createDocument() throws ConnectorException {\n  try {\n    DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();\n    DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();\n    document=documentBuilder.newDocument();\n  }\n catch (  Exception e) {\n    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED,e);\n  }\n}\n", "nl": "Creates document.", "id": "35493"}
{"code": "private SearchRequestProtocolOp buildSearchRequestProtocolOp() throws LDAPException {\n  return new SearchRequestProtocolOp(baseDN,scope,dereferencePolicy,sizeLimit,timeLimit,typesOnly,filter,attributes);\n}\n", "nl": "Create a test search request protocol op.", "id": "5081"}
{"code": "public void start(){\n  timerQueue().addTimer(this,getInitialDelay());\n}\n", "nl": "Starts the <code>Timer</code>, causing it to start sending action events to its listeners.", "id": "30328"}
{"code": "public static boolean deleteFiles(Iterable<File> files){\n  boolean allDeleted=true;\n  for (  File f : files) {\n    if (!f.isDirectory()) {\n      allDeleted&=f.delete();\n    }\n  }\n  return allDeleted;\n}\n", "nl": "Deletes all provided files. <p> Does not handle directories.", "id": "53366"}
{"code": "protected PropertyChangeListener createPropertyChangeListener(){\n  return getHandler();\n}\n", "nl": "Creates a <code>PropertyChangeListener</code> which will be added to the combo box. If this method returns null then it will not be added to the combo box.", "id": "45507"}
{"code": "public static int countByUUID_G(java.lang.String uuid,long groupId){\n  return getPersistence().countByUUID_G(uuid,groupId);\n}\n", "nl": "Returns the number of foos where uuid = &#63; and groupId = &#63;.", "id": "26174"}
{"code": "public Table startNewRow(){\n  currentColumn=0;\n  currentRow++;\n  if (currentRow >= rows.size()) {\n    rows.add(new Cell[columnWidths.length]);\n  }\n  return this;\n}\n", "nl": "Starts new row. This mean that next cell will be added at the beginning of next line.", "id": "31626"}
{"code": "public static Authenticator withAccessTokenAndRefresh(final String username,final ZonkyApiToken token,final boolean isDryRun){\n  return new Authenticator(null,true,isDryRun);\n}\n", "nl": "Prepare for authentication using the Zonky OAuth token which will also refresh the token.", "id": "12652"}
{"code": "private void addAllUserDefinedAttrs(List<Attribute> userDefinedAttrs,Entry configEntry){\n  for (  Attribute a : configEntry.getAllAttributes()) {\n    if (!isDSEConfigAttribute(a)) {\n      userDefinedAttrs.add(a);\n    }\n  }\n}\n", "nl": "Get the set of user-defined attributes for the configuration entry. Any attributes that we do not recognize will be included directly in the root DSE.", "id": "47935"}
{"code": "public static void registerFont(String path,String alias){\n  fontRegisterProvider.registerFont(path,alias);\n}\n", "nl": "Register a font file and use an alias for the font contained in it.", "id": "4203"}
{"code": "protected boolean isPositioned(){\n  return isFixedLayout();\n}\n", "nl": "Indicates whether the renderer's position is fixed or not.", "id": "52363"}
{"code": "public void notifyObjectChanged(String name,int type) throws RemoteException {\n  SMSNotificationManager.getInstance().objectChanged(name,type);\n}\n", "nl": "Processes object changed events from other severs", "id": "54010"}
{"code": "@Override public void checkServerTrusted(X509Certificate[] chain,String authType){\n}\n", "nl": "Determines whether an SSL server with the provided certificate chain should be trusted.  In this case, all server certificates will be trusted.", "id": "20823"}
{"code": "public void requestPasswordPolicyDN(){\n  operations.add(PasswordPolicyStateOperationType.GET_PASSWORD_POLICY_DN);\n}\n", "nl": "Returns the password policy DN.", "id": "29286"}
{"code": "public static synchronized void removeProvider(int providerNumber){\n  Provider p=providers.remove(providerNumber - 1);\n  providersNames.remove(p.getName());\n  setNeedRefresh();\n}\n", "nl": "Removes the provider at the specified 1-based position.", "id": "14530"}
{"code": "public void addSigner(PrivateKey key,X509Certificate cert,String encryptionOID,String digestOID,AttributeTable signedAttr,AttributeTable unsignedAttr) throws IllegalArgumentException {\n  doAddSigner(key,cert,encryptionOID,digestOID,new DefaultSignedAttributeTableGenerator(signedAttr),new SimpleAttributeTableGenerator(unsignedAttr),signedAttr);\n}\n", "nl": "add a signer, specifying the digest encryption algorithm, with extra signed/unsigned attributes.", "id": "14525"}
{"code": "@SuppressWarnings(\"unused\") public void openFileChooser(ValueCallback<Uri> uploadMsg,String acceptType,String capture){\n  openFileChooser(uploadMsg,acceptType);\n}\n", "nl": "may not work on KitKat due to lack of implementation of openFileChooser() or onShowFileChooser() https://code.google.com/p/android/issues/detail?id=62220 however newer versions of KitKat fixed it on some devices", "id": "50763"}
{"code": "public Observable<Void> deleteAllAccountsObservable(){\n  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();\n  deleteAllAccounts(resultHandler.toHandler());\n  return resultHandler;\n}\n", "nl": "Delete all user accounts from the persistence", "id": "8904"}
{"code": "public static long parseLong(String string) throws NumberFormatException {\n  return parseLong(string,10);\n}\n", "nl": "Parses the specified string as a signed decimal long value. The ASCII character \\u002d ('-') is recognized as the minus sign.", "id": "12805"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_attrsetvalue2.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "42668"}
{"code": "public Object[] toArray(){\n  return al.toArray();\n}\n", "nl": "Returns an array containing all of the elements in this set. If this set makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. <p>The returned array will be \"safe\" in that no references to it are maintained by this set.  (In other words, this method must allocate a new array even if this set is backed by an array). The caller is thus free to modify the returned array. <p>This method acts as bridge between array-based and collection-based APIs.", "id": "7399"}
{"code": "public boolean hasPurchase(String sku){\n  return mPurchaseMap.containsKey(sku);\n}\n", "nl": "Returns whether or not there exists a purchase of the given product.", "id": "5308"}
{"code": "public synchronized StringBuffer insert(int index,char[] chars,int start,int length){\n  insert0(index,chars,start,length);\n  return this;\n}\n", "nl": "Inserts the specified subsequence of characters into this buffer at the specified index.", "id": "57690"}
{"code": "void registerConnectionFinalizer(Runnable r){\nsynchronized (connectionFinalizerLock) {\n    if (connectionFinalizer != null) {\n      connectionFinalizerPendingJobQueue.add(r);\n    }\n else {\n      r.run();\n    }\n  }\n}\n", "nl": "Enqueue a connection finalizer which will be invoked after a short delay.", "id": "41793"}
{"code": "public String append(String superRes,String subRes){\n  if (resourceNameUtil == null) {\n    PolicyManager.debug.error(\"Append: Don't have resource comparator\");\n    return (superRes);\n  }\n  return (resourceNameUtil.append(superRes,subRes));\n}\n", "nl": "Combine super-resource and sub-resource of this service type.", "id": "58379"}
{"code": "protected void increment(){\n  indentation++;\n}\n", "nl": "increment the indentation field", "id": "40736"}
{"code": "public void write_value(java.io.Serializable value,java.lang.Class clz){\n  throw new org.omg.CORBA.NO_IMPLEMENT();\n}\n", "nl": "Marshals a value type to the output stream.", "id": "56092"}
{"code": "public void init(Compiler compiler,int opPos,int stepType) throws javax.xml.transform.TransformerException {\n  initPredicateInfo(compiler,opPos);\n}\n", "nl": "Initialize an AxesWalker during the parse of the XPath expression.", "id": "51071"}
{"code": "public Object clone(){\n  AuthenticatedUsers theClone=null;\n  try {\n    theClone=(AuthenticatedUsers)super.clone();\n  }\n catch (  CloneNotSupportedException e) {\n    throw new InternalError();\n  }\n  return theClone;\n}\n", "nl": "Creates and returns a copy of this object.", "id": "43180"}
{"code": "public boolean contains(final Object x){\n  return elements.contains(x);\n}\n", "nl": "Does the list contain the specified element?", "id": "26422"}
{"code": "public static ScheduleType createLaunchLater(Date date){\n  ScheduleType schedule=new ScheduleType();\n  schedule.type=Type.LAUNCH_LATER;\n  schedule.launchLaterDate=date;\n  schedule.toString=schedule.calculateToString();\n  schedule.hashCode=schedule.calculateHashCode();\n  return schedule;\n}\n", "nl": "Returns a schedule instance that launches the task at a given date.", "id": "25358"}
{"code": "protected void callChildVisitors(XSLTVisitor visitor){\n  callChildVisitors(visitor,true);\n}\n", "nl": "Call the children visitors.", "id": "15130"}
{"code": "public static String formPropertySheetXML(String properties){\n  return formPropertySheetXML(properties,false);\n}\n", "nl": "Returns a property XML of a given well formed attributes XML string.", "id": "9541"}
{"code": "public Observable<List<Account>> retrieveAllAccountsObservable(){\n  io.vertx.rx.java.ObservableFuture<List<Account>> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();\n  retrieveAllAccounts(resultHandler.toHandler());\n  return resultHandler;\n}\n", "nl": "Retrieve all user accounts.", "id": "50416"}
{"code": "public static void closeQuietly(final ResultSet rset){\n  if (rset != null) {\n    try {\n      rset.close();\n    }\n catch (    final Exception e) {\n    }\n  }\n}\n", "nl": "Closes the ResultSet (which may be null).", "id": "4178"}
{"code": "public void detach(){\n  if (m_allowDetach) {\n    AxesWalker walker=m_firstWalker;\n    while (null != walker) {\n      walker.detach();\n      walker=walker.getNextWalker();\n    }\n    m_lastUsedWalker=null;\n    super.detach();\n  }\n}\n", "nl": "Detaches the iterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state. After<code>detach</code> has been invoked, calls to <code>nextNode</code> or<code>previousNode</code> will raise the exception INVALID_STATE_ERR.", "id": "19668"}
{"code": "public boolean hasMessageType(String messageTypeName){\n  for (  TypeElement type : _nativeTypes) {\n    if (messageTypeName.equals(type.name())) {\n      if (type instanceof MessageElement) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "nl": "Method for checking whether specified message type is defined by the native schema", "id": "28495"}
{"code": "public static DigestMD5SASLBindRequest copyOfDigestMD5SASLBindRequest(final DigestMD5SASLBindRequest request){\n  return new DigestMD5SASLBindRequestImpl(request);\n}\n", "nl": "Creates a new digest MD5 SASL bind request that is an exact copy of the provided request.", "id": "47051"}
{"code": "public static void checkContentLength(HttpServletRequest servletRequest) throws L10NMessageImpl {\n  int length=servletRequest.getContentLength();\n  if (length > maxContentLength) {\n    Object[] args={new Integer(length),new Integer(maxContentLength)};\n    throw new L10NMessageImpl(bundleName,\"contentLengthTooLarge\",args);\n  }\n else {\n    return;\n  }\n}\n", "nl": "Use this method to check an HTTP servlet request size against the configured limit to insure that it is not too large, and possibly being sent to an OpenAM servlet to cause a Denial of Service (DOS).", "id": "5357"}
{"code": "public final void initVerify(PublicKey publicKey) throws InvalidKeyException {\n  engineInitVerify(publicKey);\n  state=VERIFY;\n  if (!skipDebug && pdebug != null) {\n    pdebug.println(\"Signature.\" + algorithm + \" verification algorithm from: \"+ this.provider.getName());\n  }\n}\n", "nl": "Initializes this object for verification. If this method is called again with a different argument, it negates the effect of this call.", "id": "40031"}
{"code": "@Override public String toString(){\n  return currencyCode;\n}\n", "nl": "Returns this currency's ISO 4217 currency code.", "id": "44064"}
{"code": "public void columnAdded(TableColumnModelEvent e){\n  resizeAndRepaint();\n}\n", "nl": "Invoked when a column is added to the table column model. <p> Application code will not use these methods explicitly, they are used internally by <code>JTable</code>.", "id": "32927"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodevalue08.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "20443"}
{"code": "public void close(boolean force) throws IOException {\n  if (isOpen() || force)   close();\n}\n", "nl": "Close the connection.", "id": "14606"}
{"code": "private void handlePossibleCancellationInterrupt(int s){\n  if (s == INTERRUPTING)   while (state == INTERRUPTING)   Thread.yield();\n}\n", "nl": "Ensures that any interrupt from a possible cancel(true) is only delivered to a task while in run or runAndReset.", "id": "8354"}
{"code": "public static String guessExtensionFromMimeType(String mimeType){\n  if (mimeType == null || mimeType.isEmpty()) {\n    return null;\n  }\n  return mimeTypeToExtensionMap.get(mimeType);\n}\n", "nl": "Returns the registered extension for the given MIME type. Note that some MIME types map to multiple extensions. This call will return the most common extension for the given MIME type.", "id": "51791"}
{"code": "private void validateSubcommandOptions(LocalizableMessageBuilder buf){\n  if (isEnableReplicationSubcommand()) {\n    validateEnableReplicationOptions(buf);\n  }\n else   if (isDisableReplicationSubcommand()) {\n    validateDisableReplicationOptions(buf);\n  }\n else   if (isStatusReplicationSubcommand()) {\n    validateStatusReplicationOptions(buf);\n  }\n else   if (isInitializeReplicationSubcommand()) {\n    validateSourceAndDestinationServersOptions(buf);\n  }\n else   if (isPurgeHistoricalSubcommand()) {\n    validatePurgeHistoricalOptions(buf);\n  }\n else   if (isResetChangeNumber()) {\n    validateSourceAndDestinationServersOptions(buf);\n  }\n}\n", "nl": "Checks the subcommand options and updates the provided LocalizableMessageBuilder with the errors that were encountered with the subcommand options. This method assumes that the method parseArguments for the parser has already been called.", "id": "47799"}
{"code": "private static int nextHashCode(){\n  return nextHashCode.getAndAdd(HASH_INCREMENT);\n}\n", "nl": "Returns the next hash code.", "id": "31805"}
{"code": "public static SimplePrefixSet of(String... prefixes){\n  return new SimplePrefixSet(Arrays.asList(prefixes));\n}\n", "nl": "Constructs a prefix set with the given set of prefixes to test.", "id": "1182"}
{"code": "public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {\n  if (SUPERCLASS_NAME.equals(name)) {\n    return null;\n  }\n  return super.loadClass(name,resolve);\n}\n", "nl": "Load a class. Return null if the class's name is SUPERCLASS_NAME; otherwise invoke the super's loadClass method.", "id": "27457"}
{"code": "public void handleButton2Request(RequestInvocationEvent event){\n  forwardToAgentsViewBean();\n}\n", "nl": "Handles cancel request.", "id": "2708"}
{"code": "public void printil(String s){\n  javaLine++;\n  writer.print(SPACES.substring(0,indent));\n  writer.println(s);\n}\n", "nl": "Prints the current indention, and then the string, and a '\\n'.", "id": "8172"}
{"code": "public void focusPreviousComponent(Component aComponent){\n  if (aComponent != null) {\n    aComponent.transferFocusBackward();\n  }\n}\n", "nl": "Focuses the Component before aComponent, typically based on a FocusTraversalPolicy.", "id": "57127"}
{"code": "public String toStringImpl(){\n  return new StringBuilder().append(id).append(\", \").append(str).toString();\n}\n", "nl": "Used by super class to log the attribute's contents when packet logging is enabled.", "id": "3454"}
{"code": "public static ComponentUI createUI(JComponent x){\n  return new SynthOptionPaneUI();\n}\n", "nl": "Creates a new UI object for the given component.", "id": "9928"}
{"code": "@Override public void writeValue(ASN1Writer writer) throws IOException {\n  writer.writeOctetString(transactionId);\n}\n", "nl": "Writes this control's value to an ASN.1 writer. The value (if any) must be written as an ASN1OctetString.", "id": "18302"}
{"code": "@DataProvider(name=\"integerValues\") public Object[][] createIntegerValues(){\n  return new Object[][]{{\"0123456\",true},{\"42\",true},{\"0\",true},{\"\",false},{\"0xFF\",false},{\"NULL\",false},{\"Not a Number\",false}};\n}\n", "nl": "Create data for the <CODE>testInteger</CODE> test case.", "id": "23869"}
{"code": "public void create(SSOToken token,String dn,Map attrs) throws SMSException, SSOException {\n  internalCreate(token,dn,attrs);\n  objectChanged(dn,ADD);\n}\n", "nl": "Create an entry in the directory", "id": "57068"}
{"code": "public void addEventHandler(final EventTypes event,final Class<? extends IEventHandler> eventHandler,final PluginInfo pluginInfo){\n  EventCommandData eventCommandData=new EventCommandData(eventHandler);\n  eventCommandData.setPluginInfo(pluginInfo);\n  eventHandlers.get(event).add(eventCommandData);\n}\n", "nl": "register events handlers for event.", "id": "47549"}
{"code": "public void concatenate(SIPHeaderList<HDR> other,boolean topFlag) throws IllegalArgumentException {\n  if (!topFlag) {\n    this.addAll(other);\n  }\n else {\n    this.addAll(0,other);\n  }\n}\n", "nl": "Concatenate two compatible lists. This appends or prepends the new list to the end of this list.", "id": "40465"}
{"code": "private void createActions(){\n  closeAction=new CloseAction();\n  if (getWindowDecorationStyle() == JRootPane.FRAME) {\n    iconifyAction=new IconifyAction();\n    restoreAction=new RestoreAction();\n    maximizeAction=new MaximizeAction();\n  }\n}\n", "nl": "Create the <code>Action</code>s that get associated with the buttons and menu items.", "id": "1206"}
{"code": "public String toXMLString() throws SAML2Exception {\n  return this.toXMLString(true,false);\n}\n", "nl": "Returns a String representation", "id": "20397"}
{"code": "public static QrCode encodeText(String text,Ecc ecl){\n  if (text == null || ecl == null)   throw new NullPointerException();\n  List<QrSegment> segs=QrSegment.makeSegments(text);\n  return encodeSegments(segs,ecl);\n}\n", "nl": "Returns a QR Code symbol representing the specified Unicode text string at the specified error correction level. As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer Unicode code points (not UTF-16 code units). The smallest possible QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.", "id": "38475"}
{"code": "public boolean isMutable(){\n  return isMutable;\n}\n", "nl": "Returns value true if object is mutable.", "id": "36608"}
{"code": "public void addChangeListener(ChangeListener l){\n  listenerList.add(ChangeListener.class,l);\n}\n", "nl": "Adds a <code>ChangeListener</code> to the button.", "id": "15273"}
{"code": "public void addVetoableChangeListener(String name,VetoableChangeListener vcl){\n  vcSupport.addVetoableChangeListener(name,vcl);\n}\n", "nl": "Add a VetoableChangeListener for a specific property. The same listener object may be added more than once.  For each property,  the listener will be invoked the number of times it was added for that property. If <code>name</code> or <code>vcl</code> is null, no exception is thrown and no action is taken.", "id": "47872"}
{"code": "public void printStackTrace(){\n  printStackTrace(new java.io.PrintWriter(System.err,true));\n}\n", "nl": "Print the the trace of methods from where the error originated.  This will trace all nested exception objects, as well as this object.", "id": "5651"}
{"code": "protected final void registerTag(Tag tag){\n  allTags.add(tag);\n}\n", "nl": "Register a tag with this managed object definition. <p> This method <b>must not</b> be called by applications.", "id": "14419"}
{"code": "public WorldCreator seed(long seed){\n  this.seed=seed;\n  return this;\n}\n", "nl": "Sets the seed that will be used to create this world", "id": "53337"}
{"code": "public void postMail(String recipients[],String subject,String message,String from) throws MessagingException {\n  postMail(recipients,subject,message,from,\"text/plain\",\"UTF-8\");\n}\n", "nl": "Posts e-mail messages to users. This method will wait on for the timeouts when the specified host is down. Use this method in a separate thread so that it will not hang when the mail server is down.", "id": "50850"}
{"code": "public static IntegerArgument portArgument(final int defaultPort,final LocalizableMessage description) throws ArgumentException {\n  return IntegerArgument.builder(OPTION_LONG_PORT).shortIdentifier(OPTION_SHORT_PORT).description(description != null ? description : INFO_DESCRIPTION_ADMIN_PORT.get()).range(1,65535).defaultValue(defaultPort).valuePlaceholder(INFO_PORT_PLACEHOLDER.get()).buildArgument();\n}\n", "nl": "Returns the \"port\" integer argument. <br> <i> N.B : the 'p' short option is also used by skipdecode(DBTest), propertiesFile(JavaPropertiesToolArguments).</i>", "id": "39565"}
{"code": "public java.lang.String signXML(java.lang.String XML,java.lang.String certAlias) throws XMLSignatureException {\n  return sp.signXML(XML,certAlias);\n}\n", "nl": "Sign the XML string using enveloped signatures.", "id": "25279"}
{"code": "public Set searchStaticGroups(String wildcard,Map avPairs,int level) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.GROUP),wildcard,avPairs,level);\n}\n", "nl": "Searches for static groups in this organization using wildcards and attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be specifed so that DNs of static groups with matching attribute-value pairs will be returned.", "id": "16150"}
{"code": "public Set searchSubOrganizationalUnits(String wildcard,Map avPairs,int level) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(ORGANIZATIONAL_UNIT),getSearchFilter(AMObject.ORGANIZATIONAL_UNIT),wildcard,avPairs,level);\n}\n", "nl": "Searches for sub organizational units in this organizational unit using wildcards and attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be specifed so that DNs of sub organizations with matching attribute-value pairs will be returned.", "id": "53766"}
{"code": "private StringBuffer format(BigDecimal number,StringBuffer result,FieldPosition fieldPosition){\n  fieldPosition.setBeginIndex(0);\n  fieldPosition.setEndIndex(0);\n  return format(number,result,fieldPosition.getFieldDelegate());\n}\n", "nl": "Formats a BigDecimal to produce a string.", "id": "38305"}
{"code": "public boolean equals(Object indexType){\n  if (indexType instanceof IndexType) {\n    IndexType s=(IndexType)indexType;\n    return (s.index.equalsIgnoreCase(index));\n  }\n  return (false);\n}\n", "nl": "Checks if two index type objects are equal.", "id": "41014"}
{"code": "public Future<Job> failed(){\n  this.failed_at=System.currentTimeMillis();\n  return this.updateNow().compose(null).compose(null);\n}\n", "nl": "Set a job to `failed` state.", "id": "40245"}
{"code": "void update(BackendDescriptor backend){\n  updateBaseDNCombo(backend);\n  backendName.setText(backend.getBackendID());\n}\n", "nl": "Updates the contents of the panel with the provided backend.", "id": "24183"}
{"code": "public static FastJsonConverterFactory create(){\n  return new FastJsonConverterFactory();\n}\n", "nl": "Create an default instance for conversion. Encoding to JSON and decoding from JSON (when no charset is specified by a header) will use UTF-8.", "id": "53264"}
{"code": "public Object clone(){\n  try {\n    return new Role(name,objectNameList);\n  }\n catch (  IllegalArgumentException exc) {\n    return null;\n  }\n}\n", "nl": "Clone the role object.", "id": "31746"}
{"code": "@Override public LdapPromise<Void> abandonAsync(final AbandonRequest request){\n  throw new UnsupportedOperationException(\"Abandon requests are not supported for synchronous connections\");\n}\n", "nl": "Abandon operations are not supported because operations are performed synchronously and the ID of the request to be abandoned cannot be determined. Thread interruption must be used in order to cancel a blocked request.", "id": "18986"}
{"code": "public static boolean isUnix(){\n  return (isSolaris() || isHPUX() || isLinux()|| isAIX()|| isOSX());\n}\n", "nl": "Method isUnix", "id": "48241"}
{"code": "protected void bcsPreDeserializationHook(ObjectInputStream ois) throws IOException, ClassNotFoundException {\n}\n", "nl": "called by readObject after defaultReadObject() but prior to deserialization of any children. This method may be overridden by subclasses to perform custom deserialization of their state prior to this superclass deserializing the children. This method should not however be used by subclasses to replace their own implementation (if any) of readObject().", "id": "13038"}
{"code": "public boolean containsAll(Collection<?> c){\n  if (!(c instanceof RegularEnumSet))   return super.containsAll(c);\n  RegularEnumSet<?> es=(RegularEnumSet<?>)c;\n  if (es.elementType != elementType)   return es.isEmpty();\n  return (es.elements & ~elements) == 0;\n}\n", "nl": "Returns <tt>true</tt> if this set contains all of the elements in the specified collection.", "id": "2824"}
{"code": "private String toDefinitionClassName(String configClassName){\n  int finalDot=configClassName.lastIndexOf('.');\n  return configClassName.substring(0,finalDot - 6) + \"meta.\" + configClassName.substring(finalDot + 1)+ \"Defn\";\n}\n", "nl": "Retrieve class name of definition from class name of configuration. <p> Convert class name \"[package].server.FooCfg\" to \"[package].meta.FooCfgDef\"", "id": "39400"}
{"code": "public int read() throws IOException {\nsynchronized (lock) {\n    ensureOpen();\n    if (pos < buf.length)     return buf[pos++];\n else     return super.read();\n  }\n}\n", "nl": "Reads a single character.", "id": "29690"}
{"code": "public void execute(TransformerImpl transformer) throws TransformerException {\n  transformer.pushCurrentTemplateRuleIsNull(true);\n  try {\n    transformSelectedNodes(transformer);\n  }\n  finally {\n    transformer.popCurrentTemplateRuleIsNull();\n  }\n}\n", "nl": "Execute the xsl:for-each transformation", "id": "13701"}
{"code": "private int readHeaders(InputStream is){\n  int nread=0;\n  log(\"Read headers\");\n  while (true) {\n    int headerLen=0;\n    headerLen=parseHeader(is);\n    if (headerLen == -1)     return -1;\n    nread+=headerLen;\n    if (headerLen <= 2) {\n      return nread;\n    }\n  }\n}\n", "nl": "Read all headers from the input stream", "id": "11963"}
{"code": "public final boolean pop(){\n  return m_values[m_index--];\n}\n", "nl": "Removes the object at the top of this stack and returns that object as the value of this function.", "id": "42045"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlsig.X509DataType.X509IssuerSerial createX509DataTypeX509IssuerSerial() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.X509DataTypeImpl.X509IssuerSerialImpl();\n}\n", "nl": "Create an instance of X509DataTypeX509IssuerSerial", "id": "45473"}
{"code": "void removeEQ(Object o){\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    for (Iterator<E> it=q.iterator(); it.hasNext(); ) {\n      if (o == it.next()) {\n        it.remove();\n        break;\n      }\n    }\n  }\n  finally {\n    lock.unlock();\n  }\n}\n", "nl": "Identity-based version for use in Itr.remove", "id": "25307"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_attrreplacechild2.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "33602"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(characterdatareplacedataexceedslengthofarg.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "30461"}
{"code": "public Component add(Component component,int index){\n  if (!(component instanceof UIResource)) {\n    insertTab(component.getName(),null,component,null,index == -1 ? getTabCount() : index);\n  }\n else {\n    super.add(component,index);\n  }\n  return component;\n}\n", "nl": "Adds a <code>component</code> at the specified tab index with a tab title defaulting to the name of the component. Cover method for <code>insertTab</code>.", "id": "8370"}
{"code": "private static String buildCacheKey(String realm,String cotName){\n  return realm + \"//\" + cotName;\n}\n", "nl": "Builds cache key for circle of trust cache.", "id": "33436"}
{"code": "public void addLiteralResultAttribute(String att){\n  if (null == m_xslAttr)   m_xslAttr=new ArrayList();\n  m_xslAttr.add(att);\n}\n", "nl": "Set a literal result attribute (used for xsl attributes).", "id": "49323"}
{"code": "public void keyTyped(KeyEvent e){\n  getHandler().keyTyped(e);\n}\n", "nl": "Invoked when a key has been typed. Moves the keyboard focus to the first element whose first letter matches the alphanumeric key pressed by the user. Subsequent same key presses move the keyboard focus to the next object that starts with the same letter.", "id": "6397"}
{"code": "public static boolean isValidNmtoken(String nmtoken){\n  if (nmtoken.length() == 0)   return false;\n  for (int i=0; i < nmtoken.length(); i++) {\n    char ch=nmtoken.charAt(i);\n    if (!isName(ch)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Check to see if a string is a valid Nmtoken according to [7] in the XML 1.0 Recommendation", "id": "9180"}
{"code": "public void handleButton3Request(RequestInvocationEvent event){\n  forwardToServicesViewBean();\n}\n", "nl": "Handles cancel request.", "id": "51422"}
{"code": "@Override public void customize(ConfigurableEmbeddedServletContainer container){\n  MimeMappings mappings=new MimeMappings(MimeMappings.DEFAULT);\n  mappings.add(\"html\",\"text/html;charset=utf-8\");\n  mappings.add(\"json\",\"text/html;charset=utf-8\");\n  container.setMimeMappings(mappings);\n  setLocationForStaticAssets(container);\n}\n", "nl": "Customize the Servlet engine: Mime types, the document root, the cache.", "id": "57640"}
{"code": "public void nextRequest(){\n  for (int i=0; i <= lastActiveFilter; i++) {\n    activeFilters[i].recycle();\n  }\n  response.recycle();\n  pos=0;\n  lastActiveFilter=-1;\n  responseFinished=false;\n  byteCount=0;\n}\n", "nl": "End processing of current HTTP request. Note: All bytes of the current request should have been already consumed. This method only resets all the pointers so that we are ready to parse the next HTTP request.", "id": "44916"}
{"code": "private void recreateTable(int currentVersion){\n  try {\n    connetion.initTransaction();\n    if (currentVersion == 0) {\n      createNewTables();\n    }\n    connetion.commitTransaction();\n  }\n catch (  SQLException e) {\n    BotLogger.error(LOGTAG,e);\n  }\n}\n", "nl": "Recreates the DB", "id": "49626"}
{"code": "@Override public void send(HandshakeIODataStream out){\n  if (signedHash.length != 0) {\n    out.writeUint16(signedHash.length);\n    out.write(signedHash);\n  }\n}\n", "nl": "Sends message", "id": "2126"}
{"code": "@Override public void onPropertyChanged(Observable sender,int propertyId){\n  if (propertyId == Conversation.STATE_PROPERTY_ID) {\n    updateConversationState();\n  }\n}\n", "nl": "onProperty changed will be called by the Observable instance on a property change.", "id": "20619"}
{"code": "public boolean isAuthOption(String opt){\n  return opt.equals(FederationManagerConstants.ARGUMENT_ADMIN_ID) || opt.equals(FederationManagerConstants.ARGUMENT_PASSWORD_FILE);\n}\n", "nl": "Returns <code>true</code> if the option is an authentication related option such as user ID and password.", "id": "43299"}
{"code": "public static void resetSharedPreferences(Context context,String stateName){\n  SharedPreferences state=context.getSharedPreferences(stateName,Context.MODE_WORLD_READABLE | Context.MODE_WORLD_WRITEABLE);\n  state.edit().clear().commit();\n}\n", "nl": "Erases all shared preferences saved for an activity.", "id": "448"}
{"code": "void addExtraLine(final TemplateLine line){\n  extraLines.add(line);\n}\n", "nl": "Adds the provided template line to the set of extra lines for this branch.", "id": "3683"}
{"code": "@Override public void store(PrintWriter aWriter,int indent,Object aServer) throws Exception {\n  storeXMLHead(aWriter);\n  super.store(aWriter,indent,aServer);\n}\n", "nl": "Store the specified Server properties.", "id": "55338"}
{"code": "protected void logToRejectWriter(List<StringBuilder> lines,LocalizableMessage message){\n  entriesRejected.incrementAndGet();\n  BufferedWriter rejectWriter=importConfig.getRejectWriter();\n  if (rejectWriter != null) {\n    logToWriter(rejectWriter,lines,message);\n  }\n}\n", "nl": "Log a message to the reject writer if one is configured.", "id": "26910"}
{"code": "public long roundTripTime() throws InterruptedException {\n  latch.await();\n  return received - sent;\n}\n", "nl": "Returns the round trip time for this ping in nanoseconds, waiting for the response to arrive if necessary. Returns -1 if the response was canceled.", "id": "22215"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlsig.ReferenceType createReferenceType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.ReferenceTypeImpl();\n}\n", "nl": "Create an instance of ReferenceType", "id": "16256"}
{"code": "@Override public void onUIRefreshBegin(PtrFrameLayout frame){\n  mDrawable.setAlpha(255);\n  mDrawable.start();\n}\n", "nl": "perform refreshing UI", "id": "29631"}
{"code": "@Override public Foo create(long fooId){\n  Foo foo=new FooImpl();\n  foo.setNew(true);\n  foo.setPrimaryKey(fooId);\n  String uuid=PortalUUIDUtil.generate();\n  foo.setUuid(uuid);\n  foo.setCompanyId(companyProvider.getCompanyId());\n  return foo;\n}\n", "nl": "Creates a new foo with the primary key. Does not add the foo to the database.", "id": "33161"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsfederation.AutomaticPseudonymsElement createAutomaticPseudonymsElement(boolean value) throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.AutomaticPseudonymsElementImpl(value);\n}\n", "nl": "Create an instance of AutomaticPseudonymsElement", "id": "3533"}
{"code": "public void beginMonitoringOf(final InetAddress inetAddress,final int inode){\n  final long socketIdentifier=fromInet4AddressAndInode(inetAddress,inode);\n  candidateSockets.beginMonitoringSocketIdentifier(new InetSocketAddress(inetAddress,0),socketIdentifier);\n}\n", "nl": "Register interest in sockets listening to the specified address on any port. Thread-safe, can be called from multiple threads concurrently.", "id": "45199"}
{"code": "private static void compareConcatenatedSchema(Set<String> oldElements,Set<String> newElements,AttributeType elementType,List<Modification> mods){\n  addModification(mods,DELETE,oldElements,newElements,elementType);\n  addModification(mods,ADD,newElements,oldElements,elementType);\n}\n", "nl": "Compares the provided sets of schema element definitions and writes any differences found into the given list of modifications.", "id": "53203"}
{"code": "private int defaultThreadID(){\n  long tid=Thread.currentThread().getId();\n  if (tid < MIN_SEQUENTIAL_THREAD_ID) {\n    return (int)tid;\n  }\n else {\n    Integer id=threadIds.get();\n    if (id == null) {\n      id=nextThreadId.getAndIncrement();\n      threadIds.set(id);\n    }\n    return id;\n  }\n}\n", "nl": "Returns the default value for a new LogRecord's threadID.", "id": "10296"}
{"code": "public void clearCoRoutine(boolean callDoTerminate){\n  if (null != m_incrementalSAXSource) {\n    if (callDoTerminate)     m_incrementalSAXSource.deliverMoreNodes(false);\n    m_incrementalSAXSource=null;\n  }\n}\n", "nl": "Ask the CoRoutine parser to doTerminate and clear the reference. If the CoRoutine parser has already been cleared, this will have no effect.", "id": "34116"}
{"code": "public boolean verifyXMLSignature(java.lang.String xmlString) throws XMLSignatureException {\n  return verifyXMLSignature(xmlString,null);\n}\n", "nl": "Verify the signature of the xml string", "id": "30092"}
{"code": "public GSERParser readStartSequence() throws DecodeException {\n  next(GSER_SEQUENCE_START);\n  skip(GSER_SP);\n  return this;\n}\n", "nl": "Skips the input matching the start of a sequence and subsequent space characters.", "id": "5884"}
{"code": "@Override public void onItemsRemoved(RecyclerView recyclerView,int positionStart,int itemCount){\n  if (isBeforePreLayout) {\n    if (firstChangedPosition > positionStart || firstChangedPosition == -1)     firstChangedPosition=positionStart;\n    if (firstChangedPosition < firstAttachedItemPosition)     removedTopAndBoundPositionCount+=itemCount;\n  }\n}\n", "nl": "Triggered with notifyItemRemoved(). This method will be triggered before the pre-layout for invisible items (out of bounds) and after the pre-layout for visible items. If there are items removed out of the top border, we update the firstChangedPosition and removedTopAndBoundPositionCount.", "id": "11932"}
{"code": "public void clear(){\n  this.ch=null;\n  this.offset=0;\n  this.length=-1;\n}\n", "nl": "Resets all of the values to their defaults.", "id": "29546"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n  TestCaseUtils.initializeTestBackend(true);\n  TestCaseUtils.dsconfig(\"set-global-configuration-prop\",\"--add\",\"allowed-task:org.opends.server.tasks.DummyTask\");\n}\n", "nl": "Ensures that the Directory Server is running, and that we are allowed to schedule the dummy task.", "id": "18688"}
{"code": "private static TypeDescription queryOptionsDescription(){\n  return new TypeDescription.Latent(\"org.apache.cassandra.cql3.QueryOptions\",Modifier.PUBLIC,null,null);\n}\n", "nl": "QueryOptions class type description helper.", "id": "41284"}
{"code": "public int hashCode(){\n  if (hashCode == -1) {\n    hashCode=ASCIICaseInsensitiveComparator.lowerCaseHashCode(name);\n  }\n  return hashCode;\n}\n", "nl": "Computes the hash value for this attribute name.", "id": "29434"}
{"code": "private boolean dbFilesExist(){\n  File dbDir=Installation.getLocal().getDatabasesDirectory();\n  File[] children=dbDir.listFiles();\n  return children != null && children.length > 0;\n}\n", "nl": "Indicates whether there are database files under this installation.", "id": "38677"}
{"code": "public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {\n  super.endElement(handler,uri,localName,rawName);\n  handler.popElemTemplateElement();\n  handler.popStylesheet();\n}\n", "nl": "Receive notification of the end of an element.", "id": "7277"}
{"code": "public void paintFileChooserBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n}\n", "nl": "Paints the background of a file chooser.", "id": "203"}
{"code": "static public void assertNotNull(String message,Object object){\n  assertTrue(message,object != null);\n}\n", "nl": "Asserts that an object isn't null. If it is an AssertionFailedError is thrown with the given message.", "id": "7481"}
{"code": "public synchronized boolean isAccessToUnderlyingConnectionAllowed(){\n  return this.accessToUnderlyingConnectionAllowed;\n}\n", "nl": "Returns the value of the accessToUnderlyingConnectionAllowed property.", "id": "54958"}
{"code": "@Override public long skip(long ln) throws IOException {\n  try {\n    return in.skip(ln);\n  }\n catch (  IOException e) {\n    handleIOException(e);\n    return 0;\n  }\n}\n", "nl": "Invokes the delegate's <code>skip(long)</code> method.", "id": "38106"}
{"code": "public static void registerSupportedExtension(String oid,ExtendedOperationHandler<?> handler){\n  directoryServer.extendedOperationHandlers.put(toLowerCase(oid),handler);\n}\n", "nl": "Registers the provided extended operation handler with the Directory Server.", "id": "13918"}
{"code": "protected List<Long> createBuckets(){\n  List<Long> toReturn=new ArrayList<>(bucketSize);\n  for (int bucketPosition=0; bucketPosition < bucketSize; bucketPosition++) {\n    Long bucketValue=initialBucket(bucketSize,bucketPosition);\n    toReturn.add(bucketValue);\n  }\n  return toReturn;\n}\n", "nl": "Creates our bucket list.", "id": "26164"}
{"code": "public boolean isForHTTPBasic(){\n  return (negoValue != null) ? negoValue.equalsIgnoreCase(HTTP_HTTPBASIC) : false;\n}\n", "nl": "Returns <code>true<code> if the callback is for HTTPBasic.", "id": "33154"}
{"code": "public SessionName createSessionName(String name){\n  SessionNameField sessionNameImpl=new SessionNameField();\n  try {\n    sessionNameImpl.setValue(name);\n  }\n catch (  SdpException s) {\n    s.printStackTrace();\n  }\n  return sessionNameImpl;\n}\n", "nl": "Returns SessionName object with the specified name.", "id": "34804"}
{"code": "@Override public void end(String namespace,String name) throws Exception {\n  digester.pop();\n}\n", "nl": "Process the end of this element.", "id": "16607"}
{"code": "public void beginDisplay(DisplayEvent event){\n  setDisplayFieldValue(REDIRECT_URL,loginURL);\n}\n", "nl": "Begins displaying page.", "id": "55457"}
{"code": "@Override public String toJson(){\n  GsonBuilder gson=new GsonBuilder();\n  gson.registerTypeAdapter(Position.class,new PositionSerializer());\n  return gson.create().toJson(this);\n}\n", "nl": "Convert feature into JSON.", "id": "449"}
{"code": "@Override public final boolean isValid(){\n  return isValid;\n}\n", "nl": "Indicates whether this key is valid. A key is valid as long as it has not been canceled.", "id": "10047"}
{"code": "public static String createFIFO(long id){\n  String idLen=\"\" + (\"\" + id).length();\n  int len=2 - idLen.length();\n  while (len-- > 0)   idLen=\"0\" + idLen;\n  return idLen + \"|\" + id;\n}\n", "nl": "Create an id for the zset to preserve FIFO order", "id": "42424"}
{"code": "public void removeElementAt(int index){\n  delegate.removeElementAt(index);\n  fireIntervalRemoved(this,index,index);\n}\n", "nl": "Deletes the component at the specified index. <p> Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is invalid. <blockquote> <b>Note:</b> Although this method is not deprecated, the preferred method to use is <code>remove(int)</code>, which implements the <code>List</code> interface defined in the 1.2 Collections framework. </blockquote>", "id": "37737"}
{"code": "public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias) throws XMLSignatureException {\n  return signXML(doc,certAlias,null);\n}\n", "nl": "Sign the xml document using enveloped signatures.", "id": "55281"}
{"code": "@Override public String format(LogRecord logRecord){\n  return formatMessage(logRecord);\n}\n", "nl": "Simply return the value from calling formatMessage. All DBFormatting is now handled directly in DBHandler.", "id": "23299"}
{"code": "protected void reportWrongNumberArgs() throws WrongNumberArgsException {\n  String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{\"Programmer's assertion:  the method FunctionMultiArgs.reportWrongNumberArgs() should never be called.\"});\n  throw new RuntimeException(fMsg);\n}\n", "nl": "Constructs and throws a WrongNumberArgException with the appropriate message for this function object.  This class supports an arbitrary number of arguments, so this method must never be called.", "id": "52123"}
{"code": "public ErrorInfoHeader createErrorInfoHeader(URI errorInfo){\n  if (errorInfo == null)   throw new NullPointerException(\"null arg\");\n  return new ErrorInfo((GenericURI)errorInfo);\n}\n", "nl": "Creates a new ErrorInfoHeader based on the newly supplied errorInfo value.", "id": "17527"}
{"code": "public boolean hasMoreRequirements(boolean noFilter){\n  if (localFlag) {\n    return (acLocal.hasMoreRequirements(noFilter));\n  }\n else {\n    if ((!loginStatus.equals(Status.IN_PROGRESS)) || ((getCallbacks(receivedDocument,noFilter)) == null)) {\n      return (false);\n    }\n    return (true);\n  }\n}\n", "nl": "Returns <code>true</code> if the login process requires more information from the user to complete the authentication. NOTE: This method has to be called as a condition of a <ode>while</code> loop in order to complete the authentication process and get the correct <code>Status</code> after submitting the requirements.", "id": "25336"}
{"code": "private Set unionIPRange(byte[] ipWithSubmask1,byte[] ipWithSubmask2){\n  Set set=new HashSet();\n  if (Arrays.areEqual(ipWithSubmask1,ipWithSubmask2)) {\n    set.add(ipWithSubmask1);\n  }\n else {\n    set.add(ipWithSubmask1);\n    set.add(ipWithSubmask2);\n  }\n  return set;\n}\n", "nl": "Calculates the union if two IP ranges.", "id": "15302"}
{"code": "public synchronized StringBuffer append(char[] chars){\n  append0(chars);\n  return this;\n}\n", "nl": "Adds the character array to the end of this buffer.", "id": "12582"}
{"code": "private boolean isMimeTypeEqual(MimeType mtype){\n  if (this.mimeType == null) {\n    return (mtype == null);\n  }\n  return mimeType.match(mtype);\n}\n", "nl": "Compares the <code>mimeType</code> of two <code>DataFlavor</code> objects.  No parameters are considered.", "id": "14765"}
{"code": "protected DataSource createDataSourceInstance() throws SQLException {\n  final PoolingDataSource<PoolableConnection> pds=new PoolingDataSource<>(connectionPool);\n  pds.setAccessToUnderlyingConnectionAllowed(isAccessToUnderlyingConnectionAllowed());\n  return pds;\n}\n", "nl": "Creates the actual data source instance.  This method only exists so that subclasses can replace the implementation class.", "id": "48773"}
{"code": "public void releaseConnection(Connection ldapConnection){\n  ldapConnection.close();\n}\n", "nl": "Release an obtained Connection back to the pool.", "id": "50837"}
{"code": "protected static String normalizeEncoding(String enc){\n  String tmp=enc == null ? \"\" : enc.toLowerCase();\nswitch (tmp) {\ncase \"\":\ncase \"winansi\":\ncase \"winansiencoding\":\n    return PdfEncodings.WINANSI;\ncase \"macroman\":\ncase \"macromanencoding\":\n  return PdfEncodings.MACROMAN;\ncase \"zapfdingbatsencoding\":\nreturn PdfEncodings.ZAPFDINGBATS;\ndefault :\nreturn enc;\n}\n}\n", "nl": "Normalize the encoding names. \"winansi\" is changed to \"Cp1252\" and \"macroman\" is changed to \"MacRoman\".", "id": "25169"}
{"code": "private ExpandRoomComplete calculate_doors(ExpandRoom p_room){\n  SortedRoomsTop calculator=new SortedRoomsTop(this);\n  return calculator.calculate(p_room);\n}\n", "nl": "Calculates the neighbours of p_room and inserts doors to the new created neighbour rooms.  The shape of the result room may be different to the shape of p_room", "id": "51309"}
{"code": "public boolean isLogEnabled(){\n  if (logger == null) {\n    return false;\n  }\n else {\n    return logger.isLogEnabled();\n  }\n}\n", "nl": "Returns <code>true</code> if the logging is enabled.", "id": "24523"}
{"code": "public String toString(){\n  return getClass().getName() + \"[selectedCheckbox=\" + selectedCheckbox+ \"]\";\n}\n", "nl": "Returns a string representation of this check box group, including the value of its current selection.", "id": "6618"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(setNamedItemNS05.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "53839"}
{"code": "public void closeEntry() throws IOException {\n  ensureOpen();\n  while (read(tmpbuf,0,tmpbuf.length) != -1)   ;\n  entryEOF=true;\n}\n", "nl": "Closes the current ZIP entry and positions the stream for reading the next entry.", "id": "30326"}
{"code": "@Override public int border_line_index(PlaLineInt p_line){\n  for (int index=0; index < lines_size(); ++index) {\n    if (p_line.equals(tline_get(index))) {\n      return index;\n    }\n  }\n  return -1;\n}\n", "nl": "if p_line is a borderline of this simplex the number of that edge is returned, otherwise -1", "id": "42263"}
{"code": "public void addPeopleContainerRule(Guid guid,String filter) throws UMSException {\n  PCMappingTable mt=PCMappingTable.getPCMappingTable(this);\n  mt.addRule(guid,filter);\n}\n", "nl": "Adds rule for determining which People Container the user is supposed to be in.", "id": "27702"}
{"code": "public void clearAccessibleSelection(){\n  int childCount=getAccessibleChildrenCount();\n  for (int i=0; i < childCount; i++) {\n    removeAccessibleSelection(i);\n  }\n}\n", "nl": "Clears the selection in the object, so that nothing in the object is selected.", "id": "16733"}
{"code": "public static boolean expectResponseEntityBody(String requestMethod){\n  return !StringUtils.equals(requestMethod,HEAD);\n}\n", "nl": "Checks if response to this method could contain entity body. For example HEAD does not expect response with body", "id": "36076"}
{"code": "public static Tailer create(File file,TailerListener listener){\n  return create(file,listener,DEFAULT_DELAY_MILLIS,false);\n}\n", "nl": "Creates and starts a Tailer for the given file, starting at the beginning of the file with the default delay of 1.0s", "id": "3667"}
{"code": "public void addGraceLoginUseTime(final Date date){\n  setDateProperty(ADD_GRACE_LOGIN_USE_TIME,date);\n}\n", "nl": "Adds the provided grace login use time to this request.", "id": "58504"}
{"code": "public boolean isDefined(Object key){\n  Object[] a=attributes;\n  int n=a.length;\n  for (int i=0; i < n; i+=2) {\n    if (key.equals(a[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks whether a given attribute is defined.", "id": "19738"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodedocumentnodename.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "6843"}
{"code": "public static BooleanArgument quietArgument() throws ArgumentException {\n  return BooleanArgument.builder(OPTION_LONG_QUIET).shortIdentifier(OPTION_SHORT_QUIET).description(INFO_DESCRIPTION_QUIET.get()).buildArgument();\n}\n", "nl": "Returns the \"quiet\" boolean argument.", "id": "38725"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(createAttributeNS04.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "12322"}
{"code": "public void exec(List<String> args) throws Throwable {\n  exec(args.toArray(new String[args.size()]));\n}\n", "nl": "execute with given arguments", "id": "27728"}
{"code": "public void addLocalEjb(ContextLocalEjb localEjb){\n}\n", "nl": "Set the specified local EJBs in the naming context.", "id": "25484"}
{"code": "private int sieveSearch(int limit,int start){\n  if (start >= limit)   return -1;\n  int index=start;\n  do {\n    if (!get(index))     return index;\n    index++;\n  }\n while (index < limit - 1);\n  return -1;\n}\n", "nl": "This method returns the index of the first clear bit in the search array that occurs at or after start. It will not search past the specified limit. It returns -1 if there is no such clear bit.", "id": "17954"}
{"code": "public int hashCode(){\n  int hashcode=decimalAt;\n  for (int i=0; i < count; i++) {\n    hashcode=hashcode * 37 + digits[i];\n  }\n  return hashcode;\n}\n", "nl": "Generates the hash code for the digit list.", "id": "11065"}
{"code": "public boolean isADS(){\n  return isADS;\n}\n", "nl": "Returns whether this server is configured as an ADS or not.", "id": "13025"}
{"code": "private void dismissSaveRecordingDialog(){\n  FragmentTransaction ft=mFragmentManager.beginTransaction();\n  Fragment fragment=mFragmentManager.findFragmentByTag(TAG_SAVE_RECORDINGD);\n  if (null != fragment) {\n    ft.remove(fragment);\n    ft.commitAllowingStateLoss();\n  }\n}\n", "nl": "Dismiss save recording dialog", "id": "9608"}
{"code": "public void schedule(TimerTask task,long delay){\n  if (delay < 0)   throw new IllegalArgumentException(\"Negative delay.\");\n  sched(task,System.currentTimeMillis() + delay,0);\n}\n", "nl": "Schedules the specified task for execution after the specified delay.", "id": "6376"}
{"code": "public static void dropTable(SQLiteDatabase db,boolean ifExists){\n  String sql=\"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + \"\\\"GREEN_VIDEO\\\"\";\n  db.execSQL(sql);\n}\n", "nl": "Drops the underlying database table.", "id": "18436"}
{"code": "boolean defineChar2StringMapping(String outputString,char inputChar){\n  CharKey character=new CharKey(inputChar);\n  m_charToString.put(character,outputString);\n  set(inputChar);\n  boolean extraMapping=extraEntity(outputString,inputChar);\n  return extraMapping;\n}\n", "nl": "Call this method to register a char to String mapping, for example to map '<' to \"&lt;\".", "id": "19188"}
{"code": "private void advanceRunState(int targetState){\n  for (; ; ) {\n    int c=ctl.get();\n    if (runStateAtLeast(c,targetState) || ctl.compareAndSet(c,ctlOf(targetState,workerCountOf(c))))     break;\n  }\n}\n", "nl": "Transitions runState to given target, or leaves it alone if already at least the given target.", "id": "5819"}
{"code": "public boolean isFatal(){\n  return this.severity == Severity.FATAL;\n}\n", "nl": "Convenience method to determine if this problem is of Severity.FATAL severity", "id": "23160"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(elementgetattributens02.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "15603"}
{"code": "public boolean isDefaultNamespace(String namespaceURI){\n  return false;\n}\n", "nl": "DOM Level 3: This method checks if the specified <code>namespaceURI</code> is the default namespace or not.", "id": "21558"}
{"code": "public boolean contains_inside(PlaPointInt p_point){\n  return p_point.v_x > box_ll.v_x && p_point.v_x < box_ur.v_x && p_point.v_y > box_ll.v_y && p_point.v_y < box_ur.v_y;\n}\n", "nl": "Chechs, if p_point is located in the interiour of this box.", "id": "4163"}
{"code": "public DialogTerminatedEvent extractCollectedDialogTerminatedEvent(){\n  if (dialogTerminationCollector == null)   throw new TckInternalError(\"A dialog-terminated collect was attempted when the dialogTerminationCollector was null\");\n  DialogTerminatedEvent collectedEvent=this.dialogTerminationCollector.collectedEvent;\n  dialogTerminationCollector.provider.removeSipListener(dialogTerminationCollector);\n  resetCollectors();\n  return collectedEvent;\n}\n", "nl": "Returns the collected javax.sip.DialogTerminatedEvent or null if no event has been collected. After this method is called the SipEventCollector will remove itself from the corresponding javax.sip.SipProvider and reset its internal state so that it could be reused.", "id": "53677"}
{"code": "private void signalNotFull(){\n  final ReentrantLock putLock=this.putLock;\n  putLock.lock();\n  try {\n    notFull.signal();\n  }\n  finally {\n    putLock.unlock();\n  }\n}\n", "nl": "Signals a waiting put. Called only from take/poll.", "id": "18061"}
{"code": "public boolean useStartTLS(){\n  return useStartTLSArg.isPresent();\n}\n", "nl": "Indicate if the startTLS mode is required.", "id": "25027"}
{"code": "public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){\n  PictureInfoDao.createTable(db,ifNotExists);\n}\n", "nl": "Creates underlying database table using DAOs.", "id": "41406"}
{"code": "@Override public void closePool(final String username) throws SQLException {\n  try {\n    _pool.clear(new UserPassKey(username,null));\n  }\n catch (  final Exception ex) {\n    throw new SQLException(\"Error closing connection pool\",ex);\n  }\n}\n", "nl": "This implementation does not fully close the KeyedObjectPool, as this would affect all users.  Instead, it clears the pool associated with the given user.  This method is not currently used.", "id": "56089"}
{"code": "public boolean deleteOldRDN(){\n  return deleteOldRDN;\n}\n", "nl": "Get the new RDN for the requested modify DN operation.", "id": "56572"}
{"code": "@Override public boolean isNew(){\n  if (!isValidInternal())   throw new IllegalStateException(sm.getString(\"standardSession.isNew.ise\"));\n  return (this.isNew);\n}\n", "nl": "Return <code>true</code> if the client does not yet know about the session, or if the client chooses not to join the session.  For example, if the server used only cookie-based sessions, and the client has disabled the use of cookies, then a session would be new on each request.", "id": "42421"}
{"code": "@SuppressWarnings(\"unchecked\") public void writeByte(byte x) throws SQLException {\n  attribs.add(Byte.valueOf(x));\n}\n", "nl": "Writes a <code>byte</code> in the Java programming language to this <code>SQLOutputImpl</code> object. The driver converts it to an SQL <code>BIT</code> before returning it to the database.", "id": "29829"}
{"code": "protected void publishLogEvent(String type,JsonObject data){\n  JsonObject msg=new JsonObject().put(\"type\",type).put(\"message\",data);\n  vertx.eventBus().publish(LOG_EVENT_ADDRESS,msg);\n}\n", "nl": "A helper method that simply publish logs on the event bus.", "id": "56536"}
{"code": "public boolean isSecure(){\n  return true;\n}\n", "nl": "TLS Is a secure protocol.", "id": "3039"}
{"code": "public int processChannelData() throws IOException {\n  if (saveBufferReader.remaining() == 0) {\n    saveBuffer.clear();\n    saveBufferReader.rewind();\n  }\n  if (byteBuffer.remaining() > 0) {\n    saveBuffer.appendBytes(byteBuffer,byteBuffer.remaining());\n  }\n  byteBuffer.clear();\n  try {\n    return byteChannel.read(byteBuffer);\n  }\n  finally {\n    byteBuffer.flip();\n  }\n}\n", "nl": "Process any new data on the channel so they can be read as ASN.1 elements. This method should only be called when there are no more complete elements in the reader. Calling this method when there are complete elements still in the reader will result in unnecessary memory allocations to store any unread data. This method will perform the following operations: <ul> <li>Clear the save buffer if everything was read. <li>Append any unread data from the NIO byte buffer to the save buffer. <li>Clear the NIO byte buffer and read from the channel. </ul>", "id": "39006"}
{"code": "private NSObject parseDateString(){\n  String numericalString=parseString();\n  if (numericalString.length() > 4 && numericalString.charAt(4) == DATE_DATE_FIELD_DELIMITER) {\n    try {\n      return new NSDate(numericalString);\n    }\n catch (    Exception ex) {\n    }\n  }\n  return new NSString(numericalString);\n}\n", "nl": "Attempts to parse a plain string as a date if possible.", "id": "29184"}
{"code": "public Set searchAllRoles(String wildcard,Map avPairs,int level) throws AMException, SSOException {\n  int[] objectTypes={AMObject.ROLE,AMObject.FILTERED_ROLE};\n  return searchObjects(objectTypes,wildcard,avPairs,level);\n}\n", "nl": "Searches for all roles in this organization using wildcards and attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be specifed so that DNs of all roles with matching attribute-value pairs will be returned.", "id": "31685"}
{"code": "public void windowLostFocus(WindowEvent e){\n}\n", "nl": "Invoked when the Window is no longer the focused Window, which means that keyboard events will no longer be delivered to the Window or any of its subcomponents.", "id": "13031"}
{"code": "public static void registerSASLMechanismHandler(String name,SASLMechanismHandler<?> handler){\n  DirectoryServer.registerSASLMechanismHandler(name,handler);\n}\n", "nl": "Registers the provided SASL mechanism handler with the Directory Server.", "id": "43953"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(namespaceURI01.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "54567"}
{"code": "public static Date addMonths(Date date,int numOfMonths){\n  Calendar instance=Calendar.getInstance();\n  instance.setTime(date);\n  instance.add(Calendar.MONTH,numOfMonths);\n  return instance.getTime();\n}\n", "nl": "Adds the months.", "id": "24014"}
{"code": "private void writeEndMask(int mask) throws IOException {\n  if (mask != 0) {\n    if ((mask & BOLD) != 0) {\n      write(\"</b>\");\n    }\n    if ((mask & ITALIC) != 0) {\n      write(\"</i>\");\n    }\n    if ((mask & UNDERLINE) != 0) {\n      write(\"</u>\");\n    }\n  }\n}\n", "nl": "Writes out end tags for &lt;u&gt;, &lt;i&gt;, and &lt;b&gt; based on the mask settings.", "id": "28208"}
{"code": "public static String quote(String s){\n  if (s == null) {\n    s=\"\";\n  }\n  return \"\\\"\" + s + \"\\\"\";\n}\n", "nl": "Return a quoted string Surrounds a string on either side with double quote and returns the quoted string", "id": "37538"}
{"code": "@AfterClass public void enableLogging(){\n  TestCaseUtils.setDefaultLogLevel(Level.INFO);\n}\n", "nl": "Re-enable logging after the tests.", "id": "49598"}
{"code": "public void write(int c){\n  buf.append((char)c);\n}\n", "nl": "Write a single character.", "id": "43970"}
{"code": "@Override public void removePropertyChangeListener(PropertyChangeListener listener){\n  support.removePropertyChangeListener(listener);\n}\n", "nl": "Remove a property change listener from this component.", "id": "3977"}
{"code": "public void destroyFloat(){\n  hideFloat();\n  if (mFloatMenu != null) {\n    mFloatMenu.destroy();\n  }\n  mFloatMenu=null;\n}\n", "nl": "Destroy float.", "id": "2863"}
{"code": "protected void addTrace(final AbandonedTrace trace){\nsynchronized (this.traceList) {\n    this.traceList.add(new WeakReference<>(trace));\n  }\n  setLastUsed();\n}\n", "nl": "Add an object to the list of objects being traced.", "id": "26532"}
{"code": "public com.sun.identity.liberty.ws.meta.jaxb.StatusElement createStatusElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.meta.jaxb.impl.StatusElementImpl();\n}\n", "nl": "Create an instance of StatusElement", "id": "10159"}
{"code": "static MatchingRuleImpl relativeTimeGTOMatchingRule(){\n  return new RelativeTimeGreaterThanOrderingMatchingRuleImpl();\n}\n", "nl": "Creates a relative time greater than matching rule.", "id": "17292"}
{"code": "public void visitAttribute(Attribute attr){\n  if (fv != null) {\n    fv.visitAttribute(attr);\n  }\n}\n", "nl": "Visits a non standard attribute of the field.", "id": "5858"}
{"code": "protected boolean shouldUpdateStyleOnEvent(PropertyChangeEvent ev){\n  String eName=ev.getPropertyName();\n  if (\"name\" == eName || \"componentOrientation\" == eName) {\n    return true;\n  }\n  if (\"ancestor\" == eName && ev.getNewValue() != null) {\n    return shouldUpdateStyleOnAncestorChanged();\n  }\n  return false;\n}\n", "nl": "Returns whether or not the UIs should update their styles when a particular event occurs.", "id": "45139"}
{"code": "private boolean isShuttingDown(){\n  return stopRequested;\n}\n", "nl": "Queries whether the publisher is in shutdown mode.", "id": "19133"}
{"code": "public AuditEvent auditAccessAttempt(){\n  return accessEvent().forHttpServletRequest(request).timestamp(startTime).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(AM_ACCESS_ATTEMPT).component(component).toEvent();\n}\n", "nl": "Creates an audit event that captures details of an attempted HTTP call.", "id": "35491"}
{"code": "public static String transliterate(String self,String transformIdentifier){\n  return Transliterator.getInstance(transformIdentifier).transform(self);\n}\n", "nl": "Apply ICU transliteration", "id": "17191"}
{"code": "public String nextToken(String delim){\n  delimiters=delim;\n  delimsChanged=true;\n  setMaxDelimCodePoint();\n  return nextToken();\n}\n", "nl": "Returns the next token in this string tokenizer's string. First, the set of characters considered to be delimiters by this <tt>StringTokenizer</tt> object is changed to be the characters in the string <tt>delim</tt>. Then the next token in the string after the current position is returned. The current position is advanced beyond the recognized token.  The new delimiter set remains the default after this call.", "id": "26456"}
{"code": "public int versionBuildNumber(){\n  return Integer.valueOf(properties.getProperty(\"version.build\"));\n}\n", "nl": "Returns the build number for the Directory Server.", "id": "18714"}
{"code": "public void removeIndexSelectionListener(IndexSelectionListener listener){\n  backendIndexesPanel.removeIndexSelectionListener(listener);\n  backendVLVIndexesPanel.removeIndexSelectionListener(listener);\n}\n", "nl": "Removes an index selection listener.", "id": "28989"}
{"code": "@Override public int read(ByteBuffer dst) throws IOException {\n  return sc.read(dst);\n}\n", "nl": "Reads a sequence of bytes from this channel into the given buffer.", "id": "14624"}
{"code": "protected Class<?> findLoadedClass0(String name){\n  String path=binaryNameToPath(name,true);\n  ResourceEntry entry=resourceEntries.get(path);\n  if (entry != null) {\n    return entry.loadedClass;\n  }\n  return null;\n}\n", "nl": "Finds the class with the given name if it has previously been loaded and cached by this class loader, and return the Class object. If this class has not been cached, return <code>null</code>.", "id": "40995"}
{"code": "public boolean doesSignatureFieldExist(String name){\n  return getBlankSignatureNames().contains(name) || getSignatureNames().contains(name);\n}\n", "nl": "Checks whether a name exists as a signature field or not. It checks both signed fields and blank signatures.", "id": "57017"}
{"code": "private void recycleChildren(RecyclerView.Recycler recycler,int startIndex,int endIndex){\n  if (startIndex > endIndex) {\n    return;\n  }\n  for (int i=endIndex; i >= startIndex; i--) {\n    removeAndRecycleViewAt(i,recycler);\n  }\n}\n", "nl": "Recycle views from the endIndex to the startIndex.", "id": "7022"}
{"code": "public void removeTreeSelectionListener(TreeSelectionListener tsl){\n  listenerList.remove(TreeSelectionListener.class,tsl);\n  if (listenerList.getListenerCount(TreeSelectionListener.class) == 0 && selectionRedirector != null) {\n    selectionModel.removeTreeSelectionListener(selectionRedirector);\n    selectionRedirector=null;\n  }\n}\n", "nl": "Removes a <code>TreeSelection</code> listener.", "id": "35950"}
{"code": "protected RequestError parseError(InputStream response) throws IOException {\n  return parseJson(response,RequestError.class);\n}\n", "nl": "Parse error from response", "id": "23512"}
{"code": "public AttributeSet removeAttributes(AttributeSet old,AttributeSet attrs){\n  if (old != attrs) {\n    old=removeHTMLTags(old,attrs);\n  }\n  return super.removeAttributes(old,convertAttributeSet(attrs));\n}\n", "nl": "Removes a set of attributes. If any of the attributes is a StyleConstants attribute, the request will be converted to a CSS attribute prior to forwarding to the superclass behavior.", "id": "2050"}
{"code": "public void reset(){\n  m_refs.removeAllElements();\n}\n", "nl": "Reset the list for a fresh visitation and collection.", "id": "9420"}
{"code": "public void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {\n  doGet(request,response);\n}\n", "nl": "Overrides doPost method. It simply calls <code>doGet</code> method.", "id": "17124"}
{"code": "static <T>Promise<Void> allBlocking(final List<Promise<T>> promises){\n  return allBlocking(promises.toArray(new Promise[promises.size()]));\n}\n", "nl": "All promises must complete.", "id": "35224"}
{"code": "public String[] expiredKeys() throws IOException {\n  return keys();\n}\n", "nl": "Get only those keys of sessions, that are saved in the Store and are to be expired.", "id": "3267"}
{"code": "public static void rebuildSessionFactory(){\n  try {\n    configuration.configure(configFile);\n    sessionFactory=configuration.buildSessionFactory();\n  }\n catch (  Exception e) {\n    System.err.println(\"%%%% Error Creating SessionFactory %%%%\");\n    e.printStackTrace();\n  }\n}\n", "nl": "Rebuild hibernate session factory", "id": "26790"}
{"code": "public String toString(){\n  StringBuffer result=new StringBuffer();\n  result.append(crossFeedResolution);\n  result.append('x');\n  result.append(feedResolution);\n  result.append(\" dphi\");\n  return result.toString();\n}\n", "nl": "Returns a string version of this resolution attribute. The string takes the form <CODE>\"<I>C</I>x<I>F</I> dphi\"</CODE>, where <I>C</I> is the cross feed direction resolution and <I>F</I> is the feed direction resolution. The values are reported in the internal units of dphi.", "id": "19596"}
{"code": "@Override public void removeAll(){\n  for (  Foo foo : findAll()) {\n    remove(foo);\n  }\n}\n", "nl": "Removes all the foos from the database.", "id": "49381"}
{"code": "public void endDocument() throws SAXException {\n}\n", "nl": "Receive notification of the end of the document. <p>By default, do nothing.  Application writers may override this method in a subclass to take specific actions at the end of a document (such as finalising a tree or closing an output file).</p>", "id": "44593"}
{"code": "public static ByteString wrap(final byte[] bytes,final int offset,final int length){\n  checkArrayBounds(bytes,offset,length);\n  return new ByteString(bytes,offset,length);\n}\n", "nl": "Returns a byte string that wraps a subsequence of the provided byte array. <p> <b>NOTE:</b> this method takes ownership of the provided byte array and, therefore, the byte array MUST NOT be altered directly after this method returns.", "id": "31932"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.SignedEndorsingEncryptedSupportingTokensElement createSignedEndorsingEncryptedSupportingTokensElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SignedEndorsingEncryptedSupportingTokensElementImpl();\n}\n", "nl": "Create an instance of SignedEndorsingEncryptedSupportingTokensElement", "id": "30329"}
{"code": "public com.sun.identity.saml2.jaxb.assertion.SubjectElement createSubjectElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectElementImpl();\n}\n", "nl": "Create an instance of SubjectElement", "id": "23723"}
{"code": "private void addWrappers(ContextVersion contextVersion,Collection<WrapperMappingInfo> wrappers){\n  for (  WrapperMappingInfo wrapper : wrappers) {\n    addWrapper(contextVersion,wrapper.getMapping(),wrapper.getWrapper(),wrapper.isJspWildCard(),wrapper.isResourceOnly());\n  }\n}\n", "nl": "Adds wrappers to the given context.", "id": "28820"}
{"code": "public void clearBindings(){\n  if (mBindArgs != null) {\n    Arrays.fill(mBindArgs,null);\n  }\n}\n", "nl": "Clears all existing bindings. Unset bindings are treated as NULL.", "id": "9646"}
{"code": "private static void writeToConsole(LDIFEntryWriter writer,Entry entry) throws IOException {\n  writer.writeEntry(entry);\n  writer.flush();\n}\n", "nl": "Write the entry in LDIF form to System.out.", "id": "3040"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsfederation.TokenIssuerEndpointElement createTokenIssuerEndpointElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.TokenIssuerEndpointElementImpl();\n}\n", "nl": "Create an instance of TokenIssuerEndpointElement", "id": "32797"}
{"code": "public static <T>Set<T> singleton(T o){\n  return new SingletonSet<>(o);\n}\n", "nl": "Returns an immutable set containing only the specified object. The returned set is serializable.", "id": "49945"}
{"code": "private Key createLookupKey(Object key){\n  return new Key(key,null);\n}\n", "nl": "Creates Key instance to be used only to lookup values in the map. It is not registered with the ReferenceQueue.", "id": "13653"}
{"code": "public static Border createLoweredBevelBorder(){\n  return createSharedBevel(BevelBorder.LOWERED);\n}\n", "nl": "Creates a border with a lowered beveled edge, using brighter shades of the component's current background color for highlighting, and darker shading for shadows. (In a lowered border, shadows are on top and highlights are underneath.)", "id": "28220"}
{"code": "@Override public int hashCode(){\n  int yearValue=year;\n  int monthValue=month;\n  int dayValue=day;\n  return (yearValue & 0xFFFFF800) ^ ((yearValue << 11) + (monthValue << 6) + (dayValue));\n}\n", "nl": "A hash code for this date.", "id": "32936"}
{"code": "private static int hashIntArray(int[] oid){\n  int intHash=0;\n  for (int i=0; i < oid.length && i < 4; i++) {\n    intHash+=oid[i] << (8 * i);\n  }\n  return intHash & 0x7FFFFFFF;\n}\n", "nl": "Returns hash for array of integers.", "id": "37187"}
{"code": "public void prepend(NSString s){\n  prepend(s.getContent());\n}\n", "nl": "Prepends a string to this string.", "id": "25755"}
{"code": "public void write(char cbuf[],int off,int len) throws IOException {\n  out.write(cbuf,off,len);\n}\n", "nl": "Writes a portion of an array of characters.", "id": "56268"}
{"code": "public boolean isPeersNotFoundError(String logMsg){\n  return logMsg.contains(\"=\" + ReplicationMessages.ERR_NO_REACHABLE_PEER_IN_THE_DOMAIN.ordinal());\n}\n", "nl": "Tells whether the provided log message corresponds to a peers not found error during the initialization of a replica or not.", "id": "56692"}
{"code": "public static String readFile(File file) throws IOException {\n  return new String(readFileBytes(file));\n}\n", "nl": "Read the contents of a file and return it as a String.", "id": "14039"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireImplicitDerivedKeysElement createRequireImplicitDerivedKeysElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireImplicitDerivedKeysElementImpl();\n}\n", "nl": "Create an instance of RequireImplicitDerivedKeysElement", "id": "14159"}
{"code": "@Override public void writeValue(ASN1Writer writer) throws IOException {\n  writer.writeStartSequence(ASN1.UNIVERSAL_OCTET_STRING_TYPE);\n{\n    writer.writeStartSequence();\n    if (rawAttributes != null) {\n      for (      String attr : rawAttributes) {\n        writer.writeOctetString(attr);\n      }\n    }\n    writer.writeEndSequence();\n  }\n  writer.writeEndSequence();\n}\n", "nl": "Writes this control's value to an ASN.1 writer. The value (if any) must be written as an ASN1OctetString.", "id": "15282"}
{"code": "protected void installListeners(){\n  if ((propertyChangeListener=createPropertyChangeListener()) != null) {\n    splitPane.addPropertyChangeListener(propertyChangeListener);\n  }\n  if ((focusListener=createFocusListener()) != null) {\n    splitPane.addFocusListener(focusListener);\n  }\n}\n", "nl": "Installs the event listeners for the UI.", "id": "41379"}
{"code": "private SimpleFuzzerConfig parseSimpleFuzzerConfig(StartupCommand command){\n  JCommander jc=new JCommander();\n  SimpleFuzzerConfig simpleConfig=new SimpleFuzzerConfig();\n  jc.addCommand(SimpleFuzzerConfig.ATTACK_COMMAND,simpleConfig);\n  jc.parse(command.getFuzzerCommand().split(\" \"));\n  return simpleConfig;\n}\n", "nl": "Parses the simple fuzzer configuration, typically used from the main class.", "id": "32385"}
{"code": "public static <T>Set<T> unmodifiableSet(Set<? extends T> s){\n  return new UnmodifiableSet<>(s);\n}\n", "nl": "Returns an unmodifiable view of the specified set.  This method allows modules to provide users with \"read-only\" access to internal sets. Query operations on the returned set \"read through\" to the specified set, and attempts to modify the returned set, whether direct or via its iterator, result in an <tt>UnsupportedOperationException</tt>.<p> The returned set will be serializable if the specified set is serializable.", "id": "50300"}
{"code": "public static String separatorsToWindows(String path){\n  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {\n    return path;\n  }\n  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);\n}\n", "nl": "Converts all separators to the Windows separator of backslash.", "id": "50218"}
{"code": "public void removeLayoutComponent(Component comp){\n}\n", "nl": "Removes the specified component from the layout.", "id": "24016"}
{"code": "static boolean canBootstrap() throws ConfiguratorException {\n  String bsFile=getBootStrapFile();\n  return bsFile != null;\n}\n", "nl": "Determine if we can boot from one of <ul> <li>legacy bootstrap file</li> <li>boot.json</li> </ul>", "id": "19175"}
{"code": "public static AssertionRequestControl newControl(final boolean isCritical,final Filter filter){\n  return new AssertionRequestControl(isCritical,filter);\n}\n", "nl": "Creates a new assertion using the provided criticality and assertion filter.", "id": "55210"}
{"code": "public void dispose(){\n  graphics.dispose();\n  graphics=null;\n}\n", "nl": "Overrides <code>Graphics.dispose</code>.", "id": "21420"}
{"code": "public boolean isDecimalSeparatorAlwaysShown(){\n  return decimalSeparatorAlwaysShown;\n}\n", "nl": "Allows you to get the behavior of the decimal separator with integers. (The decimal separator will always appear with decimals.) <P>Example: Decimal ON: 12345 &rarr; 12345.; OFF: 12345 &rarr; 12345", "id": "13580"}
{"code": "private int doEndOfFile() throws EOFException {\n  eof=true;\n  if (throwEofException) {\n    throw new EOFException();\n  }\n  return -1;\n}\n", "nl": "Handle End of File.", "id": "2753"}
{"code": "public void read(String tokenId,ResultHandler<Token,?> handler) throws CoreTokenException {\n  Reject.ifNull(tokenId,handler);\n  try {\n    taskExecutor.execute(tokenId,taskFactory.read(tokenId,handler));\n  }\n catch (  DataLayerException e) {\n    throw new CoreTokenException(\"Error in data layer\",e);\n  }\n}\n", "nl": "The CTS Token to read from the persistent store. The provided ResultHandler will be notified when the read has been completed.", "id": "55418"}
{"code": "private void createTunnel() throws IOException, InterruptedException {\n  while (true) {\n    MockResponse connect=responseQueue.peek();\n    if (!processOneRequest(raw.getInputStream(),raw.getOutputStream(),raw)) {\n      throw new IllegalStateException(\"Tunnel without any CONNECT!\");\n    }\n    if (connect.getSocketPolicy() == SocketPolicy.UPGRADE_TO_SSL_AT_END) {\n      return;\n    }\n  }\n}\n", "nl": "Respond to CONNECT requests until a SWITCH_TO_SSL_AT_END response is dispatched.", "id": "47385"}
{"code": "public static <T>java.util.List<T> dynamicQuery(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){\n  return getService().dynamicQuery(dynamicQuery);\n}\n", "nl": "Performs a dynamic query on the database and returns the matching rows.", "id": "27994"}
{"code": "private static String matchablePath(String path){\n  if (path == null) {\n    return \"/\";\n  }\n else   if (path.endsWith(\"/\")) {\n    return path;\n  }\n else {\n    return path + \"/\";\n  }\n}\n", "nl": "Returns a non-null path ending in \"/\".", "id": "17502"}
{"code": "public boolean isUnicast(){\n  return unicast;\n}\n", "nl": "Normally event sources are multicast.  However there are some exceptions that are strictly unicast.", "id": "28058"}
{"code": "public boolean isOwnerReadable(){\n  return is(encodedPermission,OWNER_READABLE);\n}\n", "nl": "Indicates whether this file permission includes the owner read permission.", "id": "32044"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.AddressType createAddressType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AddressTypeImpl();\n}\n", "nl": "Create an instance of AddressType", "id": "24231"}
{"code": "private boolean containsValue(List list,String name){\n  for (Iterator iter=list.iterator(); iter.hasNext(); ) {\n    if (((String)iter.next()).trim().equalsIgnoreCase(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks if the name is contained in a list of values.", "id": "36322"}
{"code": "public void flushBuffer() throws IOException {\n  if (count > 0) {\n    m_os.write(m_outputBytes,0,count);\n    count=0;\n  }\n}\n", "nl": "Flush the internal buffer", "id": "48188"}
{"code": "public Query whereStartsWith(Contact.Field field,Object value){\n  addNewConstraint(field,Where.startsWith(field.getColumn(),value));\n  return this;\n}\n", "nl": "Add a constraint to the query for finding string values that start with the provided string.", "id": "363"}
{"code": "private Object checkCast(Object value,Class type) throws SAXException {\n  if (!type.isInstance(value)) {\n    throw new SAXException(\"Expected type \" + type + \" got \"+ value.getClass());\n  }\n  return value;\n}\n", "nl": "If <code>value</code> is an instance of <code>type</code> it is returned, otherwise a SAXException is thrown.", "id": "18993"}
{"code": "@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){\n  Log.i(TAG,\"Upgrading database from version \" + oldVersion + \" to \"+ newVersion+ \", which will destroy all old data\");\n  db.execSQL(\"DROP TABLE IF EXISTS \" + TABLE_NAME);\n  onCreate(db);\n}\n", "nl": "Upgrade database", "id": "20153"}
{"code": "@Override public int length(){\n  return 0;\n}\n", "nl": "Returns message length", "id": "12985"}
{"code": "public static FileChannel newFileChannel(Object stream,FileDescriptor fd,int mode){\n  return new FileChannelImpl(stream,fd,mode);\n}\n", "nl": "Helps bridge between io and nio.", "id": "13748"}
{"code": "public JSONObject toJSONObject() throws JSONException {\n  JSONObject jo=new JSONObject();\n  jo.put(\"propertyName\",propertyName);\n  jo.put(\"propertyValues\",propertyValues);\n  jo.put(\"pResponseProviderName\",pResponseProviderName);\n  return jo;\n}\n", "nl": "Returns JSONObject mapping of the object.", "id": "20966"}
{"code": "private String formatQuoteToJSON(OHLCquote quote){\n  String jsonData=null;\n  ObjectMapper mapper=new ObjectMapper();\n  try {\n    jsonData=mapper.writeValueAsString(quote);\n  }\n catch (  JsonProcessingException e) {\n    System.out.println(\"TimeRangeOHLCActionHandler.formatQuoteToJSON(): ERROR: JsonProcessingException on quote !!!\");\n    e.printStackTrace();\n  }\n  return jsonData;\n}\n", "nl": "formatQuoteToJSON - convert quote to JSON", "id": "15097"}
{"code": "public void message(String msg){\n  if (debugLevel > Debug.WARNING) {\n    message(msg,null);\n  }\n}\n", "nl": "Prints messages only when the debug state is either  DEBUG.MESSAGE or Debug.ON. <p><b>NOTE:</b> Debugging is an IO intensive operation and may hurt application performance when abused. Particularly, note that Java  evaluates arguments to <code>message()</code> even when  debugging is turned off. So when the argument to this method involves the String concatenation operator '+' or any other method invocation,  <code>messageEnabled</code> <b>MUST</b> be used. It is recommended that  the debug state be checked by invoking <code>messageEnabled()</code>  before invoking any <code>message()</code> methods to avoid unnecessary argument evaluation and maximize application performance.</p>", "id": "9155"}
{"code": "public void removeAttribute(Object key){\n  int n=keys.size();\n  for (int i=0; i < n; i++) {\n    if (keys.elementAt(i).equals(key)) {\n      keys.removeElementAt(i);\n      data.removeElementAt(i);\n      return;\n    }\n  }\n}\n", "nl": "Removes the given name from the set.", "id": "27981"}
{"code": "public void process(Vector notifications){\n  processPLLNotifications(notifications);\n}\n", "nl": "Processes PLL notifications", "id": "7381"}
{"code": "@NonNull public static Agera generate(@NonNull Receiver<Updatable> generator){\n  return new AgeraGenerate(generator);\n}\n", "nl": "For each updatable, the given receiver is called which then can call update() as it sees fit.", "id": "58251"}
{"code": "private Object[] filterArgs(Object[] args){\n  for (int i=0; i < args.length; ++i) {\n    args[i]=filterArgument(args[i]);\n  }\n  return args;\n}\n", "nl": "Copied from super-class as private.", "id": "14321"}
{"code": "public boolean usePasswordPolicyControl(){\n  return usePasswordPolicyControl;\n}\n", "nl": "Indicates whether to use the password policy control in the bind request.", "id": "8413"}
{"code": "public void write(int c){\n  try {\nsynchronized (lock) {\n      ensureOpen();\n      out.write(c);\n    }\n  }\n catch (  InterruptedIOException x) {\n    Thread.currentThread().interrupt();\n  }\ncatch (  IOException x) {\n    trouble=true;\n  }\n}\n", "nl": "Writes a single character.", "id": "23229"}
{"code": "private static String[] toSuffixes(String[] extensions){\n  String[] suffixes=new String[extensions.length];\n  for (int i=0; i < extensions.length; i++) {\n    suffixes[i]=\".\" + extensions[i];\n  }\n  return suffixes;\n}\n", "nl": "Converts an array of file extensions to suffixes for use with IOFileFilters.", "id": "21827"}
{"code": "public static <E>SortedSet<E> synchronizedSortedSet(SortedSet<E> set){\n  if (set == null) {\n    throw new NullPointerException(\"set == null\");\n  }\n  return new SynchronizedSortedSet<E>(set);\n}\n", "nl": "Returns a wrapper on the specified sorted set which synchronizes all access to the sorted set.", "id": "3875"}
{"code": "public synchronized void clearCache(){\n  sdkCache.clear();\n  initializeCache();\n}\n", "nl": "This method is used to clear the entire SDK cache in the event that EventService notifies that all entries have been modified (or should be marked dirty).", "id": "37885"}
{"code": "public boolean whetherTheMethodIsOverriddenByMethodsInTheList(SMethodDef method,List<SMethodDef> methodList) throws SyntaxException {\n  if (methodList == null)   return false;\n  if (method.modifiers().contains(SModifier.STATIC))   return false;\n  if (null != findMethodWithSameSignature(method,methodList,true))   return true;\n  return false;\n}\n", "nl": "check whether the method is overridden by list methods", "id": "4998"}
{"code": "private static void extractAndAddValue(final HttpServletRequest request,final Map<String,List<String>> paramsMap,final String parameterName){\n  String parameterValue=request.getParameter(parameterName);\n  insertValue(paramsMap,parameterValue,parameterName);\n}\n", "nl": "Extracts a value from the request and puts it in the map.", "id": "36040"}
{"code": "public boolean isFiltered(String requestUrl,boolean thirdParty){\n  return isFiltered(requestUrl,thirdParty,EnumSet.of(ContentType.detectContentType(requestUrl)));\n}\n", "nl": "Checks request url against this filter rule. Detects content type from the URL.", "id": "50517"}
{"code": "public boolean hasHybridXref(){\n  return hybridXref;\n}\n", "nl": "Some documents contain hybrid XRef, for more information see \"7.5.8.4 Compatibility with Applications That Do Not Support Compressed Reference Streams\" in PDF 32000-1:2008 spec.", "id": "3657"}
{"code": "public synchronized void stopPreview(){\n  if (autoFocusManager != null) {\n    autoFocusManager.stop();\n    autoFocusManager=null;\n  }\n  if (camera != null && previewing) {\n    camera.getCamera().stopPreview();\n    previewCallback.setHandler(null,0);\n    previewing=false;\n  }\n}\n", "nl": "Tells the camera to stop drawing preview frames.", "id": "48736"}
{"code": "public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){\n  logger.info(\"shootme: got an ACK! \");\n  logger.info(\"Dialog = \" + requestEvent.getDialog());\n  logger.info(\"Dialog State = \" + requestEvent.getDialog().getState());\n  this.ackSeen=true;\n}\n", "nl": "Process the ACK request. Send the bye and complete the call flow.", "id": "1232"}
{"code": "public void cache(String key,HyphenationTree hTree){\n  hyphenTrees.put(key,hTree);\n}\n", "nl": "Cache a hyphenation tree under its key.", "id": "7930"}
{"code": "private void createTunnel() throws IOException, InterruptedException {\n  while (true) {\n    final SocketPolicy socketPolicy=dispatcher.peekSocketPolicy();\n    if (!processOneRequest(raw,raw.getInputStream(),raw.getOutputStream())) {\n      throw new IllegalStateException(\"Tunnel without any CONNECT!\");\n    }\n    if (socketPolicy == SocketPolicy.UPGRADE_TO_SSL_AT_END) {\n      return;\n    }\n  }\n}\n", "nl": "Respond to CONNECT requests until a SWITCH_TO_SSL_AT_END response is dispatched.", "id": "33793"}
{"code": "public XMLString concat(String str){\n  return new XString(str().concat(str));\n}\n", "nl": "Concatenates the specified string to the end of this string.", "id": "55987"}
{"code": "private void readObject(ObjectInputStream s) throws InvalidObjectException {\n  throw new InvalidObjectException(\"Deserialization via serialization delegate\");\n}\n", "nl": "Defend against malicious streams.", "id": "7798"}
{"code": "public synchronized void removeHyperlinkListener(HyperlinkListener listener){\n  listenerList.remove(HyperlinkListener.class,listener);\n}\n", "nl": "Removes a hyperlink listener.", "id": "28527"}
{"code": "private void midPoint(PointF point,MotionEvent event){\n  float x=event.getX(0) + event.getX(1);\n  float y=event.getY(0) + event.getY(1);\n  point.set(x / 2,y / 2);\n}\n", "nl": "Calculate the scaleCenterPoint point of the first two fingers", "id": "42586"}
{"code": "public int size(){\n  expungeStaleEntries();\n  return reverseMap.size();\n}\n", "nl": "Returns the current number of cached entries that can decrease over time when keys/values are GC-ed.", "id": "2550"}
{"code": "public String toString(){\n  return toString(true,false);\n}\n", "nl": "Returns the String Representation of the <code>AttributeQuery</code>  object.", "id": "20025"}
{"code": "@Modified void modified(ComponentContext context) throws Exception {\n  configuration=getConfiguration(context);\n  updateScriptHandler(configuration);\n  logger.info(\"OpenIDM Policy Service component is updateScriptHandler.\");\n}\n", "nl": "Configuration updateScriptHandler handling Ensures the service stays registered even whilst configuration changes", "id": "16266"}
{"code": "private Long initialBucket(int size,int position){\n  Long decValue=0l;\n  if (position != 0) {\n    decValue=((bucketMax / size) * position) - 1;\n  }\n  return decValue;\n}\n", "nl": "Get a initial bucket.", "id": "39393"}
{"code": "public char next(){\n  if (pos < end - 1) {\n    pos++;\n    return text.charAt(pos);\n  }\n else {\n    pos=end;\n    return DONE;\n  }\n}\n", "nl": "Implements CharacterIterator.next() for String.", "id": "13459"}
{"code": "public boolean hasExperienceReward(){\n  return experienceReward;\n}\n", "nl": "Whether to reward experience for the trade.", "id": "156"}
{"code": "private static final int slashCount(String name){\n  int pos=-1;\n  int count=0;\n  while ((pos=name.indexOf('/',pos + 1)) != -1) {\n    count++;\n  }\n  return count;\n}\n", "nl": "Return the slash count in a given string.", "id": "25527"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodegetlocalname03.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "5835"}
{"code": "boolean checkIfChildObscuredBySibling(){\n  return true;\n}\n", "nl": "Returns true, which implies that before checking if a child should be painted it is first check that the child is not obscured by another sibling. This is only checked if <code>isOptimizedDrawingEnabled</code> returns false.", "id": "7127"}
{"code": "@Override public boolean isSortAscending(){\n  return sortAscending;\n}\n", "nl": "Returns whether the sort is ascending or descending.", "id": "28842"}
{"code": "public static void notifyImportBeginning(Backend<?> backend,LDIFImportConfig config){\n  for (  ImportTaskListener listener : directoryServer.importTaskListeners) {\n    try {\n      listener.processImportBegin(backend,config);\n    }\n catch (    Exception e) {\n      logger.traceException(e);\n    }\n  }\n}\n", "nl": "Notifies the registered LDIF import task listeners that the server will be beginning an import task with the provided information.", "id": "48124"}
{"code": "public byte[] encodePassword(IdType type,byte[][] binaryValues){\n  if (type.equals(IdType.USER)) {\n    if (binaryValues != null && binaryValues.length > 0) {\n      return binaryValues[0];\n    }\n  }\n  return null;\n}\n", "nl": "Encodes the password to use the \"correct\" character encoding for AD.", "id": "52591"}
{"code": "private boolean updatesObjectClass(List<Modification> modifications){\n  for (  Modification mod : modifications) {\n    if (mod.getAttribute().getAttributeDescription().getAttributeType().isObjectClass()) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Scan the list of provided modifications looking for any changes to the objectClass, which might change the entry to another kind of group, or even to a non-group.", "id": "47576"}
{"code": "public int lineno(){\n  return LINENO;\n}\n", "nl": "Return the current line number.", "id": "50547"}
{"code": "public static int name2type(String nm){\n  Integer i=entityTypes.get(nm);\n  return (i == null) ? CDATA : i.intValue();\n}\n", "nl": "Converts <code>nm</code> string to the corresponding entity type.  If the string does not have a corresponding entity type, returns the type corresponding to \"CDATA\". Valid entity types are: \"PUBLIC\", \"CDATA\", \"SDATA\", \"PI\", \"STARTTAG\", \"ENDTAG\", \"MS\", \"MD\", \"SYSTEM\".", "id": "37290"}
{"code": "@AfterClass public void afterClass() throws Exception {\n  InternalClientConnection conn=InternalClientConnection.getRootConnection();\n  DeleteOperation deleteOperation=conn.processDelete(DN.valueOf(\"cn=Privileged User,o=test\"));\n  assertEquals(deleteOperation.getResultCode(),ResultCode.SUCCESS);\n}\n", "nl": "Clean up the environment after performing the tests in this suite.", "id": "26567"}
{"code": "@Override public Object lookup(Name name) throws NamingException {\n  return lookup(name,true);\n}\n", "nl": "Retrieves the named object. If name is empty, returns a new instance of this context (which represents the same naming context as this context, but its environment may be modified independently and it may be accessed concurrently).", "id": "1099"}
{"code": "public boolean equals(Object o){\n  return map.equals(o);\n}\n", "nl": "Compares whether this map is equal to Object o.", "id": "34583"}
{"code": "public int size(){\n  return size;\n}\n", "nl": "Returns the number of RDN components in this DN.", "id": "40247"}
{"code": "@Override public boolean is_IntBox(){\n  for (int index=0; index < lines_size(); ++index) {\n    PlaLineInt curr_line=tline_get(index);\n    if (!curr_line.is_orthogonal())     return false;\n    if (!corner_is_bounded(index))     return false;\n  }\n  return true;\n}\n", "nl": "checks if this simplex can be converted into an IntBox", "id": "538"}
{"code": "public String retryBackoffMethodName(String key){\n  return privateMethodName(Name.from(\"get\").join(key).join(\"retry\").join(\"backoff\"));\n}\n", "nl": "The method name of the retry backoff for the given key", "id": "30829"}
{"code": "public static char[] asCharArray(byte[] bytes){\n  char[] chars=new char[bytes.length];\n  for (int i=0; i != chars.length; i++) {\n    chars[i]=(char)(bytes[i] & 0xff);\n  }\n  return chars;\n}\n", "nl": "Do a simple conversion of an array of 8 bit characters into a string.", "id": "47788"}
{"code": "public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  doGetPost(request,response);\n}\n", "nl": "Handles the HTTP GET request.", "id": "52144"}
{"code": "public Kue processBlocking(String type,int n,Handler<Job> handler){\n  if (n <= 0) {\n    throw new IllegalStateException(\"The process times must be positive\");\n  }\n  while (n-- > 0) {\n    processInternal(type,handler,true);\n  }\n  setupTimers();\n  return this;\n}\n", "nl": "Process a job that may be blocking.", "id": "15076"}
{"code": "public String toString(){\n  return getClass().getName();\n}\n", "nl": "Returns a string representation of this grid bag layout's values.", "id": "48919"}
{"code": "public boolean delete(){\n  return deleteStrategy.deleteQuietly(new File(path));\n}\n", "nl": "Deletes the file associated with this tracker instance.", "id": "6380"}
{"code": "public void remove(N nodeA,N nodeB) throws NullPointerException {\n  theNeighbors.get(nodeA).remove(nodeB);\n  theNeighbors.get(nodeB).remove(nodeA);\n}\n", "nl": "Remove the specified link. If link not in graph, nothing happens.", "id": "3616"}
{"code": "public Set<Map.Entry<Object,Object>> entrySet(){\n  return map.entrySet();\n}\n", "nl": "Returns a Collection view of the attribute name-value mappings contained in this Map.", "id": "51488"}
{"code": "public static int computeNumberOfThreads(int minimumValue,float cpuMultiplier){\n  Reject.ifTrue(cpuMultiplier < 0,\"Multiplier must be a positive number\");\n  return Math.max(minimumValue,(int)(Runtime.getRuntime().availableProcessors() * cpuMultiplier));\n}\n", "nl": "Computes the number of replay/worker/cleaner threads based on the number of cpus in the system. Allows for a multiplier to be specified and a minimum value to be returned if not enough processors are present in the system.", "id": "27"}
{"code": "public boolean beginChoiceDisplay(ChildDisplayEvent event){\n  return (curCallback != null) && (curCallback instanceof ChoiceCallback);\n}\n", "nl": "begins display of choice field element", "id": "2198"}
{"code": "public void remove(int index){\n  removeTabAt(index);\n}\n", "nl": "Removes the tab and component which corresponds to the specified index.", "id": "44504"}
{"code": "protected Stack<Throwable> unfoldExceptions(Throwable exception){\n  Stack<Throwable> throwables=new Stack<>();\n  Throwable current=exception;\n  while (current != null) {\n    throwables.push(current);\n    current=current.getCause();\n  }\n  return throwables;\n}\n", "nl": "Creates an Iterable to walk the exception from the bottom up (the last caused by going upwards to the root exception).", "id": "9367"}
{"code": "private Future<JsonObject> checkAvailableInventory(ShoppingCart cart){\n  Future<List<JsonObject>> allInventories=getInventoryEndpoint().compose(null);\n  return allInventories.map(null);\n}\n", "nl": "Check inventory for the current cart.", "id": "18043"}
{"code": "public ByteArrayBuilder appendCSNUTF8(CSN csn){\n  appendString(csn.toString());\n  return this;\n}\n", "nl": "Append a CSN to this ByteArrayBuilder by converting it to a String then encoding that string to a UTF-8 byte array.", "id": "56123"}
{"code": "public boolean canShutdown(DN baseDN){\n  return !replicaOfflineMsgs.contains(baseDN) || System.currentTimeMillis() - stopInstanceTimestamp.get() > 5000;\n}\n", "nl": "Whether a ReplicationServer ServerReader or ServerWriter can proceed with shutdown.", "id": "48653"}
{"code": "private void layoutChunk(RecyclerView.Recycler recycler,RecyclerView.State state,boolean isFillBottom){\n  layoutChunk(recycler,state,isFillBottom,false);\n}\n", "nl": "The layout process for each item.", "id": "41847"}
{"code": "public static boolean isJatoSessionRequestFromXUI(HttpServletRequest request){\n  return \"XUI\".equals(request.getParameter(\"requester\"));\n}\n", "nl": "Determines if request is from XUI to get a JATO page session.", "id": "12287"}
{"code": "static LDAPReader<ASN1BufferReader> createReader(DecodeOptions decodeOptions,int maxASN1ElementSize,MemoryManager<?> memoryManager){\n  ASN1BufferReader asn1Reader=new ASN1BufferReader(maxASN1ElementSize,memoryManager);\n  return LDAP.getReader(asn1Reader,decodeOptions);\n}\n", "nl": "Creates a new LDAP Reader with the provided maximum size of ASN1 element, options and memory manager.", "id": "27179"}
{"code": "public void preferenceChanged(View child,boolean width,boolean height){\n  host.revalidate();\n  host.repaint();\n}\n", "nl": "Specifies that a preference has changed. Child views can call this on the parent to indicate that the preference has changed.  The root view routes this to invalidate on the hosting component. <p> This can be called on a different thread from the event dispatching thread and is basically unsafe to propagate into the component.  To make this safe, the operation is transferred over to the event dispatching thread for completion.  It is a design goal that all view methods be safe to call without concern for concurrency, and this behavior helps make that true.", "id": "24321"}
{"code": "public long node(){\n  if (version() != 1) {\n    throw new UnsupportedOperationException(\"Not a time-based UUID\");\n  }\n  return leastSigBits & 0x0000FFFFFFFFFFFFL;\n}\n", "nl": "The node value associated with this UUID. <p> The 48 bit node value is constructed from the node field of this UUID.  This field is intended to hold the IEEE 802 address of the machine that generated this UUID to guarantee spatial uniqueness. <p> The node value is only meaningful in a time-based UUID, which has version type 1.  If this UUID is not a time-based UUID then this method throws UnsupportedOperationException.", "id": "12270"}
{"code": "public void paint(Graphics g,JComponent c){\n  if (progressBar.isIndeterminate()) {\n    paintIndeterminate(g,c);\n  }\n else {\n    paintDeterminate(g,c);\n  }\n}\n", "nl": "Delegates painting to one of two methods: paintDeterminate or paintIndeterminate.", "id": "33886"}
{"code": "public boolean hasAttributeNS(String namespaceURI,String localName){\n  return DTM.NULL != dtm.getAttributeNode(node,namespaceURI,localName);\n}\n", "nl": "Method hasAttributeNS", "id": "45795"}
{"code": "public Attr elementAt(int index){\n  return (Attr)_attrs.get(index);\n}\n", "nl": "Get the attribute at an index that starts from 0", "id": "3693"}
{"code": "public final boolean isVbr(){\n  return true;\n}\n", "nl": "Is this VBRIFrame detailing a varaible bit rate MPEG", "id": "13490"}
{"code": "private static boolean isCharacterInC0orC1Range(char ch){\n  if (ch == 0x09 || ch == 0x0A || ch == 0x0D)   return false;\n else   return (ch >= 0x7F && ch <= 0x9F) || (ch >= 0x01 && ch <= 0x1F);\n}\n", "nl": "This method checks if a given character is between C0 or C1 range of Control characters. This method is added to support Control Characters for XML 1.1 If a given character is TAB (0x09), LF (0x0A) or CR (0x0D), this method return false. Since they are whitespace characters, no special processing is needed.", "id": "43864"}
{"code": "public AssertionIDRef createAssertionIDRef(){\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ASSERTION_ID_REF);\n  if (obj == null) {\n    return new AssertionIDRefImpl();\n  }\n else {\n    return (AssertionIDRef)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>AssertionIDRef</code>.", "id": "17693"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodeclonetruecopytext.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "22846"}
{"code": "public String toString(){\n  StringBuilder sb=new StringBuilder();\n  Iterator iter=resourceResults.iterator();\n  while (iter.hasNext()) {\n    ResourceResult rr=(ResourceResult)iter.next();\n    sb.append(rr.toString());\n  }\n  return sb.toString();\n}\n", "nl": "Returns string representation of this object", "id": "40285"}
{"code": "@Override public boolean equals(Object obj){\n  if (this == obj) {\n    return true;\n  }\n  if (obj instanceof YearMonth) {\n    YearMonth other=(YearMonth)obj;\n    return year == other.year && month == other.month;\n  }\n  return false;\n}\n", "nl": "Checks if this year-month is equal to another year-month. <p> The comparison is based on the time-line position of the year-months.", "id": "8884"}
{"code": "public static String encode(final String value){\n  try {\n    return URLEncoder.encode(value,CHARSET_ISO_8859_1);\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new IllegalArgumentException(e);\n  }\n}\n", "nl": "URL-encode value using 'ISO-8859-1' character set", "id": "9979"}
{"code": "public boolean seek(int index){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"seek\",_opsClass);\n  DynStructOperations $self=(DynStructOperations)$so.servant;\n  try {\n    return $self.seek(index);\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Sets the current position to index. The current position is indexed 0 to n-1, that is, index zero corresponds to the first component. The operation returns true if the resulting current position indicates a component of the DynAny and false if index indicates a position that does not correspond to a component. Calling seek with a negative index is legal. It sets the current position to -1 to indicate no component and returns false. Passing a non-negative index value for a DynAny that does not have a component at the corresponding position sets the current position to -1 and returns false.", "id": "8345"}
{"code": "public static String toString(int i){\n  return IntegralToString.intToString(i);\n}\n", "nl": "Converts the specified integer into its decimal string representation. The returned string is a concatenation of a minus sign if the number is negative and characters from '0' to '9'.", "id": "37206"}
{"code": "public boolean hasChild(String childName){\n  return children.containsKey(childName);\n}\n", "nl": "Returns true if the given name is a child of this class.", "id": "35403"}
{"code": "public static long extendedDosToJavaTime(long xdostime){\n  long time=dosToJavaTime(xdostime);\n  return time + (xdostime >> 32);\n}\n", "nl": "Converts extended DOS time to Java time, where up to 1999 milliseconds might be encoded into the upper half of the returned long.", "id": "2401"}
{"code": "private void readVersion() throws IOException, ClassFormatException {\n  Utility.skipFully(dataInputStream,4);\n}\n", "nl": "Read major and minor version of compiler which created the file.", "id": "56467"}
{"code": "public com.sun.identity.liberty.ws.disco.jaxb.ResourceOfferingType createResourceOfferingType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.disco.jaxb.impl.ResourceOfferingTypeImpl();\n}\n", "nl": "Create an instance of ResourceOfferingType", "id": "31681"}
{"code": "public final void pushPredicateRoot(int n){\n  m_predicateRoots.push(n);\n}\n", "nl": "Set the current predicate root.", "id": "13773"}
{"code": "public void disableVertexAttribute(String name){\n  int location=fetchAttributeLocation(name);\n  if (location == -1)   return;\n  GLES20.glDisableVertexAttribArray(location);\n}\n", "nl": "Disables the vertex attribute with the given name", "id": "43171"}
{"code": "public Builder addFormDataPart(String name,String value){\n  return addPart(Part.createFormData(name,value));\n}\n", "nl": "Add a form data part to the body.", "id": "16040"}
{"code": "private void resumeLogging(){\n  try {\n    mLogcatViewerService.resume();\n  }\n catch (  RemoteException e) {\n    Log.e(LOG_TAG,\"Resuming logcat failed\");\n  }\n}\n", "nl": "Resume listening to logcat logs.", "id": "27137"}
{"code": "public static byte[] readFileToByteArray(File file) throws IOException {\n  InputStream in=null;\n  try {\n    in=openInputStream(file);\n    return IOUtils.toByteArray(in,file.length());\n  }\n  finally {\n    IOUtils.closeQuietly(in);\n  }\n}\n", "nl": "Reads the contents of a file into a byte array. The file is always closed.", "id": "24919"}
{"code": "@Override public boolean isGroupingUsed(){\n  return ndf.isGroupingUsed();\n}\n", "nl": "Indicates whether grouping will be used in this format.", "id": "25028"}
{"code": "private void registerReverseAggregationPropertyDefinition(AggregationPropertyDefinition<?,?> apd){\n  apd.getRelationDefinition().getChildDefinition().reverseAggregationPropertyDefinitions.add(apd);\n}\n", "nl": "Register a aggregation property definition in the referenced managed object definition's reverse lookup table.", "id": "13439"}
{"code": "public static void pickImage(Activity activity){\n  pickImage(activity,REQUEST_PICK);\n}\n", "nl": "Pick image from an Activity", "id": "42487"}
{"code": "protected ShapeTile offset_shape(Polyline p_polyline,int p_half_width,int p_no){\n  return p_polyline.offset_shape(p_half_width,p_no);\n}\n", "nl": "Used for creating the shapes of a polyline_trace for this tree. Overwritten in derived classes.", "id": "41165"}
{"code": "public static void logBindResponse(BindOperation bindOperation){\n  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {\n    publisher.logBindResponse(bindOperation);\n  }\n}\n", "nl": "Writes a message to the access logger with information about the bind response associated with the provided bind operation.", "id": "23868"}
{"code": "public Object clone(){\n  AuthenticatedSharedAgentsCondition theClone=null;\n  try {\n    theClone=(AuthenticatedSharedAgentsCondition)super.clone();\n    theClone.properties=Collections.unmodifiableMap(com.sun.identity.sm.SMSUtils.copyAttributes(properties));\n  }\n catch (  CloneNotSupportedException e) {\n    throw new InternalError();\n  }\n  return theClone;\n}\n", "nl": "Returns a copy of this object.", "id": "50146"}
{"code": "public int count(){\n  return vinfo_list.size();\n}\n", "nl": "Returns the number of different vias, which can be used for routing.", "id": "20279"}
{"code": "public void add(int index,E element){\n  insertElementAt(element,index);\n}\n", "nl": "Inserts the specified element at the specified position in this Vector. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).", "id": "13917"}
{"code": "public void handleButton2Request(RequestInvocationEvent event){\n  forwardTo();\n}\n", "nl": "Handles reset request.", "id": "56976"}
{"code": "protected void reportWrongNumberArgs() throws WrongNumberArgsException {\n  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage(\"three\",null));\n}\n", "nl": "Constructs and throws a WrongNumberArgException with the appropriate message for this function object.", "id": "40664"}
{"code": "private static boolean contains(String value,int start,int length,String criteria){\n  return contains(value,start,length,new String[]{criteria});\n}\n", "nl": "Shortcut method with 1 criteria", "id": "37342"}
{"code": "public org.omg.DynamicAny.DynAny copy(){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"copy\",_opsClass);\n  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;\n  try {\n    return $self.copy();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked. The operation is polymorphic, that is, invoking it on one of the types derived from DynAny, such as DynStruct, creates the derived type but returns its reference as the DynAny base type.", "id": "51494"}
{"code": "public boolean markSupported(){\n  return false;\n}\n", "nl": "Tests if this input stream supports the <code>mark</code> and <code>reset</code> methods, which it does not.", "id": "34089"}
{"code": "@Override public void closeOutbound(){\n  if (logger != null) {\n    logger.println(\"closeOutbound() \" + isOutboundDone);\n  }\n  if (isOutboundDone) {\n    return;\n  }\n  isOutboundDone=true;\n  if (handshake_started) {\n    alertProtocol.alert(AlertProtocol.WARNING,AlertProtocol.CLOSE_NOTIFY);\n    close_notify_was_sent=true;\n  }\n else {\n    shutdown();\n  }\n  engine_was_closed=true;\n}\n", "nl": "Closes outbound operations of this engine", "id": "11361"}
{"code": "public void jspError(Node n,String errCode,String... args) throws JasperException {\n  dispatch(n.getStart(),errCode,args,null);\n}\n", "nl": "Dispatches the given JSP parse error to the configured error handler. The given error code is localized. If it is not found in the resource bundle for localized error messages, it is used as the error message.", "id": "33262"}
{"code": "private PreparedStatement roles(Connection dbConnection,String username) throws SQLException {\n  PreparedStatement roles=dbConnection.prepareStatement(preparedRoles);\n  roles.setString(1,username);\n  return (roles);\n}\n", "nl": "Return a PreparedStatement configured to perform the SELECT required to retrieve user roles for the specified username.", "id": "22156"}
{"code": "LambdaForm uncustomize(){\n  if (customized == null) {\n    return this;\n  }\n  assert (transformCache != null);\n  LambdaForm uncustomizedForm=(LambdaForm)transformCache;\n  if (COMPILE_THRESHOLD > 0 && isCompiled) {\n    uncustomizedForm.compileToBytecode();\n  }\n  return uncustomizedForm;\n}\n", "nl": "Get uncustomized flavor of the LambdaForm", "id": "52537"}
{"code": "public static boolean isCoexistenceMode(){\n  isRealmEnabled();\n  return (coexistenceCache);\n}\n", "nl": "Returns the flag which lets IdRepo and SM know that we are running in the co-existence mode.", "id": "44065"}
{"code": "private void handleMessageInternal(@NotNull IUser user,String message) throws RpcException {\n  kernelComm.sendMessage(user,message);\n  kernelComm.performMarkAsRead(user,0);\n}\n", "nl": "Handle a message from an user", "id": "40152"}
{"code": "public void abort() throws IOException {\n  completeEdit(this,false);\n}\n", "nl": "Aborts this edit. This releases the edit lock so another edit may be started on the same key.", "id": "10377"}
{"code": "public static PublicKeySelector fromString(String type){\n  if (type != null) {\n    for (    PublicKeySelector keySelector : PublicKeySelector.values()) {\n      if (type.equalsIgnoreCase(keySelector.type)) {\n        return keySelector;\n      }\n    }\n  }\n  return null;\n}\n", "nl": "Translates a string into a token endpoint auth method type.", "id": "45949"}
{"code": "public void paintComboBoxBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n}\n", "nl": "Paints the border of a combo box.", "id": "7524"}
{"code": "public void rotate_deg(int p_component_no,int p_rotate_degree,PlaPointInt p_pole){\n  BrdComponent curr_component=get(p_component_no);\n  undo_list.save_for_undo(curr_component);\n  curr_component.rotate_deg(p_rotate_degree,p_pole,flip_style_rotate_first);\n}\n", "nl": "Rotates the component with number p_component_no by p_rotation_in_degree around p_pole.  Works contrary to Component.rotate with the undo algorithm of the board.", "id": "44762"}
{"code": "public boolean isLocked(){\n  return lockedDueToIdleInterval() || lockedDueToMaximumResetAge() || lockedDueToFailures();\n}\n", "nl": "Returns whether the account was locked for any reason.", "id": "11623"}
{"code": "@Override public void destroy(){\n}\n", "nl": "Finalize this servlet.", "id": "23310"}
{"code": "public static boolean matchSecret(String secret){\n  return false;\n}\n", "nl": "Indicates whether a secret originally comes from this class or not", "id": "25306"}
{"code": "public void flush() throws java.io.IOException {\n  m_os.flush();\n}\n", "nl": "Flush the stream.  If the stream has saved any characters from the various write() methods in a buffer, write them immediately to their intended destination.  Then, if that destination is another character or byte stream, flush it.  Thus one flush() invocation will flush all the buffers in a chain of Writers and OutputStreams.", "id": "42407"}
{"code": "public ScenarioBuilder master(){\n  try {\n    git.checkout().setName(\"master\").call();\n  }\n catch (  Exception ex) {\n    throw new IllegalStateException(\"cannot checkout master\",ex);\n  }\n  return this;\n}\n", "nl": "Reset the current repository to the master HEAD.", "id": "24774"}
{"code": "public boolean isEqual(AttributeSet attr){\n  return ((getAttributeCount() == attr.getAttributeCount()) && containsAttributes(attr));\n}\n", "nl": "Checks whether two attribute sets are equal.", "id": "50219"}
{"code": "static public void assertEquals(int expected,int actual){\n  assertEquals(null,expected,actual);\n}\n", "nl": "Asserts that two ints are equal.", "id": "56095"}
{"code": "public void registerClassHandler(ClassHandler handler){\n  classHandlers.add(handler);\n}\n", "nl": "Registers a threat handler.", "id": "49522"}
{"code": "public static String coerceValueIfNullOrEmpty(String s,String valueIfNullOrEmpty){\n  if (isNullOrEmpty(s)) {\n    return valueIfNullOrEmpty;\n  }\n  return s;\n}\n", "nl": "Use this when you want to normalize empty and null strings This way, Utility.areObjectsEqual can used for comparison, where a null string is to be treated the same as an empty string.", "id": "53346"}
{"code": "void appendEndDocument(){\n  done=true;\n}\n", "nl": "All appends to this document have finished; do whatever final cleanup is needed.", "id": "52740"}
{"code": "public void addPowerupEffect(double x,double y,int marioState){\n  root.getChildren().add(powerupEffectView);\n  powerupEffectView.setImage(powerupEffect[marioState]);\n  powerupEffectView.toFront();\n  powerupEffectView.setTranslateX(x);\n  powerupEffectView.setTranslateY(y);\n  powerupEffectView.setFitHeight(9.3 * REL_HEIGHT);\n}\n", "nl": "Generate the light effect when Mario takes powerup.", "id": "13174"}
{"code": "private static final boolean compareAndSetNext(Node node,Node expect,Node update){\n  return unsafe.compareAndSwapObject(node,nextOffset,expect,update);\n}\n", "nl": "CAS next field of a node.", "id": "45787"}
{"code": "public boolean isMethod(){\n  return testAllFlags(IS_METHOD);\n}\n", "nl": "Query whether this member is a method.", "id": "32056"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.LocalizedURIType createLocalizedURIType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.LocalizedURITypeImpl();\n}\n", "nl": "Create an instance of LocalizedURIType", "id": "18464"}
{"code": "public Enum asEnum(){\n  return this.resultCodeEnum;\n}\n", "nl": "Returns the enum equivalent for this result code.", "id": "14082"}
{"code": "@AfterClass public static void cleanupClass(){\n  try {\n    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());\n  }\n catch (  Exception ignore) {\n    System.err.println(\"cannot remove \" + scenario.getRepositoryLocation());\n  }\n}\n", "nl": "Cleanup the whole junit scenario ; deletes the created git repository.", "id": "34897"}
{"code": "public void accept(final ClassVisitor cv){\n  cv.visitInnerClass(name,outerName,innerName,access);\n}\n", "nl": "Makes the given class visitor visit this inner class.", "id": "36363"}
{"code": "private void turnOnWifi(){\n  WifiManager wifiManager=(WifiManager)getSystemService(Context.WIFI_SERVICE);\n  wifiManager.setWifiEnabled(true);\n  ResultProcessor.process(this,intent,ResultProcessor.RESULT_SUCCESS,getString(R.string.wifi_turned_on));\n}\n", "nl": "turn on the wifi.", "id": "28052"}
{"code": "public static int v(String tag,Object... msg){\n  return isPrint ? android.util.Log.v(tag,getLogMessage(msg)) : -1;\n}\n", "nl": "******************** Log with object list", "id": "23343"}
{"code": "public void characters(char ch[],int start,int length) throws SAXException {\n  if (DEBUG)   System.out.println(\"TransformerHandlerImpl#characters: \" + start + \", \"+ length);\n  if (m_contentHandler != null) {\n    m_contentHandler.characters(ch,start,length);\n  }\n}\n", "nl": "Filter a character data event.", "id": "2832"}
{"code": "public boolean isIdentity(){\n  return true;\n}\n", "nl": "Returns <code>true</code> is this subject is an identity object.", "id": "44693"}
{"code": "public char current(){\n  if (count != 0 && pos < offset + count) {\n    return array[pos];\n  }\n  return DONE;\n}\n", "nl": "Gets the character at the current position (as returned by getIndex()).", "id": "40527"}
{"code": "public void persistInternal(@NonNull final String module,@NonNull final String key,@Nullable final String value){\n  persist(module,key,null,value,true);\n}\n", "nl": "saves data internally, not accessible with public api", "id": "17923"}
{"code": "@Override public void doGet(HttpServletRequest req,HttpServletResponse res) throws IOException, ServletException {\n  if (debug > 0)   log(\"SSIServlet.doGet()\");\n  requestHandler(req,res);\n}\n", "nl": "Process and forward the GET request to our <code>requestHandler()</code>", "id": "57947"}
{"code": "public void curveFromTo(float x1,float y1,float x3,float y3){\n  if (currentPoint == null) {\n    throw new RuntimeException(START_PATH_ERR_MSG);\n  }\n  curveTo(x1,y1,x3,y3,x3,y3);\n}\n", "nl": "Appends a cubic Bezier curve to the current path. The curve shall extend from the current point to the point <CODE>(x3, y3)</CODE> with the note that the (x3, y3) point represents two control points.", "id": "11043"}
{"code": "boolean isRegisteredFont(String fontname){\n  return fontNames.containsKey(fontname.toLowerCase());\n}\n", "nl": "Checks if a certain font is registered.", "id": "54625"}
{"code": "public static File toFile(URL url){\n  if (url == null || !\"file\".equalsIgnoreCase(url.getProtocol())) {\n    return null;\n  }\n else {\n    String filename=url.getFile().replace('/',File.separatorChar);\n    filename=decodeUrl(filename);\n    return new File(filename);\n  }\n}\n", "nl": "Convert from a <code>URL</code> to a <code>File</code>. <p> From version 1.1 this method will decode the URL. Syntax such as <code>file:///my%20docs/file.txt</code> will be correctly decoded to <code>/my docs/file.txt</code>. Starting with version 1.5, this method uses UTF-8 to decode percent-encoded octets to characters. Additionally, malformed percent-encoded octets are handled leniently by passing them through literally.", "id": "19894"}
{"code": "public void removeListener(final FileAlterationListener listener){\n  if (listener != null) {\n    while (listeners.remove(listener)) {\n    }\n  }\n}\n", "nl": "Remove a file system listener.", "id": "40585"}
{"code": "@Override public void close(){\n  StaticUtils.close(reader,rejectWriter,skipWriter);\n}\n", "nl": "Closes any resources that this import config might have open.", "id": "34790"}
{"code": "private void checkRegisterForWrite(){\n  ob.checkRegisterForWrite();\n}\n", "nl": "Checks to see if there is data left in the Coyote output buffers (NOT the servlet output buffer) and if so registers the associated socket for write so the buffers will be emptied. The container will take care of this. As far as the app is concerned, there is a non-blocking write in progress. It doesn't have visibility of whether the data is buffered in the socket buffer or the Coyote buffers.", "id": "46050"}
{"code": "public void handleButton3Request(RequestInvocationEvent event){\n  backTrail();\n  unlockPageTrailForSwapping();\n  SCPolicyViewBean vb=(SCPolicyViewBean)getViewBean(SCPolicyViewBean.class);\n  passPgSessionMap(vb);\n  vb.forwardTo(getRequestContext());\n}\n", "nl": "Handles reset request.", "id": "39259"}
{"code": "protected void refreshPolicy(){\n  try {\n    Policy policy=Policy.getPolicy();\n    policy.refresh();\n  }\n catch (  AccessControlException e) {\n  }\n}\n", "nl": "Refresh the system policy file, to pick up eventual changes.", "id": "43391"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.TokenAssertionType createTokenAssertionType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.TokenAssertionTypeImpl();\n}\n", "nl": "Create an instance of TokenAssertionType", "id": "33556"}
{"code": "public Object encode(Object value) throws EncoderException {\n  if (value == null) {\n    return null;\n  }\n else   if (value instanceof String) {\n    return encode((String)value);\n  }\n else {\n    throw new EncoderException(\"Objects of type \" + value.getClass().getName() + \" cannot be encoded using BCodec\");\n  }\n}\n", "nl": "Encodes an object into its Base64 form using the default charset. Unsafe characters are escaped.", "id": "56642"}
{"code": "public void internalEntityDecl(String arg0,String arg1) throws SAXException {\n  if (m_firstTagNotEmitted) {\n    flush();\n  }\n  m_handler.internalEntityDecl(arg0,arg1);\n}\n", "nl": "Pass the call on to the underlying handler", "id": "47937"}
{"code": "private void buildArguments(StringBuilder sb,List<Expression> args,int indentation) throws SyntaxException {\n  boolean isFirst=true;\n  for (  Expression e : args) {\n    if (isFirst) {\n      isFirst=false;\n    }\n else {\n      sb.append(\", \");\n    }\n    buildExpression(sb,e,indentation);\n  }\n}\n", "nl": "build arguments", "id": "33017"}
{"code": "public static boolean isRequestSuccessful(int requestCode,String[] permissions,int[] grantResults){\n  boolean result=false;\n  if (requestCode == LOCATION_PERMISSIONS_REQUEST) {\n    if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n      result=true;\n    }\n  }\n  return result;\n}\n", "nl": "Use this method to check if the request was successful or not.", "id": "56125"}
{"code": "protected void unsubscribe(){\n  if (null != subscriber && !subscriber.isUnsubscribed()) {\n    subscriber.unsubscribe();\n  }\n  subscriber=null;\n}\n", "nl": "Unsubscribes the subscriber and set it to null", "id": "41135"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.assertion.ConfirmationMethodElement createConfirmationMethodElement(java.lang.String value) throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConfirmationMethodElementImpl(value);\n}\n", "nl": "Create an instance of ConfirmationMethodElement", "id": "13000"}
{"code": "private void parseGetSessionAttributes(Element elem){\n  if (elem == null) {\n    return;\n  }\n  String temp=elem.getAttribute(\"reset\");\n  if (temp != null) {\n    if (temp.equals(\"true\")) {\n      sessionRequest.setResetFlag(true);\n    }\n else {\n      sessionRequest.setResetFlag(false);\n    }\n  }\n}\n", "nl": "Parse GetSession attribute", "id": "17467"}
{"code": "CompositePrinterParser toPrinterParser(boolean optional){\n  return printerParser.withOptional(optional);\n}\n", "nl": "Returns the formatter as a composite printer parser.", "id": "46849"}
{"code": "private void verifyAbort(LoginModule... modules) throws LoginException {\n  for (  LoginModule module : modules) {\n    verify(module).abort();\n  }\n}\n", "nl": "Convenient method verifying invocation of the abort method against the passed modules.", "id": "16980"}
{"code": "@SuppressWarnings(\"unchecked\") @Override public PdfNull makeIndirect(PdfDocument document,PdfIndirectReference reference){\n  return (PdfNull)super.makeIndirect(document,reference);\n}\n", "nl": "Marks object to be saved as indirect.", "id": "9057"}
{"code": "private void writeSearch(SearchRequestProtocolOp searchRequest) throws IOException {\n  LDAPWriter writer=connection.getLDAPWriter();\n  LDAPMessage requestMessage=new LDAPMessage(nextMessageID.getAndIncrement(),searchRequest,new ArrayList<Control>());\n  writer.writeMessage(requestMessage);\n}\n", "nl": "Writes a search to the directory writer.", "id": "28186"}
{"code": "public void detach(){\n  if (m_allowDetach && null != m_iterators) {\n    int n=m_iterators.length;\n    for (int i=0; i < n; i++) {\n      m_iterators[i].detach();\n    }\n    m_iterators=null;\n  }\n}\n", "nl": "Detaches the iterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state. After<code>detach</code> has been invoked, calls to <code>nextNode</code> or<code>previousNode</code> will raise the exception INVALID_STATE_ERR.", "id": "329"}
{"code": "public void resetActionPath(){\n  application=null;\n  modelAction=null;\n  ruleAction=null;\n  ruleActionDataOld=null;\n}\n", "nl": "Reset all elements used for creating a new action.", "id": "32"}
{"code": "public boolean equals(Object other){\n  if (other instanceof CSeqHeader) {\n    final CSeqHeader o=(CSeqHeader)other;\n    return this.getSeqNumber() == o.getSeqNumber() && this.getMethod().equals(o.getMethod());\n  }\n  return false;\n}\n", "nl": "Compare two cseq headers for equality.", "id": "22243"}
{"code": "public void notifyDataSetChanged(){\n  mDataSetObservable.notifyChanged();\n}\n", "nl": "Notifies the attached observers that the underlying data has been changed and any View reflecting the data set should refresh itself.", "id": "12096"}
{"code": "public void visitEnd(){\n  if (av != null) {\n    av.visitEnd();\n  }\n}\n", "nl": "Visits the end of the annotation.", "id": "16039"}
{"code": "final void advance(){\n  if (next == null)   throw new NoSuchElementException();\n  lastReturned=next;\n  for (; ; ) {\n    next=next.next;\n    if (next == null)     break;\n    Object x=next.value;\n    if (x != null && x != next) {\n      nextValue=(V)x;\n      break;\n    }\n  }\n}\n", "nl": "Advances next to higher entry.", "id": "27690"}
{"code": "@Deprecated public void addLogAppender(org.apache.log4j.Appender appender){\n  if (this.logger instanceof gov.nist.core.LogWriter) {\n    ((gov.nist.core.LogWriter)this.logger).addAppender(appender);\n  }\n}\n", "nl": "Set the log appender ( this is useful if you want to specify a particular log format or log to something other than a file for example). This method is will be removed May 11, 2010 or shortly there after.", "id": "22707"}
{"code": "int[] toIntArray(){\n  int[] result=new int[intLen];\n  for (int i=0; i < intLen; i++)   result[i]=value[offset + i];\n  return result;\n}\n", "nl": "Convert this MutableBigInteger into an int array with no leading zeros, of a length that is equal to this MutableBigInteger's intLen.", "id": "17631"}
{"code": "public void stateChanged(ChangeEvent e){\n  JSpinner spinner=(JSpinner)(e.getSource());\n  getTextField().setValue(spinner.getValue());\n}\n", "nl": "This method is called when the spinner's model's state changes. It sets the <code>value</code> of the text field to the current value of the spinners model.", "id": "51847"}
{"code": "public void updateUiState(){\n  if (meetingJoined) {\n    this.joinMeetingButton.setText(R.string.leave_meeting);\n  }\n else {\n    this.joinMeetingButton.setText(R.string.join_meeting);\n  }\n}\n", "nl": "Update the UI state.", "id": "45773"}
{"code": "private void checkDestination(InetAddress destAddr,int dstPort){\n  if (dstPort < 0 || dstPort > 65535) {\n    throw new IllegalArgumentException(\"Port out of range: \" + dstPort);\n  }\n}\n", "nl": "Checks whether the connection destination satisfies the security policy and the validity of the port range.", "id": "58298"}
{"code": "public static void forceDeleteOnExit(File file) throws IOException {\n  if (file.isDirectory()) {\n    deleteDirectoryOnExit(file);\n  }\n else {\n    file.deleteOnExit();\n  }\n}\n", "nl": "Schedules a file to be deleted when JVM exits. If file is directory delete it and all sub-directories.", "id": "29827"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n}\n", "nl": "Ensures that the Directory Server is running.", "id": "33197"}
{"code": "public void resetSpamCheck(long currentWaitPeriod){\n  this.currentWaitPeriod=currentWaitPeriod;\n  this.lastSendTime=Time.currentTimeMillis();\n  spamStrike=0;\n}\n", "nl": "Sets the wait period to base the spamming detection from.", "id": "30036"}
{"code": "public static boolean isXML11InternalEntityContent(int c){\n  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_CONTENT_INTERNAL) != 0) || (0x10000 <= c && c <= 0x10FFFF);\n}\n", "nl": "Returns true if the specified character can be considered  content in an internal parsed entity.", "id": "32864"}
{"code": "public int size(){\n  return list.size();\n}\n", "nl": "Gets the size of this json array.", "id": "17797"}
{"code": "public ConversationFactory withTimeout(int timeoutSeconds){\n  return withConversationCanceller(new InactivityConversationCanceller(plugin,timeoutSeconds));\n}\n", "nl": "Sets the number of inactive seconds to wait before automatically abandoning all generated conversations. <p> The default is 600 seconds (5 minutes).", "id": "16199"}
{"code": "public static MatteBorder createMatteBorder(int top,int left,int bottom,int right,Color color){\n  return new MatteBorder(top,left,bottom,right,color);\n}\n", "nl": "Creates a matte-look border using a solid color. (The difference between this border and a line border is that you can specify the individual border dimensions.)", "id": "32436"}
{"code": "public boolean hasDescription(){\n  return (description != null);\n}\n", "nl": "Returns true if there is a description for this table.", "id": "58267"}
{"code": "public boolean supportsSAX(){\n  return true;\n}\n", "nl": "Returns true if the DOM implementation handled by this helper supports the SAX ContentHandler interface.", "id": "21296"}
{"code": "public synchronized void reload() throws ConfigException {\n  ensureInitialized();\n  loader=null;\n  jarFiles=new HashSet<>();\n  initialize0();\n}\n", "nl": "Reloads the configuration framework.", "id": "43177"}
{"code": "public static void write(BoardFrame p_board_frame,IteraBoard p_board_handling,java.io.OutputStream p_output_stream) throws IOException {\n  IndentFileWriter output_file=new IndentFileWriter(p_output_stream);\n  GuiConfigFile result=new GuiConfigFile(p_board_frame,p_board_handling,null,output_file);\n  result.write_defaults_scope();\n  output_file.close();\n}\n", "nl": "Writes the GUI setting of p_board_frame as default to p_output_stream", "id": "52270"}
{"code": "public static Column column(final String id,final String title,final int width,final int doublePrecision){\n  return new Column(id,title,Math.max(width,title.length()),doublePrecision);\n}\n", "nl": "Creates a new Column with the provided arguments.", "id": "38895"}
{"code": "public void destroyToken(SSOToken token) throws SSOException {\n  SSOTokenManager.getInstance().destroyToken(token);\n}\n", "nl": "Destroys a single sign on token.", "id": "53098"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_attrgetvalue1.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "40287"}
{"code": "public void invalidateLayout(Container target){\n}\n", "nl": "Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.", "id": "17281"}
{"code": "protected boolean removeSpecial(String name){\n  for (int i=0; i < specials.length; i++) {\n    if (specials[i].equals(name)) {\n      specialAttributes[i]=null;\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Remove a special attribute.", "id": "42551"}
{"code": "@Override protected void shutdownOutput() throws IOException {\n  try {\n    Libcore.os.shutdown(fd,SHUT_WR);\n  }\n catch (  ErrnoException errnoException) {\n    throw errnoException.rethrowAsSocketException();\n  }\n}\n", "nl": "Shutdown the output portion of the socket.", "id": "7594"}
{"code": "public void delete(Identifier identifier){\n  logger.debug(\"Deleting index: \" + identifier.toString());\n  indexesRepo.delete(identifier);\n}\n", "nl": "Deletes an index. Will also remove the associated iTables.", "id": "5089"}
{"code": "public void normalizeDocument(){\n}\n", "nl": "DOM Level 3 Normalize document.", "id": "19165"}
{"code": "public com.sun.identity.liberty.ws.meta.jaxb.StatusType createStatusType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.meta.jaxb.impl.StatusTypeImpl();\n}\n", "nl": "Create an instance of StatusType", "id": "11902"}
{"code": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"ObjectCreateRule[\");\n  sb.append(\"className=\");\n  sb.append(className);\n  sb.append(\", attributeName=\");\n  sb.append(attributeName);\n  sb.append(\"]\");\n  return (sb.toString());\n}\n", "nl": "Render a printable version of this Rule.", "id": "2504"}
{"code": "public StringBuilder encodeBody(StringBuilder retval){\n  retval.append(Integer.toString(expires));\n  if (!parameters.isEmpty()) {\n    retval.append(SEMICOLON);\n    parameters.encode(retval);\n  }\n  return retval;\n}\n", "nl": "Return canonical form.", "id": "12548"}
{"code": "public String member_name() throws org.omg.DynamicAny.DynAnyPackage.InvalidValue {\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"member_name\",_opsClass);\n  DynUnionOperations $self=(DynUnionOperations)$so.servant;\n  try {\n    return $self.member_name();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Returns the name of the currently active member. If the unions TypeCode does not contain a member name for the currently active member, the operation returns an empty string.", "id": "20638"}
{"code": "public static ClientType fromString(String type){\n  if (type != null) {\n    for (    ClientType clientType : ClientType.values()) {\n      if (type.equalsIgnoreCase(clientType.type)) {\n        return clientType;\n      }\n    }\n  }\n  return null;\n}\n", "nl": "Gets the client type from a String.", "id": "54653"}
{"code": "public boolean isInverted(){\n  return ((getData() & 0x8) != 0);\n}\n", "nl": "Test if step is inverted", "id": "17168"}
{"code": "private DN build(){\n  DN dn=DN.rootDN();\n  for (  RDN rdn : rdns) {\n    dn=dn.child(rdn);\n  }\n  return dn;\n}\n", "nl": "Create a new DN using the current state of this builder.", "id": "31442"}
{"code": "public void logBindRequest(BindOperation bindOperation){\n}\n", "nl": "Writes a message to the access logger with information about the bind request associated with the provided bind operation. <p> The default implementation is to not log anything.", "id": "25287"}
{"code": "protected String createNodeVersion(String nodeId) throws GroundException {\n  return this.factories.getNodeVersionFactory().create(new HashMap<>(),null,null,new HashMap<>(),nodeId,new ArrayList<>()).getId();\n}\n", "nl": "Because we don't have simple versions, we're masking the creation of RichVersions with NodeVersions. This is bad hack and should be removed once we can mock databases.", "id": "20785"}
{"code": "public static boolean isEncodableAsKanji(String text){\n  if (text == null)   throw new NullPointerException();\n  for (int i=0; i < text.length(); i++) {\n    if (UNICODE_TO_QR_KANJI[text.charAt(i)] == -1)     return false;\n  }\n  return true;\n}\n", "nl": "Tests whether the specified text string can be encoded as a segment in kanji mode. <p>Note that broadly speaking, the set of encodable characters are {kanji used in Japan, hiragana, katakana, Asian punctuation, full-width ASCII}.<br/> In particular, non-encodable characters are {normal ASCII, half-width katakana, more extensive Chinese hanzi}.", "id": "42662"}
{"code": "public static String buildDynamicKey(final Object[] paramNames,final Object[] paramValues){\n  return Arrays.toString(paramNames).concat(Arrays.toString(paramValues));\n}\n", "nl": "Builds the dynamic key.", "id": "32674"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.DeactivationCallCenterType createDeactivationCallCenterType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.DeactivationCallCenterTypeImpl();\n}\n", "nl": "Create an instance of DeactivationCallCenterType", "id": "49403"}
{"code": "private void popContentSource(){\n  buffer=nextContentSource.buffer;\n  position=nextContentSource.position;\n  limit=nextContentSource.limit;\n  nextContentSource=nextContentSource.next;\n}\n", "nl": "Replaces the current exhausted buffer with the next buffer in the chain.", "id": "34514"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsu.CreatedElement createCreatedElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsu.impl.CreatedElementImpl();\n}\n", "nl": "Create an instance of CreatedElement", "id": "36604"}
{"code": "public static CartEvent createClearEvent(String userId){\n  return new CartEvent(CartEventType.CLEAR_CART,userId,\"all\",0);\n}\n", "nl": "Helper method to create clear cart event for a user.", "id": "33770"}
{"code": "protected void paintIcon(Graphics g,AbstractButton b,Rectangle iconRect){\n  super.paintIcon(g,b,iconRect);\n}\n", "nl": "Paints the appropriate icon of the button <code>b</code> in the space <code>iconRect</code>.", "id": "35063"}
{"code": "public static int countByUuid_C(java.lang.String uuid,long companyId){\n  return getPersistence().countByUuid_C(uuid,companyId);\n}\n", "nl": "Returns the number of foos where uuid = &#63; and companyId = &#63;.", "id": "45657"}
{"code": "protected void sourceInUse(IRandomAccessSource source) throws java.io.IOException {\n}\n", "nl": "Called when a given source is about to become the active source.  This gives subclasses the abilty to retrieve resources, if appropriate.", "id": "11714"}
{"code": "public Object remove(String name){\n  return nameValuePairs.remove(name);\n}\n", "nl": "Removes the named mapping if it exists; does nothing otherwise.", "id": "22287"}
{"code": "public void paintRadioButtonMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n}\n", "nl": "Paints the border of a radio button menu item.", "id": "19887"}
{"code": "private ByteString normalizedSingleValue(){\n  if (normalizedValue == null) {\n    normalizedValue=normalizeValue(this,value);\n  }\n  return normalizedValue;\n}\n", "nl": "Lazily computes the normalized single value.", "id": "38066"}
{"code": "public int hashCode(){\n  if (this.affineX != null) {\n    return affineX.hashCode() * 31 + affineY.hashCode();\n  }\n  return 11;\n}\n", "nl": "Returns the hashcode of this elliptic curve point.", "id": "35938"}
{"code": "public synchronized void unregister(RegisteredListener listener){\n  if (handlerslots.get(listener.getPriority()).remove(listener)) {\n    handlers=null;\n  }\n}\n", "nl": "Remove a listener from a specific order slot", "id": "25454"}
{"code": "public Message resendRequest(String returnToURL,HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws InteractionRedirectException, InteractionException, SOAPBindingException, SOAPFaultException {\n  return resendRequest(returnToURL,httpRequest,httpResponse,null);\n}\n", "nl": "Resends a previously cached SOAP request message to <code>WSP</code>. This would be invoked at <code>WSC</code> side. Message ID for the cached message should be provided as value of <code>REQUEST_ID</code> query parameter in <code>httpRequest</code>.", "id": "2625"}
{"code": "public static byte[] digest(InputStream data,String hashAlgorithm,String provider) throws GeneralSecurityException, IOException {\n  MessageDigest messageDigest=getMessageDigest(hashAlgorithm,provider);\n  return digest(data,messageDigest);\n}\n", "nl": "Creates a hash using a specific digest algorithm and a provider.", "id": "8136"}
{"code": "public void readAttributes(ObjectInputStream in,MutableAttributeSet a) throws ClassNotFoundException, IOException {\n  readAttributeSet(in,a);\n}\n", "nl": "Context-specific handling of reading in attributes", "id": "3801"}
{"code": "public void putData(Map data){\n  if (isCommonData()) {\n    getGlobalData().putAll(data);\n  }\n else {\n    getInstanceData().putAll(data);\n  }\n}\n", "nl": "Method to merge existing data with data provided in the HashMap", "id": "14932"}
{"code": "protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, java.io.IOException {\n  processRequest(request,response);\n}\n", "nl": "Handles the HTTP <code>GET</code> method.", "id": "15695"}
{"code": "public static Foo findByUuid_Last(java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {\n  return getPersistence().findByUuid_Last(uuid,orderByComparator);\n}\n", "nl": "Returns the last foo in the ordered set where uuid = &#63;.", "id": "35292"}
{"code": "protected void tearDown(){\n}\n", "nl": "Tears down the fixture, for example, close a network connection. This method is called after a test is executed.", "id": "50306"}
{"code": "@DataProvider(name=\"invalidasciidata\") public Object[][] createInValidASCIIData(){\n  return new Object[][]{{'\\u200A'}};\n}\n", "nl": "Invalid Ascii char data provider.", "id": "6797"}
{"code": "public com.sun.identity.saml2.jaxb.assertion.AuthnContextDeclRefElement createAuthnContextDeclRefElement(java.lang.String value) throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextDeclRefElementImpl(value);\n}\n", "nl": "Create an instance of AuthnContextDeclRefElement", "id": "1434"}
{"code": "public boolean equals(Object o){\n  if (o instanceof SampleSubject) {\n    return (true);\n  }\n  return (false);\n}\n", "nl": "Indicates whether some other object is \"equal to\" this one.", "id": "12549"}
{"code": "public synchronized boolean isServiced(String name){\n  return (serviced.contains(name));\n}\n", "nl": "Is application serviced ?", "id": "8155"}
{"code": "void notifyProgress(final ProgressNotificationCallback callback) throws ClientException {\n  try {\n    handler.handle(new Callback[]{callback});\n  }\n catch (  final Exception e) {\n    throw new ClientException(ReturnCode.ERROR_UNEXPECTED,ERR_UPGRADE_DISPLAY_NOTIFICATION_ERROR.get(e.getMessage()));\n  }\n}\n", "nl": "Displays a progress callback.", "id": "25020"}
{"code": "public StateSelectedItem info_display(){\n  WindowObjectInfo.display(items_list,i_brd.get_panel().board_frame,i_brd.coordinate_transform,new Point(100,100));\n  return this;\n}\n", "nl": "Prints information about the selected item into a graphical text window.", "id": "44706"}
{"code": "public static String toString(final Reader reader){\n  try (final BufferedReader r=new BufferedReader(reader)){\n    return r.lines().collect(Collectors.joining(System.lineSeparator()));\n  }\n catch (  final IOException ex) {\n    throw new IllegalStateException(\"Failed converting Reader to String.\",ex);\n  }\n}\n", "nl": "Convert a Reader to a String.", "id": "25427"}
{"code": "@Override ObservedObject createObservedObject(ObjectName object){\n  final CounterMonitorObservedObject cmo=new CounterMonitorObservedObject(object);\n  cmo.setThreshold(initThreshold);\n  cmo.setModulusExceeded(false);\n  cmo.setEventAlreadyNotified(false);\n  cmo.setPreviousScanCounter(null);\n  return cmo;\n}\n", "nl": "Factory method for ObservedObject creation.", "id": "12651"}
{"code": "public boolean seek(ByteBuffer byteBuffer){\n  return false;\n}\n", "nl": "TODO implement", "id": "35865"}
{"code": "public synchronized void shutdown(){\n  for (  ClassLoaderLogInfo clLogInfo : classLoaderLoggers.values()) {\n    resetLoggers(clLogInfo);\n  }\n}\n", "nl": "Shuts down the logging system.", "id": "32725"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.DOBElement createDOBElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.DOBElementImpl();\n}\n", "nl": "Create an instance of DOBElement", "id": "22269"}
{"code": "public void addTableModelListener(TableModelListener l){\n  listenerList.add(TableModelListener.class,l);\n}\n", "nl": "Adds a listener to the list that's notified each time a change to the data model occurs.", "id": "17425"}
{"code": "public BindOperation processSASLBind(DN bindDN,String saslMechanism,ByteString saslCredentials,List<Control> controls){\n  BindOperationBasis bindOperation=new BindOperationBasis(this,nextOperationID(),nextMessageID(),controls,PROTOCOL_VERSION,bindDN,saslMechanism,saslCredentials);\n  bindOperation.setInternalOperation(true);\n  bindOperation.run();\n  return bindOperation;\n}\n", "nl": "Processes an internal bind operation with the provided information.  Note that regardless of whether the bind is successful, the authentication state for this internal connection will not be altered in any way.", "id": "46345"}
{"code": "public void visitMaxs(int maxStack,int maxLocals){\n  if (mv != null) {\n    mv.visitMaxs(maxStack,maxLocals);\n  }\n}\n", "nl": "Visits the maximum stack size and the maximum number of local variables of the method.", "id": "14415"}
{"code": "void pushImportSource(Source sourceFromURIResolver){\n  m_importSourceStack.push(sourceFromURIResolver);\n}\n", "nl": "Push the Source of an import href onto the stylesheet stack, obtained from a URIResolver, null if there is no URIResolver, or if that resolver returned null.", "id": "44741"}
{"code": "public void dragEnter(DragSourceDragEvent dsde){\n  ((DragSourceListener)a).dragEnter(dsde);\n  ((DragSourceListener)b).dragEnter(dsde);\n}\n", "nl": "Handles the <code>DragSourceDragEvent</code> by invoking <code>dragEnter</code> on listener-a and listener-b.", "id": "47205"}
{"code": "public com.sun.identity.saml2.jaxb.xmlenc.ReferenceListType createReferenceListType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlenc.impl.ReferenceListTypeImpl();\n}\n", "nl": "Create an instance of ReferenceListType", "id": "106"}
{"code": "public java.io.Serializable read_value(java.io.Serializable value){\n  throw new org.omg.CORBA.NO_IMPLEMENT();\n}\n", "nl": "Unmarshalls a value type from the input stream.", "id": "52472"}
{"code": "public void notifyObservers(IndexChangeEvent event){\n  for (  IndexChangeObserver observer : observers) {\n    observer.update(event);\n  }\n}\n", "nl": "Notify all registered observers of the index change event.", "id": "46118"}
{"code": "public void contentsChanged(ListDataEvent e){\n  firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));\n}\n", "nl": "List Data Listener contents changed method. Used to fire the visible data property change", "id": "30770"}
{"code": "public static Tailer create(File file,TailerListener listener,long delayMillis,boolean end,boolean reOpen){\n  return create(file,listener,delayMillis,end,reOpen,DEFAULT_BUFSIZE);\n}\n", "nl": "Creates and starts a Tailer for the given file with default buffer size.", "id": "16219"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ps.SubjectType createSubjectType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.SubjectTypeImpl();\n}\n", "nl": "Create an instance of SubjectType", "id": "57309"}
{"code": "public static <P>P decode(PropertyDefinition<P> pd,Object value){\n  String s=String.valueOf(value);\n  return pd.castValue(pd.accept(new ValueDecoder(),s));\n}\n", "nl": "Decodes the provided property LDAP value.", "id": "40396"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(elementsetattributenomodificationallowederrEE.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "24885"}
{"code": "public void doInitBody() throws JspException {\n}\n", "nl": "does nothing here", "id": "23247"}
{"code": "public void uninstallUI(JComponent a){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);\n  }\n}\n", "nl": "Invokes the <code>uninstallUI</code> method on each UI handled by this object.", "id": "49636"}
{"code": "public String basicTypeName(Field field){\n  String result=FIELD_TYPE_MAP.get(field.getKind());\n  if (result != null) {\n    if (result.contains(\".\")) {\n      return getTypeName(result);\n    }\n    return result;\n  }\n  throw new IllegalArgumentException(\"unknown type kind: \" + field.getKind());\n}\n", "nl": "Returns the Java representation of a basic-typed field's type. If the type is a Java primitive, basicTypeName returns it in unboxed form.", "id": "21559"}
{"code": "public void recalculate(int p_net_no,RoutingBoard p_board){\n  if (p_net_no >= 1 && p_net_no <= net_incompletes.length) {\n    Collection<BrdItem> item_list=p_board.get_connectable_items(p_net_no);\n    net_incompletes[p_net_no - 1]=new NetIncompletes(p_net_no,item_list,p_board,resources);\n  }\n}\n", "nl": "Recalculates the incomplete connections for the input net", "id": "47206"}
{"code": "public com.sun.identity.saml2.jaxb.assertion.AssertionType createAssertionType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.assertion.impl.AssertionTypeImpl();\n}\n", "nl": "Create an instance of AssertionType", "id": "45369"}
{"code": "public void jspError(Mark where,String errCode,String... args) throws JasperException {\n  dispatch(where,errCode,args,null);\n}\n", "nl": "Dispatches the given JSP parse error to the configured error handler. The given error code is localized. If it is not found in the resource bundle for localized error messages, it is used as the error message.", "id": "2568"}
{"code": "private boolean useCustomFilter(){\n  return controller.getFilter() != null && !BrowserController.ALL_OBJECTS_FILTER.equals(controller.getFilter());\n}\n", "nl": "Tells whether a custom filter is being used (specified by the user in the browser dialog) or not.", "id": "33631"}
{"code": "public static UIOutput createOutputText(final String el,final boolean b){\n  return null;\n}\n", "nl": "Creates a new JSFComponent object.", "id": "49708"}
{"code": "private void enableMapper() throws Exception {\n  String externalDN=\"cn=EXTERNAL,cn=SASL Mechanisms,cn=config\";\n  String mapperDN=\"cn=Subject Attribute to User Attribute,\" + \"cn=Certificate Mappers,cn=config\";\n  assertModifyReplaceIsSuccess(externalDN,\"ds-cfg-certificate-mapper\",mapperDN);\n}\n", "nl": "Alters the configuration of the SASL EXTERNAL mechanism handler so that it uses the Subject Attribute to User Attribute certificate mapper.", "id": "32734"}
{"code": "void printVersion(){\n  versionPresent=true;\n  usageOrVersionDisplayed=true;\n  versionHandler.printVersion();\n}\n", "nl": "Prints the version.", "id": "40024"}
{"code": "public boolean hasChildNodes(){\n  return numChildren > 0;\n}\n", "nl": "Returns <code>true</code> if this node has child nodes.", "id": "4065"}
{"code": "public void writeDeleteResult(final int messageID,final Result result) throws IOException {\n  logger.trace(\"ENCODE LDAP DELETE RESULT(messageID=%d, result=%s)\",messageID,result);\n  writeMessageHeader(messageID);\n{\n    writeResultHeader(LDAP.OP_TYPE_DELETE_RESPONSE,result);\n    writeResultFooter(writer);\n  }\n  writeMessageFooter(result.getControls());\n}\n", "nl": "Writes the provided delete result.", "id": "5508"}
{"code": "private JsonValue retrieveUpdatedObject(String resourceID,JsonValue value) throws JsonValueException, ResourceException {\n  return retrieveObject(resourceID,value.get(\"_id\").required().asString());\n}\n", "nl": "Fetches an updated copy of some specified object from the given resource", "id": "43447"}
{"code": "@Override public void close() throws IOException {\n  fInputStream.close();\n}\n", "nl": "Close the stream.  Once a stream has been closed, further read(), ready(), mark(), or reset() invocations will throw an IOException. Closing a previously-closed stream, however, has no effect.", "id": "143"}
{"code": "public boolean checkSizeAfterScaling(){\n  return this.checkSizeAfterScaling;\n}\n", "nl": "flag if check image size after resizing image.", "id": "37292"}
{"code": "boolean casValue(Object cmp,Object val){\n  return UNSAFE.compareAndSwapObject(this,valueOffset,cmp,val);\n}\n", "nl": "compareAndSet value field", "id": "50244"}
{"code": "public static ModifyDNRequest newModifyDNRequest(final String name,final String newName){\n  return Requests.newModifyDNRequest(name,newName).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));\n}\n", "nl": "Creates an LDAP modify DN request that will propagate the common audit transaction id if the target LDAP server supports it (i.e., is OpenDJ).", "id": "31828"}
{"code": "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {\n  s.defaultWriteObject();\n  for (  E e : this)   s.writeObject(e);\n  s.writeObject(null);\n}\n", "nl": "Saves this queue to a stream (that is, serializes it).", "id": "49771"}
{"code": "public boolean cancelTask(Task task){\n  for (  ThreadRunnable threadRunnable : runableMap.keySet()) {\n    if (threadRunnable.task == task) {\n      Future future=runableMap.remove(threadRunnable);\n      if (future != null) {\n        future.cancel(true);\n      }\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Cancel a single task", "id": "34075"}
{"code": "public void startElement(String namespaceURI,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {\n  if (m_tracer != null) {\n    super.fireStartElem(name);\n    this.firePseudoAttributes();\n  }\n  return;\n}\n", "nl": "Receive notification of the beginning of an element. <p>The Parser will invoke this method at the beginning of every element in the XML document; there will be a corresponding endElement() event for every startElement() event (even when the element is empty). All of the element's content will be reported, in order, before the corresponding endElement() event.</p> <p>If the element name has a namespace prefix, the prefix will still be attached.  Note that the attribute list provided will contain only attributes with explicit values (specified or defaulted): #IMPLIED attributes will be omitted.</p>", "id": "20747"}
{"code": "public void installKeyboardActions(JComponent c){\n  AbstractButton b=(AbstractButton)c;\n  updateMnemonicBinding(b);\n  LazyActionMap.installLazyActionMap(c,BasicButtonListener.class,\"Button.actionMap\");\n  InputMap km=getInputMap(JComponent.WHEN_FOCUSED,c);\n  SwingUtilities.replaceUIInputMap(c,JComponent.WHEN_FOCUSED,km);\n}\n", "nl": "Register default key actions: pressing space to \"click\" a button and registring the keyboard mnemonic (if any).", "id": "14426"}
{"code": "public void paintTextAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBorder(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the border of a text area.", "id": "31185"}
{"code": "@org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) @Override public void cancelAllOperationsExcept(CancelRequest cancelRequest,int messageID){\n}\n", "nl": "Attempts to cancel all operations in progress on this connection except the operation with the specified message ID.", "id": "23784"}
{"code": "public boolean isErrorEnabled(){\n  return (getLogger().isLoggable(Level.SEVERE));\n}\n", "nl": "Is error logging currently enabled?", "id": "24952"}
{"code": "public void notifyItemChanged(DATA item){\n  if (item != null) {\n    int index=itemList.indexOf(item);\n    notifyItemChanged(index);\n  }\n}\n", "nl": "NotifyItemChanged to DATA", "id": "38518"}
{"code": "void unassignPolicies(AMTemplate template,Set policyDNs,boolean toVerify) throws AMException, SSOException {\n  throw new UnsupportedOperationException();\n}\n", "nl": "Unassigns the given policies from this object.", "id": "45091"}
{"code": "public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {\n  if (contentHandler != null) {\n    contentHandler.startElement(uri,localName,qName,atts);\n  }\n}\n", "nl": "Filter a start element event.", "id": "49937"}
{"code": "public static void logModifyResponse(ModifyOperation modifyOperation){\n  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {\n    publisher.logModifyResponse(modifyOperation);\n  }\n}\n", "nl": "Writes a message to the access logger with information about the modify response associated with the provided modify operation.", "id": "40015"}
{"code": "public static List<Foo> findAll(){\n  return getPersistence().findAll();\n}\n", "nl": "Returns all the foos.", "id": "7075"}
{"code": "public static MouseListener remove(MouseListener l,MouseListener oldl){\n  return (MouseListener)removeInternal(l,oldl);\n}\n", "nl": "Removes the old mouse-listener from mouse-listener-l and returns the resulting multicast listener.", "id": "45867"}
{"code": "public com.sun.identity.liberty.ws.authnsvc.jaxb.PasswordTransformsType.TransformType.ParameterType createPasswordTransformsTypeTransformTypeParameterType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.PasswordTransformsTypeImpl.TransformTypeImpl.ParameterTypeImpl();\n}\n", "nl": "Create an instance of PasswordTransformsTypeTransformTypeParameterType", "id": "7182"}
{"code": "public boolean hasBOM() throws IOException {\n  return getBOM() != null;\n}\n", "nl": "Indicates whether the stream contains one of the specified BOMs.", "id": "12544"}
{"code": "public org.omg.CORBA.Object _set_policy_override(org.omg.CORBA.Policy[] policies,org.omg.CORBA.SetOverrideType set_add){\n  throw new org.omg.CORBA.NO_IMPLEMENT(reason);\n}\n", "nl": "Throws an <code>org.omg.CORBA.NO_IMPLEMENT</code> exception with the message \"This is a locally constrained object.\" This method does not apply to local objects and is therefore not implemented. This method is the default implementation of the <code>org.omg.CORBA.Object</code> method.", "id": "19749"}
{"code": "protected final void generateUnacceptableReason(Collection<LocalizableMessage> reasons,LocalizableMessageBuilder unacceptableReason){\n  boolean isFirst=true;\n  for (  LocalizableMessage reason : reasons) {\n    if (isFirst) {\n      isFirst=false;\n    }\n else {\n      unacceptableReason.append(\"  \");\n    }\n    unacceptableReason.append(reason);\n  }\n}\n", "nl": "Concatenate a list of messages into a single message.", "id": "51968"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_attrinsertbefore4.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "58324"}
{"code": "private List<Control> createCookieControl(String cookie) throws DirectoryException {\n  final MultiDomainServerState state=new MultiDomainServerState(cookie);\n  final Control cookieControl=new ExternalChangelogRequestControl(true,state);\n  return newArrayList(cookieControl);\n}\n", "nl": "Build a list of controls including the cookie provided.", "id": "20507"}
{"code": "private Action action(String name){\n  if (managed.contains(name)) {\n    return Action.MANAGE;\n  }\n else   if (suppressed.contains(name)) {\n    return Action.SUPPRESS;\n  }\n else   if (relayed.contains(name)) {\n    return Action.RELAY;\n  }\n else {\n    return defaultAction;\n  }\n}\n", "nl": "Computes what action to perform for the specified cookie name.", "id": "42941"}
{"code": "@TargetApi(19) public static boolean hasTranslucentStatusBar(@Nullable final Activity activity){\n  if (null == activity) {\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 19) {\n    return ((activity.getWindow().getAttributes().flags & LayoutParams.FLAG_TRANSLUCENT_STATUS) == LayoutParams.FLAG_TRANSLUCENT_STATUS);\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Returns if the current theme has the translucent status bar enabled", "id": "55670"}
{"code": "protected void resetDeltaRequest(Session session){\n  if (log.isDebugEnabled()) {\n    log.debug(sm.getString(\"ReplicationValve.resetDeltaRequest\",session.getManager().getContext().getName()));\n  }\n  ((DeltaSession)session).resetDeltaRequest();\n}\n", "nl": "Reset DeltaRequest from session", "id": "50058"}
{"code": "public Referral removeReferral(String referralName){\n  return (Referral)referrals.remove(referralName);\n}\n", "nl": "Removes the <code>Referral</code> object identified by the referral name. If a referral instance with the given name does not exist, the method will return silently.", "id": "45402"}
{"code": "@Override public void onMapReady(GoogleMap googleMap){\n  mMap=googleMap;\n  LatLng sydney=new LatLng(-34,151);\n  mMap.addMarker(new MarkerOptions().position(sydney).title(\"Marker in Sydney\"));\n  mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));\n}\n", "nl": "Manipulates the map once available. This callback is triggered when the map is ready to be used. This is where we can add markers or lines, add listeners or move the camera. In this case, we just add a marker near Sydney, Australia. If Google Play services is not installed on the device, the user will be prompted to install it inside the SupportMapFragment. This method will only be triggered once the user has installed Google Play services and returned to the app.", "id": "19623"}
{"code": "public boolean isWorking(){\n  return code == Code.WORKING;\n}\n", "nl": "Returns true if state is normal.", "id": "12568"}
{"code": "protected void initializeParser(){\n  argParser=new InstallDSArgumentParser(InstallDS.class.getName());\n  try {\n    argParser.initializeArguments();\n  }\n catch (  ArgumentException ae) {\n    LocalizableMessage message=ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage());\n    System.out.println(message);\n  }\n}\n", "nl": "Initialize the contents of the argument parser.", "id": "26536"}
{"code": "@Override public Promise<ResourceResponse,ResourceException> filterUpdate(Context context,UpdateRequest request,RequestHandler next){\n  CrestAuditor auditor=newAuditor(context,request);\n  auditor.auditAccessAttempt();\n  return auditResponse(next.handleUpdate(context,request),auditor,request);\n}\n", "nl": "Records an 'access' audit event before and after the filtered CREST resource receives an update request. If the 'before' audit event fails due to an error, the request is cancelled and an error response is returned. If the 'after' audit event fails due to an error, the request is not cancelled as it's affects may have already been applied.", "id": "49543"}
{"code": "public static boolean isNCName(int c){\n  return c < 0x10000 && (CHARS[c] & MASK_NCNAME) != 0;\n}\n", "nl": "Returns true if the specified character is a valid NCName character as defined by production [5] in Namespaces in XML recommendation.", "id": "15186"}
{"code": "public void copyFrom(OutputProperties opsrc) throws TransformerException {\n  copyFrom(opsrc.getProperties());\n}\n", "nl": "Copy the keys and values from the source to this object.  This will not copy the default values.  This is meant to be used by going from a higher precedence object to a lower precedence object, so that if a key already exists, this method will not reset it.", "id": "43232"}
{"code": "private Future<Long> zpop(String key){\n  Future<Long> future=Future.future();\n  client.transaction().multi(_failure()).zrange(key,0,0,_failure()).zremrangebyrank(key,0,0,_failure()).exec(null);\n  return future;\n}\n", "nl": "Redis zpop atomic primitive with transaction.", "id": "55045"}
{"code": "public void dropActionChanged(DragSourceDragEvent dsde){\n  DragSourceListener dsl=listener;\n  if (dsl != null) {\n    dsl.dropActionChanged(dsde);\n  }\n  getDragSource().processDropActionChanged(dsde);\n  updateCurrentCursor(getSourceActions(),dsde.getTargetActions(),CHANGED);\n}\n", "nl": "Calls <code>dropActionChanged</code> on the <code>DragSourceListener</code>s registered with this <code>DragSourceContext</code> and with the associated <code>DragSource</code>, and passes them the specified <code>DragSourceDragEvent</code>.", "id": "51940"}
{"code": "public boolean checkboxUI(String opt){\n  return isUnaryOption(opt) || checkboxUI.contains(opt);\n}\n", "nl": "Returns <code>true</code> if option is to be displayed as checkbox in web based CLI.", "id": "4403"}
{"code": "private boolean authenticate(byte method,InputStream in,BufferedOutputStream out) throws IOException {\n  return authenticate(method,in,out,0L);\n}\n", "nl": "Provides the authentication machanism required by the proxy.", "id": "22328"}
{"code": "private static void debugPrintln(String msg){\n  if (DEBUG) {\n    System.err.println(\"JAXP: \" + msg);\n  }\n}\n", "nl": "Prints a message to standard error if debugging is enabled.", "id": "16776"}
{"code": "public void removeLayoutComponent(Component component){\n  for (int counter=0; counter < 3; counter++) {\n    if (components[counter] == component) {\n      components[counter]=null;\n      sizes[counter]=0;\n      doReset=true;\n    }\n  }\n}\n", "nl": "Removes the specified component from our knowledge.", "id": "48029"}
{"code": "public void resetBuffer(){\n  if (response != null) {\n    this.response.resetBuffer();\n  }\n}\n", "nl": "The default behavior of this method is to call resetBuffer() on the wrapped response object. Not serialized.", "id": "19369"}
{"code": "public String toString(){\n  return principal;\n}\n", "nl": "Returns the string representation of this object", "id": "13755"}
{"code": "public static String removeInvalidXMLChars(String text){\n  if (text == null || text.isEmpty()) {\n    return text;\n  }\n  return text.replaceAll(INVALID_XML_CHARACTERS,\"\");\n}\n", "nl": "Remove invalid XML characters from a string.", "id": "43349"}
{"code": "public String toString(){\n  return \"color=\" + getColor() + \",media=\"+ getMedia()+ \",orientation-requested=\"+ getOrientationRequested()+ \",origin=\"+ getOrigin()+ \",print-quality=\"+ getPrintQuality()+ \",printer-resolution=[\"+ printerResolution[0]+ \",\"+ printerResolution[1]+ \",\"+ printerResolution[2]+ \"]\";\n}\n", "nl": "Returns a string representation of this PageAttributes.", "id": "45107"}
{"code": "public void revalidate(){\n}\n", "nl": "Overridden for performance reasons. See the <a href=\"#override\">Implementation Note</a> for more information.", "id": "57950"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.LElement createLElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LElementImpl();\n}\n", "nl": "Create an instance of LElement", "id": "20983"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_namednodemapnumberofnodes.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "1880"}
{"code": "public void addPort(QName portName,String bindingId,String endpointAddress){\n  delegate.addPort(portName,bindingId,endpointAddress);\n}\n", "nl": "Creates a new port for the service. Ports created in this way contain no WSDL port type information and can only be used for creating <code>Dispatch</code>instances.", "id": "4608"}
{"code": "public void allow(){\n  result=Result.ALLOWED;\n  message=\"\";\n}\n", "nl": "Allows the player to log in", "id": "27476"}
{"code": "protected static void assertion(boolean b,String msg){\n  if (!b) {\n    throw new RuntimeException(XSLMessages.createMessage(XSLTErrorResources.ER_ASSERT_REDUNDENT_EXPR_ELIMINATOR,new Object[]{msg}));\n  }\n}\n", "nl": "Simple assertion.", "id": "27882"}
{"code": "public static byte[] encryptText(byte[] password,String text){\n  byte[] data=getUTF8Bytes(text);\n  return encryptData(password,data.length,data);\n}\n", "nl": "Encrypt text", "id": "762"}
{"code": "public synchronized void deleteObserver(Observer observer){\n  observers.remove(observer);\n}\n", "nl": "Removes the specified observer from the list of observers. Passing null won't do anything.", "id": "54481"}
{"code": "public com.sun.identity.saml2.jaxb.xmlenc.ReferenceType createReferenceType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlenc.impl.ReferenceTypeImpl();\n}\n", "nl": "Create an instance of ReferenceType", "id": "6588"}
{"code": "public boolean validate_connection(){\n  throw new org.omg.CORBA.NO_IMPLEMENT(reason);\n}\n", "nl": "Throws an <code>org.omg.CORBA.NO_IMPLEMENT</code> exception with the message \"This is a locally constrained object.\" This method does not apply to local objects and is therefore not implemented. This method is the default implementation of the <code>org.omg.CORBA.Object</code> method.<P>", "id": "40784"}
{"code": "private static boolean skipRightsHasRights(int rights){\n  int tmpRights=rights & ~ACI_SKIP_PROXY_CHECK;\n  return (skipRights & tmpRights) == tmpRights;\n}\n", "nl": "Try and match a one or more of the specified rights in the skiprights mask.", "id": "15009"}
{"code": "public void rebuildIndex(RebuildIndexParameters parameters) throws EmbeddedDirectoryServerException {\n  checkServerIsNotRunning();\n  int returnCode=RebuildIndex.mainRebuildIndex(parameters.toCommandLineArguments(configParams.getConfigurationFile()),!isRunning(),outStream,errStream);\n  if (returnCode != 0) {\n    throw new EmbeddedDirectoryServerException(ERR_EMBEDDED_SERVER_REBUILD_INDEX.get(configParams.getServerRootDirectory(),returnCode));\n  }\n}\n", "nl": "Rebuilds all the indexes of this server. <p> This operation is done offline, hence the server must be stopped when calling this method.", "id": "24085"}
{"code": "public void removeEntry(SSOToken token,String entryDN,int objectType,boolean recursive,boolean softDelete) throws AMException, SSOException {\n  super.removeEntry(token,entryDN,objectType,recursive,softDelete);\n  removeFromCache(entryDN);\n}\n", "nl": "Remove an entry from the directory.", "id": "8923"}
{"code": "public Event35.Builder clearPlayerCount(){\n  playerCount=null;\n  fieldSetFlags()[0]=false;\n  return this;\n}\n", "nl": "Clears the value of the 'playerCount' field", "id": "33320"}
{"code": "public org.omg.CORBA.TypeCode type(){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"type\",_opsClass);\n  DynValueOperations $self=(DynValueOperations)$so.servant;\n  try {\n    return $self.type();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Returns the TypeCode associated with this DynAny object. A DynAny object is created with a TypeCode value assigned to it. This TypeCode value determines the type of the value handled through the DynAny object. Note that the TypeCode associated with a DynAny object is initialized at the time the DynAny is created and cannot be changed during lifetime of the DynAny object.", "id": "17660"}
{"code": "public static String showInternalInputDialog(Component parentComponent,Object message,String title,int messageType){\n  return (String)showInternalInputDialog(parentComponent,message,title,messageType,null,null,null);\n}\n", "nl": "Shows an internal dialog requesting input from the user parented to <code>parentComponent</code> with the dialog having the title <code>title</code> and message type <code>messageType</code>.", "id": "45314"}
{"code": "@Override protected StringBuilder encodeBody(StringBuilder encoding){\n  if (languageRange != null) {\n    encoding.append(languageRange);\n  }\n  if (!parameters.isEmpty()) {\n    encoding.append(SEMICOLON).append(parameters.encode());\n  }\n  return encoding;\n}\n", "nl": "Encode the value of this header to a string.", "id": "41186"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n  TestCaseUtils.initializeTestBackend(true);\n}\n", "nl": "Ensures that the Directory Server is running before executing the testcases.", "id": "20827"}
{"code": "private void resetGenId(ReplicationBroker rb,long newGenId){\n  ResetGenerationIdMsg resetMsg=new ResetGenerationIdMsg(newGenId);\n  rb.publish(resetMsg);\n}\n", "nl": "Sends a reset genid message through the given replication broker, with the given new generation id.", "id": "27938"}
{"code": "public void removePropertyChangeListener(PropertyChangeListener listener){\n  support.removePropertyChangeListener(listener);\n}\n", "nl": "Remove a property change listener from this component.", "id": "31635"}
{"code": "public View breakView(int axis,float len,Shape a){\n  if (axis == View.Y_AXIS) {\n    if (a != null) {\n      Rectangle alloc=a.getBounds();\n      setSize(alloc.width,alloc.height);\n    }\n    return this;\n  }\n  return this;\n}\n", "nl": "Breaks this view on the given axis at the given length. <p> <code>ParagraphView</code> instances are breakable along the <code>Y_AXIS</code> only, and only if <code>len</code> is after the first line.", "id": "24325"}
{"code": "public static void createPolicies(PolicyManager pm,InputStream xmlPolicies) throws PolicyException, SSOException {\n  createOrReplacePolicies(pm,xmlPolicies,false);\n}\n", "nl": "Creates policy objects given an input stream of policy XML which confines to <code>com/sun/identity/policy/policyAdmin.dtd</code>.", "id": "51921"}
{"code": "public boolean startsWith(String prefix,int toffset){\n  return m_str.startsWith(prefix,toffset);\n}\n", "nl": "Tests if this string starts with the specified prefix beginning a specified index.", "id": "31092"}
{"code": "public static void notifyRestoreEnded(Backend<?> backend,RestoreConfig config,boolean successful){\n  for (  RestoreTaskListener listener : directoryServer.restoreTaskListeners) {\n    try {\n      listener.processRestoreEnd(backend,config,successful);\n    }\n catch (    Exception e) {\n      logger.traceException(e);\n    }\n  }\n}\n", "nl": "Notifies the registered restore task listeners that the server has completed processing on a restore task with the provided information.", "id": "22820"}
{"code": "@Override public boolean isField2(){\n  return _foo.isField2();\n}\n", "nl": "Returns <code>true</code> if this foo is field2.", "id": "1613"}
{"code": "@Override public boolean containsKey(Object key){\n  return parent.containsKey(key);\n}\n", "nl": "Determines whether <tt>key</tt> is already present here. .", "id": "45165"}
{"code": "public boolean endsWith(Name n){\n  if (n instanceof CompoundName) {\n    return (impl.endsWith(n.size(),n.getAll()));\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Determines whether a compound name is a suffix of this compound name. A compound name 'n' is a suffix if it it is equal to getSuffix(size()-n.size())--in other words, this compound name ends with 'n'. If n is null or not a compound name, false is returned. <p> Implementation note: Currently the syntax properties of n are not used when doing the comparison. They might be in the future.", "id": "1547"}
{"code": "public Set registerServices(InputStream xmlServiceSchema) throws SMSException, SSOException {\n  return registerServices(xmlServiceSchema,null);\n}\n", "nl": "Registers one or more services, defined by the XML input stream that follows the SMS DTD.", "id": "57500"}
{"code": "public static <T extends Comparable<? super T>>List<T> asSortedList(Collection<T> collection,Comparator<? super T> comp){\n  List<T> list=new ArrayList<T>(collection);\n  Collections.sort(list,comp);\n  return list;\n}\n", "nl": "Converts a collection of comparable items into a list, using the given comparator to order the items.", "id": "15669"}
{"code": "public static void sort(char[] a){\n  DualPivotQuicksort.sort(a,0,a.length - 1,null,0,0);\n}\n", "nl": "Sorts the specified array into ascending numerical order. <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "id": "55848"}
{"code": "public void registerUnregisteredNamespaces(){\n  for (int i=0; i < m_unregisteredExtensions.size(); i++) {\n    String ns=(String)m_unregisteredExtensions.get(i);\n    ExtensionNamespaceSupport extNsSpt=defineJavaNamespace(ns);\n    if (extNsSpt != null)     m_extensions.add(extNsSpt);\n  }\n}\n", "nl": "Attempt to register any unregistered extension namespaces.", "id": "51863"}
{"code": "public static void fill(float[] a,float val){\n  for (int i=0, len=a.length; i < len; i++)   a[i]=val;\n}\n", "nl": "Assigns the specified float value to each element of the specified array of floats.", "id": "40428"}
{"code": "@Override public String[] findSecurityReferences(){\n  referencesLock.readLock().lock();\n  try {\n    String results[]=new String[references.size()];\n    return references.keySet().toArray(results);\n  }\n  finally {\n    referencesLock.readLock().unlock();\n  }\n}\n", "nl": "Return the set of security role reference names associated with this servlet, if any; otherwise return a zero-length array.", "id": "55151"}
{"code": "public void refresh_windows(){\n  for (  GuiSubWindowSavable cur_subwindow : permanent_subwindows)   cur_subwindow.refresh();\n}\n", "nl": "Refresh all displayed after the user unit has changed.", "id": "39518"}
{"code": "public void rewind(){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"rewind\",_opsClass);\n  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;\n  try {\n    $self.rewind();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Is equivalent to seek(0).", "id": "13425"}
{"code": "public void useHttps(SSLSocketFactory sslSocketFactory,boolean tunnelProxy){\n  this.sslSocketFactory=sslSocketFactory;\n  this.tunnelProxy=tunnelProxy;\n}\n", "nl": "Serve requests with HTTPS rather than otherwise.", "id": "9319"}
{"code": "public synchronized StringBuffer deleteCharAt(int location){\n  deleteCharAt0(location);\n  return this;\n}\n", "nl": "Deletes the character at the specified offset.", "id": "27446"}
{"code": "public void warning(String msg){\n  if (debugLevel > Debug.ERROR) {\n    formatAndWrite(\"WARNING: \",msg,null);\n  }\n}\n", "nl": "Prints warning messages only when debug level is greater than  DEBUG.ERROR. <p><b>NOTE:</b> Debugging is an IO intensive operation and may hurt application performance when abused. Particularly, note that  Java evaluates arguments to <code>warning()</code> even when  debugging is turned off. So when the argument to this method involves the String concatenation operator '+' or any other method invocation,  <code>warningEnabled</code> <b>MUST</b> be used. It is recommended that  the debug state be checked by invoking <code>warningEnabled()</code>  before invoking any <code>warning()</code> methods to avoid  unnecessary argument evaluation and to maximize application  performance.</p>", "id": "57767"}
{"code": "public int lastIndexOf(String str,int fromIndex){\n  return m_str.lastIndexOf(str,fromIndex);\n}\n", "nl": "Returns the index within this string of the last occurrence of the specified substring.", "id": "14312"}
{"code": "public synchronized void closeDriver(){\n  if (camera != null) {\n    camera.release();\n    camera=null;\n  }\n}\n", "nl": "Closes the camera driver if still in use.", "id": "19396"}
{"code": "public static SlowQueryLogDecider create(SlowQueryConfiguration configuration){\n  return new SlowQueryLogDecider(configuration);\n}\n", "nl": "Create SlowQueryLogDecider for provided configuration.", "id": "6324"}
{"code": "@Fluent public <T>Job on(String event,Handler<Message<T>> handler){\n  logger.debug(\"[LOG] On: \" + Kue.getCertainJobAddress(event,this));\n  eventBus.consumer(Kue.getCertainJobAddress(event,this),handler);\n  return this;\n}\n", "nl": "Add a certain event handler on event bus.", "id": "27717"}
{"code": "protected int firstStep(RouteInfo plan){\n  return (plan.getHopCount() > 1) ? CONNECT_PROXY : CONNECT_TARGET;\n}\n", "nl": "Determines the first step to establish a route.", "id": "1440"}
{"code": "private boolean brokerIsConnected(){\n  final IsolationPolicy isolationPolicy=config.getIsolationPolicy();\n  if (isolationPolicy.equals(IsolationPolicy.ACCEPT_ALL_UPDATES)) {\n    return true;\n  }\n  if (isolationPolicy.equals(IsolationPolicy.REJECT_ALL_UPDATES)) {\n    return !hasConnectionError();\n  }\n  return true;\n}\n", "nl": "Check that the broker associated to this ReplicationDomain has found a Replication Server and that this LDAP server is therefore able to process operations. If not, set the ResultCode, the response message, interrupt the operation, and return false", "id": "39012"}
{"code": "public boolean hasSex(){\n  return fieldSetFlags()[2];\n}\n", "nl": "Checks whether the 'sex' field has been set.", "id": "56948"}
{"code": "private void invalidByte(int position,int count) throws UTFDataFormatException {\n  throw new UTFDataFormatException(Localizer.getMessage(\"jsp.error.xml.invalidByte\",Integer.toString(position),Integer.toString(count)));\n}\n", "nl": "Throws an exception for invalid byte.", "id": "24222"}
{"code": "public void runTest() throws Throwable {\n  Document doc;\n  DocumentType docType;\n  String publicId;\n  doc=(Document)load(\"staffNS\",false);\n  docType=doc.getDoctype();\n  publicId=docType.getPublicId();\n  assertEquals(\"throw_Equals\",\"STAFF\",publicId);\n}\n", "nl": "Runs the test case.", "id": "51358"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsse.EmbeddedType createEmbeddedType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsse.impl.EmbeddedTypeImpl();\n}\n", "nl": "Create an instance of EmbeddedType", "id": "11184"}
{"code": "public static PrintRequestAttributeSet unmodifiableView(PrintRequestAttributeSet attributeSet){\n  if (attributeSet == null) {\n    throw new NullPointerException();\n  }\n  return new UnmodifiablePrintRequestAttributeSet(attributeSet);\n}\n", "nl": "Creates an unmodifiable view of the given print request attribute set.", "id": "42377"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_nodeparentnodenull.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "35884"}
{"code": "@Override public Result decode(BinaryBitmap image,Map<DecodeHintType,?> hints) throws NotFoundException {\n  setHints(hints);\n  return decodeInternal(image);\n}\n", "nl": "Decode an image using the hints provided. Does not honor existing state.", "id": "41688"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsfederation.SecurityTokenType createSecurityTokenType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.SecurityTokenTypeImpl();\n}\n", "nl": "Create an instance of SecurityTokenType", "id": "46260"}
{"code": "public final int skipBytes(int n) throws IOException {\n  int total=0;\n  int cur=0;\n  while ((total < n) && ((cur=(int)in.skip(n - total)) > 0)) {\n    total+=cur;\n  }\n  return total;\n}\n", "nl": "See the general contract of the <code>skipBytes</code> method of <code>DataInput</code>. <p> Bytes for this operation are read from the contained input stream.", "id": "35117"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.EmailAddressElement createEmailAddressElement(java.lang.String value) throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.EmailAddressElementImpl(value);\n}\n", "nl": "Create an instance of EmailAddressElement", "id": "19557"}
{"code": "public void putAll(Map<?,?> attr){\n  if (!Attributes.class.isInstance(attr))   throw new ClassCastException();\n  for (  Map.Entry<?,?> me : (attr).entrySet())   put(me.getKey(),me.getValue());\n}\n", "nl": "Copies all of the attribute name-value mappings from the specified Attributes to this Map. Duplicate mappings will be replaced.", "id": "28633"}
{"code": "public String toString(){\n  return action.toString() + (fields == null ? \"\" : fields.toString());\n}\n", "nl": "toString method", "id": "35338"}
{"code": "public static String prependXMLProperty(String xml,String propertyXML){\n  int idx=xml.indexOf(PropertyTemplate.START_TAG);\n  idx+=PropertyTemplate.START_TAG.length();\n  return xml.substring(0,idx) + propertyXML + xml.substring(idx);\n}\n", "nl": "Returns an altered XML. This method prepends a property element.", "id": "20421"}
{"code": "public boolean elementAvailable(QName elemName){\n  return m_availElems.containsKey(elemName);\n}\n", "nl": "Determines whether the passed element name is present in the list of available elements.", "id": "9709"}
{"code": "public int size(){\n  return encodedNames.size();\n}\n", "nl": "The number of key-value pairs in this form-encoded body.", "id": "13438"}
{"code": "boolean inSubroutine(final long id){\n  if ((status & Label.VISITED) != 0) {\n    return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;\n  }\n  return false;\n}\n", "nl": "Returns true is this basic block belongs to the given subroutine.", "id": "48536"}
{"code": "private void writeChars(int number,char c) throws IOException {\n  for (; number > 0; number--) {\n    writer.write(c);\n  }\n}\n", "nl": "Writes an amount of chars, mostly spaces", "id": "38219"}
{"code": "public StatusMessage createStatusMessage() throws XACMLException {\n  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.STATUS_MESSAGE);\n  if (object == null) {\n    return new StatusMessageImpl();\n  }\n else {\n    return (StatusMessage)object;\n  }\n}\n", "nl": "Returns a new instance of <code>StatusMessage</code>.", "id": "24411"}
{"code": "public static String convertDateString(String srcDateString,java.util.Locale srcLocale,java.util.Locale dstLocale){\n  Date date=parseDateString(srcDateString,srcLocale);\n  return getDateString(date,dstLocale);\n}\n", "nl": "Converts date string from source locale to destination locale", "id": "57185"}
{"code": "public JsonArray array(String key){\n  return new JsonArray(this,key);\n}\n", "nl": "Creates a builder for creating json arrays.", "id": "26690"}
{"code": "public long changeGenerationId(long generationId){\nsynchronized (generationIDLock) {\n    long oldGenerationId=this.generationId;\n    if (this.generationId != generationId) {\n      clearDbs();\n      this.generationId=generationId;\n      this.generationIdSavedStatus=false;\n    }\n    return oldGenerationId;\n  }\n}\n", "nl": "Sets the provided value as the new in memory generationId. Also clear the changelog databases.", "id": "31526"}
{"code": "@Override public void start() throws java.io.IOException {\n  getTransport().connect();\n}\n", "nl": "start the sender and register transmitter mbean", "id": "29148"}
{"code": "public static void crossFadeViews(View showView,View hideView){\n  crossFadeViews(showView,hideView,ANIMATION_DURATION_SHORT);\n}\n", "nl": "Cross animate two views, showing one, hiding the other.", "id": "45944"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(characterdatadeletedatamiddle.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "46336"}
{"code": "private void checkScrollableParameters(Rectangle visibleRect,int orientation){\n  if (visibleRect == null) {\n    throw new IllegalArgumentException(\"visibleRect must be non-null\");\n  }\nswitch (orientation) {\ncase SwingConstants.VERTICAL:\ncase SwingConstants.HORIZONTAL:\n    break;\ndefault :\n  throw new IllegalArgumentException(\"orientation must be one of: VERTICAL, HORIZONTAL\");\n}\n}\n", "nl": "--- The Scrollable Implementation ---", "id": "27181"}
{"code": "void heapify(){\n  for (int i=size / 2; i >= 1; i--)   fixDown(i);\n}\n", "nl": "Establishes the heap invariant (described above) in the entire tree, assuming nothing about the order of the elements prior to the call.", "id": "32486"}
{"code": "public void runTest() throws Throwable {\n  Document doc;\n  NodeList nameList;\n  doc=(Document)load(\"staff\",false);\n  nameList=doc.getElementsByTagName(\"name\");\n  assertSize(\"documentGetElementsByTagNameLengthAssert\",5,nameList);\n}\n", "nl": "Runs the test case.", "id": "39834"}
{"code": "public String toString(){\n  return uri.toString();\n}\n", "nl": "Returns a String identifying this URI attribute. The String is the string representation of the attribute's underlying URI.", "id": "24604"}
{"code": "public static Name upperUnderscore(String... pieces){\n  List<NamePiece> namePieces=new ArrayList<>();\n  for (  String piece : pieces) {\n    validateUpperUnderscore(piece);\n    namePieces.add(new NamePiece(piece,CaseFormat.UPPER_UNDERSCORE));\n  }\n  return new Name(namePieces);\n}\n", "nl": "Creates a Name from a sequence of upper-underscore strings.", "id": "32088"}
{"code": "public int size(){\n  return attrs.size();\n}\n", "nl": "Indicates the number of attributes held in the container.", "id": "36483"}
{"code": "public static void remove(Object cachedObject){\n  classCache.remove(cachedObject);\n}\n", "nl": "Remove the object from the cache.", "id": "32573"}
{"code": "protected boolean contains(String name){\n  return m_hashTable.containsKey(name);\n}\n", "nl": "Checks if an internal attribute is defined for the control", "id": "41818"}
{"code": "public int hashCode(){\n  return name.hashCode();\n}\n", "nl": "Returns a hash code for this <code>SAEPrincipal</code>. <p>", "id": "25441"}
{"code": "SmsRouteTreeBuilder handles(Predicate<String> handlesFunction){\n  this.handlesFunction=handlesFunction;\n  return this;\n}\n", "nl": "Specify that this tree node handles a particular service.", "id": "18812"}
{"code": "public Document decryptAndReplace(Document encryptedDoc,java.security.Key privKey) throws EncryptionException {\n  return ep.decryptAndReplace(encryptedDoc,privKey);\n}\n", "nl": "Decrypts an XML Document that contains encrypted data.", "id": "49146"}
{"code": "public void clear(){\n  list.clear();\n}\n", "nl": "Empty the object.. After this call the object will be in the same state as if it was just created.", "id": "42472"}
{"code": "public long node(){\n  if (version != 1) {\n    throw new UnsupportedOperationException();\n  }\n  return node;\n}\n", "nl": "<p> The node value of the version 1, variant 2 UUID as per <a href=\"http://www.ietf.org/rfc/rfc4122.txt\">RFC 4122</a>.", "id": "3686"}
{"code": "public boolean hasThumbnail(){\n  return mData.hasCompressedThumbnail();\n}\n", "nl": "Check if thumbnail exists.", "id": "57370"}
{"code": "@Override public int lengthOfMonth(){\nswitch (month) {\ncase 2:\n    return (isLeapYear() ? 29 : 28);\ncase 4:\ncase 6:\ncase 9:\ncase 11:\n  return 30;\ndefault :\nreturn 31;\n}\n}\n", "nl": "Returns the length of the month represented by this date. <p> This returns the length of the month in days. For example, a date in January would return 31.", "id": "51431"}
{"code": "int currentPoolSize(){\n  return maxPoolSize - availableConnections.availablePermits();\n}\n", "nl": "Package private for unit testing.", "id": "1524"}
{"code": "public void unread(char cbuf[],int off,int len) throws IOException {\nsynchronized (lock) {\n    ensureOpen();\n    if (len > pos)     throw new IOException(\"Pushback buffer overflow\");\n    pos-=len;\n    System.arraycopy(cbuf,off,buf,pos,len);\n  }\n}\n", "nl": "Pushes back a portion of an array of characters by copying it to the front of the pushback buffer.  After this method returns, the next character to be read will have the value <code>cbuf[off]</code>, the character after that will have the value <code>cbuf[off+1]</code>, and so forth.", "id": "46861"}
{"code": "public static java.util.Calendar parseDateTime(String lexicalXSDDateTime){\n  if (theConverter == null)   initConverter();\n  return theConverter.parseDateTime(lexicalXSDDateTime);\n}\n", "nl": "<p> Converts the string argument into a Calendar value.", "id": "31211"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(elementhasattribute04.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "24747"}
{"code": "public ValidationMessage[] validate(TagData data){\n  TagExtraInfo tei=getTagExtraInfo();\n  if (tei == null) {\n    return null;\n  }\n  return tei.validate(data);\n}\n", "nl": "Translation-time validation of the attributes. This is a convenience method on the associated TagExtraInfo class.", "id": "18753"}
{"code": "private void sendMessage(int msg){\n  Message.obtain(mHandler,msg,\"error\").sendToTarget();\n}\n", "nl": "Send handler messages to view - communication from service to view.", "id": "57849"}
{"code": "public void warn(SourceLocator srcLctr,Node styleNode,Node sourceNode,String msg) throws TransformerException {\n  warn(srcLctr,styleNode,sourceNode,msg,null);\n}\n", "nl": "Warn the user of a problem.", "id": "18654"}
{"code": "public boolean isStableNumber(){\n  return true;\n}\n", "nl": "Tell if this expression returns a stable number that will not change during  iterations within the expression.  This is used to determine if a proximity  position predicate can indicate that no more searching has to occur.", "id": "51153"}
{"code": "@Override protected void doPut(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {\n  if (isLocked(req)) {\n    resp.sendError(WebdavStatus.SC_LOCKED);\n    return;\n  }\n  super.doPut(req,resp);\n  String path=getRelativePath(req);\n  lockNullResources.remove(path);\n}\n", "nl": "Process a PUT request for the specified resource.", "id": "20882"}
{"code": "public void uninstallUI(JComponent a){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);\n  }\n}\n", "nl": "Invokes the <code>uninstallUI</code> method on each UI handled by this object.", "id": "58530"}
{"code": "private static void debugPrintln(String msg){\n  if (debug) {\n    System.err.println(\"JAXP: \" + msg);\n  }\n}\n", "nl": "<p>Conditional debug printing.</p>", "id": "32277"}
{"code": "private static boolean useHighContrastTheme(){\n  if (isWindows() && useSystemFonts()) {\n    Boolean highContrast=(Boolean)Toolkit.getDefaultToolkit().getDesktopProperty(\"win.highContrast.on\");\n    return (highContrast == null) ? false : highContrast.booleanValue();\n  }\n  return false;\n}\n", "nl": "Returns true if the high contrast theme should be used as the default theme.", "id": "51533"}
{"code": "public static boolean isSurrogatePair(char[] text,int idx){\n  return !(idx < 0 || idx > text.length - 2) && isSurrogateHigh(text[idx]) && isSurrogateLow(text[idx + 1]);\n}\n", "nl": "Checks if two subsequent characters in a character array are are the higher and the lower character in a surrogate pair (and therefore eligible for conversion to a UTF 32 character).", "id": "4623"}
{"code": "public boolean isPaintingTile(){\n  return getFlag(IS_PAINTING_TILE);\n}\n", "nl": "Returns true if the component is currently painting a tile. If this method returns true, paint will be called again for another tile. This method returns false if you are not painting a tile or if the last tile is painted. Use this method to keep some state you might need between tiles.", "id": "51663"}
{"code": "public boolean isSelected(){\n  return selected;\n}\n", "nl": "Returns whether the text range is selected.", "id": "55138"}
{"code": "public boolean shouldWarn(){\n  refreshIfUndefined(shouldWarn);\n  return shouldWarn == ConditionResult.TRUE;\n}\n", "nl": "Indicates whether the user should receive a warning notification that the password is about to expire.", "id": "21512"}
{"code": "public synchronized void addPropertyChangeListener(PropertyChangeListener listener){\n  if (changeSupport == null) {\n    changeSupport=new SwingPropertyChangeSupport(this);\n  }\n  changeSupport.addPropertyChangeListener(listener);\n}\n", "nl": "Adds a <code>PropertyChangeListener</code> to the listener list. The listener is registered for all properties. <p> A <code>PropertyChangeEvent</code> will get fired in response to setting a bound property, e.g. <code>setFont</code>, <code>setBackground</code>, or <code>setForeground</code>. Note that if the current component is inheriting its foreground, background, or font from its container, then no event will be fired in response to a change in the inherited property.", "id": "23397"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.DeactivationCallCenterElement createDeactivationCallCenterElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.DeactivationCallCenterElementImpl();\n}\n", "nl": "Create an instance of DeactivationCallCenterElement", "id": "28649"}
{"code": "public PlaPoint corner_first_next(){\n  return corner(1);\n}\n", "nl": "Equivalente to cornet(1)", "id": "33648"}
{"code": "@SuppressWarnings(\"unchecked\") public Iterator<InputEvent> iterator(){\n  return events.iterator();\n}\n", "nl": "Returns an <code>Iterator</code> for the events comprising the gesture. <P>", "id": "23118"}
{"code": "@Override public Collection<T> visitDefined(DefinedDefaultBehaviorProvider<T> provider,Void p){\n  SortedSet<T> values=new TreeSet<>();\n  for (  String stringValue : provider.getDefaultValues()) {\n    values.add(propertyDef.decodeValue(stringValue));\n  }\n  return values;\n}\n", "nl": "Returns the default value for the property as a collection.", "id": "11707"}
{"code": "static Promise<Void> blockingPromiseNotify(){\n  return new BlockingPromise<>();\n}\n", "nl": "Returns a void promise for notify of outcome but no value returned. <p> Callback replyDone can be used instead of replay on service side. Create a blocking promise. NOTE BLOCKING PROMISES ARE FOR LEGACY INTEGRATION AND TESTING ONLY!!!", "id": "29044"}
{"code": "public static InputStream toInputStream(CharSequence input){\n  return toInputStream(input,Charset.defaultCharset());\n}\n", "nl": "Convert the specified CharSequence to an input stream, encoded as bytes using the default character encoding of the platform.", "id": "56869"}
{"code": "private int yearLength(){\n  int year=internalGet(YEAR);\n  if (internalGetEra() == BCE) {\n    year=1 - year;\n  }\n  return yearLength(year);\n}\n", "nl": "Returns the length (in days) of the year provided by internalGet(YEAR).", "id": "40337"}
{"code": "public long size(){\n  return size;\n}\n", "nl": "Returns the size in bytes of the memory-mapped region.", "id": "2968"}
{"code": "public static QueryExp anySubString(AttributeValueExp a,StringValueExp s){\n  return new MatchQueryExp(a,new StringValueExp(\"*\" + escapeString(s.getValue()) + \"*\"));\n}\n", "nl": "Returns a query expression that represents a matching constraint on a string argument. The value must contain the given literal string value.", "id": "7498"}
{"code": "@Override public List<Rule> rules(){\n  return (this.rules);\n}\n", "nl": "Return a List of all registered Rule instances, or a zero-length List if there are no registered Rule instances.  If more than one Rule instance has been registered, they <strong>must</strong> be returned in the order originally registered through the <code>add()</code> method.", "id": "34154"}
{"code": "public static PdfStream parse(PdfCanvasParser ps,PdfDictionary colorSpaceDic) throws IOException {\n  PdfDictionary inlineImageDict=parseDictionary(ps);\n  byte[] samples=parseSamples(inlineImageDict,colorSpaceDic,ps);\n  PdfStream inlineImageAsStreamObject=new PdfStream(samples);\n  inlineImageAsStreamObject.putAll(inlineImageDict);\n  return inlineImageAsStreamObject;\n}\n", "nl": "Parses an inline image from the provided content parser.  The parser must be positioned immediately following the BI operator in the content stream. The parser will be left with current position immediately following the EI operator that terminates the inline image", "id": "54777"}
{"code": "public static long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery,com.liferay.portal.kernel.dao.orm.Projection projection){\n  return getService().dynamicQueryCount(dynamicQuery,projection);\n}\n", "nl": "Returns the number of rows matching the dynamic query.", "id": "22268"}
{"code": "public final void yybegin(int newState){\n  zzLexicalState=newState;\n}\n", "nl": "Enters a new lexical state", "id": "41938"}
{"code": "private void checkPeerCertificatesPresent() throws SSLPeerUnverifiedException {\n  if (peerCertificates == null || peerCertificates.length == 0) {\n    throw new SSLPeerUnverifiedException(\"No peer certificates\");\n  }\n}\n", "nl": "Throw SSLPeerUnverifiedException on null or empty peerCertificates array", "id": "36294"}
{"code": "public boolean isAccessibleChildSelected(int i){\n  int childCount=getAccessibleChildrenCount();\n  if (i < 0 || i >= childCount) {\n    return false;\n  }\n else {\n    TreePath childPath=getChildTreePath(i);\n    return tree.isPathSelected(childPath);\n  }\n}\n", "nl": "Returns true if the current child of this object is selected.", "id": "45150"}
{"code": "private Set buildSet(String attrName,Map attributes,Set resultSet){\n  Set vals=(Set)attributes.get(attrName);\n  if ((vals != null) && !vals.isEmpty()) {\n    resultSet.addAll(vals);\n  }\n  return (resultSet);\n}\n", "nl": "Builds and returns the appropriate Set for the attributes to be merged from org and realm if the system is in intrusive mode (Both org DIT and realm DIT are present). This happens when the Copy Config flag is enabled.", "id": "46853"}
{"code": "private Object writeReplace(){\n  return new Ser(Ser.MONTH_DAY_TYPE,this);\n}\n", "nl": "Writes the object using a <a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.", "id": "16158"}
{"code": "public XMLString toLowerCase(){\n  return new XString(str().toLowerCase());\n}\n", "nl": "Converts all of the characters in this <code>String</code> to lower case using the rules of the default locale, which is returned by <code>Locale.getDefault</code>. <p>", "id": "40032"}
{"code": "@Override public BasicSplitPaneDivider createDefaultDivider(){\n  SynthSplitPaneDivider divider=new SynthSplitPaneDivider(this);\n  divider.setDividerSize(splitPane.getDividerSize());\n  return divider;\n}\n", "nl": "Creates the default divider.", "id": "8279"}
{"code": "public static String normalize(CharSequence src,Form form){\n  return NormalizerBase.normalize(src.toString(),form);\n}\n", "nl": "Normalize a sequence of char values. The sequence will be normalized according to the specified normalization from.", "id": "44022"}
{"code": "public void stop(){\nsynchronized (this) {\n    mStopped=true;\n    if (mListenerThread == null) {\n      return;\n    }\n  }\n  mListenerThread.interrupt();\n  try {\n    if (mServerSocket != null) {\n      mServerSocket.close();\n    }\n  }\n catch (  IOException e) {\n  }\n}\n", "nl": "Stops the listener thread and unbinds the address.", "id": "39920"}
{"code": "public void paintMenuBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n}\n", "nl": "Paints the background of a menu.", "id": "47955"}
{"code": "public static String readFileAsString(String absolutePath) throws IOException {\n  return new FileReader(absolutePath).readFully().toString(StandardCharsets.UTF_8);\n}\n", "nl": "Returns the contents of 'path' as a string. The contents are assumed to be UTF-8.", "id": "39283"}
{"code": "public boolean containsSegment(LineSegment other){\n  return other != null && containsPoint(other.startPoint) && containsPoint(other.endPoint);\n}\n", "nl": "Checks if a segment contains another segment in itself", "id": "57653"}
{"code": "public void disableVertexAttribute(String name){\n  int location=fetchAttributeLocation(name);\n  if (location == -1)   return;\n  GLES20.glDisableVertexAttribArray(location);\n}\n", "nl": "Disables the vertex attribute with the given name", "id": "15547"}
{"code": "protected void validateIsNotWebsocketUpgradeHttpResponse(IHttpResponse response){\n  String upgradeHeader=response.getHeaderFirst(HttpHeaders.UPGRADE);\n  assertNull(upgradeHeader);\n  String websocketAcceptHeader=response.getHeaderFirst(HttpHeadersExtra.SEC_WEBSOCKET_ACCEPT);\n  assertNull(websocketAcceptHeader);\n}\n", "nl": "Validates the response is NOT a Websocket upgrade permission.", "id": "16762"}
{"code": "@Override public void close() throws IOException {\n}\n", "nl": "Close this Writer. This is the concrete implementation required. This particular implementation does nothing.", "id": "41824"}
{"code": "public IDPEntry createIDPEntry() throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.IDPENTRY);\n  if (obj == null) {\n    return new IDPEntryImpl();\n  }\n else {\n    return (IDPEntry)obj;\n  }\n}\n", "nl": "Returns the <code>IDPEntry</code> Object.", "id": "44243"}
{"code": "public void update(byte[] input,int offset,int len){\n  if (input == null) {\n    throw new IllegalArgumentException(\"No input buffer given\");\n  }\n  if (input.length - offset < len) {\n    throw new IllegalArgumentException(\"Input buffer too short\");\n  }\n  engineUpdate(input,offset,len);\n  state=IN_PROGRESS;\n}\n", "nl": "Updates the digest using the specified array of bytes, starting at the specified offset.", "id": "8237"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(elementcreatenewattribute.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "37054"}
{"code": "public Compiler shiftRight(File file){\n  if (!file.isDirectory())   throw new IllegalArgumentException(file + \" is not a directory\");\n  config.result.outputDir=file;\n  return this;\n}\n", "nl": "specify the output directory", "id": "50857"}
{"code": "protected void engineSetPadding(String padding) throws NoSuchPaddingException {\n  if (!padding.equalsIgnoreCase(\"NoPadding\")) {\n    throw new NoSuchPaddingException(\"Padding \" + padding + \" unknown.\");\n  }\n}\n", "nl": "should never be called.", "id": "7020"}
{"code": "public PCalledPartyIDHeader createPCalledPartyIDHeader(Address address){\n  if (address == null)   throw new NullPointerException(\"null address!\");\n  PCalledPartyID calledPartyID=new PCalledPartyID();\n  calledPartyID.setAddress(address);\n  return calledPartyID;\n}\n", "nl": "P-Called-Party-ID header", "id": "36813"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(importNode14.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "5065"}
{"code": "protected void endNode(int node) throws org.xml.sax.SAXException {\n  super.endNode(node);\n  if (DTM.ELEMENT_NODE == m_dtm.getNodeType(node)) {\n    m_transformer.getXPathContext().popCurrentNode();\n  }\n}\n", "nl": "End processing of given node", "id": "34639"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n  descriptionType=CoreSchema.getDescriptionAttributeType();\n}\n", "nl": "Ensures that the Directory Server is running.", "id": "39390"}
{"code": "void unassignPolicies(String serviceName,Set policyDNs,boolean toVerify) throws AMException, SSOException {\n  if ((policyDNs == null) || (policyDNs.isEmpty())) {\n    return;\n  }\n  AMTemplate template=getTemplate(serviceName,AMTemplate.POLICY_TEMPLATE);\n  unassignPolicies(template,policyDNs,toVerify);\n}\n", "nl": "Unassigns the given policies from this object.", "id": "33383"}
{"code": "private void addTestEntriesToDB() throws Exception {\n  for (  String ldifEntry : updatedEntries) {\n    addTestEntryToDB(TestCaseUtils.entryFromLdifString(ldifEntry));\n  }\n  log(\"addTestEntriesToDB : \" + updatedEntries.length + \" successfully added to DB\");\n}\n", "nl": "Add to the current DB the entries necessary to the test.", "id": "15685"}
{"code": "public void insertTextAtIndex(int index,String s){\n  AccessibleEditableText at=getEditorAccessibleEditableText();\n  if (at != null) {\n    at.insertTextAtIndex(index,s);\n  }\n}\n", "nl": "Inserts the specified string at the given index/", "id": "55897"}
{"code": "@Override public boolean isSecure(){\n  return false;\n}\n", "nl": "Indicates whether this client connection is currently using a secure mechanism to communicate with the server.  Note that this may change over time based on operations performed by the client or server (e.g., it may go from <CODE>false</CODE> to <CODE>true</CODE> if the client uses the StartTLS extended operation).", "id": "1828"}
{"code": "public void cancel(){\n  canceled=true;\n  if (engine != null)   engine.cancel();\n}\n", "nl": "Cancels the request, if possible. Requests that are already complete cannot be canceled.", "id": "14536"}
{"code": "public void handleOpenError(File file,Throwable ex){\n  System.err.println(ERR_LOGGER_ERROR_OPENING_FILE.get(file,publisherConfigDN,stackTraceToSingleLineString(ex)));\n}\n", "nl": "Handle an exception which occurred while trying to open a log file.", "id": "1954"}
{"code": "public void execute(TransformerImpl transformer) throws TransformerException {\n  try {\n    String data=transformer.transformToString(this);\n    transformer.getResultTreeHandler().comment(data);\n  }\n catch (  org.xml.sax.SAXException se) {\n    throw new TransformerException(se);\n  }\n}\n", "nl": "Execute the xsl:comment transformation", "id": "17317"}
{"code": "public Builder removeAllNames(){\n  this.names.clear();\n  return this;\n}\n", "nl": "Removes all user defined names.", "id": "53717"}
{"code": "public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){\n}\n", "nl": "This default implementation does no painting.", "id": "17238"}
{"code": "public String toString(){\n  StringBuffer sb=new StringBuffer();\n  for (  Pair next : mapping) {\n    sb.append(next.getKey() + ':' + next.getValue()+ ',');\n  }\n  return sb.toString();\n}\n", "nl": "Return the list of values as a single string separated by a colon,comma", "id": "31122"}
{"code": "public Builder noUserModification(boolean isNoUserModification){\n  this.isNoUserModification=isNoUserModification;\n  return this;\n}\n", "nl": "Specifies whether this attribute type is \"no-user-modification\".", "id": "34629"}
{"code": "protected void handleIOException(IOException e) throws IOException {\n  throw e;\n}\n", "nl": "Handle any IOExceptions thrown. <p> This method provides a point to implement custom exception handling. The default behaviour is to re-throw the exception.", "id": "23588"}
{"code": "public com.sun.identity.liberty.ws.authnsvc.jaxb.PasswordTransformsType.TransformType createPasswordTransformsTypeTransformType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.PasswordTransformsTypeImpl.TransformTypeImpl();\n}\n", "nl": "Create an instance of PasswordTransformsTypeTransformType", "id": "43895"}
{"code": "private void buildStatements(StringBuilder sb,List<Statement> statements,int indentation) throws SyntaxException {\n  for (  Statement stmt : statements) {\n    buildStatement(sb,stmt,indentation);\n    if (sb.charAt(sb.length() - 1) != '\\n') {\n      sb.append(\";\\n\");\n    }\n  }\n}\n", "nl": "build a list of statements. the `;` at the end is automatically generated.", "id": "56454"}
{"code": "@NonNull public static Interpolator multiply(Interpolator first,Interpolator second){\n  return new MultiplyInterpolator(first,second);\n}\n", "nl": "An interpolator whose value at each point is the result of multiplying the outcomes of the two provided interpolators", "id": "23059"}
{"code": "public Set searchFilteredRoles(String wildcard,Map avPairs,int level) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(FILTERED_ROLE),getSearchFilter(AMObject.FILTERED_ROLE),wildcard,avPairs,level);\n}\n", "nl": "Searches for filtered roles in this organization using wildcards and attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be specifed so that DNs of filtered roles with matching attribute-value pairs will be returned.", "id": "10053"}
{"code": "public String toXML(){\n  StringBuilder stringBuilder=new StringBuilder();\n  return stringBuilder.toString();\n}\n", "nl": "Default toXML Method to Marshal Object into XML.", "id": "50017"}
{"code": "public static boolean putBoolean(Context context,String key,boolean value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putBoolean(key,value);\n  return editor.commit();\n}\n", "nl": "put boolean preferences", "id": "34758"}
{"code": "public void fatalError(SAXParseException e) throws SAXException {\n  if (errorHandler != null) {\n    errorHandler.fatalError(e);\n  }\n}\n", "nl": "Filter a fatal error event.", "id": "23837"}
{"code": "public void init(SecureRandom random) throws IllegalArgumentException {\n}\n", "nl": "Initialise the padder.", "id": "10424"}
{"code": "public static boolean delete(@NonNull String key){\n  failIfNotInitialized();\n  try {\n    mCache.delete(key);\n    return true;\n  }\n catch (  Exception e) {\n    return false;\n  }\n}\n", "nl": "Deletes an object with the given key", "id": "35688"}
{"code": "public static int swapInteger(int value){\n  return (((value >> 0) & 0xff) << 24) + (((value >> 8) & 0xff) << 16) + (((value >> 16) & 0xff) << 8)+ (((value >> 24) & 0xff) << 0);\n}\n", "nl": "Converts a \"int\" value between endian systems.", "id": "475"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ps.NameIdentifierMappingRequestElement createNameIdentifierMappingRequestElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.NameIdentifierMappingRequestElementImpl();\n}\n", "nl": "Create an instance of NameIdentifierMappingRequestElement", "id": "5677"}
{"code": "public void handleButton3Request(RequestInvocationEvent event) throws ModelControlException {\n  returnToHomePage();\n}\n", "nl": "Handles return to home page request.", "id": "41948"}
{"code": "public void reset(){\n  count=0;\n}\n", "nl": "Sets the size to zero.", "id": "55625"}
{"code": "public static Completion of(String value){\n  return new SimpleCompletion(value,\"\");\n}\n", "nl": "Returns a completion of the value and an empty message", "id": "5604"}
{"code": "public void addPropertyChangeListener(PropertyChangeListener listener){\n  support.addPropertyChangeListener(listener);\n}\n", "nl": "Add a property change listener to this component.", "id": "27229"}
{"code": "public boolean equals(Object o){\n  if (o == null) {\n    return false;\n  }\n  if (this == o) {\n    return true;\n  }\n  if (!(o instanceof HOTPPrincipal)) {\n    return false;\n  }\n  HOTPPrincipal that=(HOTPPrincipal)o;\n  if (this.getName().equals(that.getName())) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Compares the specified Object with this <code>HOTPPrincipal</code> for equality.  Returns true if the given object is also a <code>HOTPPrincipal</code> and the two HOTPPrincipals have the same username. <p>", "id": "27252"}
{"code": "public PdfXObject addImage(ImageData image,float a,float b,float c,float d,float e,float f){\n  return addImage(image,a,b,c,d,e,f,false);\n}\n", "nl": "Creates Image XObject from image and adds it to canvas (as Image XObject).", "id": "54486"}
{"code": "@Override public boolean isFullSpan(){\n  return true;\n}\n", "nl": "Returns true.", "id": "34865"}
{"code": "@Deprecated public void enableResizedPosting(){\n  resizedPostingDisableCount--;\n}\n", "nl": "This field was not used in previous releases and there are currently no plans to support it in the future.", "id": "46288"}
{"code": "public boolean isDelegated(){\n  return !this.equals(beanContextChildPeer);\n}\n", "nl": "Reports whether or not this class is a delegate of another.", "id": "1832"}
{"code": "public static SearchRequest newSearchRequest(final DN name,final SearchScope scope){\n  return newSearchRequest(name,scope,SearchFilter.objectClassPresent());\n}\n", "nl": "Return a new search request object.", "id": "49173"}
{"code": "public int indexOf(GenericObject gobj){\n  return hlist.indexOf(gobj);\n}\n", "nl": "index of an element.", "id": "19713"}
{"code": "public void print(long lnum){\n  print(String.valueOf(lnum));\n}\n", "nl": "Prints the string representation of the specified long to the target.", "id": "21709"}
{"code": "public SubjectLocality createSubjectLocality(String xml) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SUBJECT_LOCALITY,xml);\n  if (obj == null) {\n    return new SubjectLocalityImpl(xml);\n  }\n else {\n    return (SubjectLocality)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>SubjectLocality</code>. The return object is immutable.", "id": "35930"}
{"code": "ConcurrentSkipListMap.Node<K,V> hiNode(Comparator<? super K> cmp){\n  if (hi == null)   return m.findLast();\n else   if (hiInclusive)   return m.findNear(hi,LT | EQ,cmp);\n else   return m.findNear(hi,LT,cmp);\n}\n", "nl": "Returns highest node. This node might not be in range, so most usages need to check bounds.", "id": "42094"}
{"code": "public void clearAll(){\n  if (items != null) {\n    items.clear();\n  }\n  if (emptyItems != null) {\n    emptyItems.clear();\n  }\n}\n", "nl": "Clears all views", "id": "7341"}
{"code": "public boolean isCookieDetect(){\n  return cookieDetect;\n}\n", "nl": "Returns <code>true<code> if cookie detected.", "id": "37725"}
{"code": "private Future<ShoppingCart> aggregateCartEvents(String userId){\n  Future<ShoppingCart> future=Future.future();\n  repository.streamByUser(userId).takeWhile(null).reduce(new ShoppingCart(),null).toSingle().subscribe(null,null);\n  return future.compose(null);\n}\n", "nl": "Get the shopping cart for a certain user.", "id": "47366"}
{"code": "public Rectangle moveDown(float move){\n  y-=move;\n  return this;\n}\n", "nl": "Decreases the y coordinate.", "id": "40376"}
{"code": "public void removeObserver(final FileAlterationObserver observer){\n  if (observer != null) {\n    while (observers.remove(observer)) {\n    }\n  }\n}\n", "nl": "Remove a file system observer from this monitor.", "id": "43771"}
{"code": "public void addListener(Object session,SessionListener listener) throws SessionException {\n  debug.message(\"FedletSessionProvider.addListener called\");\n}\n", "nl": "Registers a listener for the session.", "id": "42443"}
{"code": "public AMSearchResults searchSubOrganizationalUnits(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(ORGANIZATIONAL_UNIT),getSearchFilter(AMObject.ORGANIZATIONAL_UNIT),wildcard,avPairs,searchControl);\n}\n", "nl": "Searches for sub organizational units in this organizational unit using wildcards and attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be specifed so that DNs of sub organizations with matching attribute-value pairs will be returned.", "id": "35862"}
{"code": "@NonNull public final Agera subscribeOn(@NonNull Looper looper){\n  return new AgeraSubscribeOnLooper(this,looper);\n}\n", "nl": "Makes sure the addUpdatable and removeUpdatable for this Agera is called on the specified Looper.", "id": "19772"}
{"code": "private void whenLoginThrowInvalidPasswordException(LoginModule... modules) throws LoginException {\n  for (  LoginModule module : modules) {\n    when(module.login()).thenThrow(new InvalidPasswordException(\"test-pw-failure\"));\n  }\n}\n", "nl": "Convenient method for setting login expectations.", "id": "35186"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(elementgetattributenodenull.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "34237"}
{"code": "public boolean useSSL(){\n  return useSSLArg.isPresent();\n}\n", "nl": "Indicate if the SSL mode is required.", "id": "54451"}
{"code": "public static BooleanArgument scriptFriendlyArgument() throws ArgumentException {\n  return BooleanArgument.builder(OPTION_LONG_SCRIPT_FRIENDLY).shortIdentifier(OPTION_SHORT_SCRIPT_FRIENDLY).description(INFO_DESCRIPTION_SCRIPT_FRIENDLY.get()).buildArgument();\n}\n", "nl": "Returns the \"script-friendly\" boolean argument.<br> <i> N.B : the 's' short option is also used by searchScope, servicestate, sourceldif, randomSeed.</i>", "id": "39651"}
{"code": "public FromHeader createFromHeader(Address address,String tag) throws ParseException {\n  if (address == null)   throw new NullPointerException(\"null address arg\");\n  From from=new From();\n  from.setAddress(address);\n  if (tag != null)   from.setTag(tag);\n  return from;\n}\n", "nl": "Creates a new FromHeader based on the newly supplied address and tag values.", "id": "57809"}
{"code": "public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  doGet(request,response);\n}\n", "nl": "Gets <code>IDP</code> from common domain and sends proxy authentication request to the <code>IDP</code>.", "id": "3160"}
{"code": "public ContentTypeHeader createContentTypeHeader(String contentType,String contentSubType) throws ParseException {\n  if (contentType == null || contentSubType == null)   throw new NullPointerException(\"null contentType or subType\");\n  ContentType c=new ContentType();\n  c.setContentType(contentType);\n  c.setContentSubType(contentSubType);\n  return c;\n}\n", "nl": "Creates a new ContentTypeHeader based on the newly supplied contentType and contentSubType values.", "id": "54604"}
{"code": "public String toString(){\n  StringBuffer result=new StringBuffer();\n  addToBuffer(result,true,false,null);\n  return result.toString();\n}\n", "nl": "For debugging.", "id": "13314"}
{"code": "public String toXMLString() throws SAML2Exception {\n  return toXMLString(true,false);\n}\n", "nl": "Returns the <code>SessionIndex</code> in an XML document String format based on the <code>SessionIndex</code> schema described above.", "id": "39323"}
{"code": "public boolean isConnected(){\n  return (getData() & 0x4) != 0;\n}\n", "nl": "Test if tripwire is connected", "id": "4636"}
{"code": "@Override public int lengthOfYear(){\n  return chrono.getYearLength(prolepticYear);\n}\n", "nl": "Returns the length of the year represented by this date. <p> This returns the length of the year in days. A Hijrah calendar system year is typically shorter than that of the ISO calendar system.", "id": "54235"}
{"code": "public void toggle(){\n  mSlidingMenu.toggle();\n}\n", "nl": "Toggle the SlidingMenu. If it is open, it will be closed, and vice versa.", "id": "28683"}
{"code": "public final void debug(Object message,Throwable t){\n  if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {\n    log(SimpleLog.LOG_LEVEL_DEBUG,message,t);\n  }\n}\n", "nl": "Logs a message with  <code>org.apache.commons.logging.impl.SimpleLog.LOG_LEVEL_DEBUG</code>.", "id": "56628"}
{"code": "@Override public void write(ASN1Writer stream) throws IOException {\n  stream.writeStartSequence(OP_TYPE_MODIFY_REQUEST);\n  stream.writeOctetString(dn);\n  stream.writeStartSequence();\n  for (  RawModification mod : modifications) {\n    mod.write(stream);\n  }\n  stream.writeEndSequence();\n  stream.writeEndSequence();\n}\n", "nl": "Writes this protocol op to an ASN.1 output stream.", "id": "58083"}
{"code": "public Builder removeAllAttributes(){\n  this.attributeOIDs.clear();\n  return this;\n}\n", "nl": "Removes all attribute types the matching rule applies to.", "id": "26409"}
{"code": "public int size(){\n  return size;\n}\n", "nl": "Returns the number of key-value mappings in this map.", "id": "51299"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptionMethodType.OAEPparams createEncryptionMethodTypeOAEPparams() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptionMethodTypeImpl.OAEPparamsImpl();\n}\n", "nl": "Create an instance of EncryptionMethodTypeOAEPparams", "id": "42231"}
{"code": "public com.sun.identity.saml2.jaxb.metadataextquery.AuthnQueryDescriptorType createAuthnQueryDescriptorType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadataextquery.impl.AuthnQueryDescriptorTypeImpl();\n}\n", "nl": "Create an instance of AuthnQueryDescriptorType", "id": "10986"}
{"code": "public void registerObserver(IndexChangeObserver observer){\n  observers.add(observer);\n}\n", "nl": "Registers an observer to receive index change notifications.", "id": "22278"}
{"code": "@NonNull public final Agera observeOnMain(){\n  return observeOn(Looper.getMainLooper());\n}\n", "nl": "Makes sure update() signals are called on the main thread.", "id": "40205"}
{"code": "public void addAttribute(String name,String type,String value){\n  names.add(name);\n  types.add(type);\n  values.add(value);\n}\n", "nl": "Add an attribute to an attribute list. <p>This method is provided for SAX parser writers, to allow them to build up an attribute list incrementally before delivering it to the application.</p>", "id": "5697"}
{"code": "public OIDCIdTokenConfigBuilder claimMap(Map<String,String> claimMap){\n  this.claimMap=Collections.unmodifiableMap(claimMap);\n  return this;\n}\n", "nl": "Contains the mapping of OIDC token claim names (Map keys) to local OpenAM attributes (Map values) in configured data stores. The keys in the map will be claim entries in the issued OIDC token, and the value of these claims will be the principal attribute state resulting from LDAP datastore lookup of the map values. If no values are returned from the the LDAP datastore lookup of the attribute corresponding to the map value, no claim will be set in the issued OIDC token", "id": "47686"}
{"code": "public AttributeFilter includeAttribute(final String attributeDescription){\n  return includeAttribute(attributeDescription,Schema.getDefaultSchema());\n}\n", "nl": "Specifies that the named attribute should be included in filtered entries. The attribute will be decoded using the default schema. See the class description for details regarding the types of supported attribute description.", "id": "24913"}
{"code": "@Override public void onAlarm(Alarm alarm){\n  onDragOver(mDragObject,1);\n}\n", "nl": "Page scroll is complete.", "id": "15378"}
{"code": "public void close(){\n  isClosed=true;\n  impl.close();\n}\n", "nl": "Closes this UDP datagram socket and all possibly associated channels.", "id": "24030"}
{"code": "protected CharArrayBuffer initBuffer(CharArrayBuffer buffer){\n  if (buffer != null) {\n    buffer.clear();\n  }\n else {\n    buffer=new CharArrayBuffer(64);\n  }\n  return buffer;\n}\n", "nl": "Obtains a buffer for formatting.", "id": "21948"}
{"code": "protected static ExifParser parse(InputStream inputStream,int options,ExifInterface iRef) throws IOException, ExifInvalidFormatException {\n  return new ExifParser(inputStream,options,iRef);\n}\n", "nl": "Parses the the given InputStream with the given options", "id": "34427"}
{"code": "public static ReadableByteChannel newChannel(final InputStream in){\n  checkNotNull(in,\"in\");\n  if (in instanceof FileInputStream && FileInputStream.class.equals(in.getClass())) {\n    return ((FileInputStream)in).getChannel();\n  }\n  return new ReadableByteChannelImpl(in);\n}\n", "nl": "Constructs a channel that reads bytes from the given stream. <p> The resulting channel will not be buffered; it will simply redirect its I/O operations to the given stream.  Closing the channel will in turn cause the stream to be closed.  </p>", "id": "20427"}
{"code": "public BindOperation processSimpleBind(String rawBindDN,String password){\n  return processSimpleBind(ByteString.valueOfUtf8(rawBindDN),ByteString.valueOfUtf8(password),null);\n}\n", "nl": "Processes an internal bind operation with the provided information.  Note that regardless of whether the bind is successful, the authentication state for this internal connection will not be altered in any way.", "id": "28446"}
{"code": "public boolean hasFeature(String feature,String version){\n  if (feature.equals(\"Core\")) {\n    return version == null || version.equals(\"1.0\") || version.equals(\"2.0\");\n  }\n  return false;\n}\n", "nl": "Test if the DOM implementation implements a specific feature.", "id": "17653"}
{"code": "@Override public void toString(StringBuilder buffer){\n  buffer.append(\"LDAPPostReadResponseControl(criticality=\");\n  buffer.append(isCritical());\n  buffer.append(\",entry=\");\n  searchEntry.toSingleLineString(buffer);\n  buffer.append(\")\");\n}\n", "nl": "Appends a string representation of this LDAP post-read response control to the provided buffer.", "id": "53298"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.GenerationElement createGenerationElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.GenerationElementImpl();\n}\n", "nl": "Create an instance of GenerationElement", "id": "31530"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.KeyStorageElement createKeyStorageElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeyStorageElementImpl();\n}\n", "nl": "Create an instance of KeyStorageElement", "id": "58164"}
{"code": "public void addBundlingDescriptorImports(ModelTypeTable typeTable){\n}\n", "nl": "Adds the imports used in the implementation of bundling descriptors.", "id": "37465"}
{"code": "@SuppressWarnings(\"unused\") static <T>Promise<List<T>> blockingPromiseList(Class<T> componentType){\n  return new BlockingPromise<>();\n}\n", "nl": "Generic list promise. Added to make static imports possible. Create a blocking promise. NOTE BLOCKING PROMISES ARE FOR LEGACY INTEGRATION AND TESTING ONLY!!!", "id": "57597"}
{"code": "public static boolean addMissingRDNAttributes(){\n  return directoryServer.addMissingRDNAttributes;\n}\n", "nl": "Indicates whether the Directory Server should automatically add missing RDN attributes to an entry whenever it is added.", "id": "8368"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(elementsetattributens03.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "28240"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.SSODescriptorType createSSODescriptorType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.SSODescriptorTypeImpl();\n}\n", "nl": "Create an instance of SSODescriptorType", "id": "11039"}
{"code": "public void add(int index,E element){\n  rangeCheckForAdd(index);\n  ensureCapacityInternal(size + 1);\n  System.arraycopy(elementData,index,elementData,index + 1,size - index);\n  elementData[index]=element;\n  size++;\n}\n", "nl": "Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).", "id": "16787"}
{"code": "public StringBuilder encodeBody(StringBuilder buffer){\n  return buffer.append(Integer.toString(majorVersion)).append(DOT).append(Integer.toString(minorVersion));\n}\n", "nl": "Return canonical form.", "id": "20973"}
{"code": "static public void assertTrue(String message,boolean condition){\n  if (!condition)   fail(message);\n}\n", "nl": "Asserts that a condition is true. If it isn't it throws an AssertionFailedError with the given message.", "id": "17961"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(getElementsByTagNameNS03.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "15242"}
{"code": "public static String parseLastModifDate(final File file){\n  Date date=new Date(file.lastModified());\n  DateFormat dateFormat=new SimpleDateFormat(\"yyyyMMddHHmm\");\n  return dateFormat.format(date);\n}\n", "nl": "Parse date with pattern yyyyMMddHHmm. Pattern is used in get file command response XML.", "id": "40346"}
{"code": "@Override public String findRoleMapping(String role){\n  String realRole=null;\nsynchronized (roleMappings) {\n    realRole=roleMappings.get(role);\n  }\n  if (realRole != null)   return (realRole);\n else   return (role);\n}\n", "nl": "For the given security role (as used by an application), return the corresponding role name (as defined by the underlying Realm) if there is one.  Otherwise, return the specified role unchanged.", "id": "49927"}
{"code": "public Obligation createObligation(Element elem) throws XACMLException {\n  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.REQUEST,elem);\n  if (obj == null) {\n    return new ObligationImpl(elem);\n  }\n else {\n    return (Obligation)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>Obligation</code>. The return object is immutable.", "id": "25386"}
{"code": "public static Packet toPacket(byte[] octets){\n  int packetLen=octets[3] & 0xFF;\n  packetLen|=((octets[2] << 8) & 0xFF00);\n  return toPacket(ByteBuffer.wrap(octets,0,packetLen));\n}\n", "nl": "Unmarshalls from an array the octet format of rfc 2865 and creates the corresponding package and instantiates its embedded authenticator and attributes.", "id": "8577"}
{"code": "private void resetToXMLSAXHandler(){\n  this.m_escapeSetting=true;\n}\n", "nl": "Reset all of the fields owned by ToXMLSAXHandler class", "id": "23426"}
{"code": "public InternalSession newInternalSession(String domain,boolean stateless){\n  try {\n    final SessionID sessionID=generateSessionId(domain);\n    return generateInternalSession(sessionID,stateless);\n  }\n catch (  SessionException e) {\n    sessionDebug.error(\"Error creating new session\",e);\n    return null;\n  }\n}\n", "nl": "Creates a new Internal Session", "id": "13848"}
{"code": "public void forceStop(){\nsynchronized (this.eventMutex) {\n    this.isStopped=true;\n    this.refCount=0;\n    this.eventMutex.notify();\n  }\n}\n", "nl": "Brutally stop the event scanner. This does not wait for the refcount to go to 0.", "id": "28002"}
{"code": "public void collectDialogTermiatedEvent(SipProvider provider) throws TooManyListenersException {\n  initCollectors(provider);\n  provider.addSipListener(dialogTerminationCollector);\n}\n", "nl": "Collects the first javax.sip.TransactionTerminated fired by the specified provider. All subsequent events and events other than javax.sip.TimeoutEvent are ignored.", "id": "29500"}
{"code": "private TemplateEntry templateEntry(DN dn){\n  TemplateEntry templateEntry=mock(TemplateEntry.class);\n  when(templateEntry.getDN()).thenReturn(dn);\n  return templateEntry;\n}\n", "nl": "Helper method to build a template entry with the provided DN.", "id": "19475"}
{"code": "@Override public String toString(){\n  return reason.toString();\n}\n", "nl": "Returns a string describing this event.", "id": "14774"}
{"code": "public void uninstallUI(JComponent a){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);\n  }\n}\n", "nl": "Invokes the <code>uninstallUI</code> method on each UI handled by this object.", "id": "11056"}
{"code": "public void addArgument(final Argument argument){\n  if (!args.contains(argument)) {\n    args.add(argument);\n  }\n}\n", "nl": "Adds an argument to the list of the command builder.", "id": "3167"}
{"code": "private void checkSaveButton(){\n  if (!ignoreCheckSave && index != null) {\n    saveChanges.setEnabled(!authenticationRequired(getInfo().getServerDescriptor()) && isModified());\n  }\n}\n", "nl": "Checks the enabling state of the save button.", "id": "21949"}
{"code": "private final boolean shouldCollectText(){\n  return collectText[stackTop];\n}\n", "nl": "Returns true if we should be collecting characters in the current element.", "id": "57298"}
{"code": "public void mouseMoved(MouseEvent e){\n  getHandler().mouseMoved(e);\n}\n", "nl": "Invoked when the mouse button has been moved on a component (with no buttons no down).", "id": "10016"}
{"code": "public ProductService deleteAllProducts(Handler<AsyncResult<Void>> resultHandler){\n  delegate.deleteAllProducts(resultHandler);\n  return this;\n}\n", "nl": "Delete all products from the persistence", "id": "8335"}
{"code": "public Period negated(){\n  return multipliedBy(-1);\n}\n", "nl": "Returns a new instance with each amount in this period negated. <p> This returns a period with each of the years, months and days units individually negated. For example, a period of \"2 years, -3 months and 4 days\" will be negated to \"-2 years, 3 months and -4 days\". No normalization is performed.", "id": "6596"}
{"code": "@Override public void onPause(){\n  super.onPause();\n  mDelegate.detachView();\n  if (getActivity().isFinishing()) {\n    mDelegate.destroyPresenter();\n  }\n}\n", "nl": "Since onDestroy() isn't guaranteed to be called, we check if the current activity is finishing", "id": "47638"}
{"code": "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {\n  return execute(xctxt,xctxt.getCurrentNode());\n}\n", "nl": "Execute this pattern step, including predicates.", "id": "38138"}
{"code": "public void warning(SAXParseException e) throws SAXException {\n  if (errorHandler != null) {\n    errorHandler.warning(e);\n  }\n}\n", "nl": "Filter a warning event.", "id": "31950"}
{"code": "public static void reload(){\n  server.reload();\n}\n", "nl": "Reloads the server, refreshing settings and plugin information.", "id": "18681"}
{"code": "private double check_neck_down_at_dest_pin(ExpandRoomComplete p_room){\n  Collection<ExpandDoorItem> target_doors=p_room.get_target_doors();\n  for (  ExpandDoorItem curr_target_door : target_doors) {\n    if (curr_target_door.item instanceof board.items.BrdAbitPin) {\n      return ((board.items.BrdAbitPin)curr_target_door.item).get_trace_neckdown_halfwidth(p_room.get_layer());\n    }\n  }\n  return 0;\n}\n", "nl": "Checks, if the next roomm contains a destination pin, where evtl. neckdown is necessary. Return the neck down width in this case, or 0, if no such pin waas found,", "id": "34852"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorType createAuthenticatorType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatorTypeImpl();\n}\n", "nl": "Create an instance of AuthenticatorType", "id": "57220"}
{"code": "public boolean isExists() throws SSOException {\n  if (rfcDN == null) {\n    return false;\n  }\n  SSOTokenManager.getInstance().validateToken(token);\n  if (debug.messageEnabled()) {\n    debug.message(\"AMObjectImpl.isExists(): DN=\" + entryDN);\n  }\n  return dsServices.doesEntryExists(token,entryDN);\n}\n", "nl": "Checks if the entry exists in the directory or not. First a syntax check is done on the DN string corresponding to the entry. If the DN syntax is valid, a directory call will be made to check for the existence of the entry. <p> <b>NOTE:</b> This method internally invokes a call to the directory to verify the existence of the entry. There could be a performance overhead. Hence, please use your discretion while using this method.", "id": "8975"}
{"code": "public boolean hasQueuedThreads(){\n  return sync.hasQueuedThreads();\n}\n", "nl": "Returns <code>true</code> if there is at least one thread waiting to acquire the shared lock, otherwise returns <code>false</code>.", "id": "2724"}
{"code": "public boolean isOutboundOffhook(){\n  return (currentState == outboundOffHookState);\n}\n", "nl": "Check if phone is off-hook during an outbound call.", "id": "27978"}
{"code": "private boolean hasNext(Pattern pattern){\n  if (!hasNext()) {\n    return false;\n  }\n  Matcher matcher=pattern.matcher(gserValue.substring(pos,length));\n  return matcher.find();\n}\n", "nl": "Determines if the remaining GSER String matches the provided pattern.", "id": "18169"}
{"code": "public long length() throws java.io.IOException {\n  return byteSource.length();\n}\n", "nl": "Gets the total amount of bytes in the source.", "id": "4961"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.IDValueElement createIDValueElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.IDValueElementImpl();\n}\n", "nl": "Create an instance of IDValueElement", "id": "41581"}
{"code": "public static String strReplaceAll(String orig,String pattern,String str){\n  return orig.replaceAll(pattern,Matcher.quoteReplacement(str));\n}\n", "nl": "Returns substituted string.", "id": "704"}
{"code": "public Map<String,String> tags(){\n  return tags;\n}\n", "nl": "Measurement tags.", "id": "42000"}
{"code": "public static void deregisterAuthenticationPolicy(DN configEntryDN){\n  Reject.ifNull(configEntryDN);\nsynchronized (directoryServer.authenticationPolicies) {\n    if (directoryServer.defaultPasswordPolicyDN.equals(configEntryDN)) {\n      directoryServer.defaultPasswordPolicy=null;\n    }\n    AuthenticationPolicy oldPolicy=directoryServer.authenticationPolicies.remove(configEntryDN);\n    if (oldPolicy != null) {\n      oldPolicy.finalizeAuthenticationPolicy();\n    }\n  }\n}\n", "nl": "Deregisters the provided authentication policy with the Directory Server. If no such policy is registered, then no action will be taken.", "id": "15853"}
{"code": "public static byte[] encodeString(String in,String charset){\n  byte[] rv=null;\n  try {\n    rv=in.getBytes(charset);\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n  return rv;\n}\n", "nl": "Encode a string into the current character set.", "id": "27643"}
{"code": "public boolean is_StateSelectedItem(){\n  if (interactive_state == null)   return false;\n  return interactive_state instanceof StateSelectedItem;\n}\n", "nl": "returns true if the iteractive_State is an istance of StateSelectedItem", "id": "32544"}
{"code": "public static String tokenToString(byte token){\n  return (token == Token.END) ? \"END\" : TOKEN_TYPES[token];\n}\n", "nl": "Converts a token type constant to a token type string.", "id": "44245"}
{"code": "public void stepOver(){\n  if (!isRunning())   return;\n  Line previousLine=currentLine;\n  do {\n    int nextMethodID=trace.getNextEventIDInMethod(currentEventID);\n    if (nextMethodID < 0)     nextMethodID=trace.getNextEventIDInThread(currentEventID);\n    setCurrentEventID(nextMethodID);\n  }\n while (isRunning() && currentLine != null && currentLine == previousLine);\n}\n", "nl": "Find the next event in this method on a different line than we started.", "id": "5802"}
{"code": "<T>List<T> concatValues(final T[]... data){\n  final List<T> rv=new ArrayList<>();\n  for (  T[] values : data) {\n    rv.addAll(Arrays.asList(values));\n  }\n  return rv;\n}\n", "nl": "Helper for concatenating several arrays.", "id": "12151"}
{"code": "public Environment createEnvironment(){\n  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.ENVIRONMENT);\n  if (obj == null) {\n    return new EnvironmentImpl();\n  }\n else {\n    return (Environment)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>Environment</code>.", "id": "20852"}
{"code": "public Duration minusMillis(long millisToSubtract){\n  return (millisToSubtract == Long.MIN_VALUE ? plusMillis(Long.MAX_VALUE).plusMillis(1) : plusMillis(-millisToSubtract));\n}\n", "nl": "Returns a copy of this duration with the specified duration in milliseconds subtracted. <p> This instance is immutable and unaffected by this method call.", "id": "13208"}
{"code": "public boolean equals(Object other){\n  return other != null && (other instanceof PrincipalTokenRestriction) && this.dn.equals(((PrincipalTokenRestriction)other).dn);\n}\n", "nl": "Compares this DN to the specified object. The result is true if and only if the argument is not null, and <code>other</code> is the same as this restriction.", "id": "42684"}
{"code": "public void startDocument() throws SAXException {\n  if (contentHandler != null) {\n    contentHandler.startDocument();\n  }\n}\n", "nl": "Adapter implementation method; do not call. Adapt a SAX1 start document event.", "id": "39933"}
{"code": "static Object instantiate(Class<?> sibling,String className) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n  ClassLoader cl=sibling.getClassLoader();\n  Class<?> cls=ClassFinder.findClass(className,cl);\n  return cls.newInstance();\n}\n", "nl": "Try to create an instance of a named class. First try the classloader of \"sibling\", then try the system classloader then the class loader of the current Thread.", "id": "28695"}
{"code": "protected void paintChild(Graphics g,Rectangle alloc,int index){\n  listPainter.paint(g,alloc.x,alloc.y,alloc.width,alloc.height,this,index);\n  super.paintChild(g,alloc,index);\n}\n", "nl": "Paints one of the children; called by paint().  By default that is all it does, but a subclass can use this to paint things relative to the child.", "id": "7356"}
{"code": "public <T>LocalizableMessage print(PropertyDefinition<T> pd){\n  DefaultVisitor<T> v=new DefaultVisitor<>();\n  return pd.getDefaultBehaviorProvider().accept(v,pd);\n}\n", "nl": "Get a user-friendly description of a property's default behavior.", "id": "19444"}
{"code": "public static boolean isCookieSecure(){\n  return secureCookie;\n}\n", "nl": "Gets property value of \"com.iplanet.am.cookie.secure\"", "id": "7775"}
{"code": "public void includeClassName(QualifiedClassName classname){\n  if (classname == null)   throw new NullPointerException(\"Can't get the class id of null\");\n  getClassID(classname);\n}\n", "nl": "This is synchronized so that two threads don't assign a class the same id", "id": "49215"}
{"code": "public void uninstallUI(JComponent a){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);\n  }\n}\n", "nl": "Invokes the <code>uninstallUI</code> method on each UI handled by this object.", "id": "26175"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n}\n", "nl": "Ensures that the Directory Server is running.", "id": "24356"}
{"code": "public boolean equals(Object obj){\n  if (obj == null)   return false;\n  if (!super.equals(obj))   return false;\n  RuleBasedCollator other=(RuleBasedCollator)obj;\n  return (getRules().equals(other.getRules()));\n}\n", "nl": "Compares the equality of two collation objects.", "id": "23841"}
{"code": "void fullyUnlock(){\n  takeLock.unlock();\n  putLock.unlock();\n}\n", "nl": "Unlocks to allow both puts and takes.", "id": "30190"}
{"code": "public boolean is_trace_obstacle(BrdItem p_item){\n  for (int index=0; index < net_nos_arr.length; ++index) {\n    if (!p_item.is_trace_obstacle(net_nos_arr[index]))     return false;\n  }\n  return true;\n}\n", "nl": "The given item is not an obstacle for the list of nets if there is at least one net usable So, to be an obstacle ALL nets should be an obstacle", "id": "29262"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.IdentificationType createIdentificationType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.IdentificationTypeImpl();\n}\n", "nl": "Create an instance of IdentificationType", "id": "28404"}
{"code": "public static SubentriesRequestControl newControl(final boolean isCritical,final boolean visibility){\n  if (isCritical) {\n    return visibility ? CRITICAL_VISIBLE_INSTANCE : CRITICAL_INVISIBLE_INSTANCE;\n  }\n else {\n    return visibility ? NONCRITICAL_VISIBLE_INSTANCE : NONCRITICAL_INVISIBLE_INSTANCE;\n  }\n}\n", "nl": "Creates a new sub-entries request control having the provided criticality and sub-entry visibility.", "id": "50249"}
{"code": "public void removePropertyChangeListener(PropertyChangeListener listener){\n  super.removePropertyChangeListener(listener);\n}\n", "nl": "Removes a PropertyChangeListener from the listener list. This removes a PropertyChangeListener that was registered for all properties.", "id": "38157"}
{"code": "private static int nextIndex(int i,int len){\n  return ((i + 1 < len) ? i + 1 : 0);\n}\n", "nl": "Increment i modulo len.", "id": "51078"}
{"code": "private void initName(String className,String member,ObjectName objectName){\n  setClassName(className);\n  setMember(member);\n  this.objectName=objectName;\n}\n", "nl": "Assign fields based on className, member, and objectName parameters.", "id": "50925"}
{"code": "public static long checksumCRC32(File file) throws IOException {\n  CRC32 crc=new CRC32();\n  checksum(file,crc);\n  return crc.getValue();\n}\n", "nl": "Computes the checksum of a file using the CRC32 checksum routine. The value of the checksum is returned.", "id": "21606"}
{"code": "public synchronized void start() throws Exception {\n  if (running) {\n    throw new IllegalStateException(\"Monitor is already running\");\n  }\n  for (  FileAlterationObserver observer : observers) {\n    observer.initialize();\n  }\n  running=true;\n  if (threadFactory != null) {\n    thread=threadFactory.newThread(this);\n  }\n else {\n    thread=new Thread(this);\n  }\n  thread.start();\n}\n", "nl": "Start monitoring.", "id": "13628"}
{"code": "public void removeAttribute(Attr attr){\n  checkCache();\n  if (m_attrSet == null || m_attrSet.size() == 0) {\n    return;\n  }\n  modify(attr,ModificationType.DELETE);\n}\n", "nl": "Removes attribute value for the entity. <P> IMPORTANT: To make the changes persistent, you need to call the save method to save the changes. <P>", "id": "12854"}
{"code": "public void resetToPreferredSizes(){\n  SplitPaneUI ui=getUI();\n  if (ui != null) {\n    ui.resetToPreferredSizes(this);\n  }\n}\n", "nl": "Lays out the <code>JSplitPane</code> layout based on the preferred size of the children components. This will likely result in changing the divider location.", "id": "21126"}
{"code": "public void write(byte[] b,int offset,int length) throws java.io.IOException {\n  out.write(b,offset,length);\n  written+=length;\n}\n", "nl": "Writes the array of bytes to the output stream and increments  the number of bytes written by the size of the array.", "id": "51900"}
{"code": "public String toString(){\n  StringBuffer uriSpecString=new StringBuffer();\n  if (m_scheme != null) {\n    uriSpecString.append(m_scheme);\n    uriSpecString.append(':');\n  }\n  uriSpecString.append(getSchemeSpecificPart());\n  return uriSpecString.toString();\n}\n", "nl": "Get the URI as a string specification. See RFC 2396 Section 5.2.", "id": "19851"}
{"code": "public void paintTabbedPaneTabBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex,int orientation){\n  paintTabbedPaneTabBorder(context,g,x,y,w,h,tabIndex);\n}\n", "nl": "Paints the border of a tab of a tabbed pane. This implementation invokes the method of the same name without the orientation.", "id": "18748"}
{"code": "public static final boolean isTokenChar(char c){\n  if (isAlphaDigit(c))   return true;\n else switch (c) {\ncase '-':\ncase '.':\ncase '!':\ncase '%':\ncase '*':\ncase '_':\ncase '+':\ncase '`':\ncase '\\'':\ncase '~':\n    return true;\ndefault :\n  return false;\n}\n}\n", "nl": "JvB: utility function added to validate tokens", "id": "30420"}
{"code": "public boolean isRequired(){\n  return required;\n}\n", "nl": "If addressing is enabled, this property determines whether the endpoint requires WS-Addressing. If required is true, WS-Addressing headers MUST be present on incoming and outgoing messages.", "id": "55402"}
{"code": "public boolean after(OmniDate compareDate){\n  return value.after(compareDate.getDate());\n}\n", "nl": "return true if this time is after the <code>compareDate</code>", "id": "33403"}
{"code": "public double magnitude(){\n  return Math.sqrt(this.dot(this));\n}\n", "nl": "Magnitude (as a vector).", "id": "22958"}
{"code": "public int count(){\n  return array.length;\n}\n", "nl": "Returns the size of the array.", "id": "30246"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.protocol.AuthorizationDecisionQueryType createAuthorizationDecisionQueryType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.AuthorizationDecisionQueryTypeImpl();\n}\n", "nl": "Create an instance of AuthorizationDecisionQueryType", "id": "54656"}
{"code": "public void installUI(JComponent c){\n  optionPane=(JOptionPane)c;\n  installDefaults();\n  optionPane.setLayout(createLayoutManager());\n  installComponents();\n  installListeners();\n  installKeyboardActions();\n}\n", "nl": "Installs the receiver as the L&amp;F for the passed in <code>JOptionPane</code>.", "id": "27468"}
{"code": "public static String decode(String encoded){\n  return decode(encoded,encryptor);\n}\n", "nl": "Decode an encoded string", "id": "14891"}
{"code": "public static void addClickTooltipListener(JComponent comp){\n  comp.addMouseListener(new ClickTooltipDisplayer());\n}\n", "nl": "Adds a click tool tip listener to the provided component.", "id": "10947"}
{"code": "private void markCacheComplete(){\n  NodeVector nv=getVector();\n  if (nv != null) {\n    m_cache.setCacheComplete(true);\n  }\n}\n", "nl": "If this NodeSequence has a cache, mark that it is complete. This method should be called after the iterator is exhausted.", "id": "33414"}
{"code": "public synchronized StringBuffer insert(int index,char[] chars){\n  insert0(index,chars);\n  return this;\n}\n", "nl": "Inserts the character array into this buffer at the specified offset.", "id": "8894"}
{"code": "@Override public boolean isValidateRoot(){\n  return true;\n}\n", "nl": "Returns true, so that calls to <code>revalidate</code> on any descendant of this <code>JSplitPane</code> will cause a request to be queued that will validate the <code>JSplitPane</code> and all its descendants.", "id": "14218"}
{"code": "public static boolean isNetworkConnected(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();\n  return networkInfo != null && networkInfo.isConnected();\n}\n", "nl": "Get Network can connect to Internet.", "id": "14372"}
{"code": "public void handleButton3Request(RequestInvocationEvent event){\n  FederationViewBean vb=(FederationViewBean)getViewBean(FederationViewBean.class);\n  backTrail();\n  passPgSessionMap(vb);\n  vb.forwardTo(getRequestContext());\n}\n", "nl": "Handles reset request.", "id": "55562"}
{"code": "private static boolean isHex(char p_char){\n  return (isDigit(p_char) || (p_char >= 'a' && p_char <= 'f') || (p_char >= 'A' && p_char <= 'F'));\n}\n", "nl": "Determine whether a character is a hexadecimal character.", "id": "44008"}
{"code": "public String toString(){\n  return m_currentPattern;\n}\n", "nl": "Return the expression as a string for diagnostics.", "id": "53"}
{"code": "public boolean isIdentity(){\n  return true;\n}\n", "nl": "Returns <code>true</code> is this subject is an identity object.", "id": "54045"}
{"code": "public void shutdown(){\n}\n", "nl": "Shuts down the instance of OpenAM", "id": "43484"}
{"code": "@Override public boolean isLeapYear(long prolepticYear){\n  return IsoChronology.INSTANCE.isLeapYear(prolepticYear + YEARS_DIFFERENCE);\n}\n", "nl": "Checks if the specified year is a leap year. <p> Minguo leap years occur exactly in line with ISO leap years. This method does not validate the year passed in, and only has a well-defined result for years in the supported range.", "id": "527"}
{"code": "public void visitClassType(String name){\n}\n", "nl": "Starts the visit of a signature corresponding to a class or interface type.", "id": "55729"}
{"code": "public InputStream newInputStream(int index) throws IOException {\nsynchronized (DiskLruCache.this) {\n    if (entry.currentEditor != this) {\n      throw new IllegalStateException();\n    }\n    if (!entry.readable) {\n      return null;\n    }\n    try {\n      return new FileInputStream(entry.getCleanFile(index));\n    }\n catch (    FileNotFoundException e) {\n      return null;\n    }\n  }\n}\n", "nl": "Returns an unbuffered input stream to read the last committed value, or null if no value has been committed.", "id": "54220"}
{"code": "@Override public void addChild(Container child){\n  if (Globals.IS_SECURITY_ENABLED) {\n    PrivilegedAction<Void> dp=new PrivilegedAddChild(child);\n    AccessController.doPrivileged(dp);\n  }\n else {\n    addChildInternal(child);\n  }\n}\n", "nl": "Add a new child Container to those associated with this Container, if supported.  Prior to adding this Container to the set of children, the child's <code>setParent()</code> method must be called, with this Container as an argument.  This method may thrown an <code>IllegalArgumentException</code> if this Container chooses not to be attached to the specified Container, in which case it is not added", "id": "43643"}
{"code": "public boolean isBeingPowered(){\n  return (getData() & 0x8) != 0;\n}\n", "nl": "Checks if the comparator is being powered", "id": "23794"}
{"code": "public static long countSubstr(final String value,final String subStr){\n  return countSubstr(value,subStr,true,false);\n}\n", "nl": "Count the number of times substr appears in value", "id": "26423"}
{"code": "LambdaForm customize(MethodHandle mh){\n  LambdaForm customForm=new LambdaForm(debugName,arity,names,result,forceInline,mh);\n  if (COMPILE_THRESHOLD > 0 && isCompiled) {\n    customForm.compileToBytecode();\n  }\n  customForm.transformCache=this;\n  return customForm;\n}\n", "nl": "Customize LambdaForm for a particular MethodHandle", "id": "164"}
{"code": "@Override protected boolean checkParam(final String reqParam) throws ConnectorException {\n  if (reqParam == null || reqParam.equals(\"\")) {\n    return true;\n  }\n  if (Pattern.compile(Constants.INVALID_PATH_REGEX).matcher(reqParam).find()) {\n    return false;\n  }\n  return true;\n}\n", "nl": "for error command there should be no exection throw becouse there is no more excetpion handlers.", "id": "43441"}
{"code": "public static boolean assertGUID(final int[] value){\n  return value != null && value.length == GUID.GUID_LENGTH;\n}\n", "nl": "This method checks if the given <code>value</code> is matching the GUID specification of ASF streams. <br>", "id": "2201"}
{"code": "public final <T>T readValidatedInput(final LocalizableMessage prompt,final ValidationCallback<T> validator) throws ClientException {\n  while (true) {\n    final String response=readLineOfInput(prompt);\n    final T value=validator.validate(this,response);\n    if (value != null) {\n      return value;\n    }\n  }\n}\n", "nl": "Interactively prompts for user input and continues until valid input is provided.", "id": "31737"}
{"code": "public static WindowFocusListener add(WindowFocusListener a,WindowFocusListener b){\n  return (WindowFocusListener)addInternal(a,b);\n}\n", "nl": "Adds window-focus-listener-a with window-focus-listener-b and returns the resulting multicast listener.", "id": "3577"}
{"code": "public void installUI(JComponent a){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).installUI(a);\n  }\n}\n", "nl": "Invokes the <code>installUI</code> method on each UI handled by this object.", "id": "26052"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodeentityreferencenodetype.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "6316"}
{"code": "public WorldCreator generateStructures(boolean generate){\n  this.generateStructures=generate;\n  return this;\n}\n", "nl": "Sets whether or not worlds created or loaded with this creator will have structures.", "id": "39654"}
{"code": "public Obligations createObligations(String xml) throws XACMLException {\n  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.RESOURCE,xml);\n  if (obj == null) {\n    return new ObligationsImpl(xml);\n  }\n else {\n    return (Obligations)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>Obligations</code> The return object is immutable.", "id": "8000"}
{"code": "@Before public void init() throws IOException {\n  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();\n  git=new Git(repository);\n  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation());\n  unchecked(null);\n}\n", "nl": "Prepare common variables to access the git repository.", "id": "40009"}
{"code": "public void paintEditorPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the background of an editor pane.", "id": "42160"}
{"code": "public ConfigParameters serverRootDirectory(String dir){\n  serverRootDirectory=dir;\n  return this;\n}\n", "nl": "Sets the server root directory of the directory server. <p> The server root is the location where the binaries and default configuration is stored.", "id": "9654"}
{"code": "public static boolean isScreenW(int widthDp){\n  DisplayMetrics displayMetrics=Resources.getSystem().getDisplayMetrics();\n  float screenWidth=displayMetrics.widthPixels / displayMetrics.density;\n  return screenWidth >= widthDp;\n}\n", "nl": "Return true if the width in DP of the device is equal or greater than the given value", "id": "49065"}
{"code": "public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  doGetPost(request,response);\n}\n", "nl": "Handles the HTTP GET request.", "id": "48856"}
{"code": "public void init(Map<String,Set<String>> parameters){\n}\n", "nl": "Initializes the condition object.", "id": "32378"}
{"code": "public void reset(){\n  cache.clear();\n  cacheStart=0;\n  length=0L;\n}\n", "nl": "Erase the entire cache contents and reset the length to 0. The cache object may subsequently be reused as though it had just been allocated.", "id": "20028"}
{"code": "public void remove(String name){\n  int index=indexOf(name);\n  if (index != -1) {\n    _attrs.remove(index);\n  }\n}\n", "nl": "Removes an exisiting attribute", "id": "26098"}
{"code": "public XMLString toLowerCase(){\n  return new XMLStringDefault(m_str.toLowerCase());\n}\n", "nl": "Converts all of the characters in this <code>String</code> to lower case using the rules of the default locale, which is returned by <code>Locale.getDefault</code>. <p>", "id": "44266"}
{"code": "public static ComponentUI createUI(JComponent b){\n  return new SynthRadioButtonMenuItemUI();\n}\n", "nl": "Creates a new UI object for the given component.", "id": "8247"}
{"code": "public static void dropTable(SQLiteDatabase db,boolean ifExists){\n  String sql=\"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + \"\\\"GREEN_STRATEGY\\\"\";\n  db.execSQL(sql);\n}\n", "nl": "Drops the underlying database table.", "id": "24485"}
{"code": "public boolean hasChildrenCount(){\n  return fieldSetFlags()[4];\n}\n", "nl": "Checks whether the 'childrenCount' field has been set.", "id": "27541"}
{"code": "public java.lang.Object read_abstract_interface(java.lang.Class clz){\n  throw new org.omg.CORBA.NO_IMPLEMENT();\n}\n", "nl": "Unmarshal the class object or the stub class corresponding to the passed type.", "id": "35163"}
{"code": "public boolean isVisible(){\n  return popup != null;\n}\n", "nl": "Returns true if the popup menu is visible (currently being displayed).", "id": "40466"}
{"code": "protected synchronized void beforeStart(){\n  try {\n    fixDocBase();\n  }\n catch (  IOException e) {\n    log.error(sm.getString(\"contextConfig.fixDocBase\",context.getName()),e);\n  }\n  antiLocking();\n}\n", "nl": "Process a \"before start\" event for this Context.", "id": "46313"}
{"code": "public boolean trace_widths_are_layer_dependent(int p_net_no){\n  int compare_width=get_trace_half_width(p_net_no,0);\n  for (int iindex=1; iindex < layer_structure.size(); ++iindex) {\n    if (get_trace_half_width(p_net_no,iindex) != compare_width) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Returns true, if the trace widths used for routing for the input net are equal on all layers. If p_net_no < 0, the default trace widths for all nets are checked.", "id": "38551"}
{"code": "@Override public final void clear() throws IOException {\n  if ((bufferSize == 0) && (out != null))   throw new IllegalStateException(getLocalizeMessage(\"jsp.error.ise_on_clear\"));\n  if (flushed)   throw new IOException(getLocalizeMessage(\"jsp.error.attempt_to_clear_flushed_buffer\"));\n  ensureOpen();\n  nextChar=0;\n}\n", "nl": "Discard the output buffer.", "id": "24825"}
{"code": "public Builder optionalAttributes(final String... attributeNamesOrOIDs){\n  this.optionalAttributeOIDs.addAll(asList(attributeNamesOrOIDs));\n  return this;\n}\n", "nl": "Adds the provided optional attributes to the list of attribute types that entries subject to this DIT content rule may contain.", "id": "29226"}
{"code": "@Override protected void doGet(final HttpServletRequest request,final HttpServletResponse response) throws ServletException, IOException {\n  request.setCharacterEncoding(\"UTF-8\");\n  response.setCharacterEncoding(\"UTF-8\");\n  getResponse(request,response,false);\n}\n", "nl": "Handling get requests.", "id": "1694"}
{"code": "protected void tearDown(){\n  try {\n    br.close();\n  }\n catch (  Exception e) {\n  }\n}\n", "nl": "Tears down the fixture, for example, close a network connection. This method is called after a test is executed.", "id": "53913"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n}\n", "nl": "Ensures that the Directory Server is running.", "id": "17690"}
{"code": "public PdfCanvas closeTag(){\n  return endMarkedContent();\n}\n", "nl": "Manually close a tag, ending a Marked Content sequence. Used primarily for Tagged PDF", "id": "18296"}
{"code": "public Name join(String identifier){\n  validateLowerUnderscore(identifier);\n  List<NamePiece> newPieceList=new ArrayList<>();\n  newPieceList.addAll(namePieces);\n  newPieceList.add(new NamePiece(identifier,CaseFormat.LOWER_UNDERSCORE));\n  return new Name(newPieceList);\n}\n", "nl": "Returns a new Name containing the pieces from this Name plus the given identifier added on the end.", "id": "15818"}
{"code": "public int end(String name){\n  return groups[getMatchedGroupIndex(name) * 2 + 1];\n}\n", "nl": "Returns the offset after the last character of the subsequence captured by the given <a href=\"Pattern.html#groupname\">named-capturing group</a> during the previous match operation.", "id": "40609"}
{"code": "public void cancelCellEditing(){\n  fireEditingCanceled();\n}\n", "nl": "Cancels editing.  This method calls <code>fireEditingCanceled</code>.", "id": "1515"}
{"code": "public synchronized boolean isRequestConsumable(SIPRequest dialogRequest){\n  if (dialogRequest.getMethod().equals(Request.ACK))   throw new RuntimeException(\"Illegal method\");\n  if (!this.isSequenceNumberValidation()) {\n    return true;\n  }\n  return remoteSequenceNumber < dialogRequest.getCSeq().getSeqNumber();\n}\n", "nl": "Return true if this request can be consumed by the dialog.", "id": "30640"}
{"code": "@Override public int available(){\n  return 0;\n}\n", "nl": "Amount of bytes still available in a buffer.", "id": "18038"}
{"code": "private void grow(){\n  m_allocatedSize*=2;\n  boolean newVector[]=new boolean[m_allocatedSize];\n  System.arraycopy(m_values,0,newVector,0,m_index + 1);\n  m_values=newVector;\n}\n", "nl": "Grows the size of the stack", "id": "29437"}
{"code": "public void startRecord(){\n  if (recordStatus == RecordStatus.RUNNING) {\n    throw new IllegalStateException(\"Record '\" + this + \"' is already running.\");\n  }\n  recordHistory.put(newDate(),RUNNING);\n  recordStatus=RecordStatus.RUNNING;\n}\n", "nl": "Start recording", "id": "43345"}
{"code": "public Enumeration preorderEnumeration(){\n  return new PreorderEnumeration(this);\n}\n", "nl": "Creates and returns an enumeration that traverses the subtree rooted at this node in preorder.  The first node returned by the enumeration's <code>nextElement()</code> method is this node.<P> Modifying the tree by inserting, removing, or moving a node invalidates any enumerations created before the modification.", "id": "36215"}
{"code": "public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory){\n  return new ThreadPoolExecutor(0,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),threadFactory);\n}\n", "nl": "Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available, and uses the provided ThreadFactory to create new threads when needed.", "id": "50904"}
{"code": "private void pushRun(int runBase,int runLen){\n  this.runBase[stackSize]=runBase;\n  this.runLen[stackSize]=runLen;\n  stackSize++;\n}\n", "nl": "Pushes the specified run onto the pending-run stack.", "id": "21437"}
{"code": "@Override public int hashCode(){\n  int result=algorithm.length();\n  for (  byte element : key) {\n    result+=element;\n  }\n  return result;\n}\n", "nl": "Returns the hash code of this <code>SecretKeySpec</code> object.", "id": "34708"}
{"code": "private boolean mustAdd(Syntax syntax){\n  String f=filter.getText().trim();\n  return f.length() == 0 || (FILTER_NAME.equals(filterAttribute.getSelectedItem()) && mustAdd(f,syntax.getOID(),syntax.getName()));\n}\n", "nl": "Check whether the provided attribute syntax must be added or not.", "id": "16659"}
{"code": "private String readStandardString(int length) throws java.io.IOException {\n  return raf.readString(length,PdfEncodings.WINANSI);\n}\n", "nl": "Reads a <CODE>String</CODE> from the font file as bytes using the Cp1252 encoding.", "id": "55742"}
{"code": "public boolean requiresTunnel(){\n  return route.address.sslSocketFactory != null && route.proxy.type() == Proxy.Type.HTTP;\n}\n", "nl": "Returns true if the HTTP connection needs to tunnel one protocol over another, such as when using HTTPS through an HTTP proxy. When doing so, we must avoid buffering bytes intended for the higher-level protocol.", "id": "1084"}
{"code": "public Duration minusDays(long daysToSubtract){\n  return (daysToSubtract == Long.MIN_VALUE ? plusDays(Long.MAX_VALUE).plusDays(1) : plusDays(-daysToSubtract));\n}\n", "nl": "Returns a copy of this duration with the specified duration in standard 24 hour days subtracted. <p> The number of days is multiplied by 86400 to obtain the number of seconds to subtract. This is based on the standard definition of a day as 24 hours. <p> This instance is immutable and unaffected by this method call.", "id": "1102"}
{"code": "public boolean isInMemory(){\n  return !isThresholdExceeded();\n}\n", "nl": "Determines whether or not the data for this output stream has been retained in memory.", "id": "58765"}
{"code": "@Override public void close() throws IOException {\nsynchronized (lock) {\n    out.close();\n  }\n}\n", "nl": "Closes this writer. This implementation closes the target writer.", "id": "21695"}
{"code": "public void skippedEntity(String name) throws SAXException {\n}\n", "nl": "Adapt a SAX2 skipped entity event.", "id": "52369"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorTransportProtocolElement createAuthenticatorTransportProtocolElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatorTransportProtocolElementImpl();\n}\n", "nl": "Create an instance of AuthenticatorTransportProtocolElement", "id": "25241"}
{"code": "@Override public boolean isField2(){\n  return _foo.isField2();\n}\n", "nl": "Returns <code>true</code> if this foo is field2.", "id": "18458"}
{"code": "@Override protected void doCatch(Throwable throwable){\n  exceptionHandler.handle(throwable,getResponse());\n}\n", "nl": "Handles any exception that is thrown when processing a OAuth2 authorization request.", "id": "39531"}
{"code": "public String toXMLString() throws SAML2Exception {\n  return this.toXMLString(true,false);\n}\n", "nl": "Returns a String representation", "id": "50070"}
{"code": "public boolean validate(String value,String rule){\n  return validate(value);\n}\n", "nl": "Determines whether the specified string is a valid DN", "id": "23214"}
{"code": "TransferHandler.DropLocation dropLocationForPoint(Point p){\n  return null;\n}\n", "nl": "Calculates a custom drop location for this type of component, representing where a drop at the given point should insert data. <code>null</code> is returned if this component doesn't calculate custom drop locations. In this case, <code>TransferHandler</code> will provide a default <code>DropLocation</code> containing just the point.", "id": "38537"}
{"code": "public static String stripFormatting(String text){\n  return text == null ? null : FORMAT_PATTERN.matcher(text).replaceAll(\"\");\n}\n", "nl": "Strips all formatting from a piece of text.", "id": "37635"}
{"code": "public static boolean isPrivate(int mod){\n  return (mod & ACC_PRIVATE) != 0;\n}\n", "nl": "Tells whether a given access modifier is private", "id": "37714"}
{"code": "protected boolean hasAttemptRemaining(){\n  return mCurrentRetryCount <= mMaxNumRetries;\n}\n", "nl": "Returns true if this policy has attempts remaining, false otherwise.", "id": "32482"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_nodelistindexgetlengthofemptylist.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "14474"}
{"code": "public synchronized void clear(){\n  Entry<?,?> tab[]=table;\n  modCount++;\n  for (int index=tab.length; --index >= 0; )   tab[index]=null;\n  count=0;\n}\n", "nl": "Clears this hashtable so that it contains no keys.", "id": "1595"}
{"code": "private void nonBlockingFlush(){\n  FlushTask task=new FlushTask(new ArrayList<String>(logRecords));\n  logRecords.clear();\n  try {\n    LoggingThread.getInstance().run(task);\n  }\n catch (  ThreadPoolException ex) {\n    Debug.warning(\"SyslogHandler.nonBlockingFlush(): ThreadPoolException. Performing blocking flush.\");\n    task.run();\n  }\n}\n", "nl": "Flushes the buffered logrecords in a separate thread to prevent blocking. Access to logRecords is guarded by the publish method's synchronized block.", "id": "47237"}
{"code": "public int length(){\n  return m_length;\n}\n", "nl": "Returns the length of this string.", "id": "9973"}
{"code": "public Set searchOrganizationalUnits(String wildcard,int level) throws AMException, SSOException {\n  return searchOrganizationalUnits(wildcard,null,level);\n}\n", "nl": "Searches for organizational units in this organization using wildcards. Wildcards can be specified such as a*, *, *a.", "id": "47324"}
{"code": "public void handle(Throwable throwable,Response response){\n  if (LOGGER.isWarnEnabled()) {\n    LOGGER.warn(\"Unhandled exception: \" + throwable,throwable);\n  }\n  final OAuth2RestletException exception=toOAuth2RestletException(throwable);\n  response.setStatus(exception.getStatus());\n  response.setEntity(jacksonRepresentationFactory.create(exception.asMap()));\n}\n", "nl": "Handles general OAuth2 exceptions from Restlet endpoints. <br/> If the throwable is not a OAuth2RestletException then it will be wrapped as a ServerException. <br/> If the throwable is a OAuth2RestletException then it will be set on the response as a Json representation.", "id": "47203"}
{"code": "public static char lowSurrogate(int c){\n  return (char)(((c - 0x00010000) & 0x3FF) + 0xDC00);\n}\n", "nl": "Returns the low surrogate of a supplemental character", "id": "51918"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_elementnormalize2.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "30248"}
{"code": "public static MatchedValuesFilter createPresentFilter(AttributeType attributeType){\n  Reject.ifNull(attributeType);\n  String rawAttributeType=attributeType.getNameOrOID();\n  MatchedValuesFilter filter=new MatchedValuesFilter(PRESENT_TYPE,rawAttributeType,null,null,null,null,null);\n  filter.attributeType=attributeType;\n  return filter;\n}\n", "nl": "Creates a new present filter with the provided information.", "id": "38038"}
{"code": "public List<PdfObject> subList(int fromIndex,int toIndex){\n  return list.subList(fromIndex,toIndex);\n}\n", "nl": "Returns a sublist of this PdfArray, starting at fromIndex (inclusive) and ending at toIndex (exclusive).", "id": "7251"}
{"code": "private void addEntry(Entry e,ResultCode rc) throws Exception {\n  AddOperation addOperation=getRootConnection().processAdd(e);\n  assertEquals(addOperation.getResultCode(),rc);\n}\n", "nl": "Try to add an entry to the server checking for the expected return code.", "id": "38808"}
{"code": "public Tree<E> addChild(E item,int insertionIndex) throws IndexOutOfBoundsException {\n  Tree<E> it=new Tree<E>(this,item);\n  children.add(insertionIndex,it);\n  return it;\n}\n", "nl": "Adds a child node at a specific index in the list of children of this node", "id": "13878"}
{"code": "public org.omg.CORBA.Object _get_interface(){\n  throw new org.omg.CORBA.NO_IMPLEMENT(reason);\n}\n", "nl": "Throws an <code>org.omg.CORBA.NO_IMPLEMENT</code> exception with the message \"This is a locally constrained object.\" This method does not apply to local objects and is therefore not implemented. This method is the default implementation of the <code>org.omg.CORBA.Object</code> method.<P>", "id": "277"}
{"code": "public void paintComponent(Graphics g,Component c,Container p,Rectangle r){\n  paintComponent(g,c,p,r.x,r.y,r.width,r.height);\n}\n", "nl": "Calls this.paintComponent() with the rectangles x,y,width,height fields.", "id": "24381"}
{"code": "public void namespaceAfterStartElement(String uri,String prefix) throws SAXException {\n}\n", "nl": "This method is used when a prefix/uri namespace mapping is indicated after the element was started with a  startElement() and before and endElement(). startPrefixMapping(prefix,uri) would be used before the startElement() call.", "id": "514"}
{"code": "public boolean isInteractive(){\n  return !noPromptArg.isPresent();\n}\n", "nl": "Tells whether the user specified to have an interactive status CLI or not. This method must be called after calling parseArguments.", "id": "14882"}
{"code": "private boolean isForceUpgrade(){\n  return force.isPresent();\n}\n", "nl": "Force the upgrade. All critical questions will be forced to 'yes'.", "id": "45812"}
{"code": "public boolean isReal(){\n  return type == REAL;\n}\n", "nl": "Checks whether the value of this NSNumber is a real number.", "id": "32026"}
{"code": "public boolean isSecure(){\n  return request != null ? this.request.isSecure() : isSecure;\n}\n", "nl": "The default behavior of this method is to return isSecure() on the wrapped request object. Serialized.", "id": "1756"}
{"code": "void checkLayout(Container parent){\n  if (parent.getLayout() != this) {\n    throw new IllegalArgumentException(\"wrong parent for CardLayout\");\n  }\n}\n", "nl": "Make sure that the Container really has a CardLayout installed. Otherwise havoc can ensue!", "id": "13629"}
{"code": "public void addString(final String toAdd){\n  this.strings.add(toAdd);\n}\n", "nl": "This method appends a String.", "id": "28238"}
{"code": "public com.sun.identity.liberty.ws.interaction.jaxb.RedirectRequestType createRedirectRequestType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.RedirectRequestTypeImpl();\n}\n", "nl": "Create an instance of RedirectRequestType", "id": "21256"}
{"code": "public static <V>boolean addListNotNullValue(List<V> sourceList,V value){\n  return (sourceList != null && value != null) ? sourceList.add(value) : false;\n}\n", "nl": "add not null entry to list", "id": "11757"}
{"code": "public void preSingleSignOnProcess(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,AuthnRequest authnRequest,Response ssoResponse,String profile) throws SAML2Exception {\n  return;\n}\n", "nl": "Invokes when the OpenAM received the Single-Sign-On response from the IDP, this is called before any processing started on SP side.", "id": "14114"}
{"code": "public boolean hasPurchase(String sku){\n  return mPurchaseMap.containsKey(sku);\n}\n", "nl": "Returns whether or not there exists a purchase of the given product.", "id": "26"}
{"code": "public Vector midpoint(Vector other){\n  x=(x + other.x) / 2;\n  y=(y + other.y) / 2;\n  z=(z + other.z) / 2;\n  return this;\n}\n", "nl": "Sets this vector to the midpoint between this vector and another.", "id": "23528"}
{"code": "public boolean equals(Object o){\n  if (o == null) {\n    return false;\n  }\n  if (this == o) {\n    return true;\n  }\n  if (getClass() != o.getClass()) {\n    return false;\n  }\n  AuthenticatorPushPrincipal that=(AuthenticatorPushPrincipal)o;\n  return Objects.equals(this.name,that.name);\n}\n", "nl": "Compares the specified Object with this <code>AuthenticatorPushPrincipal</code> for equality.  Returns true if the given object is also a <code>AuthenticatorPushPrincipal</code> and the two AuthenticatorPushPrincipals have the same username.", "id": "22706"}
{"code": "public void destroy(){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"destroy\",_opsClass);\n  DynAnyOperations $self=(DynAnyOperations)$so.servant;\n  try {\n    $self.destroy();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Destroys a DynAny object. This operation frees any resources used to represent the data value associated with a DynAny object. It must be invoked on references obtained from one of the creation operations on the ORB interface or on a reference returned by DynAny.copy() to avoid resource leaks. Invoking destroy on component DynAny objects (for example, on objects returned by the current_component operation) does nothing. Destruction of a DynAny object implies destruction of all DynAny objects obtained from it. That is, references to components of a destroyed DynAny become invalid. Invocations on such references raise OBJECT_NOT_EXIST. It is possible to manipulate a component of a DynAny beyond the life time of the DynAny from which the component was obtained by making a copy of the component with the copy operation before destroying the DynAny from which the component was obtained.", "id": "13097"}
{"code": "@Override public int read() throws IOException {\nsynchronized (lock) {\n    if (!isOpen()) {\n      throw new IOException(\"InputStreamReader is closed\");\n    }\n    char[] buf=new char[1];\n    return read(buf,0,1) != -1 ? buf[0] : -1;\n  }\n}\n", "nl": "Reads a single character from this reader and returns it as an integer with the two higher-order bytes set to 0. Returns -1 if the end of the reader has been reached. The byte value is either obtained from converting bytes in this reader's buffer or by first filling the buffer from the source InputStream and then reading from the buffer.", "id": "18156"}
{"code": "public void printStackTrace(java.io.PrintStream s){\n  if (getCause() != null) {\n    getCause().printStackTrace(s);\n    s.println(\"--------------- linked to ------------------\");\n  }\n  super.printStackTrace(s);\n}\n", "nl": "<p>Print stack trace to specified <code>PrintStream</code>.</p>", "id": "37688"}
{"code": "public boolean isInFinalState(){\n  return state == State.FINISHED || state == State.CANCELLED || state == State.FAILED || state == State.INTERRUPTED;\n}\n", "nl": "Returns whether the refresh is over or not.", "id": "40238"}
{"code": "public void paintScrollBarThumbBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n}\n", "nl": "Paints the background of the thumb of a scrollbar. The thumb provides a graphical indication as to how much of the Component is visible in a <code>JScrollPane</code>.", "id": "40569"}
{"code": "@NonNull public static Interpolator dilate(Interpolator interpolator,Interpolator dilation){\n  return new DilateInterpolator(interpolator,dilation);\n}\n", "nl": "Dilates the time of the provided interpolator. This will use the dilation interpolator's result as the input of the interpolator to dilate", "id": "25669"}
{"code": "public static void i(String tag,String msg,Object... args){\n  if (sLevel > LEVEL_INFO) {\n    return;\n  }\n  if (args.length > 0) {\n    msg=String.format(msg,args);\n  }\n  Log.i(tag,msg);\n}\n", "nl": "Send an INFO log message", "id": "57928"}
{"code": "public boolean isCollapsed(int row){\n  return !isExpanded(row);\n}\n", "nl": "Returns true if the node at the specified display row is collapsed.", "id": "38584"}
{"code": "@Override public void sendError(int sc) throws IOException {\n  if (!included)   ((HttpServletResponse)getResponse()).sendError(sc);\n}\n", "nl": "Disallow <code>sendError()</code> calls on an included response.", "id": "51832"}
{"code": "private boolean isDSEConfigAttribute(Attribute attribute){\n  AttributeType attrType=attribute.getAttributeDescription().getAttributeType();\n  return attrType.hasName(ATTR_ROOT_DSE_SUBORDINATE_BASE_DN) || attrType.hasName(ATTR_ROOTDSE_SHOW_ALL_ATTRIBUTES) || attrType.hasName(ATTR_COMMON_NAME);\n}\n", "nl": "Indicates whether the provided attribute is one that is used in the configuration of this backend.", "id": "29117"}
{"code": "public boolean hasName(final String name){\n  for (  final String n : names) {\n    if (n.equalsIgnoreCase(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Indicates whether this schema definition has the specified name.", "id": "56094"}
{"code": "private void uninstallNotificationHandler(DN configEntryDN){\n  AccountStatusNotificationHandler<?> handler=notificationHandlers.remove(configEntryDN);\n  if (handler != null) {\n    DirectoryServer.deregisterAccountStatusNotificationHandler(configEntryDN);\n    handler.finalizeStatusNotificationHandler();\n  }\n}\n", "nl": "Remove a notification handler that has been installed in the server.", "id": "50307"}
{"code": "public boolean isUserExists(String userID) throws DataStoreProviderException {\n  debug.message(\"FedletDataStoreProvider.isUserExists(String)\");\n  return false;\n}\n", "nl": "Checks if a given user exists.", "id": "18170"}
{"code": "public Builder names(final Collection<String> names){\n  this.names.addAll(names);\n  return this;\n}\n", "nl": "Adds the provided user friendly names.", "id": "58720"}
{"code": "public static BooleanArgument generateSelfSignedArgument() throws ArgumentException {\n  return BooleanArgument.builder(\"generateSelfSignedCertificate\").description(INFO_ARGUMENT_DESCRIPTION_USE_SELF_SIGNED_CERTIFICATE.get()).buildArgument();\n}\n", "nl": "Returns the \"generate self certificate\" boolean argument.", "id": "54478"}
{"code": "public static String rdnType(RDN rdn){\n  Reject.ifTrue(rdn.size() != 1,\"Multivalued RDNs not supported\");\n  return rdn.getFirstAVA().getAttributeType().getNameOrOID();\n}\n", "nl": "When provided an RDN, returns the attribute type name.", "id": "49661"}
{"code": "public boolean isCombining(){\n  return (glyphType & 0x3) == COMBINING;\n}\n", "nl": "Returns <code>true</code> if this is a combining glyph.", "id": "29002"}
{"code": "protected void updateSize(){\n  validCachedPreferredSize=false;\n  tree.treeDidChange();\n}\n", "nl": "Marks the cached size as being invalid, and messages the tree with <code>treeDidChange</code>.", "id": "48279"}
{"code": "public int intValue(){\n  return intValue;\n}\n", "nl": "Returns the integer value of this search scope as defined in RFC 4511 section 4.5.1.2.", "id": "15309"}
{"code": "public boolean isNodeDescendant(DefaultMutableTreeNode anotherNode){\n  if (anotherNode == null)   return false;\n  return anotherNode.isNodeAncestor(this);\n}\n", "nl": "Returns true if <code>anotherNode</code> is a descendant of this node -- if it is this node, one of this node's children, or a descendant of one of this node's children.  Note that a node is considered a descendant of itself.  If <code>anotherNode</code> is null, returns false.  This operation is at worst O(h) where h is the distance from the root to <code>anotherNode</code>.", "id": "33796"}
{"code": "public boolean validate(String domain){\n  StringTokenizer tok;\n  tok=new StringTokenizer(domain,\".\");\n  if (tok.countTokens() <= 1) {\n    return false;\n  }\n  while (tok.hasMoreTokens()) {\n    if (!isValidDomainPart(tok.nextToken())) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Determines if the domain is valid", "id": "42631"}
{"code": "private void waitWhileSessionIsActive(StandardSession session) throws InterruptedException {\n  long maxWaitTime=System.currentTimeMillis() + 60000;\n  AtomicInteger accessCount=session.accessCount;\n  while (accessCount.get() > 0) {\n    Assert.assertTrue(System.currentTimeMillis() < maxWaitTime);\n    Thread.sleep(200);\n  }\n}\n", "nl": "Wait while session access counter has a positive value.", "id": "4487"}
{"code": "private static void assertBufferMatchesResponseBody(byte[] buffer,int count){\n  assertArrayEquals(Arrays.copyOf(TEST_RESPONSE_BODY,count),buffer);\n}\n", "nl": "Asserts that buffer's length equal to count and matches the first count bytes of the test response body.", "id": "26429"}
{"code": "public static ProxiedAuthV2RequestControl newControl(final String authorizationID){\n  if (authorizationID.length() == 0) {\n    return ANONYMOUS;\n  }\n  final int colonIndex=authorizationID.indexOf(':');\n  if (colonIndex < 0) {\n    final LocalizableMessage message=ERR_PROXYAUTH2_INVALID_AUTHZID_TYPE.get(authorizationID);\n    throw new LocalizedIllegalArgumentException(message);\n  }\n  return new ProxiedAuthV2RequestControl(authorizationID);\n}\n", "nl": "Creates a new proxy authorization v2 request control with the provided authorization ID. The authorization ID usually has the form \"dn:\" immediately followed by the distinguished name of the user, or \"u:\" followed by a user ID string, but other forms are permitted.", "id": "22928"}
{"code": "public boolean isDeltaCRLIndicatorEnabled(){\n  return deltaCRLIndicator;\n}\n", "nl": "Returns if this selector must match CRLs with the delta CRL indicator extension set. Defaults to <code>false</code>.", "id": "49759"}
{"code": "public void addFileAttachment(String description,byte[] fileStore,String fileDisplay,PdfName mimeType,PdfDictionary fileParameter,PdfName afRelationshipValue){\n  addFileAttachment(description,PdfFileSpec.createEmbeddedFileSpec(this,fileStore,description,fileDisplay,mimeType,fileParameter,afRelationshipValue,true));\n}\n", "nl": "Adds file attachment at document level.", "id": "44952"}
{"code": "public void addColumn(final Object columnName,final Object[] columnData){\n  addColumn(columnName,convertToVector(columnData));\n}\n", "nl": "Adds a column to the model. The new column will have the identifier <code>columnName</code>. <code>columnData</code> is the optional array of data for the column. If it is <code>null</code> the column is filled with <code>null</code> values. Otherwise, the new data will be added to model starting with the first element going to row 0, etc. This method will send a <code>tableChanged</code> notification message to all the listeners.", "id": "3300"}
{"code": "public DTMIterator cloneWithReset() throws CloneNotSupportedException {\n  NodeSetDTM clone=(NodeSetDTM)clone();\n  clone.reset();\n  return clone;\n}\n", "nl": "Get a cloned Iterator, and reset its state to the beginning of the iteration.", "id": "37350"}
{"code": "@Before public void init() throws IOException {\n  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();\n  git=new Git(repository);\n  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation());\n  unchecked(null);\n}\n", "nl": "Prepare common variables to access the git repository.", "id": "17161"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.protocol.ResponseType createResponseType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.ResponseTypeImpl();\n}\n", "nl": "Create an instance of ResponseType", "id": "18936"}
{"code": "public int component_count(){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"component_count\",_opsClass);\n  DynUnionOperations $self=(DynUnionOperations)$so.servant;\n  try {\n    return $self.component_count();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Returns the number of components of a DynAny. For a DynAny without components, it returns zero. The operation only counts the components at the top level. For example, if component_count is invoked on a DynStruct with a single member, the return value is 1, irrespective of the type of the member. <UL> <LI>For sequences, the operation returns the current number of elements. <LI>For structures, exceptions, and value types, the operation returns the number of members. <LI>For arrays, the operation returns the number of elements. <LI>For unions, the operation returns 2 if the discriminator indicates that a named member is active, otherwise, it returns 1. <LI>For DynFixed and DynEnum, the operation returns zero. </UL>", "id": "17459"}
{"code": "static void checkIdentifier(final String name,final String msg){\n  checkIdentifier(name,0,-1,msg);\n}\n", "nl": "Checks that the given string is a valid Java identifier.", "id": "36519"}
{"code": "public Observable<ConnectionState> connectionObservable(){\n  return mConnectionStatePublishSubject.asObservable();\n}\n", "nl": "Creates an Observable that emits the connection state changes the GoogleApiClient", "id": "1755"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(internalSubset01.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "18492"}
{"code": "public void registerSubjectType(String name,Class<? extends EntitlementSubject> type){\n  register(name,subjects,type);\n}\n", "nl": "Registers an entitlement subject type with the given short name (used in RESTful API calls and in the UI). Note: short names must be unique across all subject types.", "id": "28520"}
{"code": "public static double radiansToDistance(double radians,String units) throws TurfException {\n  Double factor=factors.get(units);\n  if (factor == null) {\n    throw new TurfException(\"Invalid unit.\");\n  }\n  return radians * factor;\n}\n", "nl": "Convert radians to distance.", "id": "17069"}
{"code": "public GSERParser skipSeparator() throws DecodeException {\n  if (!hasNext(GSER_SEP)) {\n    final LocalizableMessage msg=WARN_GSER_NO_VALID_SEPARATOR.get(gserValue.substring(pos,length));\n    throw DecodeException.error(msg);\n  }\n  skip(GSER_SEP);\n  skip(GSER_SP);\n  return this;\n}\n", "nl": "Skips the input matching the separator pattern (\",\") and subsequenct space characters.", "id": "33110"}
{"code": "public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){\nsynchronized (mapRealmToFormat) {\n    mapRealmToFormat.remove(orgName);\n  }\n}\n", "nl": "This method will be invoked when a service's organization configuration data has been changed. The parameters <code>orgName</code>, <code>groupName</code> and  <code>serviceComponent</code> denotes the organization name, configuration grouping name and service's sub-component that are changed respectively.", "id": "28739"}
{"code": "public void endElement(String name) throws org.xml.sax.SAXException {\n  endElement(null,null,name);\n}\n", "nl": "Receive notification of the end of an element.", "id": "45603"}
{"code": "@After public void unregisterIdlingResource(){\n  Espresso.unregisterIdlingResources(mAddTaskIntentsTestRule.getActivity().getCountingIdlingResource());\n}\n", "nl": "Unregister your Idling Resource so it can be garbage collected and does not leak any memory.", "id": "57471"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodereplacechildinvalidnodetype.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "39730"}
{"code": "protected PropertyChangeListener createActionChangeListener(JMenuItem b){\n  return b.createActionPropertyChangeListener0(b.getAction());\n}\n", "nl": "Returns a properly configured <code>PropertyChangeListener</code> which updates the control as changes to the <code>Action</code> occur.", "id": "32782"}
{"code": "public com.sun.identity.liberty.ws.disco.jaxb.ExtensionElement createExtensionElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.disco.jaxb.impl.ExtensionElementImpl();\n}\n", "nl": "Create an instance of ExtensionElement", "id": "46559"}
{"code": "public void logEvent(String eventName,double valueToSum){\n  logEvent(eventName,valueToSum,null);\n}\n", "nl": "Log an app event with the specified name and the supplied value.", "id": "30851"}
{"code": "public boolean equals(Object other){\n  if (this == other)   return (true);\n  if (other instanceof Oid)   return this.oid.equals((Object)((Oid)other).oid);\n else   if (other instanceof ObjectIdentifier)   return this.oid.equals(other);\n else   return false;\n}\n", "nl": "Tests if two Oid objects represent the same Object identifier value.", "id": "3905"}
{"code": "public KeyStoreBuilder withKeyStoreType(final KeyStoreType type){\n  this.type=checkNotNull(type);\n  return this;\n}\n", "nl": "Specifies the type of keystore to load. Defaults to JKS.", "id": "37630"}
{"code": "public boolean isActive() throws IdRepoException, SSOException {\n  IdServices idServices=IdServicesFactory.getDataStoreServices();\n  return idServices.isActive(token,type,name,orgName,univDN);\n}\n", "nl": "If there is a status attribute configured, then verifies if the identity is active and returns true. This method is only valid for AMIdentity objects of type User and Agent.", "id": "34170"}
{"code": "public boolean areTablesSet(){\n  return (qTables != null);\n}\n", "nl": "Returns <code>true</code> if tables are currently set.", "id": "54936"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.XACMLAuthzDecisionQueryDescriptorElement createXACMLAuthzDecisionQueryDescriptorElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.XACMLAuthzDecisionQueryDescriptorElementImpl();\n}\n", "nl": "Create an instance of XACMLAuthzDecisionQueryDescriptorElement", "id": "3610"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(getNamedItemNS01.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "20"}
{"code": "public synchronized StringBuffer insert(int index,char ch){\n  insert0(index,ch);\n  return this;\n}\n", "nl": "Inserts the character into this buffer at the specified offset.", "id": "36389"}
{"code": "public UpdateMsg first(){\nsynchronized (lock) {\n    return map.get(map.firstKey());\n  }\n}\n", "nl": "Return the first UpdateMsg in the MsgQueue.", "id": "30152"}
{"code": "public boolean isIncludeCause(){\n  return includeCause;\n}\n", "nl": "Get whether the cause exception is included in exception messages.", "id": "58330"}
{"code": "public static int countAll(){\n  return getPersistence().countAll();\n}\n", "nl": "Returns the number of foos.", "id": "39984"}
{"code": "public void update(Graphics a,JComponent b){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).update(a,b);\n  }\n}\n", "nl": "Invokes the <code>update</code> method on each UI handled by this object.", "id": "15277"}
{"code": "public static <A>ImmutableList<A> of(final A x1,final A x2){\n  return new ImmutableList<>(x1,of(x2));\n}\n", "nl": "Construct a list consisting of given elements.", "id": "52395"}
{"code": "boolean casValue(Object cmp,Object val){\n  return UNSAFE.compareAndSwapObject(this,valueOffset,cmp,val);\n}\n", "nl": "compareAndSet value field", "id": "32814"}
{"code": "public void init(ServletConfig config) throws ServletException {\n  super.init(config);\n  soapService=FSSOAPService.getInstance();\n  try {\n    msgFactory=MessageFactory.newInstance();\n  }\n catch (  SOAPException ex) {\n    FSUtils.debug.error(\"FSSOAPReceiver:Unable to get message factory\",ex);\n    throw new ServletException(ex.getMessage());\n  }\n}\n", "nl": "Initializes the servlet.", "id": "28324"}
{"code": "private static void debugPrintln(String msg){\n  if (DEBUG) {\n    System.err.println(\"JAXP: \" + msg);\n  }\n}\n", "nl": "Prints a message to standard error if debugging is enabled.", "id": "53949"}
{"code": "protected void releaseAudioDevices(){\n  if (mWZAudioDevice != null) {\n    if (mWZAudioDevice.isSamplingAudio())     mWZAudioDevice.stopAudioSampler();\n    mWZAudioDevice.unregisterAudioSampleListener(mAudioLevelMeter);\n  }\n}\n", "nl": "Shutdown/release the audio device and audio sampler", "id": "11089"}
{"code": "public static JTextField makeJTextField(LocalizableMessage text,LocalizableMessage tooltip,int size,TextStyle style){\n  JTextField f=new JTextField();\n  updateTextFieldComponent(f,text,tooltip,size,style);\n  f.addFocusListener(new TextFieldFocusListener(f));\n  return f;\n}\n", "nl": "Creates a JTextField with the given icon, tooltip text, size and text style.", "id": "45618"}
{"code": "public StringBuilder encodeBody(StringBuilder buffer){\n  return buffer.append(this.encodeBody());\n}\n", "nl": "Return the canonical encoding of this header.", "id": "47786"}
{"code": "public Issuer createIssuer(Element elem) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ISSUER,elem);\n  if (obj == null) {\n    return new IssuerImpl(elem);\n  }\n else {\n    return (Issuer)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>Issuer</code>. The return object is immutable.", "id": "44971"}
{"code": "public void destroyModuleState(){\n  userTokenId=null;\n  userPrincipal=null;\n}\n", "nl": "Cleans up the login state.", "id": "3797"}
{"code": "void popNamespaceSupport(){\n  m_nsSupportStack.pop();\n}\n", "nl": "Pop the current NamespaceSupport object.", "id": "16011"}
{"code": "private void init(final AbandonedTrace parent){\n  if (parent != null) {\n    parent.addTrace(this);\n  }\n}\n", "nl": "Initialize abandoned tracing for this object.", "id": "41115"}
{"code": "public void show(){\n  if (isVisible()) {\n    return;\n  }\n  if (!opened) {\n    fireInternalFrameEvent(InternalFrameEvent.INTERNAL_FRAME_OPENED);\n    opened=true;\n  }\n  getDesktopIcon().setVisible(true);\n  toFront();\n  super.show();\n  if (isIcon) {\n    return;\n  }\n  if (!isSelected()) {\n    try {\n      setSelected(true);\n    }\n catch (    PropertyVetoException pve) {\n    }\n  }\n}\n", "nl": "If the internal frame is not visible, brings the internal frame to the front, makes it visible, and attempts to select it. The first time the internal frame is made visible, this method also fires an <code>INTERNAL_FRAME_OPENED</code> event. This method does nothing if the internal frame is already visible. Invoking this method has the same result as invoking <code>setVisible(true)</code>.", "id": "51210"}
{"code": "public static void displayError(Component parent,LocalizableMessage msg,LocalizableMessage title){\n  JOptionPane.showMessageDialog(parent,wrapMsg(String.valueOf(msg),100),String.valueOf(title),JOptionPane.ERROR_MESSAGE);\n}\n", "nl": "Displays an error message dialog.", "id": "18818"}
{"code": "@Override void validateMethod(Request request) throws OAuth2RestletException {\n  if (!Method.POST.equals(request.getMethod())) {\n    throw new OAuth2RestletException(405,\"method_not_allowed\",\"Required Method: POST found: \" + request.getMethod().getName(),null);\n  }\n}\n", "nl": "Validates that the HTTP method on the request is POST.", "id": "18850"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(documentcreateattributeNS02.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "49372"}
{"code": "public int size(){\n  return collections.size();\n}\n", "nl": "Returns number of entries in collection.", "id": "39255"}
{"code": "public LineString asLineString(int precision){\n  return LineString.fromPolyline(getGeometry(),precision);\n}\n", "nl": "Gets a GeoJSON LineString which can be used to get route coordinates useful for drawing on a map view.", "id": "3028"}
{"code": "public boolean isDebugEnabled(){\n  return (getLogger().isLoggable(Level.FINE));\n}\n", "nl": "Is debug logging currently enabled?", "id": "36119"}
{"code": "public com.sun.identity.liberty.ws.soapbinding.jaxb11.ExtensionElement createExtensionElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.soapbinding.jaxb11.impl.ExtensionElementImpl();\n}\n", "nl": "Create an instance of ExtensionElement", "id": "4744"}
{"code": "public SoapSTSServerCryptoStateBuilder signatureKeyPassword(String signatureKeyPassword){\n  this.signatureKeyPassword=signatureKeyPassword;\n  return this;\n}\n", "nl": "In a asymmetric binding, messages from server to client must be signed by the server's private key - this is the password for the key alias immediately above", "id": "38118"}
{"code": "public boolean hasChild(OptionalRelationDefinition<?,?> d){\n  validateRelationDefinition(d);\n  return serverContext.managedObjectExists(path.child(d));\n}\n", "nl": "Determines whether the optional managed object associated with the specified optional relations exists.", "id": "8519"}
{"code": "public void expandNode(BasicNode node){\n  automaticallyExpandedNode=true;\n  TreePath tp=new TreePath(treeModel.getPathToRoot(node));\n  tree.expandPath(tp);\n  tree.fireTreeExpanded(tp);\n  automaticallyExpandedNode=false;\n}\n", "nl": "Expands node. Must be run from the event thread.  This is called when the node is automatically expanded.", "id": "32974"}
{"code": "public boolean isEnabled(){\n  return (statsState > Stats.OFF);\n}\n", "nl": "Checks if statistics is enabled. <p> <b>NOTE:</b> It is recommended that <code>isEnabled()</code> be used instead of <code>isEnabled()</code> as the former is more intuitive.", "id": "55944"}
{"code": "public static String convertFromUriEncoding(final String fileName,final IConfiguration configuration){\n  try {\n    return new String(fileName.getBytes(configuration.getUriEncoding()),\"UTF-8\");\n  }\n catch (  UnsupportedEncodingException e) {\n    return fileName;\n  }\n}\n", "nl": "converts filename to connector encoding.", "id": "37945"}
{"code": "@TargetApi(VERSION_CODES.GINGERBREAD) public static boolean isExternalStorageRemovable(){\n  if (Utils.hasGingerbread()) {\n    return Environment.isExternalStorageRemovable();\n  }\n  return true;\n}\n", "nl": "Check if external storage is built-in or removable.", "id": "57019"}
{"code": "public com.sun.identity.wsfederation.jaxb.xmlsig.TransformType.XPath createTransformTypeXPath() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.TransformTypeImpl.XPathImpl();\n}\n", "nl": "Create an instance of TransformTypeXPath", "id": "13002"}
{"code": "public static net.aimeizi.person.QueryParameter.Builder newBuilder(net.aimeizi.person.QueryParameter.Builder other){\n  return new net.aimeizi.person.QueryParameter.Builder(other);\n}\n", "nl": "Creates a new QueryParameter RecordBuilder by copying an existing Builder.", "id": "56946"}
{"code": "public void paintToggleButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBorder(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the border of a toggle button.", "id": "18940"}
{"code": "@Override public LifecycleListener[] findLifecycleListeners(){\n  return new LifecycleListener[0];\n}\n", "nl": "Get the lifecycle listeners associated with this lifecycle. If this Lifecycle has no listeners registered, a zero-length array is returned.", "id": "23446"}
{"code": "private void removeListeners(Container container){\n  container.removeContainerListener(this);\n  container.removeLifecycleListener(this);\n  for (  Container child : container.findChildren()) {\n    removeListeners(child);\n  }\n}\n", "nl": "Remove this mapper from the container and all child containers", "id": "26432"}
{"code": "public static ComponentUI createUI(JComponent c){\n  return new SynthPanelUI();\n}\n", "nl": "Creates a new UI object for the given component.", "id": "46642"}
{"code": "private void writeObject(ObjectOutputStream s) throws IOException {\n  s.defaultWriteObject();\n  s.writeObject(SerializationTester.test(dtListener) ? dtListener : null);\n}\n", "nl": "Serializes this <code>DropTarget</code>. Performs default serialization, and then writes out this object's <code>DropTargetListener</code> if and only if it can be serialized. If not, <code>null</code> is written instead.", "id": "15953"}
{"code": "public static final int monthLength(int year,int month){\n  return MONTH_LENGTH[month + (isLeapYear(year) ? 12 : 0)];\n}\n", "nl": "Return the number of days in the given month.", "id": "23061"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_nodereplacechildoldchildnonexistent.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "31013"}
{"code": "@Override public Foo createFoo(long fooId){\n  return fooPersistence.create(fooId);\n}\n", "nl": "Creates a new foo with the primary key. Does not add the foo to the database.", "id": "14477"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.utility.ExpiresElement createExpiresElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.utility.impl.ExpiresElementImpl();\n}\n", "nl": "Create an instance of ExpiresElement", "id": "21684"}
{"code": "public boolean startsWith(XMLString prefix){\n  return startsWith(prefix,0);\n}\n", "nl": "Tests if this string starts with the specified prefix.", "id": "48420"}
{"code": "public void removePropertyChangeListener(PropertyChangeListener l){\n  AccessibleContext ac=getCurrentAccessibleContext();\n  if (ac != null) {\n    ac.removePropertyChangeListener(l);\n  }\n else {\n    super.removePropertyChangeListener(l);\n  }\n}\n", "nl": "Remove a PropertyChangeListener from the listener list. This removes a PropertyChangeListener that was registered for all properties.", "id": "34018"}
{"code": "public static byte[] encodeInteger(final BigInteger bigInt){\n  if (bigInt == null) {\n    throw new NullPointerException(\"encodeInteger called with null parameter\");\n  }\n  return encodeBase64(toIntegerBytes(bigInt),false);\n}\n", "nl": "Encodes to a byte64-encoded integer according to crypto standards such as W3C's XML-Signature.", "id": "37216"}
{"code": "@Override public void dismiss(){\n  super.dismiss();\n}\n", "nl": "Dismiss the fragment and its dialog.  If the fragment was added to the back stack, all back stack state up to and including this entry will be popped.  Otherwise, a new transaction will be committed to remove the fragment.", "id": "22202"}
{"code": "public static int readSingleByte(InputStream in) throws IOException {\n  byte[] buffer=new byte[1];\n  int result=in.read(buffer,0,1);\n  return (result != -1) ? buffer[0] & 0xff : -1;\n}\n", "nl": "Implements InputStream.read(int) in terms of InputStream.read(byte[], int, int). InputStream assumes that you implement InputStream.read(int) and provides default implementations of the others, but often the opposite is more efficient.", "id": "30644"}
{"code": "private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  init(getMask(actions));\n}\n", "nl": "readObject is called to restore the state of the PropertyPermission from a stream.", "id": "14389"}
{"code": "public void detach(){\n}\n", "nl": "Detaches the <code>DTMIterator</code> from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state. After <code>detach</code> has been invoked, calls to <code>nextNode</code> or <code>previousNode</code> will raise a runtime exception.", "id": "24615"}
{"code": "public boolean isWhiteListRule(){\n  return whiteListRule;\n}\n", "nl": "If true - this is white-list css rule.", "id": "14231"}
{"code": "public boolean isSelected(){\n  return (dataStatus == DEFAULT_ON || dataStatus == PERSONAL_ON);\n}\n", "nl": "Returns true if the user's secret question stored in this object is selected.", "id": "51626"}
{"code": "public void startReading(){\n  readerThread.start();\n}\n", "nl": "Starts reading the output (or error) of the process.", "id": "5715"}
{"code": "public boolean isEmpty(){\n  return (tag == null || tag.isEmpty()) && images.size() == 0;\n}\n", "nl": "Determines whether the tag has no fields specified.<br> <p>If there are no images we return empty if either there is no VorbisTag or if there is a VorbisTag but it is empty", "id": "25876"}
{"code": "public Object clone() throws CloneNotSupportedException {\n  return new ObjectVector(this);\n}\n", "nl": "Returns clone of current ObjectVector", "id": "38393"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.protocol.RequestAbstractType createRequestAbstractType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.RequestAbstractTypeImpl();\n}\n", "nl": "Create an instance of RequestAbstractType", "id": "14485"}
{"code": "public int height(){\n  return box_ur.v_y - box_ll.v_y;\n}\n", "nl": "Returns the vertical extension of the box.", "id": "33688"}
{"code": "public SchemaBuilder addToSchemaOverwrite(){\n  return addToSchema(true);\n}\n", "nl": "Adds this syntax to the schema overwriting any existing syntax with the same numeric OID.", "id": "35137"}
{"code": "public static <C extends Collection<E>,E>C collect(Iterable<E> iterable,C outputCollection){\n  for (  E e : iterable) {\n    outputCollection.add(e);\n  }\n  return outputCollection;\n}\n", "nl": "Collects all the elements from the provided iterable into the provided collection.", "id": "9811"}
{"code": "public static String normalize(String path){\n  return normalize(path,true);\n}\n", "nl": "Normalize a relative URI path that may have relative values (\"/./\", \"/../\", and so on ) it it.  <strong>WARNING</strong> - This method is useful only for normalizing application-generated paths.  It does not try to perform security checks for malicious input.", "id": "6672"}
{"code": "public boolean isPluginEnabled(String name){\n  Plugin plugin=getPlugin(name);\n  return isPluginEnabled(plugin);\n}\n", "nl": "Checks if the given plugin is enabled or not <p> Please note that the name of the plugin is case-sensitive.", "id": "16852"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n  TestCaseUtils.initializeTestBackend(true);\n  TestCaseUtils.clearBackend(\"userRoot\",\"dc=example,dc=com\");\n  subschemaSubentryType=CoreSchema.getSubschemaSubentryAttributeType();\n}\n", "nl": "Ensures that the Directory Server is running.", "id": "42415"}
{"code": "public static void initiateLogoutRequest(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String binding,Map paramsMap,SAML2EventLogger auditor) throws SAML2Exception {\n  initiateLogoutRequest(request,response,out,binding,paramsMap,null,null,null,auditor);\n}\n", "nl": "Parses the request parameters and initiates the Logout Request to be sent to the IDP.", "id": "1771"}
{"code": "public void writeAbandonRequest(final int messageID,final AbandonRequest request) throws IOException {\n  logger.trace(\"ENCODE LDAP ABANDON REQUEST(messageID=%d, request=%s)\",messageID,request);\n  writeMessageHeader(messageID);\n{\n    writer.writeInteger(LDAP.OP_TYPE_ABANDON_REQUEST,request.getRequestID());\n  }\n  writeMessageFooter(request.getControls());\n}\n", "nl": "Writes the provided abandon request.", "id": "39431"}
{"code": "public void addNodes(DTMIterator iterator){\n  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));\n  if (null != iterator) {\n    int obj;\n    while (DTM.NULL != (obj=iterator.nextNode())) {\n      addElement(obj);\n    }\n  }\n}\n", "nl": "Copy NodeList members into this nodelist, adding in document order.  Null references are not added.", "id": "268"}
{"code": "public String toString(){\n  return this.encode();\n}\n", "nl": "Encode this to a string.", "id": "14466"}
{"code": "public void addTemplateAttribute(String name,String value){\n  modify(name,value,ModificationType.ADD);\n}\n", "nl": "Adds a name/value attribute pair for this template; for example, \"postalcode\" and \"95020\".", "id": "24153"}
{"code": "@Override public int read(byte[] b) throws IOException {\n  return read(b,0,b.length);\n}\n", "nl": "Read the specified number of bytes into an array.", "id": "25739"}
{"code": "public Resource objectClasses(final String... objectClasses){\n  this.objectClasses.add((Object[])objectClasses);\n  return this;\n}\n", "nl": "Specifies LDAP object classes which are to be associated with this resource. Multiple object classes may be specified. The object classes are used for determining the type of resource being accessed during all requests other than create. Object classes are inherited by sub-types and must be defined for any resources that are non-abstract and which can be created.", "id": "39569"}
{"code": "public PlaPoint corner_first(){\n  PlaPoint a_point=corner(0);\n  return a_point;\n}\n", "nl": "returns the intersection of the first line with the second line", "id": "15422"}
{"code": "public static boolean isValidType(short type){\n  return type == TYPE_UNSIGNED_BYTE || type == TYPE_ASCII || type == TYPE_UNSIGNED_SHORT || type == TYPE_UNSIGNED_LONG || type == TYPE_UNSIGNED_RATIONAL || type == TYPE_UNDEFINED || type == TYPE_LONG || type == TYPE_RATIONAL;\n}\n", "nl": "Returns true if a given type is a valid tag type.", "id": "32928"}
{"code": "private void put122(final int b,final int s1,final int s2){\n  pool.put12(b,s1).putShort(s2);\n}\n", "nl": "Puts one byte and two shorts into the constant pool.", "id": "51092"}
{"code": "public static String applyMargin(String html,int top,int right,int bottom,int left){\n  return \"<div style=\\\"margin:\" + top + \"px \"+ right+ \"px \"+ bottom+ \"px \"+ left+ \"px;\\\">\"+ html+ DIV_CLOSE;\n}\n", "nl": "Returns the html text passed as parameter with some added margin.", "id": "18329"}
{"code": "public boolean warningEnabled(){\n  return this.debugLevel.compareLevel(DebugLevel.WARNING) >= 0;\n}\n", "nl": "Returns <code>true</code> if debug warning is enabled.", "id": "11675"}
{"code": "public void paintTabbedPaneContentBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the background of the area that contains the content of the selected tab of a tabbed pane.", "id": "4309"}
{"code": "public com.sun.identity.saml2.jaxb.xmlsig.SPKIDataElement createSPKIDataElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SPKIDataElementImpl();\n}\n", "nl": "Create an instance of SPKIDataElement", "id": "7218"}
{"code": "public void reset(){\n  mLogFilterText=\"\";\n  mLogPriorityLevel=\"\";\n  mFilteredLogcatData.clear();\n  mFilteredLogcatData.addAll(mLogcatData);\n  notifyDataSetChanged();\n}\n", "nl": "Reset log-entries. Set filter text to empty and priority level to verbose and show all log-entries.", "id": "1774"}
{"code": "@Override public Promise<Void,AuthenticationException> cleanSubject(MessageInfoContext messageInfo,Subject subject){\n  return newResultPromise(null);\n}\n", "nl": "Nothing to clean up.", "id": "16684"}
{"code": "protected void validate(){\n  isValid=true;\n  loadChildren(getElement());\n}\n", "nl": "Validates the receiver. This recreates the children as well. This will be invoked within a <code>readLock</code>. If this is overriden it MUST invoke supers implementation first!", "id": "3621"}
{"code": "void appendComment(int m_char_current_start,int contentLength){\n  int w0=COMMENT_NODE;\n  int w1=currentParent;\n  int w2=m_char_current_start;\n  int w3=contentLength;\n  int ourslot=appendNode(w0,w1,w2,w3);\n  previousSibling=ourslot;\n}\n", "nl": "Append a comment child at the current insertion point. Assumes that the actual content of the comment has previously been appended to the m_char buffer (shared with the builder).", "id": "47328"}
{"code": "public static QueryExp not(QueryExp queryExp){\n  return new NotQueryExp(queryExp);\n}\n", "nl": "Returns a constraint that is the negation of its argument.", "id": "5719"}
{"code": "public boolean equals(Object obj){\n  if (obj == this)   return true;\n  if (!(obj instanceof AccessControlContext))   return false;\n  AccessControlContext that=(AccessControlContext)obj;\n  if (!equalContext(that))   return false;\n  if (!equalLimitedContext(that))   return false;\n  return true;\n}\n", "nl": "Checks two AccessControlContext objects for equality. Checks that <i>obj</i> is an AccessControlContext and has the same set of ProtectionDomains as this context. <P>", "id": "57088"}
{"code": "public boolean isPublic(){\n  return Modifier.isPublic(flags);\n}\n", "nl": "Utility method to query the modifier flags of this member.", "id": "58109"}
{"code": "private void informUponSimilarName(final StringBuffer messageBuffer,final String name,final String candidate){\n  if (name.equals(candidate)) {\n    return;\n  }\n  if (name.regionMatches(true,0,candidate,0,PKG_LEN + 5)) {\n    messageBuffer.append(\" Did you mean '\");\n    messageBuffer.append(candidate);\n    messageBuffer.append(\"'?\");\n  }\n}\n", "nl": "Appends message if the given name is similar to the candidate.", "id": "31650"}
{"code": "public static List<Foo> findByUuid(java.lang.String uuid){\n  return getPersistence().findByUuid(uuid);\n}\n", "nl": "Returns all the foos where uuid = &#63;.", "id": "44946"}
{"code": "public void paintScrollBarTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintScrollBarTrackBorder(context,g,x,y,w,h);\n}\n", "nl": "Paints the border of the track of a scrollbar. The track contains the thumb. This implementation invokes the method of the same name without the orientation.", "id": "56837"}
{"code": "@Override protected void initializeInjector(ApplicationComponent applicationComponent){\n  applicationComponent.inject(this);\n  comicsComponent=DaggerComicsComponent.builder().applicationComponent(applicationComponent).activityModule(new ActivityModule(this)).comicsModule(new ComicsModule()).build();\n}\n", "nl": "Initialize injections by field.", "id": "38451"}
{"code": "public void addExtraLine(TemplateLine line){\n  TemplateLine[] newExtraLines=new TemplateLine[extraLines.length + 1];\n  System.arraycopy(extraLines,0,newExtraLines,0,extraLines.length);\n  newExtraLines[extraLines.length]=line;\n  extraLines=newExtraLines;\n}\n", "nl": "Adds the provided template line to the set of extra lines for this branch.", "id": "20904"}
{"code": "public long mean(){\n  return (long)deltaMean.get();\n}\n", "nl": "Get (approximate) running-average time-delta, in nanoseconds.", "id": "36082"}
{"code": "public AttributeSet copyAttributes(){\n  AttributeSet[] as=getAttributes();\n  MutableAttributeSet a=new SimpleAttributeSet();\n  int n=0;\n  for (int i=as.length - 1; i >= 0; i--) {\n    a.addAttributes(as[i]);\n  }\n  return a;\n}\n", "nl": "Copies a set of attributes.", "id": "56900"}
{"code": "@DataProvider(name=\"createChildRDNTestData\") public Object[][] createChildRDNTestData(){\n  return new Object[][]{{\"\",\"dc=org\",\"dc=org\"},{\"dc=org\",\"dc=opendj\",\"dc=opendj,dc=org\"},{\"dc=opendj,dc=org\",\"dc=foo\",\"dc=foo,dc=opendj,dc=org\"}};\n}\n", "nl": "Child RDN test data provider.", "id": "43827"}
{"code": "public static void close(FileDescriptor fd) throws IOException {\n  try {\n    if (fd != null && fd.valid()) {\n      Libcore.os.close(fd);\n    }\n  }\n catch (  ErrnoException errnoException) {\n    throw errnoException.rethrowAsIOException();\n  }\n}\n", "nl": "Calls close(2) on 'fd'. Also resets the internal int to -1. Does nothing if 'fd' is null or invalid.", "id": "21461"}
{"code": "public static ArgumentException unknownValueForChildComponent(String componentName){\n  LocalizableMessage msg=ERR_DSCFG_ERROR_FINDER_NO_CHILDREN.get(componentName);\n  return new ArgumentException(msg);\n}\n", "nl": "Creates an argument exception which should be used when a child component does not exist.", "id": "23936"}
{"code": "public void unlock(){\n  if (!isLocked) {\n    throw new IllegalStateException(\"Already unlocked\");\n  }\n  lock.releaseParentSubtreeReadLock();\n  subtreeLock.unlock();\n  entryLock.unlock();\n  dereference(lock);\n  isLocked=false;\n}\n", "nl": "Unlocks this lock and releases any blocked threads.", "id": "24733"}
{"code": "public static String toString(final Entry entry){\n  final StringWriter writer=new StringWriter(128);\n  try (LDIFEntryWriter ldifWriter=new LDIFEntryWriter(writer)){\n    ldifWriter.setAddUserFriendlyComments(true).writeEntry(entry);\n  }\n catch (  final IOException e) {\n    throw new IllegalStateException(e);\n  }\n  return writer.toString();\n}\n", "nl": "Returns the LDIF string representation of the provided entry.", "id": "1726"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.LStElement createLStElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LStElementImpl();\n}\n", "nl": "Create an instance of LStElement", "id": "31581"}
{"code": "public void shutdown(){\n  for (  Module module : modules) {\n    module.stop();\n  }\n  for (  Reporter reporter : reporters.values()) {\n    reporter.stop();\n  }\n}\n", "nl": "Gracefully stop all modules and reporters.", "id": "52588"}
{"code": "protected int read(byte[] buffer) throws IOException {\n  return mTiffStream.read(buffer);\n}\n", "nl": "Equivalent to read(buffer, 0, buffer.length).", "id": "6447"}
{"code": "public boolean equals(Object obj){\n  if (this == obj) {\n    return true;\n  }\n  if (!(obj instanceof SimpleTimeZone)) {\n    return false;\n  }\n  SimpleTimeZone that=(SimpleTimeZone)obj;\n  return getID().equals(that.getID()) && hasSameRules(that);\n}\n", "nl": "Compares the equality of two <code>SimpleTimeZone</code> objects.", "id": "2687"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(prefix02.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "8613"}
{"code": "public static byte[] decode(String s){\n  return decode(s,NO_OPTIONS);\n}\n", "nl": "Decodes data from Base64 notation, automatically detecting gzip-compressed data and decompressing it.", "id": "48877"}
{"code": "public void writeControl(final Control control) throws IOException {\n  writer.writeStartSequence();\n{\n    writer.writeOctetString(control.getOID());\n    if (control.isCritical()) {\n      writer.writeBoolean(control.isCritical());\n    }\n    if (control.getValue() != null) {\n      writer.writeOctetString(control.getValue());\n    }\n  }\n  writer.writeEndSequence();\n}\n", "nl": "Writes the provided control.", "id": "16928"}
{"code": "public void execute(TransformerImpl transformer) throws TransformerException {\n  transformer.getXPathContext().getVarStack().setLocalVariable(m_index,m_lazyVar);\n}\n", "nl": "Execute a variable declaration and push it onto the variable stack.", "id": "32632"}
{"code": "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  type=null;\n  types=null;\n}\n", "nl": "Explicitly set all transient fields.", "id": "3372"}
{"code": "public Iterator iterator(){\n  return list.iterator();\n}\n", "nl": "Returns an iterator over the elements in this set.", "id": "47436"}
{"code": "public STypeDef targetType(){\n  return targetType;\n}\n", "nl": "something like <code>targetType.class</code>", "id": "28419"}
{"code": "public boolean isEmpty(){\n  return elements == 0;\n}\n", "nl": "Returns <tt>true</tt> if this set contains no elements.", "id": "4981"}
{"code": "public static void saveTokenWithKey(String key,Object value){\n  localCache.put(key,value);\n}\n", "nl": "Statically stores Strings mapped to a key.", "id": "30275"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.OrganizationElement createOrganizationElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.OrganizationElementImpl();\n}\n", "nl": "Create an instance of OrganizationElement", "id": "43712"}
{"code": "public int doEndTag() throws JspException {\n  return SKIP_BODY;\n}\n", "nl": "does nothing here", "id": "48570"}
{"code": "public void newDataAvailable(TableModelEvent event){\n  fireTableChanged(event);\n}\n", "nl": "Equivalent to <code>fireTableChanged</code>.", "id": "3429"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ps.NameIDPolicyElement createNameIDPolicyElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.NameIDPolicyElementImpl();\n}\n", "nl": "Create an instance of NameIDPolicyElement", "id": "382"}
{"code": "public static void logAbandonRequest(AbandonOperation abandonOperation){\n  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {\n    publisher.logAbandonRequest(abandonOperation);\n  }\n}\n", "nl": "Writes a message to the access logger with information about the abandon request associated with the provided abandon operation.", "id": "38787"}
{"code": "@After public void clean(){\n  mute(null);\n  mute(null);\n  mute(null);\n}\n", "nl": "Cleanups after each tests.", "id": "53579"}
{"code": "public List<CollectEntity> queryDeep(String where,String... selectionArg){\n  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);\n  return loadDeepAllAndCloseCursor(cursor);\n}\n", "nl": "A raw-style query where you can pass any WHERE clause and arguments.", "id": "39105"}
{"code": "@Override public void error(SAXParseException exception) throws SAXException {\n  log.error(\"Parse Error at line \" + exception.getLineNumber() + \" column \"+ exception.getColumnNumber()+ \": \"+ exception.getMessage(),exception);\n  if (errorHandler != null) {\n    errorHandler.error(exception);\n  }\n}\n", "nl": "Forward notification of a parsing error to the application supplied error handler (if any).", "id": "4729"}
{"code": "public void clearAccessibleSelection(){\nsynchronized (List.this) {\n    int selectedIndexes[]=List.this.getSelectedIndexes();\n    if (selectedIndexes == null)     return;\n    for (int i=selectedIndexes.length - 1; i >= 0; i--) {\n      List.this.deselect(selectedIndexes[i]);\n    }\n  }\n}\n", "nl": "Clears the selection in the object, so that nothing in the object is selected.", "id": "41901"}
{"code": "protected boolean handlingMyLastProtocolMessage(List<ProtocolMessage> protocolMessages,int pointer){\n  return ((protocolMessages.size() == (pointer + 1)) || (protocolMessages.get(pointer + 1).getMessageIssuer() != tlsContext.getMyConnectionEnd()));\n}\n", "nl": "In case we are handling last record message, this record message has to be flushed out. The reasons for flushing out the record messages can be following: 1) it is the last record message 2) the next record message should come from the different peer", "id": "9734"}
{"code": "boolean show(Container c,int x,int y,int w,int h){\n  return getPaintManager().show(c,x,y,w,h);\n}\n", "nl": "If possible this will show a previously rendered portion of a Component.  If successful, this will return true, otherwise false. <p> WARNING: This method is invoked from the native toolkit thread, be very careful as to what methods this invokes!", "id": "38169"}
{"code": "public static void main(final String[] args){\n  final int retCode=new ModRate().run(args);\n  System.exit(filterExitCode(retCode));\n}\n", "nl": "The main method for ModRate tool.", "id": "1085"}
{"code": "public static Component createVerticalGlue(){\n  return new Filler(new Dimension(0,0),new Dimension(0,0),new Dimension(0,Short.MAX_VALUE));\n}\n", "nl": "Creates a vertical glue component.", "id": "58735"}
{"code": "public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {\n  load();\n  return super.modelToView(pos,a,b);\n}\n", "nl": "Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.  This is implemented to provide the superclass behavior after first making sure the zone is loaded (The zone must be loaded to make this calculation).", "id": "21294"}
{"code": "protected ResourceMatch compare(String resource1,String resource2){\n  if (resourceNameUtil == null) {\n    return (ResourceMatch.NO_MATCH);\n  }\n  return (resourceNameUtil.compare(resource1,resource2,true));\n}\n", "nl": "Compares two resources of this service type to determine their equality. The method returns a <code>ResourceMatch</code> object which specifies if the resources match exactly, do not match, or one of them is a subordinate resource of the other. Wildcards in  resource1 are escaped. Wildcards in resource2 are interpreted.", "id": "2869"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ps.FederationTerminationNotificationElement createFederationTerminationNotificationElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.FederationTerminationNotificationElementImpl();\n}\n", "nl": "Create an instance of FederationTerminationNotificationElement", "id": "32515"}
{"code": "public static File createTemporaryDirectory(String prefix) throws IOException {\n  File tmpDir=File.createTempFile(prefix,null);\n  if (!tmpDir.delete()) {\n    throw new IOException(\"Unable to delete temporary file: \" + tmpDir);\n  }\n  if (!tmpDir.mkdir()) {\n    throw new IOException(\"Unable to create temporary directory: \" + tmpDir);\n  }\n  return tmpDir;\n}\n", "nl": "Create a temporary directory with the specified prefix.", "id": "34970"}
{"code": "public static String showInputDialog(Component parentComponent,Object message,String title,int messageType) throws HeadlessException {\n  return (String)showInputDialog(parentComponent,message,title,messageType,null,null,null);\n}\n", "nl": "Shows a dialog requesting input from the user parented to <code>parentComponent</code> with the dialog having the title <code>title</code> and message type <code>messageType</code>.", "id": "24746"}
{"code": "public XMLElement newElement(String name) throws Exception {\n  return newElement(name,null,null);\n}\n", "nl": "A factory method used for the creation of new XML elements that can be added to this XML document at a later stage. When this method is called, a new <code>XMLElement</code> object is returned to the caller. However, this newly created element is still not attached to the  document anywhere and it is the responsiblity of the caller to attach it in the appropriate location.", "id": "39902"}
{"code": "public boolean isHidden(){\n  return hidden;\n}\n", "nl": "Whether or not the sub configuration should be displayed in the console.", "id": "56914"}
{"code": "@Deprecated protected ActionListener createKeyboardResizeToggleListener(){\n  return new KeyboardResizeToggleHandler();\n}\n", "nl": "As of Java 2 platform v1.3 this method is no longer used. Subclassers previously using this method should instead create an Action wrapping the ActionListener, and register that Action by overriding <code>installKeyboardActions</code> and placing the Action in the SplitPane's ActionMap. Please refer to the key bindings specification for further details. <p> Creates a ActionListener for the JSplitPane UI that listens for specific key presses.", "id": "1123"}
{"code": "public boolean delete(Long appID){\n  if (appID == null) {\n    throw new IllegalArgumentException(\"primary key null.\");\n  }\n  return database.delete(DATABASE_TABLE,KEY_APPID + \"=\" + appID,null) > 0;\n}\n", "nl": "Delete a RegisteredApp record.", "id": "43141"}
{"code": "public static long lastModified(){\n  return propertiesHolderRef.get().lastModified;\n}\n", "nl": "Returns a counter for last modification. The counter is incremented if the properties are changed by calling the following method <code>initializeProperties</code>. This is a convenience method for applications to track changes to OpenAM properties.", "id": "5675"}
{"code": "public String findWithinHorizon(String pattern,int horizon){\n  return findWithinHorizon(patternCache.forName(pattern),horizon);\n}\n", "nl": "Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters. <p>An invocation of this method of the form <tt>findWithinHorizon(pattern)</tt> behaves in exactly the same way as the invocation <tt>findWithinHorizon(Pattern.compile(pattern, horizon))</tt>.", "id": "29232"}
{"code": "public boolean endsWith(String suffix){\n  return str().endsWith(suffix);\n}\n", "nl": "Tests if this string ends with the specified suffix.", "id": "27477"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.WssGssKerberosV5ApReqToken11Element createWssGssKerberosV5ApReqToken11Element() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssGssKerberosV5ApReqToken11ElementImpl();\n}\n", "nl": "Create an instance of WssGssKerberosV5ApReqToken11Element", "id": "40803"}
{"code": "@Override public void initializeConnectionHandler(ServerContext serverContext,ConnectionHandlerCfg configuration) throws ConfigException, InitializationException {\n  this.configuration=configuration;\n}\n", "nl": "Initializes this connection handler provider based on the information in the provided connection handler configuration.", "id": "11476"}
{"code": "public void addLocalEjb(ContextLocalEjb ejb){\n  if (entries.contains(ejb.getName())) {\n    return;\n  }\n else {\n    entries.add(ejb.getName());\n  }\nsynchronized (localEjbs) {\n    ejb.setNamingResources(this);\n    localEjbs.put(ejb.getName(),ejb);\n  }\n  support.firePropertyChange(\"localEjb\",null,ejb);\n}\n", "nl": "Add a local EJB resource reference for this web application.", "id": "8104"}
{"code": "@Override public Writer append(char value){\n  builder.append(value);\n  return this;\n}\n", "nl": "Append a single character to this Writer.", "id": "25732"}
{"code": "public static DN newDN(String orgName){\n  if (orgName == null || orgName.startsWith(\"/\") || !orgName.contains(\"=\")) {\n    return DN.rootDN();\n  }\n else {\n    return DN.valueOf(orgName);\n  }\n}\n", "nl": "Creates a DN from the specified DN string.", "id": "54341"}
{"code": "public void replaceSubject(String subjectName,Subject subject) throws NameNotFoundException, PolicyException, SSOException {\n  replaceSubject(subjectName,subject,false);\n}\n", "nl": "Replaces an existing subject with the same name by the current one at the realm. If a subject with the same name does  not exist, it will be added.", "id": "1942"}
{"code": "public String tableName(){\n  return tableName;\n}\n", "nl": "Query's table name (if applicable).", "id": "13910"}
{"code": "public static ItemListener remove(ItemListener l,ItemListener oldl){\n  return (ItemListener)removeInternal(l,oldl);\n}\n", "nl": "Removes the old item-listener from item-listener-l and returns the resulting multicast listener.", "id": "17838"}
{"code": "public void printStackTrace(PrintStream ps){\n  ps.println(fetchStackTrace());\n}\n", "nl": "Prints the stack trace of the root exception to a PrintStream Also prints the messages of all the exceptions starting from top  exception to the root exception, at the top of stack trace", "id": "16768"}
{"code": "public void fatal(Object message){\n}\n", "nl": "Do nothing", "id": "26171"}
{"code": "protected void paintTitleBackground(Graphics g){\n  boolean isSelected=frame.isSelected();\n  if (isSelected)   g.setColor(selectedTitleColor);\n else   g.setColor(notSelectedTitleColor);\n  g.fillRect(0,0,getWidth(),getHeight());\n}\n", "nl": "Invoked from paintComponent. Paints the background of the titlepane.  All text and icons will then be rendered on top of this background.", "id": "8813"}
{"code": "public void addChoiceValue(String value,String i18nKey) throws SMSException, SSOException {\n  Map choiceValues=as.getChoiceValuesMap();\n  choiceValues.put(value,i18nKey);\n  updateChoiceValues(choiceValues);\n}\n", "nl": "Adds a choice value and its i18n key to the existing set of choice values.", "id": "26755"}
{"code": "public boolean isReplicated(){\n  return serverId != -1;\n}\n", "nl": "Returns whether this replica is replicated or not.", "id": "19627"}
{"code": "void dispatchOnLauncherTransitionPrepare(View v,boolean animated,boolean toWorkspace){\n  if (v instanceof LauncherTransitionable) {\n    ((LauncherTransitionable)v).onLauncherTransitionPrepare(mLauncher,animated,toWorkspace);\n  }\n}\n", "nl": "Dispatches the prepare-transition event to suitable views.", "id": "38638"}
{"code": "public Object clone(){\n  try {\n    return super.clone();\n  }\n catch (  CloneNotSupportedException ex) {\n    return null;\n  }\n}\n", "nl": "Returns a copy of the template.", "id": "33218"}
{"code": "public boolean isTokenBased(){\n  return tokenBased;\n}\n", "nl": "Whether or not this particular authentication will use the Zonky OAuth access token.", "id": "48360"}
{"code": "@Override public void start(){\n  JsonObject config=config();\n  init(config);\n  vertx.setPeriodic(period,null);\n}\n", "nl": "Method called when the verticle is deployed.", "id": "24018"}
{"code": "@Override public void write(String str,int offset,int count){\n  String sub=str.substring(offset,offset + count);\nsynchronized (lock) {\n    buf.append(sub);\n  }\n}\n", "nl": "Writes <code>count</code> number of characters starting at <code>offset</code> from the String <code>str</code> to this StringWriter.", "id": "52033"}
{"code": "@Override public boolean shouldFilter(){\n  return RequestContext.getCurrentContext().getRequest().getRequestURI().endsWith(Swagger2Controller.DEFAULT_URL);\n}\n", "nl": "Filter requests to micro-services Swagger docs.", "id": "22532"}
{"code": "@Override public void memberAdded(Member member){\n  for (int i=0; i < membershipListeners.size(); i++) {\n    MembershipListener membershipListener=membershipListeners.get(i);\n    if (membershipListener != null)     membershipListener.memberAdded(member);\n  }\n}\n", "nl": "memberAdded gets invoked by the interceptor below the channel and the channel will broadcast it to the membership listeners", "id": "6732"}
{"code": "public String toXMLString() throws FSMsgException {\n  String xml=this.toXMLString(true,false);\n  return xml;\n}\n", "nl": "Returns a String representation of this object.", "id": "51187"}
{"code": "public void logExtendedResponse(ExtendedOperation extendedOperation){\n}\n", "nl": "Writes a message to the access logger with information about the extended response associated with the provided extended operation. <p> The default implementation is to not log anything.", "id": "54804"}
{"code": "public PdfName addFont(PdfDocument pdfDocument,PdfFont font){\n  pdfDocument.getDocumentFonts().add(font);\n  return addResource(font,fontNamesGen);\n}\n", "nl": "Adds font to resources and register PdfFont in the document for further flushing.", "id": "37219"}
{"code": "public Builder names(final Collection<String> names){\n  this.names.addAll(names);\n  return this;\n}\n", "nl": "Adds the provided user friendly names.", "id": "7762"}
{"code": "public void paintSliderBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintSliderBackground(context,g,x,y,w,h);\n}\n", "nl": "Paints the background of a slider. This implementation invokes the method of the same name without the orientation.", "id": "22923"}
{"code": "public static byte[] writeToArray(NSObject root) throws IOException {\n  ByteArrayOutputStream bout=new ByteArrayOutputStream();\n  write(bout,root);\n  return bout.toByteArray();\n}\n", "nl": "Writes a binary plist serialization of the given object as the root into a byte array.", "id": "54097"}
{"code": "public void close(boolean force) throws IOException {\n  if (isOpen() || force) {\n    close();\n  }\n}\n", "nl": "Close the connection.", "id": "51509"}
{"code": "private void readObject(ObjectInputStream s) throws InvalidObjectException {\n  throw new InvalidObjectException(\"Deserialization via serialization delegate\");\n}\n", "nl": "Defend against malicious streams.", "id": "49732"}
{"code": "public static Foo fetchByPrimaryKey(long fooId){\n  return getPersistence().fetchByPrimaryKey(fooId);\n}\n", "nl": "Returns the foo with the primary key or returns <code>null</code> if it could not be found.", "id": "55160"}
{"code": "protected static AttrSet mapToAttrSet(Map map){\n  return mapToAttrSet(map,false);\n}\n", "nl": "Method to convert a Map to AttrSet.", "id": "15507"}
{"code": "void deregisterInternalPlugin(InternalDirectoryServerPlugin plugin){\n  pluginLock.lock();\n  try {\n    deregisterPlugin0(plugin);\n    plugin.finalizePlugin();\n  }\n  finally {\n    pluginLock.unlock();\n  }\n}\n", "nl": "Deregisters the provided internal plugin.", "id": "9381"}
{"code": "public void removeParameter(String name){\n  uriParms.delete(name);\n}\n", "nl": "Remove a parameter given its name", "id": "37738"}
{"code": "@Override public int hashCode(){\n  int result=zeroDigit;\n  result=result * 37 + groupingSeparator;\n  result=result * 37 + decimalSeparator;\n  return result;\n}\n", "nl": "Override hashCode.", "id": "4824"}
{"code": "protected void clearAutoscroll(){\n  if (autoScroller != null) {\n    autoScroller.stop();\n    autoScroller=null;\n  }\n}\n", "nl": "clear autoscrolling", "id": "30439"}
{"code": "public static boolean isLogoutSuccess(HttpServletRequest request){\n  String status=request.getParameter(IFSConstants.LOGOUT_STATUS);\n  if (status == null || status.equalsIgnoreCase(IFSConstants.LOGOUT_SUCCESS)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Returns true if logout succeeded.", "id": "1048"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsse.BinarySecurityTokenElement createBinarySecurityTokenElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsse.impl.BinarySecurityTokenElementImpl();\n}\n", "nl": "Create an instance of BinarySecurityTokenElement", "id": "36031"}
{"code": "public void makeImmutable(){\n  if (mutable) {\n    if (subjectLocality != null) {\n      subjectLocality.makeImmutable();\n    }\n    if (authnContext != null) {\n      authnContext.makeImmutable();\n    }\n    mutable=false;\n  }\n}\n", "nl": "Makes the object immutable.", "id": "40663"}
{"code": "public static ComponentUI createUI(JComponent x){\n  return new SynthScrollPaneUI();\n}\n", "nl": "Creates a new UI object for the given component.", "id": "53117"}
{"code": "protected void tearDown(){\n  objArray=null;\n  hs=null;\n}\n", "nl": "Tears down the fixture, for example, close a network connection. This method is called after a test is executed.", "id": "5163"}
{"code": "public final int _exptype2Type(int exptype){\n  if (NULL != exptype)   return m_extendedTypes[exptype].getNodeType();\n else   return NULL;\n}\n", "nl": "Return the node type from the expanded type", "id": "22753"}
{"code": "public synchronized void put(final String name,final Object object){\n  objects.put(name,object);\n  contexts.put(name,new DecorationContext(this,this.name.child(name),json(emptyMap())));\n}\n", "nl": "Puts an object into the heap. If an object already exists in the heap with the specified name, it is overwritten.", "id": "25584"}
{"code": "@Override public String toJson(){\n  GsonBuilder gson=new GsonBuilder();\n  gson.registerTypeAdapter(Position.class,new PositionSerializer());\n  return gson.create().toJson(this);\n}\n", "nl": "Convert feature into JSON.", "id": "33379"}
{"code": "public boolean matches(XPathContext xctxt,int targetNode,QName mode) throws TransformerException {\n  double score=m_stepPattern.getMatchScore(xctxt,targetNode);\n  return (XPath.MATCH_SCORE_NONE != score) && matchModes(mode,m_template.getMode());\n}\n", "nl": "Return the mode associated with the template.", "id": "45076"}
{"code": "public final boolean isUnresolved(){\n  return addr == null;\n}\n", "nl": "Returns whether this socket address is unresolved or not.", "id": "54903"}
{"code": "public void merge_entries_at_end(BrdTracep p_from_trace,BrdTracep p_to_trace,Polyline p_joined_polyline,int p_from_entry_no,int p_to_entry_no){\n  for (  AwtreeShapeSearch curr_tree : search_trees) {\n    curr_tree.merge_entries_at_end(p_from_trace,p_to_trace,p_joined_polyline,p_from_entry_no,p_to_entry_no);\n  }\n}\n", "nl": "Merges the tree entries from p_from_trace to the end of p_to_trace.  Special implementation for combine trace for performance reasons.", "id": "58163"}
{"code": "public static NamingRequest parseXML(String xml){\n  NamingRequestParser parser=new NamingRequestParser(xml);\n  return parser.parseXML();\n}\n", "nl": "This method is used primarily at the server side to reconstruct a NamingRequest object based on the XML document received from client. The DTD of this XML document is described above.", "id": "17784"}
{"code": "private void writeObject(ObjectOutputStream s) throws IOException {\n  s.defaultWriteObject();\n  if (getUIClassID().equals(uiClassID)) {\n    byte count=JComponent.getWriteObjCounter(this);\n    JComponent.setWriteObjCounter(this,--count);\n    if (count == 0 && ui != null) {\n      ui.installUI(this);\n    }\n  }\n}\n", "nl": "See <code>readObject</code> and <code>writeObject</code> in <code>JComponent</code> for more information about serialization in Swing.", "id": "8424"}
{"code": "private void inintView(){\n  mView=(ImageView)findViewById(R.id.splash_image);\n  mLoadingProgress=(ProgressBar)findViewById(R.id.pb_loading);\n}\n", "nl": "inint View", "id": "15275"}
{"code": "@Indexable(type=IndexableType.DELETE) @Override public Foo deleteFoo(Foo foo){\n  return fooPersistence.remove(foo);\n}\n", "nl": "Deletes the foo from the database. Also notifies the appropriate model listeners.", "id": "52452"}
{"code": "public Rectangle moveUp(float move){\n  y+=move;\n  return this;\n}\n", "nl": "Increases the y coordinate.", "id": "2021"}
{"code": "public void makeImmutable(){\n  if (isMutable) {\n    isMutable=false;\n  }\n}\n", "nl": "Makes this object immutable.", "id": "17941"}
{"code": "int arity(){\n  return arity;\n}\n", "nl": "Report the arity.", "id": "40769"}
{"code": "public synchronized void startDispatcher(){\n  try {\n    taskExecutor.start();\n  }\n catch (  DataLayerException e) {\n    throw new IllegalStateException(\"Could not start task executor\",e);\n  }\n}\n", "nl": "Start the dispatcher. Synchronized to ensure that the taskExecutor is not started multiple times in parallel.", "id": "14590"}
{"code": "public static void addAttributeToSet(Attribute attribute){\n  instance.setAttributes.add(attribute);\n}\n", "nl": "Adds the provided attribute to the set of attributes that will be set in the next add operation.", "id": "31725"}
{"code": "public AttributeStatement createAttributeStatement(){\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ATTRIBUTE_STATEMENT);\n  if (obj == null) {\n    return new AttributeStatementImpl();\n  }\n else {\n    return (AttributeStatement)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>AttributeStatement</code>. Caller may need to call setters of the class to populate the object.", "id": "4135"}
{"code": "public java.lang.String toString(){\n  return toString(true,false);\n}\n", "nl": "Creates a String representation of this object. By default name space name is prepended to the element name", "id": "30993"}
{"code": "public boolean isEmpty(){\n  return (this.size() == 0);\n}\n", "nl": "Returns <tt>true</tt> if this <code>TabularDataSupport</code> instance contains no rows.", "id": "41920"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodegetownerdocumentnull.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "45305"}
{"code": "protected void reportWrongNumberArgs() throws WrongNumberArgsException {\n  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage(\"one\",null));\n}\n", "nl": "Constructs and throws a WrongNumberArgException with the appropriate message for this function object.", "id": "11435"}
{"code": "public void uninstallUI(JComponent a){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);\n  }\n}\n", "nl": "Invokes the <code>uninstallUI</code> method on each UI handled by this object.", "id": "34268"}
{"code": "@Override public void destroyObject(final UserPassKey key,final PooledObject<PooledConnectionAndInfo> p) throws Exception {\n  final PooledConnection pc=p.getObject().getPooledConnection();\n  pc.removeConnectionEventListener(this);\n  pcMap.remove(pc);\n  pc.close();\n}\n", "nl": "Closes the PooledConnection and stops listening for events from it.", "id": "22602"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.KeySharingType createKeySharingType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeySharingTypeImpl();\n}\n", "nl": "Create an instance of KeySharingType", "id": "27232"}
{"code": "public static ImageTypeSpecifier createPacked(ColorSpace colorSpace,int redMask,int greenMask,int blueMask,int alphaMask,int transferType,boolean isAlphaPremultiplied){\n  return new ImageTypeSpecifier.Packed(colorSpace,redMask,greenMask,blueMask,alphaMask,transferType,isAlphaPremultiplied);\n}\n", "nl": "Returns a specifier for a packed image format that will use a <code>DirectColorModel</code> and a packed <code>SampleModel</code> to store each pixel packed into in a single byte, short, or int.", "id": "9504"}
{"code": "protected void notifyDataChangedEvent(){\n  if (datasetObservers != null) {\n    for (    DataSetObserver observer : datasetObservers) {\n      observer.onChanged();\n    }\n  }\n}\n", "nl": "Notifies observers about data changing", "id": "50795"}
{"code": "public static boolean isString(String str){\n  return ((str.startsWith(\"\\\"\") && str.endsWith(\"\\\"\")) || (str.startsWith(\"'\") && str.endsWith(\"'\"))) && str.length() > 1;\n}\n", "nl": "check the given string is a string literal", "id": "36894"}
{"code": "public void addListDataListener(ListDataListener l){\n  listenerList.add(ListDataListener.class,l);\n}\n", "nl": "Adds a listener to the list that's notified each time a change to the data model occurs.", "id": "16352"}
{"code": "@SuppressWarnings(\"unused\") static <T>ReplayPromise<Collection<T>> replayPromiseCollection(Class<T> componentType,final Duration timeout,final long time){\n  return new ReplayPromiseImpl<>(timeout,time);\n}\n", "nl": "Generic collection promise. Added to make static imports possible.", "id": "57110"}
{"code": "public final boolean isNfcEnabled(){\n  return nfcAdapter != null && nfcAdapter.isEnabled();\n}\n", "nl": "Is nfc enabled boolean.", "id": "24889"}
{"code": "@Override public void write(ASN1Writer stream) throws IOException {\n  stream.writeStartSequence(OP_TYPE_INTERMEDIATE_RESPONSE);\n  if (oid != null) {\n    stream.writeOctetString(TYPE_INTERMEDIATE_RESPONSE_OID,oid);\n  }\n  if (value != null) {\n    stream.writeOctetString(TYPE_INTERMEDIATE_RESPONSE_VALUE,value);\n  }\n  stream.writeEndSequence();\n}\n", "nl": "Writes this protocol op to an ASN.1 output stream.", "id": "835"}
{"code": "public void paint(Graphics g,JComponent c){\n}\n", "nl": "Paints the specified component appropriately for the look and feel. This method is invoked from the <code>ComponentUI.update</code> method when the specified component is being painted.  Subclasses should override this method and use the specified <code>Graphics</code> object to render the content of the component.", "id": "24149"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_attrnextsiblingnull.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "30365"}
{"code": "public boolean isEditable(final int row,final int column){\n  if (isEditable(column)) {\n    final int actualIndex=getTableColumn(column).getIndex();\n    final JKTableRecord record=getRecord(row);\n    return record.isColumnEnabled(actualIndex);\n  }\n  return false;\n}\n", "nl": "Checks if is editable.", "id": "57364"}
{"code": "public boolean remove(T value){\n  return data.remove(value);\n}\n", "nl": "Removes a value from the list model.", "id": "53485"}
{"code": "public boolean isSendPropertyNotification(String key){\n  return hotSwappableSessionServiceConfig.isSendPropertyNotification(key);\n}\n", "nl": "Returns true if property change notifications are enabled for the specified property. Property change notifications are activated by setting the amSession.xml property \"iplanet-am-session-property-change-notification\" to \"ON\" (case-insensitive); defaults to false. Properties for which notifications should be sent are then specified vis the amSession.xml property \"iplanet-am-session-notification-property-list\"; no properties are selected by default.", "id": "22881"}
{"code": "public boolean equals(Object obj){\n  if (obj == this)   return true;\n  if (!(obj instanceof MBeanServerPermission))   return false;\n  MBeanServerPermission that=(MBeanServerPermission)obj;\n  return (this.mask == that.mask);\n}\n", "nl": "Checks two MBeanServerPermission objects for equality. Checks that <i>obj</i> is an MBeanServerPermission, and represents the same list of allowable actions as this object. <P>", "id": "6485"}
{"code": "public PdfCanvas restoreState(){\n  document.checkIsoConformance('Q',IsoKey.CANVAS_STACK);\n  if (gsStack.isEmpty()) {\n    throw new PdfException(PdfException.UnbalancedSaveRestoreStateOperators);\n  }\n  currentGs=gsStack.pop();\n  contentStream.getOutputStream().writeBytes(Q);\n  return this;\n}\n", "nl": "Restores graphics state.", "id": "2439"}
{"code": "public void stopAnimation(){\n  if (startAngleRotate != null) {\n    startAngleRotate.cancel();\n    startAngleRotate=null;\n  }\n  if (progressAnimator != null) {\n    progressAnimator.cancel();\n    progressAnimator=null;\n  }\n  if (indeterminateAnimator != null) {\n    indeterminateAnimator.cancel();\n    indeterminateAnimator=null;\n  }\n}\n", "nl": "Stops the animation", "id": "3987"}
{"code": "public boolean addFaultyMember(Member mbr,Exception x){\n  return addFaultyMember(new FaultyMember(mbr,x));\n}\n", "nl": "Adds a faulty member, and the reason the member failed.", "id": "58014"}
{"code": "public boolean hasNext(String pattern){\n  return hasNext(patternCache.forName(pattern));\n}\n", "nl": "Returns true if the next token matches the pattern constructed from the specified string. The scanner does not advance past any input. <p> An invocation of this method of the form <tt>hasNext(pattern)</tt> behaves in exactly the same way as the invocation <tt>hasNext(Pattern.compile(pattern))</tt>.", "id": "8054"}
{"code": "@Before public void init() throws IOException {\n  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();\n  git=new Git(repository);\n  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation());\n  unchecked(null);\n}\n", "nl": "Prepare common variables to access the git repository.", "id": "50649"}
{"code": "public boolean removeLogFiles(){\n  return removeLogFilesArg.isPresent();\n}\n", "nl": "Tells whether the user specified to remove log files. This method must be called after calling parseArguments.", "id": "44195"}
{"code": "public boolean isDefaultButton(){\n  JRootPane root=SwingUtilities.getRootPane(this);\n  if (root != null) {\n    return root.getDefaultButton() == this;\n  }\n  return false;\n}\n", "nl": "Gets the value of the <code>defaultButton</code> property, which if <code>true</code> means that this button is the current default button for its <code>JRootPane</code>. Most look and feels render the default button differently, and may potentially provide bindings to access the default button.", "id": "39119"}
{"code": "public Set searchSubPeopleContainers(String wildcard,Map avPairs,int level) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER),getSearchFilter(AMObject.PEOPLE_CONTAINER),wildcard,avPairs,level);\n}\n", "nl": "Searches for sub people containers in this people container using wildcards and attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be specifed so that DNs of people containers with matching attribute-value pairs will be returned.", "id": "7041"}
{"code": "public void rewind(){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"rewind\",_opsClass);\n  DynValueOperations $self=(DynValueOperations)$so.servant;\n  try {\n    $self.rewind();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Is equivalent to seek(0).", "id": "12522"}
{"code": "public static void main(String[] args){\n  final int exitCode=main(args,true,System.out,System.err);\n  if (exitCode != 0) {\n    System.exit(filterExitCode(exitCode));\n  }\n}\n", "nl": "Provides the command-line arguments to the main application for processing.", "id": "15548"}
{"code": "@Override public boolean isFullSpan(){\n  return true;\n}\n", "nl": "Returns true.", "id": "54320"}
{"code": "public char previous(){\n  if (pos == offset) {\n    return DONE;\n  }\n  pos-=1;\n  return current();\n}\n", "nl": "Decrements the iterator's index by one and returns the character at the new index. If the current index is getBeginIndex(), the index remains at getBeginIndex() and a value of DONE is returned.", "id": "28039"}
{"code": "public static FloatBuffer createFloatBuffer(float[] coords){\n  ByteBuffer bb=ByteBuffer.allocateDirect(coords.length * SIZEOF_FLOAT);\n  bb.order(ByteOrder.nativeOrder());\n  FloatBuffer fb=bb.asFloatBuffer();\n  fb.put(coords);\n  fb.position(0);\n  return fb;\n}\n", "nl": "Allocates a direct float buffer, and populates it with the float array data.", "id": "2963"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.QueryResponseType.DataType createQueryResponseTypeDataType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.QueryResponseTypeImpl.DataTypeImpl();\n}\n", "nl": "Create an instance of QueryResponseTypeDataType", "id": "3542"}
{"code": "public void paintSplitPaneDragDivider(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n}\n", "nl": "Paints the divider, when the user is dragging the divider, of a split pane.", "id": "12302"}
{"code": "static void resetSelectedUI(){\n  AppContext.getAppContext().remove(SELECTED_UI_KEY);\n}\n", "nl": "Clears out the selected UI that was last set in setSelectedUI.", "id": "18689"}
{"code": "@Override public boolean isInboundDone(){\n  return isInboundDone || engine_was_closed;\n}\n", "nl": "This method works according to the specification of implemented class.", "id": "29357"}
{"code": "public static double parseStringAsDouble(String in) throws IndexParseFieldException {\n  try {\n    return Double.parseDouble(in);\n  }\n catch (  NumberFormatException e) {\n    throw new IndexParseFieldException(in,e);\n  }\n}\n", "nl": "Parses a String as a double.", "id": "21177"}
{"code": "public static <T>java.util.List<T> dynamicQuery(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){\n  return getService().dynamicQuery(dynamicQuery);\n}\n", "nl": "Performs a dynamic query on the database and returns the matching rows.", "id": "10757"}
{"code": "public DTMIterator cloneWithReset() throws CloneNotSupportedException {\n  NodeSequence seq=(NodeSequence)super.clone();\n  seq.m_next=0;\n  if (m_cache != null) {\n    m_cache.increaseUseCount();\n  }\n  return seq;\n}\n", "nl": "Note: Not a deep clone.", "id": "43869"}
{"code": "@Override public void addIntHeader(String name,int value){\n  if (name == null || name.length() == 0) {\n    return;\n  }\n  if (isCommitted()) {\n    return;\n  }\n  if (included) {\n    return;\n  }\n  addHeader(name,\"\" + value);\n}\n", "nl": "Add the specified integer header to the specified value.", "id": "32654"}
{"code": "void delete(WriteableTransaction txn) throws StorageRuntimeException {\n  for (  Tree tree : listTrees()) {\n    tree.delete(txn);\n  }\n}\n", "nl": "Delete this entry container from disk. The entry container should be closed before calling this method.", "id": "12315"}
{"code": "public void addAttributes(AttributeSet attr){\n  StyleContext context=StyleContext.this;\n  attributes=context.addAttributes(attributes,attr);\n  fireStateChanged();\n}\n", "nl": "Adds a set of attributes to the element.", "id": "46010"}
{"code": "protected void incrementAnimationIndex(){\n  int newValue=getAnimationIndex() + 1;\n  if (newValue < numFrames) {\n    setAnimationIndex(newValue);\n  }\n else {\n    setAnimationIndex(0);\n  }\n}\n", "nl": "Sets the index of the current animation frame, to the next valid value, which results in the progress bar being repainted. The next valid value is, by default, the current animation index plus one. If the new value would be too large, this method sets the index to 0. Subclasses might need to override this method to ensure that the index does not go over the number of frames needed for the particular progress bar instance. This method is invoked by the default animation thread every <em>X</em> milliseconds, where <em>X</em> is specified by the \"ProgressBar.repaintInterval\" UI default.", "id": "3745"}
{"code": "public String toString(){\n  String text=\"\";\nswitch (m_dialogState) {\ncase _EARLY:\n    text=\"Early Dialog\";\n  break;\ncase _CONFIRMED:\ntext=\"Confirmed Dialog\";\nbreak;\ncase _COMPLETED:\ntext=\"Completed Dialog\";\nbreak;\ncase _TERMINATED:\ntext=\"Terminated Dialog\";\nbreak;\ndefault :\ntext=\"Error while printing Dialog State\";\nbreak;\n}\nreturn text;\n}\n", "nl": "This method returns a string version of this class.", "id": "29844"}
{"code": "@Override public void reset(){\n  for (  ExpandDrill curr_drill : drill_list)   curr_drill.reset();\n  for (  MazeSearchElement curr_info : maze_search_info_arr)   curr_info.reset();\n}\n", "nl": "Resets all drills of this page for autorouting the next connection.", "id": "33917"}
{"code": "private void validateView(){\n  Component validateRoot=SwingUtilities.getValidateRoot(this,false);\n  if (validateRoot == null) {\n    return;\n  }\n  validateRoot.validate();\n  RepaintManager rm=RepaintManager.currentManager(this);\n  if (rm != null) {\n    rm.removeInvalidComponent((JComponent)validateRoot);\n  }\n}\n", "nl": "Ascends the <code>Viewport</code>'s parents stopping when a component is found that returns <code>true</code> to <code>isValidateRoot</code>. If all the <code>Component</code>'s  parents are visible, <code>validate</code> will then be invoked on it. The <code>RepaintManager</code> is then invoked with <code>removeInvalidComponent</code>. This is the synchronous version of a <code>revalidate</code>.", "id": "17057"}
{"code": "public static void cassandraSetupComplete(){\n  lock.countDown();\n}\n", "nl": "This method is supposed to be called from within the CassandraDaemon advice to signal that Cassandra setup process is completed.", "id": "58419"}
{"code": "@Override public boolean accept(File file){\n  String name=file.getName();\n  for (  String name2 : this.names) {\n    if (caseSensitivity.checkEquals(name,name2)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks to see if the filename matches.", "id": "2103"}
{"code": "public void mark(int limit){\n}\n", "nl": "<i>This operation is not supported</i>.", "id": "39453"}
{"code": "public static char[] convertFromUtf32ToCharArray(int codePoint){\n  if (codePoint < 0x10000) {\n    return new char[]{(char)codePoint};\n  }\n  codePoint-=0x10000;\n  return new char[]{(char)(codePoint / 0x400 + 0xd800),(char)(codePoint % 0x400 + 0xdc00)};\n}\n", "nl": "Converts a UTF32 code point value to a char array with the corresponding character(s).", "id": "2615"}
{"code": "private synchronized void seekToCurrentValue() throws IOException {\n  valBuffer.reset();\n}\n", "nl": "Position valLenIn/valIn to the 'value' corresponding to the 'current' key", "id": "11680"}
{"code": "public static final <V>V fromJson(String json,Type type){\n  return GSON.fromJson(json,type);\n}\n", "nl": "Convert string to given type", "id": "8497"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.LaxTsLastElement createLaxTsLastElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.LaxTsLastElementImpl();\n}\n", "nl": "Create an instance of LaxTsLastElement", "id": "12052"}
{"code": "public void evaluate(XPathContext xctxt,FastStringBuffer buf,int context,org.apache.xml.utils.PrefixResolver nsNode){\n  buf.append(m_val);\n}\n", "nl": "Write the value into the buffer.", "id": "17012"}
{"code": "public void textValueChanged(TextEvent textEvent){\n  Integer cpos=Integer.valueOf(TextComponent.this.getCaretPosition());\n  firePropertyChange(ACCESSIBLE_TEXT_PROPERTY,null,cpos);\n}\n", "nl": "TextListener notification of a text value change.", "id": "30763"}
{"code": "public void windowStateChanged(WindowEvent e){\n}\n", "nl": "Invoked when a window state is changed.", "id": "37452"}
{"code": "public synchronized void newPixels(int x,int y,int w,int h){\n  newPixels(x,y,w,h,true);\n}\n", "nl": "Sends a rectangular region of the buffer of pixels to any ImageConsumers that are currently interested in the data for this image and notify them that an animation frame is complete. This method only has effect if the animation flag has been turned on through the setAnimated() method. If the full buffer update flag was turned on with the setFullBufferUpdates() method then the rectangle parameters will be ignored and the entire buffer will always be sent.", "id": "6428"}
{"code": "public void handleButton1Request(RequestInvocationEvent event){\n  backTrail();\n  forwardToRealmView(event);\n}\n", "nl": "Handles \"back to\" page request.", "id": "35428"}
{"code": "public void clearPasswordHistory(){\n  logger.trace(\"Clearing password history for user %s\",userDNString);\n  clearAttribute(OP_ATTR_PWPOLICY_HISTORY_LC);\n}\n", "nl": "Clears the password history state information for the user.  This is only intended for testing purposes.", "id": "20306"}
{"code": "public V remove(Object key){\n  if (!isValidKey(key))   return null;\n  int index=((Enum<?>)key).ordinal();\n  Object oldValue=vals[index];\n  vals[index]=null;\n  if (oldValue != null)   size--;\n  return unmaskNull(oldValue);\n}\n", "nl": "Removes the mapping for this key from this map if present.", "id": "10211"}
{"code": "public X509Certificate generateX509Certificate(PrivateKey key) throws SecurityException, SignatureException, InvalidKeyException {\n  try {\n    return generateX509Certificate(key,\"BC\",null);\n  }\n catch (  NoSuchProviderException e) {\n    throw new SecurityException(\"BC provider not installed!\");\n  }\n}\n", "nl": "generate an X509 certificate, based on the current issuer and subject using the default provider \"BC\".", "id": "48540"}
{"code": "private void realmCallback(final RealmCallback callback){\n}\n", "nl": "This callback is used to process realm information. It is not used.", "id": "26303"}
{"code": "private void initializeBackupID(){\n  SimpleDateFormat dateFormat=new SimpleDateFormat(ServerConstants.DATE_FORMAT_COMPACT_LOCAL_TIME);\n  final String id=dateFormat.format(new Date());\n  backupID.setText(id);\n}\n", "nl": "Initialize the backup ID field with a value.", "id": "42661"}
{"code": "public PlaPointFloat dsn_to_board(double[] p_tuple){\n  double x=dsn_to_board(p_tuple[0] - base_x);\n  double y=dsn_to_board(p_tuple[1] - base_y);\n  return new PlaPointFloat(x,y);\n}\n", "nl": "Transforms a dsn tuple to a geometry.planar.FloatPoint", "id": "35597"}
{"code": "public Status createStatus(String value) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.STATUS,value);\n  if (obj == null) {\n    return new StatusImpl(value);\n  }\n else {\n    return (Status)obj;\n  }\n}\n", "nl": "Returns the <code>Status</code> Object. This object will be immutable.", "id": "37947"}
{"code": "public boolean optionsEqual(AttributeDescription attributeDescription){\n  return toAttribute0().getAttributeDescription().equals(attributeDescription);\n}\n", "nl": "Indicates whether this attribute builder has exactly the specified set of options.", "id": "35453"}
{"code": "private void assertNoType(AST.Access type) throws SyntaxException {\n  if (type != null) {\n    err.SyntaxException(\"JavaScript don't have type\",type.line_col());\n  }\n}\n", "nl": "no type", "id": "40295"}
{"code": "boolean containsArguments(){\n  return !args.isEmpty();\n}\n", "nl": "Indicates whether this group contains any members.", "id": "52967"}
{"code": "private boolean checkJarEntry(final JarEntry jarEntry){\n  return Pattern.compile(\"lang.+\\\\.xml\").matcher(jarEntry.getName()).matches();\n}\n", "nl": "check if jar entry is lang file.", "id": "35304"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_notationsremovenameditem1.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "53093"}
{"code": "public boolean parseWebXml(URL url,WebXml dest,boolean fragment) throws IOException {\n  if (url == null) {\n    return true;\n  }\n  InputSource source=new InputSource(url.toExternalForm());\n  source.setByteStream(url.openStream());\n  return parseWebXml(source,dest,fragment);\n}\n", "nl": "Parse a web descriptor at a location.", "id": "34102"}
{"code": "public boolean isAscending(){\n  return isAscending;\n}\n", "nl": "Gets if this field is ascending or not.", "id": "29889"}
{"code": "public boolean deleteAllNamedPolicyTemplates(String policyDN) throws AMException, SSOException {\n  throw new UnsupportedOperationException();\n}\n", "nl": "Deletes all the named policy templates for this OrganizationalUnit corresponding to the given policy. This includes Org based and role based policy templates. This is a convienence method.", "id": "9939"}
{"code": "public void visitTableSwitchInsn(int min,int max,Label dflt,Label... labels){\n  if (mv != null) {\n    mv.visitTableSwitchInsn(min,max,dflt,labels);\n  }\n}\n", "nl": "Visits a TABLESWITCH instruction.", "id": "34061"}
{"code": "@Override public synchronized void close() throws IOException {\n  buffer=null;\n  notifyAll();\n}\n", "nl": "Closes this stream. This implementation releases the buffer used for the pipe and notifies all threads waiting to read or write.", "id": "46858"}
{"code": "public static int hash32(final String text){\n  final byte[] bytes=text.getBytes();\n  return hash32(bytes,bytes.length);\n}\n", "nl": "Generates 32 bit hash from a string.", "id": "36522"}
{"code": "public boolean removeParameter(String name){\n  return authParams.delete(name);\n}\n", "nl": "delete the specified parameter", "id": "30807"}
{"code": "public void addChangingListener(OnWheelChangedListener listener){\n  changingListeners.add(listener);\n}\n", "nl": "Adds wheel changing listener", "id": "16203"}
{"code": "private static void legacyMergeSort(Object[] a){\n  Object[] aux=a.clone();\n  mergeSort(aux,a,0,a.length,0);\n}\n", "nl": "To be removed in a future release.", "id": "30893"}
{"code": "private static byte char64(char x){\n  if (x < 0 || x > index_64.length) {\n    return -1;\n  }\n  return index_64[x];\n}\n", "nl": "Look up the 3 bits base64-encoded by the specified character, range-checking against conversion table", "id": "11288"}
{"code": "public static NSObject parse(InputStream is) throws ParserConfigurationException, IOException, SAXException, PropertyListFormatException, ParseException {\n  DocumentBuilder docBuilder=getDocBuilder();\n  Document doc=docBuilder.parse(is);\n  return parse(doc);\n}\n", "nl": "Parses a XML property list from an input stream.", "id": "39212"}
{"code": "public int size(){\n  return count;\n}\n", "nl": "Returns the current size of the buffer.", "id": "37346"}
{"code": "public boolean isUnshared(){\n  return unshared;\n}\n", "nl": "Returns boolean value indicating whether or not the serializable field represented by this ObjectStreamField instance is unshared.", "id": "30962"}
{"code": "static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {\n  return createObject(factoryId,null,fallbackClassName);\n}\n", "nl": "Finds the implementation Class object in the specified order.  The specified order is the following: <ol> <li>query the system property using <code>System.getProperty</code> <li>read <code>META-INF/services/<i>factoryId</i></code> file <li>use fallback classname </ol>", "id": "13331"}
{"code": "public long tryWriteLock(){\n  long s, next;\n  return ((((s=state) & ABITS) == 0L && U.compareAndSwapLong(this,STATE,s,next=s + WBIT)) ? next : 0L);\n}\n", "nl": "Exclusively acquires the lock if it is immediately available.", "id": "45054"}
{"code": "@SuppressWarnings(\"unchecked\") private V report(int s) throws ExecutionException {\n  Object x=outcome;\n  if (s == NORMAL)   return (V)x;\n  if (s >= CANCELLED)   throw new CancellationException();\n  throw new ExecutionException((Throwable)x);\n}\n", "nl": "Returns result or throws exception for completed task.", "id": "22230"}
{"code": "private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  if (outputStream == null && duplicateContentBuffer != null) {\n    outputStream=new ByteArrayOutputStream();\n    write(duplicateContentBuffer);\n    duplicateContentBuffer=null;\n  }\n}\n", "nl": "This method is invoked while deserialization", "id": "28147"}
{"code": "public boolean seek(int index){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"seek\",_opsClass);\n  DynArrayOperations $self=(DynArrayOperations)$so.servant;\n  try {\n    return $self.seek(index);\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Sets the current position to index. The current position is indexed 0 to n-1, that is, index zero corresponds to the first component. The operation returns true if the resulting current position indicates a component of the DynAny and false if index indicates a position that does not correspond to a component. Calling seek with a negative index is legal. It sets the current position to -1 to indicate no component and returns false. Passing a non-negative index value for a DynAny that does not have a component at the corresponding position sets the current position to -1 and returns false.", "id": "43629"}
{"code": "public static void closeSession() throws HibernateException {\n  Session session=(Session)threadLocal.get();\n  threadLocal.set(null);\n  if (session != null) {\n    session.close();\n  }\n}\n", "nl": "Close the single hibernate session instance.", "id": "30362"}
{"code": "public void clear(){\n  attr.clear();\n  entries.clear();\n}\n", "nl": "Clears the main Attributes as well as the entries in this Manifest.", "id": "54150"}
{"code": "private void readElementDeclaration() throws IOException, XmlPullParserException {\n  read(START_ELEMENT);\n  skip();\n  readName();\n  readContentSpec();\n  skip();\n  read('>');\n}\n", "nl": "Read an element declaration. This contains a name and a content spec. <!ELEMENT foo EMPTY > <!ELEMENT foo (bar?,(baz|quux)) > <!ELEMENT foo (#PCDATA|bar)* >", "id": "21945"}
{"code": "public static boolean isShort(String desc){\n  return desc.endsWith(\"S\");\n}\n", "nl": "Tells whether a given type is a short", "id": "51076"}
{"code": "public boolean canTraverseOutsideSubtree(){\n  return super.canTraverseOutsideSubtree() ? true : m_arg2.canTraverseOutsideSubtree();\n}\n", "nl": "Tell if this expression or it's subexpressions can traverse outside  the current subtree.", "id": "8232"}
{"code": "public static void showMessageDialog(Component parentComponent,Object message,String title,int messageType,Icon icon) throws HeadlessException {\n  showOptionDialog(parentComponent,message,title,DEFAULT_OPTION,messageType,icon,null,null);\n}\n", "nl": "Brings up a dialog displaying a message, specifying all parameters.", "id": "5342"}
{"code": "public Object instantiateChild(String beanName) throws IOException, ClassNotFoundException {\n  BeanContext bc=getBeanContextPeer();\n  return Beans.instantiate(bc.getClass().getClassLoader(),beanName,bc);\n}\n", "nl": "<p> The instantiateChild method is a convenience hook in BeanContext to simplify the task of instantiating a Bean, nested, into a <tt>BeanContext</tt>. </p> <p> The semantics of the beanName parameter are defined by java.beans.Beans.instantiate. </p>", "id": "9490"}
{"code": "@Override public List<Foo> findAll(){\n  return findAll(QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);\n}\n", "nl": "Returns all the foos.", "id": "44637"}
{"code": "@SuppressWarnings(\"unused\") static <T>ReplayPromise<T> replayPromise(Class<T> cls,final Duration timeout,final long time){\n  return new ReplayPromiseImpl<>(timeout,time);\n}\n", "nl": "Generic promise. Added to make static imports possible.", "id": "8618"}
{"code": "public static JLabel createDefaultLabel(){\n  return createDefaultLabel(LocalizableMessage.EMPTY);\n}\n", "nl": "Creates a label (with default font) with no text.", "id": "13358"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.TransportBindingElement createTransportBindingElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.TransportBindingElementImpl();\n}\n", "nl": "Create an instance of TransportBindingElement", "id": "37503"}
{"code": "@Override public com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(long fooId) throws com.liferay.portal.kernel.exception.PortalException {\n  return _fooLocalService.deleteFoo(fooId);\n}\n", "nl": "Deletes the foo with the primary key from the database. Also notifies the appropriate model listeners.", "id": "36050"}
{"code": "public boolean isRowSelected(int row){\n  return getSelectionModel().isRowSelected(row);\n}\n", "nl": "Returns true if the node identified by row is selected.", "id": "22236"}
{"code": "private void detach(){\n  if (prevTakeIndex >= 0) {\n    prevTakeIndex=DETACHED;\n    itrs.doSomeSweeping(true);\n  }\n}\n", "nl": "Called when itrs should stop tracking this iterator, either because there are no more indices to update (cursor < 0 && nextIndex < 0 && lastRet < 0) or as a special exception, when lastRet >= 0, because hasNext() is about to return false for the first time.  Call only from iterating thread.", "id": "33"}
{"code": "public void debug(int level,String msg,Throwable e){\nswitch (level) {\ncase 2:\n    debugInst.error(msg,e);\n  break;\ncase 1:\ndebugInst.warning(msg,e);\nbreak;\ndefault :\ndebugInst.message(msg,e);\n}\n}\n", "nl": "The method which does the actual Debug. Pending work - The string has to be internationalized here.", "id": "37520"}
{"code": "public Status createStatus() throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.STATUS);\n  if (obj == null) {\n    return new StatusImpl();\n  }\n else {\n    return (Status)obj;\n  }\n}\n", "nl": "Returns the <code>Status</code> Object.", "id": "45540"}
{"code": "public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {\n  if (documentHandler != null)   documentHandler.ignorableWhitespace(ch,start,length);\n}\n", "nl": "Adapt a SAX2 ignorable whitespace event.", "id": "16212"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptedKeyElement createEncryptedKeyElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptedKeyElementImpl();\n}\n", "nl": "Create an instance of EncryptedKeyElement", "id": "43204"}
{"code": "@DataProvider(name=\"eclRequestControl\") public Object[][] createECLRequestControlTest(){\n  return new Object[][]{{true,\"\"},{false,\"o=test:;\"},{false,\"o=test:000001210b6f21e904b100000002;\"},{false,\"o=test:000001210b6f21e904b100000001;o=test2:000001210b6f21e904b100000002;\"},{false,\"o=test:000001210b6f21e904b100000001 000001210b6f21e904b200000001;\" + \"o=test2:000001210b6f21e904b100000002 000001210b6f21e904b200000002;\"}};\n}\n", "nl": "Create values for External Changelog Request Control.", "id": "6775"}
{"code": "static MonitoringAttributesViewPanel<MonitoringAttributes> createMonitoringAttributesInstance(LinkedHashSet<MonitoringAttributes> attributes){\n  return new MonitoringAttributesViewPanel<>(attributes);\n}\n", "nl": "Creates an instance of this panel that uses MonitoringAttributes as attributes.", "id": "11041"}
{"code": "private void displayError(LocalizableMessage msg,LocalizableMessage title){\n  Utilities.displayError(this,msg,title);\n  toFront();\n}\n", "nl": "Displays an error message dialog.", "id": "46204"}
{"code": "public int addFaultyMember(FaultyMember[] mbrs){\n  int result=0;\n  for (int i=0; mbrs != null && i < mbrs.length; i++) {\n    if (addFaultyMember(mbrs[i]))     result++;\n  }\n  return result;\n}\n", "nl": "Adds a list of faulty members", "id": "6740"}
{"code": "public void checkNumberArgs(int argNum) throws WrongNumberArgsException {\n  if (argNum < 2)   reportWrongNumberArgs();\n}\n", "nl": "Check that the number of arguments passed to this function is correct.", "id": "54440"}
{"code": "public final AMConfigAuditEventBuilder realm(String realm){\n  putRealm(jsonValue,realm);\n  return self();\n}\n", "nl": "Sets the realm for the event.", "id": "33372"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsfederation.RealmElement createRealmElement(java.lang.String value) throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.RealmElementImpl(value);\n}\n", "nl": "Create an instance of RealmElement", "id": "57172"}
{"code": "public MemberName asConstructor(){\nswitch (getReferenceKind()) {\ncase REF_invokeSpecial:\n    return clone().changeReferenceKind(REF_newInvokeSpecial,REF_invokeSpecial);\ncase REF_newInvokeSpecial:\n  return this;\n}\nthrow new IllegalArgumentException(this.toString());\n}\n", "nl": "If this MN is not REF_newInvokeSpecial, return a clone with that ref. kind. In that case it must already be REF_invokeSpecial.", "id": "49579"}
{"code": "public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {\n  removePageSessionAttribute(PAGE_MODIFIED);\n  super.handleButton2Request(event);\n}\n", "nl": "Handles reset request.", "id": "10879"}
{"code": "public static boolean isMatch(String pattern,String text){\n  Pattern pat=Pattern.compile(pattern);\n  Matcher m=pat.matcher(text);\n  while (m.find()) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Returns true if text matches a given pattern.", "id": "37896"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.SecretKeyProtectionElement createSecretKeyProtectionElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SecretKeyProtectionElementImpl();\n}\n", "nl": "Create an instance of SecretKeyProtectionElement", "id": "54225"}
{"code": "public void process(CommandManager mgr,SSOToken ssoToken) throws CLIException {\n  if (argv.length == 0) {\n    UsageFormatter.getInstance().format(mgr);\n  }\n else   if (argv.length == 1) {\n    process(mgr,argv[0],ssoToken);\n  }\n else {\n    process(mgr,argv,ssoToken);\n  }\n}\n", "nl": "Processes the request.", "id": "27466"}
{"code": "public void syncEndTagFile(){\n  copyTagToPageScope(VariableInfo.AT_BEGIN);\n  copyTagToPageScope(VariableInfo.AT_END);\n  restoreNestedVariables();\n}\n", "nl": "Synchronize variables at end of tag file", "id": "13604"}
{"code": "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  try {\n    updateInternalMask();\n  }\n catch (  ParseException pe) {\n  }\n}\n", "nl": "Subclassed to update the internal representation of the mask after the default read operation has completed.", "id": "25182"}
{"code": "public void deleteDynamicGroups(Set groupDNs) throws AMException, SSOException {\n  Iterator iter=groupDNs.iterator();\n  while (iter.hasNext()) {\n    String groupDN=(String)iter.next();\n    AMDynamicGroup group=new AMDynamicGroupImpl(super.token,groupDN);\n    group.delete();\n  }\n}\n", "nl": "Deletes dynamic groups in this group.", "id": "1463"}
{"code": "public static String truncate(String str,int len){\n  if (str == null) {\n    return null;\n  }\n  if (len < 0) {\n    return null;\n  }\n  if (str.length() > len) {\n    return str.substring(0,len);\n  }\n else {\n    return str;\n  }\n}\n", "nl": "truncate a string if it longer than the argument", "id": "27900"}
{"code": "public void destroy(){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"destroy\",_opsClass);\n  DynEnumOperations $self=(DynEnumOperations)$so.servant;\n  try {\n    $self.destroy();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Destroys a DynAny object. This operation frees any resources used to represent the data value associated with a DynAny object. It must be invoked on references obtained from one of the creation operations on the ORB interface or on a reference returned by DynAny.copy() to avoid resource leaks. Invoking destroy on component DynAny objects (for example, on objects returned by the current_component operation) does nothing. Destruction of a DynAny object implies destruction of all DynAny objects obtained from it. That is, references to components of a destroyed DynAny become invalid. Invocations on such references raise OBJECT_NOT_EXIST. It is possible to manipulate a component of a DynAny beyond the life time of the DynAny from which the component was obtained by making a copy of the component with the copy operation before destroying the DynAny from which the component was obtained.", "id": "53335"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n  DirectoryServer.registerAlertGenerator(this);\n}\n", "nl": "Ensures that the Directory Server is running and registers with it as an alert generator.", "id": "38221"}
{"code": "@Override public void removeByUuid(String uuid){\n  for (  Foo foo : findByUuid(uuid,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {\n    remove(foo);\n  }\n}\n", "nl": "Removes all the foos where uuid = &#63; from the database.", "id": "34033"}
{"code": "public ByteArrayBuilder appendZeroTerminatedByteArray(byte[] bytes){\n  builder.appendBytes(bytes);\n  return appendZeroSeparator();\n}\n", "nl": "Append all the bytes from the byte array to this ByteArrayBuilder and then append a final zero byte separator for compatibility with legacy implementations. <p> Note: the super long method name it is intentional: nobody will want to use it, which is good because nobody should.", "id": "13905"}
{"code": "public void write(OutputStream out,Document doc,int pos,int len) throws IOException, BadLocationException {\n  OutputStreamWriter osw=new OutputStreamWriter(out);\n  write(osw,doc,pos,len);\n  osw.flush();\n}\n", "nl": "Writes content from a document to the given stream in a format appropriate for this kind of content handler.", "id": "45185"}
{"code": "public void error(Object message){\n  log(Level.SEVERE,String.valueOf(message),null);\n}\n", "nl": "Logs a message with <code>java.util.logging.Level.SEVERE</code>.", "id": "845"}
{"code": "public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {\n  removePageSessionAttribute(PAGE_MODIFIED);\n  super.handleButton1Request(event);\n}\n", "nl": "Handles save request.", "id": "42425"}
{"code": "public void removeScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.remove(listener);\n}\n", "nl": "Removes wheel scrolling listener", "id": "24685"}
{"code": "public void addSeparator(){\n  ensurePopupMenuCreated();\n  popupMenu.addSeparator();\n}\n", "nl": "Appends a new separator to the end of the menu.", "id": "16539"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ps.OldProvidedNameIdentifierElement createOldProvidedNameIdentifierElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.OldProvidedNameIdentifierElementImpl();\n}\n", "nl": "Create an instance of OldProvidedNameIdentifierElement", "id": "57159"}
{"code": "public static List<ImageData> createGifFrames(URL url){\n  byte[] imageType=readImageType(url);\n  if (imageTypeIs(imageType,gif)) {\n    GifImageData image=new GifImageData(url);\n    GifImageHelper.processImage(image);\n    return image.getFrames();\n  }\n  throw new IllegalArgumentException(\"GIF image expected.\");\n}\n", "nl": "Returns <CODE>List</CODE> of gif image frames", "id": "42251"}
{"code": "public String toUTF8(byte[] data) throws UnsupportedEncodingException {\n  Reject.ifNull(data);\n  return new String(data,ENCODING);\n}\n", "nl": "Convert a byte array into a String using the UTF-8 encoding.", "id": "8525"}
{"code": "public static boolean isReconAction(String action){\n  try {\n    valueOf(action);\n    return true;\n  }\n catch (  IllegalArgumentException ex) {\n    return false;\n  }\n}\n", "nl": "Convenience helper that checks if a given string is contained in this enum", "id": "24796"}
{"code": "public boolean isApplicable(AciTargetMatchContext matchCtx){\n  if (matchCtx.getControlOID() == null) {\n    return false;\n  }\n  boolean ret=isApplicable(matchCtx.getControlOID());\n  if (EnumTargetOperator.NOT_EQUALITY.equals(op)) {\n    return !ret;\n  }\n  return ret;\n}\n", "nl": "Check if a targetcontrol is applicable based on the provided target match context.", "id": "7418"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.InformalNameElement createInformalNameElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.InformalNameElementImpl();\n}\n", "nl": "Create an instance of InformalNameElement", "id": "41425"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_nodelistreturnfirstitem.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "38960"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ps.ProviderIDElement createProviderIDElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.ProviderIDElementImpl();\n}\n", "nl": "Create an instance of ProviderIDElement", "id": "18727"}
{"code": "public String valueTypeName(Field field){\n  Type items=getApiaryConfig().getType(field.getTypeUrl());\n  return typeName(items,getField(items,\"value\"),\"value\");\n}\n", "nl": "Returns a name for a map field value's type.", "id": "41732"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(importNode03.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "19259"}
{"code": "public boolean isModernTls(){\n  return modernTls;\n}\n", "nl": "Returns true if this route uses modern TLS.", "id": "49703"}
{"code": "public boolean isOptional(final AttributeType attributeType){\n  return isExtensibleObject || optionalAttributes.contains(attributeType);\n}\n", "nl": "Indicates whether the provided attribute type is included in the optional attribute list for this or any of its superior objectclasses.", "id": "23408"}
{"code": "public static Event35.Builder newBuilder(){\n  return new Event35.Builder();\n}\n", "nl": "Creates a new Event RecordBuilder", "id": "33364"}
{"code": "public boolean isActive(@StringRes int resId,FlagContextInterface flagContext){\n  return isActive(context.getString(resId),flagContext);\n}\n", "nl": "Method to call to check that a flag is activated", "id": "12954"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_elementgetattributenode.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "40270"}
{"code": "public void updateUI(){\n  setUI((TabbedPaneUI)UIManager.getUI(this));\n}\n", "nl": "Resets the UI property to a value from the current look and feel.", "id": "43721"}
{"code": "public boolean includeObjectClasses(){\n  return includeObjectClasses;\n}\n", "nl": "Indicates whether the set of objectclasses should be included in the entries written to LDIF.", "id": "12082"}
{"code": "@NonNull public static Interpolator anticipate(float tension){\n  return new AnticipateInterpolator(tension);\n}\n", "nl": "<strong>ANDROID INTERPOLATOR</strong><br/><br/> An interpolator where the change starts backward then flings forward.", "id": "42622"}
{"code": "public String defaultValue(Field field,PythonImportHandler importHandler){\n  return defaultValue(field.getType(),importHandler);\n}\n", "nl": "Return the default value for the given field. Return null if there is no default value.", "id": "10521"}
{"code": "public void nodesWereRemoved(TreeNode node,int[] childIndices,Object[] removedChildren){\n  if (node != null && childIndices != null) {\n    fireTreeNodesRemoved(this,getPathToRoot(node),childIndices,removedChildren);\n  }\n}\n", "nl": "Invoke this method after you've removed some TreeNodes from node.  childIndices should be the index of the removed elements and must be sorted in ascending order. And removedChildren should be the array of the children objects that were removed.", "id": "14274"}
{"code": "public void sendAcknowledgement() throws IOException {\n  if (isCommitted()) {\n    return;\n  }\n  if (included) {\n    return;\n  }\n  getCoyoteResponse().action(ActionCode.ACK,null);\n}\n", "nl": "Send an acknowledgement of a request.", "id": "40889"}
{"code": "private String stripCodeValueSentences(String string){\n  return string.replaceAll(\"This result code corresponds to the LDAP result code value of \\\\{@code \\\\d+\\\\}.\",\"\");\n}\n", "nl": "Returns a string with lines sentences of the following form removed: This result code corresponds to the LDAP result code value of &#x7b;&#x40;code 0&#x7d;.", "id": "44560"}
{"code": "private static void parse(Reader in,ContentHandler contentHandler) throws IOException, SAXException {\n  XMLReader reader=new ExpatReader();\n  reader.setContentHandler(contentHandler);\n  reader.parse(new InputSource(in));\n}\n", "nl": "Parses xml from the given reader and fires events on the given SAX handler.", "id": "5756"}
{"code": "public void delete_selected_items(){\n  if (board_is_read_only)   return;\n  if (!is_StateSelectedItem())   return;\n  StateInteractive new_state=((StateSelectedItem)interactive_state).delete_items();\n  set_interactive_state(new_state);\n}\n", "nl": "Deletes all unfixed selected items.", "id": "39281"}
{"code": "protected String resolvePrefix(SerializationHandler rhandler,String prefix,String nodeNamespace) throws TransformerException {\n  return prefix;\n}\n", "nl": "Resolve the namespace into a prefix.  Meant to be overidded by elemAttribute if this class is derived.", "id": "52669"}
{"code": "public Location subtract(double x,double y,double z){\n  this.x-=x;\n  this.y-=y;\n  this.z-=z;\n  return this;\n}\n", "nl": "Subtracts the location by another. Not world-aware and orientation independent.", "id": "34534"}
{"code": "public int value(){\n  return _value;\n}\n", "nl": "Returns the <code>int</code> constant identifying the type of an IR object.", "id": "32683"}
{"code": "boolean elementExists(String name){\n  return !\"unknown\".equals(name) && (elementHash.get(name) != null);\n}\n", "nl": "Returns <code>true</code> if the element is part of the DTD, otherwise returns <code>false</code>.", "id": "44935"}
{"code": "private InternalSession resolveToken(SessionID token) throws SessionException {\n  InternalSession sess=sessionAccessManager.getInternalSession(token);\n  if (sess == null) {\n    sess=resolveRestrictedToken(token,true);\n  }\n  if (sess == null) {\n    throw new InvalidSessionIdException(token);\n  }\n  return sess;\n}\n", "nl": "As opposed to locateSession() this one accepts normal or restricted token This is expected to be only called once the session is detected as local", "id": "14029"}
{"code": "public static String encryptPassword(String text){\n  return JKEncDec.encode(text);\n}\n", "nl": "Encrypt password.", "id": "19747"}
{"code": "@Nullable @Override public ActionMode onWindowStartingSupportActionMode(@NonNull final ActionMode.Callback callback){\n  return delegate.onWindowStartingSupportActionMode(callback);\n}\n", "nl": "Called when a support action mode is being started for this window. Gives the callback an opportunity to handle the action mode in its own unique and beautiful way. If this method returns null the system can choose a way to present the mode or choose not to start the mode at all.", "id": "9232"}
{"code": "public static String BooleanToString(Boolean bool){\n  if (bool == null) {\n    return \"\";\n  }\n  return bool.booleanValue() ? \"1\" : \"0\";\n}\n", "nl": "Converts a Boolean object to a String representing XML boolean.", "id": "34882"}
{"code": "public static void encode(String content,ErrorCorrectionLevel ecLevel,QRCode qrCode) throws WriterException {\n  encode(content,ecLevel,null,qrCode);\n}\n", "nl": "Encode \"bytes\" with the error correction level \"ecLevel\". The encoding mode will be chosen internally by chooseMode(). On success, store the result in \"qrCode\". <p> We recommend you to use QRCode.EC_LEVEL_L (the lowest level) for \"getECLevel\" since our primary use is to show QR code on desktop screens. We don't need very strong error correction for this purpose. <p> Note that there is no way to encode bytes in MODE_KANJI. We might want to add EncodeWithMode() with which clients can specify the encoding mode. For now, we don't need the functionality.", "id": "6067"}
{"code": "protected Expression equals(int opPos) throws TransformerException {\n  return compileOperation(new Equals(),opPos);\n}\n", "nl": "Compile a '=' operation.", "id": "44345"}
{"code": "@Override public Foo remove(long fooId) throws NoSuchFooException {\n  return remove((Serializable)fooId);\n}\n", "nl": "Removes the foo with the primary key from the database. Also notifies the appropriate model listeners.", "id": "6590"}
{"code": "@Override public NamingEnumeration<NameClassPair> list(String name) throws NamingException {\n  return list(new CompositeName(name));\n}\n", "nl": "Enumerates the names bound in the named context, along with the class names of objects bound to them.", "id": "49395"}
{"code": "public static boolean verifyOcspCertificates(BasicOCSPResp ocsp,KeyStore keystore,String provider){\n  try {\n    for (    X509Certificate certStoreX509 : SignUtils.getCertificates(keystore)) {\n      try {\n        return SignUtils.isSignatureValid(ocsp,certStoreX509,provider);\n      }\n catch (      Exception ex) {\n      }\n    }\n  }\n catch (  Exception e) {\n  }\n  return false;\n}\n", "nl": "Verifies an OCSP response against a KeyStore.", "id": "57939"}
{"code": "private void sleepIfNecessary(long splashDisplayStartTime){\n  long t2=System.currentTimeMillis();\n  long sleepTime=MIN_SPLASH_DISPLAY - (t2 - splashDisplayStartTime);\n  if (sleepTime > 0) {\n    try {\n      Thread.sleep(sleepTime);\n    }\n catch (    Exception ex) {\n    }\n  }\n}\n", "nl": "This method just executes an sleep depending on how long the splash screen has been displayed.  The idea of calling this method is to have the splash screen displayed a minimum time (specified by MIN_SPLASH_DISPLAY).", "id": "20759"}
{"code": "private boolean isLoginFailureLockoutMode(){\n  return loginFailureLockoutMode;\n}\n", "nl": "Indicates accountlocking mode is enabled.", "id": "44247"}
{"code": "public static List<Foo> findByField2(boolean field2){\n  return getPersistence().findByField2(field2);\n}\n", "nl": "Returns all the foos where field2 = &#63;.", "id": "42009"}
{"code": "private synchronized void deductCurrentThreadCount(){\n  currentThreadCount--;\n  busyThreadCount--;\n  notify();\n}\n", "nl": "Decreases the number of current threads in the TimerPool.", "id": "4964"}
{"code": "public void shutdown(){\nsynchronized (shutdownLock) {\n    shutdown=true;\n    shutdownLock.notifyAll();\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Going to notify Heartbeat thread.\");\n    }\n  }\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Returning from Heartbeat shutdown.\");\n  }\n}\n", "nl": "Call this method to stop the thread. This method is blocking until the thread has stopped.", "id": "26488"}
{"code": "public boolean responseIsString(String oid){\n  return stringResponses.contains(oid);\n}\n", "nl": "Determine if the response to a given LDAP extended operation (specified by OID) should be treated as a string. The default is binary.", "id": "52041"}
{"code": "protected void tearDown(){\n}\n", "nl": "Tears down the fixture, for example, close a network connection. This method is called after a test is executed.", "id": "45425"}
{"code": "public static TypeReference newSuperTypeReference(int itfIndex){\n  itfIndex&=0xFFFF;\n  return new TypeReference((CLASS_EXTENDS << 24) | (itfIndex << 8));\n}\n", "nl": "Returns a reference to the super class or to an interface of the 'implements' clause of a class.", "id": "35538"}
{"code": "public void trimToSize(){\n  if (n < array.length) {\n    char[] aux=new char[n];\n    System.arraycopy(array,0,aux,0,n);\n    array=aux;\n  }\n}\n", "nl": "Trim char vector to current length.", "id": "26529"}
{"code": "public AnnotationVisitor visitAnnotation(String desc,boolean visible){\n  if (mv != null) {\n    return mv.visitAnnotation(desc,visible);\n  }\n  return null;\n}\n", "nl": "Visits an annotation of this method.", "id": "55676"}
{"code": "protected ChangeListener createChangeListener(){\n  return getHandler();\n}\n", "nl": "Subclasses that want to handle <code>ChangeEvents</code> differently can override this to return another <code>ChangeListener</code> implementation.", "id": "891"}
{"code": "@Override public void write(char[] chr){\n}\n", "nl": "Does nothing - output to <code>/dev/null</code>.", "id": "44840"}
{"code": "@Override public String toString(){\n  return buf.toString();\n}\n", "nl": "Returns the signature that was built by this signature writer.", "id": "50885"}
{"code": "public void addEventListener(SIPDialogEventListener newListener){\n  eventListeners.add(newListener);\n}\n", "nl": "Adds a new event listener to this dialog.", "id": "32259"}
{"code": "public void handleRequest(RequestContext rc) throws CLIException {\n  super.handleRequest(rc);\n  if (isOptionSet(\"testmatch\")) {\n    if (!getStringOptionValue(\"mandatory\").equals(\"mandatory\") || !getStringOptionValue(\"optional\").equals(\"optional\")) {\n      throw new CLIException(\"option values does not matched.\",ExitCodes.INVALID_OPTION_VALUE);\n    }\n  }\n}\n", "nl": "Services a Commandline Request.", "id": "42732"}
{"code": "public static boolean checkSchema(){\n  return directoryServer.checkSchema;\n}\n", "nl": "Indicates whether the Directory Server should perform schema checking.", "id": "58012"}
{"code": "@Override public void flush() throws IOException {\n  try {\n    out.flush();\n  }\n catch (  IOException e) {\n    handleIOException(e);\n  }\n}\n", "nl": "Invokes the delegate's <code>flush()</code> method.", "id": "46938"}
{"code": "public void abort() throws IOException {\n  completeEdit(this,false);\n}\n", "nl": "Aborts this edit. This releases the edit lock so another edit may be started on the same key.", "id": "42435"}
{"code": "public void addColumn(Object columnName,Object[] columnData){\n  addColumn(columnName,convertToVector(columnData));\n}\n", "nl": "Adds a column to the model.  The new column will have the identifier <code>columnName</code>.  <code>columnData</code> is the optional array of data for the column.  If it is <code>null</code> the column is filled with <code>null</code> values.  Otherwise, the new data will be added to model starting with the first element going to row 0, etc.  This method will send a <code>tableChanged</code> notification message to all the listeners.", "id": "28195"}
{"code": "boolean importStackContains(String hrefUrl){\n  return stackContains(m_importStack,hrefUrl);\n}\n", "nl": "See if the imported stylesheet stack already contains the given URL.  Used to test for recursive imports.", "id": "13834"}
{"code": "public final int _parent2(int identity){\n  if (identity < m_blocksize)   return m_parent_map0[identity];\n else   return m_parent_map[identity >>> m_SHIFT][identity & m_MASK];\n}\n", "nl": "The optimized version of DTMDefaultBase._parent().", "id": "7428"}
{"code": "@Deprecated public byte[] name(){\n  throw new org.omg.CORBA.NO_IMPLEMENT();\n}\n", "nl": "Gets the name of this <code>Principal</code> object.", "id": "23575"}
{"code": "protected boolean isTokenSeparator(char ch){\n  return (ch == ',');\n}\n", "nl": "Checks whether a character is a token separator. RFC 2616, section 2.1 defines comma as the separator for <tt>#token</tt> sequences. The end of a header value will also separate tokens, but that is not a character check.", "id": "47309"}
{"code": "private long triggerTime(long delay,TimeUnit unit){\n  return triggerTime(unit.toNanos((delay < 0) ? 0 : delay));\n}\n", "nl": "Returns the trigger time of a delayed action.", "id": "29976"}
{"code": "public ExifTag buildTag(int tagId,Object val){\n  int ifdId=getTrueIfd(tagId);\n  return buildTag(tagId,ifdId,val);\n}\n", "nl": "Creates a tag for a defined tag constant in the tag's default IFD.", "id": "38947"}
{"code": "public static String formatTime(Date date){\n  return JKFormatUtil.formatDate(date,\"hh:mm\");\n}\n", "nl": "Format time.", "id": "48751"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(setAttributeNodeNS01.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "18651"}
{"code": "private void cleanBufferPool(){\n  ByteBuffer buf;\n  while ((buf=bufferPool.poll()) != null) {\n    CryptoInputStream.freeDirectBuffer(buf);\n  }\n}\n", "nl": "Clean direct buffer pool", "id": "34772"}
{"code": "@Override public Call<DirectionsResponse> cloneCall(){\n  return getCall().clone();\n}\n", "nl": "clone the call", "id": "2153"}
{"code": "public void registerChangeListener(SubentryChangeListener changeListener){\n  changeListeners.add(changeListener);\n}\n", "nl": "Registers the provided change notification listener with this manager so that it will be notified of any add, delete, modify, or modify DN operations that are performed.", "id": "18139"}
{"code": "@Override public void updatePosition(){\n  spriteFrame.setTranslateX(xPos - xPosOffset);\n  spriteFrame.setTranslateY(yPos - yPosOffset);\n}\n", "nl": "Updates position of aura on stage. Needs to be called manually in aura logic (the <em>update</em> method).", "id": "24936"}
{"code": "public boolean equals(Object object){\n  return (super.equals(object) && object instanceof MediaSize);\n}\n", "nl": "Returns whether this media size attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: <OL TYPE=1> <LI> <CODE>object</CODE> is not null. <LI> <CODE>object</CODE> is an instance of class MediaSize. <LI> This media size attribute's X dimension is equal to <CODE>object</CODE>'s X dimension. <LI> This media size attribute's Y dimension is equal to <CODE>object</CODE>'s Y dimension. </OL>", "id": "3687"}
{"code": "public static Date adddMonths(int numOfMonths){\n  return addMonths(new Date(),numOfMonths);\n}\n", "nl": "Addd months.", "id": "8860"}
{"code": "private boolean isClosed(){\n  return buf == null;\n}\n", "nl": "Indicates whether or not this reader is closed.", "id": "40129"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(namednodemapwrongdocumenterr.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "26258"}
{"code": "public int available() throws IOException {\n  ensureOpen();\n  if (reachEOF) {\n    return 0;\n  }\n else {\n    return 1;\n  }\n}\n", "nl": "Returns 0 after EOF has been reached, otherwise always return 1. <p> Programs should not count on this method to return the actual number of bytes that could be read without blocking.", "id": "19680"}
{"code": "public static void fill(int[] a,int val){\n  for (int i=0, len=a.length; i < len; i++)   a[i]=val;\n}\n", "nl": "Assigns the specified int value to each element of the specified array of ints.", "id": "11113"}
{"code": "private <K,V>Map<K,V> newMapIfNull(Map<K,V> map){\n  if (map != null) {\n    return map;\n  }\n  return new HashMap<>();\n}\n", "nl": "Returns a new Map if the passed in Map is null.", "id": "17666"}
{"code": "public void postSingleLogoutSuccess(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,String userID,LogoutRequest logoutRequest,LogoutResponse logoutResponse,String binding){\n  return;\n}\n", "nl": "Invokes after single logout process succeeded, i.e. user session  has been invalidated.", "id": "33300"}
{"code": "public void addBaseDNsToSearch(Collection<DN> dns){\n  baseDNs.addAll(dns);\n}\n", "nl": "Adds all the base DNs we must search for.  If at least one baseDN is added using this method, only the added baseDNs are searched. If no base DN is added, all the base DNs will be retrieved.", "id": "43772"}
{"code": "public SequenceHandler addBinding(final Handler handler,final Expression<Boolean> postcondition){\n  bindings.add(new Binding(handler,postcondition));\n  return this;\n}\n", "nl": "Binds sequenced handlers with sequence processing postconditions.", "id": "13697"}
{"code": "public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName){\n  getCurrentProcessor().unparsedEntityDecl(this,name,publicId,systemId,notationName);\n}\n", "nl": "Receive notification of an unparsed entity declaration.", "id": "55913"}
{"code": "@Override protected void onDialogClosed(boolean positiveResult){\n  super.onDialogClosed(positiveResult);\n  if (positiveResult && mAutoCompleteEditText != null) {\n    String value=mAutoCompleteEditText.getText().toString();\n    if (callChangeListener(value)) {\n      setText(value);\n    }\n  }\n}\n", "nl": "Because the base class does not handle this correctly we need to query our injected AutoCompleteTextView for the value to save", "id": "240"}
{"code": "public void dropActionChanged(DragSourceDragEvent dsde){\n}\n", "nl": "Called when the user has modified the drop gesture. This method is invoked when the state of the input device(s) that the user is interacting with changes. Such devices are typically the mouse buttons or keyboard modifiers that the user is interacting with.", "id": "11406"}
{"code": "public void destroy(){\n  finalize();\n}\n", "nl": "Destroys the debug object, closes the debug file and releases any system resources. Note that the debug file will remain open until <code>destroy()</code> is invoked. To conserve file resources, you should invoke <code>destroy()</code> explicitly rather than wait for the garbage collector to clean up. <p> If this object is accessed after <code>destroy()</code> has been invoked, the results are undefined.</p>", "id": "33332"}
{"code": "public Document createDefaultDocument(){\n  return new PlainDocument();\n}\n", "nl": "Creates an uninitialized text storage model (PlainDocument) that is appropriate for this type of editor.", "id": "30603"}
{"code": "public static String generateKey(String imageUri,ImageSize targetSize){\n  return new StringBuilder(imageUri).append(URI_AND_SIZE_SEPARATOR).append(targetSize.getWidth()).append(WIDTH_AND_HEIGHT_SEPARATOR).append(targetSize.getHeight()).toString();\n}\n", "nl": "Generates key for memory cache for incoming image (URI + size).<br /> Pattern for cache key - <b>[imageUri]_[width]x[height]</b>.", "id": "56582"}
{"code": "public static void sort(short[] a){\n  doSort(a,0,a.length - 1);\n}\n", "nl": "Sorts the specified array into ascending numerical order.", "id": "44546"}
{"code": "public void addExtension(String oid,boolean critical,ASN1Encodable value){\n  this.addExtension(new DERObjectIdentifier(oid),critical,value);\n}\n", "nl": "add a given extension field for the standard extensions tag (tag 3)", "id": "13565"}
{"code": "public void paintToolBarDragWindowBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintBorder(context,g,x,y,w,h,orientation);\n}\n", "nl": "Paints the border of the window containing the tool bar when it has been detached from it's primary frame. This implementation invokes the method of the same name without the orientation.", "id": "54867"}
{"code": "public boolean isStatusBarTintEnabled(){\n  return mStatusBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system status bar?", "id": "809"}
{"code": "public ASN1ObjectIdentifier branch(String branchID){\n  return new ASN1ObjectIdentifier(this,branchID);\n}\n", "nl": "Return an OID that creates a branch under the current one.", "id": "55828"}
{"code": "public KeyStoreJwtTokenConfig withSigningSecretKeyAlias(String signingSecretKeyAlias){\n  this.signingSecretKeyAlias=signingSecretKeyAlias;\n  return this;\n}\n", "nl": "Set the signing secret key alias.", "id": "42475"}
{"code": "public void retrievePaymentRecord(String payId,Handler<AsyncResult<Payment>> resultHandler){\n  delegate.retrievePaymentRecord(payId,resultHandler);\n}\n", "nl": "Retrieve payment record from backend by payment id.", "id": "45688"}
{"code": "public SipUri parseSIPUrl(String url) throws ParseException {\n  try {\n    return new URLParser(url).sipURL(true);\n  }\n catch (  ClassCastException ex) {\n    throw new ParseException(url + \" Not a SIP URL \",0);\n  }\n}\n", "nl": "Parse a SIP url from a string and return a URI structure for it.", "id": "11158"}
{"code": "public final String toString(){\n  return name;\n}\n", "nl": "Provides the file type's name as the <code>String</code> representation of the file type.", "id": "19677"}
{"code": "public static Vector send(URL url,RequestSet set) throws SendRequestException {\n  return send(url,null,set,null);\n}\n", "nl": "Translates the Java object to an XML RequestSet document and sends the corresponding XML document to the specified URL.", "id": "16573"}
{"code": "@Override public void close(){\n}\n", "nl": "Closes the output stream.  This has no effect.", "id": "27034"}
{"code": "public static boolean isICS(){\n  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH;\n}\n", "nl": "Uses static final constants to detect if the device's platform version is ICS or later.", "id": "9746"}
{"code": "public static Foo fetchByUUID_G(java.lang.String uuid,long groupId,boolean retrieveFromCache){\n  return getPersistence().fetchByUUID_G(uuid,groupId,retrieveFromCache);\n}\n", "nl": "Returns the foo where uuid = &#63; and groupId = &#63; or returns <code>null</code> if it could not be found, optionally using the finder cache.", "id": "34352"}
{"code": "public void deleteField(Mp4FieldKey mp4Key) throws KeyNotFoundException {\n  if (mp4Key == null) {\n    throw new KeyNotFoundException();\n  }\n  super.deleteField(mp4Key.getFieldName());\n}\n", "nl": "Delete fields with this mp4key", "id": "42961"}
{"code": "@Override public int size(){\n  return size;\n}\n", "nl": "Gets the size of the priority queue. If the size of the queue is greater than the Integer.MAX, then it returns Integer.MAX.", "id": "6621"}
{"code": "public static FontProgram createFont(byte[] fontProgram) throws java.io.IOException {\n  return createFont(null,fontProgram,DEFAULT_CACHED);\n}\n", "nl": "Creates a new font program. This font program can be one of the 14 built in fonts, a Type1 font referred to by an AFM or PFM file, a TrueType font (simple only) or a CJK font from the Adobe Asian Font Pack. TrueType fonts and CJK fonts can have an optional style modifier appended to the name. These modifiers are: Bold, Italic and BoldItalic. An example would be \"STSong-Light,Bold\". Note that this modifiers do not work if the font is embedded. Fonts in TrueType Collections are addressed by index such as \"msgothic.ttc,1\". This would get the second font (indexes start at 0), in this case \"MS PGothic\". <p/> The fonts are cached and if they already exist they are extracted from the cache, not parsed again. <p/>", "id": "45890"}
{"code": "public boolean containsValue(long val){\n  for (  NSObject o : dict.values()) {\n    if (o.getClass().equals(NSNumber.class)) {\n      NSNumber num=(NSNumber)o;\n      if (num.isInteger() && num.intValue() == val)       return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks whether a given value is contained in this dictionary.", "id": "12511"}
{"code": "@Override protected void exportBackend(OutputStream output) throws DirectoryException {\n  exportBackend(output,false);\n}\n", "nl": "This method trigger an export of the replicated data.", "id": "19042"}
{"code": "public String toString(){\n  StringBuilder sb=new StringBuilder(100);\n  sb.append(\"AMIdentityRepository object: \").append(organizationDN);\n  return (sb.toString());\n}\n", "nl": "Return String representation of the <code>AMIdentityRepository </code> object. It returns realm name.", "id": "55655"}
{"code": "public boolean isSpecified(String qName){\n  int index=getIndex(qName);\n  if (index < 0)   throw new IllegalArgumentException(\"No such attribute: \" + qName);\n  return specified[index];\n}\n", "nl": "Returns the current value of an attribute's \"specified\" flag.", "id": "51604"}
{"code": "@Override public int hashCode(){\n  return (first == null ? 0 : first.hashCode()) ^ (second == null ? 0 : second.hashCode());\n}\n", "nl": "Compute a hash code using the hash codes of the underlying objects", "id": "43189"}
{"code": "public boolean delete(Long ruleID){\n  if (ruleID == null) {\n    throw new IllegalArgumentException(\"primary key null.\");\n  }\n  return database.delete(DATABASE_TABLE,KEY_RULEID + \"=\" + ruleID,null) > 0;\n}\n", "nl": "Delete a Rule record.", "id": "25582"}
{"code": "public SecurityClientHeader createSecurityClientHeader(){\n  SecurityClient secClient=new SecurityClient();\n  return secClient;\n}\n", "nl": "Security-Client header", "id": "37956"}
{"code": "public void acceptAll(){\n  for (  License license : licenses) {\n    license.accept();\n  }\n}\n", "nl": "Accepts all licenses in the license set.", "id": "48368"}
{"code": "public void endNonEscaping() throws org.xml.sax.SAXException {\n  m_disableOutputEscapingStates.pop();\n}\n", "nl": "Ends an un-escaping section.", "id": "40646"}
{"code": "public boolean isVisible(){\n  return !ServiceManager.isRealmEnabled() && privateInstance.visible;\n}\n", "nl": "Returns true if the server is running in realm mode.", "id": "35864"}
{"code": "public static int unsignedByteToInt(int b){\n  return b & 0xFF;\n}\n", "nl": "Convert a signed byte to an unsigned int.", "id": "22005"}
{"code": "@Deprecated public static IOFileFilter andFileFilter(IOFileFilter filter1,IOFileFilter filter2){\n  return new AndFileFilter(filter1,filter2);\n}\n", "nl": "Returns a filter that ANDs the two specified filters.", "id": "10651"}
{"code": "public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){\n}\n", "nl": "This method will be invoked when a service's global configuration data has been changed. The parameter <code>groupName</code> denote the name of the configuration grouping (e.g. default) and <code>serviceComponent</code> denotes the service's sub-component that changed (e.g. <code>/NamedPolicy</code>, <code>/Templates</code>).", "id": "34278"}
{"code": "public void paintScrollBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBorder(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the border of a scrollbar.", "id": "24090"}
{"code": "protected void updateLayoutCacheExpandedNodes(){\n  if (treeModel != null && treeModel.getRoot() != null)   updateExpandedDescendants(new TreePath(treeModel.getRoot()));\n}\n", "nl": "Makes all the nodes that are expanded in JTree expanded in LayoutCache. This invokes updateExpandedDescendants with the root path.", "id": "53654"}
{"code": "public boolean isActive(String flagName,FlagContextInterface flagContext){\n  return isActive(flagName,flagContext,false);\n}\n", "nl": "Method to call to check that a flag is activated", "id": "10084"}
{"code": "static public void assertEquals(boolean expected,boolean actual){\n  assertEquals(null,expected,actual);\n}\n", "nl": "Asserts that two booleans are equal.", "id": "7988"}
{"code": "public void removeLayoutComponent(Component comp){\n  removeConstraints(comp);\n}\n", "nl": "Removes the specified component from this layout. <p> Most applications do not call this method directly.", "id": "15872"}
{"code": "public static void removeAttributeSchema(String serviceName,String subSchemaName,String schemaType,String attributeName,SSOToken adminToken) throws UpgradeException {\n  ServiceSchema ss=getServiceSchema(serviceName,subSchemaName,schemaType,adminToken);\n  removeAttributeSchema(ss,attributeName);\n}\n", "nl": "Remove an attribute schema from an existing service.", "id": "26414"}
{"code": "public ECPResponse createECPResponse() throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ECP_RESPONSE);\n  if (obj == null) {\n    return new ECPResponseImpl();\n  }\n else {\n    return (ECPResponse)obj;\n  }\n}\n", "nl": "Returns the <code>ECPResponse</code> Object.", "id": "33097"}
{"code": "synchronized void ignoreSync(){\n  sync=null;\n}\n", "nl": "disables sync. often invoked for tmp files", "id": "52634"}
{"code": "public org.omg.CORBA.TypeCode type(){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"type\",_opsClass);\n  DynArrayOperations $self=(DynArrayOperations)$so.servant;\n  try {\n    return $self.type();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Returns the TypeCode associated with this DynAny object. A DynAny object is created with a TypeCode value assigned to it. This TypeCode value determines the type of the value handled through the DynAny object. Note that the TypeCode associated with a DynAny object is initialized at the time the DynAny is created and cannot be changed during lifetime of the DynAny object.", "id": "20058"}
{"code": "public static String formatDate(Date date,Locale locale){\n  return new SimpleDateFormat(\"dd MMMM yyyy\",locale).format(date).replaceFirst(\"^0*\",\"\");\n}\n", "nl": "Formats date string", "id": "19382"}
{"code": "public static Foo fetchByPrimaryKey(long fooId){\n  return getPersistence().fetchByPrimaryKey(fooId);\n}\n", "nl": "Returns the foo with the primary key or returns <code>null</code> if it could not be found.", "id": "50346"}
{"code": "public CSN nextCSNUTF8() throws DataFormatException {\n  try {\n    return CSN.valueOf(nextString());\n  }\n catch (  IndexOutOfBoundsException e) {\n    throw new DataFormatException(e.getMessage());\n  }\n}\n", "nl": "Reads the next CSN that was encoded as a UTF8 string.", "id": "25882"}
{"code": "public String emitPattern(){\n  return emitPattern(true);\n}\n", "nl": "emits the pattern for collation builder.", "id": "29306"}
{"code": "public static FocusListener add(FocusListener a,FocusListener b){\n  return (FocusListener)addInternal(a,b);\n}\n", "nl": "Adds focus-listener-a with focus-listener-b and returns the resulting multicast listener.", "id": "42249"}
{"code": "public void beginDisplay(DisplayEvent event) throws ModelControlException {\n  super.beginDisplay(event);\n  if (!isInlineAlertMessageSet()) {\n    String flag=(String)getPageSessionAttribute(PAGE_MODIFIED);\n    if ((flag != null) && flag.equals(\"1\")) {\n      setInlineAlertMessage(CCAlert.TYPE_INFO,\"message.information\",\"message.profile.modified\");\n    }\n  }\n}\n", "nl": "Populates client character set table.", "id": "51118"}
{"code": "static void update(SynthContext state,Graphics g){\n  paintRegion(state,g,null);\n}\n", "nl": "A convenience method that handles painting of the background. All SynthUI implementations should override update and invoke this method.", "id": "43748"}
{"code": "private void updateConfiguredServices(OrganizationConfigManager ocm,Map serviceNames) throws SMSException {\n  try {\n    ocm.setAttributes(IdConstants.REPO_SERVICE,(Map)serviceNames.get(IdConstants.REPO_SERVICE));\n  }\n catch (  SMSException smse) {\n    throw smse;\n  }\n}\n", "nl": "Update a service with new attributes", "id": "58317"}
{"code": "public boolean isActive(){\n  return active;\n}\n", "nl": "Returns <code>true</code> if this privilege is active.", "id": "48636"}
{"code": "private void registerTables(){\n  mRegisteredTables=new ArrayList<>();\n  mRegisteredTables.add(AppTable.class);\n  mRegisteredTables.add(MessageTable.class);\n  mRegisteredTables.add(UserTable.class);\n  mRegisteredTables.add(TokenTable.class);\n}\n", "nl": "Register tables here", "id": "26561"}
{"code": "public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {\n  super.endElement(handler,uri,localName,rawName);\n  handler.popElemTemplateElement().setEndLocaterInfo(handler.getLocator());\n}\n", "nl": "Receive notification of the end of an element.", "id": "7843"}
{"code": "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  for (; ; ) {\n    @SuppressWarnings(\"unchecked\") E item=(E)s.readObject();\n    if (item == null)     break;\n else     offer(item);\n  }\n}\n", "nl": "Reconstitutes this queue from a stream (that is, deserializes it).", "id": "26437"}
{"code": "private boolean isCauseIndexException(Throwable ex,int maxLevels){\n  return isCauseException(ex,OIndexException.class,maxLevels);\n}\n", "nl": "Detect if the root cause of the exception is an index constraint violation This is necessary as the database may wrap this root cause in further exceptions, masking the underlying cause", "id": "13795"}
{"code": "@Override public void close(){\nsynchronized (lock) {\n    if (isOpen()) {\n      buf=null;\n    }\n  }\n}\n", "nl": "This method closes this CharArrayReader. Once it is closed, you can no longer read from it. Only the first invocation of this method has any effect.", "id": "58272"}
{"code": "public static TextHitInfo trailing(int charIndex){\n  return new TextHitInfo(charIndex,false);\n}\n", "nl": "Creates a hit on the trailing edge of the character at the specified <code>charIndex</code>.", "id": "36576"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_characterdataindexsizeerrreplacedataoffsetnegative.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "19659"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n}\n", "nl": "Ensures that the Directory Server is running.", "id": "33612"}
{"code": "public void enableVertexAttribute(String name){\n  int location=fetchAttributeLocation(name);\n  if (location == -1)   return;\n  GLES20.glEnableVertexAttribArray(location);\n}\n", "nl": "Enables the vertex attribute with the given name", "id": "43284"}
{"code": "public static boolean isCallerValid(Object obj){\n  if (!checkCaller) {\n    return (true);\n  }\n  if (obj == null) {\n    return (isCallerValid(CLASSNAME));\n  }\n  return (isCallerValid(obj.getClass().getName()));\n}\n", "nl": "Check to determine if the calling class has the privilege to execute sensitive methods which returns passwords, decrypts data, etc. This method uses the stack trace to determine the calling class.", "id": "18809"}
{"code": "public void paintMenuBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBorder(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the border of a menu bar.", "id": "31939"}
{"code": "@Override public boolean validate(Set<String> values){\n  try {\n    for (    String toTest : values) {\n      if (Integer.valueOf(toTest) < MIN_CODE_LENGTH) {\n        return false;\n      }\n    }\n  }\n catch (  NumberFormatException nfe) {\n    return false;\n  }\n  return true;\n}\n", "nl": "Validates each of the provided members of the Set to confirm that they are greater than the minimum value.", "id": "13236"}
{"code": "public static void displayInformationMessage(JFrame parent,LocalizableMessage msg,LocalizableMessage title){\n  JOptionPane.showMessageDialog(parent,wrapMsg(String.valueOf(msg),100),String.valueOf(title),JOptionPane.INFORMATION_MESSAGE);\n}\n", "nl": "Displays an information message dialog.", "id": "54942"}
{"code": "protected static Map convertJAXBToAttrMap(String attrName,Object jaxbObj) throws JAXBException {\n  String xmlString=convertJAXBToString(jaxbObj);\n  Map attrs=new HashMap();\n  Set values=new HashSet();\n  values.add(xmlString);\n  attrs.put(attrName,values);\n  return attrs;\n}\n", "nl": "Converts a JAXB object to a <code>String</code> object and creates a <code>Map</code>. The key is 'attrName' and the value is a <code>Set</code> contains the <code>String</code> object.", "id": "52730"}
{"code": "public static boolean isPrimaryThread(){\n  return server.isPrimaryThread();\n}\n", "nl": "Checks the current thread against the expected primary thread for the server. <p> <b>Note:</b> this method should not be used to indicate the current synchronized state of the runtime. A current thread matching the main thread indicates that it is synchronized, but a mismatch <b>does not preclude</b> the same assumption.", "id": "30799"}
{"code": "protected static String canonicalize(String str){\n  for (int i=0; i < invalidCharacters.length; i++) {\n    str=str.replace(invalidCharacters[i],'_');\n  }\n  return str;\n}\n", "nl": "Canonicalizes un-support characters in LDAP DN.", "id": "42001"}
{"code": "@Override public String toString(){\n  if (filterConfig == null)   return (\"TimingFilter()\");\n  StringBuilder sb=new StringBuilder(\"TimingFilter(\");\n  sb.append(filterConfig);\n  sb.append(\")\");\n  return (sb.toString());\n}\n", "nl": "Return a String representation of this object.", "id": "16501"}
{"code": "public boolean equals(Object o){\n  if (o instanceof ServiceConfigManager) {\n    ServiceConfigManager oscm=(ServiceConfigManager)o;\n    if (serviceName.equals(oscm.serviceName) && version.equals(oscm.version)) {\n      return (true);\n    }\n  }\n  return (false);\n}\n", "nl": "Compares this object with the given object.", "id": "40904"}
{"code": "public void deregisterCallbackHandler(String id){\n  eventManager.removeObjectChangeListener(id);\n}\n", "nl": "De-Register a listener.", "id": "28992"}
{"code": "public int capacity(){\n  return array.length;\n}\n", "nl": "Obtain capacity of array.", "id": "446"}
{"code": "public void removeBeanContextMembershipListener(BeanContextMembershipListener bcml){\n  if (bcml == null)   throw new NullPointerException(\"listener\");\nsynchronized (bcmListeners) {\n    if (!bcmListeners.contains(bcml))     return;\n else     bcmListeners.remove(bcml);\n  }\n}\n", "nl": "Removes a BeanContextMembershipListener", "id": "8"}
{"code": "public void paintSliderBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintBackground(context,g,x,y,w,h,orientation);\n}\n", "nl": "Paints the background of a slider. This implementation invokes the method of the same name without the orientation.", "id": "39208"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(attrremovechild1.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "49110"}
{"code": "public boolean isStreaming(){\n  return false;\n}\n", "nl": "Tells that this entity is not streaming.", "id": "45419"}
{"code": "public boolean canBeStaticallyBound(){\n  return Modifier.isFinal(flags | clazz.getModifiers());\n}\n", "nl": "Utility method to query whether this member or its defining class is final.", "id": "43161"}
{"code": "public boolean isPropertyListed(SSOToken caller,String realm,Collection<String> propertyNames) throws DelegationException, SSOException {\n  return userHasReadAdminPrivs(caller,realm) || getWhitelist(realm).containsAll(propertyNames);\n}\n", "nl": "Whether or not the property is listed in the whitelist. If the caller has permission to see a protected property they will, otherwise protected properties are removed from the returned set before being returned.", "id": "12541"}
{"code": "@Override public Object clone(){\n  try {\n    ZipEntry result=(ZipEntry)super.clone();\n    result.extra=extra != null ? extra.clone() : null;\n    return result;\n  }\n catch (  CloneNotSupportedException e) {\n    throw new AssertionError(e);\n  }\n}\n", "nl": "Returns a deep copy of this zip entry.", "id": "14287"}
{"code": "public int next(){\n  final int node=_currentNode;\n  if (node != NULL) {\n    _currentNode=getNextAttributeIdentity(node);\n    return returnNode(makeNodeHandle(node));\n  }\n  return NULL;\n}\n", "nl": "Get the next node in the iteration.", "id": "43433"}
{"code": "public String toString(){\n  try {\n    return parens(exp1,true) + \" \" + opString()+ \" \"+ parens(exp2,false);\n  }\n catch (  BadBinaryOpValueExpException ex) {\n    return \"invalid expression\";\n  }\n}\n", "nl": "Returns the string representing the object", "id": "28069"}
{"code": "public static TypeReference newTypeParameterBoundReference(int sort,int paramIndex,int boundIndex){\n  return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));\n}\n", "nl": "Returns a reference to a type parameter bound of a generic class or method.", "id": "48417"}
{"code": "public Encoder withoutPadding(){\n  if (!doPadding)   return this;\n  return new Encoder(isURL,newline,linemax,false);\n}\n", "nl": "Returns an encoder instance that encodes equivalently to this one, but without adding any padding character at the end of the encoded byte data. <p> The encoding scheme of this encoder instance is unaffected by this invocation. The returned encoder instance should be used for non-padding encoding operation.", "id": "40026"}
{"code": "public static void reverseBits(byte[] b){\n  for (int k=0; k < b.length; ++k)   b[k]=flipTable[b[k] & 0xff];\n}\n", "nl": "Reverses the bits in the array", "id": "33098"}
{"code": "public boolean isNavigationAtBottom(){\n  return (mSmallestWidthDp >= 600 || mInPortrait);\n}\n", "nl": "Should a navigation bar appear at the bottom of the screen in the current device configuration? A navigation bar may appear on the right side of the screen in certain configurations.", "id": "2705"}
{"code": "@Indexable(type=IndexableType.DELETE) @Override public Foo deleteFoo(long fooId) throws PortalException {\n  return fooPersistence.remove(fooId);\n}\n", "nl": "Deletes the foo with the primary key from the database. Also notifies the appropriate model listeners.", "id": "49899"}
{"code": "private String badRegister(long s){\n  return \"Attempt to register more than \" + MAX_PARTIES + \" parties for \"+ stateToString(s);\n}\n", "nl": "Returns message string for bounds exceptions on registration.", "id": "24101"}
{"code": "public void requestPasswordChangedTime(){\n  operations.add(PasswordPolicyStateOperationType.GET_PASSWORD_CHANGED_TIME);\n}\n", "nl": "Returns the password changed time.", "id": "34950"}
{"code": "public void visitTypeInsn(int opcode,String type){\n  if (mv != null) {\n    mv.visitTypeInsn(opcode,type);\n  }\n}\n", "nl": "Visits a type instruction. A type instruction is an instruction that takes the internal name of a class as parameter.", "id": "5102"}
{"code": "public static boolean areAnyGranted(String authorities) throws IOException {\n  AuthorizeFaceletsTag authorizeTag=new AuthorizeFaceletsTag();\n  authorizeTag.setIfAnyGranted(authorities);\n  return authorizeTag.authorize();\n}\n", "nl": "Returns true if the user has any of the given authorities.", "id": "5943"}
{"code": "void refresh(SMSEntry e) throws SMSException {\n  smsEntry.refresh(e);\n}\n", "nl": "Updates the SMSEntry with the new changes", "id": "18920"}
{"code": "public boolean processOperationResult(OperationResult operationResult){\n  return processOperationResult(this,operationResult);\n}\n", "nl": "Processes the provided operation result for the current operation.", "id": "36550"}
{"code": "@Override public void attributeReplaced(ServletContextAttributeEvent event){\n  log(\"attributeReplaced('\" + event.getName() + \"', '\"+ event.getValue()+ \"')\");\n}\n", "nl": "Record the fact that a servlet context attribute was replaced.", "id": "11950"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ps.SPProvidedNameIdentifierElement createSPProvidedNameIdentifierElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.SPProvidedNameIdentifierElementImpl();\n}\n", "nl": "Create an instance of SPProvidedNameIdentifierElement", "id": "22360"}
{"code": "public boolean equals(Object obj){\n  if (obj == this)   return true;\n  if (!(obj instanceof DelegationPermission))   return false;\n  DelegationPermission that=(DelegationPermission)obj;\n  return implies(that);\n}\n", "nl": "Checks two DelegationPermission objects for equality. <P>", "id": "17038"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.OrganizationDisplayNameElement createOrganizationDisplayNameElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.OrganizationDisplayNameElementImpl();\n}\n", "nl": "Create an instance of OrganizationDisplayNameElement", "id": "39965"}
{"code": "public void makeImmutable(){\n  mutable=false;\n}\n", "nl": "Makes the object immutable", "id": "162"}
{"code": "public static boolean isEmailAddress(String addr){\n  return addr != null && addr.contains(\"@\") && addr.contains(\".\");\n}\n", "nl": "Indicates whether a string represents a syntactically correct email address.", "id": "20506"}
{"code": "public void addChild(int index,XMPNode node) throws XMPException {\n  assertChildNotExisting(node.getName());\n  node.setParent(this);\n  getChildren().add(index - 1,node);\n}\n", "nl": "Adds a node as child to this node.", "id": "58089"}
{"code": "public boolean isInstantGrowable(){\n  return (getData() & 0x8) == 0x8;\n}\n", "nl": "Checks if the Sapling would grow when next ticked with bonemeal", "id": "6472"}
{"code": "protected void toggleOpenClose(){\n  setPopupVisible(comboBox,!isPopupVisible(comboBox));\n}\n", "nl": "Hides the popup if it is showing and shows the popup if it is hidden.", "id": "25360"}
{"code": "private void writeDataAfterIlst(FileChannel fileReadChannel,FileChannel fileWriteChannel,Mp4BoxHeader tagsHeader) throws IOException, CannotWriteException {\n  if (tagsHeader != null) {\n    writeNeroData(fileReadChannel,fileWriteChannel,tagsHeader);\n  }\n else {\n    writeDataInChunks(fileReadChannel,fileWriteChannel);\n  }\n}\n", "nl": "Write data after ilst upto the end of the file <p>Can be used if dont need to adjust size of moov header of modify top level free atoms", "id": "26363"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.AbsXPathElement createAbsXPathElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.AbsXPathElementImpl();\n}\n", "nl": "Create an instance of AbsXPathElement", "id": "48480"}
{"code": "public void afterEvaluation(ELContext context,String expression){\n}\n", "nl": "Fired after the evaluation of the expression.", "id": "57712"}
{"code": "public static boolean isFileOlder(File file,long timeMillis){\n  if (file == null) {\n    throw new IllegalArgumentException(\"No specified file\");\n  }\n  if (!file.exists()) {\n    return false;\n  }\n  return file.lastModified() < timeMillis;\n}\n", "nl": "Tests if the specified <code>File</code> is older than the specified time reference.", "id": "48631"}
{"code": "public boolean empty(){\n  return isEmpty();\n}\n", "nl": "Return <code>true</code> if this stack is currently empty. <p> This method exists for compatibility with <code>java.util.Stack</code>. New users of this class should use <code>isEmpty</code> instead.", "id": "38750"}
{"code": "public static UIComponent createComponent(final String componentType){\n  final UIComponent component=FacesContext.getCurrentInstance().getApplication().createComponent(componentType);\n  component.getAttributes().put(RIConstants.DYNAMIC_COMPONENT,Integer.MAX_VALUE);\n  return component;\n}\n", "nl": "Creates a new JSFComponent object.", "id": "24650"}
{"code": "public SignatureVisitor visitReturnType(){\n  return this;\n}\n", "nl": "Visits the return type of the method.", "id": "42582"}
{"code": "public static boolean isInitialized(){\n  return mInitialized;\n}\n", "nl": "Checks if the Storo instance is initialized", "id": "29765"}
{"code": "void processDragDropEnd(DragSourceDropEvent dsde){\n  DragSourceListener dsl=listener;\n  if (dsl != null) {\n    dsl.dragDropEnd(dsde);\n  }\n}\n", "nl": "This method calls <code>dragDropEnd</code> on the <code>DragSourceListener</code>s registered with this <code>DragSource</code>, and passes them the specified <code>DragSourceDropEvent</code>.", "id": "15556"}
{"code": "public boolean ckeckDoubleFileExtensions(){\n  return this.doubleExtensions;\n}\n", "nl": "gets double extensions configuration.", "id": "50381"}
{"code": "int nextUid(){\n  return m_docOrderCount++;\n}\n", "nl": "Returns the next m_docOrderCount number and increments the number for future use.", "id": "54119"}
{"code": "public static <P>P decode(PropertyDefinition<P> propertyDef,String value){\n  return propertyDef.castValue(propertyDef.accept(new ValueDecoder(),value));\n}\n", "nl": "Decodes the provided property LDAP value.", "id": "52344"}
{"code": "public static void doAsPrivilege(final String methodName,final Filter targetObject,final Class<?>[] targetType,final Object[] targetArguments) throws Exception {\n  doAsPrivilege(methodName,targetObject,targetType,targetArguments,null);\n}\n", "nl": "Perform work as a particular <code>Subject</code>. Here the work will be granted to a <code>null</code> subject.", "id": "20603"}
{"code": "public void fireTableStructureChanged(){\n  fireTableChanged(new TableModelEvent(this,TableModelEvent.HEADER_ROW));\n}\n", "nl": "Notifies all listeners that the table's structure has changed. The number of columns in the table, and the names and types of the new columns may be different from the previous state. If the <code>JTable</code> receives this event and its <code>autoCreateColumnsFromModel</code> flag is set it discards any table columns that it had and reallocates default columns in the order they appear in the model. This is the same as calling <code>setModel(TableModel)</code> on the <code>JTable</code>.", "id": "19368"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.SNElement createSNElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.SNElementImpl();\n}\n", "nl": "Create an instance of SNElement", "id": "27398"}
{"code": "private void invalidSurrogate(int uuuuu) throws UTFDataFormatException {\n  throw new UTFDataFormatException(Localizer.getMessage(\"jsp.error.xml.invalidHighSurrogate\",Integer.toHexString(uuuuu)));\n}\n", "nl": "Throws an exception for invalid surrogate bits.", "id": "12727"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_characterdatareplacedataend.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "42401"}
{"code": "public String toXML(){\n  StringBuilder stringBuilder=new StringBuilder();\n  return stringBuilder.toString();\n}\n", "nl": "Default toXML Method to Marshal Object into XML.", "id": "23871"}
{"code": "public static PdfAction createHide(PdfAnnotation[] annotations,boolean hidden){\n  return new PdfAction().put(PdfName.S,PdfName.Hide).put(PdfName.T,getPdfArrayFromAnnotationsList(annotations)).put(PdfName.H,new PdfBoolean(hidden));\n}\n", "nl": "Creates a Hide action (section 12.6.4.10 of ISO 32000-1).", "id": "42090"}
{"code": "public static int resetSearchEntryCount(){\n  return searchEntryCounter.getAndSet(0);\n}\n", "nl": "Resets the search result entry plugin invocation count to zero.", "id": "40526"}
{"code": "public boolean requireEnd(){\n  return requireEnd;\n}\n", "nl": "<p>Returns true if more input could change a positive match into a negative one. <p>If this method returns true, and a match was found, then more input could cause the match to be lost. If this method returns false and a match was found, then more input might change the match but the match won't be lost. If a match was not found, then requireEnd has no meaning.", "id": "2206"}
{"code": "public void allow(){\n  result=Result.ALLOWED;\n  message=\"\";\n}\n", "nl": "Allows the player to log in", "id": "8041"}
{"code": "public void removeChild(PersistentObject object) throws AccessRightsException, EntryNotFoundException, UMSException {\n  if (object != null && getPrincipal() != null) {\n    super.removeChild(object);\n  }\n}\n", "nl": "Removes an object from the organization.", "id": "4301"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsaddr.MetadataElement createMetadataElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.MetadataElementImpl();\n}\n", "nl": "Create an instance of MetadataElement", "id": "27868"}
{"code": "private void send(){\n  vertx.eventBus().publish(GeneratorConfigVerticle.ADDRESS,toJson());\n}\n", "nl": "Sends the market data on the event bus.", "id": "1112"}
{"code": "Class<?> leadingReferenceParameter(){\n  Class<?> ptype;\n  if (ptypes.length == 0 || (ptype=ptypes[0]).isPrimitive())   throw newIllegalArgumentException(\"no leading reference parameter\");\n  return ptype;\n}\n", "nl": "Return the leading parameter type, which must exist and be a reference.", "id": "36810"}
{"code": "public ASN1Primitive parsePublicKey() throws IOException {\n  ASN1InputStream aIn=new ASN1InputStream(keyData.getBytes());\n  return aIn.readObject();\n}\n", "nl": "for when the public key is an encoded object - if the bitstring can't be decoded this routine throws an IOException.", "id": "31895"}
{"code": "private static ResultCode registerErrorResultCode(final int intValue,final LocalizableMessage name,final Enum resultCodeEnum){\n  final ResultCode t=new ResultCode(intValue,name,true,resultCodeEnum);\n  ELEMENTS.put(intValue,t);\n  return t;\n}\n", "nl": "Creates and registers a new error result code with the application.", "id": "17391"}
{"code": "public static StringArgument hostNameArgument(final String defaultHostName,final LocalizableMessage description) throws ArgumentException {\n  return StringArgument.builder(OPTION_LONG_HOST).shortIdentifier(OPTION_SHORT_HOST).description(description != null ? description : INFO_ARGUMENT_DESCRIPTION_HOST_NAME.get()).defaultValue(defaultHostName).valuePlaceholder(INFO_HOST_PLACEHOLDER.get()).buildArgument();\n}\n", "nl": "Returns the \"hostname\" string argument.", "id": "1996"}
{"code": "public boolean isEmpty(){\n  return true;\n}\n", "nl": "Methods that need to be implemented from GeneralTaskRunnable.", "id": "58757"}
{"code": "public Enumeration<V> elements(){\n  return new ValueIterator();\n}\n", "nl": "Returns an enumeration of the values in this table.", "id": "13660"}
{"code": "@Deprecated protected ActionListener createKeyboardUpLeftListener(){\n  return new KeyboardUpLeftHandler();\n}\n", "nl": "As of Java 2 platform v1.3 this method is no longer used. Subclassers previously using this method should instead create an Action wrapping the ActionListener, and register that Action by overriding <code>installKeyboardActions</code> and placing the Action in the SplitPane's ActionMap. Please refer to the key bindings specification for further details. <p> Creates a ActionListener for the JSplitPane UI that listens for specific key presses.", "id": "9813"}
{"code": "public void detach(){\n  super.detach();\n  m_exprObj.detach();\n  m_exprObj=null;\n}\n", "nl": "Detaches the walker from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state.", "id": "20393"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_nodevalue04.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "2577"}
{"code": "public void postSingleLogoutSuccess(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,String userID,LogoutRequest logoutRequest,LogoutResponse logoutResponse,String binding){\n  return;\n}\n", "nl": "Invokes after single logout process succeeded, i.e. user session  has been invalidated.", "id": "31893"}
{"code": "public Object clone(){\n  AuthenticatedAgents theClone=null;\n  try {\n    theClone=(AuthenticatedAgents)super.clone();\n  }\n catch (  CloneNotSupportedException e) {\n    throw new InternalError();\n  }\n  return theClone;\n}\n", "nl": "Creates and returns a copy of this object.", "id": "57498"}
{"code": "public static SearchRequest newSingleEntrySearchRequest(final String name,final SearchScope scope,final String filter,final String... attributeDescriptions){\n  return newSearchRequest(name,scope,filter,attributeDescriptions).setSizeLimit(1);\n}\n", "nl": "Creates a new search request for a single entry, using the provided distinguished name, scope, and filter, decoded using the default schema.", "id": "12934"}
{"code": "public static <A>ImmutableList<A> of(final A x1){\n  return new ImmutableList<>(x1,ImmutableList.<A>empty());\n}\n", "nl": "Construct a list consisting of given element.", "id": "56198"}
{"code": "public BigInteger toBigInteger(){\n  return new BigInteger(1,places);\n}\n", "nl": "Returns a BigInteger value which supports many arithmetic operations. Assumes negative values will never occur.", "id": "27453"}
{"code": "public int indexOf(ElementInfo child){\n  ArrayList children=this.children;\n  if (children != null) {\n    return children.indexOf(child);\n  }\n  return -1;\n}\n", "nl": "Returns the index of the specified child, or -1 if <code>child</code> isn't a valid child.", "id": "57594"}
{"code": "public static String addSlashToEnd(String string){\n  if (string != null && !string.equals(\"\") && string.charAt(string.length() - 1) != '/') {\n    return string.concat(\"/\");\n  }\n  return string;\n}\n", "nl": "Adds slash at the end of String if it doesn't already start with slash", "id": "53146"}
{"code": "public static void error(Level level,String msgId,String data[]){\n  error(level,msgId,data,null);\n}\n", "nl": "Logs SAML specific errror conditions to the SAML error log (amSAML.error).", "id": "49416"}
{"code": "public void destroyModuleState(){\n  userPrincipal=null;\n  userTokenId=null;\n}\n", "nl": "Destroy the state of module", "id": "30841"}
{"code": "@Before public void registerIdlingResource(){\n  Espresso.registerIdlingResources(mAddTaskIntentsTestRule.getActivity().getCountingIdlingResource());\n}\n", "nl": "Prepare your test fixture for this test. In this case we register an IdlingResources with Espresso. IdlingResource resource is a great way to tell Espresso when your app is in an idle state. This helps Espresso to synchronize your test actions, which makes tests significantly more reliable.", "id": "40683"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_elementsetattributenodenull.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "13392"}
{"code": "public final PlaVectorInt change_length_approx(double p_length){\n  PlaPointFloat new_point=to_float().change_size(p_length);\n  return new_point.round().to_vector();\n}\n", "nl": "Returns an approximation vector of this vector with the same direction and length p_length.", "id": "6998"}
{"code": "public static void fill(char[] a,int fromIndex,int toIndex,char val){\n  rangeCheck(a.length,fromIndex,toIndex);\n  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;\n}\n", "nl": "Assigns the specified char value to each element of the specified range of the specified array of chars.  The range to be filled extends from index <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the range to be filled is empty.)", "id": "8983"}
{"code": "public static KeyStore createKeyStore(){\n  try {\n    KeyStore keyStore=KeyStore.getInstance(StandardNames.KEY_STORE_ALGORITHM);\n    keyStore.load(null,null);\n    return keyStore;\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n", "nl": "Create an empty KeyStore", "id": "3095"}
{"code": "@NonNull public final Closeable consume(@NonNull Runnable run){\n  RunnableUpdatable ru=new RunnableUpdatable(this,run);\n  addUpdatable(ru);\n  return ru;\n}\n", "nl": "Consumes the chain of Agera operators and executes a Runnable action on each update() signal, plus, allows single point-cancellation.", "id": "25091"}
{"code": "private void logOutIfPossible(){\n  try {\n    openActionBarOverflowOrOptionsMenu(InstrumentationRegistry.getTargetContext());\n    onView(withText(R.string.log_out)).perform(click());\n  }\n catch (  NoMatchingViewException e) {\n  }\n}\n", "nl": "Click the 'Log Out' overflow menu if it exists (which would mean we're signed in).", "id": "9131"}
{"code": "public void unFavorite(String topicId,String access_token,Callback<Status> callback){\n  topicApi=getRetrofitForSimpleJson().create(TopicApi.class);\n  topicApi.unFavorite(topicId,access_token).enqueue(callback);\n}\n", "nl": "Login user remove favorite topic", "id": "42188"}
{"code": "private boolean jobExists(String jobName) throws SchedulerException {\n  return inMemoryScheduler.jobExists(jobName) || persistentScheduler.jobExists(jobName);\n}\n", "nl": "Determines if a job already exists.", "id": "5786"}
{"code": "public void onLogout(HttpServletRequest req,HttpServletResponse res,SSOToken ssoToken) throws AuthenticationException {\n  debug.message(\"ReplayPasswd.onLogout called\");\n}\n", "nl": "Post processing on Logout.", "id": "18024"}
{"code": "protected void installDefaults(){\n  spinner.setLayout(createLayout());\n  LookAndFeel.installBorder(spinner,\"Spinner.border\");\n  LookAndFeel.installColorsAndFont(spinner,\"Spinner.background\",\"Spinner.foreground\",\"Spinner.font\");\n  LookAndFeel.installProperty(spinner,\"opaque\",Boolean.TRUE);\n}\n", "nl": "Initialize the <code>JSpinner</code> <code>border</code>, <code>foreground</code>, and <code>background</code>, properties based on the corresponding \"Spinner.*\" properties from defaults table. The <code>JSpinners</code> layout is set to the value returned by <code>createLayout</code>.  This method is called by <code>installUI</code>.", "id": "13145"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodehasattributes02.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "51833"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(namednodemapgetnameditemns05.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "34174"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.Wss10Element createWss10Element() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Wss10ElementImpl();\n}\n", "nl": "Create an instance of Wss10Element", "id": "82"}
{"code": "public void poll(final SnmpUdpStatisticsHandler snmpUdpStatisticsHandler){\n  this.statisticsHandler=snmpUdpStatisticsHandler;\n  try {\n    fileLoader.load();\n    final ByteBuffer buffer=fileLoader.getBuffer();\n    lineParser.reset();\n    lineParser.handleToken(buffer,buffer.position(),buffer.limit());\n  }\n  finally {\n    this.statisticsHandler=null;\n  }\n}\n", "nl": "Read from monitored file, report any changed values for UDP statistics. Not thread-safe, only call from a single thread.", "id": "31667"}
{"code": "public <X extends Throwable>long orElseThrow(Supplier<X> exceptionSupplier) throws X {\n  if (isPresent) {\n    return value;\n  }\n else {\n    throw exceptionSupplier.get();\n  }\n}\n", "nl": "Return the contained value, if present, otherwise throw an exception to be created by the provided supplier.", "id": "18557"}
{"code": "public void requestPasswordResetState(){\n  operations.add(PasswordPolicyStateOperationType.GET_PASSWORD_RESET_STATE);\n}\n", "nl": "Returns the password reset state.", "id": "8957"}
{"code": "@Deprecated public boolean isBackingStoreEnabled(){\n  return scrollMode == BACKINGSTORE_SCROLL_MODE;\n}\n", "nl": "Returns <code>true</code> if this viewport is maintaining an offscreen image of its contents.", "id": "45594"}
{"code": "public Object encode(Object pObject) throws EncoderException {\n  if (!(pObject instanceof java.lang.String)) {\n    throw new EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n  }\n  return metaphone((String)pObject);\n}\n", "nl": "Encodes an Object using the metaphone algorithm.  This method is provided in order to satisfy the requirements of the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.", "id": "43068"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n}\n", "nl": "Make sure that the Directory Server is running.", "id": "16555"}
{"code": "public void back(){\n  if (--pos == -1) {\n    pos=0;\n  }\n}\n", "nl": "Unreads the most recent character of input. If no input characters have been read, the input is unchanged.", "id": "22162"}
{"code": "public String convert(String line){\n  return StringEscapeUtils.escapeXml(line);\n}\n", "nl": "Escapes xml special characters.", "id": "4184"}
{"code": "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {\n  s.writeInt(size());\n  Enumeration<String> comps=getAll();\n  while (comps.hasMoreElements()) {\n    s.writeObject(comps.nextElement());\n  }\n}\n", "nl": "Overridden to avoid implementation dependency.", "id": "46388"}
{"code": "public boolean hasArrayIndexedField(JsonPointer fieldIndexPointer){\n  return fieldIndexPointer.size() == 2 && hasField(fieldIndexPointer.parent()) && fieldIndexPointer.leaf().matches(\"[0-9]+\") && getField(fieldIndexPointer.parent()).isArray();\n}\n", "nl": "Returns true if the fieldIndexPointer refers to an index of an array field: ie 'roles/0'.  It would not match on field expansions like 'roles/*&#47;description'", "id": "48694"}
{"code": "public boolean hasRole(String role){\n  if (\"*\".equals(role)) {\n    return true;\n  }\n  if (role == null) {\n    return false;\n  }\n  return Arrays.binarySearch(roles,role) >= 0;\n}\n", "nl": "Does the user represented by this Principal possess the specified role?", "id": "792"}
{"code": "public boolean isSpecified(){\n  return (!this.isNasSelected()) && (!this.isUserNegotiated());\n}\n", "nl": "Indicates if the NAS should use the ip address indicated in this instance.", "id": "58522"}
{"code": "public static boolean isPropertyInherited(int property){\n  return property >= 0 && property <= MAX_INHERITED_PROPERTY_ID && INHERITED_PROPERTIES[property];\n}\n", "nl": "This method checks whether a Property, in order to be picked up by the rendering engine, must be defined on the current element or renderer  (<code>return false</code>), or may be defined in one of its parent elements or renderers (<code>return true</code>).", "id": "57665"}
{"code": "public String[] listChildren(InstantiableRelationDefinition<?,?> d){\n  validateRelationDefinition(d);\n  return serverContext.listManagedObjects(path,d);\n}\n", "nl": "Lists the child managed objects associated with the specified instantiable relation.", "id": "45169"}
{"code": "private void addMnemonic(int index,int mnemonic){\n  if (mnemonicToIndexMap == null) {\n    initMnemonics();\n  }\n  mnemonicInputMap.put(KeyStroke.getKeyStroke(mnemonic,BasicLookAndFeel.getFocusAcceleratorKeyMask()),\"setSelectedIndex\");\n  mnemonicToIndexMap.put(Integer.valueOf(mnemonic),Integer.valueOf(index));\n}\n", "nl": "Adds the specified mnemonic at the specified index.", "id": "55488"}
{"code": "public static boolean isPackageProtectionEnabled(){\n  if (packageDefinitionEnabled && Constants.IS_SECURITY_ENABLED) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Return the <code>SecurityManager</code> only if Security is enabled AND package protection mechanism is enabled.", "id": "28617"}
{"code": "public boolean isURIRoute(){\n  return uriRoute;\n}\n", "nl": "Return true if this is uriRoute", "id": "30117"}
{"code": "public static void flow(Reader reader,Writer writer) throws IOException {\n  char[] buf=new char[DEFAULT_BUFFER_SIZE];\n  flow(reader,writer,buf);\n}\n", "nl": "Read input from reader and write it to writer until there is no more input from reader.", "id": "32299"}
{"code": "final Node succ(Node p){\n  Node next=p.next;\n  return (p == next) ? head : next;\n}\n", "nl": "Returns the successor of p, or the head node if p.next has been linked to self, which will only be true if traversing with a stale pointer that is now off the list.", "id": "35394"}
{"code": "public String encode(){\n  String retval;\n  if (statusLine != null)   retval=statusLine.encode() + super.encode();\n else   retval=super.encode();\n  return retval;\n}\n", "nl": "Encode the SIP Request as a string.", "id": "10528"}
{"code": "public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {\n  ch.characters((char[])m_obj,m_start,m_length);\n}\n", "nl": "Directly call the characters method on the passed ContentHandler for the string-value. Multiple calls to the ContentHandler's characters methods may well occur for a single call to this method.", "id": "8771"}
{"code": "public String name(){\n  return name;\n}\n", "nl": "Measurements name.", "id": "45803"}
{"code": "public boolean isStableNumber(){\n  return true;\n}\n", "nl": "Tell if this expression returns a stable number that will not change during  iterations within the expression.  This is used to determine if a proximity  position predicate can indicate that no more searching has to occur.", "id": "10585"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n}\n", "nl": "Ensures that the Directory Server is started before running any of these tests.", "id": "20811"}
{"code": "public boolean isEqual(AttributeSet attr){\n  if (attr instanceof SmallAttributeSet) {\n    return attr == this;\n  }\n  return ((getAttributeCount() == attr.getAttributeCount()) && containsAttributes(attr));\n}\n", "nl": "Checks whether two attribute sets are equal.", "id": "20043"}
{"code": "public static boolean isReservedShortOption(String name){\n  return reservedShortOptionNames.contains(name);\n}\n", "nl": "Returns <code>true</code> if an argument/option is reserved.", "id": "7206"}
{"code": "protected void handleALL_SESSION_NOCONTEXTMANAGER(SessionMessage msg,Member sender){\n  counterReceive_EVT_ALL_SESSION_NOCONTEXTMANAGER++;\n  if (log.isDebugEnabled())   log.debug(sm.getString(\"deltaManager.receiveMessage.noContextManager\",getName(),sender.getHost(),Integer.valueOf(sender.getPort())));\n  noContextManagerReceived=true;\n}\n", "nl": "handle receive no context manager.", "id": "56398"}
{"code": "public Builder aliasPrefix(String aliasPrefix){\n  this.aliasPrefix=aliasPrefix;\n  return this;\n}\n", "nl": "A unique prefix to identify the key aliases", "id": "34850"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlsig.X509DataElement createX509DataElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.X509DataElementImpl();\n}\n", "nl": "Create an instance of X509DataElement", "id": "26620"}
{"code": "void signedSubtract(MutableBigInteger addend){\n  if (sign == 1)   sign=sign * subtract(addend);\n else   add(addend);\n  if (intLen == 0)   sign=1;\n}\n", "nl": "Signed subtraction built upon unsigned add and subtract.", "id": "33622"}
{"code": "public void addRow(Vector rowData){\n  insertRow(getRowCount(),rowData);\n}\n", "nl": "Adds a row to the end of the model.  The new row will contain <code>null</code> values unless <code>rowData</code> is specified. Notification of the row being added will be generated.", "id": "31419"}
{"code": "public PlaPoint corner_last_prev(){\n  return corner(corner_count() - 2);\n}\n", "nl": "Equivalent to corner(corner_count() - 2)", "id": "37208"}
{"code": "private static long mix64(long z){\n  z=(z ^ (z >>> 30)) * 0xbf58476d1ce4e5b9L;\n  z=(z ^ (z >>> 27)) * 0x94d049bb133111ebL;\n  return z ^ (z >>> 31);\n}\n", "nl": "Computes Stafford variant 13 of 64bit mix function.", "id": "24856"}
{"code": "public boolean bool(){\n  return m_val;\n}\n", "nl": "Cast result object to a boolean.", "id": "46052"}
{"code": "protected void unloadZone(View zone){\n  zone.removeAll();\n}\n", "nl": "Unload a zone (Convert the zone to its memory saving state). The zones are expected to represent a subset of the child elements of the element this view is responsible for. Therefore, the default implementation is to simple remove all the children.", "id": "10365"}
{"code": "public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {\n  return decode(source,off,len,WEBSAFE_DECODABET);\n}\n", "nl": "Decodes web safe Base64 content in byte array format and returns the decoded byte array. Web safe encoding uses '-' instead of '+', '_' instead of '/'", "id": "44581"}
{"code": "public Set searchRoles(String wildcard,int level) throws AMException, SSOException {\n  return searchRoles(wildcard,null,level);\n}\n", "nl": "Searches for roles in this organizational unit using wildcards. Wildcards can be specified such as a*, *, *a.", "id": "43122"}
{"code": "public void removeRenderStatement(String instanceId){\n  if (!WXUtils.isUiThread()) {\n    throw new WXRuntimeException(\"[WXRenderManager] removeRenderStatement can only be called in main thread\");\n  }\n  WXRenderStatement statement=mRegistries.remove(instanceId);\n  if (statement != null) {\n    statement.destroy();\n  }\n}\n", "nl": "Remove renderStatement, can only be invoked in UI thread.", "id": "6646"}
{"code": "public void paintListBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the background of a list.", "id": "12379"}
{"code": "protected void threadDump(PrintWriter writer,StringManager smClient,Enumeration<Locale> requestedLocales){\n  writer.println(smClient.getString(\"managerServlet.threaddump\"));\n  writer.print(Diagnostics.getThreadDump(requestedLocales));\n}\n", "nl": "Write a JVM thread dump.", "id": "35826"}
{"code": "public void sendData() throws IOException {\n  if (writer != null) {\n    writer.write(buffer.toString());\n    buffer=new StringBuilder();\n  }\n}\n", "nl": "Send data and reinitializes buffer, if a writer has been specified.", "id": "6024"}
{"code": "public void add(final URI uri){\n  this.uris.add(uri);\n}\n", "nl": "Adds a new URI to the list of redirects.", "id": "39224"}
{"code": "private BigInteger bigMultiplyPowerTen(int n){\n  if (n <= 0)   return this.inflated();\n  if (intCompact != INFLATED)   return bigTenToThe(n).multiply(intCompact);\n else   return intVal.multiply(bigTenToThe(n));\n}\n", "nl": "Compute this * 10 ^ n. Needed mainly to allow special casing to trap zero value", "id": "40578"}
{"code": "public static void flush(final InputStream source,final OutputStream dest) throws IOException {\n  final byte[] buf=new byte[8192];\n  int read;\n  while ((read=source.read(buf)) != -1) {\n    dest.write(buf,0,read);\n  }\n}\n", "nl": "Copies all of the source to the destination.<br>", "id": "2933"}
{"code": "@Override public boolean equals(final Object obj){\n  if (!(obj instanceof FastDateFormat)) {\n    return false;\n  }\n  final FastDateFormat other=(FastDateFormat)obj;\n  return printer.equals(other.printer);\n}\n", "nl": "<p>Compares two objects for equality.</p>", "id": "37128"}
{"code": "public static float convertPixelsToDp(final float px,final Context context){\n  Resources resources=context.getResources();\n  DisplayMetrics metrics=resources.getDisplayMetrics();\n  return px / (metrics.densityDpi / 160f);\n}\n", "nl": "This method converts device specific pixels to density independent pixels.", "id": "47458"}
{"code": "public static InputMethodListener remove(InputMethodListener l,InputMethodListener oldl){\n  return (InputMethodListener)removeInternal(l,oldl);\n}\n", "nl": "Removes the old input-method-listener from input-method-listener-l and returns the resulting multicast listener.", "id": "47001"}
{"code": "private void zzScanError(int errorCode){\n  String message;\n  try {\n    message=ZZ_ERROR_MSG[errorCode];\n  }\n catch (  ArrayIndexOutOfBoundsException e) {\n    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];\n  }\n  throw new Error(message);\n}\n", "nl": "Reports an error that occured while scanning. In a wellformed scanner (no or only correct usage of  yypushback(int) and a match-all fallback rule) this method  will only be called with things that \"Can't Possibly Happen\". If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.). Usual syntax/scanner level error handling should be done in error fallback rules.", "id": "3731"}
{"code": "public void addListener(CircularProgressViewListener listener){\n  if (listener != null)   listeners.add(listener);\n}\n", "nl": "Register a CircularProgressViewListener with this View", "id": "56811"}
{"code": "public void endDocument() throws SAXException {\n}\n", "nl": "Receive notification of the end of the document. <p>By default, do nothing.  Application writers may override this method in a subclass to take specific actions at the end of a document (such as finalising a tree or closing an output file).</p>", "id": "38587"}
{"code": "@Override public boolean accept(File file){\n  String name=file.getName();\n  for (  String wildcard : wildcards) {\n    if (FilenameUtils.wildcardMatch(name,wildcard,caseSensitivity)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks to see if the filename matches one of the wildcards.", "id": "44781"}
{"code": "@Deprecated public String toString(){\n  return operation;\n}\n", "nl": "Returns the string representation of the operation.", "id": "25637"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitSessionElement createActivationLimitSessionElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitSessionElementImpl();\n}\n", "nl": "Create an instance of ActivationLimitSessionElement", "id": "50135"}
{"code": "public void enforceTlsPolicy(ClientTransactionExt transaction) throws SecurityException {\n}\n", "nl": "Enforce any application-specific security policy for TLS clients. Called when establishing an outgoing TLS connection.", "id": "43078"}
{"code": "public Location multiply(double m){\n  x*=m;\n  y*=m;\n  z*=m;\n  return this;\n}\n", "nl": "Performs scalar multiplication, multiplying all components with a scalar. Not world-aware.", "id": "6399"}
{"code": "public boolean isReplicationEnabled(){\n  return Boolean.TRUE.equals(serverProperties.get(ServerProperty.IS_REPLICATION_ENABLED));\n}\n", "nl": "Tells whether replication is enabled on this server.", "id": "730"}
{"code": "public SAML2ConfigBuilder customConditionsProviderClassName(String customConditionsProviderClassName){\n  this.customConditionsProviderClassName=customConditionsProviderClassName;\n  return this;\n}\n", "nl": "Sets the CustomConditionsProvider classname on the SAML2ConfigBuilder.", "id": "27225"}
{"code": "private Object writeReplace(){\n  return new Ser(Ser.ZONE_OFFSET_TYPE,this);\n}\n", "nl": "Writes the object using a <a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.", "id": "48441"}
{"code": "public static boolean isValid(String address){\n  return isValidIPv4(address) || isValidIPv6(address);\n}\n", "nl": "Validate the given IPv4 or IPv6 address.", "id": "365"}
{"code": "public <E extends Enum<E>>R visitEnum(EnumPropertyDefinition<E> pd,E v,P p){\n  return visitUnknown(pd,v,p);\n}\n", "nl": "Visit an enumeration.", "id": "9889"}
{"code": "public int doAfterBody() throws JspException {\n  return SKIP_BODY;\n}\n", "nl": "does nothing here", "id": "53499"}
{"code": "public Obligation createObligation(){\n  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.REQUEST);\n  if (obj == null) {\n    return new ObligationImpl();\n  }\n else {\n    return (Obligation)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>Obligation</code>.", "id": "45602"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitUsagesType createActivationLimitUsagesType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitUsagesTypeImpl();\n}\n", "nl": "Create an instance of ActivationLimitUsagesType", "id": "2552"}
{"code": "public void removeCellEditorListener(CellEditorListener l){\n  listenerList.remove(CellEditorListener.class,l);\n}\n", "nl": "Removes a <code>CellEditorListener</code> from the listener list.", "id": "46277"}
{"code": "public final void readFully(byte b[]) throws IOException {\n  readFully(b,0,b.length);\n}\n", "nl": "See the general contract of the <code>readFully</code> method of <code>DataInput</code>. <p> Bytes for this operation are read from the contained input stream.", "id": "9300"}
{"code": "@Override public Foo removeByUUID_G(String uuid,long groupId) throws NoSuchFooException {\n  Foo foo=findByUUID_G(uuid,groupId);\n  return remove(foo);\n}\n", "nl": "Removes the foo where uuid = &#63; and groupId = &#63; from the database.", "id": "41692"}
{"code": "public static boolean isDragImageSupported(){\n  Toolkit t=Toolkit.getDefaultToolkit();\n  Boolean supported;\n  try {\n    supported=(Boolean)Toolkit.getDefaultToolkit().getDesktopProperty(\"DnD.isDragImageSupported\");\n    return supported.booleanValue();\n  }\n catch (  Exception e) {\n    return false;\n  }\n}\n", "nl": "Reports whether or not drag <code>Image</code> support is available on the underlying platform. <P>", "id": "2083"}
{"code": "public int read(byte[] b) throws IOException {\n  return read(b,0,b.length);\n}\n", "nl": "Read some bytes from the stream.", "id": "49488"}
{"code": "public static <T>Expression<T> valueOf(String expression,Class<T> expectedType,Bindings initialBindings) throws ExpressionException {\n  return new Expression<>(expression,expectedType,initialBindings);\n}\n", "nl": "Factory method to create an Expression.", "id": "36772"}
{"code": "@Override public Promise<ResourceResponse,ResourceException> filterPatch(Context context,PatchRequest request,RequestHandler next){\n  CrestAuditor auditor=newAuditor(context,request);\n  auditor.auditAccessAttempt();\n  return auditResponse(next.handlePatch(context,request),auditor,request);\n}\n", "nl": "Records an 'access' audit event before and after the filtered CREST resource receives an patch request. If the 'before' audit event fails due to an error, the request is cancelled and an error response is returned. If the 'after' audit event fails due to an error, the request is not cancelled as it's affects may have already been applied.", "id": "7535"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_nodereplacechildnodeancestor.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "52362"}
{"code": "public boolean usesBasicAuth(){\n  return basicAuth;\n}\n", "nl": "True if the client uses basic auth, false otherwise.", "id": "35026"}
{"code": "public static HTMLRenderedFragment newInstance(String serialized){\n  HTMLRenderedFragment fragment=new HTMLRenderedFragment();\n  Bundle args=new Bundle();\n  args.putString(SERIALIZED,serialized);\n  fragment.setArguments(args);\n  return fragment;\n}\n", "nl": "Use this factory method to create a new instance of this fragment using the provided parameters.", "id": "27727"}
{"code": "public Set searchSubPeopleContainers(String wildcard,int level) throws AMException, SSOException {\n  return searchSubPeopleContainers(wildcard,null,level);\n}\n", "nl": "Searches for sub people containers in this people container using wildcards and attribute values. Wildcards can be specified such as a*, *, *a.", "id": "17000"}
{"code": "@After public void clean(){\n  mute(null);\n  mute(null);\n  mute(null);\n}\n", "nl": "Cleanups after each tests.", "id": "24403"}
{"code": "public void push(final V value) throws IndexOutOfBoundsException {\n  if (top + locals >= values.length) {\n    throw new IndexOutOfBoundsException(\"Insufficient maximum stack size.\");\n  }\n  values[top++ + locals]=value;\n}\n", "nl": "Pushes a value into the operand stack of this frame.", "id": "4502"}
{"code": "public char current(){\n  if (count != 0 && pos < offset + count) {\n    return array[pos];\n  }\n  return DONE;\n}\n", "nl": "Gets the character at the current position (as returned by getIndex()).", "id": "57533"}
{"code": "public Request _request(String operation){\n  throw new org.omg.CORBA.NO_IMPLEMENT(reason);\n}\n", "nl": "Throws an <code>org.omg.CORBA.NO_IMPLEMENT</code> exception with the message \"This is a locally constrained object.\" This method is the default implementation of the <code>org.omg.CORBA.Object</code> method.<P>", "id": "51621"}
{"code": "public static void enable(){\n}\n", "nl": "Enables the JIT compiler. Does nothing on Android.", "id": "8454"}
{"code": "protected void check(String name) throws Exception {\n  String[] params={name};\n  String[] signature={\"java.lang.String\"};\n  mBeanServer.invoke(oname,\"check\",params,signature);\n}\n", "nl": "Check a context for deployment operations.", "id": "17595"}
{"code": "public boolean implies(Permission p){\n  return true;\n}\n", "nl": "Checks if the specified permission is \"implied\" by this object. This method always returns true.", "id": "52093"}
{"code": "public Process executeAsync(final CommandLine command,ExecuteResultHandler handler) throws IOException {\n  return executeAsync(command,null,handler);\n}\n", "nl": "Methods for starting asynchronous execution. The child process inherits all environment variables of the parent process. Result provided to callback handler.", "id": "42686"}
{"code": "public void printJobCanceled(PrintJobEvent pje){\n}\n", "nl": "Called to notify the client that the job was canceled by user or program.", "id": "25452"}
{"code": "@Override boolean requiresConnectorConfigurationHelper(JsonValue requestContent){\n  return requestContent != null && requestContent.size() > 0;\n}\n", "nl": "ConnectorConfigurationHelper is required if there is request content", "id": "9313"}
{"code": "public static Note sharp(int octave,Tone tone){\n  return new Note(octave,tone,true);\n}\n", "nl": "Creates a new note for a sharp tone, such as A-sharp.", "id": "11772"}
{"code": "public static int countByUuid(java.lang.String uuid){\n  return getPersistence().countByUuid(uuid);\n}\n", "nl": "Returns the number of foos where uuid = &#63;.", "id": "19505"}
{"code": "final boolean isMatched(){\n  Object x=item;\n  return (x == this) || ((x == null) == isData);\n}\n", "nl": "Returns true if this node has been matched, including the case of artificial matches due to cancellation.", "id": "27611"}
{"code": "public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {\n  removePageSessionAttribute(PAGE_MODIFIED);\n  super.handleButton1Request(event);\n}\n", "nl": "Handles save request.", "id": "5738"}
{"code": "@Override public void update(){\n}\n", "nl": "This method is a No-Op for this class.", "id": "409"}
{"code": "public void deselect_all(){\n  Arrays.fill(sel_array,false);\n}\n", "nl": "Deselects all item types.", "id": "35277"}
{"code": "public static String readFileToString(File file) throws IOException {\n  return readFileToString(file,Charset.defaultCharset());\n}\n", "nl": "Reads the contents of a file into a String using the default encoding for the VM.  The file is always closed.", "id": "33121"}
{"code": "public static void main(final String[] args){\n  final int retCode=new SearchRate().run(args);\n  System.exit(filterExitCode(retCode));\n}\n", "nl": "The main method for SearchRate tool.", "id": "12922"}
{"code": "public static List<String> findCacheKeysForkey(String key,MemoryCache memoryCache){\n  List<String> values=new ArrayList<String>();\n  for (  String k : memoryCache.keys()) {\n    if (k.startsWith(key)) {\n      values.add(k);\n    }\n  }\n  return values;\n}\n", "nl": "Searches all keys in memory cache which are corresponded to incoming URI.<br /> <b>Note:</b> Memory cache can contain multiple sizes of the same key if only you didn't set", "id": "46920"}
{"code": "private static void sendNotModified(ChannelHandlerContext ctx){\n  FullHttpResponse response=new DefaultFullHttpResponse(HTTP_1_1,NOT_MODIFIED);\n  setDateHeader(response);\n  ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n  LOG.trace(Constants.LOG_RETURNING_RESPONSE,response);\n}\n", "nl": "When file timestamp is the same as what the browser is sending up, send a \"304 Not Modified\"", "id": "22071"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(documentimportnode08.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "29636"}
{"code": "public void clear(){\n  throw new UnsupportedOperationException();\n}\n", "nl": "clear the children (Unsupported) implementations must synchronized on the hierarchy lock and \"children\" protected field", "id": "11694"}
{"code": "public static WhoAmIExtendedResult newWhoAmIExtendedResult(final ResultCode resultCode){\n  Reject.ifNull(resultCode);\n  return new WhoAmIExtendedResultImpl(ResultCode.SUCCESS);\n}\n", "nl": "Creates a new who am I extended result with the provided result code and no authorization ID.", "id": "27512"}
{"code": "public void addSelectionRow(int row){\n  int[] rows={row};\n  addSelectionRows(rows);\n}\n", "nl": "Adds the path at the specified row to the current selection.", "id": "3935"}
{"code": "public static PropertyException defaultBehaviorException(final PropertyDefinition<?> pd,final Throwable cause){\n  return new PropertyException(pd,ERR_DEFAULT_BEHAVIOR_PROPERTY_EXCEPTION.get(pd.getName()),cause);\n}\n", "nl": "Creates a new default behavior exception with a cause.", "id": "2835"}
{"code": "public void insertNode(int n,int pos){\n  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));\n  insertElementAt(n,pos);\n}\n", "nl": "Insert a node at a given position.", "id": "53848"}
{"code": "private static void rdf_ParseTypeCollectionPropertyElement() throws XMPException {\n  throw new XMPException(\"ParseTypeCollection property element not allowed\",BADXMP);\n}\n", "nl": "7.2.19 parseTypeCollectionPropertyElt start-element ( URI == propertyElementURIs,  attributes == set ( idAttr?, parseCollection ) ) nodeElementList end-element()", "id": "12900"}
{"code": "void componentInputMapChanged(ComponentInputMap inputMap){\n  InputMap km=getInputMap(WHEN_IN_FOCUSED_WINDOW,false);\n  while (km != inputMap && km != null) {\n    km=km.getParent();\n  }\n  if (km != null) {\n    registerWithKeyboardManager(false);\n  }\n}\n", "nl": "Invoked from <code>ComponentInputMap</code> when its bindings change. If <code>inputMap</code> is the current <code>windowInputMap</code> (or a parent of the window <code>InputMap</code>) the <code>KeyboardManager</code> is notified of the new bindings.", "id": "54094"}
{"code": "@Override public Privilege findByName(String name) throws EntitlementException {\n  return findByName(name,getAdminSubject());\n}\n", "nl": "Finds a privilege by its unique name.", "id": "14990"}
{"code": "public com.sun.identity.liberty.ws.paos.jaxb.ResponseType createResponseType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.paos.jaxb.impl.ResponseTypeImpl();\n}\n", "nl": "Create an instance of ResponseType", "id": "11690"}
{"code": "public void updateAbandonedOperation(){\n  operationsAbandoned.getAndIncrement();\n}\n", "nl": "Updates the appropriate set of counters to indicate that an operation was abandoned without sending a response to the client.", "id": "14120"}
{"code": "public void startStreaming(){\nsynchronized (SyncOp) {\n    videoClient.startStreaming(dataCollecter);\n    rtmpSender.start(coreParameters.rtmpAddr);\n    audioClient.start(dataCollecter);\n    LogTools.d(\"RESClient,startStreaming()\");\n  }\n}\n", "nl": "start streaming", "id": "27350"}
{"code": "public static boolean[] copyOf(boolean[] original,int newLength){\n  boolean[] copy=new boolean[newLength];\n  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));\n  return copy;\n}\n", "nl": "Copies the specified array, truncating or padding with <tt>false</tt> (if necessary) so the copy has the specified length.  For all indices that are valid in both the original array and the copy, the two arrays will contain identical values.  For any indices that are valid in the copy but not the original, the copy will contain <tt>false</tt>. Such indices will exist if and only if the specified length is greater than that of the original array.", "id": "1746"}
{"code": "public synchronized boolean readRequestImmediate(){\n  if (currentWriters == 0 && writerLocks.size() == 0) {\n    ++currentReaders;\n    return true;\n  }\n  return false;\n}\n", "nl": "This version of read() requests read access and returns true if you get it. If it returns false, you may not safely read from the guarded resource. If it returns true, you should do the read, then call readDone in the normal way. Here's an example: public void read() { if( lock.readRequestImmediate() ) { try { // do the read operation here } finally { lock.readDone(); } }else { // couldn't read safely. }", "id": "40699"}
{"code": "public void clear(){\n  int max=bits.length;\n  for (int i=0; i < max; i++) {\n    bits[i]=0;\n  }\n}\n", "nl": "Clears all bits (sets to false).", "id": "14931"}
{"code": "@Override public Container findChild(String name){\n  if (name == null) {\n    return null;\n  }\nsynchronized (children) {\n    return children.get(name);\n  }\n}\n", "nl": "Return the child Container, associated with this Container, with the specified name (if any); otherwise, return <code>null</code>", "id": "13441"}
{"code": "public static AnonymousSASLBindRequest newAnonymousSASLBindRequest(final String traceString){\n  return new AnonymousSASLBindRequestImpl(traceString);\n}\n", "nl": "Creates a new anonymous SASL bind request having the provided trace string.", "id": "11170"}
{"code": "public void dispose(){\n  for (  GuiSubWindowSavable cur_subwindow : permanent_subwindows)   cur_subwindow.dispose();\n  permanent_subwindows.clear();\n  for (  GuiSubWindowTemp curr_subwindow : temporary_subwindows)   curr_subwindow.board_frame_disposed();\n  temporary_subwindows.clear();\n  board_panel.itera_board.dispose();\n  work_frame.dispose();\n}\n", "nl": "Actions to be taken when this frame vanishes.", "id": "17809"}
{"code": "public void endEntity(String name) throws SAXException {\n  if (m_firstTagNotEmitted) {\n    emitFirstTag();\n  }\n  m_handler.endEntity(name);\n}\n", "nl": "Pass the call on to the underlying handler", "id": "19106"}
{"code": "public JobService card(JobState state,Handler<AsyncResult<Long>> handler){\n  delegate.card(state,handler);\n  return this;\n}\n", "nl": "Get cardinality by job state", "id": "16310"}
{"code": "public void resetChoosableFileFilters(){\n  FileFilter[] oldValue=getChoosableFileFilters();\n  setFileFilter(null);\n  filters.removeAllElements();\n  if (isAcceptAllFileFilterUsed()) {\n    addChoosableFileFilter(getAcceptAllFileFilter());\n  }\n  firePropertyChange(CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY,oldValue,getChoosableFileFilters());\n}\n", "nl": "Resets the choosable file filter list to its starting state. Normally, this removes all added file filters while leaving the <code>AcceptAll</code> file filter.", "id": "3083"}
{"code": "static void runServer(int port,int sslPort){\n  start(port,sslPort,true);\n}\n", "nl": "Run the HTTP server, listening on the chosen port. <p> On HTTP GET the server returns a page with a login form. <p> On HTTP PUT with valid credentials, the server returns a profile page.", "id": "43708"}
{"code": "public String encode(){\n  String encoded_string=ATTRIBUTE_FIELD;\n  if (attribute != null)   encoded_string+=attribute.encode();\n  return encoded_string + Separators.NEWLINE;\n}\n", "nl": "Get the string encoded version of this object", "id": "49126"}
{"code": "protected void processMouseMotionEvent(MouseEvent e){\n  boolean dispatch=true;\n  if (autoscrolls && e.getID() == MouseEvent.MOUSE_DRAGGED) {\n    dispatch=!Autoscroller.isRunning(this);\n    Autoscroller.processMouseDragged(e);\n  }\n  if (dispatch) {\n    super.processMouseMotionEvent(e);\n  }\n}\n", "nl": "Processes mouse motion events, such as MouseEvent.MOUSE_DRAGGED.", "id": "44"}
{"code": "public boolean isLoaded(){\n  return (getViewCount() != 0);\n}\n", "nl": "Determines if the zone is in the loaded state or not.", "id": "19304"}
{"code": "public static String decodeJavaMIMEType(String nat){\n  return (isJavaMIMEType(nat)) ? nat.substring(JavaMIME.length(),nat.length()).trim() : null;\n}\n", "nl": "Decodes a <code>String</code> native for use as a Java MIME type.", "id": "40757"}
{"code": "public static String shortNumber(int number){\n  if (number >= 1000) {\n    int hundred=number % 1000 / 100;\n    if (hundred != 0)     return String.format(\"%.1f\",number / 1000) + \"k\";\n else     return (number / 1000) + \"k\";\n  }\n else   return number + \"\";\n}\n", "nl": "1000 -> 1k, 1100->1.1k", "id": "50538"}
{"code": "public static boolean isEnabled(){\n  return enabled;\n}\n", "nl": "Used to determine if statistics is enabled in the server", "id": "5732"}
{"code": "public boolean offer(E e){\n  return add(e);\n}\n", "nl": "Adds the specified element as the tail (last element) of this list.", "id": "35257"}
{"code": "public final boolean isEnabled(SmileGenerator.Feature f){\n  return (_smileGeneratorFeatures & f.getMask()) != 0;\n}\n", "nl": "Check whether specified generator feature is enabled.", "id": "23088"}
{"code": "protected void tearDown(){\n  ht10=null;\n  ht100=null;\n  htfull=null;\n  keyVector=null;\n  elmVector=null;\n}\n", "nl": "Tears down the fixture, for example, close a network connection. This method is called after a test is executed.", "id": "44601"}
{"code": "protected JButton createScrollButton(int direction){\n  if (direction != SOUTH && direction != NORTH && direction != EAST && direction != WEST) {\n    throw new IllegalArgumentException(\"Direction must be one of: \" + \"SOUTH, NORTH, EAST or WEST\");\n  }\n  return new ScrollableTabButton(direction);\n}\n", "nl": "Creates and returns a JButton that will provide the user with a way to scroll the tabs in a particular direction. The returned JButton must be instance of UIResource.", "id": "25853"}
{"code": "public boolean isEmpty(){\n  return serverIdToCSN.isEmpty();\n}\n", "nl": "Tests if the state is empty.", "id": "49716"}
{"code": "public boolean isAfter(Year other){\n  return year > other.year;\n}\n", "nl": "Checks if this year is after the specified year.", "id": "47649"}
{"code": "public void clear(){\n  if (data != null) {\n    for (int i=0; i < (length * 5); i++)     data[i]=null;\n  }\n  length=0;\n}\n", "nl": "Clear the attribute list for reuse. <p>Note that little memory is freed by this call: the current array is kept so it can be reused.</p>", "id": "51463"}
{"code": "public boolean equals(Object o){\n  if (o == null) {\n    return false;\n  }\n  if (this == o) {\n    return true;\n  }\n  if (!(o instanceof SSOTokenPrincipal)) {\n    return false;\n  }\n  SSOTokenPrincipal that=(SSOTokenPrincipal)o;\n  return this.getName().equals(that.getName());\n}\n", "nl": "Compares the specified Object with this <code>LDAPPrincipal</code> for equality.  Returns <code>true</code> if the given object is also a <code>LDAPPrincipal</code> and the two <code>LDAPPrincipal</code>s have the same username.", "id": "15521"}
{"code": "public void error(SAXParseException e) throws SAXException {\n}\n", "nl": "Receive notification of a recoverable parser error. <p>The default implementation does nothing.  Application writers may override this method in a subclass to take specific actions for each error, such as inserting the message in a log file or printing it to the console.</p>", "id": "8169"}
{"code": "public static void main(String[] args){\n  int retCode=mainVerifyIndex(args,true,System.err);\n  if (retCode != 0) {\n    System.exit(filterExitCode(retCode));\n  }\n}\n", "nl": "Processes the command-line arguments and invokes the verify process.", "id": "54690"}
{"code": "public static void updateCoins(){\n  int coins=Integer.parseInt(coinCount.getText().replaceAll(\"[^0-9]\",\"\"));\n  coinCount.setText(\"x\" + ++coins);\n}\n", "nl": "Sets the Coin count of top-left label shown during gameplay.", "id": "34485"}
{"code": "protected void handleUnexpectedTextException(String text,RuntimeException e) throws SAXException {\n  reportError(Messages.format(Messages.UNEXPECTED_TEXT,text),e,true);\n}\n", "nl": "Called when a RuntimeException is thrown during unmarshalling a text.", "id": "52034"}
{"code": "public boolean isPattern(){\n  return (_domain_pattern || _property_list_pattern || _property_value_pattern);\n}\n", "nl": "Checks whether the object name is a pattern. <p> An object name is a pattern if its domain contains a wildcard or if the object name is a property pattern.", "id": "9588"}
{"code": "public static ArgumentException missingBindPassword(String bindDN){\n  LocalizableMessage msg=ERR_DSCFG_ERROR_NO_PASSWORD.get(bindDN);\n  return new ArgumentException(msg);\n}\n", "nl": "Creates an argument exception which should be used when the client has not specified a bind password.", "id": "14770"}
{"code": "public boolean isMutable(){\n  return mutable;\n}\n", "nl": "Checks if the object is mutable", "id": "9030"}
{"code": "public void finalizeListenerManager(){\n  DirectoryServer.deregisterInternalPlugin(plugin);\n  DirectoryServer.deregisterBackendInitializationListener(this);\n  DirectoryServer.deregisterAlertGenerator(this);\n}\n", "nl": "Deregister from the change notification listener, the backend initialization listener and the alert generator.", "id": "12507"}
{"code": "@SuppressWarnings(\"unchecked\") @Override public PdfArray copyTo(PdfDocument document){\n  return (PdfArray)super.copyTo(document,true);\n}\n", "nl": "Copies object to a specified document. Works only for objects that are read from existing document, otherwise an exception is thrown.", "id": "56539"}
{"code": "public void clearQheaders(){\n  qheaders=new NameValueList();\n}\n", "nl": "Clear all Qheaders.", "id": "34354"}
{"code": "public static void decodeXMLToDebugLog(String callerName,Element xmlElement){\n  if (decryptDebug.messageEnabled() && isSAMLDecryptionDebugEnabled()) {\n    String xmlOutput=XMLUtils.print(xmlElement);\n    decryptDebug.message(callerName + \"Decrypted xml element node:\\n\" + ((xmlOutput != null) ? xmlOutput : \"NULL\"));\n  }\n}\n", "nl": "If enabled, decodes the provided XML element and prints it out to the decryption debug log.", "id": "26006"}
{"code": "public boolean isReferral(){\n  return hasObjectClassOrAttribute(OC_REFERRAL,ATTR_REFERRAL_URL);\n}\n", "nl": "Indicates whether this entry meets the criteria to consider it a referral (e.g., it contains the \"referral\" objectclass and a \"ref\" attribute).", "id": "3317"}
{"code": "public KeyInfoConfirmationData createKeyInfoConfirmationData(String xml) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.KEYINFO_CONFIRMATION_DATA,xml);\n  if (obj == null) {\n    return new KeyInfoConfirmationDataImpl(xml);\n  }\n else {\n    return (KeyInfoConfirmationData)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>KeyInfoConfirmationData</code>. The return object is immutable.", "id": "31310"}
{"code": "public void internalFrameIconified(InternalFrameEvent e){\n}\n", "nl": "Invoked when an internal frame is iconified.", "id": "55680"}
{"code": "public String toString(){\n  if (exception != null) {\n    return super.toString() + \"\\n\" + exception.toString();\n  }\n else {\n    return super.toString();\n  }\n}\n", "nl": "Override toString to pick up any embedded exception.", "id": "22061"}
{"code": "public boolean hasReplayError(){\n  return hasReplayError;\n}\n", "nl": "Gets the replay error marker for the future update ack.", "id": "5364"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(domimplementationhasfeature01.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "2030"}
{"code": "public static void removeJarFiles(String srcDir,String fileName){\n  String src=srcDir + FILE_SEP + fileName;\n  File file=new File(src);\n  if (file.exists()) {\n    file.delete();\n  }\n else   Debug.log(\"FileUtils.removeJarFiles() Unable to remove file\");\n}\n", "nl": "Method removeJarFiles. jar files will be removed from source directory", "id": "34948"}
{"code": "public boolean isMultipleMode(){\n  return allowsMultipleSelections();\n}\n", "nl": "Determines whether this list allows multiple selections.", "id": "31414"}
{"code": "public synchronized static void load() throws Exception {\n  if (!isBootstrap) {\n    String basedir=System.getProperty(JVM_OPT_BOOTSTRAP);\n    if (load(basedir,false) == null) {\n      throw new ConfiguratorException(\"configurator.cannot.bootstrap\",null,Locale.getDefault());\n    }\n    SystemProperties.initializeProperties(\"com.iplanet.am.naming.url\",SystemProperties.getServerInstanceName() + \"/namingservice\");\n  }\n}\n", "nl": "Loads System Property with the bootstrap file that is found in <code>JVM_OPT_BOOTSTRAP</code> stated directory.", "id": "29606"}
{"code": "public static DocAttributeSet unmodifiableView(DocAttributeSet attributeSet){\n  if (attributeSet == null) {\n    throw new NullPointerException();\n  }\n  return new UnmodifiableDocAttributeSet(attributeSet);\n}\n", "nl": "Creates an unmodifiable view of the given doc attribute set.", "id": "53966"}
{"code": "private Object writeReplace(){\n  return new Ser(Ser.MINGUO_DATE_TYPE,this);\n}\n", "nl": "Writes the object using a <a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.", "id": "45646"}
{"code": "public void visitAttribute(Attribute attr){\n  if (mv != null) {\n    mv.visitAttribute(attr);\n  }\n}\n", "nl": "Visits a non standard attribute of this method.", "id": "55990"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_attrclonenode1.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "52402"}
{"code": "int selectServer(int forceIndex){\n  int index=forceIndex == -1 ? getLessSaturatedIndex() : forceIndex;\n  serversCounters.incrementAndGet(index);\n  return index;\n}\n", "nl": "Returns the server index to use.", "id": "14614"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(noderemovechild.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "3306"}
{"code": "public WaspHash openOrCreateHash(String hashName){\n  WaspHash hash;\n  try {\n    if (existsHash(hashName)) {\n      hash=getHash(hashName);\n    }\n else {\n      hash=createHash(hashName);\n    }\n    return hash;\n  }\n catch (  Exception wfe) {\n    wfe.printStackTrace();\n    return null;\n  }\n}\n", "nl": "Open/create a WaspHash instance", "id": "12276"}
{"code": "static Promise<Long> promiseLong(){\n  return new BasePromise<>();\n}\n", "nl": "Returns a Long promise Added to make static imports possible.", "id": "37114"}
{"code": "public SubscriptionStateHeader createSubscriptionStateHeader(String subscriptionState) throws ParseException {\n  if (subscriptionState == null)   throw new NullPointerException(\"null subscriptionState arg\");\n  SubscriptionState s=new SubscriptionState();\n  s.setState(subscriptionState);\n  return s;\n}\n", "nl": "Creates a new SubscriptionStateHeader based on the newly supplied subscriptionState value.", "id": "23081"}
{"code": "private String fetchTableName(String query){\n  for (  String tableName : mTableNames) {\n    if (query.contains(tableName)) {\n      return tableName;\n    }\n  }\n  return \"\";\n}\n", "nl": "Fetch the table name from query", "id": "28914"}
{"code": "public void destroy(){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"destroy\",_opsClass);\n  DynArrayOperations $self=(DynArrayOperations)$so.servant;\n  try {\n    $self.destroy();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Destroys a DynAny object. This operation frees any resources used to represent the data value associated with a DynAny object. It must be invoked on references obtained from one of the creation operations on the ORB interface or on a reference returned by DynAny.copy() to avoid resource leaks. Invoking destroy on component DynAny objects (for example, on objects returned by the current_component operation) does nothing. Destruction of a DynAny object implies destruction of all DynAny objects obtained from it. That is, references to components of a destroyed DynAny become invalid. Invocations on such references raise OBJECT_NOT_EXIST. It is possible to manipulate a component of a DynAny beyond the life time of the DynAny from which the component was obtained by making a copy of the component with the copy operation before destroying the DynAny from which the component was obtained.", "id": "11929"}
{"code": "private void signalRemove(InternalSession session,SessionEventType event){\n  sessionEventBroker.onEvent(new InternalSessionEvent(session,event));\n  sessionLogging.logEvent(session.toSessionInfo(),event);\n  session.setState(SessionState.DESTROYED);\n  sessionNotificationSender.sendEvent(session,event);\n}\n", "nl": "Simplifies the signalling that a Session has been removed.", "id": "49724"}
{"code": "public String toString(){\n  return name + \" version \" + version;\n}\n", "nl": "Returns a string with the name and the version number of this provider.", "id": "53160"}
{"code": "public String toString(){\n  return (toXML());\n}\n", "nl": "Returns XML string representation of this object", "id": "58752"}
{"code": "public void storeLocal(final int local,final Type type){\n  setLocalType(local,type);\n  storeInsn(type,local);\n}\n", "nl": "Generates the instruction to store the top stack value in the given local variable.", "id": "25877"}
{"code": "final boolean tokenIs(char c){\n  return (m_token != null) ? (m_tokenChar == c) : false;\n}\n", "nl": "Check whether m_tokenChar==c.", "id": "38851"}
{"code": "public static String replaceTrailingBrackets(String self){\n  return replaceTrailingBrackets(self,\"\");\n}\n", "nl": "Replace trailing parenthesis including any leading whitespace. e.g. \"The IT Crowd (UK)\" -> \"The IT Crowd\"", "id": "56414"}
{"code": "private MethodNode findMethod(ClassNode cn,String name,String desc){\n  if (cn == null) {\n    return null;\n  }\n  for (  MethodNode mn : cn.methods) {\n    if (mn.desc.equals(desc) && mn.name.equals(name)) {\n      return mn;\n    }\n  }\n  return null;\n}\n", "nl": "Finds a method of a given name and description in a ClassNode.", "id": "24850"}
{"code": "public ByteBufferOutputStream append(double d){\n  append(formatDouble(d,this));\n  return this;\n}\n", "nl": "Appends a string representation of a <CODE>double</CODE> according to the Pdf conventions.", "id": "19176"}
{"code": "public final void errPrintln(final LocalizableMessage msg){\n  getErrStream().println(wrap(msg));\n}\n", "nl": "Displays a message to the error stream.", "id": "14113"}
{"code": "public static SmsRouteTreeBuilder leaf(String uriTemplate,Predicate<String> handlesFunction,boolean generalActions){\n  return new SmsRouteTreeBuilder(uriTemplate).handles(handlesFunction).supportGeneralActions(generalActions);\n}\n", "nl": "Creates a builder which adds a leaf to the route tree.", "id": "35241"}
{"code": "private static String readVersion(){\n  try {\n    byte[] bytes=IoUtils.readFileAsByteArray(ZONE_DIRECTORY_NAME + \"+VERSION\");\n    return new String(bytes,0,bytes.length,StandardCharsets.ISO_8859_1).trim();\n  }\n catch (  IOException ex) {\n    return \"unknown\";\n  }\n}\n", "nl": "Reads the file indicating the database version in use.", "id": "58650"}
{"code": "@Override public UniqueId send(Member[] destination,Serializable msg,int options) throws ChannelException {\n  return send(destination,msg,options,null);\n}\n", "nl": "Send a message to the destinations specified", "id": "23355"}
{"code": "public static Clause where(String clause){\n  return new SimpleClause(clause);\n}\n", "nl": "Returns a new where-clause from the provided String expression.", "id": "1975"}
{"code": "void backupEnd(){\n}\n", "nl": "Do whatever is needed when a backup is finished.", "id": "50556"}
{"code": "public void visitEnum(String name,String desc,String value){\n  if (av != null) {\n    av.visitEnum(name,desc,value);\n  }\n}\n", "nl": "Visits an enumeration value of the annotation.", "id": "38650"}
{"code": "@Override public boolean supportsPredictiveItemAnimations(){\n  return true;\n}\n", "nl": "If you want to customize the animation, it should return true.", "id": "8096"}
{"code": "public void display(){\n  getDialog().packAndShow();\n}\n", "nl": "This method displays the setup dialog. This method must be called from the event thread.", "id": "20622"}
{"code": "public static QrCode encodeBinary(byte[] data,Ecc ecl){\n  if (data == null || ecl == null)   throw new NullPointerException();\n  QrSegment seg=QrSegment.makeBytes(data);\n  return encodeSegments(Arrays.asList(seg),ecl);\n}\n", "nl": "Returns a QR Code symbol representing the specified binary data string at the specified error correction level. This function always encodes using the binary segment mode, not any text mode. The maximum number of bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.", "id": "41043"}
{"code": "public synchronized void stop(long stopInterval) throws Exception {\n  if (running == false) {\n    throw new IllegalStateException(\"Monitor is not running\");\n  }\n  running=false;\n  try {\n    thread.join(stopInterval);\n  }\n catch (  InterruptedException e) {\n    Thread.currentThread().interrupt();\n  }\n  for (  FileAlterationObserver observer : observers) {\n    observer.destroy();\n  }\n}\n", "nl": "Stop monitoring.", "id": "49263"}
{"code": "@Override public String toString(){\n  final StringBuilder buffer=new StringBuilder();\n  toString(buffer);\n  return buffer.toString();\n}\n", "nl": "Return the text representation of ServerState.", "id": "30046"}
{"code": "public boolean isEmpty(){\n  return head == tail;\n}\n", "nl": "Returns <tt>true</tt> if this deque contains no elements.", "id": "29423"}
{"code": "public ModelTypeTable cloneEmpty(){\n  return new ModelTypeTable(typeTable.cloneEmpty(),typeNameConverter);\n}\n", "nl": "Creates a new ModelTypeTable of the same concrete type, but with an empty import set.", "id": "14981"}
{"code": "protected void initializeRequestContext(RequestContext requestContext){\n  super.initializeRequestContext(requestContext);\n  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);\n  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);\n}\n", "nl": "Initialize request context and set the viewbean manager", "id": "41442"}
{"code": "public static boolean isSupplementaryCodePoint(int codePoint){\n  return codePoint >= MIN_SUPPLEMENTARY_CODE_POINT && codePoint < MAX_CODE_POINT + 1;\n}\n", "nl": "Determines whether the specified character (Unicode code point) is in the <a href=\"#supplementary\">supplementary character</a> range.", "id": "30351"}
{"code": "public boolean useDaylightTime(){\n  return useDaylight;\n}\n", "nl": "Queries if this time zone uses daylight saving time.", "id": "37564"}
{"code": "public int doAfterBody() throws JspException {\n  return SKIP_BODY;\n}\n", "nl": "does nothing here", "id": "33228"}
{"code": "private void restoreEnvironmentRealmDn(Map<String,Set<String>> environment,Set<String> savedRealmDn){\n  environment.put(REALM_DN,savedRealmDn);\n}\n", "nl": "For the passed in Entitlement environment, replace the existing realm DN with the previous value savedRealmDn.", "id": "47587"}
{"code": "public static boolean areAllGranted(String authorities) throws IOException {\n  AuthorizeFaceletsTag authorizeTag=new AuthorizeFaceletsTag();\n  authorizeTag.setIfAllGranted(authorities);\n  return authorizeTag.authorize();\n}\n", "nl": "Returns true if the user has all of of the given authorities.", "id": "9162"}
{"code": "private void createTopContainerEntry() throws ADSContextException {\n  AddRequest request=newAddRequest(getAdministrationSuffixDN()).addAttribute(\"objectclass\",\"top\",\"ds-cfg-branch\");\n  createEntry(request);\n}\n", "nl": "Creates the top container entry.", "id": "52661"}
{"code": "public boolean implies(Permission permission){\nsynchronized (this) {\n    Permission p=permsMap.get(permission);\n    if (p == null) {\n      for (      Permission p_ : permsMap.values()) {\n        if (p_.implies(permission))         return true;\n      }\n      return false;\n    }\n else {\n      return true;\n    }\n  }\n}\n", "nl": "Check and see if this set of permissions implies the permissions expressed in \"permission\".", "id": "48852"}
{"code": "public static Event35Log.Builder newBuilder(Event35Log other){\n  return new Event35Log.Builder(other);\n}\n", "nl": "Creates a new EventLog RecordBuilder by copying an existing EventLog instance", "id": "54910"}
{"code": "public static void deleteFileIfExistsWithRetry(Path path) throws IOException {\n  try {\n    if (Files.exists(path))     deleteFileWithRetry0(path);\n  }\n catch (  InterruptedException x) {\n    throw new IOException(\"Interrupted while deleting.\",x);\n  }\n}\n", "nl": "Deletes a file, retrying if necessary. No exception thrown if file doesn't exist.", "id": "23694"}
{"code": "public void removeColumnModelListener(TableColumnModelListener x){\n  listenerList.remove(TableColumnModelListener.class,x);\n}\n", "nl": "Removes a listener for table column model events.", "id": "7693"}
{"code": "public <M extends Configuration>void deregisterDeleteListener(OptionalRelationDefinition<?,M> d,ServerManagedObjectDeleteListener<M> listener){\n  validateRelationDefinition(d);\n  DN baseDN=DNBuilder.create(path,d).parent();\n  deregisterDeleteListener(baseDN,listener);\n}\n", "nl": "Deregisters an existing server managed object delete listener.", "id": "42145"}
{"code": "@Override public Call<MapMatchingResponse> cloneCall(){\n  return getCall().clone();\n}\n", "nl": "clone the call", "id": "36706"}
{"code": "@Nullable @Override public ActionMode startSupportActionMode(@NonNull final ActionMode.Callback callback){\n  return delegate.startSupportActionMode(callback);\n}\n", "nl": "Start an action mode.", "id": "55428"}
{"code": "public XMLString toLowerCase(Locale locale){\n  return new XMLStringDefault(m_str.toLowerCase(locale));\n}\n", "nl": "Converts all of the characters in this <code>String</code> to lower case using the rules of the given <code>Locale</code>.", "id": "20163"}
{"code": "public Enumeration breadthFirstEnumeration(){\n  return new BreadthFirstEnumeration(this);\n}\n", "nl": "Creates and returns an enumeration that traverses the subtree rooted at this node in breadth-first order.  The first node returned by the enumeration's <code>nextElement()</code> method is this node.<P> Modifying the tree by inserting, removing, or moving a node invalidates any enumerations created before the modification.", "id": "48352"}
{"code": "public com.sun.identity.liberty.ws.authnsvc.jaxb.StatusType createStatusType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.StatusTypeImpl();\n}\n", "nl": "Create an instance of StatusType", "id": "23856"}
{"code": "public Cursor fetch(Long dataTypeID){\n  if (dataTypeID == null) {\n    throw new IllegalArgumentException(\"primary key null.\");\n  }\n  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_DATATYPEID + \"=\" + dataTypeID,null,null,null,null,null);\n  if (mCursor != null) {\n    mCursor.moveToFirst();\n  }\n  return mCursor;\n}\n", "nl": "Return a Cursor pointing to the record matches the dataTypeID.", "id": "33314"}
{"code": "public void add(Attr attr){\n  if (attr == null)   return;\n  Attr attr1=findAttribute(attr.getName());\n  if (attr1 == null) {\n    _attrs.add(attr);\n  }\n else {\n    attr1.addValues(attr.getStringValues());\n  }\n}\n", "nl": "Add one attribute to the AttrSet The attribute should have only string values", "id": "2405"}
{"code": "private boolean evalEntryAttr(Entry e,AciEvalContext evalCtx,AttributeType attributeType){\nswitch (userAttrType) {\ncase USERDN:\n    return UserDN.evaluate(e,evalCtx.getClientDN(),attributeType);\ncase GROUPDN:\n  return GroupDN.evaluate(e,evalCtx,attributeType,null);\ndefault :\nreturn false;\n}\n}\n", "nl": "This method evaluates the user attribute type and calls the correct evaluation method. The three user attribute types that can be selected are USERDN or GROUPDN.", "id": "19530"}
{"code": "public void paintToolBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBorder(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the border of a tool bar.", "id": "30382"}
{"code": "public StateInteractive left_button_clicked(PlaPointFloat p_location){\n  return add_corner(p_location);\n}\n", "nl": "adds a corner to the polygon of the item under construction", "id": "18943"}
{"code": "protected boolean includeAuthorityInRequestLine(){\n  return connection == null ? policy.usingProxy() : connection.getRoute().getProxy().type() == Proxy.Type.HTTP;\n}\n", "nl": "Returns true if the request line should contain the full URL with host and port (like \"GET http://android.com/foo HTTP/1.1\") or only the path (like \"GET /foo HTTP/1.1\"). <p>This is non-final because for HTTPS it's never necessary to supply the full URL, even if a proxy is in use.", "id": "45009"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n}\n", "nl": "Ensures that the Directory Server is running before executing the testcases.", "id": "32657"}
{"code": "public double length_approx(){\n  return length_approx(0,plaline_len(-2));\n}\n", "nl": "Calculates the cumulative distance between consecutive corners of this polyline.", "id": "19693"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_elementretrievetagname.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "32971"}
{"code": "void initialize_is_on_the_left_of_edge_line_array(){\n  if (is_on_the_left_of_edge_line != null) {\n    return;\n  }\n  is_on_the_left_of_edge_line=new boolean[3];\n  for (int i=0; i < 3; ++i) {\n    is_on_the_left_of_edge_line[i]=(edge_lines[i].left_triangle == this);\n  }\n}\n", "nl": "Must be done as long as this triangle node is a leaf and after for all its edge lines the left_triangle or the right_triangle reference is set to this triangle.", "id": "24497"}
{"code": "public boolean release(DTM dtm,boolean shouldHardDelete){\n  if (m_rtfdtm_stack != null && m_rtfdtm_stack.contains(dtm)) {\n    return false;\n  }\n  return m_dtmManager.release(dtm,shouldHardDelete);\n}\n", "nl": "Release a DTM either to a lru pool, or completely remove reference. DTMs without system IDs are always hard deleted. State: experimental.", "id": "30100"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodedocumenttypenodevalue.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "45698"}
{"code": "protected boolean needToUnescapeXMLSpecialCharacters(String hostEntityID,String remoteEntityID,String realm){\n  return true;\n}\n", "nl": "Decides whether it needs to unescape XML special characters for attribute values or not.", "id": "48403"}
{"code": "public synchronized void requestConsumed(){\n  this.nextSeqno=this.getRemoteSeqNumber() + 1;\n  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {\n    logger.logDebug(\"Request Consumed -- next consumable Request Seqno = \" + this.nextSeqno);\n  }\n}\n", "nl": "Updates the next consumable seqno.", "id": "41048"}
{"code": "public void install(JFormattedTextField ftf){\n  super.install(ftf);\n  updateMaskIfNecessary();\n  positionCursorAtInitialLocation();\n}\n", "nl": "Installs the <code>DefaultFormatter</code> onto a particular <code>JFormattedTextField</code>. This will invoke <code>valueToString</code> to convert the current value from the <code>JFormattedTextField</code> to a String. This will then install the <code>Action</code>s from <code>getActions</code>, the <code>DocumentFilter</code> returned from <code>getDocumentFilter</code> and the <code>NavigationFilter</code> returned from <code>getNavigationFilter</code> onto the <code>JFormattedTextField</code>. <p> Subclasses will typically only need to override this if they wish to install additional listeners on the <code>JFormattedTextField</code>. <p> If there is a <code>ParseException</code> in converting the current value to a String, this will set the text to an empty String, and mark the <code>JFormattedTextField</code> as being in an invalid state. <p> While this is a public method, this is typically only useful for subclassers of <code>JFormattedTextField</code>. <code>JFormattedTextField</code> will invoke this method at the appropriate times when the value changes, or its internal state changes.", "id": "41595"}
{"code": "public void checkNumberArgs(int argNum) throws WrongNumberArgsException {\n  if (argNum != 1)   reportWrongNumberArgs();\n}\n", "nl": "Check that the number of arguments passed to this function is correct.", "id": "54313"}
{"code": "public void addCaretListener(CaretListener listener){\n  listenerList.add(CaretListener.class,listener);\n}\n", "nl": "Adds a caret listener for notification of any changes to the caret.", "id": "39899"}
{"code": "public RoleList retrieveAllRoles(){\n  RELATION_LOGGER.entering(RelationSupport.class.getName(),\"retrieveAllRoles\");\n  RoleList result;\nsynchronized (myRoleName2ValueMap) {\n    result=new RoleList(new ArrayList<Role>(myRoleName2ValueMap.values()));\n  }\n  RELATION_LOGGER.exiting(RelationSupport.class.getName(),\"retrieveAllRoles\");\n  return result;\n}\n", "nl": "Returns all roles in the relation without checking read mode.", "id": "41831"}
{"code": "public E pop() throws EmptyStackException {\n  int n=size();\n  if (n <= 0) {\n    throw new EmptyStackException();\n  }\n else {\n    return remove(n - 1);\n  }\n}\n", "nl": "Pops the top item off of this stack and return it.", "id": "33474"}
{"code": "public static boolean isBold(AttributeSet a){\n  Boolean bold=(Boolean)a.getAttribute(Bold);\n  if (bold != null) {\n    return bold.booleanValue();\n  }\n  return false;\n}\n", "nl": "Checks whether the bold attribute is set.", "id": "39462"}
{"code": "public String toXMLString() throws SAML2Exception {\n  return this.toXMLString(true,false);\n}\n", "nl": "Returns a String representation", "id": "27406"}
{"code": "public void addArgument(final Argument argument) throws ArgumentException {\n  addArgument(argument,null);\n}\n", "nl": "Adds the provided argument to the set of arguments handled by this parser.", "id": "22474"}
{"code": "public StampingProperties useAppendMode(){\n  appendMode=true;\n  return this;\n}\n", "nl": "Defines if the document will be edited in append mode.", "id": "18035"}
{"code": "public void installUI(JComponent c){\n  super.installUI(c);\n  root=(JRootPane)c;\n  int style=root.getWindowDecorationStyle();\n  if (style != JRootPane.NONE) {\n    installClientDecorations(root);\n  }\n}\n", "nl": "Invokes supers implementation of <code>installUI</code> to install the necessary state onto the passed in <code>JRootPane</code> to render the metal look and feel implementation of <code>RootPaneUI</code>. If the <code>windowDecorationStyle</code> property of the <code>JRootPane</code> is other than <code>JRootPane.NONE</code>, this will add a custom <code>Component</code> to render the widgets to <code>JRootPane</code>, as well as installing a custom <code>Border</code> and <code>LayoutManager</code> on the <code>JRootPane</code>.", "id": "56134"}
{"code": "public final void printlnNoWrap(final LocalizableMessage msg){\n  if (!isQuiet()) {\n    out.println(msg);\n  }\n}\n", "nl": "Displays a message to the output stream without wrapping.", "id": "46562"}
{"code": "public static void showMessageDialog(Component parentComponent,Object message,String title,int messageType) throws HeadlessException {\n  showMessageDialog(parentComponent,message,title,messageType,null);\n}\n", "nl": "Brings up a dialog that displays a message using a default icon determined by the <code>messageType</code> parameter.", "id": "1258"}
{"code": "public void error(SourceLocator srcLctr,Node styleNode,Node sourceNode,String msg) throws TransformerException {\n  error(srcLctr,styleNode,sourceNode,msg,null);\n}\n", "nl": "Tell the user of an error, and probably throw an exception.", "id": "36653"}
{"code": "private void writeObject(ObjectOutputStream s) throws IOException {\n  s.defaultWriteObject();\n  if (getUIClassID().equals(uiClassID)) {\n    byte count=JComponent.getWriteObjCounter(this);\n    JComponent.setWriteObjCounter(this,--count);\n    if (count == 0 && ui != null) {\n      ui.installUI(this);\n    }\n  }\n}\n", "nl": "See readObject() and writeObject() in JComponent for more information about serialization in Swing.", "id": "22578"}
{"code": "@Override public void onTokenDeleted(Context context){\n}\n", "nl": "Called when GCM tokens are deleted.", "id": "25651"}
{"code": "public boolean isEmpty(){\n  return size == 0;\n}\n", "nl": "Returns <tt>true</tt> if this set contains no elements.", "id": "7773"}
{"code": "public AMGroup createStaticGroup(String name,Map attributes,Map serviceNameAndAttrs) throws AMException, SSOException {\n  return createGroup(name,attributes,serviceNameAndAttrs,AMObject.STATIC_GROUP);\n}\n", "nl": "Creates static group. Takes serviceNameAndAttr map so that services can be assigned to the group which is just created.", "id": "48227"}
{"code": "public void assign_clearance_classs_to_selected_items(int p_cl_class_index){\n  if (board_is_read_only)   return;\n  if (!is_StateSelectedItem())   return;\n  StateInteractive new_state=((StateSelectedItem)interactive_state).assign_clearance_class(p_cl_class_index);\n  set_interactive_state(new_state);\n}\n", "nl": "Assigns the input clearance class to the selected items", "id": "23090"}
{"code": "public Resource supportedActions(final Action... actions){\n  this.supportedActions.addAll(Arrays.asList(actions));\n  return this;\n}\n", "nl": "Registers zero or more actions which should be supported by this resource. By default, no actions are supported.", "id": "24122"}
{"code": "public boolean isProtected(){\n  return Modifier.isProtected(flags);\n}\n", "nl": "Utility method to query the modifier flags of this member.", "id": "8059"}
{"code": "public static ComponentUI createUI(JComponent a){\n  ComponentUI mui=new MultiSpinnerUI();\n  return MultiLookAndFeel.createUIs(mui,((MultiSpinnerUI)mui).uis,a);\n}\n", "nl": "Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI.  Otherwise, just returns the UI object obtained from the default <code>LookAndFeel</code>.", "id": "18159"}
{"code": "static protected int convertCharacter(int[] conversion,char ch){\n  int index;\n  for (index=0; index < conversion.length; index+=2) {\n    if (conversion[index] == ch)     return conversion[index + 1];\n  }\n  return 0;\n}\n", "nl": "Takes a char and a conversion table (an int[] in the current implementation, but conversion tables should be treated as an opaque type) and returns the corresponding byte value (as an int, since bytes are signed).", "id": "38861"}
{"code": "private int decodeId(final byte[] idBytes){\n  int id=0;\n  for (  final byte b : idBytes) {\n    id<<=8;\n    id|=b & 0xFF;\n  }\n  return id - 1;\n}\n", "nl": "Decodes the provided encoded schema element ID.", "id": "25144"}
{"code": "public static ConnectionFactory newShardedRequestLoadBalancer(final Collection<? extends ConnectionFactory> factories,final Options options){\n  return new RequestLoadBalancer(\"ShardedRequestLoadBalancer\",factories,options,newShardedRequestLoadBalancerNextFunction(factories),NOOP_END_OF_REQUEST_FUNCTION);\n}\n", "nl": "Creates a new \"sharded\" load-balancer which will load-balance individual requests across the provided set of connection factories, each typically representing a single replica, using an algorithm that ensures that requests targeting a given DN will always be routed to the same replica. In other words, this load-balancer increases consistency whilst maintaining read-scalability by simulating a \"single master\" replication topology, where each replica is responsible for a subset of the entries. When a replica is unavailable the load-balancer \"fails over\" by performing a linear probe in order to find the next available replica thus ensuring high-availability when a network partition occurs while sacrificing consistency, since the unavailable replica may still be visible to other clients. <p/> This load-balancer distributes requests based on the hash of their target DN and handles all core operations, as well as any password modify extended requests and SASL bind requests which use authentication IDs having the \"dn:\" form. Note that subtree operations (searches, subtree deletes, and modify DN) are likely to include entries which are \"mastered\" on different replicas, so client applications should be more tolerant of inconsistencies. Requests that are either unrecognized or that do not have a parameter that may be considered to be a target DN will be routed randomly. <p/> <b>NOTE:</b> this connection factory returns fake connections, since real connections are obtained for each request. Therefore, the returned fake connections have certain limitations: abandon requests will be ignored since they cannot be routed; connection event listeners can be registered, but will only be notified when the fake connection is closed or when all of the connection factories are unavailable. <p/> <b>NOTE:</b> in deployments where there are multiple client applications, care should be taken to ensure that the factories are configured using the same ordering, otherwise requests will not be routed consistently across the client applications. <p/> The implementation periodically attempts to connect to failed connection factories in order to determine if they have become available again.", "id": "50894"}
{"code": "public PdfCanvas resetFillColorRgb(){\n  return resetFillColorGray();\n}\n", "nl": "Changes the current color for filling paths to black.", "id": "58256"}
{"code": "public void shutdown(){\n  suspended.set(true);\n  shutdown.set(true);\nsynchronized (sleeper) {\n    sleeper.notify();\n  }\n  try {\n    join();\n  }\n catch (  InterruptedException ex) {\n  }\n  StateMachineTest.shutdown(reader);\n}\n", "nl": "Stops the writer thread.", "id": "10290"}
{"code": "public void enableCookieTimeToLive(boolean flag){\n  cookieTimeToLiveEnabledFlag=flag;\n  if (DEBUG.messageEnabled()) {\n    DEBUG.message(\"LoginState.enableCookieTimeToLive(): enable=\" + cookieTimeToLiveEnabledFlag);\n  }\n}\n", "nl": "Enables AM session cookie time to live", "id": "22201"}
{"code": "private static int min(int a,int b){\n  if (a < b)   return a;\n  return b;\n}\n", "nl": "Our own little min method, to avoid loading java.lang.Math if we've run out of file descriptors and we're trying to print a stack trace.", "id": "20026"}
{"code": "public void paintScrollBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintScrollBarBorder(context,g,x,y,w,h);\n}\n", "nl": "Paints the border of a scrollbar. This implementation invokes the method of the same name without the orientation.", "id": "12260"}
{"code": "public void removeChangeListener(ChangeListener l){\n  listenerList.remove(ChangeListener.class,l);\n}\n", "nl": "Removes a ChangeListener from the button.", "id": "32320"}
{"code": "protected boolean isSpecial(String name){\n  for (int i=0; i < specials.length; i++) {\n    if (specials[i].equals(name))     return true;\n  }\n  return false;\n}\n", "nl": "Is this attribute name one of the special ones that is added only for included servlets?", "id": "39195"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodecloneattributescopied.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "43172"}
{"code": "public static void cacheResult(Foo foo){\n  getPersistence().cacheResult(foo);\n}\n", "nl": "Caches the foo in the entity cache if it is enabled.", "id": "42309"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_nodeattributenodetype.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "47143"}
{"code": "public static void main(String[] args){\n  int retCode=mainRestoreDB(args,true,System.out,System.err);\n  if (retCode != 0) {\n    System.exit(filterExitCode(retCode));\n  }\n}\n", "nl": "The main method for RestoreDB tool.", "id": "53954"}
{"code": "public static ByteString createBooleanValue(boolean b){\n  return b ? ServerConstants.TRUE_VALUE : ServerConstants.FALSE_VALUE;\n}\n", "nl": "Retrieves an attribute value containing a representation of the provided boolean value.", "id": "46140"}
{"code": "public void makeImmutable(){\n  mutable=false;\n}\n", "nl": "Makes the object immutable", "id": "28264"}
{"code": "public static void registerEditorKitForContentType(String type,String classname){\n  registerEditorKitForContentType(type,classname,Thread.currentThread().getContextClassLoader());\n}\n", "nl": "Establishes the default bindings of <code>type</code> to <code>classname</code>. The class will be dynamically loaded later when actually needed, and can be safely changed before attempted uses to avoid loading unwanted classes.  The prototype <code>EditorKit</code> will be loaded with <code>Class.forName</code> when registered with this method.", "id": "11732"}
{"code": "public String toASCIIPropertyList(){\n  StringBuilder ascii=new StringBuilder();\n  toASCII(ascii,0);\n  ascii.append(NEWLINE);\n  return ascii.toString();\n}\n", "nl": "Generates a valid ASCII property list which has this NSDictionary as its root object. The generated property list complies with the format as described in <a href=\"https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/PropertyLists/OldStylePlists/OldStylePLists.html\"> Property List Programming Guide - Old-Style ASCII Property Lists</a>.", "id": "54576"}
{"code": "public void abandon() throws UMSException {\n  IOUtils.closeIfNotNull(connection,m_ldapSearchResults);\n}\n", "nl": "Abandons a current search operation, notifying the server not to send additional search results.", "id": "54885"}
{"code": "public boolean asksAllowsChildren(){\n  return asksAllowsChildren;\n}\n", "nl": "Tells how leaf nodes are determined.", "id": "3628"}
{"code": "public void hide_ratsnest(){\n  if (ratsnest != null) {\n    ratsnest.hide();\n  }\n}\n", "nl": "Hides the incomplete connections on the screen.", "id": "37426"}
{"code": "private UnboundedToken newValueToken(String value) throws Exception {\n  if (value == null) {\n    value=\"\";\n  }\n  UnboundedToken valueToken=new UnboundedToken(value);\n  valueToken.setTokenIndex(getParser().getNextTokenIndex());\n  return valueToken;\n}\n", "nl": "Factory method for creation a new value token with the given value.", "id": "55001"}
{"code": "private void startSpringScroll(int dist){\n  if (directionVertical()) {\n    mSpringScroller.startScroll(0,dist);\n  }\n else {\n    mSpringScroller.startScroll(dist,0);\n  }\n}\n", "nl": "Set the spring value to start the spring scroll-back animation. The spring will contract and finish with the value 0.", "id": "49567"}
{"code": "public static boolean isAssemblyAllowed(int permissions){\n  return (EncryptionConstants.ALLOW_ASSEMBLY & permissions) == EncryptionConstants.ALLOW_ASSEMBLY;\n}\n", "nl": "Tells you if document assembly is allowed.", "id": "55876"}
{"code": "public boolean isStretchWidth(){\n  return this.stretchWidth;\n}\n", "nl": "Checks whether or not the region's width can be stretched. <P>", "id": "39623"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(namednodemapsetnameditemns04.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "8304"}
{"code": "public void addRequest(Request request){\n  requestSet.add(request);\n}\n", "nl": "Adds a Request object to this object.", "id": "21253"}
{"code": "public void select_all(){\n  Arrays.fill(sel_array,true);\n}\n", "nl": "Selects all item types.", "id": "57024"}
{"code": "public boolean delete(long id){\n  return database.delete(DATABASE_TABLE,KEY_ID + \"=\" + id,null) > 0;\n}\n", "nl": "deletes the specified LogEvent from the database", "id": "54308"}
{"code": "public String dumpNode(boolean recursive){\n  StringBuffer result=new StringBuffer(512);\n  this.dumpNode(result,recursive,0,0);\n  return result.toString();\n}\n", "nl": "Renders this node and the tree unter this node in a human readable form.", "id": "2150"}
{"code": "public AMGroup createStaticGroup(String name,Map attributes,Map serviceNameAndAttrs) throws AMException, SSOException {\n  return createGroup(name,attributes,serviceNameAndAttrs,AMObject.STATIC_GROUP);\n}\n", "nl": "Creates static group. Takes serviceNameAndAttr map so that services can be assigned to the group which is just created.", "id": "25354"}
{"code": "public LoginConfiguration forceAuth(String forceAuthReqParam){\n  forceAuth=Boolean.parseBoolean(forceAuthReqParam);\n  return this;\n}\n", "nl": "Sets the request's ForceAuth parameter.", "id": "36585"}
{"code": "public int availablePermits(){\n  return sync.getPermits();\n}\n", "nl": "Returns the current number of permits available in this semaphore. <p>This method is typically used for debugging and testing purposes.", "id": "16153"}
{"code": "public static AffinityControl newControl(final ByteString affinityValue,final boolean isCritical){\n  Reject.ifNull(affinityValue);\n  return new AffinityControl(affinityValue,isCritical);\n}\n", "nl": "Creates a new affinity control with provided value.", "id": "56579"}
{"code": "public void concatenate(SIPObjectList otherList){\n  super.concatenate(otherList);\n}\n", "nl": "Append a given list to the end of this list.", "id": "22875"}
{"code": "public boolean hasBeenExpanded(TreePath path){\n  return (path != null && expandedState.get(path) != null);\n}\n", "nl": "Returns true if the node identified by the path has ever been expanded.", "id": "29983"}
{"code": "public boolean isVerbose(){\n  return this.verbose;\n}\n", "nl": "Indicates whether the user has requested verbose mode.", "id": "43414"}
{"code": "public void addMonitorProvider(MonitorProvider<? extends MonitorProviderCfg> component){\nsynchronized (monitorProviders) {\n    if (!monitorProviders.contains(component)) {\n      monitorProviders.add(component);\n    }\n  }\n}\n", "nl": "Adds the given monitor provider to the set of components associated with this JMX MBean.", "id": "58187"}
{"code": "public void reset() throws IOException {\nsynchronized (lock) {\n    ensureOpen();\n    pos=markedPos;\n  }\n}\n", "nl": "Resets the stream to the most recent mark, or to the beginning if it has never been marked.", "id": "38738"}
{"code": "public void updateClientData() throws ClientException {\n}\n", "nl": "Reload all Client data.", "id": "52435"}
{"code": "@Override public boolean onCreateOptionsMenu(Menu menu){\n  menu.add(Menu.NONE,MENU_HELP,Menu.NONE,getString(R.string.help)).setIcon(android.R.drawable.ic_menu_help).setAlphabeticShortcut('h');\n  return super.onCreateOptionsMenu(menu);\n}\n", "nl": "Create an options menu", "id": "29593"}
{"code": "public String listSessionIds(){\n  StringBuilder sb=new StringBuilder();\n  Iterator<String> keys=sessions.keySet().iterator();\n  while (keys.hasNext()) {\n    sb.append(keys.next()).append(\" \");\n  }\n  return sb.toString();\n}\n", "nl": "For debugging.", "id": "11942"}
{"code": "private static final boolean compareAndSetNext(Node node,Node expect,Node update){\n  return unsafe.compareAndSwapObject(node,nextOffset,expect,update);\n}\n", "nl": "CAS next field of a node.", "id": "27855"}
{"code": "public static void sort(short[] a){\n  DualPivotQuicksort.sort(a,0,a.length - 1,null,0,0);\n}\n", "nl": "Sorts the specified array into ascending numerical order. <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "id": "8308"}
{"code": "public final AlgorithmParameters generateParameters(){\n  return paramGenSpi.engineGenerateParameters();\n}\n", "nl": "Generates the parameters.", "id": "4840"}
{"code": "void add(UpdateMsg update){\nsynchronized (msgQueue) {\n    if (msgQueue.isEmpty()) {\n      msgQueue.notify();\n    }\n    msgQueue.add(update);\n    while (isMsgQueueAboveThreshold()) {\n      following=false;\n      msgQueue.removeFirst();\n    }\n  }\n}\n", "nl": "Add an update to the list of updates that must be sent to the server managed by this Handler.", "id": "27969"}
{"code": "public boolean add(E e){\n  return offer(e);\n}\n", "nl": "Inserts the specified element into this delay queue.", "id": "32124"}
{"code": "public void evictAll() throws IOException {\n  cache.evictAll();\n}\n", "nl": "Deletes all values stored in the cache. In-flight writes to the cache will complete normally, but the corresponding responses will not be stored.", "id": "52179"}
{"code": "@Override public void toString(StringBuilder buffer){\n  buffer.append(\"JmxClientConnection(connID=\");\n  buffer.append(connectionID);\n  buffer.append(\", authDN=\\\"\");\n  buffer.append(getAuthenticationInfo().getAuthenticationDN());\n  buffer.append(\"\\\")\");\n}\n", "nl": "Appends a string representation of this client connection to the provided buffer.", "id": "37302"}
{"code": "public void add(E e){\n  throw new UnsupportedOperationException();\n}\n", "nl": "Not supported. Always throws UnsupportedOperationException.", "id": "50192"}
{"code": "public boolean isRelationship(){\n  return type == SchemaFieldType.RELATIONSHIP;\n}\n", "nl": "Returns a boolean indicating if the field is a relationship.", "id": "44490"}
{"code": "protected void callChildVisitors(XSLTVisitor visitor,boolean callAttributes){\n  for (ElemTemplateElement node=m_firstChild; node != null; node=node.m_nextSibling) {\n    node.callVisitors(visitor);\n  }\n}\n", "nl": "Call the children visitors.", "id": "21210"}
{"code": "public static ExecutorService newWorkStealingPool(int parallelism){\n  return new ForkJoinPool(parallelism,ForkJoinPool.defaultForkJoinWorkerThreadFactory,null,true);\n}\n", "nl": "Creates a thread pool that maintains enough threads to support the given parallelism level, and may use multiple queues to reduce contention. The parallelism level corresponds to the maximum number of threads actively engaged in, or available to engage in, task processing. The actual number of threads may grow and shrink dynamically. A work-stealing pool makes no guarantees about the order in which submitted tasks are executed.", "id": "24603"}
{"code": "public void removeUpdate(DocumentEvent e,Shape a,ViewFactory f){\n  if (isLoaded()) {\n    super.removeUpdate(e,a,f);\n  }\n}\n", "nl": "Gives notification that something was removed from the document in a location that this view is responsible for. If the zone has been loaded, the superclass behavior is invoked, otherwise this does nothing.", "id": "50412"}
{"code": "public static void main(String[] args){\n  OpenSSOConfigurator configurator=InjectorHolder.getInstance(OpenSSOConfigurator.class);\n  configurator.execute(args);\n}\n", "nl": "Starting point.", "id": "5358"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(documentcreateattributeNS05.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "21689"}
{"code": "public boolean canWriteCompressed(){\n  return canWriteCompressed;\n}\n", "nl": "Returns <code>true</code> if this writer supports compression.", "id": "13138"}
{"code": "public static void main(String[] args){\n  new UninstallLauncher(args).launch();\n}\n", "nl": "The main method which is called by the uninstall command lines.", "id": "22470"}
{"code": "protected static boolean isWhiteSpace(char ch){\n  if (ch > 0x20)   return false;\n  return ch == 0x9 || ch == 0xA || ch == 0xD || ch == 0x20;\n}\n", "nl": "returns true if the specified char is a white space character.", "id": "14381"}
{"code": "private void flushInternal() throws IOException {\n  if (pos > 0) {\n    out.write(buf,0,pos);\n  }\n  pos=0;\n}\n", "nl": "Flushes the internal buffer.", "id": "25115"}
{"code": "public boolean checkError(){\n  if (out != null) {\n    flush();\n  }\n  if (out instanceof java.io.PrintWriter) {\n    PrintWriter pw=(PrintWriter)out;\n    return pw.checkError();\n  }\n else   if (psOut != null) {\n    return psOut.checkError();\n  }\n  return trouble;\n}\n", "nl": "Flushes the stream if it's not closed and checks its error state.", "id": "48809"}
{"code": "@Override public void removeByField2(boolean field2){\n  for (  Foo foo : findByField2(field2,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {\n    remove(foo);\n  }\n}\n", "nl": "Removes all the foos where field2 = &#63; from the database.", "id": "53459"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.ModifyType createModifyType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.ModifyTypeImpl();\n}\n", "nl": "Create an instance of ModifyType", "id": "53727"}
{"code": "private int startOfWeekOffset(int day,int dow){\n  int weekStart=Math.floorMod(day - dow,7);\n  int offset=-weekStart;\n  if (weekStart + 1 > weekDef.getMinimalDaysInFirstWeek()) {\n    offset=7 - weekStart;\n  }\n  return offset;\n}\n", "nl": "Returns an offset to align week start with a day of month or day of year.", "id": "11882"}
{"code": "public MultipartBody build(){\n  if (parts.isEmpty()) {\n    throw new IllegalStateException(\"Multipart body must have at least one part.\");\n  }\n  return new MultipartBody(boundary,type,parts);\n}\n", "nl": "Assemble the specified parts into a request body.", "id": "1191"}
{"code": "public void iinc(final int local,final int amount){\n  mv.visitIincInsn(local,amount);\n}\n", "nl": "Generates the instruction to increment the given local variable.", "id": "53689"}
{"code": "public static void logDeleteRequest(DeleteOperation deleteOperation){\n  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {\n    publisher.logDeleteRequest(deleteOperation);\n  }\n}\n", "nl": "Writes a message to the access logger with information about the delete request associated with the provided delete operation.", "id": "4252"}
{"code": "@Override public void schemaChanged(String serviceName,String version){\n}\n", "nl": "No-op for this impl.", "id": "2932"}
{"code": "public static Long gauge32Value(Long V){\n  long v=V.longValue();\n  if (v > (pow(2,32) - 1)) {\n    return new Long(pow(2,32) - 1);\n  }\n else {\n    return V;\n  }\n}\n", "nl": "Latcher for SNMP Gauge32.", "id": "54159"}
{"code": "public Object clone(){\n  TelURLImpl retval=(TelURLImpl)super.clone();\n  if (this.telephoneNumber != null)   retval.telephoneNumber=(TelephoneNumber)this.telephoneNumber.clone();\n  return retval;\n}\n", "nl": "Deep copy clone operation.", "id": "5229"}
{"code": "public void closeAllSubpaths(){\n  for (  Subpath subpath : subpaths) {\n    subpath.setClosed(true);\n  }\n}\n", "nl": "Closes all subpathes contained in this path.", "id": "19367"}
{"code": "public org.omg.CORBA.TypeCode type(){\n  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"type\",_opsClass);\n  DynEnumOperations $self=(DynEnumOperations)$so.servant;\n  try {\n    return $self.type();\n  }\n  finally {\n    _servant_postinvoke($so);\n  }\n}\n", "nl": "Returns the TypeCode associated with this DynAny object. A DynAny object is created with a TypeCode value assigned to it. This TypeCode value determines the type of the value handled through the DynAny object. Note that the TypeCode associated with a DynAny object is initialized at the time the DynAny is created and cannot be changed during lifetime of the DynAny object.", "id": "28806"}
{"code": "public void startDocument() throws SAXException {\n  m_endDocumentOccured=false;\n  m_prefixMappings=new java.util.Vector();\n  m_contextIndexes=new IntStack();\n  m_parents=new IntStack();\n  m_currentDocumentNode=m_size;\n  super.startDocument();\n}\n", "nl": "Receive notification of the beginning of a new RTF document. %REVIEW% Y'know, this isn't all that much of a deoptimization. We might want to consider folding the start/endDocument changes back into the main SAX2DTM so we don't have to expose so many fields (even as Protected) and carry the additional code.", "id": "49232"}
{"code": "public void endElement(){\n  nss.popContext();\n}\n", "nl": "Ends the current element context and gets back to the parent context. This method should be called at the end of the endElement method of derived classes.", "id": "71"}
{"code": "public static boolean isXML11Valid(int c){\n  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);\n}\n", "nl": "Returns true if the specified character is valid. This method also checks the surrogate character range from 0x10000 to 0x10FFFF. <p> If the program chooses to apply the mask directly to the <code>XML11CHARS</code> array, then they are responsible for checking the surrogate character range.", "id": "26353"}
{"code": "public void position(final int pos){\n  if (pos > sequence.length() || pos < 0) {\n    throw new IndexOutOfBoundsException();\n  }\n  this.pos=pos;\n}\n", "nl": "Sets this reader's position.", "id": "41609"}
{"code": "public GenericObject first(){\n  return (NetObject)super.first();\n}\n", "nl": "returns the first element", "id": "45843"}
{"code": "private <T>Handler<AsyncResult<T>> resultHandler(RoutingContext context,Consumer<T> consumer){\n  return null;\n}\n", "nl": "Wrap the result handler with failure handler (503 Service Unavailable)", "id": "21147"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.MsgAccountElement createMsgAccountElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.MsgAccountElementImpl();\n}\n", "nl": "Create an instance of MsgAccountElement", "id": "49196"}
{"code": "boolean alwaysOnTop(){\n  return false;\n}\n", "nl": "Returns whether this component should be guaranteed to be on top. For example, it would make no sense for <code>Menu</code>s to pop up under another component, so they would always return true. Most components will want to return false, hence that is the default.", "id": "43124"}
{"code": "public static void doAsPrivilege(final String methodName,final Servlet targetObject,final Class<?>[] targetType,final Object[] targetArguments) throws Exception {\n  doAsPrivilege(methodName,targetObject,targetType,targetArguments,null);\n}\n", "nl": "Perform work as a particular <code>Subject</code>. Here the work will be granted to a <code>null</code> subject.", "id": "57654"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n}\n", "nl": "Ensures that the Directory Server is running.", "id": "12231"}
{"code": "public Iterator<E> iterator(){\n  return map.keySet().iterator();\n}\n", "nl": "Returns an iterator over the elements in this set. The elements are returned in no particular order.", "id": "52387"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.GivenNameElement createGivenNameElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.GivenNameElementImpl();\n}\n", "nl": "Create an instance of GivenNameElement", "id": "33163"}
{"code": "protected void handleIOException(IOException e) throws IOException {\n  throw e;\n}\n", "nl": "Handle any IOExceptions thrown. <p> This method provides a point to implement custom exception handling. The default behaviour is to re-throw the exception.", "id": "2170"}
{"code": "protected void paint(SynthContext context,Graphics g){\n  JSeparator separator=(JSeparator)context.getComponent();\n  context.getPainter().paintSeparatorForeground(context,g,0,0,separator.getWidth(),separator.getHeight(),separator.getOrientation());\n}\n", "nl": "Paints the specified component.", "id": "30107"}
{"code": "public void associateAsyncPrettyPrinterWithId(String requestId,AsyncPrettyPrinter asyncPrettyPrinter){\n  if (mRequestIdMap.put(requestId,asyncPrettyPrinter) != null) {\n    throw new IllegalArgumentException(\"cannot associate different \" + \"pretty printers with the same request id: \" + requestId);\n  }\n}\n", "nl": "Associates an asynchronous pretty printer with a response request id The pretty printer will be used to pretty print the response body that has the particular request id", "id": "2236"}
{"code": "protected void sendMessage(Session session,ClusterManager manager){\n  String id=session.getIdInternal();\n  if (id != null) {\n    send(manager,id);\n  }\n}\n", "nl": "Send message delta message from request session", "id": "11764"}
{"code": "private void handlePossibleCancellationInterrupt(int s){\n  if (s == INTERRUPTING)   while (state == INTERRUPTING)   Thread.yield();\n}\n", "nl": "Ensures that any interrupt from a possible cancel(true) is only delivered to a task while in run or runAndReset.", "id": "7987"}
{"code": "public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  doGetPost(request,response);\n}\n", "nl": "Handles the HTTP POST request.", "id": "45431"}
{"code": "public boolean trace_tails_in_shape(){\n  return shape_contains_trace_tails;\n}\n", "nl": "Looks if an unconnected endpoint of a trace of a foreign net is contained in the interiour of the shape.", "id": "20209"}
{"code": "static public void assertFalse(String message,boolean condition){\n  assertTrue(message,!condition);\n}\n", "nl": "Asserts that a condition is false. If it isn't it throws an AssertionFailedError with the given message.", "id": "42059"}
{"code": "public com.sun.identity.liberty.ws.meta.jaxb.AffiliationDescriptorType createAffiliationDescriptorType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.meta.jaxb.impl.AffiliationDescriptorTypeImpl();\n}\n", "nl": "Create an instance of AffiliationDescriptorType", "id": "49071"}
{"code": "public NodeIterator selectNodeIterator(Node contextNode,String str,Node namespaceNode) throws TransformerException {\n  XObject list=eval(contextNode,str,namespaceNode);\n  return list.nodeset();\n}\n", "nl": "Use an XPath string to select a nodelist. XPath namespace prefixes are resolved from the namespaceNode.", "id": "18020"}
{"code": "public static String lowerFirst(final String input) throws IllegalArgumentException {\n  if (input == null) {\n    throw new IllegalArgumentException(\"input can't be null\");\n  }\n  if (input.length() == 0) {\n    return \"\";\n  }\n  return head(input).map(null).map(null).get();\n}\n", "nl": "Converts the first character of string to lower case.", "id": "33175"}
{"code": "public boolean startsWith(String prefix){\n  return m_str.startsWith(prefix);\n}\n", "nl": "Tests if this string starts with the specified prefix.", "id": "10271"}
{"code": "private static boolean isTainted(Collection<?> c){\n  try {\n    checkTypeSafe(c);\n  }\n catch (  IllegalArgumentException e) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Returns true if c contains any non-Role objects.", "id": "21971"}
{"code": "public void removeSession(Session session){\n  SingleSignOnSessionKey key=new SingleSignOnSessionKey(session);\n  sessionKeys.remove(key);\n}\n", "nl": "Removes the given <code>Session</code> from the list of those associated with this SSO.", "id": "28538"}
{"code": "@Override public Response<DirectionsResponse> executeCall() throws IOException {\n  return getCall().execute();\n}\n", "nl": "Execute the call", "id": "25580"}
{"code": "public boolean equalsTo(MultiDomainServerState other){\n  return cover(other) && other.cover(this);\n}\n", "nl": "Test if this object equals the provided other object.", "id": "43175"}
{"code": "@SuppressWarnings(\"unused\") public boolean hasChangingColor(){\n  return items[0].hasColor();\n}\n", "nl": "Returns true if the first item of the menu has a color defined", "id": "57923"}
{"code": "@Override public void invalidateSession(){\n  session.invalidate();\n}\n", "nl": "Invalidate the session this support object is associated with.", "id": "27080"}
{"code": "public static Intent buildTerminalShortcutIntent(File script,Parcelable iconResource){\n  Intent intent=new Intent();\n  intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,buildStartInTerminalIntent(script));\n  intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,script.getName());\n  intent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,iconResource);\n  return intent;\n}\n", "nl": "Builds an intent that creates a shortcut to launch the provided script in a terminal.", "id": "57222"}
{"code": "@Override public int border_line_count(){\n  return lines_size();\n}\n", "nl": "Returns the number of edge lines defining this simplex", "id": "57152"}
{"code": "public static NSObject parse(final byte[] bytes) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {\n  ByteArrayInputStream bis=new ByteArrayInputStream(bytes);\n  return parse(bis);\n}\n", "nl": "Parses a XML property list from a byte array.", "id": "12016"}
{"code": "public boolean mustCheckUnsavedChanges(){\n  return false;\n}\n", "nl": "Method used to know if there are unsaved changes or not.  It is used by the schema selection listener when the user changes the selection.", "id": "52039"}
{"code": "public static void closeSession() throws HibernateException {\n  Session session=(Session)threadLocal.get();\n  threadLocal.set(null);\n  if (session != null) {\n    session.close();\n  }\n}\n", "nl": "Close the single hibernate session instance.", "id": "28040"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationMethodType createAuthenticationMethodType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticationMethodTypeImpl();\n}\n", "nl": "Create an instance of AuthenticationMethodType", "id": "8243"}
{"code": "public void endDocument() throws SAXException {\n}\n", "nl": "Receive notification of the end of the document. <p>By default, do nothing.  Application writers may override this method in a subclass to take specific actions at the beginning of a document (such as finalising a tree or closing an output file).</p>", "id": "29882"}
{"code": "public static String stackTraceToSingleLineString(Throwable t){\n  return com.forgerock.opendj.util.StaticUtils.stackTraceToSingleLineString(t,DynamicConstants.DEBUG_BUILD);\n}\n", "nl": "Retrieves a stack trace from the provided exception as a single-line string.", "id": "42155"}
{"code": "public Scanner skip(String pattern){\n  return skip(patternCache.forName(pattern));\n}\n", "nl": "Skips input that matches a pattern constructed from the specified string. <p> An invocation of this method of the form <tt>skip(pattern)</tt> behaves in exactly the same way as the invocation <tt>skip(Pattern.compile(pattern))</tt>.", "id": "20365"}
{"code": "public boolean isUsable(){\n  return isUsable;\n}\n", "nl": "Indicates whether the associated user account is available for use.", "id": "14165"}
{"code": "public static void appendInt(AbstractStringBuilder sb,int i){\n  convertInt(sb,i);\n}\n", "nl": "Equivalent to sb.append(Integer.toString(i)).", "id": "6055"}
{"code": "private ResourceException generateNotFoundException(String tokenId){\n  return new NotFoundException(\"Token \" + tokenId + \" not found\");\n}\n", "nl": "Handle the non recoverable error of the Token not found.", "id": "6537"}
{"code": "public static String stackTraceToSingleLineString(Throwable throwable,boolean isFullStack){\n  StringBuilder buffer=new StringBuilder();\n  stackTraceToSingleLineString(buffer,throwable,isFullStack);\n  return buffer.toString();\n}\n", "nl": "Retrieves a stack trace from the provided exception as a single-line string.", "id": "40394"}
{"code": "void updateAttributeVisibility(){\n  dataArray.clear();\n  for (  AttributeValuePair value : allSortedValues) {\n    if (!showOnlyAttrsWithValues.isSelected() || isRequired(value) || hasValue(value)) {\n      dataArray.add(value);\n    }\n  }\n  fireTableDataChanged();\n  Utilities.updateTableSizes(table);\n  Utilities.updateScrollMode(scroll,table);\n}\n", "nl": "Checks if we have to display all the attributes or only those that contain a value and updates the contents of the model accordingly.  Note that even if the required attributes have no value they will be displayed.", "id": "28438"}
{"code": "public void addSubject(String subjectName,Subject subject) throws NameAlreadyExistsException {\n  addSubject(subjectName,subject,false);\n}\n", "nl": "Adds a <code>Subject</code> object to the this instance of user collection. If another subject with the same name already exists in the user collection <code>NameAlreadyExistsException</code> will be thrown. The subject is added as a normal (non exclusive) subject. So, policy will apply to members of the subject.", "id": "42066"}
{"code": "public void unassignPolicies(String serviceName,Set policyDNs) throws AMException, SSOException {\n  unassignPolicies(serviceName,policyDNs,true);\n}\n", "nl": "Unassigns the given policies from this object.", "id": "57489"}
{"code": "public void addNode(Node n){\n  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));\n  this.addElement(n);\n}\n", "nl": "Add a node to the NodeSet. Not all types of NodeSets support this operation", "id": "8843"}
{"code": "static String handleIllegalCharacterInResult(final String result){\n  String tempResult=result;\n  if (tempResult != null && tempResult.contains(\" \")) {\n    tempResult=tempResult.replaceAll(\" \",\"_\");\n  }\n  return tempResult;\n}\n", "nl": "Handle illegal character in result string.", "id": "1507"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(documentimportnode10.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "14605"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(notationgetpublicid.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "58415"}
{"code": "public boolean removeAttribute(AttributeType attributeType){\n  attachment=null;\n  if (attributeType.isObjectClass()) {\n    objectClasses.clear();\n    return true;\n  }\n  return userAttributes.remove(attributeType) != null || operationalAttributes.remove(attributeType) != null;\n}\n", "nl": "Removes all instances of the specified attribute type from this entry, including any instances with options. If the provided attribute type is the objectclass type, then all objectclass values will be removed (but must be replaced for the entry to be valid). If the specified attribute type is not present in this entry, then this method will have no effect.", "id": "11230"}
{"code": "public boolean valueMatches(AttributeType type,ByteString value){\n  for (  MatchedValuesFilter f : filters) {\n    try {\n      if (f.valueMatches(type,value)) {\n        return true;\n      }\n    }\n catch (    Exception e) {\n      logger.traceException(e);\n    }\n  }\n  return false;\n}\n", "nl": "Indicates whether any of the filters associated with this matched values control matches the provided attribute type/value.", "id": "45627"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(importNode15.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "31374"}
{"code": "private String removeSchemeEnsureSlash(String url){\n  String part=url.substring(url.indexOf(SCHEME_DELIMITER) + SCHEME_DELIMITER.length());\n  if (!part.contains(SLASH)) {\n    return part + SLASH;\n  }\n  return part;\n}\n", "nl": "Removes the scheme, appends a slash if the resource contains a port.", "id": "53365"}
{"code": "public boolean isServiceVisible(String serviceName){\n  return !CollectionUtils.isEmpty(hiddenServices) && !hiddenServices.contains(serviceName);\n}\n", "nl": "Returns true if the provided service name is not in the list of hidden services.", "id": "50396"}
{"code": "public static void registerShutdownListener(ServerShutdownListener listener){\n  DirectoryServer.registerShutdownListener(listener);\n}\n", "nl": "Registers the provided shutdown listener with the Directory Server so that it will be notified when the server shuts down.", "id": "40742"}
{"code": "protected int processChar(){\n  return 0;\n}\n", "nl": "Return a character value for the  <code>read()</code> method. <p> This implementation returns zero.", "id": "16250"}
{"code": "public boolean isBound(){\n  return bound || oldImpl;\n}\n", "nl": "Returns the binding state of the ServerSocket.", "id": "29941"}
{"code": "public void addEventChargingFunctionAddress(String ecfAddress) throws ParseException {\n  if (ecfAddress == null)   throw new NullPointerException(\"JAIN-SIP Exception, \" + \"P-Charging-Function-Addresses, setEventChargingFunctionAddress(), the ecfAddress parameter is null.\");\n  this.parameters.set(ParameterNamesIms.ECF,ecfAddress);\n}\n", "nl": "<p>Add another Event Charging Function (ECF) Address to this header</p>", "id": "23010"}
{"code": "boolean noSchemaReplication(){\n  return noSchemaReplicationArg.isPresent();\n}\n", "nl": "Returns whether the user asked to not replicate the schema between servers.", "id": "57255"}
{"code": "public TelURLImpl telURL(boolean inBrackets) throws ParseException {\n  lexer.match(TokenTypes.TEL);\n  lexer.match(':');\n  TelephoneNumber tn=this.parseTelephoneNumber(inBrackets);\n  TelURLImpl telUrl=new TelURLImpl();\n  telUrl.setTelephoneNumber(tn);\n  return telUrl;\n}\n", "nl": "Parse and return a structure for a Tel URL.", "id": "14101"}
{"code": "public static int hashIntArray(int[] array){\n  int intHash=0;\n  for (int i=0; i < array.length && i < 4; i++) {\n    intHash+=array[i] << (8 * i);\n  }\n  return intHash & 0x7FFFFFFF;\n}\n", "nl": "Returns hash code for array of integers", "id": "13355"}
{"code": "public void refresh(){\n}\n", "nl": "Refresh the displayed values in this window.  To be overwritten where needed in derived classes.", "id": "21338"}
{"code": "public boolean isECLEnabled(){\n  return MultimasterReplication.isECLEnabled();\n}\n", "nl": "Returns whether the external change-log contains data from at least a domain.", "id": "10671"}
{"code": "public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){\n  if (cv != null) {\n    cv.visit(version,access,name,signature,superName,interfaces);\n  }\n}\n", "nl": "Visits the header of the class.", "id": "45548"}
{"code": "public void paste(){\n  if (isEditable() && isEnabled()) {\n    invokeAction(\"paste\",TransferHandler.getPasteAction());\n  }\n}\n", "nl": "Transfers the contents of the system clipboard into the associated text model.  If there is a selection in the associated view, it is replaced with the contents of the clipboard.  If there is no selection, the clipboard contents are inserted in front of the current insert position in the associated view.  If the clipboard is empty, does nothing.", "id": "29539"}
{"code": "void markInProgress(LDAPUpdateMsg msg){\n  remotePendingChanges.markInProgress(msg);\n}\n", "nl": "Marks the specified message as the one currently processed by a replay thread.", "id": "15336"}
{"code": "@Override public void onSupportActionModeStarted(@NonNull final ActionMode mode){\n  super.onSupportActionModeStarted(mode);\n}\n", "nl": "Notifies the Activity that a support action mode has been started. Activity subclasses overriding this method should call the superclass implementation.", "id": "15043"}
{"code": "public boolean name_exists(String p_name){\n  for (  BrdViaInfo curr_via : vinfo_list) {\n    if (curr_via.get_name().equals(p_name))     return true;\n  }\n  return false;\n}\n", "nl": "Returns true, if a via info with name p_name is already wyisting in the list.", "id": "11501"}
{"code": "public static <T>Set<T> asSet(T... values){\n  if (values == null) {\n    return new HashSet<T>(0);\n  }\n else {\n    return new HashSet<T>(Arrays.asList(values));\n  }\n}\n", "nl": "Collects the passed in objects into an unordered Set.", "id": "52996"}
{"code": "static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {\n  return createObject(factoryId,null,fallbackClassName);\n}\n", "nl": "Finds the implementation Class object in the specified order.  The specified order is the following: <ol> <li>query the system property using <code>System.getProperty</code> <li>read <code>META-INF/services/<i>factoryId</i></code> file <li>use fallback classname </ol>", "id": "26082"}
{"code": "public void interruptWaiters(final Condition condition){\n  final Collection<Thread> threads=getWaitingThreads(condition);\n  for (  final Thread thread : threads) {\n    thread.interrupt();\n  }\n}\n", "nl": "Interrupt the threads that are waiting on a specific condition", "id": "26011"}
{"code": "private void twoTasksLoadCallsToRepository(TasksDataSource.LoadTasksCallback callback){\n  mTasksRepository.getTasks(callback);\n  verify(mTasksLocalDataSource).getTasks(mTasksCallbackCaptor.capture());\n  mTasksCallbackCaptor.getValue().onDataNotAvailable();\n  verify(mTasksRemoteDataSource).getTasks(mTasksCallbackCaptor.capture());\n  mTasksCallbackCaptor.getValue().onTasksLoaded(TASKS);\n  mTasksRepository.getTasks(callback);\n}\n", "nl": "Convenience method that issues two calls to the tasks repository", "id": "51715"}
{"code": "private static boolean isJRE11(){\n  try {\n    Class c=Class.forName(\"java.security.AccessController\");\n    return false;\n  }\n catch (  Exception ex) {\n  }\n  return true;\n}\n", "nl": "A simple JRE (Java Runtime Environment) 1.1 test", "id": "31263"}
{"code": "protected boolean isDynamicalOrIgnoredProfile(String realm){\n  return true;\n}\n", "nl": "Checks if dynamical profile creation or ignore profile is enabled.", "id": "36177"}
{"code": "private void initReader() throws IOException {\n  long syncPos=trackerFile.length() - 256L;\n  if (syncPos < 0)   syncPos=0L;\n  reader.sync(syncPos);\n  while (reader.hasNext()) {\n    reader.next(metaCache);\n  }\n}\n", "nl": "Read the last record in the file.", "id": "33858"}
{"code": "@AfterMethod(alwaysRun=true) public void reenableBackend() throws DirectoryException {\n  Backend<?> b=DirectoryServer.getBackend(DN.valueOf(\"o=test\"));\n  b.setWritabilityMode(WritabilityMode.ENABLED);\n}\n", "nl": "Some of the tests disable the backends, so we reenable them here.", "id": "54050"}
{"code": "void move(int touchX,int touchY){\n  setTranslationX(touchX - mRegistrationX + (int)mOffsetX);\n  setTranslationY(touchY - mRegistrationY + (int)mOffsetY);\n}\n", "nl": "Move the window containing this view.", "id": "20413"}
{"code": "public int hashCode(){\n  if (hashCodeCache == 0) {\n    ensureCache();\n    hashCodeCache=textLine.hashCode();\n  }\n  return hashCodeCache;\n}\n", "nl": "Returns the hash code of this <code>TextLayout</code>.", "id": "38148"}
{"code": "public String toString(){\n  return this.encode();\n}\n", "nl": "ALias for encode above.", "id": "20014"}
{"code": "public static Color fromRGB(int rgb) throws IllegalArgumentException {\n  Validate.isTrue((rgb >> 24) == 0,\"Extrenuous data in: \",rgb);\n  return fromRGB(rgb >> 16 & BIT_MASK,rgb >> 8 & BIT_MASK,rgb >> 0 & BIT_MASK);\n}\n", "nl": "Creates a new color object from an integer that contains the red, green, and blue bytes in the lowest order 24 bits.", "id": "34569"}
{"code": "private static String makeDNFromServerGroupProperties(Map<ServerGroupProperty,Object> serverGroupProperties) throws ADSContextException {\n  String serverGroupId=(String)serverGroupProperties.get(ServerGroupProperty.UID);\n  if (serverGroupId == null) {\n    throw new ADSContextException(ErrorType.MISSING_NAME);\n  }\n  return \"cn=\" + Rdn.escapeValue(serverGroupId) + \",\"+ getServerGroupContainerDN();\n}\n", "nl": "This method returns the DN of the entry that corresponds to the given server group properties.", "id": "24700"}
{"code": "private Object writeReplace(){\n  return new Ser(Ser.JAPANESE_ERA_TYPE,this);\n}\n", "nl": "Writes the object using a <a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.", "id": "9336"}
{"code": "public long skip(long n) throws IOException {\n  long nr=in.skip(n);\n  if (nr > 0)   monitor.setProgress(nread+=nr);\n  return nr;\n}\n", "nl": "Overrides <code>FilterInputStream.skip</code> to update the progress monitor after the skip.", "id": "21658"}
{"code": "@Override public int hashCode(){\n  return (state != null) ? state.hashCode() : super.hashCode();\n}\n", "nl": "Return a hash code for this <code>AuthenticatedUsers</code>.", "id": "29963"}
{"code": "public void allow(){\n  result=Result.ALLOWED;\n  message=\"\";\n}\n", "nl": "Allows the player to log in", "id": "45687"}
{"code": "private Instruction insertOrReplaceInstruction(Instruction instruction) throws JavaSpecificationViolation {\n  if (GetGraphicsParser.handles(instruction))   return addLoadAndTraceInstructions(EventKind.GETGRAPHICS,true);\n else   if (CreateGraphicsParser.handles(instruction))   return addLoadAndTraceInstructions(EventKind.CREATEGRAPHICS,true);\n else {\n    instructions.add(instruction);\n    return null;\n  }\n}\n", "nl": "Here we either insert the original instruction into the new instruction sequence, or we replace it with a call to an instrumenting method.", "id": "44074"}
{"code": "public String toStringImpl(){\n  return new StringBuilder().append(compression).toString();\n}\n", "nl": "Used by super class to log the attribute's contents when packet logging is enabled.", "id": "3108"}
{"code": "protected HttpURLConnection createPost(String uri) throws IOException {\n  return createConnection(uri,METHOD_POST);\n}\n", "nl": "Create a POST request connection to the URI", "id": "3880"}
{"code": "public void replaceShutdownListener(ShutdownListener oldListener,ShutdownListener newListener,ShutdownPriority priority){\n  if (acquireValidLock()) {\n    try {\n      removeShutdownListener(oldListener);\n      if (priority == null) {\n        addShutdownListener(newListener);\n      }\n else {\n        addShutdownListener(newListener,priority);\n      }\n    }\n  finally {\n      releaseLockAndNotify();\n    }\n  }\n else {\n    throw new IllegalMonitorStateException(\"Failed to acquire lock replacing the ShutdownListener\");\n  }\n}\n", "nl": "Replaces an existing ShutdownListener with the new ShutdownListener.", "id": "27732"}
{"code": "private void initClusterMemberMap() throws Exception {\n  Set<String> serverIDs=serverConfig.getServerIDsInLocalSite();\n  for (  String serverID : serverIDs) {\n    String serverURL=serverConfig.getServerFromID(serverID);\n    if ((serverID == null) || (serverURL == null)) {\n      continue;\n    }\n    clusterMemberMap.putIfAbsent(serverURL,serverID);\n  }\n}\n", "nl": "Initialize the cluster server map given the server IDs in Set (AM70).", "id": "10307"}
{"code": "@Override public void flush(){\n}\n", "nl": "Flush this Writer. This is the concrete implementation required. This particular implementation does nothing.", "id": "44356"}
{"code": "public static int countByUUID_G(java.lang.String uuid,long groupId){\n  return getPersistence().countByUUID_G(uuid,groupId);\n}\n", "nl": "Returns the number of foos where uuid = &#63; and groupId = &#63;.", "id": "30540"}
{"code": "public PAssociatedURIHeader createPAssociatedURIHeader(Address assocURI){\n  if (assocURI == null)   throw new NullPointerException(\"null associatedURI!\");\n  PAssociatedURI associatedURI=new PAssociatedURI();\n  associatedURI.setAddress(assocURI);\n  return associatedURI;\n}\n", "nl": "Creates a new P-Associated-URI header based on the supplied address", "id": "42794"}
{"code": "public boolean canRedo(){\n  return alive && !hasBeenDone;\n}\n", "nl": "Returns <code>true</code> if this edit is <code>alive</code> and <code>hasBeenDone</code> is <code>false</code>.", "id": "13662"}
{"code": "public Builder names(final String... names){\n  return names(Arrays.asList(names));\n}\n", "nl": "Adds the provided user friendly names.", "id": "21056"}
{"code": "public static byte[] decodeStringContent(byte[] content,boolean hexWriting){\n  return decodeStringContent(content,0,content.length - 1,hexWriting);\n}\n", "nl": "Resolve escape symbols or hexadecimal symbols. <p/> NOTE Due to PdfReference 1.7 part 3.2.3 String value contain ASCII characters, so we can convert it directly to byte array.", "id": "54494"}
{"code": "public com.sun.identity.saml2.jaxb.xmlsig.TransformType.XPath createTransformTypeXPath() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlsig.impl.TransformTypeImpl.XPathImpl();\n}\n", "nl": "Create an instance of TransformTypeXPath", "id": "42517"}
{"code": "public static int countByUuid_C(java.lang.String uuid,long companyId){\n  return getPersistence().countByUuid_C(uuid,companyId);\n}\n", "nl": "Returns the number of foos where uuid = &#63; and companyId = &#63;.", "id": "8920"}
{"code": "@Override public short shortValue(){\n  return value;\n}\n", "nl": "Gets the primitive value of this short.", "id": "21483"}
{"code": "private void readLyrics3Tag(File file,RandomAccessFile newFile,int loadOptions) throws IOException {\n}\n", "nl": "Read lyrics3 Tag TODO:not working", "id": "54324"}
{"code": "public NSObject put(String key,Object obj){\n  return put(key,NSObject.wrap(obj));\n}\n", "nl": "Puts a new key-value pair into this dictionary. If key or value are null, no operation will be performed on the dictionary.", "id": "58636"}
{"code": "public static void registerAlertGenerator(AlertGenerator alertGenerator){\n  DirectoryServer.registerAlertGenerator(alertGenerator);\n}\n", "nl": "Registers the provided alert generator with the Directory Server.", "id": "11996"}
{"code": "public boolean isArray(){\n  return isArray;\n}\n", "nl": "Returns a boolean indicating if the field is an array.", "id": "9323"}
{"code": "public boolean keepProcessingLine(){\n  return keepProcessingLine;\n}\n", "nl": "Indicates whether to continue processing for the current line.  If this is <CODE>false</CODE>, then the current line will not be included in the entry.  It will have no impact on whether the entry itself is included in the generated LDIF.", "id": "48890"}
{"code": "protected void release(){\n}\n", "nl": "Release lock for in/out messages election is completed", "id": "1136"}
{"code": "static byte[] rawKey(Class requester,String key){\n  return hash(getUTF8Bytes(requester.getName() + \"/\" + key));\n}\n", "nl": "Calculate raw key", "id": "56151"}
{"code": "@DataProvider private static Object[][] okResourceResponses(){\n  return new Object[][]{{new Response(OK)},{new Response(FOUND)},{new Response(MOVED_PERMANENTLY)},{new Response(CREATED)}};\n}\n", "nl": "All successful responses are returned without any process. (not a 5xx Server Error or a 4xx Client Error)", "id": "13066"}
{"code": "private void copyPlugins(final List<PluginInfo> plugins2){\n  for (  PluginInfo pluginInfo : this.plugins) {\n    plugins2.add(new PluginInfo(pluginInfo));\n  }\n}\n", "nl": "copy plugins for new configuration.", "id": "32883"}
{"code": "public boolean isAllowed(SSOToken token,Map env) throws PolicyException, SSOException {\n  return getConditionDecision(token,env).isAllowed();\n}\n", "nl": "Checks whether the effective result of conditions is an allow or deny.   The effective result is an allow only if each condition type of this contraint collection evaluates to allow, for the environment parameters passed in env.  When there are multiple condition elements in the  conditions collection, the condition evaluation logic does a  logical or for the condition elements of the same type and does a  logical and between sets of condition elements of different condition types", "id": "13429"}
{"code": "@Override protected void doCatch(Throwable throwable){\n  exceptionHandler.handle(throwable,getResponse());\n}\n", "nl": "Handles any exception that is thrown when processing a OAuth2 authorization request.", "id": "23063"}
{"code": "public E peek(){\n  if (isEmpty()) {\n    return null;\n  }\n  return elements[0];\n}\n", "nl": "Gets but does not remove the head of the queue.", "id": "48932"}
{"code": "protected MouseMotionListener createMouseMotionListener(){\n  return getHandler();\n}\n", "nl": "Creates the mouse motion listener which will be added to the combo box. <strong>Warning:</strong> When overriding this method, make sure to maintain the existing behavior.", "id": "34285"}
{"code": "@Override public void removeLifecycleListener(LifecycleListener listener){\n}\n", "nl": "Remove a lifecycle event listener from this component.", "id": "43971"}
{"code": "@Override public int read() throws IOException {\n  if (eof) {\n    throw new IOException(\"Read after end of file\");\n  }\n  if (position == size) {\n    return doEndOfFile();\n  }\n  position++;\n  return processChar();\n}\n", "nl": "Read a character.", "id": "32062"}
{"code": "public boolean isServicesSupported(){\n  return isServicesSupported;\n}\n", "nl": "Returns <code>true</code> if services is supported for the identity.", "id": "20629"}
{"code": "private boolean simulateEntryAdd(Entry entry,ConfigurationRepository configRepository) throws IOException {\n  ArgumentCaptor<ConfigAddListener> registeredListener=ArgumentCaptor.forClass(ConfigAddListener.class);\n  verify(configRepository).registerAddListener(eq(entry.getName().parent()),registeredListener.capture());\n  return registeredListener.getValue().configAddIsAcceptable(entry,new LocalizableMessageBuilder());\n}\n", "nl": "Simulate an entry add by triggering configAddIsAcceptable method of last registered add listener.", "id": "42027"}
{"code": "public synchronized int read(){\n  return (pos < count) ? (buffer.charAt(pos++) & 0xFF) : -1;\n}\n", "nl": "Reads the next byte of data from this input stream. The value byte is returned as an <code>int</code> in the range <code>0</code> to <code>255</code>. If no byte is available because the end of the stream has been reached, the value <code>-1</code> is returned. <p> The <code>read</code> method of <code>StringBufferInputStream</code> cannot block. It returns the low eight bits of the next character in this input stream's buffer.", "id": "12264"}
{"code": "public void appendCell(int value){\n  appendCell(String.valueOf(value));\n}\n", "nl": "Appends a new cell to the current row containing the provided integer value.", "id": "22629"}
{"code": "final long fullyRelease(Node node){\n  boolean failed=true;\n  try {\n    long savedState=getState();\n    if (release(savedState)) {\n      failed=false;\n      return savedState;\n    }\n else {\n      throw new IllegalMonitorStateException();\n    }\n  }\n  finally {\n    if (failed)     node.waitStatus=Node.CANCELLED;\n  }\n}\n", "nl": "Invokes release with current state value; returns saved state. Cancels node and throws exception on failure.", "id": "27513"}
{"code": "public boolean addElement(Object key){\n  return false;\n}\n", "nl": "Not implemented in this monitor. Always returns false.", "id": "40021"}
{"code": "public final void pushSubContextList(SubContextList iter){\n  m_axesIteratorStack.push(iter);\n}\n", "nl": "Push a TreeWalker on the stack.", "id": "18709"}
{"code": "@Override protected void dispatchDraw(Canvas canvas){\n  canvas.clipRect(mBackgroundPadding.left,mBackgroundPadding.top,getWidth() - mBackgroundPadding.right,getHeight() - mBackgroundPadding.bottom);\n  super.dispatchDraw(canvas);\n}\n", "nl": "We need to override the draw to ensure that we don't draw the overscroll effect beyond the background bounds.", "id": "55533"}
{"code": "public void stopAnalysis(final MetricReference metricReference){\n  final TImeMetricInfo statInfo=metricStatisticsMap.get(metricReference);\n  if (statInfo.task != null) {\n    statInfo.task.cancel();\n    statInfo.task=null;\n  }\n}\n", "nl": "Stop the analysis for a given metric, the analysis periodic job will be stopped and stack traces will no longer be produced.", "id": "10442"}
{"code": "public void addAttributes(AttributeSet attributes){\n  Enumeration names=attributes.getAttributeNames();\n  while (names.hasMoreElements()) {\n    Object name=names.nextElement();\n    addAttribute(name,attributes.getAttribute(name));\n  }\n}\n", "nl": "Adds a set of attributes to the list.", "id": "30736"}
{"code": "public static Integer toInteger(String str){\n  try {\n    return Integer.valueOf(str);\n  }\n catch (  Exception ex) {\n    return null;\n  }\n}\n", "nl": "Casts string to integer or returns null if value is not integer", "id": "1604"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodegetnamespaceuri03.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "33492"}
{"code": "public void incrementCount(){\n  filesPerKeystoreCounter++;\n}\n", "nl": "Increment the current count of the archival.", "id": "51469"}
{"code": "private HttpServletRequest _getHttpServletRequest(){\n  return (HttpServletRequest)super.getRequest();\n}\n", "nl": "Retrieves a reference to the internal request.", "id": "53999"}
{"code": "public boolean isCombineAgentType(String type){\n  return combineAgent.keySet().contains(type);\n}\n", "nl": "Returns <code>ture</code> if combined agent type.", "id": "25210"}
{"code": "boolean isLiteral(int index){\n  if (isValidMask() && index < string.length()) {\n    return literalMask.get(index);\n  }\n  return false;\n}\n", "nl": "Returns true if the character at index is a literal, that is not editable.", "id": "49235"}
{"code": "public boolean enableGrpcStreaming(){\n  return false;\n}\n", "nl": "Returns true if streaming APIs are supported.", "id": "51088"}
{"code": "public Helper linkify(int viewId){\n  TextView view=retrieveView(viewId);\n  Linkify.addLinks(view,Linkify.ALL);\n  return this;\n}\n", "nl": "Add links into a TextView.", "id": "21377"}
{"code": "protected void handleALL_SESSION_TRANSFERCOMPLETE(SessionMessage msg,Member sender){\n  counterReceive_EVT_ALL_SESSION_TRANSFERCOMPLETE++;\n  if (log.isDebugEnabled()) {\n    log.debug(sm.getString(\"deltaManager.receiveMessage.transfercomplete\",getName(),sender.getHost(),Integer.valueOf(sender.getPort())));\n  }\n  stateTransferCreateSendTime=msg.getTimestamp();\n  stateTransfered=true;\n}\n", "nl": "handle receive session state is complete transfered", "id": "57067"}
{"code": "@Override protected boolean doDelete(File fileToDelete) throws IOException {\n  FileUtils.forceDelete(fileToDelete);\n  return true;\n}\n", "nl": "Deletes the file object. <p> This implementation uses <code>FileUtils.forceDelete() <code> if the file exists.", "id": "58413"}
{"code": "public Dictionary<String,Object> encrypt(String pidOrFactory,String instanceAlias,Dictionary<String,Object> config) throws InvalidException, InternalErrorException, WaitForMetaData {\n  JsonValue parsed=parse(config,pidOrFactory);\n  return encrypt(pidOrFactory,instanceAlias,config,parsed);\n}\n", "nl": "Encrypt properties in the configuration if necessary Also results in pretty print formatting of the JSON configuration.", "id": "56058"}
{"code": "public void schedule(TimerTask task,Date time){\n  sched(task,time.getTime(),0);\n}\n", "nl": "Schedules the specified task for execution at the specified time.  If the time is in the past, the task is scheduled for immediate execution.", "id": "11548"}
{"code": "public boolean validate(){\n  boolean result=search_graph.anchor.validate();\n  if (result == true) {\n    System.out.println(\"Delauny triangulation check passed ok\");\n  }\n else {\n    System.out.println(\"Delauny triangulation check has detected problems\");\n  }\n  return result;\n}\n", "nl": "Checks the consistancy of the triangles in this triagulation. Used for debugging purposes.", "id": "56473"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsfederation.TokenTypesOfferedElement createTokenTypesOfferedElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.TokenTypesOfferedElementImpl();\n}\n", "nl": "Create an instance of TokenTypesOfferedElement", "id": "21564"}
{"code": "public static boolean isIdeographic(int codePoint){\n  return CharacterData.of(codePoint).isIdeographic(codePoint);\n}\n", "nl": "Determines if the specified character (Unicode code point) is a CJKV (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by the Unicode Standard.", "id": "3102"}
{"code": "public int signum(){\n  return this.signum;\n}\n", "nl": "Returns the signum function of this BigInteger.", "id": "27371"}
{"code": "@Override public void addPropertyChangeListener(PropertyChangeListener listener){\n  support.addPropertyChangeListener(listener);\n}\n", "nl": "Add a property change listener to this component.", "id": "51772"}
{"code": "public static void logSearchResultReference(SearchOperation searchOperation,SearchResultReference searchReference){\n  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {\n    publisher.logSearchResultReference(searchOperation,searchReference);\n  }\n}\n", "nl": "Writes a message to the access logger with information about the search result reference returned while processing the associated search operation.", "id": "29870"}
{"code": "public static void load(List<LicenseEntry> entries){\n  new LoadLicenseTask().execute(entries.toArray(new LicenseEntry[entries.size()]));\n}\n", "nl": "Load provided licenses", "id": "19295"}
{"code": "public void write(ByteArrayOutputStream tagBuffer){\n  if (!((AbstractString)getObject(DataTypes.OBJ_DESCRIPTION)).canBeEncoded()) {\n    this.setTextEncoding(TextEncoding.UTF_16);\n  }\n  super.write(tagBuffer);\n}\n", "nl": "If the description cannot be encoded using the current encoding change the encoder", "id": "38831"}
{"code": "public boolean startsWith(String prefix,int toffset){\n  return str().startsWith(prefix,toffset);\n}\n", "nl": "Tests if this string starts with the specified prefix beginning a specified index.", "id": "14238"}
{"code": "public static boolean putFloat(Context context,String key,float value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putFloat(key,value);\n  return editor.commit();\n}\n", "nl": "put float preferences", "id": "19737"}
{"code": "public void paintTabbedPaneTabAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n}\n", "nl": "Paints the background of the area behind the tabs of a tabbed pane.", "id": "4172"}
{"code": "public com.sun.identity.saml2.jaxb.xmlenc.EncryptedKeyElement createEncryptedKeyElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptedKeyElementImpl();\n}\n", "nl": "Create an instance of EncryptedKeyElement", "id": "27420"}
{"code": "private void readObject(ObjectInputStream s) throws ObjectStreamException {\n  throw new InvalidObjectException(\"Deserialization via serialization delegate\");\n}\n", "nl": "Defend against malicious streams.", "id": "19847"}
{"code": "public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {\n  return -(m_right.num(xctxt));\n}\n", "nl": "Evaluate this operation directly to a double.", "id": "40976"}
{"code": "@Indexable(type=IndexableType.REINDEX) @Override public Foo addFoo(Foo foo){\n  foo.setNew(true);\n  return fooPersistence.update(foo);\n}\n", "nl": "Adds the foo to the database. Also notifies the appropriate model listeners.", "id": "36440"}
{"code": "public void logEvent(String eventName,double valueToSum,Bundle parameters){\n  logEvent(eventName,valueToSum,parameters,false);\n}\n", "nl": "Log an app event with the specified name, supplied value, and set of parameters.", "id": "25067"}
{"code": "public ExpiresHeader createExpiresHeader(int expires) throws InvalidArgumentException {\n  if (expires < 0)   throw new InvalidArgumentException(\"bad value \" + expires);\n  Expires e=new Expires();\n  e.setExpires(expires);\n  return e;\n}\n", "nl": "Creates a new ExpiresHeader based on the newly supplied expires value.", "id": "45279"}
{"code": "public void terminate(){\n  shouldTerminate=true;\n}\n", "nl": "Signal that we should stop running", "id": "3276"}
{"code": "public void paintToolBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n}\n", "nl": "Paints the border of a tool bar.", "id": "31100"}
{"code": "public AuthenticationEnforcer exceptCreate(){\n  exceptCreate=true;\n  return this;\n}\n", "nl": "Marks authentication on create requests to the route as optional.", "id": "31972"}
{"code": "public void paintPanelBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n}\n", "nl": "Paints the border of a panel.", "id": "19563"}
{"code": "public boolean append_without_transforming(double p_value){\n  Float value=(float)p_value;\n  return append(number_format.format(value));\n}\n", "nl": "Appends p_value to the text pane without transforming it to the user coordinate sytem. Returns false, if that was not possible.", "id": "4754"}
{"code": "public DTMIterator iter() throws javax.xml.transform.TransformerException {\n  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,new Object[]{getTypeString()});\n  return null;\n}\n", "nl": "Cast result object to a nodelist. Always issues an error.", "id": "26271"}
{"code": "protected void addExtension(final String extension){\n  if (extension != null) {\n    if (extensions == null) {\n      extensions=new Vector<>();\n    }\n    extensions.add(extension);\n  }\n}\n", "nl": "Adds the given file extension to the list of extensions handled as JSP files.", "id": "11454"}
{"code": "protected final void assertStillUp() throws IllegalStateException {\n  if (this.isShutDown)   throw new IllegalStateException(\"Manager is shut down.\");\n}\n", "nl": "Asserts that this manager is not shut down.", "id": "30697"}
{"code": "public final boolean contains(String key){\n  for (int i=0; i < m_firstFree; i++) {\n    if (m_map[i].equals(key))     return true;\n  }\n  return false;\n}\n", "nl": "Tell if the table contains the given string.", "id": "54266"}
{"code": "public boolean isLoadingButtonShown(){\n  return mShowLoadingButton;\n}\n", "nl": "Gets if a button is shown in the loading view", "id": "12423"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.utility.ReceivedType createReceivedType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.utility.impl.ReceivedTypeImpl();\n}\n", "nl": "Create an instance of ReceivedType", "id": "51275"}
{"code": "@Override public void flush() throws IOException {\n  try {\n    out.flush();\n  }\n catch (  IOException e) {\n    handleIOException(e);\n  }\n}\n", "nl": "Invokes the delegate's <code>flush()</code> method.", "id": "40122"}
{"code": "public void startEntity(String name) throws org.xml.sax.SAXException {\n  if (name.equals(\"[dtd]\"))   m_inExternalDTD=true;\n  if (!m_expandDTDEntities && !m_inExternalDTD) {\n    startNonEscaping();\n    characters(\"&\" + name + ';');\n    endNonEscaping();\n  }\n  m_inEntityRef=true;\n}\n", "nl": "Report the beginning of an entity. The start and end of the document entity are not reported. The start and end of the external DTD subset are reported using the pseudo-name \"[dtd]\".  All other events must be properly nested within start/end entity events.", "id": "33840"}
{"code": "public final int elementAt(int i){\n  return m_map[i];\n}\n", "nl": "Get the nth element.", "id": "31771"}
{"code": "public void next(){\n  index++;\n}\n", "nl": "Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction.", "id": "48769"}
{"code": "@Override public long end() throws IOException {\n  if (compressionStream == null) {\n    compressionStream=new GZIPOutputStream(fakeOutputStream,true);\n  }\n  compressionStream.finish();\n  compressionStream.close();\n  return ((OutputFilter)buffer).end();\n}\n", "nl": "End the current request. It is acceptable to write extra bytes using buffer.doWrite during the execution of this method.", "id": "16173"}
{"code": "public Set searchAllRoles(String wildcard,int level) throws AMException, SSOException {\n  return searchAllRoles(wildcard,null,level);\n}\n", "nl": "Searches for all roles in this organizational unit using wildcards. Wildcards can be specified such as a*, *, *a.", "id": "47063"}
{"code": "public ReconAuditEventBuilder entryType(String entryType){\n  jsonValue.put(ENTRY_TYPE,entryType);\n  return self();\n}\n", "nl": "Sets the entryType on the builder.", "id": "20717"}
{"code": "public static boolean isReservedLongOption(String name){\n  return reservedLongOptionNames.contains(name);\n}\n", "nl": "Returns <code>true</code> if an argument/option is reserved.", "id": "58078"}
{"code": "protected boolean parseMarkupDeclarations(StringBuffer strBuff) throws IOException {\n  if ((strBuff.length() == \"DOCTYPE\".length()) && (strBuff.toString().toUpperCase().equals(\"DOCTYPE\"))) {\n    parseDTDMarkup();\n    return true;\n  }\n  return false;\n}\n", "nl": "Parse markup declarations. Currently only handles the Document Type Declaration markup. Returns true if it is a markup declaration false otherwise.", "id": "11976"}
{"code": "public void handleButton2Request(RequestInvocationEvent event){\n  removePageSessionAttribute(PROPERTY_ATTRIBUTE);\n  removePageSessionAttribute(PG_SESSION_MODIFIED);\n  recoveryMechID();\n  populateValues((String)getPageSessionAttribute(PGATTR_INDEX));\n  tablePopulated=false;\n  forwardTo();\n}\n", "nl": "Handles reset request.", "id": "12002"}
{"code": "public void flush() throws IOException {\n  for (  Entry<String,Aggregator> entry : getFlushMap().entrySet()) {\n    if (store != null) {\n      store.persist(taskId,entry.getKey(),entry.getValue());\n    }\n    entry.getValue().reset();\n  }\n}\n", "nl": "Flush and commit data", "id": "996"}
{"code": "public static GetPropSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> path,SetRelationDefinition<?,?> r) throws ArgumentException {\n  return new GetPropSubCommandHandler(parser,path.child(r),r);\n}\n", "nl": "Creates a new get-xxx-prop sub-command for a set relation.", "id": "20750"}
{"code": "public boolean ready() throws IOException {\nsynchronized (lock) {\n    ensureOpen();\n    return true;\n  }\n}\n", "nl": "Tells whether this stream is ready to be read.", "id": "10904"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n}\n", "nl": "Make sure that the server is running.", "id": "7193"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_notationssetnameditem1.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "25342"}
{"code": "public static ComponentUI createUI(JComponent c){\n  return new SynthDesktopPaneUI();\n}\n", "nl": "Creates a new UI object for the given component.", "id": "40706"}
{"code": "public void handleButton3Request(RequestInvocationEvent event) throws ModelControlException {\n  backTrail();\n  ViewBean vb=(AuthPropertiesViewBean)getViewBean(AuthPropertiesViewBean.class);\n  passPgSessionMap(vb);\n  vb.forwardTo(getRequestContext());\n}\n", "nl": "Handles cancel request.", "id": "4048"}
{"code": "public void startCDATA() throws org.xml.sax.SAXException {\n  m_cdataStartCalled=true;\n}\n", "nl": "Report the start of a CDATA section.", "id": "20925"}
{"code": "protected void registerChildren(){\n  super.registerChildren();\n  registerChild(VALUE_TEXTFIELD,model.hasValueOptionList() ? CCSelect.class : TextField.class);\n}\n", "nl": "Register child views.", "id": "13294"}
{"code": "public String toXML(){\n  StringBuilder stringBuilder=new StringBuilder();\n  return stringBuilder.toString();\n}\n", "nl": "Default toXML Method to Marshal Object into XML.", "id": "42993"}
{"code": "public static void checkVersionMismatch() throws InitializationException {\n  if (!BuildVersion.binaryVersion().equals(BuildVersion.instanceVersion())) {\n    throw new InitializationException(ERR_BUILDVERSION_MISMATCH.get(BuildVersion.binaryVersion(),BuildVersion.instanceVersion()));\n  }\n}\n", "nl": "Checks if the binary version is the same than the instance version.", "id": "3417"}
{"code": "protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  processRequest(request,response);\n}\n", "nl": "Handles the HTTP <code>GET</code> method.", "id": "52874"}
{"code": "public char toCharArray()[]{\nsynchronized (lock) {\n    return Arrays.copyOf(buf,count);\n  }\n}\n", "nl": "Returns a copy of the input data.", "id": "44198"}
{"code": "public static final Query createTestQuery(){\n  Query query=new Query();\n  query.setWhere(\"myindexedfield = 'thisismyfield'\");\n  query.setDatabase(Fixtures.DB);\n  query.setTable(\"mytable\");\n  return query;\n}\n", "nl": "Creates a simple query based on a single index for testing.", "id": "36115"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsfederation.FederationElement createFederationElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.FederationElementImpl();\n}\n", "nl": "Create an instance of FederationElement", "id": "39484"}
{"code": "private static JKSKeyProvider createKeyProvider(){\n  JKSKeyProvider jksKp;\n  if (useSpecificTrustStore()) {\n    jksKp=new JKSKeyProvider(SOAP_KEYSTORE_FILE_PROP,SOAP_KEYSTORE_PASS_FILE_PROP,SOAP_KEYSTORE_TYPE_PROP,SOAP_PRIVATE_KEY_PASS_FILE_PROP);\n  }\n else {\n    jksKp=new JKSKeyProvider();\n  }\n  return jksKp;\n}\n", "nl": "Create a JKSKeyProvider using either default properties or specific properties", "id": "4506"}
{"code": "public void reSetVideoFPS(int fps){\n  videoClient.reSetVideoFPS(fps);\n}\n", "nl": "update fps on the fly.", "id": "42392"}
{"code": "@Override public boolean logout() throws LoginException {\n  subject.getPrincipals().remove(principal);\n  committed=false;\n  principal=null;\n  return true;\n}\n", "nl": "Log out this user.", "id": "50223"}
{"code": "public DiffOptions attributes(final String... attributeDescriptions){\n  return attributes(new AttributeFilter(attributeDescriptions));\n}\n", "nl": "Specifies the list of attributes to be compared. By default only user attributes will be compared.", "id": "39351"}
{"code": "public byte[] remainingBytes(){\n  final int length=byteArray.length - bytes.position();\n  return nextByteArray(length);\n}\n", "nl": "Return a new byte array containing all remaining bytes in this ByteArrayScanner.", "id": "1247"}
{"code": "public void paintSeparatorBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintBackground(context,g,x,y,w,h,orientation);\n}\n", "nl": "Paints the background of a separator. This implementation invokes the method of the same name without the orientation.", "id": "30718"}
{"code": "@DataProvider(name=\"passwordExpiredControlData\") public Object[][] createPasswordExpiredControlData(){\n  return new Object[][]{{true},{false}};\n}\n", "nl": "Create values for PasswordExpiredControl.", "id": "11562"}
{"code": "public synchronized Object clone() throws CloneNotSupportedException {\n  VariableStack vs=(VariableStack)super.clone();\n  vs._stackFrames=(XObject[])_stackFrames.clone();\n  vs._links=(int[])_links.clone();\n  return vs;\n}\n", "nl": "Returns a clone of this variable stack.", "id": "44373"}
{"code": "public ExtensionHeader createMinSEHeader(int expires) throws InvalidArgumentException {\n  if (expires < 0)   throw new InvalidArgumentException(\"bad value \" + expires);\n  MinSE e=new MinSE();\n  e.setExpires(expires);\n  return e;\n}\n", "nl": "Creates a new MinSEHeader based on the newly supplied expires value.", "id": "7311"}
{"code": "public void login(IndexType type,String indexName) throws AuthLoginException {\n  login(type,indexName,null,null,null,null);\n}\n", "nl": "Starts the login process for the given <code>AuthContext</code> object identified by the index type and index name. The <code>IndexType</code> defines the possible kinds of \"objects\" or \"resources\" for which an authentication can be performed. Currently supported index types are users, roles, services (or application), levels, resources and mechanism/authentication modules.", "id": "44766"}
{"code": "public static void delete(AudioFile f) throws CannotReadException, CannotWriteException {\n  getDefaultAudioFileIO().deleteTag(f);\n}\n", "nl": "Delete the tag, if any, contained in the given file.", "id": "44512"}
{"code": "public static boolean isValidFilter(String filter){\n  try {\n    getFilterFromString(filter);\n  }\n catch (  IllegalArgumentException e) {\n    return false;\n  }\n  return true;\n}\n", "nl": "Indicates whether or not the given filter is supported by the data type.", "id": "23122"}
{"code": "public static String toUTCDateFormat(Date date){\n  return dateToString(date,UTC_DATE_Z_FORMAT);\n}\n", "nl": "Returns UTC String representation of a date. For instance, 2004-03-20T05:53:32Z.", "id": "33424"}
{"code": "public static IOFileFilter directoryFileFilter(){\n  return DirectoryFileFilter.DIRECTORY;\n}\n", "nl": "Returns a filter that checks if the file is a directory.", "id": "41842"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.FNElement createFNElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.FNElementImpl();\n}\n", "nl": "Create an instance of FNElement", "id": "27825"}
{"code": "public boolean retainAll(Collection<?> c){\n  return al.retainAll(c);\n}\n", "nl": "Retains only the elements in this set that are contained in the specified collection.  In other words, removes from this set all of its elements that are not contained in the specified collection.  If the specified collection is also a set, this operation effectively modifies this set so that its value is the <i>intersection</i> of the two sets.", "id": "56042"}
{"code": "public final void errPrintln(){\n  getErrStream().println();\n}\n", "nl": "Displays a blank line to the error stream.", "id": "43861"}
{"code": "public static int dpToPx(Context context,float dp){\n  DisplayMetrics displayMetrics=context.getResources().getDisplayMetrics();\n  return (int)((dp * displayMetrics.density) + 0.5);\n}\n", "nl": "Converts a dp value to a px value", "id": "33370"}
{"code": "public void yypushback(int number){\n  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);\n  zzMarkedPos-=number;\n}\n", "nl": "Pushes the specified amount of characters back into the input stream. They will be read again by then next call of the scanning method", "id": "40125"}
{"code": "public void removeChangeListener(ChangeListener l){\n  styles.removeChangeListener(l);\n}\n", "nl": "Removes a listener that was tracking styles being added or removed.", "id": "9786"}
{"code": "@Override public void removeAttribute(String name){\n  this.request.removeAttribute(name);\n}\n", "nl": "The default behavior of this method is to call removeAttribute(String name) on the wrapped request object.", "id": "30243"}
{"code": "public StringBuffer format(long number,StringBuffer toAppendTo,FieldPosition status){\n  return format((double)number,toAppendTo,status);\n}\n", "nl": "Specialization of format. This method really calls <code>format(double, StringBuffer, FieldPosition)</code> thus the range of longs that are supported is only equal to the range that can be stored by double. This will never be a practical limitation.", "id": "31235"}
{"code": "public String toASCIIString(){\n  StringBuilder result=new StringBuilder();\n  ASCII_ONLY.appendEncoded(result,toString());\n  return result.toString();\n}\n", "nl": "Returns the textual string representation of this URI instance using the US-ASCII encoding.", "id": "42679"}
{"code": "public static boolean isMapped(int code){\n  return code == LDAP_NOT_ALLOWED_ON_RDN || code == LDAP_NO_SUCH_OBJECT;\n}\n", "nl": "Returns true if we can specifically map this (non-general) error.", "id": "10783"}
{"code": "public int hashCode(){\n  if (!isHashValueSet) {\n    hashValue=super.hashCode();\n    isHashValueSet=true;\n  }\n  return hashValue;\n}\n", "nl": "Cache the hashCode value - calculating it with the standard method.", "id": "30297"}
{"code": "public boolean isBleepEnabled(){\n  return mBleepEnabled;\n}\n", "nl": "Get the bleep enabled value associated with this builder", "id": "52373"}
{"code": "public void updateCustomObjectClass(ObjectClass oc,Schema schema){\n  customObjectClassPanel.update(oc,schema);\n  schemaElementPanel=customObjectClassPanel;\n  ((CardLayout)mainPanel.getLayout()).show(mainPanel,customObjectClassPanel.getTitle().toString());\n}\n", "nl": "Updates the contents of the panel with the provided custom object class.", "id": "2136"}
{"code": "public void addScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.add(listener);\n}\n", "nl": "Adds wheel scrolling listener", "id": "36669"}
{"code": "public boolean visitVariableRef(ExpressionOwner owner,Variable var){\n  m_refs.addElement(var.getQName());\n  return true;\n}\n", "nl": "Visit a variable reference.", "id": "48330"}
{"code": "@DataProvider(name=\"createChangeStatusData\") public Object[][] createChangeStatusData(){\n  return new Object[][]{{ServerStatus.NORMAL_STATUS,ServerStatus.FULL_UPDATE_STATUS},{ServerStatus.DEGRADED_STATUS,ServerStatus.NORMAL_STATUS},{ServerStatus.FULL_UPDATE_STATUS,ServerStatus.DEGRADED_STATUS}};\n}\n", "nl": "Provider for the ChangeStatusMsg test.", "id": "57179"}
{"code": "public static boolean isScreenReadersAllowed(int permissions){\n  return (EncryptionConstants.ALLOW_SCREENREADERS & permissions) == EncryptionConstants.ALLOW_SCREENREADERS;\n}\n", "nl": "Tells you if repurposing for screenreaders is allowed.", "id": "49303"}
{"code": "@NonNull public static Animator createCircularReveal(@NonNull View startView,@NonNull View targetView,@NonNull Interpolator interpolator){\n  Point center=getCenterForView(startView);\n  return createCircularReveal(center,startView.getWidth(),targetView,interpolator);\n}\n", "nl": "Create a simple circular reveal from a given start view to it's target view. This reveal will start from the start view's boundaries until it fills the target view.", "id": "8895"}
{"code": "public synchronized BukkitTask runTaskAsynchronously(Plugin plugin) throws IllegalArgumentException, IllegalStateException {\n  checkState();\n  return setupId(Bukkit.getScheduler().runTaskAsynchronously(plugin,(Runnable)this));\n}\n", "nl": "<b>Asynchronous tasks should never access any API in Bukkit. Great care should be taken to assure the thread-safety of asynchronous tasks.</b> <p> Schedules this in the Bukkit scheduler to run asynchronously.", "id": "50523"}
{"code": "public Dimension preferredLayoutSize(Container parent){\n  GridBagLayoutInfo info=getLayoutInfo(parent,PREFERREDSIZE);\n  return getMinSize(parent,info);\n}\n", "nl": "Determines the preferred size of the <code>parent</code> container using this grid bag layout. <p> Most applications do not call this method directly.", "id": "42287"}
{"code": "public static URI toNormalizedURI(File file){\n  return file.toURI().normalize();\n}\n", "nl": "This method makes a normalized URI from a given file.", "id": "21685"}
{"code": "public Boolean isAutoStopTimeEnabled(){\n  return autoStopTimeEnable;\n}\n", "nl": "Is auto stop time feature enable", "id": "29559"}
{"code": "public CipherSuite cipherSuite(){\n  return cipherSuite;\n}\n", "nl": "Returns the cipher suite used for the connection.", "id": "1302"}
{"code": "public void add(Role role) throws IllegalArgumentException {\n  if (role == null) {\n    String excMsg=\"Invalid parameter\";\n    throw new IllegalArgumentException(excMsg);\n  }\n  super.add(role);\n}\n", "nl": "Adds the Role specified as the last element of the list.", "id": "23542"}
{"code": "private void readObject(ObjectInputStream s) throws InvalidObjectException {\n  throw new InvalidObjectException(\"Deserialization via serialization delegate\");\n}\n", "nl": "Defend against malicious streams.", "id": "33692"}
{"code": "@AfterClass public static void cleanupClass(){\n  try {\n    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());\n  }\n catch (  Exception ignore) {\n    System.err.println(\"cannot remove \" + scenario.getRepositoryLocation());\n  }\n}\n", "nl": "Cleanup the whole junit scenario ; deletes the created git repository.", "id": "40563"}
{"code": "public void access(Level level,String messageId,String data[],Object session,Map props) throws LogException {\n  if (isAccessLoggable(level)) {\n    LogRecord lr=new LogRecord(level,formatMessage(messageId,data,session));\n    accessLogger.log(lr);\n  }\n}\n", "nl": "Writes access to a component into a log.", "id": "3084"}
{"code": "private int clientSideAuthenticationUsageCount(String uuid) throws SSOException, SMSException {\n  return getUsageCount(getScriptedServiceBaseDN(),getClientSideScriptedAuthSearchString(uuid)) + getUsageCount(getDeviceIdMatchServiceBaseDN(),getClientSideScriptedAuthSearchString(uuid));\n}\n", "nl": "Count how many times the script identified by the specified uuid is used in client side authentication.", "id": "12292"}
{"code": "public static TypeReference newTypeReference(int sort){\n  return new TypeReference(sort << 24);\n}\n", "nl": "Returns a type reference of the given sort.", "id": "19805"}
{"code": "public String name(){\n  return name;\n}\n", "nl": "Gets the name of the world that is to be loaded or created.", "id": "24813"}
{"code": "public static CancelExtendedRequest unmodifiableCancelExtendedRequest(final CancelExtendedRequest request){\n  if (request instanceof UnmodifiableCancelExtendedRequestImpl) {\n    return request;\n  }\n  return new UnmodifiableCancelExtendedRequestImpl(request);\n}\n", "nl": "Creates an unmodifiable cancel extended request of the provided request.", "id": "20078"}
{"code": "public void visitSource(String source,String debug){\n  if (cv != null) {\n    cv.visitSource(source,debug);\n  }\n}\n", "nl": "Visits the source of the class.", "id": "26490"}
{"code": "public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {\n  return exp.apply(name) == false;\n}\n", "nl": "Applies the NotQueryExp on a MBean.", "id": "6762"}
{"code": "private boolean canDoDifferentialUpdate(NodeRefresher task){\n  return task.getNode().getChildCount() >= 1 && task.getNode().getNumSubOrdinates() <= 100;\n}\n", "nl": "Tells whether a differential update can be made in the provided task.", "id": "49455"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.assertion.SubjectConfirmationType createSubjectConfirmationType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.SubjectConfirmationTypeImpl();\n}\n", "nl": "Create an instance of SubjectConfirmationType", "id": "18339"}
{"code": "public String toXMLString() throws XACMLException {\n  return toXMLString(true,false);\n}\n", "nl": "Returns a string representation of this object", "id": "16748"}
{"code": "public boolean isPreformatted(){\n  return (this == PRE || this == TEXTAREA);\n}\n", "nl": "Returns <code>true</code> if this tag is pre-formatted, which is true if the tag is either <code>PRE</code> or <code>TEXTAREA</code>.", "id": "57611"}
{"code": "public ConnectorFacade createConnectorFacade(APIConfiguration configuration){\n  return configuration != null ? connectorFramework.get().newInstance(configuration) : null;\n}\n", "nl": "Creates a ConnectorFacade from provided APIConfiguration.", "id": "33807"}
{"code": "public static MemoryUsage from(CompositeData cd){\n  if (cd == null) {\n    return null;\n  }\n  if (cd instanceof MemoryUsageCompositeData) {\n    return ((MemoryUsageCompositeData)cd).getMemoryUsage();\n  }\n else {\n    return new MemoryUsage(cd);\n  }\n}\n", "nl": "Returns a <tt>MemoryUsage</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes: <blockquote> <table border summary=\"The attributes and the types the given CompositeData contains\"> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>init</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>used</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>committed</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>max</td> <td><tt>java.lang.Long</tt></td> </tr> </table> </blockquote>", "id": "49844"}
{"code": "public static byte[] allocSecondary(byte[] curr){\n  return new byte[SECONDARY_BUFFER_LENGTH];\n}\n", "nl": "While we could get all fancy on allocating secondary buffer (after initial one), let's start with very simple strategy of medium-length buffer.", "id": "3242"}
{"code": "public void paint(Graphics a,JComponent b){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).paint(a,b);\n  }\n}\n", "nl": "Invokes the <code>paint</code> method on each UI handled by this object.", "id": "9140"}
{"code": "public boolean isSessionBlacklistingEnabled(){\n  return configuration.blacklistingEnabled;\n}\n", "nl": "Whether token blacklisting is enabled for stateless token deletion. Defaults to false.", "id": "49976"}
{"code": "protected void removeThumbnailData(){\n  clearThumbnailAndStrips();\n  mIfdDatas[IfdId.TYPE_IFD_1]=null;\n}\n", "nl": "Removes the thumbnail and its related tags. IFD1 will be removed.", "id": "13496"}
{"code": "private static String fileName(String host,int port){\n  if (host == null) {\n    throw new NullPointerException(\"host == null\");\n  }\n  return host + \".\" + port;\n}\n", "nl": "Gets the file name for the given host and port.", "id": "41029"}
{"code": "public static Condition not(Condition condition){\n  return new NOTCondition(condition);\n}\n", "nl": "Creates a condition which evaluates to <code>true</code> if the sub-condition is <code>false</code>, or <code>false</code> if the sub-condition is <code>true</code>.", "id": "28182"}
{"code": "public static String removeKeyFromRequest(CreateRequest request){\n  return (String)(request.getContent().isNull() ? null : request.getContent().expect(Map.class).asMap().remove(\"_key\"));\n}\n", "nl": "Fetch and remove process key from the request", "id": "17488"}
{"code": "private void doDelete(FileEntry entry){\n  for (  FileAlterationListener listener : listeners) {\n    if (entry.isDirectory()) {\n      listener.onDirectoryDelete(entry.getFile());\n    }\n else {\n      listener.onFileDelete(entry.getFile());\n    }\n  }\n}\n", "nl": "Fire directory/file delete events to the registered listeners.", "id": "26226"}
{"code": "@After public void clean(){\n  mute(null);\n  mute(null);\n  mute(null);\n}\n", "nl": "Cleanups after each tests.", "id": "16834"}
{"code": "protected final int returnNode(final int node){\n  _position++;\n  return node;\n}\n", "nl": "Do any final cleanup that is required before returning the node that was passed in, and then return it. The intended use is <br /> <code>return returnNode(node);</code> %REVIEW% If we're calling it purely for side effects, should we really be bothering with a return value? Something like <br /> <code> accept(node); return node; </code> <br /> would probably optimize just about as well and avoid questions about whether what's returned could ever be different from what's passed in.", "id": "55849"}
{"code": "public void replaceSubject(String subjectName,Subject subject) throws NameNotFoundException {\n  replaceSubject(subjectName,subject,false);\n}\n", "nl": "Replaces an existing subject object having the same name with the new one. If a <code>Subject</code> with the given name does not exist, <code>NameNotFoundException</code> will be thrown. The subject is replaced as a normal (non exclusive) subject. So, policy will apply to members of the subject.", "id": "27681"}
{"code": "protected void installPreviousButtonListeners(Component c){\n  installButtonListeners(c,previousButtonHandler);\n}\n", "nl": "Installs the necessary listeners on the previous button, <code>c</code>, to update the <code>JSpinner</code> in response to a user gesture.", "id": "55545"}
{"code": "private void readObject(ObjectInputStream s) throws InvalidObjectException {\n  throw new InvalidObjectException(\"Deserialization via serialization delegate\");\n}\n", "nl": "Defend against malicious streams.", "id": "8687"}
{"code": "public void throwException(){\n  mv.visitInsn(Opcodes.ATHROW);\n}\n", "nl": "Generates the instruction to throw an exception.", "id": "40709"}
{"code": "public void addEmptyValues(final Vector<JKTableColumn> tableColumns){\n  for (  final JKTableColumn col : tableColumns) {\n    final JKTableColumnValue value=new JKTableColumnValue(col);\n    this.columnsValues.add(value);\n  }\n}\n", "nl": "Adds the empty values.", "id": "35223"}
{"code": "public StatusDetail createStatusDetail() throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.STATUS_DETAIL);\n  if (obj == null) {\n    return new StatusDetailImpl();\n  }\n else {\n    return (StatusDetail)obj;\n  }\n}\n", "nl": "Returns the <code>StatusDetail</code> Object.", "id": "32359"}
{"code": "public static String formatDateTime(Date time,Locale locale){\n  DateFormat dateFormat=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.SHORT,locale);\n  return dateFormat.format(time);\n}\n", "nl": "Formats date", "id": "39144"}
{"code": "public void warn(Object message){\n  log(Level.WARNING,String.valueOf(message),null);\n}\n", "nl": "Logs a message with <code>java.util.logging.Level.WARNING</code>.", "id": "53647"}
{"code": "public void incrementIdxOfCallbackSetInModule(){\n  ++this.idxOfCallbackSetInModule;\n}\n", "nl": "Increments the index of the callback set in the module.", "id": "4496"}
{"code": "public void paint(Graphics a,JComponent b){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).paint(a,b);\n  }\n}\n", "nl": "Invokes the <code>paint</code> method on each UI handled by this object.", "id": "10767"}
{"code": "public static String ipBytesToStr(byte[] ip){\n  try {\n    return InetAddress.getByAddress(null,ip).getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    throw new IllegalArgumentException(\"Unexpected IP address: \" + Arrays.toString(ip));\n  }\n}\n", "nl": "Returns the string form of the given IP address. If the address is not 4 octets for IPv4 or 16 octets for IPv6, an IllegalArgumentException will be thrown.", "id": "39549"}
{"code": "public AMSearchResults searchUsers(AMSearchControl searchControl,String avfilter) throws AMException, SSOException {\n  return searchObjects(getSearchFilter(AMObject.USER),searchControl,avfilter);\n}\n", "nl": "Searches for users in this organization attribute values. Wildcards such as can be specified for the attribute values. The DNs of users with matching attribute-value pairs will be returned.", "id": "1902"}
{"code": "public static void createTable(SQLiteDatabase db,boolean ifNotExists){\n  String constraint=ifNotExists ? \"IF NOT EXISTS \" : \"\";\n  db.execSQL(\"CREATE TABLE \" + constraint + \"\\\"GREEN_VIDEO\\\" (\"+ \"\\\"_id\\\" INTEGER PRIMARY KEY ,\"+ \"\\\"VIDEOLISTJSON\\\" TEXT,\"+ \"\\\"VIDEOTYPE\\\" TEXT);\");\n}\n", "nl": "Creates the underlying database table.", "id": "31280"}
{"code": "private boolean isFreshnessLifetimeHeuristic(){\n  return maxAgeSeconds == -1 && expires == null;\n}\n", "nl": "Returns true if computeFreshnessLifetime used a heuristic. If we used a heuristic to serve a cached response older than 24 hours, we are required to attach a warning.", "id": "32651"}
{"code": "public Object clone(){\n  try {\n    return super.clone();\n  }\n catch (  CloneNotSupportedException e) {\n    throw new InternalError(e);\n  }\n}\n", "nl": "Creates and returns a copy of this <code>JobAttributes</code>.", "id": "39570"}
{"code": "public long now(){\n  return currentTimeMillis();\n}\n", "nl": "Gets the current millis from the System.", "id": "34536"}
{"code": "public synchronized void removeConsumer(ImageConsumer ic){\n  if (proxies != null) {\n    ImageFilter imgf=(ImageFilter)proxies.get(ic);\n    if (imgf != null) {\n      src.removeConsumer(imgf);\n      proxies.remove(ic);\n      if (proxies.isEmpty()) {\n        proxies=null;\n      }\n    }\n  }\n}\n", "nl": "Removes an ImageConsumer from the list of consumers interested in data for this image. <p> This method is public as a side effect of this class implementing the <code>ImageProducer</code> interface. It should not be called from user code, and its behavior if called from user code is unspecified.", "id": "45610"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.SecretKeyProtectionType createSecretKeyProtectionType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SecretKeyProtectionTypeImpl();\n}\n", "nl": "Create an instance of SecretKeyProtectionType", "id": "23672"}
{"code": "public boolean isAllowed(SSOToken token,String resourceName,String actionName) throws PolicyException, SSOException {\n  return isAllowed(token,resourceName,actionName,null);\n}\n", "nl": "Evaluates a simple privilege of boolean type. The privilege indicates if the user can perform specified action on the specified resource.", "id": "13481"}
{"code": "public static List<VerificationException> verifyCertificates(Certificate[] certs,KeyStore keystore){\n  return verifyCertificates(certs,keystore,DateTimeUtil.getCurrentTimeCalendar());\n}\n", "nl": "Verifies a certificate chain against a KeyStore for the current date.", "id": "23068"}
{"code": "private void clearAuthFailureTimes(){\n  logger.trace(\"Clearing authentication failure times for user %s\",userDNString);\n  List<Long> failureTimes=getAuthFailureTimes();\n  if (!failureTimes.isEmpty()) {\n    failureTimes.clear();\n    clearAttribute(OP_ATTR_PWPOLICY_FAILURE_TIME);\n  }\n}\n", "nl": "Updates the user entry to remove any record of previous authentication failure times.", "id": "14691"}
{"code": "public void removeUpdate(FlowView fv,DocumentEvent e,Rectangle alloc){\n  sync(fv);\n  super.removeUpdate(fv,e,alloc);\n}\n", "nl": "Gives notification that something was removed from the document in a location that the given flow view is responsible for.", "id": "39975"}
{"code": "public void onLogout(HttpServletRequest req,HttpServletResponse res,SSOToken ssoToken) throws AuthenticationException {\n  debug.message(\"FirstTimeLogin.onLogout called\");\n}\n", "nl": "Post processing on Logout.", "id": "35926"}
{"code": "public void scrollPathToVisible(TreePath path){\n  if (path != null) {\n    makeVisible(path);\n    Rectangle bounds=getPathBounds(path);\n    if (bounds != null) {\n      scrollRectToVisible(bounds);\n      if (accessibleContext != null) {\n        ((AccessibleJTree)accessibleContext).fireVisibleDataPropertyChange();\n      }\n    }\n  }\n}\n", "nl": "Makes sure all the path components in path are expanded (except for the last path component) and scrolls so that the node identified by the path is displayed. Only works when this <code>JTree</code> is contained in a <code>JScrollPane</code>.", "id": "38155"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.protocol.AuthenticationQueryElement createAuthenticationQueryElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.AuthenticationQueryElementImpl();\n}\n", "nl": "Create an instance of AuthenticationQueryElement", "id": "57756"}
{"code": "public boolean equals(Object object){\n  return (object != null && object instanceof TextSyntax && this.value.equals(((TextSyntax)object).value) && this.locale.equals(((TextSyntax)object).locale));\n}\n", "nl": "Returns whether this text attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: <OL TYPE=1> <LI> <CODE>object</CODE> is not null. <LI> <CODE>object</CODE> is an instance of class TextSyntax. <LI> This text attribute's underlying string and <CODE>object</CODE>'s underlying string are equal. <LI> This text attribute's locale and <CODE>object</CODE>'s locale are equal. </OL>", "id": "45729"}
{"code": "private void writeVersionContents(ServerDescriptor desc,int maxLabelWidth){\n  writeLabelValue(INFO_OPENDS_VERSION_LABEL.get(),desc.getOpenDSVersion(),maxLabelWidth);\n}\n", "nl": "Updates the server version contents displaying with what is specified in the provided ServerDescriptor object. This method must be called from the event thread.", "id": "4505"}
{"code": "public YamlConfigurationOptions indent(int value){\n  Validate.isTrue(value >= 2,\"Indent must be at least 2 characters\");\n  Validate.isTrue(value <= 9,\"Indent cannot be greater than 9 characters\");\n  this.indent=value;\n  return this;\n}\n", "nl": "Sets how much spaces should be used to indent each line. <p> The minimum value this may be is 2, and the maximum is 9.", "id": "57174"}
{"code": "public boolean isOtherExecutable(){\n  return is(encodedPermission,OTHER_EXECUTABLE);\n}\n", "nl": "Indicates whether this file permission includes the other execute permission.", "id": "10338"}
{"code": "public boolean equalsIgnoreCase(String anotherString){\n  return (m_length == anotherString.length()) ? str().equalsIgnoreCase(anotherString) : false;\n}\n", "nl": "Compares this <code>String</code> to another <code>String</code>, ignoring case considerations.  Two strings are considered equal ignoring case if they are of the same length, and corresponding characters in the two strings are equal ignoring case.", "id": "54962"}
{"code": "public boolean beginErrorBlockDisplay(ChildDisplayEvent event){\n  if (model.isError()) {\n    setDisplayFieldValue(ERROR_TITLE,model.getErrorTitle());\n    setDisplayFieldValue(ERROR_MSG,model.getErrorMessage());\n    return true;\n  }\n  return false;\n}\n", "nl": "Begins error message content", "id": "37434"}
{"code": "protected boolean isImageWrapCropBounds(){\n  return isImageWrapCropBounds(mCurrentImageCorners);\n}\n", "nl": "This method checks whether current image fills the crop bounds.", "id": "7259"}
{"code": "public static HierarchyListener add(HierarchyListener a,HierarchyListener b){\n  return (HierarchyListener)addInternal(a,b);\n}\n", "nl": "Adds hierarchy-listener-a with hierarchy-listener-b and returns the resulting multicast listener.", "id": "50947"}
{"code": "static void writeStringToFile(final String string,final File file) throws IOException {\n  createFile(file);\n  try (PrintWriter printWriter=new PrintWriter(file)){\n    printWriter.print(string);\n  }\n }\n", "nl": "Writes a string to a file.", "id": "5445"}
{"code": "private void validateStatusReplicationOptions(LocalizableMessageBuilder buf){\n  if (quietArg.isPresent()) {\n    LocalizableMessage message=ERR_REPLICATION_STATUS_QUIET.get(STATUS_REPLICATION_SUBCMD_NAME,\"--\" + quietArg.getLongIdentifier());\n    addMessage(buf,message);\n  }\n}\n", "nl": "Checks the status replication subcommand options and updates the provided LocalizableMessageBuilder with the errors that were encountered with the subcommand options. This method assumes that the method parseArguments for the parser has already been called.", "id": "22582"}
{"code": "public void removeAttribute(String name){\n  int i=names.indexOf(name);\n  if (i != -1) {\n    names.remove(i);\n    types.remove(i);\n    values.remove(i);\n  }\n}\n", "nl": "Remove an attribute from the list. <p>SAX application writers can use this method to filter an attribute out of an AttributeList.  Note that invoking this method will change the length of the attribute list and some of the attribute's indices.</p> <p>If the requested attribute is not in the list, this is a no-op.</p>", "id": "11235"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.IDPSSODescriptorElement createIDPSSODescriptorElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.IDPSSODescriptorElementImpl();\n}\n", "nl": "Create an instance of IDPSSODescriptorElement", "id": "58134"}
{"code": "public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias,java.lang.String algorithm,java.util.List ids) throws XMLSignatureException {\n  return signXML(doc,certAlias,algorithm,null,ids);\n}\n", "nl": "Sign part of the xml document referered by the supplied a list of id attributes of nodes", "id": "2004"}
{"code": "public static JLabel createTitleLabel(LocalizableMessage text){\n  JLabel label=new JLabel(text.toString());\n  label.setFont(ColorAndFontConstants.titleFont);\n  label.setForeground(ColorAndFontConstants.foreground);\n  return label;\n}\n", "nl": "Creates a label of type 'title' (with bigger font).", "id": "31693"}
{"code": "private void checkNode(Node node) throws DOMException {\n  if (node == null) {\n    return;\n  }\n  if (!(node instanceof IIOMetadataNode)) {\n    throw new IIODOMException(DOMException.WRONG_DOCUMENT_ERR,\"Node not an IIOMetadataNode!\");\n  }\n}\n", "nl": "Check that the node is either <code>null</code> or an <code>IIOMetadataNode</code>.", "id": "42431"}
{"code": "public static JTextField createTextField(){\n  JTextField tf=new JTextField();\n  tf.addFocusListener(new TextComponentFocusListener(tf));\n  tf.setFont(ColorAndFontConstants.defaultFont);\n  return tf;\n}\n", "nl": "Creates a text field with the default size.", "id": "31081"}
{"code": "protected boolean isDragging(){\n  return isDragging;\n}\n", "nl": "Returns true if the user is dragging the slider.", "id": "17360"}
{"code": "public static void enableConsoleLoggingForOpenDJTool(){\n  enableConsoleLoggingForOpenDJ(Level.FINE,System.out,System.err);\n}\n", "nl": "Enable JDK logging for OpenDJ tool. <p> Error and warning messages will be printed on stderr, other messages will be printed on stdout. This method should only be used by external tool classes.", "id": "37741"}
{"code": "public Class<?> loadTagFilePrototype() throws JasperException {\n  ctxt.setPrototypeMode(true);\n  try {\n    return loadTagFile();\n  }\n  finally {\n    ctxt.setPrototypeMode(false);\n  }\n}\n", "nl": "Compile and load a prototype for the Tag file.  This is needed when compiling tag files with circular dependencies.  A prototype (skeleton) with no dependencies on other other tag files is generated and compiled.", "id": "19755"}
{"code": "public AttributeQuery createAttributeQuery(Element value) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ATTRIBUTE_QUERY,value);\n  if (obj == null) {\n    return new AttributeQueryImpl(value);\n  }\n else {\n    return (AttributeQuery)obj;\n  }\n}\n", "nl": "Returns the <code>AttributeQuery</code> Object.", "id": "20546"}
{"code": "public void processingInstruction(String target,String data) throws SAXException {\n  if (contentHandler != null) {\n    contentHandler.processingInstruction(target,data);\n  }\n}\n", "nl": "Filter a processing instruction event.", "id": "53182"}
{"code": "public Assertion createSSOAssertion(String id,AssertionArtifact artifact,String destID,String targetUrl,String version) throws SAMLException {\n  return createSSOAssertion(id,artifact,null,null,destID,targetUrl,version);\n}\n", "nl": "Returns Assertion that contains <code>AuthenticationStatement</code>.", "id": "13253"}
{"code": "public int hashCode(){\n  int result=choiceLimits.length;\n  if (choiceFormats.length > 0) {\n    result^=choiceFormats[choiceFormats.length - 1].hashCode();\n  }\n  return result;\n}\n", "nl": "Generates a hash code for the message format object.", "id": "19516"}
{"code": "public boolean hasSubCommand(String name){\n  return subCommands.containsKey(name);\n}\n", "nl": "Indicates whether this argument parser has a subcommand with the specified name.", "id": "43470"}
{"code": "public Object[] toArray(){\n  Object[] rv=new Object[delegate.size()];\n  delegate.copyInto(rv);\n  return rv;\n}\n", "nl": "Returns an array containing all of the elements in this list in the correct order.", "id": "37184"}
{"code": "private void convertandWriteTagsAtomToFreeAtom(FileChannel fileWriteChannel,Mp4BoxHeader tagsHeader) throws IOException {\n  Mp4FreeBox freeBox=new Mp4FreeBox(tagsHeader.getDataLength());\n  fileWriteChannel.write(freeBox.getHeader().getHeaderData());\n  fileWriteChannel.write(freeBox.getData());\n}\n", "nl": "Replace tags atom (and children) by a free atom", "id": "57855"}
{"code": "public static Bitmap scaleImage(Bitmap org,float scaleWidth,float scaleHeight){\n  if (org == null) {\n    return null;\n  }\n  Matrix matrix=new Matrix();\n  matrix.postScale(scaleWidth,scaleHeight);\n  return Bitmap.createBitmap(org,0,0,org.getWidth(),org.getHeight(),matrix,true);\n}\n", "nl": "scale image", "id": "35203"}
{"code": "public boolean isLast(){\n  if (relativePosition == groupSize - 1) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Checks if the item is the last of the group", "id": "12197"}
{"code": "Path resolvePath(Path file){\n  return checksums.getParent().resolve(file);\n}\n", "nl": "Resolve the full path of the provided file relative to the checksum file's path.", "id": "23978"}
{"code": "public static Subject createAuthenticatedUsersSubject(PolicyManager pm) throws PolicyException {\n  SubjectTypeManager mgr=pm.getSubjectTypeManager();\n  Subject subject=mgr.getSubject(\"AuthenticatedUsers\");\n  return subject;\n}\n", "nl": "Returns A Subject that represents all authenticated users.", "id": "47270"}
{"code": "public static String byteToHex(final byte b){\n  return BYTE_HEX_STRINGS[UPPER_CASE][b & 0xFF];\n}\n", "nl": "Retrieves a string representation of the provided byte in hexadecimal.", "id": "56150"}
{"code": "public static List<Foo> toModels(FooSoap[] soapModels){\n  if (soapModels == null) {\n    return null;\n  }\n  List<Foo> models=new ArrayList<Foo>(soapModels.length);\n  for (  FooSoap soapModel : soapModels) {\n    models.add(toModel(soapModel));\n  }\n  return models;\n}\n", "nl": "Converts the soap model instances into normal model instances.", "id": "1653"}
{"code": "void checkMethodName(byte refKind,String name) throws NoSuchMethodException {\n  if (name.startsWith(\"<\") && refKind != REF_newInvokeSpecial)   throw new NoSuchMethodException(\"illegal method name: \" + name);\n}\n", "nl": "Check name for an illegal leading \"&lt;\" character.", "id": "7411"}
{"code": "public ReconAuditEventBuilder reconciling(String reconciling){\n  jsonValue.put(RECONCILING,reconciling);\n  return self();\n}\n", "nl": "Sets the reconciling value on the builder.", "id": "22028"}
{"code": "public JSONArray names(){\n  return nameValuePairs.isEmpty() ? null : new JSONArray(new ArrayList<String>(nameValuePairs.keySet()));\n}\n", "nl": "Returns an array containing the string names in this object. This method returns null if this object contains no mappings.", "id": "39227"}
{"code": "public void applyFromResolveInfo(PackageManager pm,ResolveInfo info,WidgetPreviewLoader loader){\n  mInfo=info;\n  CharSequence label=info.loadLabel(pm);\n  mWidgetName.setText(label);\n  mWidgetDims.setText(String.format(mDimensionsFormatString,1,1));\n  mWidgetPreviewLoader=loader;\n}\n", "nl": "Apply the resolve info to the view.", "id": "4316"}
{"code": "public String documentationAdminGuideUrl(){\n  return properties.getProperty(\"doc.guide.admin.url\");\n}\n", "nl": "Returns the URL of the product WIKI page.", "id": "2969"}
{"code": "public void rotate_90_deg(int p_factor,PlaPointInt p_pole){\n  if (p_factor == 0)   return;\n  rotation_in_degree=normalize_rotation(rotation_in_degree + p_factor * 90);\n  if (location != null) {\n    location=location.rotate_90_deg(p_factor,p_pole);\n  }\n}\n", "nl": "Turns this component by p_factor times 90 degree around p_pole.", "id": "17451"}
{"code": "public char[] toCharArray(){\n  Charset utf8=Charset.forName(\"UTF-8\");\n  CharBuffer charBuffer=utf8.decode(ByteBuffer.wrap(buffer,offset,length));\n  char[] chars=new char[charBuffer.remaining()];\n  charBuffer.get(chars);\n  return chars;\n}\n", "nl": "Returns the UTF-8 decoded char array representation of this byte sequence.", "id": "10105"}
{"code": "public com.sun.identity.wsfederation.jaxb.xmlsig.CanonicalizationMethodType createCanonicalizationMethodType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.CanonicalizationMethodTypeImpl();\n}\n", "nl": "Create an instance of CanonicalizationMethodType", "id": "11345"}
{"code": "static public void assertNotNull(Object object){\n  assertNotNull(null,object);\n}\n", "nl": "Asserts that an object isn't null.", "id": "58210"}
{"code": "public String encode(){\n  return encode(new StringBuilder()).toString();\n}\n", "nl": "Encode the object.", "id": "37693"}
{"code": "public void preferenceChanged(boolean width,boolean height){\n  if (axis == X_AXIS) {\n    if (width) {\n      majorValid=false;\n    }\n    if (height) {\n      minorValid=false;\n    }\n  }\n else {\n    if (width) {\n      minorValid=false;\n    }\n    if (height) {\n      majorValid=false;\n    }\n  }\n  childSizeValid=false;\n}\n", "nl": "Mark preferences changed for this child.", "id": "16260"}
{"code": "public String toString(){\n  return \"BadStringOperationException: \" + op;\n}\n", "nl": "Returns the string representing the object.", "id": "15288"}
{"code": "public AddOperation processAdd(Entry entry){\n  return processAdd(entry,null);\n}\n", "nl": "Processes an internal add operation with the provided information.", "id": "35145"}
{"code": "public void put(Object key,Action action){\n  if (key == null) {\n    return;\n  }\n  if (action == null) {\n    remove(key);\n  }\n else {\n    if (arrayTable == null) {\n      arrayTable=new ArrayTable();\n    }\n    arrayTable.put(key,action);\n  }\n}\n", "nl": "Adds a binding for <code>key</code> to <code>action</code>. If <code>action</code> is null, this removes the current binding for <code>key</code>. <p>In most instances, <code>key</code> will be <code>action.getValue(NAME)</code>.", "id": "17857"}
{"code": "public FSResponse processSAMLRequest(FSSAMLRequest samlRequest){\n  FSUtils.debug.error(\"FSSSOAndFedHandler.processSAMLRequest: \" + \"Call should not resolve here, abstract class.\");\n  return null;\n}\n", "nl": "Processes <code>SAML</code> request.", "id": "44555"}
{"code": "@Override public void close(){\nsynchronized (lock) {\n    if (isOpen()) {\n      str=null;\n    }\n  }\n}\n", "nl": "This method closes this StringReader. Once it is closed, you can no longer read from it. Only the first invocation of this method has any effect.", "id": "42722"}
{"code": "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {\n  return execute(xctxt,xctxt.getCurrentNode());\n}\n", "nl": "Test the current node to see if it matches the given node test.", "id": "7162"}
{"code": "public byte[] composeString(byte[] oldString,byte newString){\n  int length=oldString.length;\n  byte[] string=new byte[length + 1];\n  System.arraycopy(oldString,0,string,0,length);\n  string[length]=newString;\n  return string;\n}\n", "nl": "Append <code>newString</code> to the end of <code>oldString</code>.", "id": "19310"}
{"code": "public int compareTo(Object p_other){\n  if (p_other == null)   return 1;\n  if (p_other instanceof BrdComponent) {\n    return name.compareToIgnoreCase(((BrdComponent)p_other).name);\n  }\n  return 1;\n}\n", "nl": "Compares 2 components by name. Useful for example to display components in alphabetic order.", "id": "54685"}
{"code": "public JsonPropertyMapper defaultJsonValues(final Collection<?> defaultValues){\n  this.defaultJsonValues=defaultValues != null ? new ArrayList<>(defaultValues) : emptyList();\n  return this;\n}\n", "nl": "Sets the default JSON values which should be substituted when the LDAP attribute is not found in the LDAP entry.", "id": "4237"}
{"code": "public boolean hasName(final String name){\n  for (  final String n : names) {\n    if (n.equalsIgnoreCase(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Indicates whether this schema definition has the specified name.", "id": "23916"}
{"code": "public static byte[] encodeBase64Chunked(byte[] binaryData){\n  return encodeBase64(binaryData,true);\n}\n", "nl": "Encodes binary data using the base64 algorithm and chunks the encoded output into 76 character blocks", "id": "2899"}
{"code": "public static String normalizeDN(String dn){\n  return normalizeDN(LDAPUtils.newDN(dn));\n}\n", "nl": "Returns the normalized DN string.", "id": "32341"}
{"code": "public static double toRadians(double angdeg){\n  return angdeg / 180.0 * PI;\n}\n", "nl": "Converts an angle measured in degrees to an approximately equivalent angle measured in radians.  The conversion from degrees to radians is generally inexact.", "id": "46290"}
{"code": "public void removeUpdateListener(AnimatorUpdateListener listener){\n  if (updateListeners == null) {\n    return;\n  }\n  updateListeners.remove(listener);\n  if (updateListeners.size() == 0) {\n    updateListeners=null;\n  }\n}\n", "nl": "Removes a listener from the set listening to frame updates for this animation.", "id": "55060"}
{"code": "public float nextTabStop(float x,int tabOffset){\n  if (getTabSet() == null && StyleConstants.getAlignment(getAttributes()) == StyleConstants.ALIGN_LEFT) {\n    return getPreTab(x,tabOffset);\n  }\n  return super.nextTabStop(x,tabOffset);\n}\n", "nl": "Returns the next tab stop position given a reference position. This view implements the tab coordinate system, and calls <code>getTabbedSpan</code> on the logical children in the process of layout to determine the desired span of the children.  The logical children can delegate their tab expansion upward to the paragraph which knows how to expand tabs. <code>LabelView</code> is an example of a view that delegates its tab expansion needs upward to the paragraph. <p> This is implemented to try and locate a <code>TabSet</code> in the paragraph element's attribute set.  If one can be found, its settings will be used, otherwise a default expansion will be provided.  The base location for for tab expansion is the left inset from the paragraphs most recent allocation (which is what the layout of the children is based upon).", "id": "27754"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(namednodemapsetnameditemns05.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "40318"}
{"code": "public void addChild(MappedClass child){\n  children.put(child.getOriginalName(),child);\n}\n", "nl": "Adds a child instance to the class.", "id": "34625"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(characterdatadeletedataend.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "53372"}
{"code": "public void close(){\n  if (dialog != null) {\n    dialog.setVisible(false);\n    dialog.dispose();\n    dialog=null;\n    pane=null;\n    myBar=null;\n  }\n}\n", "nl": "Indicate that the operation is complete.  This happens automatically when the value set by setProgress is &gt;= max, but it may be called earlier if the operation ends early.", "id": "43785"}
{"code": "protected void checkStream() throws IOException {\n  if (closed) {\n    throw new IOException(\"Stream closed\");\n  }\n}\n", "nl": "Checks whether the stream is closed.", "id": "32717"}
{"code": "private static int wordIndex(int bitIndex){\n  return bitIndex >> ADDRESS_BITS_PER_WORD;\n}\n", "nl": "Given a bit index, return word index containing it.", "id": "49318"}
{"code": "public Object clone(){\n  Paper newPaper;\n  try {\n    newPaper=(Paper)super.clone();\n  }\n catch (  CloneNotSupportedException e) {\n    e.printStackTrace();\n    newPaper=null;\n  }\n  return newPaper;\n}\n", "nl": "Creates a copy of this <code>Paper</code> with the same contents as this <code>Paper</code>.", "id": "38132"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.EntityDescriptorType createEntityDescriptorType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.EntityDescriptorTypeImpl();\n}\n", "nl": "Create an instance of EntityDescriptorType", "id": "50353"}
{"code": "public void visitFieldInsn(int opcode,String owner,String name,String desc){\n  if (mv != null) {\n    mv.visitFieldInsn(opcode,owner,name,desc);\n  }\n}\n", "nl": "Visits a field instruction. A field instruction is an instruction that loads or stores the value of a field of an object.", "id": "50989"}
{"code": "public static void showInternalMessageDialog(Component parentComponent,Object message){\n  showInternalMessageDialog(parentComponent,message,UIManager.getString(\"OptionPane.messageDialogTitle\",parentComponent),INFORMATION_MESSAGE);\n}\n", "nl": "Brings up an internal confirmation dialog panel. The dialog is a information-message dialog titled \"Message\".", "id": "14995"}
{"code": "public String toXMLString() throws FSMsgException {\n  return toXMLString(true,true);\n}\n", "nl": "Returns the string representation of this object.", "id": "57274"}
{"code": "public String toASCIIPropertyList(){\n  StringBuilder ascii=new StringBuilder();\n  toASCII(ascii,0);\n  ascii.append(NEWLINE);\n  return ascii.toString();\n}\n", "nl": "Generates a valid ASCII property list which has this NSArray as its root object. The generated property list complies with the format as described in <a href=\"https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/PropertyLists/OldStylePlists/OldStylePLists.html\"> Property List Programming Guide - Old-Style ASCII Property Lists</a>.", "id": "1688"}
{"code": "public final void update(byte b) throws SignatureException {\n  if (state == VERIFY || state == SIGN) {\n    engineUpdate(b);\n  }\n else {\n    throw new SignatureException(\"object not initialized for \" + \"signature or verification\");\n  }\n}\n", "nl": "Updates the data to be signed or verified by a byte.", "id": "58602"}
{"code": "public void scroll(int itemsToScroll,int time){\n  int distance=itemsToScroll * getItemHeight() - scrollingOffset;\n  scroller.scroll(distance,time);\n}\n", "nl": "Scroll the wheel", "id": "15072"}
{"code": "private void indentSmart() throws IOException {\n  if (!indented) {\n    indent();\n    indented=true;\n  }\n}\n", "nl": "Writes indent only once per line.", "id": "15228"}
{"code": "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  count=s.readInt();\n  value=(char[])s.readObject();\n}\n", "nl": "readObject is called to restore the state of the StringBuffer from a stream.", "id": "47121"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(documentcreatedocumentfragment.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "14452"}
{"code": "public static void writeStringToFile(File file,String data,Charset encoding) throws IOException {\n  writeStringToFile(file,data,encoding,false);\n}\n", "nl": "Writes a String to a file creating the file if it does not exist. NOTE: As from v1.3, the parent directories of the file will be created if they do not exist.", "id": "37364"}
{"code": "public static <K,V>Map<K,V> singletonMap(K key,V value){\n  return new SingletonMap<>(key,value);\n}\n", "nl": "Returns an immutable map, mapping only the specified key to the specified value.  The returned map is serializable.", "id": "46261"}
{"code": "public boolean isPaused(){\n  return paused;\n}\n", "nl": "Returns true if the group is in the \"paused\" state, false otherwise.", "id": "8788"}
{"code": "@Override public com.liferay.blade.samples.servicebuilder.model.Foo addFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){\n  return _fooLocalService.addFoo(foo);\n}\n", "nl": "Adds the foo to the database. Also notifies the appropriate model listeners.", "id": "10810"}
{"code": "public static boolean isOlderThan(String otherVersion){\n  return toLong(getVersion()) < toLong(otherVersion);\n}\n", "nl": "Returns <code>true</code> if this version is less than the specified version number.", "id": "48569"}
{"code": "private void genericPostOperation(PostOperationOperation operation,DN dn){\n  LDAPReplicationDomain domain=findDomain(dn,operation);\n  if (domain != null) {\n    domain.synchronize(operation);\n  }\n}\n", "nl": "Generic code for all the postOperation entry point.", "id": "8083"}
{"code": "@Override public void write(ASN1Writer stream) throws IOException {\n  stream.writeStartSequence(OP_TYPE_COMPARE_REQUEST);\n  stream.writeOctetString(dn);\n  stream.writeStartSequence();\n  stream.writeOctetString(attributeType);\n  stream.writeOctetString(assertionValue);\n  stream.writeEndSequence();\n  stream.writeEndSequence();\n}\n", "nl": "Writes this protocol op to an ASN.1 output stream.", "id": "20102"}
{"code": "public void handleButton3Request(RequestInvocationEvent event){\n  backTrail();\n  ServicesViewBean vb=(ServicesViewBean)getViewBean(ServicesViewBean.class);\n  passPgSessionMap(vb);\n  vb.forwardTo(getRequestContext());\n}\n", "nl": "Handles request to go back to previous page. This will result in going back to the realm properties view.", "id": "13994"}
{"code": "private static boolean hasResource(String path){\n  return NativeCodeLoader.class.getResource(path) != null;\n}\n", "nl": "Checks whether the given path has resource.", "id": "1964"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n}\n", "nl": "Ensures that the Directory Server is running.", "id": "23424"}
{"code": "public void removeUpdate(DocumentEvent e,Shape a,ViewFactory f){\n  super.removeUpdate(e,a,this);\n}\n", "nl": "Gives notification that something was removed from the document in a location that this view is responsible for. This replaces the ViewFactory with an implementation that calls through to the createTableRow and createTableCell methods.   If the element given to the factory isn't a table row or cell, the request is delegated to the factory passed as an argument.", "id": "4314"}
{"code": "private static String makeAttrAddAciLdif(String attr,String dn,String... acis){\n  return _makeAddAciLdif(attr,dn,acis);\n}\n", "nl": "Create a ldif entry with the specified variable ACI list. This method allows the attribute type to be specified in an argument.", "id": "27584"}
{"code": "@AfterClass public void clearReferences(){\n  cache=null;\n  configuration=null;\n}\n", "nl": "Clear out references to save memory.", "id": "47766"}
{"code": "static void checkUnsignedShort(final int value,final String msg){\n  if (value < 0 || value > 65535) {\n    throw new IllegalArgumentException(msg + \" (must be an unsigned short): \" + value);\n  }\n}\n", "nl": "Checks that the given value is an unsigned short.", "id": "25955"}
{"code": "public static void saveAsXML(NSObject root,OutputStream out) throws IOException {\n  OutputStreamWriter w=new OutputStreamWriter(out,\"UTF-8\");\n  w.write(root.toXMLPropertyList());\n  w.close();\n}\n", "nl": "Saves a property list with the given object as root in XML format into an output stream.", "id": "44720"}
{"code": "public static int mainDelete(String[] args){\n  return mainDelete(args,true,System.out,System.err);\n}\n", "nl": "Parses the provided command-line arguments and uses that information to run the ldapdelete tool.", "id": "48456"}
{"code": "public IStoreFactory findStoreFactory(Class<?> aClass){\n  return findStoreFactory(aClass.getName());\n}\n", "nl": "Find factory from class.", "id": "10362"}
{"code": "public Advice createAdvice(String xml) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ADVICE,xml);\n  if (obj == null) {\n    return new AdviceImpl(xml);\n  }\n else {\n    return (Advice)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>Advice</code> The return object is immutable.", "id": "43957"}
{"code": "protected boolean shouldAudit(ConfigOperation operation){\n  return auditEventPublisher.isAuditing(realm,CONFIG_TOPIC,EventName.AM_CONFIG_CHANGE) && isAudited(operation);\n}\n", "nl": "Determines if a given event should be audited", "id": "38271"}
{"code": "public AppLauncher args(String... args){\n  this.args.addAll(Arrays.asList(args));\n  return this;\n}\n", "nl": "Adds command line arguments which will be passed to the app on launch.", "id": "45630"}
{"code": "public X509Certificate generate(PrivateKey key) throws CertificateEncodingException, IllegalStateException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {\n  return generate(key,(SecureRandom)null);\n}\n", "nl": "generate an X509 certificate, based on the current issuer and subject using the default provider. <p> <b>Note:</b> this differs from the deprecated method in that the default provider is used - not \"BC\". </p>", "id": "17988"}
{"code": "public static int ints(int nbFields){\n  return 4 * nbFields;\n}\n", "nl": "Helper method that returns the number of bytes that would be used by the int fields when appended to a ByteArrayBuilder.", "id": "23576"}
{"code": "public boolean containsAttribute(Object name,Object value){\n  return value.equals(getAttribute(name));\n}\n", "nl": "Checks whether a given attribute name/value is defined.", "id": "10416"}
{"code": "protected byte[] serializeDeltaRequest(DeltaSession session,DeltaRequest deltaRequest) throws IOException {\n  session.lock();\n  try {\n    return deltaRequest.serialize();\n  }\n  finally {\n    session.unlock();\n  }\n}\n", "nl": "serialize DeltaRequest", "id": "13442"}
{"code": "private void assertInitializationAllowed() throws IllegalStateException {\n  if (getConnectionCalled) {\n    throw new IllegalStateException(GET_CONNECTION_CALLED);\n  }\n}\n", "nl": "Throws an IllegalStateException, if a PooledConnection has already been requested.", "id": "55937"}
{"code": "boolean hasBaseline(int row){\n  return (hasBaseline && baselineType[row] != 0);\n}\n", "nl": "Returns true if there is a baseline for the specified row.", "id": "52444"}
{"code": "public void stopSpinning(){\n  isSpinning=false;\n  mProgress=0.0f;\n  mTargetProgress=0.0f;\n  invalidate();\n}\n", "nl": "Turn off spin mode", "id": "34755"}
{"code": "public void handleButton2Request(RequestInvocationEvent event){\n  populateValues=true;\n  forwardTo();\n}\n", "nl": "Handles reset request.", "id": "32787"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.ExtensionType createExtensionType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.ExtensionTypeImpl();\n}\n", "nl": "Create an instance of ExtensionType", "id": "16171"}
{"code": "public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {\n  return toXMLString(includeNS,declareNS,false);\n}\n", "nl": "Creates a String representation of the <code>Response<code> object.", "id": "38961"}
{"code": "public void list(){\n  list(System.out,0);\n}\n", "nl": "Prints information about this thread group to the standard output. This method is useful only for debugging.", "id": "22257"}
{"code": "public void receiveTopoInfoFromRS(TopologyMsg topoMsg) throws DirectoryException, IOException {\n  replicationServerDomain.receiveTopoInfoFromRS(topoMsg,this,true);\n}\n", "nl": "Receives a topology msg.", "id": "2143"}
{"code": "private void handleRemoveException(Subject subject,String realm,String uuid,Exception e) throws EntitlementException {\n  OpenSSOLogger.log(ERROR,Level.INFO,FAILED_REMOVE_RESOURCE_TYPE,new String[]{realm,uuid,e.getMessage()},subject);\n  throw new EntitlementException(REMOVE_RESOURCE_TYPE_FAIL,e,uuid);\n}\n", "nl": "Log the exception and throw the appropriate <code>EntitlementException</code>.", "id": "7951"}
{"code": "public void run(){\n  allowToChange=false;\nsynchronized (actions) {\n    if (!actions.isEmpty()) {\n      for (Iterator iter=actions.iterator(); iter.hasNext(); ) {\n        ((ScheduleableAction)iter.next()).doAction();\n        if (removeElementAfterAction) {\n          iter.remove();\n        }\n      }\n    }\n  }\n  reset();\n}\n", "nl": "Implements for TaskRunnable. Run the function of ScheduleableAction on all the objects 1 by 1.", "id": "18376"}
{"code": "public JsonObject put(String key,Object value){\n  content.put(key,value);\n  return this;\n}\n", "nl": "Adds a key value pair to the json object.", "id": "40778"}
{"code": "public Future<?> pause(){\n  paused.set(true);\n  return scheduleRun();\n}\n", "nl": "Pauses the execution.", "id": "47218"}
{"code": "boolean isFilterUseEnabled(){\n  return filterUseEnabled;\n}\n", "nl": "Indicates if index filter statistics gathering is enabled.", "id": "41437"}
{"code": "@Override Object writeReplace(){\n  return super.writeReplace();\n}\n", "nl": "Writes the Chronology using a <a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.", "id": "44659"}
{"code": "public static <T>void fill(List<? super T> list,T object){\n  ListIterator<? super T> it=list.listIterator();\n  while (it.hasNext()) {\n    it.next();\n    it.set(object);\n  }\n}\n", "nl": "Fills the specified list with the specified element.", "id": "13506"}
{"code": "private String badArrive(long s){\n  return \"Attempted arrival of unregistered party for \" + stateToString(s);\n}\n", "nl": "Returns message string for bounds exceptions on arrival.", "id": "12316"}
{"code": "protected String toJson(Object object) throws IOException {\n  try {\n    return gson.toJson(object);\n  }\n catch (  JsonParseException jpe) {\n    IOException ioe=new IOException(\"Parse exception converting object to JSON\");\n    ioe.initCause(jpe);\n    throw ioe;\n  }\n}\n", "nl": "Convert object to a JSON string", "id": "44830"}
{"code": "private static int checkTypeSignature(final String signature,int pos){\nswitch (getChar(signature,pos)) {\ncase 'Z':\ncase 'C':\ncase 'B':\ncase 'S':\ncase 'I':\ncase 'F':\ncase 'J':\ncase 'D':\n    return pos + 1;\ndefault :\n  return checkFieldTypeSignature(signature,pos);\n}\n}\n", "nl": "Checks a type signature.", "id": "34968"}
{"code": "public static void addObjectClassToAdd(ObjectClass objectClass){\n  instance.addObjectClasses.add(objectClass);\n}\n", "nl": "Adds the provided objectclass to the set of objectclasses that will be added to the next add operation.", "id": "15606"}
{"code": "@Override public void mark(int limit){\n}\n", "nl": "This operation is not supported and does nothing.", "id": "981"}
{"code": "public static SearchRequest newSingleEntrySearchRequest(final DN name,final SearchScope scope,final Filter filter,final String... attributeDescriptions){\n  return newSearchRequest(name,scope,filter,attributeDescriptions).setSizeLimit(1);\n}\n", "nl": "Creates a new search request for a single entry, using the provided distinguished name, scope, and filter.", "id": "14877"}
{"code": "public int read() throws IOException {\n  ensureOpen();\n  if (pos < buf.length) {\n    return buf[pos++] & 0xff;\n  }\n  return super.read();\n}\n", "nl": "Reads the next byte of data from this input stream. The value byte is returned as an <code>int</code> in the range <code>0</code> to <code>255</code>. If no byte is available because the end of the stream has been reached, the value <code>-1</code> is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown. <p> This method returns the most recently pushed-back byte, if there is one, and otherwise calls the <code>read</code> method of its underlying input stream and returns whatever value that method returns.", "id": "23430"}
{"code": "public void replace(String valueString){\n  replace(ByteString.valueOfUtf8(valueString));\n}\n", "nl": "Replaces all the values in this attribute value with the specified attribute value.", "id": "39141"}
{"code": "public static synchronized void clearLoggersContents(){\n  ACCESS_TEXT_WRITER.clear();\n  ERROR_TEXT_WRITER.clear();\n  DEBUG_TEXT_WRITER.clear();\n  clearSystemOutContents();\n  clearSystemErrContents();\n}\n", "nl": "Clear everything written to the Access, Error, or Debug loggers.", "id": "12870"}
{"code": "public boolean isError(){\n  return ((errorMsg != null) && (errorMsg.length() > 0));\n}\n", "nl": "Returns <code>true</code> if there is an error while processing request.", "id": "45481"}
{"code": "public boolean isSatisfied(Object context) throws Exception {\n  return true;\n}\n", "nl": "Tells whether this given restriction is satisfied, this implementation will always return true.", "id": "26929"}
{"code": "@Before public void init() throws IOException {\n  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();\n  git=new Git(repository);\n  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true);\n  unchecked(null);\n}\n", "nl": "Prepare common variables to access the git repository.", "id": "49349"}
{"code": "public SecurityCollection findCollection(String name){\n  if (name == null)   return (null);\n  for (int i=0; i < collections.length; i++) {\n    if (name.equals(collections[i].getName()))     return (collections[i]);\n  }\n  return (null);\n}\n", "nl": "Return the web resource collection for the specified name, if any; otherwise, return <code>null</code>.", "id": "54713"}
{"code": "public void handleButton2Request(RequestInvocationEvent event){\n  propertySheetModel.clear();\n  populateValues=true;\n  forwardTo();\n}\n", "nl": "Handles reset request.", "id": "5191"}
{"code": "private boolean hasConfigChanged(JsonValue existingConfig,JsonValue newConfig){\n  return !existingConfig.isEqualTo(newConfig);\n}\n", "nl": "Compares the current configuration with a new configuration to determine if the configuration has changed", "id": "27604"}
{"code": "public static Node selectSingleNode(Node contextNode,String str) throws TransformerException {\n  return selectSingleNode(contextNode,str,contextNode);\n}\n", "nl": "Use an XPath string to select a single node. XPath namespace prefixes are resolved from the context node, which may not be what you want (see the next method).", "id": "43546"}
{"code": "public boolean canImageBeInline(){\n  Logger logger=LoggerFactory.getLogger(ImageData.class);\n  if (imageSize > 4096) {\n    logger.warn(LogMessageConstant.IMAGE_SIZE_CANNOT_BE_MORE_4KB);\n    return false;\n  }\n  if (imageMask != null) {\n    logger.warn(LogMessageConstant.IMAGE_HAS_MASK);\n    return false;\n  }\n  return true;\n}\n", "nl": "Checks if image can be inline", "id": "11241"}
{"code": "public void addAttributeNames(Set<String> names){\n  if (names != null) {\n    if (attributeNames == null) {\n      attributeNames=new HashSet<String>();\n    }\n    attributeNames.addAll(names);\n  }\n}\n", "nl": "Adds attribute names.", "id": "12803"}
{"code": "@org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) @Override public void sendResponse(Operation operation){\n}\n", "nl": "Sends a response to the client based on the information in the provided operation.", "id": "38849"}
{"code": "public Object clone() throws CloneNotSupportedException {\n  try {\n    return new SessionDescriptionImpl(this);\n  }\n catch (  SdpException e) {\n    throw new CloneNotSupportedException();\n  }\n}\n", "nl": "Creates and returns a deep copy of this object", "id": "30082"}
{"code": "@Override public boolean isDirty(){\n  return getDeltaRequest().getSize() > 0;\n}\n", "nl": "Has the object changed since last replication and is not in a locked state", "id": "39983"}
{"code": "public String generateUri(){\n  final String baseUri=uri;\n  if (baseUri == null)   return null;\n  if (baseUri.indexOf('?') != -1)   return baseUri;\n  final StringBuilder params=new StringBuilder();\n  addParams(params);\n  if (params.length() > 0)   return baseUri + '?' + params;\n else   return baseUri;\n}\n", "nl": "Generate full uri", "id": "31455"}
{"code": "public static int[] adjustSizes(int delta,SizeRequirements[] children){\n  return new int[0];\n}\n", "nl": "Adjust a specified array of sizes by a given amount.", "id": "36441"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsfederation.AuthenticationTokenElement createAuthenticationTokenElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.AuthenticationTokenElementImpl();\n}\n", "nl": "Create an instance of AuthenticationTokenElement", "id": "54173"}
{"code": "public void updateConfigurationObjectClass(ObjectClass oc,Schema schema){\n  configurationObjectClassPanel.update(oc,schema);\n  schemaElementPanel=configurationObjectClassPanel;\n  ((CardLayout)mainPanel.getLayout()).show(mainPanel,configurationObjectClassPanel.getTitle().toString());\n}\n", "nl": "Updates the contents of the panel with the provided configuration object class.", "id": "15147"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(elementremoveattributenomodificationallowederr.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "14838"}
{"code": "public void abortAnimation(){\n  finished=true;\n  currentMaxY=endMaxY;\n}\n", "nl": "Aborts the animation, setting the current scale value to the ending value.", "id": "52830"}
{"code": "protected void EmptyStack(){\n  for (int i=0; i < arg_count; i++)   args[i]=null;\n  arg_count=0;\n}\n", "nl": "Empty the Type2 Stack", "id": "24120"}
{"code": "static public void fail(String message){\n  throw new AssertionFailedError(message);\n}\n", "nl": "Fails a test with the given message.", "id": "48754"}
{"code": "public static AVA valueOf(final String ava){\n  return valueOf(ava,Schema.getDefaultSchema());\n}\n", "nl": "Parses the provided LDAP string representation of an AVA using the default schema.", "id": "26192"}
{"code": "@Override public synchronized void markAbandoned(){\n  state=PooledObjectState.ABANDONED;\n}\n", "nl": "Marks the pooled object as abandoned.", "id": "48525"}
{"code": "public Object clone() throws CloneNotSupportedException {\n  NodeSequence clone=(NodeSequence)super.clone();\n  if (null != m_iter)   clone.m_iter=(DTMIterator)m_iter.clone();\n  if (m_cache != null) {\n    m_cache.increaseUseCount();\n  }\n  return clone;\n}\n", "nl": "Get a clone of this iterator, but don't reset the iteration in the  process, so that it may be used from the current position. Note: Not a deep clone.", "id": "16280"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(createDocument06.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "14343"}
{"code": "public JsonValue invalidSession(){\n  return json(object(field(VALID,false)));\n}\n", "nl": "Creates a json representation to denote invalis session", "id": "57804"}
{"code": "public void create(JsonValue token) throws CoreTokenException {\n  cts.create(tokenAdapter.toToken(token));\n}\n", "nl": "Creates a token entry in the CTS.", "id": "23152"}
{"code": "public final int peek(){\n  try {\n    return m_map[m_firstFree - 1];\n  }\n catch (  ArrayIndexOutOfBoundsException e) {\n    throw new EmptyStackException();\n  }\n}\n", "nl": "Looks at the object at the top of this stack without removing it from the stack.", "id": "37582"}
{"code": "public boolean isSticky(){\n  return this.getItemType() == Material.PISTON_STICKY_BASE;\n}\n", "nl": "Checks if this piston base is sticky, and returns true if so", "id": "36505"}
{"code": "public static void registerFontFamily(String familyName,String fullName,String path){\n  fontRegisterProvider.registerFontFamily(familyName,fullName,path);\n}\n", "nl": "Register a font by giving explicitly the font family and name.", "id": "54085"}
{"code": "public String keyTypeName(Field field){\n  Type items=getApiaryConfig().getType(field.getTypeUrl());\n  return typeName(items,getField(items,\"key\"),\"name\");\n}\n", "nl": "Returns a name for a map field key's type.", "id": "672"}
{"code": "public String encodeKey(final String key){\n  if (StringUtils.isEmpty(key)) {\n    throw new IllegalArgumentException(\"Key cannot be empty\");\n  }\n  try {\n    return Hex.encodeHexString(key.getBytes(\"UTF-8\"));\n  }\n catch (  UnsupportedEncodingException uee) {\n    throw new IllegalStateException(uee);\n  }\n}\n", "nl": "Encode the given key to Hexadecimal.", "id": "5684"}
{"code": "private static void updateStrings(MethodNode mn,Map<String,MappedClass> mappings){\n}\n", "nl": "Updates strings when they are used in situations such as Class.forName / Reflection.", "id": "50264"}
{"code": "public void generateAccountStatusNotification(AccountStatusNotificationType notificationType,Entry userEntry,LocalizableMessage message,Map<AccountStatusNotificationProperty,List<String>> notificationProperties){\n  generateAccountStatusNotification(new AccountStatusNotification(notificationType,userEntry,message,notificationProperties));\n}\n", "nl": "Generates an account status notification for this user.", "id": "52840"}
{"code": "public void removeChangeListener(ChangeListener l){\n  listenerList.remove(ChangeListener.class,l);\n}\n", "nl": "Removes a <code>ChangeListener</code>.", "id": "29018"}
{"code": "public static boolean isXML11Invalid(int c){\n  return !isXML11Valid(c);\n}\n", "nl": "Returns true if the specified character is invalid.", "id": "13107"}
{"code": "public void close() throws IOException {\n  if (!closed) {\n    if (usesDefaultInflater)     inf.end();\n    in.close();\n    closed=true;\n  }\n}\n", "nl": "Closes this input stream and releases any system resources associated with the stream.", "id": "29103"}
{"code": "public void beginMonitoringOf(final InetAddress inetAddress,final int inode){\n  final long socketIdentifier=fromInet4AddressAndInode(inetAddress,inode);\n  candidateSockets.beginMonitoringSocketIdentifier(new InetSocketAddress(inetAddress,0),socketIdentifier);\n}\n", "nl": "Register interest in sockets listening to the specified address on any port. Thread-safe, can be called from multiple threads concurrently.", "id": "34189"}
{"code": "public boolean isValid(){\n  return (validCode == VALID_CODE_VALID);\n}\n", "nl": "Returns <code>true</code> if it is valid.", "id": "5972"}
{"code": "public boolean equals(Object other){\n  if (other == this) {\n    return true;\n  }\n  if (other instanceof TabStop) {\n    TabStop o=(TabStop)other;\n    return ((alignment == o.alignment) && (leader == o.leader) && (position == o.position));\n  }\n  return false;\n}\n", "nl": "Returns true if the tabs are equal.", "id": "16621"}
{"code": "public String toString(){\n  return \"[My test Certificate, type: \" + getType() + \"]\";\n}\n", "nl": "Returns formatted <code>String</code> describing <code>MyCertificate</code> object", "id": "30574"}
{"code": "public boolean equals(Object object){\n  return (super.equals(object) && object instanceof NumberOfInterveningJobs);\n}\n", "nl": "Returns whether this number of intervening jobs attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: <OL TYPE=1> <LI> <CODE>object</CODE> is not null. <LI> <CODE>object</CODE> is an instance of class NumberOfInterveningJobs. <LI> This number of intervening jobs attribute's value and <CODE>object</CODE>'s value are equal. </OL>", "id": "32427"}
{"code": "public boolean removeServerLibraries(){\n  return removeServerLibrariesArg.isPresent();\n}\n", "nl": "Tells whether the user specified to remove library files. This method must be called after calling parseArguments.", "id": "10848"}
{"code": "public Iterator<Integer> ldapIterator(){\n  return ldapStates.keySet().iterator();\n}\n", "nl": "Returns an iterator on the serverId of the Replicas for which we have monitoring data.", "id": "11463"}
{"code": "public static byte[] decode(byte[] source) throws Base64DecoderException {\n  return decode(source,0,source.length);\n}\n", "nl": "Decodes Base64 content in byte array format and returns the decoded byte array.", "id": "27619"}
{"code": "public void addButtonActionListener(ButtonActionListener l){\n  buttonListeners.add(l);\n}\n", "nl": "Adds a button listener.  All the button listeners will be notified when the buttons are clicked (by the user or programatically).", "id": "23549"}
{"code": "public void removeFromParent(){\n  MutableTreeNode parent=(MutableTreeNode)getParent();\n  if (parent != null) {\n    parent.remove(this);\n  }\n}\n", "nl": "Removes the subtree rooted at this node from the tree, giving this node a null parent.  Does nothing if this node is the root of its tree.", "id": "30359"}
{"code": "@Override public boolean markSupported(){\n  return markSupported;\n}\n", "nl": "Indicates whether <i>mark</i> is supported.", "id": "50389"}
{"code": "public void flushBase64() throws java.io.IOException {\n  if (position > 0) {\n    if (encode) {\n      out.write(encode3to4(b4,buffer,position,options));\n      position=0;\n    }\n else {\n      throw new java.io.IOException(\"Base64 input not properly padded.\");\n    }\n  }\n}\n", "nl": "Method added by PHIL. [Thanks, PHIL. -Rob] This pads the buffer without closing the stream.", "id": "36450"}
{"code": "static boolean createDirectory(File f) throws IOException {\n  if (f.exists()) {\n    return f.isDirectory();\n  }\n  return f.mkdirs();\n}\n", "nl": "Creates the a directory in the provided path.", "id": "30307"}
{"code": "@Override public boolean isRequestedSessionIdValid(){\n  return this._getHttpServletRequest().isRequestedSessionIdValid();\n}\n", "nl": "The default behavior of this method is to return isRequestedSessionIdValid() on the wrapped request object.", "id": "23251"}
{"code": "protected <V>PagedRequest<V> createPagedRequest(){\n  return createPagedRequest(PAGE_FIRST,PAGE_SIZE);\n}\n", "nl": "Unified paged request creation method that all sub-classes should use so overriding classes can extend and configure the default request.", "id": "14378"}
{"code": "public boolean isContentValid(){\n  return contains(\"iss\",\"sub\",\"aud\",\"exp\") && !isExpiryUnreasonable() && !isExpired()&& !isNowBeforeNbf()&& !isIssuedAtUnreasonable();\n}\n", "nl": "Verifies that the JWT is valid by: <ul> <li>ensuring the JWT contains the 'iss', 'sub', 'aud' and 'exp' claims</li> <li>ensuring the JWT expiry is not unreasonably far in the future</li> <li>ensuring the JWT has not expired</li> <li>ensuring the JWT is not being used before its 'not before time'</li> <li>ensuring the JWT issued at time is not unreasonably far in the past</li> </ul>", "id": "12784"}
{"code": "@Override public void sendSearchEntry(SearchOperation searchOperation,SearchResultEntry searchEntry) throws DirectoryException {\n  ((InternalSearchOperation)searchOperation).addSearchEntry(searchEntry);\n}\n", "nl": "Sends the provided search result entry to the client.", "id": "16884"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodecommentnodename.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "27062"}
{"code": "public void removeTreeModelListener(TreeModelListener l){\n  listenerList.remove(TreeModelListener.class,l);\n}\n", "nl": "Removes a listener previously added with <B>addTreeModelListener()</B>.", "id": "47997"}
{"code": "@AfterClass public void cleanUp() throws Exception {\n  TestCaseUtils.deleteDirectory(tempDir);\n}\n", "nl": "Clean up method.", "id": "18084"}
{"code": "public static ScheduleType createCron(String cron){\n  ScheduleType schedule=new ScheduleType();\n  schedule.type=Type.LAUNCH_PERIODICALLY;\n  schedule.cronValue=cron;\n  schedule.toString=schedule.calculateToString();\n  schedule.hashCode=schedule.calculateHashCode();\n  return schedule;\n}\n", "nl": "Returns a schedule instance that launches the task using a cron schedule.", "id": "37592"}
{"code": "public void seek(long pos) throws IOException {\n  checkClosed();\n  if (pos < flushedPos) {\n    throw new IndexOutOfBoundsException(\"pos < flushedPos!\");\n  }\n  bitOffset=0;\n  raf.seek(pos);\n  streamPos=raf.getFilePointer();\n}\n", "nl": "Sets the current stream position and resets the bit offset to 0.  It is legal to seeking past the end of the file; an <code>EOFException</code> will be thrown only if a read is performed.  The file length will not be increased until a write is performed.", "id": "55486"}
{"code": "public static PasswordModifyExtendedResult newPasswordModifyExtendedResult(final ResultCode resultCode){\n  Reject.ifNull(resultCode);\n  return new PasswordModifyExtendedResultImpl(resultCode);\n}\n", "nl": "Creates a new password modify extended result using the provided result code, and no generated password.", "id": "56555"}
{"code": "public DTMAxisIterator includeSelf(){\n  _includeSelf=true;\n  return this;\n}\n", "nl": "Set the flag to include the start node in the iteration.", "id": "32589"}
{"code": "public int count(){\n  return incomplete_list.size();\n}\n", "nl": "Returns the number of incomplete of this net.", "id": "47816"}
{"code": "public static void putProperty(String key,String value){\n  get().properties.put(key,value);\n}\n", "nl": "Add a property to the request context. Changing a property for the same transaction in separate threads will only affect the property on the current thread. Properties are copied when the context is passed on from one thread to another.", "id": "39311"}
{"code": "public Builder removeAllAuxiliaryObjectClasses(){\n  this.auxiliaryClassOIDs.clear();\n  return this;\n}\n", "nl": "Clears the list of auxiliary object classes that entries subject to this DIT content rule may belong to.", "id": "46376"}
{"code": "@Override public boolean isRootNode(){\n  return isRootNode;\n}\n", "nl": "Tells whether this is a root node or not.", "id": "45621"}
{"code": "private static boolean isUnreservedCharacter(char p_char){\n  return (isAlphanum(p_char) || MARK_CHARACTERS.indexOf(p_char) != -1);\n}\n", "nl": "Determine whether a char is an unreserved character.", "id": "47238"}
{"code": "void handleResponse(JSONObject response,int requestType) throws JSONException {\n  try {\n    mBaseModel.parseAndNotifyResponse(response,requestType);\n  }\n catch (  Exception e) {\n    Toast.makeText(mContext,response.getString(NetworkConstants.ERROR_MESSAGE),Toast.LENGTH_LONG).show();\n    e.printStackTrace();\n  }\n}\n", "nl": "Handle response(JSONObject) as per requirement", "id": "46464"}
{"code": "static public boolean hasList(Class<?> sipHdrClass){\n  if (!initialized)   initializeListMap();\n  return headerListTable.get(sipHdrClass) != null;\n}\n", "nl": "Return true if this has an associated list object.", "id": "39302"}
{"code": "void appendTextChild(int m_char_current_start,int contentLength){\n  int w0=TEXT_NODE;\n  int w1=currentParent;\n  int w2=m_char_current_start;\n  int w3=contentLength;\n  int ourslot=appendNode(w0,w1,w2,w3);\n  previousSibling=ourslot;\n}\n", "nl": "Append a text child at the current insertion point. Assumes that the actual content of the text has previously been appended to the m_char buffer (shared with the builder).", "id": "27376"}
{"code": "@Override public int read() throws IOException {\n  while (in != null) {\n    int result=in.read();\n    if (result >= 0) {\n      return result;\n    }\n    nextStream();\n  }\n  return -1;\n}\n", "nl": "Reads a single byte from this sequence of input streams and returns it as an integer in the range from 0 to 255. It tries to read from the current stream first; if the end of this stream has been reached, it reads from the next one. Blocks until one byte has been read, the end of the last input stream in the sequence has been reached, or an exception is thrown.", "id": "35622"}
{"code": "public void reject(){\n  accepted=false;\n  throw new LicenseRejectedException(this);\n}\n", "nl": "Rejects the license agreement.", "id": "45710"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.MsgContactElement createMsgContactElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.MsgContactElementImpl();\n}\n", "nl": "Create an instance of MsgContactElement", "id": "46656"}
{"code": "public void remove(Component comp){\n  if (comp == rootPane) {\n    super.remove(comp);\n  }\n else {\n    getContentPane().remove(comp);\n  }\n}\n", "nl": "Removes the specified component from the container. If <code>comp</code> is not the <code>rootPane</code>, this will forward the call to the <code>contentPane</code>. This will do nothing if <code>comp</code> is not a child of the <code>JFrame</code> or <code>contentPane</code>.", "id": "14842"}
{"code": "public void warn(SourceLocator srcLctr,String msg) throws TransformerException {\n  warn(srcLctr,null,null,msg,null);\n}\n", "nl": "Warn the user of a problem.", "id": "7436"}
{"code": "public void init(boolean forEncryption,CipherParameters params){\n  if (params instanceof KeyParameter) {\n    WorkingKey=generateWorkingKey(((KeyParameter)params).getKey(),forEncryption);\n    this.forEncryption=forEncryption;\n    return;\n  }\n  throw new IllegalArgumentException(\"invalid parameter passed to AES init - \" + params.getClass().getName());\n}\n", "nl": "initialise an AES cipher.", "id": "23453"}
{"code": "@Override public void init(int mode,Key key,AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException {\n  Utils.checkNotNull(key);\n  Utils.checkNotNull(params);\n  cipher.init(mode,key,params);\n}\n", "nl": "Initializes the cipher with mode, key and iv.", "id": "57883"}
{"code": "private static float centerFromEnd(int[] stateCount,int end){\n  return (float)(end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0f;\n}\n", "nl": "Given a count of black/white/black/white/black pixels just seen and an end position, figures the location of the center of this run.", "id": "7139"}
{"code": "public static void dropAllTables(SQLiteDatabase db,boolean ifExists){\n  UserDao.dropTable(db,ifExists);\n}\n", "nl": "Drops underlying database table using DAOs.", "id": "18970"}
{"code": "static public void assertTrue(boolean condition){\n  assertTrue(null,condition);\n}\n", "nl": "Asserts that a condition is true. If it isn't it throws an AssertionFailedError.", "id": "23583"}
{"code": "public boolean containsKey(Object key){\n  return map.containsKey(key);\n}\n", "nl": "Checks if the map contains the key.", "id": "57270"}
{"code": "private boolean compareAndIncrementWorkerCount(int expect){\n  return ctl.compareAndSet(expect,expect + 1);\n}\n", "nl": "Attempts to CAS-increment the workerCount field of ctl.", "id": "14994"}
{"code": "public byte[] nextByteArray(final int length){\n  final byte[] result=new byte[length];\n  System.arraycopy(byteArray,bytes.position(),result,0,length);\n  bytes.skip(length);\n  return result;\n}\n", "nl": "Return a new byte array containing the requested number of bytes.", "id": "57353"}
{"code": "public void postRegister(Boolean registrationDone){\n}\n", "nl": "Allows the timer MBean to perform any operations needed after having been registered in the MBean server or after the registration has failed. <P> Not used in this context.", "id": "32104"}
{"code": "public StatusDetail createStatusDetail() throws XACMLException {\n  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.STATUS_DETAIL);\n  if (object == null) {\n    return new StatusDetailImpl();\n  }\n else {\n    return (StatusDetail)object;\n  }\n}\n", "nl": "Returns a new instance of <code>StatusDetail</code>.", "id": "36355"}
{"code": "public static boolean isHoneycombTablet(Context context){\n  return isHoneycomb() && isTablet(context);\n}\n", "nl": "Determine if the device is a HoneyComb tablet.", "id": "53968"}
{"code": "static void validate(ActionSchema as,Set values) throws InvalidNameException {\n  if (!validateType(as,values) || !validateSyntax(as,values)) {\n    PolicyManager.debug.error(\"In validate action name: invalid values\");\n    throw (new InvalidNameException(ResBundleUtils.rbName,\"invalid_action_value\",null,as.getName(),PolicyException.POLICY));\n  }\n}\n", "nl": "Validates the values against the action schema", "id": "50677"}
{"code": "static ComputedDayOfField ofWeekOfWeekBasedYearField(WeekFields weekDef){\n  return new ComputedDayOfField(\"WeekOfWeekBasedYear\",weekDef,WEEKS,IsoFields.WEEK_BASED_YEARS,WEEK_OF_WEEK_BASED_YEAR_RANGE);\n}\n", "nl": "Returns a field to access the week of week-based-year, computed based on a WeekFields.", "id": "56537"}
{"code": "public void runTest() throws Throwable {\n  Document doc;\n  Element element;\n  String elementId=\"---\";\n  doc=(Document)load(\"staffNS\",false);\n  element=doc.getElementById(elementId);\n  assertNull(\"documentgetelementbyid01\",element);\n}\n", "nl": "Runs the test case.", "id": "9591"}
{"code": "@Deprecated public void addAdvices(ConditionDecision decision){\n  if (decision != null) {\n    Map<String,Set<String>> otherAdvices=decision.getAdvice();\n    if (otherAdvices != null && !otherAdvices.isEmpty()) {\n      advice.putAll(otherAdvices);\n    }\n  }\n}\n", "nl": "Adds an advice (from another <code>ConditionDecision</code>) to this <code>ConditionDecision</code>. <p/> Deprecated method as a given instance should be immutable.", "id": "57732"}
{"code": "Object cloneTimerNotification(){\n  TimerNotification clone=new TimerNotification(this.getType(),this.getSource(),this.getSequenceNumber(),this.getTimeStamp(),this.getMessage(),notificationID);\n  clone.setUserData(this.getUserData());\n  return clone;\n}\n", "nl": "Creates and returns a copy of this object.", "id": "50478"}
{"code": "@AfterClass @Override public void classCleanUp() throws Exception {\n  callParanoiaCheck=false;\n  super.classCleanUp();\n  replicationServer.getChangelogDB().removeDB();\n  shutdown();\n  paranoiaCheck();\n}\n", "nl": "Clean up the environment.", "id": "3461"}
{"code": "@Override public String toString(){\n  StringBuilder risul=new StringBuilder(1000);\n  risul.append(classname);\n  risul.append(\" available object: board_panel\");\n  return risul.toString();\n}\n", "nl": "Used to have some meaningful info on this object", "id": "49545"}
{"code": "public int hashCode(){\n  return address.hashCode() + ((broadcast != null) ? broadcast.hashCode() : 0) + maskLength;\n}\n", "nl": "Returns a hashcode for this Interface address.", "id": "35967"}
{"code": "public Vector<Object> toValuesVector(){\n  final Vector<Object> values=new Vector<Object>();\n  for (  final JKTableColumnValue value : this.columnsValues) {\n    values.add(value);\n  }\n  return values;\n}\n", "nl": "To values vector.", "id": "48204"}
{"code": "private void writeObject(java.io.ObjectOutputStream stream) throws IOException {\n  if (stubDelegate == null) {\n    setDefaultDelegate();\n  }\n  if (stubDelegate != null) {\n    stubDelegate.writeObject(this,stream);\n  }\n}\n", "nl": "Serialization method to save the IOR state.", "id": "22575"}
{"code": "protected Request createRiInviteRequest(String contentType,String contentSubType,Object content) throws TckInternalError {\n  try {\n    return createRequest(Request.INVITE,riAddressFactory,riHeaderFactory,riMessageFactory,riSipProvider,tiSipProvider,contentType,contentSubType,content);\n  }\n catch (  Throwable exc) {\n    throw new TckInternalError(\"Failed to create an RI->TI invite request\",exc);\n  }\n}\n", "nl": "Creates an invite request object using the RI. This invite request is meant to be sent to the TI", "id": "4103"}
{"code": "private boolean skipAccessCheck(Entry e){\n  return ClientConnection.hasPrivilege(e,Privilege.BYPASS_ACL);\n}\n", "nl": "Check to see if the specified entry has the specified privilege.", "id": "50721"}
{"code": "private boolean complete_expansion_room(ExpandRoomFreespaceIncomplete p_incomplete_room){\n  Collection<ExpandRoomFreespaceComplete> completed_rooms=autoroute_engine.complete_expansion_room(p_incomplete_room);\n  return (completed_rooms.size() > 0);\n}\n", "nl": "Returns true, if the completion succeeded.", "id": "35127"}
{"code": "void updateTotalCount(final WriteableTransaction txn,final long delta){\n  addToCounter(txn,TOTAL_COUNT_ENTRY_ID,delta);\n}\n", "nl": "Updates the total number of entries which should be the sum of all counters.", "id": "2471"}
{"code": "public static InputStream toInputStream(CharSequence input,Charset encoding){\n  return toInputStream(input.toString(),encoding);\n}\n", "nl": "Convert the specified CharSequence to an input stream, encoded as bytes using the specified character encoding.", "id": "6379"}
{"code": "public RecordedRequest takeRequest() throws InterruptedException {\n  return requestQueue.take();\n}\n", "nl": "Awaits the next HTTP request, removes it, and returns it. Callers should use this to verify the request sent was as intended.", "id": "21286"}
{"code": "private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, javax.xml.transform.TransformerException {\n  try {\n    stream.defaultReadObject();\n    m_clones=new IteratorPool(this);\n  }\n catch (  ClassNotFoundException cnfe) {\n    throw new javax.xml.transform.TransformerException(cnfe);\n  }\n}\n", "nl": "Read the object from a serialization stream.", "id": "3170"}
{"code": "public char last(){\n  if (start == end) {\n    return DONE;\n  }\n  offset=end - 1;\n  return string.charAt(offset);\n}\n", "nl": "Sets the current position to the end index - 1 and returns the character at the new position.", "id": "14780"}
{"code": "public AuditEvent convertToAuditEvent(PersistentAuditEvent persistentAuditEvent){\n  Instant instant=persistentAuditEvent.getAuditEventDate().atZone(ZoneId.systemDefault()).toInstant();\n  return new AuditEvent(Date.from(instant),persistentAuditEvent.getPrincipal(),persistentAuditEvent.getAuditEventType(),convertDataToObjects(persistentAuditEvent.getData()));\n}\n", "nl": "Convert a PersistentAuditEvent to an AuditEvent", "id": "56852"}
{"code": "public void reset() throws IOException {\nsynchronized (lock) {\n    ensureOpen();\n    next=mark;\n  }\n}\n", "nl": "Resets the stream to the most recent mark, or to the beginning of the string if it has never been marked.", "id": "6787"}
{"code": "public ServiceRouteHeader createServiceRouteHeader(Address address){\n  if (address == null)   throw new NullPointerException(\"null address!\");\n  ServiceRoute serviceRoute=new ServiceRoute();\n  serviceRoute.setAddress(address);\n  return serviceRoute;\n}\n", "nl": "Service-Route header", "id": "57005"}
{"code": "@After public void clean(){\n  mute(null);\n  mute(null);\n  mute(null);\n}\n", "nl": "Cleanups after each tests.", "id": "46591"}
{"code": "public static void putStringSet(String key,Set<String> values){\n  if (mSharedPreferences == null) {\n    return;\n  }\n  Editor editor=mSharedPreferences.edit();\n  editor.putStringSet(key,values);\n  editor.apply();\n}\n", "nl": "Put a set of String values in the preferences editor.", "id": "840"}
{"code": "public boolean isPropertyMapSettable(SSOToken caller,Map<String,String> properties){\n  for (  Map.Entry<String,String> property : properties.entrySet()) {\n    try {\n      SessionUtils.checkPermissionToSetProperty(caller,property.getKey(),property.getValue());\n    }\n catch (    SessionException e) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Queries whether all the properties in the properties map are settable, recording the key and value of the attempted setting. Returns true if all properties are settable, returns false if any one of them is not.", "id": "37171"}
{"code": "public Builder names(final Collection<String> names){\n  this.names.addAll(names);\n  return this;\n}\n", "nl": "Adds the provided user friendly names.", "id": "51526"}
{"code": "public static void updateAuthenticatorsList(Set moduleName) throws UpgradeException {\n  addAttributeDefaultValues(AUTH_SERVICE_NAME,null,SCHEMA_TYPE_GLOBAL,AUTH_ATTR_NAME,moduleName);\n}\n", "nl": "Adds module names to the list of authenticators in core auth service.", "id": "43616"}
{"code": "public String toLDIFString(){\n  StringBuilder buffer=new StringBuilder();\n  for (  StringBuilder ldifLine : toLDIF()) {\n    buffer.append(ldifLine);\n    buffer.append(EOL);\n  }\n  return buffer.toString();\n}\n", "nl": "Retrieves a string representation of this entry in LDIF form.", "id": "22865"}
{"code": "private int toInteger(JsonValue value){\n  if (value.isString()) {\n    try {\n      return Integer.parseInt(value.asString());\n    }\n catch (    NumberFormatException ex) {\n    }\n  }\n  return value.asInteger();\n}\n", "nl": "Try to get or parse JsonValue as int.", "id": "46202"}
{"code": "public boolean checkTable(Identifier id){\n  boolean dbExists;\n  dbExists=tables.exists(id);\n  return dbExists;\n}\n", "nl": "method to check if the table provided in the query url exists", "id": "19754"}
{"code": "@Override public void showProgress(){\n  if (mProgressDialog == null) {\n    mProgressDialog=ProgressDialog.show(getActivity(),getString(R.string.dialog_loading_title),getString(R.string.dialog_loading_shots),true);\n  }\n  mProgressDialog.show();\n}\n", "nl": "Browse MVP View method implementation", "id": "2855"}
{"code": "public boolean isDatabaseIndex(){\n  return isDatabaseIndex;\n}\n", "nl": "Tells whether this is a database index or not. Database indexes are not modifiable and for internal use only.", "id": "4892"}
{"code": "public void makeImmutable(){\n  if (isMutable) {\n    if ((nameID != null) && (nameID.isMutable())) {\n      nameID.makeImmutable();\n    }\n    if ((extensions != null) && (extensions.isMutable())) {\n      extensions.makeImmutable();\n    }\n    isMutable=false;\n  }\n}\n", "nl": "Makes this object immutable.", "id": "29659"}
{"code": "public static void clearDnsCache(){\n  addressCache.clear();\n}\n", "nl": "Removes all entries from the VM's DNS cache. This does not affect the C library's DNS cache, nor any caching DNS servers between you and the canonical server.", "id": "32626"}
{"code": "private void hideBothNavigationBarAndStatusBar(){\n  View decorView=getWindow().getDecorView();\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n    int uiOptions=View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN;\n    decorView.setSystemUiVisibility(uiOptions);\n  }\n}\n", "nl": "// Hide both the navigation bar and the status bar. // SYSTEM_UI_FLAG_FULLSCREEN is only available on Android 4.1 and higher, but as // a general rule, you should design your app to hide the status bar whenever you // hide the navigation bar.", "id": "10731"}
{"code": "public File createHistoryBackupDirectory() throws IOException {\n  File backupDirectory=new File(getHistoryDirectory(),Long.toString(System.currentTimeMillis()));\n  if (backupDirectory.exists()) {\n    backupDirectory.delete();\n  }\n  if (!backupDirectory.mkdirs()) {\n    throw new IOException(\"failed to create history backup directory\");\n  }\n  return backupDirectory;\n}\n", "nl": "Creates a new directory in the history directory appropriate for backing up an installation during an upgrade.", "id": "23262"}
{"code": "public Component add(Component c){\n  ensurePopupMenuCreated();\n  popupMenu.add(c);\n  return c;\n}\n", "nl": "Appends a component to the end of this menu. Returns the component added.", "id": "23248"}
{"code": "public void add(String param){\n  fStrings.add(param);\n}\n", "nl": "DOM Internal: Add a <code>DOMString</code> to the list.", "id": "53753"}
{"code": "@Override public void noAntennaCancel(){\n  Log.d(TAG,\" onClick Negative\");\n  if (mService != null && !mService.isInLockTaskMode()) {\n    exitService();\n  }\n else {\n    Log.d(TAG,\"No need exit Service and Activity cause current is lock mode\");\n  }\n}\n", "nl": "No antenna cancel to operate", "id": "46401"}
{"code": "public void logModifyRequest(ModifyOperation modifyOperation){\n}\n", "nl": "Writes a message to the access logger with information about the modify request associated with the provided modify operation. <p> The default implementation is to not log anything.", "id": "10093"}
{"code": "@Override public void close() throws IOException {\n  if (in != null) {\n    in.close();\n    in=null;\n    buf=null;\n  }\n}\n", "nl": "Closes this stream. This implementation closes the source stream and releases the pushback buffer.", "id": "1811"}
{"code": "protected void finalize() throws Throwable {\n  clear();\n}\n", "nl": "The finalizer clears the sensitive information before releasing it to the garbage collector, but it should have been cleared manually before this point anyway.", "id": "26293"}
{"code": "public static Options defaultOptions(Context context){\n  Options defaultOptions=Options.defaultOptions();\n  if (context.containsContext(TransactionIdContext.class)) {\n    TransactionIdContext txContext=context.asContext(TransactionIdContext.class);\n    defaultOptions.set(TRANSACTIONID_OPTION,txContext.getTransactionId());\n  }\n  return defaultOptions;\n}\n", "nl": "Setup the default options to create a LdapClient and adds the transactionId if any in the context's chain.", "id": "15921"}
{"code": "public static TestSSLContext create(){\n  return create(TestKeyStore.getClient(),TestKeyStore.getServer());\n}\n", "nl": "Usual TestSSLContext creation method, creates underlying SSLContext with certificate and key as well as SSLServerSocket listening provided host and port.", "id": "26115"}
{"code": "public final int _nextsib2(int identity){\n  if (identity < m_blocksize)   return m_nextsib_map0[identity];\n else   return m_nextsib_map[identity >>> m_SHIFT][identity & m_MASK];\n}\n", "nl": "The optimized version of DTMDefaultBase._nextsib().", "id": "52512"}
{"code": "public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {\n  AgentsViewBean vb=(AgentsViewBean)getViewBean(AgentsViewBean.class);\n  passPgSessionMap(vb);\n  vb.forwardTo(getRequestContext());\n}\n", "nl": "Handles return to agent configuration page request.", "id": "9355"}
{"code": "public void uninstallUI(JComponent a){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);\n  }\n}\n", "nl": "Invokes the <code>uninstallUI</code> method on each UI handled by this object.", "id": "7387"}
{"code": "public Point toViewCoordinates(Point p){\n  return new Point(p);\n}\n", "nl": "Converts a point in pixel coordinates to view coordinates. Subclasses of viewport that support \"logical coordinates\" will override this method.", "id": "24816"}
{"code": "public boolean removeElement(Object obj){\n  int index=indexOf(obj);\n  boolean rv=delegate.removeElement(obj);\n  if (index >= 0) {\n    fireIntervalRemoved(this,index,index);\n  }\n  return rv;\n}\n", "nl": "Removes the first (lowest-indexed) occurrence of the argument from this list.", "id": "9154"}
{"code": "private static String parse(JsonValue base){\n  if (!base.isString()) {\n    return null;\n  }\n  return buildString(base.asString());\n}\n", "nl": "Start the string parsing. If base is not a string, will return null.", "id": "11042"}
{"code": "public static boolean canUseAsPort(int port){\n  return SetupUtils.canUseAsPort(port);\n}\n", "nl": "Returns whether the provided port is free and we can use it.", "id": "1637"}
{"code": "public void unlock(String username){\n  registerAuthSuccess(username);\n}\n", "nl": "Unlock the specified username. This will remove all records of authentication failures for this user.", "id": "45915"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifierType createNameIdentifierType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl();\n}\n", "nl": "Create an instance of NameIdentifierType", "id": "9083"}
{"code": "@Override public MapboxDirections build() throws ServicesException {\n  validateAccessToken(accessToken);\n  if (coordinates == null || coordinates.size() < 2) {\n    throw new ServicesException(\"You should provide at least two coordinates (from/to).\");\n  }\n  if (radiuses != null && radiuses.length != coordinates.size()) {\n    throw new ServicesException(\"There must be as many radiuses as there are coordinates.\");\n  }\n  return new MapboxDirections(this);\n}\n", "nl": "Build method", "id": "43502"}
{"code": "boolean matchMode(QName m1){\n  return matchModes(m1,m_template.getMode());\n}\n", "nl": "Tell if two modes match according to the rules of XSLT.", "id": "30147"}
{"code": "public void runTest() throws Throwable {\n  Document doc;\n  NodeList childList;\n  doc=(Document)load(\"staffNS\",false);\n  childList=doc.getElementsByTagNameNS(\"**\",\"*\");\n  assertSize(\"documentgetelementsbytagnameNS03\",0,childList);\n}\n", "nl": "Runs the test case.", "id": "40155"}
{"code": "public boolean equals(Object o){\n  if (o == null) {\n    return false;\n  }\n  if (this == o) {\n    return true;\n  }\n  if (!(o instanceof FederationPrincipal)) {\n    return false;\n  }\n  FederationPrincipal that=(FederationPrincipal)o;\n  if (this.getName().equals(that.getName())) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Compares the specified Object with this <code>FederationPrincipal</code> for equality.  Returns true if the given object is also a <code>FederationPrincipal</code> and the two FederationPrincipals have the same username. <p>", "id": "2171"}
{"code": "public XACMLAuthzDecisionQuery createXACMLAuthzDecisionQuery(){\n  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.XACML_AUTHZ_DECISION_QUERY);\n  if (obj == null) {\n    return new XACMLAuthzDecisionQueryImpl();\n  }\n else {\n    return (XACMLAuthzDecisionQuery)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>XACMLAuthzDecisionQuery</code>. Caller may need to call setters of the class to populate the object.", "id": "41744"}
{"code": "private void grow(){\n  int oldCapacity=queue.length;\n  int newCapacity=oldCapacity + (oldCapacity >> 1);\n  if (newCapacity < 0)   newCapacity=Integer.MAX_VALUE;\n  queue=Arrays.copyOf(queue,newCapacity);\n}\n", "nl": "Resizes the heap array.  Call only when holding lock.", "id": "6749"}
{"code": "public void recompose(StylesheetRoot root){\n  root.recomposeNamespaceAliases(this);\n}\n", "nl": "This function is called to recompose() all of the namespace alias properties elements.", "id": "49674"}
{"code": "public Collection engineGenerateCertificates(InputStream inStream) throws CertificateException {\n  java.security.cert.Certificate cert;\n  List certs=new ArrayList();\n  while ((cert=engineGenerateCertificate(inStream)) != null) {\n    certs.add(cert);\n  }\n  return certs;\n}\n", "nl": "Returns a (possibly empty) collection view of the certificates read from the given input stream inStream.", "id": "9652"}
{"code": "void clear(){\n  offset=intLen=0;\n  for (int index=0, n=value.length; index < n; index++)   value[index]=0;\n}\n", "nl": "Clear out a MutableBigInteger for reuse.", "id": "45914"}
{"code": "protected void NCName(){\n  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);\n  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);\n  nextToken();\n}\n", "nl": "NCName ::=  (Letter | '_') (NCNameChar) NCNameChar ::=  Letter | Digit | '.' | '-' | '_' | CombiningChar | Extender", "id": "54757"}
{"code": "public ByteStringBuilder appendCompactUnsigned(long value){\n  Reject.ifFalse(value >= 0,\"value must be >= 0\");\n  try {\n    PackedLong.writeCompactUnsigned(asOutputStream(),value);\n  }\n catch (  IOException e) {\n    throw new IllegalStateException(e);\n  }\n  return this;\n}\n", "nl": "Appends the compact encoded bytes of the provided unsigned long to this byte string builder. This method allows to encode unsigned long up to 56 bits using fewer bytes (from 1 to 8) than append(long). The encoding has the important property that it preserves ordering, so it can be used for keys.", "id": "12119"}
{"code": "public String toString(){\n  return signature + ' ' + name;\n}\n", "nl": "Return a string that describes this field.", "id": "49464"}
{"code": "public void store(SSOToken token,String name) throws SSOException, NoPermissionException, NameAlreadyExistsException, NameNotFoundException, PolicyException {\n  PolicyManager pm=new PolicyManager(token,name);\n  pm.addPolicy(this);\n}\n", "nl": "Stores the policy object in a persistent data store under the organization, sub-organization or a container object, specified as a parameter. The organization, sub-organization, or the container can be either a LDAP distinguished name (<code>dn</code>) or slash \"/\" separated as per SMS. This method uses the <code>SSOToken</code> provided to perform the store operation, and hence if the single sign token has expired <code>SSOException</code> will be thrown, and if the user does not have the required privileges <code>NoPermissionException</code> exception will be thrown. <p> If a policy with the same name exists for the organization the method will throw <code>NameAlreadyExistsException</code>. And if the organization name does not exist, the method will throw <code>NameNotFoundException</code>.", "id": "17625"}
{"code": "public void addCondition(String name,Condition condition) throws NameAlreadyExistsException, InvalidNameException {\n  conditions.addCondition(name,condition);\n}\n", "nl": "Adds a new policy condition.", "id": "10227"}
{"code": "public void clearLocalSlots(int start,int len){\n  start+=_currentFrameBottom;\n  System.arraycopy(m_nulls,0,_stackFrames,start,len);\n}\n", "nl": "Use this to clear the variables in a section of the stack.  This is used to clear the parameter section of the stack, so that default param values can tell if they've already been set.  It is important to note that this function has a 1K limitation.", "id": "34387"}
{"code": "public int period(){\n  return values.period;\n}\n", "nl": "Request rate reporting period.", "id": "43158"}
{"code": "public static void initDatabaseSingleReplication(boolean dropDb,Session session){\n  initDatabase(dropDb,\"{ 'class' : 'SimpleStrategy', 'replication_factor' : 1}\",session);\n}\n", "nl": "Creates the initial Docussandra database with a replication factor of 1 for local deploys and testing.", "id": "24930"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ps.IDPEntriesElement createIDPEntriesElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.IDPEntriesElementImpl();\n}\n", "nl": "Create an instance of IDPEntriesElement", "id": "53590"}
{"code": "public void init(ServletConfig config) throws ServletException {\n  super.init(config);\n  FSUtils.debug.message(\"FSProcessLogoutServlet Initializing...\");\n  metaManager=FSUtils.getIDFFMetaManager();\n}\n", "nl": "Initializes the servlet.", "id": "53481"}
{"code": "public boolean afterEveryday(OmniDate compareDate){\n  return !beforeEveryday(compareDate);\n}\n", "nl": "only compare the hour minute and second", "id": "6331"}
{"code": "private static int checkTypeVariableSignature(final String signature,int pos){\n  pos=checkChar('T',signature,pos);\n  pos=checkIdentifier(signature,pos);\n  return checkChar(';',signature,pos);\n}\n", "nl": "Checks a type variable signature.", "id": "31298"}
{"code": "@AfterClass public static void cleanupClass(){\n  try {\n    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());\n  }\n catch (  Exception ignore) {\n    System.err.println(\"cannot remove \" + scenario.getRepositoryLocation());\n  }\n}\n", "nl": "Cleanup the whole junit scenario ; deletes the created git repository.", "id": "19083"}
{"code": "public ShapeTileBox bounding_box(){\n  if (precalculated_bounding_box == null) {\n    precalculated_bounding_box=bounding_box(0,corner_count() - 1);\n  }\n  return precalculated_bounding_box;\n}\n", "nl": "Returns the smallest box containing the intersection points of the lines of this polyline", "id": "52125"}
{"code": "public ParameterBlock add(int i){\n  return add(new Integer(i));\n}\n", "nl": "Adds a Integer to the list of parameters.", "id": "36411"}
{"code": "public boolean hasConditions(){\n  return ifModifiedSince != null || ifNoneMatch != null;\n}\n", "nl": "Returns true if the request contains conditions that save the server from sending a response that the client has locally. When the caller adds conditions, this cache won't participate in the request.", "id": "18761"}
{"code": "public boolean hasComment(){\n  return comment != -1;\n}\n", "nl": "Returns true if this XML node contains a comment. Else, returns false.", "id": "25006"}
{"code": "synchronized void addExtendedStyle(Style attr){\n  insertAttributeSetAt(attr,getAttributes().length);\n}\n", "nl": "Adds <code>s</code> as one of the AttributeSets to look up attributes in. It will be the AttributeSet last checked.", "id": "11405"}
{"code": "public static boolean confirm(String p_message){\n  if (p_message == null) {\n    return true;\n  }\n  int option=javax.swing.JOptionPane.showConfirmDialog(null,p_message,null,javax.swing.JOptionPane.YES_NO_OPTION);\n  boolean result=option == javax.swing.JOptionPane.YES_OPTION;\n  return result;\n}\n", "nl": "Calls a confirm dialog. Returns true, if the user confirmed the action or if p_message is null.", "id": "9310"}
{"code": "public static CompoundBorder createCompoundBorder(){\n  return new CompoundBorder();\n}\n", "nl": "Creates a compound border with a <code>null</code> inside edge and a <code>null</code> outside edge.", "id": "11053"}
{"code": "public void displayHelp(){\n  Console.println();\n  Console.println(LocalizedMessage.get(LOC_HR_MSG_MIGRATE_USAGE_DESC));\n  Console.println();\n}\n", "nl": "display help message during migration.", "id": "53255"}
{"code": "public static SearchFilter createLessOrEqualFilter(AttributeType attributeType,Set<String> attributeOptions,ByteString assertionValue){\n  return new SearchFilter(FilterType.LESS_OR_EQUAL,null,null,attributeType,attributeOptions,assertionValue,null,null,null,null,false);\n}\n", "nl": "Creates a less-or-equal search filter with the provided information.", "id": "10464"}
{"code": "public boolean isBefore(YearMonth other){\n  return compareTo(other) < 0;\n}\n", "nl": "Checks if this year-month is before the specified year-month.", "id": "17446"}
{"code": "public void fixupVariables(java.util.Vector vars,int globalsSize){\n  super.fixupVariables(vars,globalsSize);\n  int analysis=getAnalysisBits();\n  if (WalkerFactory.isNaturalDocOrder(analysis)) {\n    m_inNaturalOrderStatic=true;\n  }\n else {\n    m_inNaturalOrderStatic=false;\n  }\n}\n", "nl": "This function is used to perform some extra analysis of the iterator.", "id": "53069"}
{"code": "public static ReferencePropertyMapper reference(final AttributeDescription attribute,final String baseDnTemplate,final AttributeDescription primaryKey,final PropertyMapper mapper){\n  return new ReferencePropertyMapper(Schema.getDefaultSchema(),attribute,baseDnTemplate,primaryKey,mapper);\n}\n", "nl": "Returns a property mapper which provides a mapping from a JSON value to a single DN valued LDAP attribute.", "id": "19206"}
{"code": "private void signalNotEmpty(){\n  final ReentrantLock takeLock=this.takeLock;\n  takeLock.lock();\n  try {\n    notEmpty.signal();\n  }\n  finally {\n    takeLock.unlock();\n  }\n}\n", "nl": "Signals a waiting take. Called only from put/offer (which do not otherwise ordinarily lock takeLock.)", "id": "32905"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(namespaceURI02.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "38275"}
{"code": "public void revokeReadPermission(Collection attributeNames){\n  Iterator it=attributeNames.iterator();\n  if (it != null) {\n    while (it.hasNext()) {\n      String temp=(String)it.next();\n      readables.remove(temp.toLowerCase());\n    }\n  }\n}\n", "nl": "Revoke read permission on attributes.", "id": "57410"}
{"code": "@Override public void close() throws IOException {\n  out.close();\n}\n", "nl": "Close the stream.", "id": "46806"}
{"code": "@Override public boolean allowedInBranch(){\n  return true;\n}\n", "nl": "Indicates whether this tag is allowed for use in the extra lines for branches.", "id": "19331"}
{"code": "public AuthnQuery createAuthnQuery() throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHN_QUERY);\n  if (obj == null) {\n    return new AuthnQueryImpl();\n  }\n else {\n    return (AuthnQuery)obj;\n  }\n}\n", "nl": "Returns the <code>AuthnQuery</code> Object.", "id": "50259"}
{"code": "public static short readSwappedShort(InputStream input) throws IOException {\n  return (short)(((read(input) & 0xff) << 0) + ((read(input) & 0xff) << 8));\n}\n", "nl": "Reads a \"short\" value from an InputStream. The value is converted to the opposed endian system while reading.", "id": "21506"}
{"code": "public int size(){\n  return al.size();\n}\n", "nl": "Returns the number of elements in this set.", "id": "226"}
{"code": "private void logAdditionalLogItems(final Operation operation,final StringBuilder builder){\n  appendResponseControls(operation,builder);\n  for (  final AdditionalLogItem item : operation.getAdditionalLogItems()) {\n    builder.append(' ');\n    item.toString(builder);\n  }\n}\n", "nl": "Appends additional log items to the provided builder.", "id": "33455"}
{"code": "int addVariableName(final org.apache.xml.utils.QName qname){\n  int pos=m_variableNames.size();\n  m_variableNames.addElement(qname);\n  int frameSize=m_variableNames.size() - getGlobalsSize();\n  if (frameSize > m_maxStackFrameSize)   m_maxStackFrameSize++;\n  return pos;\n}\n", "nl": "Add the name of a qualified name within the template.  The position in  the vector is its ID.", "id": "28476"}
{"code": "public static ActiveRequestorException newReceiverException(Throwable throwable){\n  return new ActiveRequestorException(SOAPConstants.SOAP_RECEIVER_FAULT,\"unexpectedError\",throwable.getMessage());\n}\n", "nl": "Constructs a new exception instance for server side errors based on exception objects.", "id": "57065"}
{"code": "@Override public void toString(StringBuilder buffer){\n  buffer.append(\"DeleteRequest(dn=\");\n  buffer.append(dn);\n  buffer.append(\")\");\n}\n", "nl": "Appends a string representation of this LDAP protocol op to the provided buffer.", "id": "3919"}
{"code": "public static String qualifyPid(String fileNamePid){\n  String qualifiedPid=fileNamePid;\n  if (fileNamePid != null && !(fileNamePid.startsWith(\"org.\") || fileNamePid.startsWith(\"com.\"))) {\n    qualifiedPid=ServerConstants.SERVICE_RDN_PREFIX + fileNamePid;\n  }\n  return qualifiedPid;\n}\n", "nl": "Prefixes unqualified PIDs with the default RDN qualifier I.e. file names can be unqualified and will be prefixed with the default.  Configuring services with PIDs that are not qualified  by org. or com. is currently not supported.", "id": "9851"}
{"code": "public boolean closed(){\n  return closed;\n}\n", "nl": "Has this response stream been closed?", "id": "56516"}
{"code": "private void logout(){\n  try {\nsynchronized (loginContextLock) {\n      if (loginContext != null) {\n        loginContext.logout();\n        loginContext=null;\n      }\n    }\n  }\n catch (  LoginException e) {\n    logger.traceException(e);\n  }\n}\n", "nl": "Logout of the current login context.", "id": "25372"}
{"code": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(100);\n  sb.append(\"AMIdentity object: \").append(univIdWithoutDN);\n  if (univDN != null) {\n    sb.append(\"AMSDKDN=\").append(univDN);\n  }\n  return (sb.toString());\n}\n", "nl": "Returns String representation of the <code>AMIdentity</code> object. It returns universal identifier, orgname, type, etc.", "id": "42354"}
{"code": "public com.sun.identity.saml2.jaxb.xmlsig.RetrievalMethodElement createRetrievalMethodElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlsig.impl.RetrievalMethodElementImpl();\n}\n", "nl": "Create an instance of RetrievalMethodElement", "id": "17308"}
{"code": "public static ComponentUI createUI(JComponent x){\n  return new SynthMenuUI();\n}\n", "nl": "Creates a new UI object for the given component.", "id": "58531"}
{"code": "public void uninstallUI(JComponent c){\n  uninstallDefaults();\n  uninstallListeners();\n  this.spinner=null;\n  c.removeAll();\n}\n", "nl": "Calls <code>uninstallDefaults</code>, <code>uninstallListeners</code>, and then removes all of the spinners children.", "id": "40209"}
{"code": "@Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {\n  return decode(image,null);\n}\n", "nl": "Locates and decodes a MaxiCode in an image.", "id": "7189"}
{"code": "public SignatureVisitor visitInterfaceBound(){\n  return this;\n}\n", "nl": "Visits an interface bound of the last visited formal type parameter.", "id": "33357"}
{"code": "public boolean doesOverride(){\n  return overrides.size() > 0;\n}\n", "nl": "Returns true if the member overrides another member.", "id": "31433"}
{"code": "public MatchResult match(){\n  if (!matchSuccessful) {\n    throw new IllegalStateException();\n  }\n  return matcher.toMatchResult();\n}\n", "nl": "Returns the result of the last matching operation. <p> The next* and find* methods return the match result in the case of a successful match.", "id": "53708"}
{"code": "public String toString(){\n  return (\"DataStorePrincipal:  \" + name);\n}\n", "nl": "Returns a string representation of this <code>DataStorePrincipal</code>.", "id": "8228"}
{"code": "public static String escapeText(String text){\n  String result=text.replace(\"\\\\E\",\"\\\\\\\\E\");\n  return \"\\\\Q\" + result + \"\\\\E\";\n}\n", "nl": "Escapes a given string for use in a java.util.regex pattern.", "id": "37274"}
{"code": "public final boolean isNfcPresent(){\n  return nfcAdapter != null;\n}\n", "nl": "Is nfc present boolean.", "id": "20391"}
{"code": "public void release(){\n  releaseEglSurface();\n  if (mSurface != null) {\n    if (mReleaseSurface) {\n      mSurface.release();\n    }\n    mSurface=null;\n  }\n}\n", "nl": "Releases any resources associated with the EGL surface (and, if configured to do so, with the Surface as well). <p> Does not require that the surface's EGL context be current.", "id": "23065"}
{"code": "public void makeImmutable(){\n  isMutable=false;\n}\n", "nl": "Makes the object immutable", "id": "36469"}
{"code": "@AfterClass public static void cleanupClass(){\n  try {\n    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());\n  }\n catch (  Exception ignore) {\n    System.err.println(\"cannot remove \" + scenario.getRepositoryLocation());\n  }\n}\n", "nl": "Cleanup the whole junit scenario ; deletes the created git repository.", "id": "41754"}
{"code": "public String encode(){\n  return encode(new StringBuilder()).toString();\n}\n", "nl": "Encode the request line as a String.", "id": "4850"}
{"code": "public TaskRunnable previous(){\n  return null;\n}\n", "nl": "Implements for TaskRunnable interface, there is no previous element for HeadTaskRunnable.", "id": "1459"}
{"code": "public static String printAnySimpleType(String val){\n  if (theConverter == null)   initConverter();\n  return theConverter.printAnySimpleType(val);\n}\n", "nl": "<p> Converts a string value into a string.", "id": "16062"}
{"code": "public static boolean isFieldGeneric(String desc,String signature){\n  return signature != null && desc != null && signature.startsWith(\"T\") && signature.endsWith(\";\") && Character.isUpperCase(signature.charAt(1)) && desc.contains(\"java/lang/Object\");\n}\n", "nl": "Tells whether the given field description+signature is generic.", "id": "39666"}
{"code": "private boolean deleteResource(HttpServletRequest req,HttpServletResponse resp) throws IOException {\n  String path=getRelativePath(req);\n  return deleteResource(path,req,resp,true);\n}\n", "nl": "Delete a resource.", "id": "23746"}
{"code": "@org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) @Override public void disconnect(DisconnectReason disconnectReason,boolean sendNotification,LocalizableMessage message){\n}\n", "nl": "Closes the connection to the client, optionally sending it a message indicating the reason for the closure.  Note that the ability to send a notice of disconnection may not be available for all protocols or under all circumstances.", "id": "27368"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(namednodemapsetnameditemreturnvalue.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "32721"}
{"code": "protected Object readLocation() throws IOException, ClassNotFoundException {\n  return (locIn == null ? null : locIn.readObject());\n}\n", "nl": "Overrides MarshalInputStream.readLocation to return locations from the stream we were given, or <code>null</code> if we were given a <code>null</code> location stream.", "id": "58640"}
{"code": "public static int resetPostConnectCount(){\n  return postConnectCounter.getAndSet(0);\n}\n", "nl": "Resets the post-connect plugin invocation count to zero.", "id": "9522"}
{"code": "public void addItemListener(ItemListener l){\n  listenerList.add(ItemListener.class,l);\n}\n", "nl": "Adds an <code>ItemListener</code> to the <code>checkbox</code>.", "id": "55268"}
{"code": "public Node renameNode(Node n,String namespaceURI,String name) throws DOMException {\n  return n;\n}\n", "nl": "DOM Level 3 Renaming node", "id": "45860"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(characterdatainsertdatanomodificationallowederr.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "35594"}
{"code": "protected boolean up(TextView widget,Spannable buffer){\n  return false;\n}\n", "nl": "Performs an up movement action. Moves the cursor or scrolls up by one line.", "id": "37166"}
{"code": "public static boolean equal(Object a,Object b){\n  return a == b || (a != null && a.equals(b));\n}\n", "nl": "Returns true if two possibly-null objects are equal.", "id": "35418"}
{"code": "public void updateBackendVLVIndexes(String backendName){\n  backendVLVIndexesPanel.update(backendName);\n  ((CardLayout)mainPanel.getLayout()).show(mainPanel,backendVLVIndexesPanel.getTitle().toString());\n}\n", "nl": "Updates the contents of the panel with the VLV indexes on the provided backend. A table with all the VLV indexes of the backend will be displayed.", "id": "14040"}
{"code": "public static GenericIntermediateResponse copyOfGenericIntermediateResponse(final GenericIntermediateResponse result){\n  return new GenericIntermediateResponseImpl(result);\n}\n", "nl": "Creates a new generic intermediate response that is an exact copy of the provided response.", "id": "20460"}
{"code": "public boolean isBorderOpaque(){\n  return false;\n}\n", "nl": "Returns whether or not the border is opaque.  If the border is opaque, it is responsible for filling in it's own background when painting.", "id": "14185"}
{"code": "public Node previousNode() throws DOMException {\n  if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_CANNOT_ITERATE,null));\n  if ((m_next - 1) > 0) {\n    m_next--;\n    return this.elementAt(m_next);\n  }\n else   return null;\n}\n", "nl": "Returns the previous node in the set and moves the position of the iterator backwards in the set.", "id": "48258"}
{"code": "public void clearArguments(){\n  args.clear();\n  obfuscatedArgs.clear();\n}\n", "nl": "Clears the arguments.", "id": "16664"}
{"code": "public void disable(){\n  state.save();\n  state.clearInMemory();\n  disabled=true;\n  disableService();\n}\n", "nl": "Disable the replication on this domain. The session to the replication server will be stopped. The domain will not be destroyed but call to the pre-operation methods will result in failure. The listener thread will be destroyed. The monitor informations will still be accessible.", "id": "47432"}
{"code": "public static boolean isBlank(String toTest){\n  if (toTest == null) {\n    return true;\n  }\n  for (int i=0; i < toTest.length(); i++) {\n    if (!Character.isWhitespace(toTest.charAt(i))) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Tests if the given string is <code>null</code> or just contains whitespace characters.", "id": "18885"}
{"code": "public int length(){\n  return mText.length - mGapLength;\n}\n", "nl": "Return the number of chars in the buffer.", "id": "29021"}
{"code": "public void paintPasswordFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the background of a password field.", "id": "19699"}
{"code": "public SAML2ConfigBuilder encryptNameID(boolean encryptNameID){\n  this.encryptNameID=encryptNameID;\n  return this;\n}\n", "nl": "Sets whether the SAML2Config name-id should be encrypted.", "id": "53463"}
{"code": "public int hashCode(){\n  return Objects.hash(file,princ,bound);\n}\n", "nl": "Returns a hashcode for this KeyTab.", "id": "55073"}
{"code": "public void writeExif(byte[] jpeg,OutputStream exifOutStream) throws IOException {\n  if (jpeg == null || exifOutStream == null) {\n    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);\n  }\n  OutputStream s=getExifWriterStream(exifOutStream);\n  s.write(jpeg,0,jpeg.length);\n  s.flush();\n}\n", "nl": "Writes the tags from this ExifInterface object into a jpeg image, removing prior exif tags.", "id": "31485"}
{"code": "boolean requiresConnectorConfigurationHelper(JsonValue requestContent){\n  return false;\n}\n", "nl": "Checks to see that ConnectorConfigurationHelper is needed - default to false", "id": "26715"}
{"code": "protected PrintStream findStream(){\n  PrintStream ps=streams.get();\n  if (ps == null) {\n    ps=wrapped;\n  }\n  return ps;\n}\n", "nl": "Find PrintStream to which the output must be written to.", "id": "41757"}
{"code": "public ResultHandler<Token,CoreTokenException> updateOrCreate(Token token) throws CoreTokenException {\n  applyBlobStrategy(token);\n  debug(\"UpdateOrCreate: queued {0} Token {1}\\n{2}\",token.getType(),token.getTokenId(),token);\n  final ResultHandler<Token,CoreTokenException> updateHandler=handlerFactory.getUpdateHandler();\n  dispatcher.update(token,updateHandler);\n  return updateHandler;\n}\n", "nl": "Update a Token in the LDAP store. This function will perform a read of the Token ID to determine if the Token has been persisted already. If it has not been persisted, then delegates to the create function. Otherwise performs Modify operation based on the difference between the Token in the store and the Token being stored. If this difference has no changes, then there is nothing to be done.", "id": "51285"}
{"code": "public boolean verifyXMLSignature(java.lang.String XML) throws XMLSignatureException {\n  return sp.verifyXMLSignature(XML);\n}\n", "nl": "Verify the signature of the XML string", "id": "50401"}
{"code": "public boolean hasNext(){\n  return pos < length;\n}\n", "nl": "Determines if the GSER String contains at least one character to be read.", "id": "44350"}
{"code": "public java.io.Serializable read_value(java.lang.String rep_id){\n  throw new org.omg.CORBA.NO_IMPLEMENT();\n}\n", "nl": "Unmarshalls a value type from the input stream.", "id": "23192"}
{"code": "public void printStackTrace(){\n  if (!isJDK14OrAbove && causeOnJDK13OrBelow != null) {\n    printStackTrace0(new PrintWriter(System.err,true));\n  }\n else {\n    super.printStackTrace();\n  }\n}\n", "nl": "Print the the trace of methods from where the error originated.  This will trace all nested exception objects, as well as this object.", "id": "25857"}
{"code": "public R visitString(StringPropertyDefinition pd,P p){\n  return visitUnknown(pd,p);\n}\n", "nl": "Visit a string property definition.", "id": "3969"}
{"code": "@Override public Foo removeByUUID_G(String uuid,long groupId) throws NoSuchFooException {\n  Foo foo=findByUUID_G(uuid,groupId);\n  return remove(foo);\n}\n", "nl": "Removes the foo where uuid = &#63; and groupId = &#63; from the database.", "id": "17737"}
{"code": "public java.lang.String toXMLString() throws SAML2Exception {\n  return toXMLString(true,false);\n}\n", "nl": "Returns the <code>LogoutRequest</code> in an XML document String format based on the <code>LogoutRequest</code> schema described above.", "id": "7113"}
{"code": "protected void doProppatch(HttpServletRequest req,HttpServletResponse resp) throws IOException {\n  if (readOnly) {\n    resp.sendError(WebdavStatus.SC_FORBIDDEN);\n    return;\n  }\n  if (isLocked(req)) {\n    resp.sendError(WebdavStatus.SC_LOCKED);\n    return;\n  }\n  resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED);\n}\n", "nl": "PROPPATCH Method.", "id": "29081"}
{"code": "public static synchronized SSLClientSessionCache usingDirectory(File directory) throws IOException {\n  FileClientSessionCache.Impl cache=caches.get(directory);\n  if (cache == null) {\n    cache=new FileClientSessionCache.Impl(directory);\n    caches.put(directory,cache);\n  }\n  return cache;\n}\n", "nl": "Returns a cache backed by the given directory. Creates the directory (including parent directories) if necessary. This cache should have exclusive access to the given directory.", "id": "45849"}
{"code": "public E lastElement(){\n  return delegate.lastElement();\n}\n", "nl": "Returns the last component of the list. Throws a <code>NoSuchElementException</code> if this vector has no components.", "id": "18691"}
{"code": "public void makeImmutable(){\n  mutable=false;\n}\n", "nl": "Makes this object immutable", "id": "14211"}
{"code": "@Override public synchronized void delete(AudioFile af) throws CannotReadException, CannotWriteException {\n  ((MP3File)af).setID3v1Tag(null);\n  ((MP3File)af).setID3v2Tag(null);\n  af.commit();\n}\n", "nl": "Delete the Id3v1 and ID3v2 tags from file", "id": "28415"}
{"code": "public boolean hasFromTag(){\n  return hasParameter(ParameterNames.FROM_TAG);\n}\n", "nl": "Boolean function", "id": "46626"}
{"code": "protected void reportWrongNumberArgs() throws WrongNumberArgsException {\n  throw new WrongNumberArgsException(XSLMessages.createMessage(XSLTErrorResources.ER_ONE_OR_TWO,null));\n}\n", "nl": "Constructs and throws a WrongNumberArgException with the appropriate message for this function object.", "id": "26328"}
{"code": "private Map.Entry<DN,List<String>> decode(ByteSequence bs) throws StorageRuntimeException {\n  return decode0(bs,true);\n}\n", "nl": "Decodes the value as a pair where the first element is the DN key and the second is the actual value.", "id": "37535"}
{"code": "@Override public Expected<T> ifPresent(final Consumer<? super T> consumer){\n  if (this.value != null)   consumer.accept(this.value);\n  return this;\n}\n", "nl": "If a value is present, invoke the consumer with the value.", "id": "49784"}
{"code": "public boolean allowsAllContentSubTypes(){\n  if (mediaRange == null) {\n    return false;\n  }\n else   return mediaRange.getSubtype().compareTo(STAR) == 0;\n}\n", "nl": "returns true if this header allows all ContentSubTypes, false otherwise.", "id": "40090"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(commentgetcomment.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "28306"}
{"code": "public void configChanged(ConfigurationActionEvent e){\n  if (debug.messageEnabled()) {\n    debug.message(\"SAML2ConfigService: configChanged\");\n  }\n  setValues();\n}\n", "nl": "This method will be invoked when a component's  configuration data has been changed. The parameters componentName, realm and configName denotes the component name, organization and configuration instance name that are changed  respectively.", "id": "27024"}
{"code": "public final String yytext(){\n  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);\n}\n", "nl": "Returns the text matched by the current regular expression.", "id": "15080"}
{"code": "public void paintTabbedPaneTabAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintBorder(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the border of the area behind the tabs of a tabbed pane. This implementation invokes the method of the same name without the orientation.", "id": "52910"}
{"code": "private Object writeReplace(){\n  return new Ser(Ser.JAPANESE_DATE_TYPE,this);\n}\n", "nl": "Writes the object using a <a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.", "id": "27834"}
{"code": "public void displayProgress(ProgressDescriptor descriptor){\n  getCurrentStepPanel().displayProgress(descriptor);\n  ProgressStep status=descriptor.getProgressStep();\n  if (status.isLast()) {\n    setButtonEnabled(ButtonName.CLOSE,true);\n  }\n}\n", "nl": "Forwards to the displayed panel the ProgressDescriptor so that they can update their contents accordingly.", "id": "14762"}
{"code": "public static ComponentUI createUI(JComponent h){\n  return new SynthTableHeaderUI();\n}\n", "nl": "Creates a new UI object for the given component.", "id": "1200"}
{"code": "protected SmallAttributeSet createSmallAttributeSet(AttributeSet a){\n  return new SmallConversionSet(a);\n}\n", "nl": "Creates a compact set of attributes that might be shared. This is a hook for subclasses that want to alter the behavior of SmallAttributeSet.  This can be reimplemented to return an AttributeSet that provides some sort of attribute conversion.", "id": "24858"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_nodedocumentfragmentnodetype.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "56371"}
{"code": "public TagResult generateLDIF(EntryWriter entryWriter) throws IOException, MakeLDIFException {\n  for (  Branch b : branches.values()) {\n    TagResult result=b.writeEntries(entryWriter);\n    if (!result.keepProcessingTemplateFile()) {\n      return result;\n    }\n  }\n  entryWriter.closeEntryWriter();\n  return TagResult.SUCCESS_RESULT;\n}\n", "nl": "Generates the LDIF content and writes it to the provided LDIF writer.", "id": "35253"}
{"code": "protected boolean isSessionStale(Session session,long timeNow){\n  if (session != null) {\n    int maxInactiveInterval=session.getMaxInactiveInterval();\n    if (maxInactiveInterval >= 0) {\n      int timeIdle=(int)((timeNow - session.getThisAccessedTime()) / 1000L);\n      if (timeIdle >= maxInactiveInterval) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "nl": "Indicate whether the session has been idle for longer than its expiration date as of the supplied time. FIXME: Probably belongs in the Session class.", "id": "36041"}
{"code": "protected void removeTag(short tagId){\n  mExifTags.remove(tagId);\n}\n", "nl": "Removes the tag of the given ID", "id": "39781"}
{"code": "public static boolean isGuiAvailable(){\n  return ThreadGroupContext.getContext().isGuiAvailable();\n}\n", "nl": "Determines whether beans can assume a GUI is available.", "id": "21545"}
{"code": "public static boolean isExtOpApplicable(Aci aci,AciTargetMatchContext matchCtx){\n  ExtOp extOp=aci.getTargets().getExtOp();\n  return extOp != null && extOp.isApplicable(matchCtx);\n}\n", "nl": "Check an ACI's extop rule against a target match context.", "id": "5839"}
{"code": "public static boolean isValidInitialStatus(ServerStatus initStatus){\nswitch (initStatus) {\ncase NORMAL_STATUS:\ncase DEGRADED_STATUS:\ncase BAD_GEN_ID_STATUS:\n    return true;\n}\nreturn false;\n}\n", "nl": "Checks if a given status is valid as an entering status for the state machine.", "id": "46242"}
{"code": "@Override public void write(String str){\nsynchronized (lock) {\n    buf.append(str);\n  }\n}\n", "nl": "Writes the characters from the String <code>str</code> to this StringWriter.", "id": "13263"}
{"code": "public Object eval(String script) throws ScriptException {\n  return eval(script,context);\n}\n", "nl": "Same as <code>eval(Reader)</code> except that the abstract <code>eval(String, ScriptContext)</code> is used.", "id": "55205"}
{"code": "public Iterator<E> iterator(){\n  return new Itr();\n}\n", "nl": "Returns an iterator over the elements in this queue in proper sequence. The elements will be returned in order from first (head) to last (tail). <p>The returned iterator is <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.", "id": "52046"}
{"code": "private static int calculateNumberOfRows(int m,int k,int c){\n  int r=((m + 1 + k) / c) + 1;\n  if (c * r >= (m + 1 + k+ c)) {\n    r--;\n  }\n  return r;\n}\n", "nl": "Calculates the necessary number of rows as described in annex Q of ISO/IEC 15438:2001(E).", "id": "55385"}
{"code": "public int size(){\n  return attrs.size();\n}\n", "nl": "Returns the number of attributes.", "id": "11305"}
{"code": "public final PlaSide side_of(PlaDirection p_other){\n  return PlaSide.get_side_of(determinant(p_other));\n}\n", "nl": "The function returns  Side.ON_THE_LEFT, if this.get_vector() is on the left of L  Side.ON_THE_RIGHT, if this.get_vector() is on the right of L  Side.COLLINEAR, if this.get_vector() is collinear with L.", "id": "724"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n  TestCaseUtils.initializeTestBackend(true);\n  TestCaseUtils.clearBackend(\"userRoot\",\"dc=example,dc=com\");\n  governingStructureRuleType=getGoverningStructureRuleAttributeType();\n  int resultCode=TestCaseUtils.applyModifications(true,\"dn: cn=schema\",\"changetype: modify\",\"add: nameForms\",\"nameForms: ( domainNameForm-oid NAME 'domainNameForm' OC domain MUST ( dc ) )\",\"nameForms: ( organizationalNameForm-oid NAME 'organizationalNameForm' OC organization MUST ( o ) )\",\"-\",\"add: ditStructureRules\",\"dITStructureRules: ( 21 NAME 'domainStructureRule' FORM domainNameForm )\",\"dITStructureRules: ( 22 NAME 'organizationalStructureRule' FORM organizationalNameForm SUP 21 )\");\n  assertEquals(resultCode,0);\n}\n", "nl": "Ensures that the Directory Server is running.", "id": "47716"}
{"code": "public static java.math.BigInteger parseInteger(String lexicalXSDInteger){\n  if (theConverter == null)   initConverter();\n  return theConverter.parseInteger(lexicalXSDInteger);\n}\n", "nl": "<p> Convert the string argument into a BigInteger value.", "id": "2115"}
{"code": "public AuthenticationEnforcer exceptUpdate(){\n  exceptUpdate=true;\n  return this;\n}\n", "nl": "Marks authentication on update requests to the route as optional.", "id": "58642"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.TripleDesRsa15Element createTripleDesRsa15Element() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.TripleDesRsa15ElementImpl();\n}\n", "nl": "Create an instance of TripleDesRsa15Element", "id": "7857"}
{"code": "public void writeProperty(String namespace,String name,String value){\n  writeElement(namespace,name,OPENING);\n  buffer.append(value);\n  writeElement(namespace,name,CLOSING);\n}\n", "nl": "Write property to the XML.", "id": "29839"}
{"code": "@Override public List<Foo> findByUuid(String uuid){\n  return findByUuid(uuid,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);\n}\n", "nl": "Returns all the foos where uuid = &#63;.", "id": "13118"}
{"code": "public final Polyline to_polyline(){\n  PlaLineIntAlist lines=new PlaLineIntAlist(3);\n  lines.add(start);\n  lines.add(middle);\n  lines.add(end);\n  return new Polyline(lines);\n}\n", "nl": "Transforms this LinsSegment into a polyline of length 3 Other part of software assume that the length of the array will b three, do not change it", "id": "3334"}
{"code": "static public void assertFalse(boolean condition){\n  assertFalse(null,condition);\n}\n", "nl": "Asserts that a condition is false. If it isn't it throws an AssertionFailedError.", "id": "13225"}
{"code": "private synchronized boolean extendDirtyRegion(Component c,int x,int y,int w,int h){\n  Rectangle r=dirtyComponents.get(c);\n  if (r != null) {\n    SwingUtilities.computeUnion(x,y,w,h,r);\n    return true;\n  }\n  return false;\n}\n", "nl": "Extends the dirty region for the specified component to include the new region.", "id": "55593"}
{"code": "@Override protected final void flush() throws IOException {\n  if (!responseFinished) {\n    if (ajpFlush) {\n      socketWrapper.write(true,flushMessageArray,0,flushMessageArray.length);\n    }\n    socketWrapper.flush(true);\n  }\n}\n", "nl": "Callback to write data from the buffer.", "id": "16922"}
{"code": "public void initializeProperties(Properties properties){\n  Properties newProps=new Properties();\n  newProps.putAll(systemConfigProps);\n  newProps.putAll(properties);\n  systemConfigProps=newProps;\n}\n", "nl": "Initializes the properties to be used by Open Federation Library. Ideally this must be called first before any other method is called within Open Federation Library. This method provides a programmatic way to set the properties, and will override similar properties if loaded for a properties file.", "id": "35730"}
{"code": "@Override public void write(int b) throws IOException {\n  write(new byte[]{(byte)b},0,1);\n}\n", "nl": "Write a single byte to the stream.", "id": "55647"}
{"code": "public int hashCode(){\n  return hashCode;\n}\n", "nl": "Returns hash code for this object.", "id": "20131"}
{"code": "public void resetZoom(){\n  normalizedScale=1;\n  fitImageToView();\n}\n", "nl": "Reset zoom and translation to initial state.", "id": "13434"}
{"code": "public void flip(int i){\n  bits[i >> 5]^=1 << (i & 0x1F);\n}\n", "nl": "Flips bit i.", "id": "46657"}
{"code": "public void runTo(int index){\n  if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_INDEX,null));\n  if ((index >= 0) && (m_next < m_firstFree))   m_next=index;\n else   m_next=m_firstFree - 1;\n}\n", "nl": "If an index is requested, NodeSetDTM will call this method to run the iterator to the index.  By default this sets m_next to the index.  If the index argument is -1, this signals that the iterator should be run to the end.", "id": "1118"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsaddr.EndpointReferenceElement createEndpointReferenceElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.EndpointReferenceElementImpl();\n}\n", "nl": "Create an instance of EndpointReferenceElement", "id": "47188"}
{"code": "protected synchronized void initializeBeanContextResources(){\n  super.initializeBeanContextResources();\n  BeanContext nbc=getBeanContext();\n  if (nbc == null)   return;\n  try {\n    BeanContextServices bcs=(BeanContextServices)nbc;\n    proxy=new BCSSProxyServiceProvider(bcs);\n  }\n catch (  ClassCastException cce) {\n  }\n}\n", "nl": "called from setBeanContext to notify a BeanContextChild to allocate resources obtained from the nesting BeanContext. subclasses may envelope this method to implement their own semantics.", "id": "10274"}
{"code": "public boolean isInverted(){\n  return ((getData() & 0x4) != 0);\n}\n", "nl": "Test if step is inverted", "id": "16640"}
{"code": "public boolean hasOrdering(Object preferred,Object other){\n  DigraphNode preferredPONode=(DigraphNode)poNodes.get(preferred);\n  DigraphNode otherPONode=(DigraphNode)poNodes.get(other);\n  return preferredPONode.hasEdge(otherPONode);\n}\n", "nl": "Returns <code>true</code> if an ordering exists between two nodes.", "id": "51489"}
{"code": "public String toXMLString() throws SAML2Exception {\n  return toXMLString(true,false);\n}\n", "nl": "Returns a String representation of the element.", "id": "12875"}
{"code": "public int purge(){\nsynchronized (impl) {\n    return impl.purge();\n  }\n}\n", "nl": "Removes all canceled tasks from the task queue. If there are no other references on the tasks, then after this call they are free to be garbage collected.", "id": "11876"}
{"code": "protected ClassLoader bindThread(){\n  ClassLoader oldContextClassLoader=bind(false,null);\n  if (isUseNaming()) {\n    try {\n      ContextBindings.bindThread(this,getNamingToken());\n    }\n catch (    NamingException e) {\n    }\n  }\n  return oldContextClassLoader;\n}\n", "nl": "Bind current thread, both for CL purposes and for JNDI ENC support during : startup, shutdown and reloading of the context.", "id": "54491"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(documentinvalidcharacterexceptioncreateentref1.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "35729"}
{"code": "@Override protected void writeValue(ASN1Writer writer) throws IOException {\n  writer.writeStartSequence(ASN1.UNIVERSAL_OCTET_STRING_TYPE);\n  writer.writeStartSequence();\n  writer.writeOctetString(rawAuthorizationDN);\n  writer.writeEndSequence();\n  writer.writeEndSequence();\n}\n", "nl": "Writes this control's value to an ASN.1 writer. The value (if any) must be written as an ASN1OctetString.", "id": "26663"}
{"code": "public boolean is_automatic_neckdown(){\n  return automatic_neckdown;\n}\n", "nl": "If true, the trace width at static pins smaller the the trace width will be lowered automatically to the pin with, if necessary.", "id": "36001"}
{"code": "public void process(XMLParser parser,String name,Vector elems,Hashtable atts,String pcdata){\n  _name=name;\n  _elems=elems;\n  _atts=atts;\n  _pcdata=pcdata;\n}\n", "nl": "Store the node information into this object.", "id": "33831"}
{"code": "private TimerQueue timerQueue(){\n  return TimerQueue.sharedInstance();\n}\n", "nl": "Returns the timer queue.", "id": "40038"}
{"code": "public boolean isVisible(){\n  return false;\n}\n", "nl": "Determine if the object is visible.  Note: this means that the object intends to be visible; however, it may not be showing on the screen because one of the objects that this object is contained by is currently not visible.  To determine if an object is showing on the screen, use isShowing(). <p>Objects that are visible will also have the AccessibleState.VISIBLE state set in their AccessibleStateSet.", "id": "1360"}
{"code": "public String toString(){\n  return val + \" in (\" + generateValueList()+ \")\";\n}\n", "nl": "Returns the string representing the object.", "id": "48668"}
{"code": "public synchronized void removeVetoableChangeListener(VetoableChangeListener listener){\n  if (vetoableChangeSupport == null) {\n    return;\n  }\n  vetoableChangeSupport.removeVetoableChangeListener(listener);\n}\n", "nl": "Removes a <code>VetoableChangeListener</code> from the listener list. This removes a <code>VetoableChangeListener</code> that was registered for all properties.", "id": "55891"}
{"code": "protected void paint(SynthContext context,Graphics g){\n}\n", "nl": "Paints the specified component. This implementation does nothing.", "id": "6144"}
{"code": "public final void pushCurrentNode(int n){\n  m_currentNodes.push(n);\n}\n", "nl": "Set the current context node.", "id": "23857"}
{"code": "private AST.Throw parse_throw() throws SyntaxException {\n  LineCol lineCol=current.getLineCol();\n  Expression exp=next_exp(false);\n  return new AST.Throw(exp,lineCol);\n}\n", "nl": "parse throw<br> <code> throw exp </code>", "id": "17589"}
{"code": "final void removeThread(Thread thread) throws IllegalThreadStateException {\nsynchronized (threadRefs) {\n    for (Iterator<Thread> i=threads.iterator(); i.hasNext(); ) {\n      if (i.next().equals(thread)) {\n        i.remove();\n        break;\n      }\n    }\n  }\n  destroyIfEmptyDaemon();\n}\n", "nl": "Called by the VM when a Thread dies.", "id": "41742"}
{"code": "@Override void validateContentType(Request request) throws InvalidRequestException {\n  if (!(request.getEntity() == null || request.getEntity() instanceof EmptyRepresentation) && !MediaType.APPLICATION_WWW_FORM.equals(request.getEntity().getMediaType())) {\n    logger.error(\"Invalid Content Type for token endpoint\");\n    throw new InvalidRequestException(\"Invalid Content Type\");\n  }\n}\n", "nl": "Validates that the content type of the request is 'x-www-form-urlencoded'.", "id": "49459"}
{"code": "public void handleButton2Request(RequestInvocationEvent event){\n  backTrail();\n  forwardToPolicyViewBean();\n}\n", "nl": "Handles cancel request.", "id": "14005"}
{"code": "DateTimeParseContext copy(){\n  DateTimeParseContext newContext=new DateTimeParseContext(formatter);\n  newContext.caseSensitive=caseSensitive;\n  newContext.strict=strict;\n  return newContext;\n}\n", "nl": "Creates a copy of this context. This retains the case sensitive and strict flags.", "id": "54066"}
{"code": "public String toString(){\n  return \"{\" + notif + \", \"+ id+ \"}\";\n}\n", "nl": "Returns a textual representation of this Targeted Notification.", "id": "38513"}
{"code": "public void follow(){\n  sessionDone.set(false);\n  suspended.set(false);\n}\n", "nl": "Resumes the writer thread until it is paused.", "id": "49884"}
{"code": "public void warning(SAXParseException spe) throws SAXParseException {\n  if (PolicyManager.debug.warningEnabled()) {\n    PolicyManager.debug.warning(spe.getMessage() + \"\\nLine Number in XML file : \" + spe.getLineNumber()+ \"\\nColumn Number in XML file : \"+ spe.getColumnNumber());\n  }\n}\n", "nl": "Handles warning.", "id": "21572"}
{"code": "public static char[] copyOf(char[] original,int newLength){\n  char[] copy=new char[newLength];\n  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));\n  return copy;\n}\n", "nl": "Copies the specified array, truncating or padding with null characters (if necessary) so the copy has the specified length.  For all indices that are valid in both the original array and the copy, the two arrays will contain identical values.  For any indices that are valid in the copy but not the original, the copy will contain <tt>'\\\\u000'</tt>.  Such indices will exist if and only if the specified length is greater than that of the original array.", "id": "11606"}
{"code": "private void cleanupAfterEditing(){\n  if (editingComponent != null) {\n    editingContainer.remove(editingComponent);\n  }\n  editingComponent=null;\n}\n", "nl": "Cleans up any state after editing has completed. Removes the <code>editingComponent</code> the <code>editingContainer</code>.", "id": "55169"}
{"code": "public void update(Graphics a,JComponent b){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).update(a,b);\n  }\n}\n", "nl": "Invokes the <code>update</code> method on each UI handled by this object.", "id": "30960"}
{"code": "public void removeParameters(){\n  this.uriParms=new NameValueList();\n}\n", "nl": "Remove the URI parameters.", "id": "33207"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ps.AuthnResponseType createAuthnResponseType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnResponseTypeImpl();\n}\n", "nl": "Create an instance of AuthnResponseType", "id": "28255"}
{"code": "public static String byteArrayToString(byte[] bytes){\n  char chars[]=new char[bytes.length];\n  for (int i=0; i < bytes.length; i++) {\n    chars[i]=(char)bytes[i];\n  }\n  return new String(chars);\n}\n", "nl": "Converts byte array to string.", "id": "40016"}
{"code": "public void mousePressed(MouseEvent e){\n  getHandler().mousePressed(e);\n}\n", "nl": "Invoked when the mouse has been clicked on the menu. This method clears or sets the selection path of the MenuSelectionManager.", "id": "5188"}
{"code": "public boolean isLocallyInitiated(){\n  boolean streamIsClient=(id % 2 == 1);\n  return connection.client == streamIsClient;\n}\n", "nl": "Returns true if this stream was created by this peer.", "id": "38945"}
{"code": "public static boolean checkCaller(){\n  return checkCaller;\n}\n", "nl": "Check to see if security is enabled and Caller needs to be checked for OpenAM specific Java security permissions", "id": "43390"}
{"code": "public Period plusYears(long yearsToAdd){\n  if (yearsToAdd == 0) {\n    return this;\n  }\n  return create(Math.toIntExact(Math.addExact(years,yearsToAdd)),months,days);\n}\n", "nl": "Returns a copy of this period with the specified years added. <p> This adds the amount to the years unit in a copy of this period. The months and days units are unaffected. For example, \"1 year, 6 months and 3 days\" plus 2 years returns \"3 years, 6 months and 3 days\". <p> This instance is immutable and unaffected by this method call.", "id": "38591"}
{"code": "@SuppressWarnings(\"unchecked\") final E itemAt(int i){\n  return (E)items[i];\n}\n", "nl": "Returns item at index i.", "id": "32480"}
{"code": "public boolean hasName(final String name){\n  for (  final String n : names) {\n    if (n.equalsIgnoreCase(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Indicates whether this schema definition has the specified name.", "id": "38569"}
{"code": "private void log(String message){\n  if (context != null)   context.log(\"SessionListener: \" + message);\n else   System.out.println(\"SessionListener: \" + message);\n}\n", "nl": "Log a message to the servlet context application log.", "id": "30767"}
{"code": "public byte[] generateBeaconPublicKey(){\n  return Curve25519.scalarMultBase(beaconPrivateKey);\n}\n", "nl": "Returns the beacon's public key.", "id": "53100"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.MustSupportRefEncryptedKeyElement createMustSupportRefEncryptedKeyElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.MustSupportRefEncryptedKeyElementImpl();\n}\n", "nl": "Create an instance of MustSupportRefEncryptedKeyElement", "id": "46667"}
{"code": "public boolean isNavBarTintEnabled(){\n  return mNavBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system navigation bar?", "id": "52524"}
{"code": "private boolean isFilterBranchTrue(Tree<Filter> node){\n  if (node.isLeafNode()) {\n    return node.getItem().match(event);\n  }\n  for (  Tree<Filter> currentNode : node.getChildren()) {\n    if (currentNode.getItem().match(event)) {\n      return isFilterBranchTrue(currentNode);\n    }\n  }\n  return false;\n}\n", "nl": "Recursively descends down the tree looking for a branch which returns true at the leaf level, which represents an \"and\" relationship between the filters", "id": "8349"}
{"code": "void parseInvalidTag() throws IOException {\n  while (true) {\n    skipSpace();\nswitch (ch) {\ncase '>':\ncase -1:\n      ch=readCh();\n    return;\ncase '<':\n  return;\ndefault :\nch=readCh();\n}\n}\n}\n", "nl": "Parse an invalid tag.", "id": "5402"}
{"code": "private static boolean isDigit(char p_char){\n  return p_char >= '0' && p_char <= '9';\n}\n", "nl": "Determine whether a char is a digit.", "id": "39886"}
{"code": "public V remove(Object key){\n  int hash=hash(key.hashCode());\n  Segment<K,V> s=segmentForHash(hash);\n  return s == null ? null : s.remove(key,hash,null);\n}\n", "nl": "Removes the key (and its corresponding value) from this map. This method does nothing if the key is not in the map.", "id": "18838"}
{"code": "public double lengthSquared(){\n  return NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z);\n}\n", "nl": "Gets the magnitude of the location squared. Not world-aware and orientation independent.", "id": "7207"}
{"code": "public int whichButton(){\n  return button;\n}\n", "nl": "Which button was pressed to initiate the enchanting.", "id": "46894"}
{"code": "public boolean isResourceNameAllowed(){\n  return (isResourceNameAllowed);\n}\n", "nl": "Checks if the attribute allows to have resource name.", "id": "42235"}
{"code": "public static CharSequence downloadViaHttp(String uri,ContentType type) throws IOException {\n  return downloadViaHttp(uri,type,Integer.MAX_VALUE);\n}\n", "nl": "Downloads the entire resource instead of part.", "id": "28497"}
{"code": "public boolean isScriptFriendly(){\n  return scriptFriendlyArg.isPresent();\n}\n", "nl": "Tells whether the user specified to have a script-friendly output or not. This method must be called after calling parseArguments.", "id": "14332"}
{"code": "protected void resetSizeAt(int index){\n  sizes[index]=0;\n  doReset=true;\n}\n", "nl": "Resets the size of the Component at the passed in location.", "id": "57574"}
{"code": "public void stop(){\n  context.unregisterReceiver(this);\n}\n", "nl": "In this monitor, we only receive intent, no need to do anything here", "id": "17582"}
{"code": "private void notifyListeners(Throwable t){\n  EntryReadErrorEvent ev=new EntryReadErrorEvent(this,dn,t);\n  for (  EntryReadListener listener : listeners) {\n    listener.entryReadError(ev);\n  }\n}\n", "nl": "Notifies the listeners that an error occurred reading an entry.", "id": "54427"}
{"code": "@Override public void start(){\n  JsonObject config=config();\n  init(config);\n  vertx.setPeriodic(period,null);\n}\n", "nl": "Method called when the verticle is deployed.", "id": "42687"}
{"code": "final boolean transferAfterCancelledWait(Node node){\n  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {\n    enq(node);\n    return true;\n  }\n  while (!isOnSyncQueue(node))   Thread.yield();\n  return false;\n}\n", "nl": "Transfers node, if necessary, to sync queue after a cancelled wait. Returns true if thread was cancelled before being signalled.", "id": "18455"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic128Sha256Element createBasic128Sha256Element() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic128Sha256ElementImpl();\n}\n", "nl": "Create an instance of Basic128Sha256Element", "id": "38685"}
{"code": "public String toString(){\n  return (toString(true,false));\n}\n", "nl": "Returns a String representation of the  <code>&lt;saml:AttributeDesignator&gt;</code> element.", "id": "26111"}
{"code": "@BeforeClass public static void initClass(){\n  scenario=Scenarios.s10_one_commit_no_tag_repository();\n  if (Misc.isDebugMode()) {\n    System.out.println(\"git repository created under: \" + scenario.getRepositoryLocation());\n  }\n}\n", "nl": "Initialiaze the whole junit class tests ; creates the git scenario.", "id": "39154"}
{"code": "public void error(TransformerException exception) throws TransformerException {\n  if (m_throwExceptionOnError)   throw exception;\n else {\n    PrintWriter pw=getErrorWriter();\n    printLocation(pw,exception);\n    pw.println(exception.getMessage());\n  }\n}\n", "nl": "Receive notification of a recoverable error. <p>This corresponds to the definition of \"error\" in section 1.2 of the W3C XML 1.0 Recommendation.  For example, a validating parser would use this callback to report the violation of a validity constraint.  The default behaviour is to take no action.</p> <p>The SAX parser must continue to provide normal parsing events after invoking this method: it should still be possible for the application to process the document through to the end.  If the application cannot do so, then the parser should report a fatal error even if the XML 1.0 recommendation does not require it to do so.</p>", "id": "7852"}
{"code": "protected ComboBoxEditor createEditor(){\n  return new BasicComboBoxEditor.UIResource();\n}\n", "nl": "Creates the default editor that will be used in editable combo boxes. A default editor will be used only if an editor has not been explicitly set with <code>setEditor</code>.", "id": "7800"}
{"code": "public void clearAll(){\n  if (items != null) {\n    items.clear();\n  }\n  if (emptyItems != null) {\n    emptyItems.clear();\n  }\n}\n", "nl": "Clears all views", "id": "56005"}
{"code": "@After public void clean(){\n  mute(null);\n  mute(null);\n  mute(null);\n}\n", "nl": "Cleanups after each tests.", "id": "9895"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.IdentificationElement createIdentificationElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.IdentificationElementImpl();\n}\n", "nl": "Create an instance of IdentificationElement", "id": "50206"}
{"code": "public float floatValue(){\n  return (float)doubleValue;\n}\n", "nl": "The number's float value. WARNING: Possible loss of precision if the value is outside the float range.", "id": "38253"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptionMethodType.KeySize createEncryptionMethodTypeKeySize() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptionMethodTypeImpl.KeySizeImpl();\n}\n", "nl": "Create an instance of EncryptionMethodTypeKeySize", "id": "40255"}
{"code": "public static <S>ServiceLoader<S> load(Class<S> service,ClassLoader loader){\n  return new ServiceLoader<>(service,loader);\n}\n", "nl": "Creates a new service loader for the given service type and class loader.", "id": "14177"}
{"code": "@Override public void close(){\n  idx=0;\n  mark=0;\n}\n", "nl": "Close resets the file back to the start and removes any marked position.", "id": "58527"}
{"code": "public static BooleanArgument noPropertiesFileArgument() throws ArgumentException {\n  return BooleanArgument.builder(OPTION_LONG_NO_PROP_FILE).description(INFO_DESCRIPTION_NO_PROP_FILE.get()).buildArgument();\n}\n", "nl": "Returns the \"No properties file\" boolean argument.", "id": "50163"}
{"code": "public String toXMLString() throws FSMsgException {\n  return this.toXMLString(true,false);\n}\n", "nl": "Returns a String representation of the  element.", "id": "43493"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(noderemovechildnomodificationallowederrEE.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "33805"}
{"code": "public Future<Long> cardByType(String type,JobState state){\n  Future<Long> future=Future.future();\n  jobService.cardByType(type,state,future.completer());\n  return future;\n}\n", "nl": "Get cardinality by job type and state.", "id": "35643"}
{"code": "protected void autoScrollDown(){\n  int index=list.getSelectedIndex();\n  int lastItem=list.getModel().getSize() - 1;\n  if (index < lastItem) {\n    list.setSelectedIndex(index + 1);\n    list.ensureIndexIsVisible(index + 1);\n  }\n}\n", "nl": "This protected method is implementation specific and should be private. do not call or override.", "id": "37924"}
{"code": "public static String escapeValue(String value){\n  value=value.replaceAll(\"'\",\"\\\\\\\\'\");\n  return \"'\" + value + \"'\";\n}\n", "nl": "Escape value.", "id": "29381"}
{"code": "public com.sun.identity.saml2.jaxb.assertion.OneTimeUseElement createOneTimeUseElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.assertion.impl.OneTimeUseElementImpl();\n}\n", "nl": "Create an instance of OneTimeUseElement", "id": "19467"}
{"code": "public static void printWrappedText(final PrintStream stream,final LocalizableMessage message){\n  printWrappedText(stream,message != null ? message.toString() : null);\n}\n", "nl": "Print the provided message on the provided stream.", "id": "54927"}
{"code": "private static String extractRDN(String dn){\n  return extractRDN(dn,false);\n}\n", "nl": "Extracts the RDN value from the DN.  The value does not include the name of the attribute.", "id": "46441"}
{"code": "public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {\n  submitCycle=true;\n  try {\n    handleButton1Request(getCachedPolicy());\n  }\n catch (  AMConsoleException e) {\n    redirectToStartURL();\n  }\n}\n", "nl": "Handles edit policy request.", "id": "38928"}
{"code": "@Override public void execute() throws BuildException {\n  super.execute();\n  execute(createQueryString(\"/start\").toString());\n}\n", "nl": "Execute the requested operation.", "id": "47564"}
{"code": "public Severity severity(){\n  return this.severity;\n}\n", "nl": "Get the severity of this problem. The severity indicates whether the user should be blocked from further action until the problem is corrected, or if continuing with a warning is reasonable. It also determines the warning icon which can be displayed to the user.", "id": "50504"}
{"code": "private boolean isBleEnabled(){\n  final BluetoothManager bm=(BluetoothManager)getActivity().getSystemService(Context.BLUETOOTH_SERVICE);\n  final BluetoothAdapter ba=bm.getAdapter();\n  return ba != null && ba.isEnabled();\n}\n", "nl": "Checks whether the Bluetooth adapter is enabled.", "id": "50303"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignatureMethodType.HMACOutputLength createSignatureMethodTypeHMACOutputLength() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureMethodTypeImpl.HMACOutputLengthImpl();\n}\n", "nl": "Create an instance of SignatureMethodTypeHMACOutputLength", "id": "58282"}
{"code": "public static ZoneRules of(ZoneOffset offset){\n  Objects.requireNonNull(offset,\"offset\");\n  return new ZoneRules(offset);\n}\n", "nl": "Obtains an instance of ZoneRules that has fixed zone rules.", "id": "11253"}
{"code": "public final boolean contains(Object s){\n  for (int i=0; i < m_firstFree; i++) {\n    if (m_map[i] == s)     return true;\n  }\n  return false;\n}\n", "nl": "Tell if the table contains the given Object.", "id": "7029"}
{"code": "public com.sun.identity.saml2.jaxb.assertion.BaseIDAbstractType createBaseIDAbstractType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl();\n}\n", "nl": "Create an instance of BaseIDAbstractType", "id": "48824"}
{"code": "public void stopNicely(){\n  run=false;\n}\n", "nl": "Stops this Thread nicely, as soon as possible but without any forcing.", "id": "8502"}
{"code": "public static void logUnbind(UnbindOperation unbindOperation){\n  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {\n    publisher.logUnbind(unbindOperation);\n  }\n}\n", "nl": "Writes a message to the access logger with information about the unbind request associated with the provided unbind operation.", "id": "58454"}
{"code": "public final void update(byte[] data) throws SignatureException {\n  update(data,0,data.length);\n}\n", "nl": "Updates the data to be signed or verified, using the specified array of bytes.", "id": "11713"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n}\n", "nl": "Ensures that the Directory Server is running.", "id": "37258"}
{"code": "private void searchPublicNamingContexts(ResultCode expectedRC,int expectedNamingContexts) throws Exception {\n  searchEntries(\"\",expectedRC,expectedNamingContexts);\n}\n", "nl": "Searches the list of naming contexts.", "id": "55703"}
{"code": "public static BigInteger toBigIntegerValue(Object decoded){\n  return new BigInteger((byte[])decoded);\n}\n", "nl": "Converts decoded ASN.1 Integer to a BigInteger.", "id": "27539"}
{"code": "@Override public void close() throws Exception {\n  if (pool != null) {\n    pool.close();\n  }\n  InstanceKeyDataSourceFactory.removeInstance(getInstanceKey());\n}\n", "nl": "Close pool being maintained by this datasource.", "id": "18791"}
{"code": "public void removeEjb(String name){\n  try {\n    envCtx.unbind(name);\n  }\n catch (  NamingException e) {\n    log.error(sm.getString(\"naming.unbindFailed\",e));\n  }\n}\n", "nl": "Set the specified EJBs in the naming context.", "id": "42833"}
{"code": "public static List<Foo> findByField2(boolean field2){\n  return getPersistence().findByField2(field2);\n}\n", "nl": "Returns all the foos where field2 = &#63;.", "id": "31063"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlenc.ReferenceListType.KeyReference createReferenceListTypeKeyReference() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.ReferenceListTypeImpl.KeyReferenceImpl();\n}\n", "nl": "Create an instance of ReferenceListTypeKeyReference", "id": "53953"}
{"code": "@Override public void write(byte[] buf,int off,int nbytes){\n  digest.update(buf,off,nbytes);\n}\n", "nl": "Updates a digest with byte array.", "id": "44841"}
{"code": "public void visitTryCatchBlock(Label start,Label end,Label handler,String type){\n  if (mv != null) {\n    mv.visitTryCatchBlock(start,end,handler,type);\n  }\n}\n", "nl": "Visits a try catch block.", "id": "48230"}
{"code": "public boolean canCreateApplication(String realm){\n  return isPolicyAdmin();\n}\n", "nl": "Returns <code>true</code> if subject can create application.", "id": "42087"}
{"code": "private void createContainerEntry(DN dn) throws ADSContextException {\n  createEntry(newAddRequest(dn).addAttribute(\"objectclass\",\"top\",\"ds-cfg-branch\"));\n}\n", "nl": "Creates a container entry with the given dn.", "id": "58762"}
{"code": "private static String stripStringToSingleLine(String s,String separator){\n  return (s != null) ? s.replaceAll(separator,\"\") : null;\n}\n", "nl": "Strings any potential \"separator\" from a given string.", "id": "46422"}
{"code": "public void removeUsers(Set users) throws AMException, SSOException {\n  SSOTokenManager.getInstance().validateToken(super.token);\n  dsServices.modifyMemberShip(super.token,users,super.entryDN,ASSIGNABLE_DYNAMIC_GROUP,REMOVE_MEMBER);\n}\n", "nl": "Removes users from the assignable dynamic group.", "id": "16688"}
{"code": "public void createParentTreeEntryForPage(PdfPage page){\n  getParentTreeHandler().createParentTreeEntryForPage(page);\n}\n", "nl": "Creates and flushes parent tree entry for the page. Effectively this means that new content mustn't be added to the page.", "id": "16715"}
{"code": "public ApiHandlerAssert hasI18nDescription(){\n  assertI18nDescription(actual.description(),annotatedClass);\n  return this;\n}\n", "nl": "Assert that all descriptions use i18n and that the keys have valid entries in the specifies resource bundle.", "id": "45158"}
{"code": "public float convertToMb(long valInBytes){\n  return (float)valInBytes / (BYTEFACTOR * BYTEFACTOR);\n}\n", "nl": "Convert to mb float.", "id": "32938"}
{"code": "protected void prepareForEditing(){\n  if (editingComponent != null) {\n    editingContainer.add(editingComponent);\n  }\n}\n", "nl": "Invoked just before editing is to start. Will add the <code>editingComponent</code> to the <code>editingContainer</code>.", "id": "11072"}
{"code": "protected void installDefaults(){\n  LookAndFeel.installColorsAndFont(header,\"TableHeader.background\",\"TableHeader.foreground\",\"TableHeader.font\");\n  LookAndFeel.installProperty(header,\"opaque\",Boolean.TRUE);\n}\n", "nl": "Initializes JTableHeader properties such as font, foreground, and background. The font, foreground, and background properties are only set if their current value is either null or a UIResource, other properties are set if the current value is null.", "id": "48379"}
{"code": "@NonNull public final Agera takeWhile(@NonNull Condition condition){\n  return new AgeraTakeWhile(this,condition);\n}\n", "nl": "Forwards update() signals if the condition returns true or disconnects if it returns false.", "id": "21635"}
{"code": "protected boolean mustReadSchema(){\n  return true;\n}\n", "nl": "Returns <CODE>true</CODE> if the schema must be read and <CODE>false</CODE> otherwise.", "id": "31507"}
{"code": "public int hashCode(){\n  return hash;\n}\n", "nl": "Return a hash code for this <code>MarshalledObject</code>.", "id": "5846"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.secext.AttributedString createAttributedString() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.AttributedStringImpl();\n}\n", "nl": "Create an instance of AttributedString", "id": "7806"}
{"code": "public void checkCanceled() throws SynchronizationException {\n  if (isCanceled()) {\n    throw new SynchronizationException(\"Reconciliation canceled: \" + getReconId());\n  }\n}\n", "nl": "Check if a given reconciliation instance has requested to be canceled and throw an exception if it has", "id": "17605"}
{"code": "public void closeSocket(Socket socket){\n  if (socket == null) {\n    return;\n  }\n  try {\n    socket.getInputStream().close();\n  }\n catch (  IOException e) {\n  }\n  try {\n    socket.getOutputStream().close();\n  }\n catch (  IOException e) {\n  }\n  try {\n    socket.close();\n  }\n catch (  IOException e) {\n  }\n}\n", "nl": "Closes the connection.", "id": "51267"}
{"code": "public static Class<?> loadClass(String className) throws ClassNotFoundException {\n  MBEANSERVER_LOGGER.logp(Level.FINEST,DefaultLoaderRepository.class.getName(),\"loadClass\",className);\n  return load(null,className);\n}\n", "nl": "Go through the list of class loaders and try to load the requested class. The method will stop as soon as the class is found. If the class is not found the method will throw a <CODE>ClassNotFoundException</CODE> exception.", "id": "19599"}
{"code": "public boolean containsChildrenOf(LDAPURL parentUrl){\n  return contains(parentUrl);\n}\n", "nl": "Tells whether the list of unreliable contains children of the entry with LDAPUrl parentUrl.", "id": "2480"}
{"code": "public boolean contains(IntegerSyntax attribute){\n  return contains(attribute.getValue());\n}\n", "nl": "Determine if this set-of-integer attribute contains the given integer attribute's value.", "id": "43471"}
{"code": "private void displayWelcomeMessage(){\n  String welcomeMessage=mFirebaseRemoteConfig.getString(WELCOME_MESSAGE_KEY);\n  if (mFirebaseRemoteConfig.getBoolean(WELCOME_MESSAGE_CAPS_KEY)) {\n    mWelcomeTextView.setAllCaps(true);\n  }\n else {\n    mWelcomeTextView.setAllCaps(false);\n  }\n  mWelcomeTextView.setText(welcomeMessage);\n}\n", "nl": "Display welcome message in all caps if welcome_message_caps is set to true. Otherwise display welcome message as fetched from welcome_message.", "id": "28599"}
{"code": "public static String applyWarningBackgroundToHtml(String html){\n  return DIV_OPEN_WARNING_BACKGROUND + html + DIV_CLOSE;\n}\n", "nl": "Returns the html text passed as parameter with the warning background applied to it.", "id": "50709"}
{"code": "public static void deleteEntry(DN dn) throws Exception {\n  DeleteOperation deleteOperation=getRootConnection().processDelete(dn);\n  assertEquals(deleteOperation.getResultCode(),ResultCode.SUCCESS);\n}\n", "nl": "Deletes the provided entry from the Directory Server using an internal operation.", "id": "259"}
{"code": "public void initialize(String pdpEntityId,String pepEntityId,Map properties) throws XACMLException {\n}\n", "nl": "Initializes the mapper implementation. This would be called immediately  after constructing an instance of the implementation.", "id": "20587"}
{"code": "public void logException(Throwable ex){\n  if (needsLogging) {\n    this.getLogger().error(ex.getMessage(),ex);\n  }\n}\n", "nl": "Log an exception.", "id": "5058"}
{"code": "public Observable<Response<T,List<String>>> usingGallery(){\n  return applicationComponent.gallery().pickImages();\n}\n", "nl": "Call it when crop option is required.", "id": "32046"}
{"code": "@After public void clean(){\n  mute(null);\n  mute(null);\n  mute(null);\n}\n", "nl": "Cleanups after each tests.", "id": "26846"}
{"code": "public void changed_area_join(PlaPointFloat p_point,int p_layer){\n  changed_area.join(p_point,p_layer);\n}\n", "nl": "enlarges the changed area on p_layer, so that it contains p_point", "id": "2668"}
{"code": "protected void paintComponent(Graphics g){\n  if (ui != null) {\n    super.paintComponent(g);\n  }\n else   if (isOpaque()) {\n    g.setColor(getBackground());\n    g.fillRect(0,0,getWidth(),getHeight());\n  }\n}\n", "nl": "Paints this <code>Filler</code>.  If this <code>Filler</code> has a UI this method invokes super's implementation, otherwise if this <code>Filler</code> is opaque the <code>Graphics</code> is filled using the background.", "id": "6401"}
{"code": "public Period normalized(){\n  long totalMonths=toTotalMonths();\n  long splitYears=totalMonths / 12;\n  int splitMonths=(int)(totalMonths % 12);\n  if (splitYears == years && splitMonths == months) {\n    return this;\n  }\n  return create(Math.toIntExact(splitYears),splitMonths,days);\n}\n", "nl": "Returns a copy of this period with the years and months normalized. <p> This normalizes the years and months units, leaving the days unit unchanged. The months unit is adjusted to have an absolute value less than 11, with the years unit being adjusted to compensate. For example, a period of \"1 Year and 15 months\" will be normalized to \"2 years and 3 months\". <p> The sign of the years and months units will be the same after normalization. For example, a period of \"1 year and -25 months\" will be normalized to \"-1 year and -1 month\". <p> This instance is immutable and unaffected by this method call.", "id": "47989"}
{"code": "public final static short tertiaryOrder(int order){\n  return ((short)(order&=RBCollationTables.TERTIARYORDERMASK));\n}\n", "nl": "Return the tertiary component of a collation element.", "id": "54664"}
{"code": "public String toStringImpl(){\n  return new StringBuilder().append(port).toString();\n}\n", "nl": "Used by super class to log the attribute's contents when packet logging is enabled.", "id": "2301"}
{"code": "public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {\n  return super.newInstance(javaContentInterface);\n}\n", "nl": "Create an instance of the specified Java content interface.", "id": "40692"}
{"code": "public Caret createCaret(){\n  return null;\n}\n", "nl": "Fetches a caret that can navigate through views produced by the associated ViewFactory.", "id": "20432"}
{"code": "public static GeometryCollection fromJson(String json){\n  GsonBuilder gson=new GsonBuilder();\n  gson.registerTypeAdapter(Position.class,new PositionDeserializer());\n  gson.registerTypeAdapter(Geometry.class,new GeometryDeserializer());\n  return gson.create().fromJson(json,GeometryCollection.class);\n}\n", "nl": "Create a GeoJSON geometry collection object from JSON.", "id": "6976"}
{"code": "public boolean beginContentStaticTextResultDisplay(ChildDisplayEvent event){\n  if ((ResultVal == null) || (ResultVal.length() == 0)) {\n    return false;\n  }\n else {\n    return true;\n  }\n}\n", "nl": "Returns if it begins content static text result display", "id": "6643"}
{"code": "public static int w(String tag,String msg,Throwable tr){\n  return Log.w(tag,msg,tr);\n}\n", "nl": "Send a WARN log message and log the exception.", "id": "33882"}
{"code": "public <M extends Configuration>void registerDeleteListener(SetRelationDefinition<?,M> d,ConfigurationDeleteListener<M> listener) throws ConfigException {\n  registerDeleteListener(d,new ServerManagedObjectDeleteListenerAdaptor<M>(listener));\n}\n", "nl": "Register to be notified when existing child configurations are deleted beneath a set relation.", "id": "17049"}
{"code": "protected void startDocumentInternal() throws org.xml.sax.SAXException {\n  super.startDocumentInternal();\n  m_needToCallStartDocument=false;\n}\n", "nl": "Receive notification of the beginning of a document. <p>The SAX parser will invoke this method only once, before any other methods in this interface or in DTDHandler (except for setDocumentLocator).</p>", "id": "19721"}
{"code": "private void readObject(ObjectInputStream in) throws IOException {\n  throw new NotSerializableException();\n}\n", "nl": "This method always throws a <code>NotSerializableException</code>, because this object cannot be serialized,", "id": "19520"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_attrcreatetextnode2.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "38673"}
{"code": "private static long calcSize(long size,long skip,long limit){\n  return size >= 0 ? Math.max(-1,Math.min(size - skip,limit)) : -1;\n}\n", "nl": "Calculates the sliced size given the current size, number of elements skip, and the number of elements to limit.", "id": "55071"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ac.SharedSecretDynamicPlaintextType createSharedSecretDynamicPlaintextType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SharedSecretDynamicPlaintextTypeImpl();\n}\n", "nl": "Create an instance of SharedSecretDynamicPlaintextType", "id": "7769"}
{"code": "public static String decrypt(String encrypted){\n  String tmp;\n  try {\n    tmp=(Crypt.decode(encrypted));\n  }\n catch (  Exception ex) {\n    tmp=encrypted;\n  }\n  if (tmp == null) {\n    tmp=encrypted;\n  }\n  return tmp;\n}\n", "nl": "Decrypts the encrypted password. If the string cannot be decrypted the original string passed in will be returned.", "id": "53148"}
{"code": "public boolean isMemoryLocking(){\n  return memoryLocking;\n}\n", "nl": "Returns <code>true</code> if memory locking mode is enabled. Memory locking mode is enabled when the failureLockoutDuration is greater then zero.", "id": "19662"}
{"code": "public static void marshal(Object jaxbObject,URL xml){\n  _marshal(jaxbObject,xml);\n}\n", "nl": "Writes a Java object tree to XML and store it to the specified location.", "id": "33955"}
{"code": "public boolean isShiftClick(){\n  return click.isShiftClick();\n}\n", "nl": "Gets whether the ClickType for this event indicates that the key was pressed down when the click was made.", "id": "17807"}
{"code": "public void clear(){\n  bufSize=0;\n}\n", "nl": "Resets the buffer", "id": "2376"}
{"code": "public void schedule(TimerTask task,long delay,long period){\n  if (delay < 0)   throw new IllegalArgumentException(\"Negative delay.\");\n  if (period <= 0)   throw new IllegalArgumentException(\"Non-positive period.\");\n  sched(task,System.currentTimeMillis() + delay,-period);\n}\n", "nl": "Schedules the specified task for repeated <i>fixed-delay execution</i>, beginning after the specified delay.  Subsequent executions take place at approximately regular intervals separated by the specified period. <p>In fixed-delay execution, each execution is scheduled relative to the actual execution time of the previous execution.  If an execution is delayed for any reason (such as garbage collection or other background activity), subsequent executions will be delayed as well. In the long run, the frequency of execution will generally be slightly lower than the reciprocal of the specified period (assuming the system clock underlying <tt>Object.wait(long)</tt> is accurate). <p>Fixed-delay execution is appropriate for recurring activities that require \"smoothness.\"  In other words, it is appropriate for activities where it is more important to keep the frequency accurate in the short run than in the long run.  This includes most animation tasks, such as blinking a cursor at regular intervals.  It also includes tasks wherein regular activity is performed in response to human input, such as automatically repeating a character as long as a key is held down.", "id": "27563"}
{"code": "public static void deregisterSupportedFeature(String featureOID){\nsynchronized (directoryServer.supportedFeatures) {\n    directoryServer.supportedFeatures.remove(featureOID);\n  }\n}\n", "nl": "Deregisters the provided OID as a supported feature for the Directory Server.  This will have no effect if the specified feature OID is not present in the list of supported features.", "id": "31003"}
{"code": "public void allowDetachToRelease(boolean allowRelease){\n}\n", "nl": "Specify if it's OK for detach to release the iterator for reuse. This function should be called with a value of false for objects that are  stored in variables. Calling this with a value of false on a XNodeSet will cause the nodeset  to be cached.", "id": "47312"}
{"code": "public boolean isErrorLoggable(Level level){\n  return errorLogger.isLoggable(level);\n}\n", "nl": "Checks if an error message of the given level would actually be logged by this logger. This check is based on the Logger's effective level.", "id": "57173"}
{"code": "public Connection createConnection(String netType,String addrType,String addr,int ttl,int numAddrs) throws SdpException {\n  ConnectionField connectionImpl=new ConnectionField();\n  connectionImpl.setNetworkType(netType);\n  connectionImpl.setAddressType(addrType);\n  connectionImpl.setAddress(addr);\n  return connectionImpl;\n}\n", "nl": "Returns a Connection object with the specified properties a", "id": "38080"}
{"code": "public String toXML(){\n  StringBuilder stringBuilder=new StringBuilder();\n  return stringBuilder.toString();\n}\n", "nl": "Default toXML Method to Marshal Object into XML.", "id": "25147"}
{"code": "public static Name of(final String... parts){\n  Reject.ifTrue(parts.length == 0);\n  Name name=null;\n  for (  String part : parts) {\n    name=new Name(name,part);\n  }\n  return name;\n}\n", "nl": "Builds a new Name using the given name parts. They are ordered in descending order (ancestors first, leaf last)", "id": "48174"}
{"code": "@Override public ShapeTile intersection(ShapeTile p_other){\n  return p_other.intersection(this);\n}\n", "nl": "returns the intersection of this box with a ConvexShape", "id": "18416"}
{"code": "public boolean isClientPresent(String clientType){\n  String dn=generateClientDN(clientType);\n  boolean exists=false;\n  try {\n    AMEntity amEntity=amConnection.getEntity(dn);\n    exists=amEntity.isExists();\n  }\n catch (  SSOException ssoe) {\n  }\n  return exists;\n}\n", "nl": "Checks if the clientType exists in the db.", "id": "40543"}
{"code": "@SuppressWarnings(\"unused\") public static double parseDouble(byte[] bytes){\n  return parseDouble(bytes,0,bytes.length);\n}\n", "nl": "Parses a double from a (big-endian) byte array.", "id": "32477"}
{"code": "public String str(){\n  return (null != m_obj) ? ((String)m_obj) : \"\";\n}\n", "nl": "Cast result object to a string.", "id": "33258"}
{"code": "public void addTopicFavorite(String topicId,String access_token,Callback<Status> callback){\n  topicApi=getRetrofitForSimpleJson().create(TopicApi.class);\n  topicApi.addFavorite(topicId,access_token).enqueue(callback);\n}\n", "nl": "Login user add favorite topic", "id": "57499"}
{"code": "public static ExecutorService newWorkStealingPool(int parallelism){\n  return new ForkJoinPool(parallelism,ForkJoinPool.defaultForkJoinWorkerThreadFactory,null,true);\n}\n", "nl": "Creates a thread pool that maintains enough threads to support the given parallelism level, and may use multiple queues to reduce contention. The parallelism level corresponds to the maximum number of threads actively engaged in, or available to engage in, task processing. The actual number of threads may grow and shrink dynamically. A work-stealing pool makes no guarantees about the order in which submitted tasks are executed.", "id": "49523"}
{"code": "public Set<N> nodeSet(){\n  return theNodeSet;\n}\n", "nl": "Returns an unmodifiable Set view of the nodes contained in this graph. The set is backed by the graph, so changes to the graph are reflected in the set.", "id": "13602"}
{"code": "public final boolean contains_trace_tails(Collection<BrdItem> p_items,NetNosList p_except_net_no_arr){\n  for (  BrdItem curr_ob : p_items) {\n    if (!(curr_ob instanceof BrdTracep))     continue;\n    BrdTracep curr_trace=(BrdTracep)curr_ob;\n    if (curr_trace.nets_equal(p_except_net_no_arr))     continue;\n    if (curr_trace.is_tail())     return true;\n  }\n  return false;\n}\n", "nl": "Checks, if the list p_items contains traces, which have no contact at their start or end point.  Trace with net number p_except_net_no are ignored.", "id": "15636"}
{"code": "protected void copy(byte[] src,byte[] dst,int dstOffset){\n  System.arraycopy(src,0,dst,dstOffset,src.length);\n}\n", "nl": "This method will copy all bytes of <code>src</code> to <code>dst</code> at the specified location.", "id": "12608"}
{"code": "@Override public synchronized int hashCode(){\n  int result=1;\n  for (int i=0; i < elementCount; i++) {\n    result=(31 * result) + (elementData[i] == null ? 0 : elementData[i].hashCode());\n  }\n  return result;\n}\n", "nl": "Returns an integer hash code for the receiver. Objects which are equal return the same value for this method.", "id": "13624"}
{"code": "protected int _documentRoot(int nodeIdentifier){\n  if (nodeIdentifier == NULL)   return NULL;\n  for (int parent=_parent(nodeIdentifier); parent != NULL; nodeIdentifier=parent, parent=_parent(nodeIdentifier))   ;\n  return nodeIdentifier;\n}\n", "nl": "Given a node identifier, find the owning document node.  Unlike the DOM, this considers the owningDocument of a Document to be itself. Note that in shared DTMs this may not be zero.", "id": "40095"}
{"code": "public void save(ObjectOutputStream p_object_stream){\n  try {\n    WindowSavedAttributes saved_attributes=new WindowSavedAttributes(this.getBounds(),this.isVisible());\n    p_object_stream.writeObject(saved_attributes);\n  }\n catch (  java.io.IOException e) {\n    System.err.println(\"BoardSubWindow.save: save failed\");\n  }\n}\n", "nl": "Saves this frame to disk.", "id": "51243"}
{"code": "public void handleButton3Request(RequestInvocationEvent event){\n  super.handleButton2Request(event);\n}\n", "nl": "Handles \"back to \" previous page request.", "id": "998"}
{"code": "public void handleButton2Request(RequestInvocationEvent event){\n  tblModelPopulated=false;\n  forwardTo();\n}\n", "nl": "Handles reset request.", "id": "7563"}
{"code": "public static String extractServerId(String id){\n  if (id == null || id.length() < 2) {\n    return null;\n  }\n  return id.substring(id.length() - 2);\n}\n", "nl": "Extracts serverID from the specified id.", "id": "6957"}
{"code": "public void schemaChanged(String serviceName,String version){\nsynchronized (mapRealmToFormat) {\n    mapRealmToFormat.remove(ROOT);\n  }\n}\n", "nl": "This method will be invoked when a service's schema has been changed.", "id": "58778"}
{"code": "void appendEndElement(){\n  if (previousSiblingWasParent)   nodes.writeEntry(previousSibling,2,NULL);\n  previousSibling=currentParent;\n  nodes.readSlot(currentParent,gotslot);\n  currentParent=gotslot[1] & 0xFFFF;\n  previousSiblingWasParent=true;\n}\n", "nl": "Terminate the element currently acting as an insertion point. Subsequent insertions will occur as the last child of this element's parent.", "id": "25740"}
{"code": "@Override public void sessionDestroyed(HttpSessionEvent event){\n  log(\"sessionDestroyed('\" + event.getSession().getId() + \"')\");\n}\n", "nl": "Record the fact that a session has been destroyed.", "id": "11205"}
{"code": "private boolean removePendingRequest(final RequestContextImpl<?,?> requestContext){\n  return pendingRequests.remove(requestContext.getMessageID()) != null;\n}\n", "nl": "Deregister a request context once it has completed.", "id": "48296"}
{"code": "void nestedMayThrow(boolean doThrow){\nsynchronized (this) {\nsynchronized (Main.class) {\nsynchronized (new Object()) {\nsynchronized (Class.class) {\n          if (doThrow) {\n            throw new MyException();\n          }\n        }\n      }\n    }\n  }\n}\n", "nl": "Tests simple nesting, with and without a throw.", "id": "32945"}
{"code": "protected boolean needToEscapeXMLSpecialCharacters(String hostEntityID,String remoteEntityID,String realm){\n  return true;\n}\n", "nl": "Decides whether it needs to escape XML special characters for attribute values or not.", "id": "35313"}
{"code": "public void add(NetObject obj){\n  super.add(obj);\n}\n", "nl": "Add a new object to the list.", "id": "17264"}
{"code": "public String toString(){\n  return getClass().getName() + \"[type=\" + type+ \",index0=\"+ index0+ \",index1=\"+ index1+ \"]\";\n}\n", "nl": "Returns a string representation of this ListDataEvent. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be <code>null</code>.", "id": "48827"}
{"code": "public static int combine(int hashCode,boolean value){\n  int v=value ? 1231 : 1237;\n  return combine(hashCode,v);\n}\n", "nl": "Combines hashCode of previous elements sequence and value's hashCode.", "id": "8288"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.secext.BinarySecurityTokenElement createBinarySecurityTokenElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.BinarySecurityTokenElementImpl();\n}\n", "nl": "Create an instance of BinarySecurityTokenElement", "id": "19479"}
{"code": "public static long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){\n  return getService().dynamicQueryCount(dynamicQuery);\n}\n", "nl": "Returns the number of rows matching the dynamic query.", "id": "33684"}
{"code": "public static IOFileFilter fileFileFilter(){\n  return FileFileFilter.FILE;\n}\n", "nl": "Returns a filter that checks if the file is a file (and not a directory).", "id": "10700"}
{"code": "public void parse(String systemId) throws org.xml.sax.SAXException, IOException {\n  parse(new InputSource(systemId));\n}\n", "nl": "Parse a document.", "id": "1889"}
{"code": "public boolean isFlying(){\n  return isFlying;\n}\n", "nl": "Returns whether the player is trying to start or stop flying.", "id": "43503"}
{"code": "public boolean removeAll(Collection<?> c){\n  Objects.requireNonNull(c);\n  return batchRemove(c,false);\n}\n", "nl": "Removes from this list all of its elements that are contained in the specified collection.", "id": "54446"}
{"code": "protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {\n  super.appendAndPush(handler,elem);\n  elem.setDOMBackPointer(handler.getOriginatingNode());\n  handler.getStylesheet().setTemplate((ElemTemplate)elem);\n}\n", "nl": "Append the current template element to the current template element, and then push it onto the current template element stack.", "id": "58626"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.CElement createCElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.CElementImpl();\n}\n", "nl": "Create an instance of CElement", "id": "58495"}
{"code": "private static Class<?> forName(String name) throws ReflectException {\n  try {\n    return Class.forName(name);\n  }\n catch (  Exception e) {\n    throw new ReflectException(e);\n  }\n}\n", "nl": "Load a class", "id": "19733"}
{"code": "public Location subtract(Vector vec){\n  this.x-=vec.getX();\n  this.y-=vec.getY();\n  this.z-=vec.getZ();\n  return this;\n}\n", "nl": "Subtracts the location by a vector.", "id": "12859"}
{"code": "public boolean isValidMonthDay(MonthDay monthDay){\n  return monthDay != null && monthDay.isValidYear(year);\n}\n", "nl": "Checks if the month-day is valid for this year. <p> This method checks whether this year and the input month and day form a valid date.", "id": "9961"}
{"code": "public static boolean isConnected(Context context){\n  NetworkInfo info=NtConDetector.getNetworkInfo(context);\n  return (info != null && info.isConnected());\n}\n", "nl": "Check if there is any connectivity", "id": "3849"}
{"code": "private boolean invokerInHeavyWeightPopup(Component i){\n  if (i != null) {\n    Container parent;\n    for (parent=i.getParent(); parent != null; parent=parent.getParent()) {\n      if (parent instanceof Popup.HeavyWeightWindow) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "nl": "Returns true if the Component <code>i</code> inside a heavy weight <code>Popup</code>.", "id": "12220"}
{"code": "public com.sun.identity.wsfederation.jaxb.entityconfig.AttributeType createAttributeType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.entityconfig.impl.AttributeTypeImpl();\n}\n", "nl": "Create an instance of AttributeType", "id": "42819"}
{"code": "public int lineno(){\n  return lineNumber;\n}\n", "nl": "Returns the current line number.", "id": "48081"}
{"code": "@Override public MinguoDate dateYearDay(int prolepticYear,int dayOfYear){\n  return new MinguoDate(LocalDate.ofYearDay(prolepticYear + YEARS_DIFFERENCE,dayOfYear));\n}\n", "nl": "Obtains a local date in Minguo calendar system from the proleptic-year and day-of-year fields.", "id": "41344"}
{"code": "private boolean contains(int s){\n  return (indexOf(s,0) >= 0);\n}\n", "nl": "Tell if the table contains the given node.", "id": "57467"}
{"code": "public Builder obsolete(final boolean isObsolete){\n  this.isObsolete=isObsolete;\n  return this;\n}\n", "nl": "Specifies whether this schema element is obsolete.", "id": "5000"}
{"code": "@Override public void addHeader(String name,String value){\n  this._getHttpServletResponse().addHeader(name,value);\n}\n", "nl": "The default behavior of this method is to return addHeader(String name, String value) on the wrapped response object.", "id": "58624"}
{"code": "public static NodeList selectNodeList(Node contextNode,String str) throws TransformerException {\n  return selectNodeList(contextNode,str,contextNode);\n}\n", "nl": "Use an XPath string to select a nodelist. XPath namespace prefixes are resolved from the contextNode.", "id": "19454"}
{"code": "private boolean compareAndDecrementWorkerCount(int expect){\n  return ctl.compareAndSet(expect,expect - 1);\n}\n", "nl": "Attempts to CAS-decrement the workerCount field of ctl.", "id": "30609"}
{"code": "public Reflect call(String name) throws ReflectException {\n  return call(name,new Object[0]);\n}\n", "nl": "Call a method by its name. <p> This is a convenience method for calling <code>call(name, new Object[0])</code>", "id": "51268"}
{"code": "public void addVertex(String label,List<DbDataContainer> attributes){\n  String insert=\"CREATE (: \" + label + \" {\";\n  insert=this.addValuesToStatement(insert,attributes);\n  insert+=\"})\";\n  this.transaction.run(insert);\n}\n", "nl": "Add a new vertex to the graph.", "id": "23029"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(textsplittextnomodificationallowederrEE.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "7921"}
{"code": "public Message handleInteraction(Message requestMessage,InquiryElement inquiryElement) throws InteractionException, InteractionSOAPFaultException, SOAPFaultException {\n  return handleInteraction(requestMessage,inquiryElement,null);\n}\n", "nl": "Handles resource owner interactions on behalf of <code>WSP</code>. This is invoked at <code>WSP</code> side.", "id": "49780"}
{"code": "public static <T>T orderAccesses(final T ref){\n  theVolatile=0;\n  return ref;\n}\n", "nl": "Informally: Ensures that accesses (reads or writes) using the given reference prior to the invocation of this method occur before subsequent accesses.  For details, see the class documentation for this class.", "id": "997"}
{"code": "@Override public QueryResponseWrapper query(ParsedQuery query,int limit,long offset) throws IndexParseException {\n  long maxIndex=offset + limit;\n  ResultSet results=session.execute(generateQueryStatement(query,maxIndex + 1));\n  return DocumentPersistanceUtils.parseResultSetWithLimitAndOffset(results,limit,offset);\n}\n", "nl": "Do a query with limit and offset.", "id": "39064"}
{"code": "public net.aimeizi.person.QueryParameter.Builder clearAgeStart(){\n  fieldSetFlags()[0]=false;\n  return this;\n}\n", "nl": "Clears the value of the 'ageStart' field.", "id": "621"}
{"code": "public static XMPDateTime parse(String iso8601String) throws XMPException {\n  return parse(iso8601String,new XMPDateTimeImpl());\n}\n", "nl": "Converts an ISO 8601 string to an <code>XMPDateTime</code>. Parse a date according to ISO 8601 and http://www.w3.org/TR/NOTE-datetime: <ul> <li>YYYY <li>YYYY-MM <li>YYYY-MM-DD <li>YYYY-MM-DDThh:mmTZD <li>YYYY-MM-DDThh:mm:ssTZD <li>YYYY-MM-DDThh:mm:ss.sTZD </ul> Data fields: <ul> <li>YYYY = four-digit year <li>MM = two-digit month (01=January, etc.) <li>DD = two-digit day of month (01 through 31) <li>hh = two digits of hour (00 through 23) <li>mm = two digits of minute (00 through 59) <li>ss = two digits of second (00 through 59) <li>s = one or more digits representing a decimal fraction of a second <li>TZD = time zone designator (Z or +hh:mm or -hh:mm) </ul> Note that ISO 8601 does not seem to allow years less than 1000 or greater than 9999. We allow any year, even negative ones. The year is formatted as \"%.4d\". <p> <em>Note:</em> Tolerate missing TZD, assume is UTC. Photoshop 8 writes dates like this for exif:GPSTimeStamp.<br> <em>Note:</em> DOES NOT APPLY ANYMORE. Tolerate missing date portion, in case someone foolishly writes a time-only value that way.", "id": "47674"}
{"code": "public static int mainModify(String[] args){\n  return mainModify(args,true,System.out,System.err);\n}\n", "nl": "Parses the provided command-line arguments and uses that information to run the ldapmodify tool.", "id": "35973"}
{"code": "public void installUI(JComponent a){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).installUI(a);\n  }\n}\n", "nl": "Invokes the <code>installUI</code> method on each UI handled by this object.", "id": "24377"}
{"code": "public static void printWrappedText(final PrintStream stream,final String message){\n  if (stream != null && message != null && !message.isEmpty()) {\n    stream.println(wrapText(message,MAX_LINE_WIDTH));\n  }\n}\n", "nl": "Prints the provided string on the provided stream.", "id": "30047"}
{"code": "public static Document sign(FederationElement descriptor,SPSSOConfigElement spconfig,IDPSSOConfigElement idpconfig) throws JAXBException, WSFederationMetaException {\n  return null;\n}\n", "nl": "Signs service provider descriptor under entity descriptor if an cert alias is found in service provider config and identity provider descriptor under entity descriptor if an cert alias is found in identity provider config.", "id": "45475"}
{"code": "public boolean noStore(){\n  return noStore;\n}\n", "nl": "If true, this response should not be cached.", "id": "1802"}
{"code": "public void reset() throws IOException {\nsynchronized (lock) {\n    super.reset();\n    lineNumber=markedLineNumber;\n    skipLF=markedSkipLF;\n  }\n}\n", "nl": "Reset the stream to the most recent mark.", "id": "15527"}
{"code": "private void updateAltTextView(){\n  String text=getAltText();\n  if (text != null) {\n    ImageLabelView newView;\n    newView=new ImageLabelView(getElement(),text);\nsynchronized (this) {\n      altView=newView;\n    }\n  }\n}\n", "nl": "Updates the view representing the alt text.", "id": "51012"}
{"code": "public com.sun.identity.wsfederation.jaxb.xmlsig.TransformType createTransformType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.TransformTypeImpl();\n}\n", "nl": "Create an instance of TransformType", "id": "36340"}
{"code": "private void init(SSLParametersImpl sslParameters,String[] enabledProtocols,String[] enabledCipherSuites) throws IOException {\n  this.sslParameters=sslParameters;\n  this.enabledProtocols=enabledProtocols;\n  this.enabledCipherSuites=enabledCipherSuites;\n}\n", "nl": "Initialize the SSL socket and set the certificates for the future handshaking.", "id": "6877"}
{"code": "public long toHours(){\n  return seconds / SECONDS_PER_HOUR;\n}\n", "nl": "Gets the number of hours in this duration. <p> This returns the total number of hours in the duration by dividing the number of seconds by 3600. <p> This instance is immutable and unaffected by this method call.", "id": "19879"}
{"code": "public int hashCode(){\n  return encryptedString.hashCode();\n}\n", "nl": "Returns a hash code for this object.", "id": "6429"}
{"code": "@Override public synchronized void publish(LogRecord record){\n  if (!isLoggable(record)) {\n    return;\n  }\n  super.publish(record);\n  flush();\n}\n", "nl": "Format and publish a <tt>LogRecord</tt>.", "id": "21821"}
{"code": "public com.sun.identity.liberty.ws.interaction.jaxb.SelectType createSelectType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.SelectTypeImpl();\n}\n", "nl": "Create an instance of SelectType", "id": "51241"}
{"code": "public void clearWelcomeFiles(String hostName,String contextPath,String version){\n  hostName=renameWildcardHost(hostName);\n  ContextVersion contextVersion=findContextVersion(hostName,contextPath,version,false);\n  if (contextVersion == null) {\n    return;\n  }\n  contextVersion.welcomeResources=new String[0];\n}\n", "nl": "Clear the welcome files for the given context.", "id": "24248"}
{"code": "public DocumentType createDocumentType(String qualifiedName,String publicId,String systemId) throws DOMException {\n  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,\"Not Implemented\");\n}\n", "nl": "Creates an empty <code>DocumentType</code> node. Entity declarations and notations are not made available. Entity reference expansions and default attribute additions do not occur. It is expected that a future version of the DOM will provide a way for populating a <code>DocumentType</code>.", "id": "34010"}
{"code": "public com.sun.identity.wsfederation.jaxb.xmlsig.RSAKeyValueType createRSAKeyValueType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.RSAKeyValueTypeImpl();\n}\n", "nl": "Create an instance of RSAKeyValueType", "id": "27135"}
{"code": "public void internalFrameDeiconified(InternalFrameEvent e){\n}\n", "nl": "Invoked when an internal frame is de-iconified.", "id": "17898"}
{"code": "public void runTest() throws Throwable {\n  Document doc;\n  String documentValue;\n  doc=(Document)load(\"staff\",false);\n  documentValue=doc.getNodeValue();\n  assertNull(\"documentNodeValueNull\",documentValue);\n}\n", "nl": "Runs the test case.", "id": "23444"}
{"code": "public static ByteString empty(){\n  return EMPTY;\n}\n", "nl": "Returns an empty byte string.", "id": "54542"}
{"code": "protected MouseListener createMouseListener(){\n  return getHandler();\n}\n", "nl": "Creates the listener responsible for updating the selection based on mouse events.", "id": "31348"}
{"code": "public double user_to_board(double p_value){\n  return UnitMeasure.scale(p_value / scale_factor,user_unit,board_unit);\n}\n", "nl": "Scale a value from the user to the board coordinate system.", "id": "14698"}
{"code": "public static String repeat(final String value,final int multiplier){\n  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);\n  return Stream.generate(null).limit(multiplier).collect(joining());\n}\n", "nl": "Returns a repeated string given a multiplier.", "id": "31643"}
{"code": "public JobService delayedCount(String type,Handler<AsyncResult<Long>> handler){\n  delegate.delayedCount(type,handler);\n  return this;\n}\n", "nl": "Get cardinality of delayed jobs", "id": "3414"}
{"code": "public static boolean isRunning(JComponent c){\n  return sharedInstance._isRunning(c);\n}\n", "nl": "Stops autoscroll events from happening on the specified component.", "id": "28391"}
{"code": "public static String defaultHelpDeskAdminRoleCreateDuringOrgConfig(){\n  initialize();\n  return (defaultHELP_DESK_ADMIN);\n}\n", "nl": "Returns the default help desk admin role name created when an organization is created in OpenAM.", "id": "2930"}
{"code": "public boolean reset(){\n  boolean wasReset=false;\n  if (super.reset()) {\n    resetToSAXHandler();\n    wasReset=true;\n  }\n  return wasReset;\n}\n", "nl": "Try's to reset the super class and reset this class for  re-use, so that you don't need to create a new serializer  (mostly for performance reasons).", "id": "53826"}
{"code": "public static ComponentUI createUI(JComponent a){\n  ComponentUI mui=new MultiProgressBarUI();\n  return MultiLookAndFeel.createUIs(mui,((MultiProgressBarUI)mui).uis,a);\n}\n", "nl": "Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI.  Otherwise, just returns the UI object obtained from the default <code>LookAndFeel</code>.", "id": "29834"}
{"code": "public int compareTo(Boolean that){\n  return compare(value,that.value);\n}\n", "nl": "Compares this object to the specified boolean object to determine their relative order.", "id": "14126"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.LEmergencyContactElement createLEmergencyContactElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LEmergencyContactElementImpl();\n}\n", "nl": "Create an instance of LEmergencyContactElement", "id": "19495"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_elementreplaceexistingattribute.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "11936"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n  entryDNType=CoreSchema.getEntryDNAttributeType();\n}\n", "nl": "Ensures that the Directory Server is running.", "id": "6180"}
{"code": "final void deregisterConstraint(Constraint constraint){\n  if (!constraints.remove(constraint)) {\n    throw new RuntimeException(\"Failed to deregister a constraint\");\n  }\n}\n", "nl": "Deregister a constraint from the managed object definition. <p> This method <b>must not</b> be called by applications and is only intended for internal testing.", "id": "742"}
{"code": "synchronized private void processNext(){\n  if (mQueue.isEmpty())   throw new RuntimeException(\"No active request in processNext()\");\n  mQueue.remove();\n  if (!mQueue.isEmpty()) {\n    mQueue.peek().start(mBluetoothGatt);\n  }\n}\n", "nl": "Process the next request in the queue for a BluetoothGatt function (such as characteristic read).", "id": "55487"}
{"code": "protected void addImpl(Component comp,Object constraints,int index){\n  super.addImpl(comp,constraints,index);\n  if (glassPane != null && glassPane.getParent() == this && getComponent(0) != glassPane) {\n    add(glassPane,0);\n  }\n}\n", "nl": "Overridden to enforce the position of the glass component as the zero child.", "id": "15899"}
{"code": "private void throwForNullValue(@Nullable final String value,final Class<?> clazz,final @NonNull String key) throws WrongTypeException {\n  if (value == null) {\n    throw new WrongTypeException(\"The value for key <\" + key + \"> is null. \"+ \"You obviously saved this value as String and try to access it with type \"+ clazz.getSimpleName()+ \" which cannot be null. \"+ \" Always use getString(key, defaultValue) when accessing data you saved with put(String).\");\n  }\n}\n", "nl": "logs a warning that warns that the given value for the given key is null and null is only supported when reading it as a String and not other java primitives", "id": "56408"}
{"code": "public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {\n  if (SUPERCLASS_NAME.equals(name)) {\n    return null;\n  }\n  return super.loadClass(name,resolve);\n}\n", "nl": "Load a class. Return null if the class's name is SUPERCLASS_NAME; otherwise invoke the super's loadClass method.", "id": "31504"}
{"code": "private void readFields() throws IOException, ClassFormatException {\n  final int fields_count=dataInputStream.readUnsignedShort();\n  for (int i=0; i < fields_count; i++) {\n    Utility.swallowFieldOrMethod(dataInputStream);\n  }\n}\n", "nl": "Read information about the fields of the class, i.e., its variables.", "id": "39630"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_documentcreatetextnode.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "537"}
{"code": "protected void checkAndAddPage(PdfPage page){\n  if (page.isFlushed())   throw new PdfException(PdfException.FlushedPageCannotBeAddedOrInserted,page);\n  if (page.getDocument() != null && this != page.getDocument())   throw new PdfException(PdfException.Page1CannotBeAddedToDocument2BecauseItBelongsToDocument3).setMessageParams(page,this,page.getDocument());\n  catalog.getPageTree().addPage(page);\n}\n", "nl": "Checks page before adding.", "id": "38792"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ps.ProtocolProfileElement createProtocolProfileElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.ProtocolProfileElementImpl();\n}\n", "nl": "Create an instance of ProtocolProfileElement", "id": "36128"}
{"code": "protected void tearDown(){\n}\n", "nl": "Tears down the fixture, for example, close a network connection. This method is called after a test is executed.", "id": "45590"}
{"code": "public static Class<?> loadClass(String className) throws ClassNotFoundException {\n  return javax.management.loading.DefaultLoaderRepository.loadClass(className);\n}\n", "nl": "Go through the list of class loaders and try to load the requested class. The method will stop as soon as the class is found. If the class is not found the method will throw a <CODE>ClassNotFoundException</CODE> exception.", "id": "53169"}
{"code": "public static Foo findByUuid_C_Last(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {\n  return getPersistence().findByUuid_C_Last(uuid,companyId,orderByComparator);\n}\n", "nl": "Returns the last foo in the ordered set where uuid = &#63; and companyId = &#63;.", "id": "53916"}
{"code": "public static boolean isSpace(int c){\n  return c < 0x10000 && (CHARS[c] & MASK_SPACE) != 0;\n}\n", "nl": "Returns true if the specified character is a space character as defined by production [3] in the XML 1.0 specification.", "id": "44001"}
{"code": "@After public void afterTest(){\n}\n", "nl": "Cleanup that is performed after each test is executed.", "id": "18300"}
{"code": "protected void forceSetComponentCount(int count){\n  mComponentCountActual=count;\n}\n", "nl": "Sets the component count of this tag. Call this function before setValue() if the length of value does not match the component count.", "id": "53118"}
{"code": "public void appendBitVector(BitVector bits){\n  int size=bits.size();\n  for (int i=0; i < size; ++i) {\n    appendBit(bits.at(i));\n  }\n}\n", "nl": "Append a different BitVector to this BitVector", "id": "12547"}
{"code": "@Override public Promise<ResourceResponse,ResourceException> updateInstance(Context context,String resourceId,UpdateRequest request){\n  return RestUtils.generateUnsupportedOperation();\n}\n", "nl": "Unsupported by this endpoint.", "id": "36859"}
{"code": "void positionCursorAtInitialLocation(){\n  JFormattedTextField ftf=getFormattedTextField();\n  if (ftf != null) {\n    ftf.setCaretPosition(getInitialVisualPosition());\n  }\n}\n", "nl": "Positions the cursor at the initial location.", "id": "16396"}
{"code": "private void fillBuffer() throws CharacterCodingException {\n  this.bbuf.compact();\n  CoderResult result=this.encoder.encode(this.cbuf,this.bbuf,true);\n  if (result.isError()) {\n    result.throwException();\n  }\n  this.bbuf.flip();\n}\n", "nl": "Fills the byte output buffer from the input char buffer.", "id": "38824"}
{"code": "@SuppressWarnings(\"unused\") static <T>Promise<Set<T>> promiseSet(Class<T> componentType){\n  return new BasePromise<>();\n}\n", "nl": "Generic set promise. Added to make static imports possible.", "id": "52947"}
{"code": "public com.sun.identity.saml2.jaxb.xmlsig.TransformsType createTransformsType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlsig.impl.TransformsTypeImpl();\n}\n", "nl": "Create an instance of TransformsType", "id": "10622"}
{"code": "static DnTemplate compileRelative(String template){\n  return compile(template,true);\n}\n", "nl": "Compiles a DN template which will resolve LDAP entries relative to the current routing state. The DN template may contain trailing \"..\" RDNs in order to resolve entries which are relative to a parent of the current routing state.", "id": "7956"}
{"code": "public synchronized ListIterator<E> listIterator(){\n  return new ListItr(0);\n}\n", "nl": "Returns a list iterator over the elements in this list (in proper sequence). <p>The returned list iterator is <a href=\"#fail-fast\"><i>fail-fast</i></a>.", "id": "33966"}
{"code": "public void stop(){\n  try {\n    myServerSocket.close();\n    myThread.join();\n  }\n catch (  IOException ioe) {\n  }\ncatch (  InterruptedException e) {\n  }\n}\n", "nl": "Stops the server.", "id": "11877"}
{"code": "private String fieldTypeComment(Field field,PythonImportHandler importHandler){\n  return typeComment(field.getType(),importHandler);\n}\n", "nl": "Returns type information for a field in Sphinx docstring style.", "id": "3651"}
{"code": "public static ConfigParameters configParams(){\n  return new ConfigParameters();\n}\n", "nl": "Creates configuration parameters.", "id": "5913"}
{"code": "public static byte[] writeToArray(NSObject root) throws IOException {\n  ByteArrayOutputStream bout=new ByteArrayOutputStream();\n  write(bout,root);\n  return bout.toByteArray();\n}\n", "nl": "Writes a binary plist serialization of the given object as the root into a byte array.", "id": "36517"}
{"code": "@Deprecated public static void track(String path,Object marker,FileDeleteStrategy deleteStrategy){\n  theInstance.track(path,marker,deleteStrategy);\n}\n", "nl": "Track the specified file, using the provided marker, deleting the file when the marker instance is garbage collected. The speified deletion strategy is used.", "id": "57137"}
{"code": "public String buildJavaVendor(){\n  return properties.getProperty(\"build.java.vendor\");\n}\n", "nl": "Returns the vendor for the Java version used to generate this build.", "id": "40204"}
{"code": "public boolean isExpired(final Date date){\n  if (date == null) {\n    throw new IllegalArgumentException(\"Date may not be null\");\n  }\n  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= date.getTime());\n}\n", "nl": "Returns true if this cookie has expired.", "id": "44326"}
{"code": "public String toString(){\n  return name;\n}\n", "nl": "Returns a string representation of this DTD.", "id": "44240"}
{"code": "public ProxyAuthorizationHeader createProxyAuthorizationHeader(String scheme) throws ParseException {\n  if (scheme == null)   throw new NullPointerException(\"bad scheme arg\");\n  ProxyAuthorization p=new ProxyAuthorization();\n  p.setScheme(scheme);\n  return p;\n}\n", "nl": "Creates a new ProxyAuthorizationHeader based on the newly supplied scheme value.", "id": "43328"}
{"code": "private static synchronized String makeDateStringGnuStep(Date date){\n  return sdfGnuStep.format(date);\n}\n", "nl": "Generates a String representation of a Java Date object. The string is formatted according to the specification for GnuStep ASCII property list dates.", "id": "24618"}
{"code": "public void finish() throws IOException {\n  checkClosed();\n  write();\n}\n", "nl": "Finishes writing current uncompressed data into the InflaterOutputStream without closing it.", "id": "14596"}
{"code": "public static boolean check(LocPathIterator path){\n  HasPositionalPredChecker hppc=new HasPositionalPredChecker();\n  path.callVisitors(null,hppc);\n  return hppc.m_hasPositionalPred;\n}\n", "nl": "Process the LocPathIterator to see if it contains variables  or functions that may make it context dependent.", "id": "28564"}
{"code": "public boolean nextValidToken() throws IOException {\n  while (tokeniser.nextToken()) {\n    if (tokeniser.getTokenType() == PdfTokenizer.TokenType.Comment)     continue;\n    return true;\n  }\n  return false;\n}\n", "nl": "Reads the next token skipping over the comments.", "id": "44206"}
{"code": "public boolean isWrapperFor(ServletRequest wrapped){\n  if (request == wrapped) {\n    return true;\n  }\n  if (request instanceof ServletRequestWrapper) {\n    return ((ServletRequestWrapper)request).isWrapperFor(wrapped);\n  }\n  return false;\n}\n", "nl": "TODO SERVLET3 - Add comments", "id": "15390"}
{"code": "@Override public Context createSubcontext(Name name) throws NamingException {\n  if (!checkWritable()) {\n    return null;\n  }\n  NamingContext newContext=new NamingContext(env,this.name);\n  bind(name,newContext);\n  newContext.setExceptionOnFailedWrite(getExceptionOnFailedWrite());\n  return newContext;\n}\n", "nl": "Creates and binds a new context. Creates a new context with the given name and binds it in the target context (that named by all but terminal atomic component of the name). All intermediate contexts and the target context must already exist.", "id": "14483"}
{"code": "public boolean net_nos_equal(int[] p_net_nos_b){\n  if (net_nos_arr.length != p_net_nos_b.length)   return false;\n  for (  int cur_net_b : p_net_nos_b) {\n    if (!has_net_no(cur_net_b))     return false;\n  }\n  return true;\n}\n", "nl": "checks if the list of nets is in my list of nets", "id": "8572"}
{"code": "public void removeStyle(String nm){\n  StyledDocument doc=getStyledDocument();\n  doc.removeStyle(nm);\n}\n", "nl": "Removes a named non-<code>null</code> style previously added to the document.", "id": "56259"}
{"code": "public Builder withSecret(String secret){\n  config.setSecret(secret);\n  return this;\n}\n", "nl": "Sets the secret for contacting to SNS.", "id": "16660"}
{"code": "public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){\n  logger.info(\"shootme: got an ACK! \");\n  logger.info(\"Dialog = \" + requestEvent.getDialog());\n  logger.info(\"Dialog State = \" + requestEvent.getDialog().getState());\n}\n", "nl": "Process the ACK request. Send the bye and complete the call flow.", "id": "31931"}
{"code": "public static boolean isPackageProtectionEnabled(){\n  if (packageDefinitionEnabled && Globals.IS_SECURITY_ENABLED) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Return the <code>SecurityManager</code> only if Security is enabled AND package protection mechanism is enabled.", "id": "57273"}
{"code": "public String toString(){\n  int modifiers=0;\n  if (!GraphicsEnvironment.isHeadless()) {\n    modifiers=Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();\n  }\n  if (usesShiftModifier()) {\n    modifiers|=Event.SHIFT_MASK;\n  }\n  return KeyEvent.getKeyModifiersText(modifiers) + \"+\" + KeyEvent.getKeyText(key);\n}\n", "nl": "Returns an internationalized description of the MenuShortcut.", "id": "57393"}
{"code": "public com.sun.identity.wsfederation.jaxb.xmlsig.X509DataType.X509IssuerSerial createX509DataTypeX509IssuerSerial() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.X509DataTypeImpl.X509IssuerSerialImpl();\n}\n", "nl": "Create an instance of X509DataTypeX509IssuerSerial", "id": "18725"}
{"code": "public boolean isPermitted(String domainName){\n  if (StringUtils.isEmpty(domainName)) {\n    return false;\n  }\n  if (UrlUtils.isDomainOrSubDomain(domainName,restrictedDomains)) {\n    return false;\n  }\n  if (CollectionUtils.isNotEmpty(permittedDomains)) {\n    return UrlUtils.isDomainOrSubDomain(domainName,permittedDomains);\n  }\n  return true;\n}\n", "nl": "Checks if this rule is permitted for the specified domain", "id": "9004"}
{"code": "public boolean isExpired(){\n  return jwt.getClaimsSet().getExpirationTime().getTime() <= (timeService.now() - SKEW_ALLOWANCE);\n}\n", "nl": "Checks that the JWT has not expired.", "id": "25786"}
{"code": "public boolean hasNextLine(){\n  saveCurrentStatus();\n  String result=findWithinHorizon(LINE_PATTERN,0);\n  recoverPreviousStatus();\n  return result != null;\n}\n", "nl": "Returns true if there is a line terminator in the input. This method may block.", "id": "11468"}
{"code": "public String toStringImpl(){\n  return new StringBuilder().append(service).toString();\n}\n", "nl": "Used by super class to log the attribute's contents when packet logging is enabled.", "id": "54896"}
{"code": "public AMSearchResults searchUsers(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {\n  return searchObjects(AMNamingAttrManager.getNamingAttr(USER),getSearchFilter(AMObject.USER),wildcard,avPairs,searchControl);\n}\n", "nl": "Searches for users in this organizational unit using wildcards and attribute values. Wildcards can be specified such as a*, *, *a. To further refine the search, attribute-value pairs can be specifed so that DNs of users with matching attribute-value pairs will be returned.", "id": "11800"}
{"code": "public static synchronized void registerAdditionalHyphenationFileDirectory(String directory){\n  if (additionalHyphenationFileDirectories == null) {\n    additionalHyphenationFileDirectories=new ArrayList<>();\n  }\n  additionalHyphenationFileDirectories.add(directory);\n}\n", "nl": "Registers additional file directories.", "id": "30699"}
{"code": "int findIndexOfValidField(String blob){\n  for (  Field field : AttributeCompressionStrategy.getAllValidFields(InternalSession.class)) {\n    String search=JSONSerialisation.jsonAttributeName(field.getName());\n    int index=blob.indexOf(search);\n    if (index != -1) {\n      return index;\n    }\n  }\n  return -1;\n}\n", "nl": "Search the JSON blob contents and locate a valid field within the JSON.", "id": "31608"}
{"code": "public void addAuthenticationFailureTime(final Date date){\n  setDateProperty(ADD_AUTHENTICATION_FAILURE_TIMES,date);\n}\n", "nl": "Adds the provided authentication failure time to this request.", "id": "47853"}
{"code": "public String toXMLString() throws XACMLException {\n  return this.toXMLString(true,false);\n}\n", "nl": "Returns a string representation of this object", "id": "22920"}
{"code": "public void remove(KeyStroke key){\n  if (arrayTable != null) {\n    arrayTable.remove(key);\n  }\n}\n", "nl": "Removes the binding for <code>key</code> from this <code>InputMap</code>.", "id": "42830"}
{"code": "@NonNull public final Agera compose(@NonNull Function<? super Agera,? extends Agera> composer){\n  return as(composer);\n}\n", "nl": "Allows fluent composition via a composer function that receives this Agera instance and must return some Agera instance.", "id": "32642"}
{"code": "public void startDrag(Cursor dragCursor,Image dragImage,Point imageOffset,Transferable transferable,DragSourceListener dsl) throws InvalidDnDOperationException {\n  dragSource.startDrag(this,dragCursor,dragImage,imageOffset,transferable,dsl);\n}\n", "nl": "Start the drag given the initial <code>Cursor</code> to display, a drag <code>Image</code>, the offset of the <code>Image</code>, the <code>Transferable</code> object, and the <code>DragSourceListener</code> to use. <P>", "id": "34860"}
{"code": "public static void deregisterBackendInitializationListener(BackendInitializationListener listener){\n  directoryServer.backendInitializationListeners.remove(listener);\n}\n", "nl": "Deregisters the provided backend initialization listener with the Directory Server.", "id": "11518"}
{"code": "private int performModRdnOperation(boolean authentication) throws Exception {\n  String path=TestCaseUtils.createTempFile(\"dn: o=rejectTestCase,o=Test\",\"changetype: modrdn\",\"newrdn: o=mod_rejectTestCase\",\"deleteoldrdn: 0\");\n  return LDAPModify.mainModify(modRdnArgs(authentication,path),false,null,null);\n}\n", "nl": "Utility method which is called by the testcase sending a MODRDN request.", "id": "34648"}
{"code": "void notifyPendingStatusMessage(){\nsynchronized (eventMonitor) {\n    pendingStatusMessage=true;\n    eventMonitor.notifyAll();\n  }\n}\n", "nl": "Requests that a topology state related message be broadcast to the rest of the topology. Messages include DS heartbeats, topology information, etc.", "id": "40968"}
{"code": "public void commitEdit() throws ParseException {\n  JFormattedTextField ftf=getTextField();\n  ftf.commitEdit();\n}\n", "nl": "Pushes the currently edited value to the <code>SpinnerModel</code>. <p> The default implementation invokes <code>commitEdit</code> on the <code>JFormattedTextField</code>.", "id": "52273"}
{"code": "private String convertLineSeparators(String string){\n  return string.replaceAll(System.lineSeparator(),\" \");\n}\n", "nl": "Returns a string with line separators converted to spaces.", "id": "40665"}
{"code": "public ImmutableList slice(int fromIndex,int toIndex){\n  int size=size();\n  if (fromIndex < 0)   fromIndex=size - fromIndex;\n  if (toIndex < 0)   toIndex=size - toIndex;\n  return new ImmutableList(subList(fromIndex,toIndex));\n}\n", "nl": "select elements from current list", "id": "53682"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(setNamedItemNS04.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "32507"}
{"code": "public void remove(int index){\n  Component c=getComponent(index);\n  super.remove(index);\n  if (c != null && !(c instanceof JComponent)) {\n    getComponentToLayer().remove(c);\n  }\n  validateOptimizedDrawing();\n}\n", "nl": "Remove the indexed component from this pane. This is the absolute index, ignoring layers.", "id": "12583"}
{"code": "public final double readDouble() throws IOException {\n  return Double.longBitsToDouble(readLong());\n}\n", "nl": "See the general contract of the <code>readDouble</code> method of <code>DataInput</code>. <p> Bytes for this operation are read from the contained input stream.", "id": "285"}
{"code": "public static Condition or(Condition... conditions){\n  return new ORCondition(conditions);\n}\n", "nl": "Creates a condition which evaluates to <code>false</code> if and only if all of its sub-conditions are <code>false</code>.", "id": "52497"}
{"code": "public Builder optionalAttributes(final String... attributeNamesOrOIDs){\n  this.optionalAttributes.addAll(asList(attributeNamesOrOIDs));\n  return this;\n}\n", "nl": "Adds the provided optional attributes.", "id": "58726"}
{"code": "public void remove(Component component){\n  if (component == leftComponent) {\n    leftComponent=null;\n  }\n else   if (component == rightComponent) {\n    rightComponent=null;\n  }\n  super.remove(component);\n  revalidate();\n  repaint();\n}\n", "nl": "Removes the child component, <code>component</code> from the pane. Resets the <code>leftComponent</code> or <code>rightComponent</code> instance variable, as necessary.", "id": "2565"}
{"code": "public void detach(){\n  if (m_allowRelease) {\n    m_DTMXRTreeFrag.destruct();\n    setObject(null);\n  }\n}\n", "nl": "Detaches the <code>DTMIterator</code> from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state. After <code>detach</code> has been invoked, calls to <code>nextNode</code> or <code>previousNode</code> will raise a runtime exception. In general, detach should only be called once on the object.", "id": "8504"}
{"code": "@Override protected URLConnection openConnection(URL u) throws IOException {\n  return new JarURLConnectionImpl(u);\n}\n", "nl": "Returns a connection to the jar file pointed by this <code>URL</code> in the file system", "id": "12617"}
{"code": "public synchronized void add(int op,Attribute attr){\n  Modification mod=new Modification(ModificationType.valueOf(op),attr);\n  modifications.add(mod);\n}\n", "nl": "Specifies another modification to be added to the set of modifications.", "id": "52635"}
{"code": "public void transact(TransactInfo transactInfo,Marshallable invokeParam,ClientCallback<?> clientCallback){\n  if (clientCallback != null) {\n    final long callbackId=SystemClock.elapsedRealtime();\n    callbacks.put(callbackId,clientCallback);\n    transactInfo.setCallbackId(callbackId);\n  }\n  mJsExecutor.transact(transactInfo,invokeParam);\n}\n", "nl": "[java -> js]", "id": "21252"}
{"code": "public int highestLayer(){\n  if (getComponentCount() > 0)   return getLayer(getComponent(0));\n  return 0;\n}\n", "nl": "Returns the highest layer value from all current children. Returns 0 if there are no children.", "id": "25341"}
{"code": "protected void installNextButtonListeners(Component c){\n  installButtonListeners(c,nextButtonHandler);\n}\n", "nl": "Installs the necessary listeners on the next button, <code>c</code>, to update the <code>JSpinner</code> in response to a user gesture.", "id": "32076"}
{"code": "public static ValueExp value(long val){\n  return new NumericValueExp(val);\n}\n", "nl": "Returns a numeric value expression that can be used in any Query call that expects a ValueExp.", "id": "6129"}
{"code": "public boolean hasBOM(ByteOrderMark bom) throws IOException {\n  if (!boms.contains(bom)) {\n    throw new IllegalArgumentException(\"Stream not configure to detect \" + bom);\n  }\n  return byteOrderMark != null && getBOM().equals(bom);\n}\n", "nl": "Indicates whether the stream contains the specified BOM.", "id": "10253"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n}\n", "nl": "Ensures that the Directory Server is running, and enables the delay plugin so that new requests will be artificially delayed.", "id": "46714"}
{"code": "public com.sun.identity.liberty.ws.idpp.plugin.jaxb.PPISExtensionElement createPPISExtensionElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.plugin.jaxb.impl.PPISExtensionElementImpl();\n}\n", "nl": "Create an instance of PPISExtensionElement", "id": "52828"}
{"code": "public boolean isDataFlavorAvailable(DataFlavor flavor){\n  if (flavor == null) {\n    throw new NullPointerException(\"flavor\");\n  }\n  Transferable cntnts=getContents(null);\n  if (cntnts == null) {\n    return false;\n  }\n  return cntnts.isDataFlavorSupported(flavor);\n}\n", "nl": "Returns whether or not the current contents of this clipboard can be provided in the specified <code>DataFlavor</code>.", "id": "18867"}
{"code": "static ClassLoader findClassLoader() throws ConfigurationError {\n  return Thread.currentThread().getContextClassLoader();\n}\n", "nl": "Figure out which ClassLoader to use.  For JDK 1.2 and later use the context ClassLoader.", "id": "17620"}
{"code": "private static void connectSSL(){\n  secureConnect();\n}\n", "nl": "Authenticate over LDAPS.", "id": "6857"}
{"code": "public void removeHeader(String name){\n  if (qheaders != null)   qheaders.delete(name);\n}\n", "nl": "Remove a header given its name (provided it exists).", "id": "8289"}
{"code": "public void characters(char ch[],int start,int length) throws SAXException {\n  if (contentHandler != null) {\n    contentHandler.characters(ch,start,length);\n  }\n}\n", "nl": "Adapter implementation method; do not call. Adapt a SAX1 characters event.", "id": "47801"}
{"code": "private void reportInterruptAfterWait(int interruptMode) throws InterruptedException {\n  if (interruptMode == THROW_IE)   throw new InterruptedException();\n else   if (interruptMode == REINTERRUPT)   selfInterrupt();\n}\n", "nl": "Throws InterruptedException, reinterrupts current thread, or does nothing, depending on mode.", "id": "52523"}
{"code": "public int lastIndexOf(String str,int fromIndex){\n  return str().lastIndexOf(str,fromIndex);\n}\n", "nl": "Returns the index within this string of the last occurrence of the specified substring.", "id": "36870"}
{"code": "private void pushRun(int runBase,int runLen){\n  this.runBase[stackSize]=runBase;\n  this.runLen[stackSize]=runLen;\n  stackSize++;\n}\n", "nl": "Pushes the specified run onto the pending-run stack.", "id": "24041"}
{"code": "static void loadActionMap(LazyActionMap map){\n  map.put(new Actions(Actions.PRESS));\n  map.put(new Actions(Actions.RELEASE));\n}\n", "nl": "Populates Buttons actions.", "id": "16493"}
{"code": "public StringBuilder toString(final StringBuilder builder){\n  builder.append(key);\n  if (value != null) {\n    builder.append('=');\n    if (isQuoted) {\n      builder.append('\\'');\n    }\n    builder.append(value);\n    if (isQuoted) {\n      builder.append('\\'');\n    }\n  }\n  return builder;\n}\n", "nl": "Appends the string representation of this additional log item to the provided string builder.", "id": "8857"}
{"code": "public void removePropertyChangeListener(PropertyChangeListener listener){\n  if (changeSupport != null) {\n    changeSupport.removePropertyChangeListener(listener);\n  }\n}\n", "nl": "Removes a PropertyChangeListener from the listener list. <p> If listener is null, no exception is thrown and no action is performed.", "id": "43482"}
{"code": "public static <K,V>KeyedPooledObjectFactory<K,V> synchronizedKeyedPooledFactory(final KeyedPooledObjectFactory<K,V> keyedFactory){\n  return new SynchronizedKeyedPooledObjectFactory<>(keyedFactory);\n}\n", "nl": "Returns a synchronized (thread-safe) KeyedPooledObjectFactory backed by the specified KeyedPoolableObjectFactory.", "id": "32407"}
{"code": "private JsonValue convertResults(Collection<Token> tokens){\n  List<Map<String,Object>> results=new ArrayList<>();\n  for (  Token token : tokens) {\n    results.add(convertToken(token));\n  }\n  return new JsonValue(results);\n}\n", "nl": "Internal conversion function to handle the CTSPersistentStore query result.", "id": "39257"}
{"code": "public boolean isCancelable(){\n  TaskState state=getTaskState();\n  if (state != null) {\n    Task task=getTask();\n    return TaskState.isPending(state) || TaskState.isRecurring(state) || (TaskState.isRunning(state) && task != null && task.isInterruptable());\n  }\n  return false;\n}\n", "nl": "Indicates whether this task supports a cancel operation.", "id": "20486"}
{"code": "public double[] board_to_dsn(PlaPointFloat p_point){\n  double[] result=new double[2];\n  result[0]=board_to_dsn(p_point.v_x) + base_x;\n  result[1]=board_to_dsn(p_point.v_y) + base_y;\n  return result;\n}\n", "nl": "Transforms a geometry.planar.FloatPoint to a tuple of doubles in the dsn coordinate system.", "id": "40254"}
{"code": "public int read() throws IOException {\n  if (frameSize != 1) {\n    throw new IOException(\"cannot read a single byte if frame size > 1\");\n  }\n  byte[] data=new byte[1];\n  int temp=read(data);\n  if (temp <= 0) {\n    return -1;\n  }\n  return data[0] & 0xFF;\n}\n", "nl": "Reads the next byte of data from the audio input stream.  The audio input stream's frame size must be one byte, or an <code>IOException</code> will be thrown.", "id": "55540"}
{"code": "public boolean equals(Object o){\n  if (o == null) {\n    return false;\n  }\n  if (this == o) {\n    return true;\n  }\n  if (!(o instanceof HOTPPrincipal)) {\n    return false;\n  }\n  HOTPPrincipal that=(HOTPPrincipal)o;\n  if (this.getName().equals(that.getName())) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Compares the specified Object with this <code>HOTPPrincipal</code> for equality.  Returns true if the given object is also a <code>HOTPPrincipal</code> and the two HOTPPrincipals have the same username. <p/> <p/>", "id": "21112"}
{"code": "public String toXMLString() throws FSMsgException {\n  return this.toXMLString(true,true);\n}\n", "nl": "Returns a String representation of the Logout Response.", "id": "1714"}
{"code": "public final void checkAccess(){\n  SecurityManager security=System.getSecurityManager();\n  if (security != null) {\n    security.checkAccess(this);\n  }\n}\n", "nl": "Determines if the currently running thread has permission to modify this thread group. <p> If there is a security manager, its <code>checkAccess</code> method is called with this thread group as its argument. This may result in throwing a <code>SecurityException</code>.", "id": "15151"}
{"code": "public void flush(){\n  Logger logger=this;\n  Handler targets[]=logger.getHandlers();\n  if (targets != null) {\n    for (int i=0; i < targets.length; i++) {\n      targets[i].flush();\n    }\n  }\n}\n", "nl": "Writes all the buffered log records.", "id": "20505"}
{"code": "private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){\n  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);\n}\n", "nl": "CAS waitStatus field of a node.", "id": "29474"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsse.SecurityElement createSecurityElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsse.impl.SecurityElementImpl();\n}\n", "nl": "Create an instance of SecurityElement", "id": "14814"}
{"code": "public boolean isMutable(){\n  return isMutable;\n}\n", "nl": "Returns true if the object is mutable", "id": "34545"}
{"code": "public final int accumulateAndGet(int x,IntBinaryOperator accumulatorFunction){\n  int prev, next;\n  do {\n    prev=get();\n    next=accumulatorFunction.applyAsInt(prev,x);\n  }\n while (!compareAndSet(prev,next));\n  return next;\n}\n", "nl": "Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.  The function is applied with the current value as its first argument, and the given update as the second argument.", "id": "6018"}
{"code": "public boolean nonEmpty(){\n  return count != 0;\n}\n", "nl": "Is buffer not empty?", "id": "4064"}
{"code": "public void addBundlingCallSettingsImports(ModelTypeTable typeTable){\n}\n", "nl": "Adds the imports used for bundling call settings.", "id": "7532"}
{"code": "@Override public void removePropertyChangeListener(PropertyChangeListener listener){\n  support.removePropertyChangeListener(listener);\n}\n", "nl": "Remove a property change listener from this component.", "id": "53630"}
{"code": "public void writeExif(Bitmap bmap,OutputStream exifOutStream) throws IOException {\n  if (bmap == null || exifOutStream == null) {\n    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);\n  }\n  OutputStream s=getExifWriterStream(exifOutStream);\n  bmap.compress(Bitmap.CompressFormat.JPEG,90,s);\n  s.flush();\n}\n", "nl": "Writes the tags from this ExifInterface object into a jpeg compressed bitmap, removing prior exif tags.", "id": "55173"}
{"code": "public AddOperation processAdd(String rawEntryDN,List<RawAttribute> rawAttributes){\n  return processAdd(ByteString.valueOfUtf8(rawEntryDN),rawAttributes,null);\n}\n", "nl": "Processes an internal add operation with the provided information.", "id": "9985"}
{"code": "public final boolean isBatteryPresent(){\n  return getBatteryStatusIntent().getExtras().getBoolean(BatteryManager.EXTRA_PRESENT);\n}\n", "nl": "Is battery present boolean.", "id": "8486"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlsig.KeyValueElement createKeyValueElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.KeyValueElementImpl();\n}\n", "nl": "Create an instance of KeyValueElement", "id": "39953"}
{"code": "public void run(){\n  if (Debug.messageEnabled()) {\n    Debug.message(\"RemoteHandler:TimeBufferingTask.run() called\");\n  }\n  flush();\n}\n", "nl": "The method which implements the GeneralTaskRunnable.", "id": "46139"}
{"code": "public void addExtension(ASN1ObjectIdentifier oid,boolean critical,ASN1Encodable value){\n  try {\n    this.addExtension(oid,critical,value.toASN1Primitive().getEncoded(ASN1Encoding.DER));\n  }\n catch (  IOException e) {\n    throw new IllegalArgumentException(\"error encoding value: \" + e);\n  }\n}\n", "nl": "Add an extension with the given oid and the passed in value to be included in the OCTET STRING associated with the extension.", "id": "25726"}
{"code": "public boolean equals(Object object){\n  return (super.equals(object) && object instanceof NumberOfDocuments);\n}\n", "nl": "Returns whether this number of documents attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: <OL TYPE=1> <LI> <CODE>object</CODE> is not null. <LI> <CODE>object</CODE> is an instance of class NumberOfDocuments. <LI> This number of documents attribute's value and <CODE>object</CODE>'s value are equal. </OL>", "id": "7830"}
{"code": "public static String showInputDialog(Component parentComponent,Object message) throws HeadlessException {\n  return showInputDialog(parentComponent,message,UIManager.getString(\"OptionPane.inputDialogTitle\",parentComponent),QUESTION_MESSAGE);\n}\n", "nl": "Shows a question-message dialog requesting input from the user parented to <code>parentComponent</code>. The dialog is displayed on top of the <code>Component</code>'s frame, and is usually positioned below the <code>Component</code>.", "id": "1153"}
{"code": "public void startScroll(int startX,int startY,int dx,int dy,int duration){\n  mScroller.startScroll(startX,startY,dx,dy,duration);\n}\n", "nl": "Start scrolling by providing a starting point and the distance to travel.", "id": "9230"}
{"code": "public static XmlPullParserFactory newInstance() throws XmlPullParserException {\n  return newInstance(null,null);\n}\n", "nl": "Create a new instance of a PullParserFactory that can be used to create XML pull parsers (see class description for more details).", "id": "42956"}
{"code": "public boolean hasExpired(){\n  return (expiry > 0) && (System.currentTimeMillis() >= expiry);\n}\n", "nl": "Check if the entry has expired", "id": "12018"}
{"code": "public String toString(){\n  return (\"SamplePrincipal:  \" + name);\n}\n", "nl": "Returns a string representation of this <code>SamplePrincipal</code>.", "id": "10059"}
{"code": "public AllowEventsHeader createAllowEventsHeader(String eventType) throws ParseException {\n  if (eventType == null)   throw new NullPointerException(\"null arg eventType\");\n  AllowEvents allowEvents=new AllowEvents();\n  allowEvents.setEventType(eventType);\n  return allowEvents;\n}\n", "nl": "Creates a new AllowEventsHeader based on the newly supplied event type value.", "id": "13091"}
{"code": "public Obligations createObligations(Element elem) throws XACMLException {\n  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.RESOURCE,elem);\n  if (obj == null) {\n    return new ObligationsImpl(elem);\n  }\n else {\n    return (Obligations)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>Obligations</code>. The return object is immutable.", "id": "26727"}
{"code": "@Override protected void propertyChange(PropertyChangeEvent evt){\n  if (SynthLookAndFeel.shouldUpdateStyle(evt)) {\n    updateStyle((JTextComponent)evt.getSource());\n  }\n  super.propertyChange(evt);\n}\n", "nl": "This method gets called when a bound property is changed on the associated JTextComponent.  This is a hook which UI implementations may change to reflect how the UI displays bound properties of JTextComponent subclasses. This is implemented to do nothing (i.e. the response to properties in JTextComponent itself are handled prior to calling this method).", "id": "3668"}
{"code": "public com.sun.identity.saml2.jaxb.assertion.AuthenticatingAuthorityElement createAuthenticatingAuthorityElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.assertion.impl.AuthenticatingAuthorityElementImpl();\n}\n", "nl": "Create an instance of AuthenticatingAuthorityElement", "id": "57651"}
{"code": "protected final void fireServiceAdded(Class serviceClass){\n  BeanContextServiceAvailableEvent bcssae=new BeanContextServiceAvailableEvent(getBeanContextServicesPeer(),serviceClass);\n  fireServiceAdded(bcssae);\n}\n", "nl": "Fires a <tt>BeanContextServiceEvent</tt> notifying of a new service.", "id": "40611"}
{"code": "public PlaPointFloat middle_point(PlaPointFloat p_to_point){\n  if (p_to_point == this)   return this;\n  double middle_x=0.5 * (v_x + p_to_point.v_x);\n  double middle_y=0.5 * (v_y + p_to_point.v_y);\n  return new PlaPointFloat(middle_x,middle_y);\n}\n", "nl": "Returns the middle point between this point and p_to_point.", "id": "577"}
{"code": "private void genPreambleImports(){\n  Iterator<String> iter=pageInfo.getImports().iterator();\n  while (iter.hasNext()) {\n    out.printin(\"import \");\n    out.print(iter.next());\n    out.println(\";\");\n  }\n  out.println();\n}\n", "nl": "Generate preamble imports (shared by servlet and tag handler preamble generation)", "id": "7104"}
{"code": "public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {\n  return super.newInstance(javaContentInterface);\n}\n", "nl": "Create an instance of the specified Java content interface.", "id": "28789"}
{"code": "@Override public void close() throws IOException {\n  closed=true;\n}\n", "nl": "Close the input buffer.", "id": "47332"}
{"code": "public void removeFromTag(){\n  parameters.delete(ParameterNames.FROM_TAG);\n}\n", "nl": "remove Tag member", "id": "43246"}
{"code": "public Object createToken(String name,String Password){\n  return new Object();\n}\n", "nl": "Return <code>Object</code>  Given paramers are not used.", "id": "56083"}
{"code": "private String cookieToString(Cookie cookie){\n  return cookie.getClass().getSimpleName() + \"[version=\" + cookie.getVersion()+ \",name=\"+ cookie.getName()+ \",domain=\"+ cookie.getDomain()+ \",path=\"+ cookie.getPath()+ \",expiry=\"+ cookie.getExpiryDate()+ \"]\";\n}\n", "nl": "Don't log the cookie's value; that's potentially sensitive information.", "id": "34216"}
{"code": "public boolean canTraverseOutsideSubtree(){\n  if (null != m_patterns) {\n    int n=m_patterns.length;\n    for (int i=0; i < n; i++) {\n      if (m_patterns[i].canTraverseOutsideSubtree())       return true;\n    }\n  }\n  return false;\n}\n", "nl": "Tell if this expression or it's subexpressions can traverse outside  the current subtree.", "id": "10764"}
{"code": "protected String paramString(){\n  return super.paramString();\n}\n", "nl": "Returns a string representation of this <code>JTextPane</code>. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be <code>null</code>.", "id": "5461"}
{"code": "public static byte[] copyOfBytes(final byte[] bytes){\n  return Arrays.copyOf(bytes,bytes.length);\n}\n", "nl": "Returns a copy of the provided byte array.", "id": "5628"}
{"code": "public boolean seek(ByteBuffer byteBuffer){\n  return false;\n}\n", "nl": "TODO implement", "id": "12188"}
{"code": "protected void updateLayout(Context c,RemoteViews views,WidgetSetting settings){\n}\n", "nl": "This is only called for full updates.", "id": "42398"}
{"code": "public void swap(String displayName,String viewBeanClassName,Map pageSessionAttributeValues){\n  trail.remove(trail.size() - 1);\n  trail.add(new Marker(displayName,viewBeanClassName,pageSessionAttributeValues));\n}\n", "nl": "Swap the last item of trail.", "id": "35140"}
{"code": "@AfterClass public static void cleanupClass(){\n  try {\n    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());\n  }\n catch (  Exception ignore) {\n    System.err.println(\"cannot remove \" + scenario.getRepositoryLocation());\n  }\n}\n", "nl": "Cleanup the whole junit scenario ; deletes the created git repository.", "id": "8145"}
{"code": "@SuppressWarnings(\"try\") public void close() throws IOException {\n  try (OutputStream ostream=out){\n    flush();\n  }\n }\n", "nl": "Closes this output stream and releases any system resources associated with the stream. <p> The <code>close</code> method of <code>FilterOutputStream</code> calls its <code>flush</code> method, and then calls the <code>close</code> method of its underlying output stream.", "id": "41605"}
{"code": "public void login() throws AuthLoginException {\n  login(null,null,null,null,null,null);\n}\n", "nl": "Starts the login process for the given <code>AuthContext</code> object.", "id": "37961"}
{"code": "public boolean chainIsNotPinned(List<X509Certificate> chain){\n  for (  X509Certificate cert : chain) {\n    String fingerprint=getFingerprint(cert);\n    if (pinnedFingerprints.contains(fingerprint)) {\n      return false;\n    }\n  }\n  logPinFailure(chain);\n  return enforcing;\n}\n", "nl": "Checks the given chain against the pin list corresponding to this entry. If the pin list does not contain the required certs and the enforcing field is true then this returns true, indicating a verification error. Otherwise, it returns false and verification should proceed.", "id": "6856"}
{"code": "public Collection<Object> values(){\n  return map.values();\n}\n", "nl": "Returns a Collection view of the attribute values contained in this Map.", "id": "47058"}
{"code": "public static byte[] decode(byte[] source) throws Base64DecoderException {\n  return decode(source,0,source.length);\n}\n", "nl": "Decodes Base64 content in byte array format and returns the decoded byte array.", "id": "48238"}
{"code": "public static int shorts(int nbFields){\n  return 2 * nbFields;\n}\n", "nl": "Helper method that returns the number of bytes that would be used by the short fields when appended to a ByteArrayBuilder.", "id": "12040"}
{"code": "private void createInputAttributeUpdated(){\n  inputAttributeUpdater=new AttributeTracker();\n}\n", "nl": "Creates a new <code>AttributeTracker</code>.", "id": "6151"}
{"code": "public static void fill(byte[] a,byte val){\n  for (int i=0, len=a.length; i < len; i++)   a[i]=val;\n}\n", "nl": "Assigns the specified byte value to each element of the specified array of bytes.", "id": "57843"}
{"code": "private void addConflict(AddMsg msg) throws DecodeException {\n  String normalizedDN=msg.getDN().toString();\n  LocalizableMessage alertMessage=NOTE_UNRESOLVED_CONFLICT.get(normalizedDN);\n  DirectoryServer.sendAlertNotification(this,ALERT_TYPE_REPLICATION_UNRESOLVED_CONFLICT,alertMessage);\n  msg.addAttribute(DS_SYNC_CONFLICT,normalizedDN);\n}\n", "nl": "Add the conflict attribute to an entry that could not be added because it is conflicting with another entry.", "id": "28008"}
{"code": "public static void removeByUuid_C(java.lang.String uuid,long companyId){\n  getPersistence().removeByUuid_C(uuid,companyId);\n}\n", "nl": "Removes all the foos where uuid = &#63; and companyId = &#63; from the database.", "id": "3157"}
{"code": "private int resolveGap(int i){\n  return i > mGapStart ? i - mGapLength : i;\n}\n", "nl": "Return externally visible offset given offset into gapped buffer.", "id": "35935"}
{"code": "public String jmxSslUsername(){\n  return values.jmxSslUsername;\n}\n", "nl": "JMX ssl username.", "id": "44983"}
{"code": "public boolean isReplicationServer(){\n  return isReplicationServer;\n}\n", "nl": "Returns whether this server is configured as a replication server or not.", "id": "30526"}
{"code": "public static GenericExtendedResult unmodifiableGenericExtendedResult(final GenericExtendedResult result){\n  if (result instanceof UnmodifiableGenericExtendedResultImpl) {\n    return result;\n  }\n  return new UnmodifiableGenericExtendedResultImpl(result);\n}\n", "nl": "Creates an unmodifiable generic extended result using the provided response.", "id": "25639"}
{"code": "protected GenericObject first(){\n  myListIterator=this.listIterator(0);\n  try {\n    return (GenericObject)myListIterator.next();\n  }\n catch (  NoSuchElementException ex) {\n    return null;\n  }\n}\n", "nl": "This is the default list iterator.This will not handle nested list traversal.", "id": "20683"}
{"code": "public boolean isObsolete(){\n  return isObsolete;\n}\n", "nl": "Indicates whether this schema definition is declared \"obsolete\".", "id": "42165"}
{"code": "@SuppressWarnings(\"unchecked\") public void writeDouble(double x) throws SQLException {\n  attribs.add(Double.valueOf(x));\n}\n", "nl": "Writes a <code>double</code> in the Java programming language to this <code>SQLOutputImpl</code> object. The driver converts it to an SQL <code>DOUBLE</code> before returning it to the database.", "id": "31396"}
{"code": "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  if (getUIClassID().equals(uiClassID)) {\n    updateUI();\n  }\n}\n", "nl": "See JComponent.readObject() for information about serialization in Swing.", "id": "22643"}
{"code": "public void startNonEscaping() throws org.xml.sax.SAXException {\n  m_disableOutputEscapingStates.push(true);\n}\n", "nl": "Starts an un-escaping section. All characters printed within an un- escaping section are printed as is, without escaping special characters into entity references. Only XML and HTML serializers need to support this method. <p> The contents of the un-escaping section will be delivered through the regular <tt>characters</tt> event.", "id": "7962"}
{"code": "void pushElemTemplateElement(ElemTemplateElement elem){\n  if (elem.getUid() == -1)   elem.setUid(nextUid());\n  m_elems.push(elem);\n}\n", "nl": "Push the current XSLTElementProcessor to the top of the stack.  As a side-effect, set the document order index (simply because this is a convenient place to set it).", "id": "32331"}
{"code": "public boolean canOffsetTiles(){\n  return canOffsetTiles;\n}\n", "nl": "Returns <code>true</code> if the writer can perform tiling with non-zero grid offsets while writing.  If this method returns <code>false</code>, then <code>setTiling</code> will throw an <code>UnsupportedOperationException</code> if the grid offset arguments are not both zero.  If <code>canWriteTiles</code> returns <code>false</code>, this method will return <code>false</code> as well.", "id": "9795"}
{"code": "public boolean isLockedOut(){\n  boolean isLockedOut=false;\n  if (localFlag) {\n    isLockedOut=acLocal.isLockedOut();\n  }\n else {\n  }\n  return isLockedOut;\n}\n", "nl": "Returns <code>true</code> if account is lock out.", "id": "26354"}
{"code": "private void handleTaskSearchResult(SearchResultEntry sr,Collection<TaskEntry> taskEntries,List<Exception> ex){\n  try {\n    if (isTaskEntry(sr)) {\n      taskEntries.add(new TaskEntry(Converters.to(sr)));\n    }\n  }\n catch (  RuntimeException e) {\n    ex.add(e);\n  }\n}\n", "nl": "Takes the provided search result and updates the task information accordingly.", "id": "18355"}
{"code": "public static void createDestinationFolder(String path){\n  File fpath=new File(path);\n  fpath.mkdirs();\n}\n", "nl": "Creates a folder with a given path, including all necessary nonexistent parent directories. If a folder is already present, no action is performed.", "id": "25521"}
{"code": "public boolean hasAttribute(String name){\n  return DTM.NULL != dtm.getAttributeNode(node,null,name);\n}\n", "nl": "Method hasAttribute", "id": "50525"}
{"code": "@Override public void processingInstruction(String target,String data) throws SAXException {\n  if (saxLog.isDebugEnabled()) {\n    saxLog.debug(\"processingInstruction('\" + target + \"','\"+ data+ \"')\");\n  }\n}\n", "nl": "Process notification of a processing instruction that was encountered.", "id": "30672"}
{"code": "public void destroy(){\n  finalize();\n}\n", "nl": "Destroys the stats object, closes the stats file and releases any system resources. Note that the stats file will remain open until <code>destroy()</code> is invoked. To conserve file resources, you should invoke <code>destroy()</code> explicitly rather than wait for the garbage collector to clean up. <p> If this object is accessed after <code>destroy()</code> has been invoked, the results are undefined. </p>", "id": "43692"}
{"code": "@Override public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  doGetPost(request,response);\n}\n", "nl": "Handles the HTTP POST request.", "id": "2369"}
{"code": "public boolean excludeDN(){\n  return excludeDN;\n}\n", "nl": "Indicates whether the encoded entry should exclude the DN.", "id": "48252"}
{"code": "public javax.xml.xpath.XPath newXPath(){\n  return new org.apache.xpath.jaxp.XPathImpl(xPathVariableResolver,xPathFunctionResolver,featureSecureProcessing);\n}\n", "nl": "<p>Returns a new <code>XPath</code> object using the underlying object model determined when the factory was instantiated.</p>", "id": "9116"}
{"code": "public AWTEvent peekEvent(){\n  pushPopLock.lock();\n  try {\n    for (int i=NUM_PRIORITIES - 1; i >= 0; i--) {\n      if (queues[i].head != null) {\n        return queues[i].head.event;\n      }\n    }\n  }\n  finally {\n    pushPopLock.unlock();\n  }\n  return null;\n}\n", "nl": "Returns the first event on the <code>EventQueue</code> without removing it.", "id": "38203"}
{"code": "public SubjectConfirmation createSubjectConfirmation(Element elem) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SUBJECT_CONFIRMATION,elem);\n  if (obj == null) {\n    return new SubjectConfirmationImpl(elem);\n  }\n else {\n    return (SubjectConfirmation)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>SubjectConfirmation</code>. The return object is immutable.", "id": "9411"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodeparentnodenull.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "21417"}
{"code": "public void applyLocalizedPattern(String template){\n  pattern=convertPattern(template,formatData.getLocalPatternChars(),PATTERN_CHARS,true);\n}\n", "nl": "Changes the pattern of this simple date format to the specified pattern which uses localized pattern characters.", "id": "13376"}
{"code": "public AMSearchResults searchOrganizations(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {\n  return searchOrganizations(wildcard,null,searchControl);\n}\n", "nl": "Searches for organizations in this organizational unit using wildcards. Wildcards can be specified such as a*, *, *a.", "id": "21016"}
{"code": "public long writeLock(){\n  long s, next;\n  return ((((s=state) & ABITS) == 0L && U.compareAndSwapLong(this,STATE,s,next=s + WBIT)) ? next : acquireWrite(false,0L));\n}\n", "nl": "Exclusively acquires the lock, blocking if necessary until available.", "id": "37347"}
{"code": "public Location subtract(Location vec){\n  if (vec == null || vec.getWorld() != getWorld()) {\n    throw new IllegalArgumentException(\"Cannot add Locations of differing worlds\");\n  }\n  x-=vec.x;\n  y-=vec.y;\n  z-=vec.z;\n  return this;\n}\n", "nl": "Subtracts the location by another.", "id": "56316"}
{"code": "public float transformAngle(float angle){\n  float ta=scalingY < 0 ? -angle : angle;\n  return (float)(scalingX < 0 ? Math.PI - ta : ta);\n}\n", "nl": "Transforms the specified angle. If scalingY is less than 0, the angle is multiplied by -1. If scalingX is less than 0, the angle is subtracted from Math.PI.", "id": "6526"}
{"code": "public String paramString(){\n  String typeStr;\nswitch (id) {\ncase COMPONENT_ADDED:\n    typeStr=\"COMPONENT_ADDED\";\n  break;\ncase COMPONENT_REMOVED:\ntypeStr=\"COMPONENT_REMOVED\";\nbreak;\ndefault :\ntypeStr=\"unknown type\";\n}\nreturn typeStr + \",child=\" + child.getName();\n}\n", "nl": "Returns a parameter string identifying this event. This method is useful for event-logging and for debugging.", "id": "45837"}
{"code": "@Override public void removeAttribute(String name){\nsynchronized (attributes) {\n    attributes.remove(name);\n    if (!isSpecial(name))     getRequest().removeAttribute(name);\n  }\n}\n", "nl": "Override the <code>removeAttribute()</code> method of the wrapped request.", "id": "26835"}
{"code": "@NonNull public static Interpolator clip(Interpolator interpolator,float start,float end){\n  return new ClipInterpolator(interpolator,start,end);\n}\n", "nl": "Clips another interpolator in the specified region. If start > end, then the interpolator will always return 0", "id": "32595"}
{"code": "public void invalidateLayout(Container target){\n}\n", "nl": "Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.", "id": "46535"}
{"code": "public boolean isNavigationAtBottom(){\n  return (mSmallestWidthDp >= 600 || mInPortrait);\n}\n", "nl": "Should a navigation bar appear at the bottom of the screen in the current device configuration? A navigation bar may appear on the right side of the screen in certain configurations.", "id": "16370"}
{"code": "public static FontProgram createFont() throws java.io.IOException {\n  return createFont(FontConstants.HELVETICA);\n}\n", "nl": "Creates a new standard Helvetica font program file.", "id": "35466"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodenotationnodename.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "14651"}
{"code": "public void endElement(String name) throws SAXException {\n}\n", "nl": "Receive notification of the end of an element. <p>By default, do nothing.  Application writers may override this method in a subclass to take specific actions at the end of each element (such as finalising a tree node or writing output to a file).</p>", "id": "16859"}
{"code": "protected void initializeRequestContext(RequestContext requestContext){\n  super.initializeRequestContext(requestContext);\n  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);\n  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);\n}\n", "nl": "Initialize request context and set the viewbean manager", "id": "15476"}
{"code": "public Point dbl(Point p,boolean checkInfinity) throws DivisionException {\n  if (checkInfinity) {\n    if (p.isInfinity()) {\n      return p;\n    }\n    if (p.getY().signum() == 0) {\n      return new Point(true);\n    }\n  }\n  return dbl(p);\n}\n", "nl": "Doubles point, checks for infinity if checkInfinity set", "id": "55386"}
{"code": "public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {\n  return super.modelToView(pos,adjustAllocation(a),b);\n}\n", "nl": "Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.", "id": "30132"}
{"code": "@Indexable(type=IndexableType.REINDEX) @Override public Foo updateFoo(Foo foo){\n  return fooPersistence.update(foo);\n}\n", "nl": "Updates the foo in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.", "id": "19829"}
{"code": "public com.sun.identity.wsfederation.jaxb.xmlsig.X509DataType.X509Certificate createX509DataTypeX509Certificate() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.X509DataTypeImpl.X509CertificateImpl();\n}\n", "nl": "Create an instance of X509DataTypeX509Certificate", "id": "305"}
{"code": "public static void message(String msg){\n  debugInst.debug(IDebug.MESSAGE,msg);\n}\n", "nl": "message level debug message", "id": "35209"}
{"code": "public static boolean isSubscript(AttributeSet a){\n  Boolean subscript=(Boolean)a.getAttribute(Subscript);\n  if (subscript != null) {\n    return subscript.booleanValue();\n  }\n  return false;\n}\n", "nl": "Checks whether the subscript attribute is set.", "id": "5530"}
{"code": "public boolean isInteger(){\n  return type == INTEGER;\n}\n", "nl": "Checks whether the value of this NSNumber is an integer.", "id": "51725"}
{"code": "private void validateException(DirectoryException de){\n  assertNotNull(de.getResultCode());\n  de.getMessageObject();\n  de.getMatchedDN();\n  de.getReferralURLs();\n}\n", "nl": "Verifies that everything is OK with the provided exception (i.e., that it is possible to get the result code, error message, message ID, matched DN, and referrals.", "id": "18323"}
{"code": "public com.sun.identity.liberty.ws.interaction.jaxb.SelectType.ItemType createSelectTypeItemType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.SelectTypeImpl.ItemTypeImpl();\n}\n", "nl": "Create an instance of SelectTypeItemType", "id": "53031"}
{"code": "private void abortOnSSLException() throws IOException {\n  if (sslException != null) {\n    throw sslException;\n  }\n}\n", "nl": "It seems that the SSL engine does not remember if an error has already occurred so we must cache it here and rethrow. See OPENDJ-652.", "id": "41947"}
{"code": "SessionID updateSessionID(SessionID previousId,SessionInfo newSessionInfo) throws SessionException {\n  cache.remove(getJWTFromSessionID(previousId,true));\n  String jwt=getJwtSessionMapper().asJwt(newSessionInfo);\n  return SessionID.generateStatelessSessionID(sessionServerConfig,newSessionInfo.getClientDomain(),jwt);\n}\n", "nl": "Updates a stateless SessionID to reflect the new state of the session and removes the previous SessionID from the cache.", "id": "9301"}
{"code": "public IRandomAccessSource createSourceView(){\n  return new IndependentRandomAccessSource(byteSource);\n}\n", "nl": "Creates the view of the byte source of this object. Closing the view won't affect this object. Closing source will have adverse effect on the view.", "id": "12460"}
{"code": "private static boolean needIncrement(MutableBigInteger mdivisor,int roundingMode,int qsign,MutableBigInteger mq,MutableBigInteger mr){\n  assert !mr.isZero();\n  int cmpFracHalf=mr.compareHalf(mdivisor);\n  return commonNeedIncrement(roundingMode,qsign,cmpFracHalf,mq.isOdd());\n}\n", "nl": "Tests if quotient has to be incremented according the roundingMode", "id": "43010"}
{"code": "void preModify(HashMapEntry<K,V> e){\n}\n", "nl": "Give LinkedHashMap a chance to take action when we modify an existing entry.", "id": "57327"}
{"code": "@BeforeGroups(groups=\"needRunningServer\") public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n}\n", "nl": "Launched before the tests, this function starts the embedded server.", "id": "48151"}
{"code": "private void enterChannelList(){\n  Log.d(TAG,\"enterChannelList\");\n  if (mService != null) {\n    if (mIsActivityForeground) {\n      Intent intent=new Intent();\n      intent.setClass(FmRadioActivity.this,FmRadioFavorite.class);\n      startActivityForResult(intent,REQUEST_CODE_FAVORITE);\n    }\n else {\n      Log.d(TAG,\"enterChannelList. activity is background, not enter channel list.\");\n    }\n  }\n}\n", "nl": "Go to channel list activity", "id": "8108"}
{"code": "public void printStackTrace(java.io.PrintStream s){\n  super.printStackTrace(s);\n}\n", "nl": "Prints this JAXBException and its stack trace (including the stack trace of the linkedException if it is non-null) to the PrintStream.", "id": "21904"}
{"code": "public String toString(){\n  return toString(true,false);\n}\n", "nl": "Returns  a String representation of <code>SessionContextStatement</code>.", "id": "3605"}
{"code": "public boolean isOptionAlias(String name){\n  return setOptionAliases.contains(name);\n}\n", "nl": "Returns <code>true</code> if option is an alias.", "id": "45392"}
{"code": "public String dn(final String template,final Object... attributeValues){\n  return DN.format(template,attributeValues).toString();\n}\n", "nl": "Formats an LDAP distinguished name using the provided template and attribute values. Values will be safely escaped in order to avoid potential injection attacks.", "id": "25784"}
{"code": "protected String paramString(){\n  String str=super.paramString() + \",text=\" + getText();\n  if (editable) {\n    str+=\",editable\";\n  }\n  return str + \",selection=\" + getSelectionStart()+ \"-\"+ getSelectionEnd();\n}\n", "nl": "Returns a string representing the state of this <code>TextComponent</code>. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be <code>null</code>.", "id": "10818"}
{"code": "protected DecodeException newUnsupportedMessageException(final int messageID,final byte messageTag,final ByteString messageBytes){\n  return DecodeException.fatalError(LocalizableMessage.raw(\"Unsupported LDAP message: id=%d, tag=%d, content=%s\",messageID,messageTag,messageBytes));\n}\n", "nl": "Returns a decoding exception suitable for use when an unsupported LDAP message is received.", "id": "352"}
{"code": "public com.sun.identity.saml2.jaxb.xmlsig.KeyValueType createKeyValueType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlsig.impl.KeyValueTypeImpl();\n}\n", "nl": "Create an instance of KeyValueType", "id": "53297"}
{"code": "protected void releaseManagedConnection() throws IOException {\n  if (managedConn != null) {\n    try {\n      managedConn.releaseConnection();\n    }\n  finally {\n      managedConn=null;\n    }\n  }\n}\n", "nl": "Releases the connection gracefully. The connection attribute will be nullified. Subsequent invocations are no-ops.", "id": "46639"}
{"code": "static Promise<String> promiseString(){\n  return new BasePromise<>();\n}\n", "nl": "Returns a String promise Added to make static imports possible.", "id": "15342"}
{"code": "public void addSelectionPath(TreePath path){\n  getSelectionModel().addSelectionPath(path);\n}\n", "nl": "Adds the node identified by the specified <code>TreePath</code> to the current selection. If any component of the path isn't viewable, and <code>getExpandsSelectedPaths</code> is true it is made viewable. <p> Note that <code>JTree</code> does not allow duplicate nodes to exist as children under the same parent -- each sibling must be a unique object.", "id": "40186"}
{"code": "protected String paramString(){\n  String optimizedDrawingPossibleString=(optimizedDrawingPossible ? \"true\" : \"false\");\n  return super.paramString() + \",optimizedDrawingPossible=\" + optimizedDrawingPossibleString;\n}\n", "nl": "Returns a string representation of this JLayeredPane. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be <code>null</code>.", "id": "31887"}
{"code": "public static final FileTime winTimeToFileTime(long wtime){\n  return FileTime.from(wtime / 10 + WINDOWS_EPOCH_IN_MICROSECONDS,TimeUnit.MICROSECONDS);\n}\n", "nl": "Converts Windows time (in microseconds, UTC/GMT) time to FileTime.", "id": "8351"}
{"code": "public int hashCode(){\n  return getRules().hashCode();\n}\n", "nl": "Generates the hash code for the table-based collation object", "id": "4741"}
{"code": "public void printin(String s){\n  writer.print(SPACES.substring(0,indent));\n  writer.print(s);\n}\n", "nl": "Prints the current indention, followed by the given string", "id": "29460"}
{"code": "public static Foo removeByUUID_G(java.lang.String uuid,long groupId) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {\n  return getPersistence().removeByUUID_G(uuid,groupId);\n}\n", "nl": "Removes the foo where uuid = &#63; and groupId = &#63; from the database.", "id": "24417"}
{"code": "public void windowIconified(WindowEvent e){\n  ((WindowListener)a).windowIconified(e);\n  ((WindowListener)b).windowIconified(e);\n}\n", "nl": "Handles the windowIconified event by invoking the windowIconified methods on listener-a and listener-b.", "id": "22695"}
{"code": "public static boolean hasExtension(String extension){\n  if (extension == null || extension.isEmpty()) {\n    return false;\n  }\n  return extensionToMimeTypeMap.containsKey(extension);\n}\n", "nl": "Returns true if the given extension has a registered MIME type.", "id": "47543"}
{"code": "public void removeValidation(String attrName){\n  if (m_validated != null) {\n    m_validated.remove(attrName);\n  }\n}\n", "nl": "Removes all validations from the attribute.", "id": "10931"}
{"code": "protected void adjustForGravity(GridBagConstraints constraints,Rectangle r){\n  AdjustForGravity(constraints,r);\n}\n", "nl": "Adjusts the x, y, width, and height fields to the correct values depending on the constraint geometry and pads. This method should only be used internally by <code>GridBagLayout</code>.", "id": "47659"}
{"code": "private Future<Object> sendHeartBeatRequest(){\n  final String HEARTBEAT_PATH=config().getString(\"heartbeat.path\",\"/health\");\n  return getAllEndpoints().compose(null).map(null).compose(null);\n}\n", "nl": "Send heart-beat check request to every REST node in every interval and await response.", "id": "279"}
{"code": "public void actionPerformed(ActionEvent e){\n  JTextComponent target=getTextComponent(e);\n  if (target != null) {\n    target.setEditable(false);\n  }\n}\n", "nl": "The operation to perform when this action is triggered.", "id": "37280"}
{"code": "public void onToggleBroadcast(View v){\n  if (getBroadcast() == null)   return;\n  if (getBroadcast().getStatus().isIdle()) {\n    WZStreamingError configError=startBroadcast();\n    if (configError != null) {\n      if (mStatusView != null)       mStatusView.setErrorMessage(configError.getErrorDescription());\n    }\n  }\n else {\n    endBroadcast();\n  }\n}\n", "nl": "Click handler for the broadcast button", "id": "4653"}
{"code": "public PlaLineInt plaline_first_next(){\n  return plaline(1);\n}\n", "nl": "this would be the first actual line in polyline", "id": "6208"}
{"code": "public void internalFrameClosed(InternalFrameEvent e){\n}\n", "nl": "Invoked when an internal frame has been closed.", "id": "8850"}
{"code": "void fullyLock(){\n  putLock.lock();\n  takeLock.lock();\n}\n", "nl": "Locks to prevent both puts and takes.", "id": "8716"}
{"code": "protected void reset() throws LoginException {\n  authDebug.message(\"AuthContext::reset()\");\n  reset(null);\n  authDebug.message(\"AuthContext::reset() exiting\");\n}\n", "nl": "Method to reset this instance of <code>AuthContext</code> object, so that a new login process can be initiated. Authenticates the user to the same organization or resource this object was instantiated with. If this object was instantiated with a <code> Subject</code>, it will be ignored.", "id": "28491"}
{"code": "public Expected<T> expect(){\n  if (!complete()) {\n    throw new NoSuchElementException(\"No value present, result not returned.\");\n  }\n  if (failure()) {\n    throw new IllegalStateException(cause());\n  }\n  return result.get().expect();\n}\n", "nl": "If the value of the promise can be null, it is better to use Expected which is like Optional.", "id": "799"}
{"code": "public SchemaBuilder addToSchemaOverwrite(){\n  return getSchemaBuilder().addMatchingRule(new MatchingRule(this),true);\n}\n", "nl": "Adds this matching rule to the schema overwriting any existing matching rule with the same numeric OID.", "id": "29470"}
{"code": "public boolean equals(XObject obj2){\n  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.equals(this);\n  try {\n    return m_val == obj2.bool();\n  }\n catch (  javax.xml.transform.TransformerException te) {\n    throw new org.apache.xml.utils.WrappedRuntimeException(te);\n  }\n}\n", "nl": "Tell if two objects are functionally equal.", "id": "17341"}
{"code": "public boolean includeOperationalAttributes(){\n  return includeOperationalAttributes;\n}\n", "nl": "Indicates whether the set of operational attributes should be included in the export.", "id": "42459"}
{"code": "public static int mainSearch(String[] args){\n  return mainSearch(args,true,true,System.out,System.err);\n}\n", "nl": "Parses the provided command-line arguments and uses that information to run the ldapsearch tool.", "id": "20912"}
{"code": "public static final void partialUpdateAllWidgets(Context context){\n  updateAllWidgets(context,false);\n}\n", "nl": "Updates all visible widgets partially.", "id": "20860"}
{"code": "public boolean ready() throws IOException {\nsynchronized (lock) {\n    ensureOpen();\n    return (pos < buf.length) || super.ready();\n  }\n}\n", "nl": "Tells whether this stream is ready to be read.", "id": "27587"}
{"code": "public void paste(int startIndex){\n  setCaretPosition(startIndex);\n  JTextComponent.this.paste();\n}\n", "nl": "Pastes the text from the system clipboard into the text starting at the specified index.", "id": "38500"}
{"code": "public String createRandomBytes(int byteNum){\n  byte[] secretBytes=new byte[byteNum];\n  secureRandom.nextBytes(secretBytes);\n  return Base64.encode(secretBytes);\n}\n", "nl": "Generate a supplied number of random bytes. Returning as a Base64 encoded String.", "id": "29831"}
{"code": "@NonNull public final Agera observeOnMain(boolean coalesce){\n  return observeOn(Looper.getMainLooper(),coalesce);\n}\n", "nl": "Makes sure update() signals are called on the main thread.", "id": "19321"}
{"code": "public char first(){\n  pos=0;\n  return current();\n}\n", "nl": "Sets the position to getBeginIndex() and returns the character at that position.", "id": "52932"}
{"code": "public void cancel(){\n  setStage(ReconStage.ACTIVE_CANCELING);\n  canceled=true;\n}\n", "nl": "Cancel the reconciliation run. May not take immediate effect in stopping the reconciliation logic.", "id": "56827"}
{"code": "public void newRowsAdded(TableModelEvent e){\n  justifyRows(e.getFirstRow(),e.getLastRow() + 1);\n  fireTableChanged(e);\n}\n", "nl": "Ensures that the new rows have the correct number of columns. This is accomplished by  using the <code>setSize</code> method in <code>Vector</code> which truncates vectors which are too long, and appends <code>null</code>s if they are too short. This method also sends out a <code>tableChanged</code> notification message to all the listeners.", "id": "41820"}
{"code": "public void clear(){\n  data.remove(ATTR_ACTION_DATA);\n  data.put(ATTR_PENDING,false);\n}\n", "nl": "Clears pending link data, sets pending to false.", "id": "13647"}
{"code": "protected void acceptDrag(int dragOperation){\n  DropTargetContextPeer peer=getDropTargetContextPeer();\n  if (peer != null) {\n    peer.acceptDrag(dragOperation);\n  }\n}\n", "nl": "accept the Drag. <P>", "id": "7486"}
{"code": "public static ComponentUI createUI(JComponent c){\n  return new SynthRootPaneUI();\n}\n", "nl": "Creates a new UI object for the given component.", "id": "49105"}
{"code": "private int read() throws IOException {\n  if (reader != null)   return reader.read();\n else   if (input != null)   return input.read();\n else   throw new IllegalStateException();\n}\n", "nl": "Read the next character", "id": "32529"}
{"code": "public void deleteField(FieldKey fieldKey) throws KeyNotFoundException {\n  if (fieldKey.equals(FieldKey.COVER_ART)) {\n    images.clear();\n  }\n else {\n    tag.deleteField(fieldKey);\n  }\n}\n", "nl": "Delete any instance of tag fields with this key", "id": "1772"}
{"code": "public void deleteField(FieldKey fieldKey) throws KeyNotFoundException {\n  id3Tag.deleteField(fieldKey);\n}\n", "nl": "Delete any instance of tag fields with this key", "id": "5890"}
{"code": "public void runTest() throws Throwable {\n  Document doc;\n  Node rootNode;\n  boolean state;\n  doc=(Document)load(\"staff\",false);\n  rootNode=doc.getDocumentElement();\n  state=rootNode.isSupported(\"XML\",\"\");\n  assertTrue(\"throw_True\",state);\n}\n", "nl": "Runs the test case.", "id": "21335"}
{"code": "public static Object[] copyObjects(Object[] obj,ORB orb) throws RemoteException {\n  if (utilDelegate != null) {\n    return utilDelegate.copyObjects(obj,orb);\n  }\n  return null;\n}\n", "nl": "Copies or connects an array of objects. Used by local stubs to copy any number of actual parameters, preserving sharing across parameters as necessary to support RMI semantics.", "id": "29192"}
{"code": "public boolean verify(X509Certificate cert,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CertificateExpiredException, CertificateNotYetValidException, CMSException {\n  return verify(cert,CMSUtils.getProvider(sigProvider));\n}\n", "nl": "verify that the given certificate successfully handles and confirms the signature associated with this signer and, if a signingTime attribute is available, that the certificate was valid at the time the signature was generated.", "id": "13022"}
{"code": "public static boolean isUiThread(){\n  return Thread.currentThread().getId() == Looper.getMainLooper().getThread().getId();\n}\n", "nl": "Tell whether current thread is UI(main) thread.", "id": "31528"}
{"code": "void discardLast(){\n  --lastUsed;\n}\n", "nl": "Disard the highest-numbered record. This is used in the string-buffer CIA; when only a single characters() chunk has been recieved, its index is moved into the Text node rather than being referenced by indirection into the text accumulator.", "id": "42870"}
{"code": "public TagField createField(ID3v24FieldKey id3Key,String value) throws KeyNotFoundException, FieldDataInvalidException {\n  if (id3Key == null) {\n    throw new KeyNotFoundException();\n  }\n  return super.doCreateTagField(new FrameAndSubId(id3Key.getFrameId(),id3Key.getSubId()),value);\n}\n", "nl": "Create Frame for Id3 Key Only textual data supported at the moment, should only be used with frames that support a simple string argument.", "id": "39612"}
{"code": "public final int intValue(){\n  return value;\n}\n", "nl": "Get the integer value for this level.  This integer value can be used for efficient ordering comparisons between Level objects.", "id": "27507"}
{"code": "public int item(int index){\n  runTo(index);\n  return this.elementAt(index);\n}\n", "nl": "Returns the <code>index</code>th item in the collection. If <code>index</code> is greater than or equal to the number of nodes in the list, this returns <code>null</code>. TODO: What happens if index is out of range?", "id": "2942"}
{"code": "public void paintScrollBarThumbBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintBorder(context,g,x,y,w,h,orientation);\n}\n", "nl": "Paints the border of the thumb of a scrollbar. The thumb provides a graphical indication as to how much of the Component is visible in a <code>JScrollPane</code>.", "id": "7250"}
{"code": "public void scrollRowToVisible(int row){\n  scrollPathToVisible(getPathForRow(row));\n}\n", "nl": "Scrolls the item identified by row until it is displayed. The minimum of amount of scrolling necessary to bring the row into view is performed. Only works when this <code>JTree</code> is contained in a <code>JScrollPane</code>.", "id": "52711"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(textindexsizeerroffsetoutofbounds.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "38784"}
{"code": "public boolean isNodeAncestor(TreeNode anotherNode){\n  if (anotherNode == null) {\n    return false;\n  }\n  TreeNode ancestor=this;\n  do {\n    if (ancestor == anotherNode) {\n      return true;\n    }\n  }\n while ((ancestor=ancestor.getParent()) != null);\n  return false;\n}\n", "nl": "Returns true if <code>anotherNode</code> is an ancestor of this node -- if it is this node, this node's parent, or an ancestor of this node's parent.  (Note that a node is considered an ancestor of itself.) If <code>anotherNode</code> is null, this method returns false.  This operation is at worst O(h) where h is the distance from the root to this node.", "id": "37749"}
{"code": "public static void logAddRequest(AddOperation addOperation){\n  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {\n    publisher.logAddRequest(addOperation);\n  }\n}\n", "nl": "Writes a message to the access logger with information about the add request associated with the provided add operation.", "id": "47229"}
{"code": "protected boolean accept(XSLTVisitor visitor){\n  return visitor.visitVariableOrParamDecl(this);\n}\n", "nl": "Accept a visitor and call the appropriate method  for this class.", "id": "19929"}
{"code": "public boolean deleteAll(){\n  return database.delete(DATABASE_TABLE,null,null) > 0;\n}\n", "nl": "Delete all LogAction records.", "id": "30791"}
{"code": "public boolean invokeImportPlugins(){\n  return invokeImportPlugins;\n}\n", "nl": "Indicates whether any LDIF import plugins registered with the server should be invoked during the import operation.", "id": "54767"}
{"code": "public boolean isForWindowsDesktopSSO(){\n  return (negoValue != null) ? negoValue.equalsIgnoreCase(HTTP_NEGOTIATE) : false;\n}\n", "nl": "Returns <code>true<code> if the callback is for WindowsDesktopSSO.", "id": "28947"}
{"code": "public Boolean isMustUnderstand(){\n  return mustUnderstand;\n}\n", "nl": "Returns value of <code>mustUnderstand</code> attribute.", "id": "40237"}
{"code": "public GSERParser skipSeparator() throws GSERException {\n  if (!hasNext(GSER_SEP)) {\n    LocalizableMessage msg=ERR_GSER_NO_VALID_SEPARATOR.get(gserValue.substring(pos,length));\n    throw new GSERException(msg);\n  }\n  skip(GSER_SEP);\n  skip(GSER_SP);\n  return this;\n}\n", "nl": "Skips the input matching the separator pattern (\",\") and subsequenct space characters.", "id": "47678"}
{"code": "private EnumEvalResult evaluate(AciEvalContext evalCtx){\n  return body.evaluate(evalCtx);\n}\n", "nl": "Evaluate this ACI using the evaluation context provided. Re-direct that calls the body's evaluate method.", "id": "57761"}
{"code": "public java.net.URL readURL() throws SQLException {\n  return (java.net.URL)getNextAttribute();\n}\n", "nl": "Reads an SQL <code>DATALINK</code> value from the stream and returns it as an <code>URL</code> object in the Java programming language. <P> This method does not perform type-safe checking to determine if the returned type is the expected type as this responsibility is delegated to the UDT mapping as implemented by a <code>SQLData</code> implementation.", "id": "17379"}
{"code": "public void startAttribute(String uri,String local){\n  textBuf.setLength(0);\n  this.attNamespaceUri=uri;\n  this.attLocalName=local;\n}\n", "nl": "Starts marshalling of an attribute. The marshalling of an attribute will be done by <ol> <li>call the startAttribute method <li>call the text method (several times if necessary) <li>call the endAttribute method </ol> No two attributes can be marshalled at the same time. Note that the whole attribute marshalling must be happened after the startElement method and before the endAttributes method.", "id": "9767"}
{"code": "public static List<Foo> findByUuid(java.lang.String uuid){\n  return getPersistence().findByUuid(uuid);\n}\n", "nl": "Returns all the foos where uuid = &#63;.", "id": "39832"}
{"code": "public void addEmptyValues(Set names){\n  Iterator itr=names.iterator();\n  while (itr.hasNext()) {\n    String name=(String)itr.next();\n    if (!byteValues) {\n      put(name,new HashSet());\n    }\n else {\n      addNegativeByteAttr(name);\n    }\n  }\n}\n", "nl": "Method which adds new entries to the map with empty set as values", "id": "54283"}
{"code": "public static byte[] toByteArray(InputStream input) throws IOException {\n  ByteArrayOutputStream output=new ByteArrayOutputStream();\n  copy(input,output);\n  return output.toByteArray();\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a <code>byte[]</code>. <p> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>.", "id": "39392"}
{"code": "@Override public String toString(){\n  return x + \",\" + y+ \",\"+ z;\n}\n", "nl": "Returns this vector's components as x,y,z.", "id": "16353"}
{"code": "public Set canAddMembers(){\n  Set results=(Set)IdUtils.typesCanAddMembers.get(getName());\n  return (results == null) ? Collections.EMPTY_SET : results;\n}\n", "nl": "Returns a set of types of identities that this type can add as members.", "id": "30509"}
{"code": "public static Foo findByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {\n  return getPersistence().findByField2_First(field2,orderByComparator);\n}\n", "nl": "Returns the first foo in the ordered set where field2 = &#63;.", "id": "12116"}
{"code": "public MimeVersionHeader createMimeVersionHeader(int majorVersion,int minorVersion) throws InvalidArgumentException {\n  if (majorVersion < 0 || minorVersion < 0)   throw new javax.sip.InvalidArgumentException(\"bad major/minor version\");\n  MimeVersion m=new MimeVersion();\n  m.setMajorVersion(majorVersion);\n  m.setMinorVersion(minorVersion);\n  return m;\n}\n", "nl": "Creates a new MimeVersionHeader based on the newly supplied mimeVersion value.", "id": "13891"}
{"code": "@Override protected void installListeners(){\n  super.installListeners();\n  table.addPropertyChangeListener(this);\n}\n", "nl": "Attaches listeners to the JTable.", "id": "53211"}
{"code": "private boolean checkRDN(int right,RDN rdn,AciContainer container){\n  container.setRights(right);\n  for (  AVA ava : rdn) {\n    container.setCurrentAttributeType(ava.getAttributeType());\n    container.setCurrentAttributeValue(ava.getAttributeValue());\n    if (!accessAllowed(container)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Check access on each attribute-value pair component of the specified RDN. There may be more than one attribute-value pair if the RDN is multi-valued.", "id": "34757"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(characterdatasetdatanomodificationallowederr.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "21873"}
{"code": "public String toXMLString() throws SAML2Exception {\n  return toXMLString(true,false);\n}\n", "nl": "Returns a String representation of this Object.", "id": "8013"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.InitiatorSignatureTokenElement createInitiatorSignatureTokenElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.InitiatorSignatureTokenElementImpl();\n}\n", "nl": "Create an instance of InitiatorSignatureTokenElement", "id": "19438"}
{"code": "@Override public void removeFilterDef(FilterDef filterDef){\nsynchronized (filterDefs) {\n    filterDefs.remove(filterDef.getFilterName());\n  }\n  fireContainerEvent(\"removeFilterDef\",filterDef);\n}\n", "nl": "Remove the specified filter definition from this Context, if it exists; otherwise, no action is taken.", "id": "55643"}
{"code": "public void componentShown(ComponentEvent e){\n  ((ComponentListener)a).componentShown(e);\n  ((ComponentListener)b).componentShown(e);\n}\n", "nl": "Handles the componentShown event by invoking the componentShown methods on listener-a and listener-b.", "id": "48513"}
{"code": "default void validate(){\n}\n", "nl": "Validates the request, throws IllegalArgumentException if not valid.", "id": "8840"}
{"code": "@SuppressWarnings(\"unused\") static <K,V>ReplayPromise<Map<K,V>> replayPromiseMap(Class<K> keyType,Class<V> valueType,final Duration timeout,final long time){\n  return new ReplayPromiseImpl<>(timeout,time);\n}\n", "nl": "Generic map promise. Added to make static imports possible.", "id": "40721"}
{"code": "protected void engineSetPadding(String padding) throws NoSuchPaddingException {\n  if (!padding.equalsIgnoreCase(\"NoPadding\")) {\n    throw new NoSuchPaddingException(\"Padding \" + padding + \" unknown.\");\n  }\n}\n", "nl": "should never be called.", "id": "32357"}
{"code": "public static Element parseXML(String xml) throws DSTException {\n  try {\n    Document doc=XMLUtils.toDOMDocument(xml,debug);\n    return doc.getDocumentElement();\n  }\n catch (  Exception ex) {\n    debug.error(\"DSTUtils.parseXML: Parsing error.\",ex);\n    throw new DSTException(ex);\n  }\n}\n", "nl": "Parses an XML input string.", "id": "11245"}
{"code": "public static void initializeForClientUse(){\n  EmbeddedUtils.initializeForClientUse();\n}\n", "nl": "Initialises OpenDJ for client use, used by the CLI tools", "id": "39380"}
{"code": "public static ComponentUI createUI(JComponent a){\n  ComponentUI mui=new MultiDesktopIconUI();\n  return MultiLookAndFeel.createUIs(mui,((MultiDesktopIconUI)mui).uis,a);\n}\n", "nl": "Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI.  Otherwise, just returns the UI object obtained from the default <code>LookAndFeel</code>.", "id": "13075"}
{"code": "private void changeRecordingMode(boolean recordingMode){\n  Log.d(TAG,\"changeRecordingMode: \" + recordingMode);\n  if (mIsInRecordingMode == recordingMode) {\n    Log.e(TAG,\"FM already \" + (recordingMode ? \"in\" : \"NOT in\") + \"recording mode!\");\n    return;\n  }\n  mIsInRecordingMode=recordingMode;\n  mService.setRecordingModeAsync(recordingMode);\n  switchRecordLayout(recordingMode);\n}\n", "nl": "Change recording mode", "id": "29841"}
{"code": "public void addSigner(PrivateKey key,X509Certificate cert,String encryptionOID,String digestOID,CMSAttributeTableGenerator signedAttrGen,CMSAttributeTableGenerator unsignedAttrGen) throws IllegalArgumentException {\n  doAddSigner(key,cert,encryptionOID,digestOID,signedAttrGen,unsignedAttrGen,null);\n}\n", "nl": "add a signer, specifying the digest encryption algorithm, with extra signed/unsigned attributes based on generators.", "id": "12208"}
{"code": "public void popContext(){\n  contexts[contextPos].clear();\n  contextPos--;\n  if (contextPos < 0) {\n    throw new EmptyStackException();\n  }\n  currentContext=contexts[contextPos];\n}\n", "nl": "Revert to the previous Namespace context. <p>Normally, you should pop the context at the end of each XML element.  After popping the context, all Namespace prefix mappings that were previously in force are restored.</p> <p>You must not attempt to declare additional Namespace prefixes after popping a context, unless you push another context first.</p>", "id": "7247"}
{"code": "public SignatureVisitor visitTypeArgument(char wildcard){\n  return this;\n}\n", "nl": "Visits a type argument of the last visited class or inner class type.", "id": "46988"}
{"code": "public void yypushback(int number){\n  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);\n  zzMarkedPos-=number;\n}\n", "nl": "Pushes the specified amount of characters back into the input stream. They will be read again by then next call of the scanning method", "id": "26428"}
{"code": "public static TokenEndpointAuthMethod fromString(String type){\n  if (type != null) {\n    for (    TokenEndpointAuthMethod authMethod : TokenEndpointAuthMethod.values()) {\n      if (type.equalsIgnoreCase(authMethod.type)) {\n        return authMethod;\n      }\n    }\n  }\n  return null;\n}\n", "nl": "Translates a string into a token endpoint auth method type.", "id": "24620"}
{"code": "@Override public int hashCode(){\n  int hc=hashCodeValue;\n  if (hc == 0) {\n    hc=baseLocale.hashCode();\n    if (localeExtensions != null) {\n      hc^=localeExtensions.hashCode();\n    }\n    hashCodeValue=hc;\n  }\n  return hc;\n}\n", "nl": "Override hashCode. Since Locales are often used in hashtables, caches the value for speed.", "id": "15590"}
{"code": "public void handle(short operation,String key,Object data,Node src,Node dst){\n  notifications.add(new UserDataNotification(operation,key,data,src,dst));\n}\n", "nl": "Implementation of UserDataHandler.handle. Creates a UserDataNotification for later testing", "id": "21741"}
{"code": "public static Foo findByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {\n  return getPersistence().findByField2_First(field2,orderByComparator);\n}\n", "nl": "Returns the first foo in the ordered set where field2 = &#63;.", "id": "50647"}
{"code": "public static boolean putLong(Context context,String key,long value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putLong(key,value);\n  return editor.commit();\n}\n", "nl": "put long preferences", "id": "864"}
{"code": "final int dec(int i){\n  return ((i == 0) ? items.length : i) - 1;\n}\n", "nl": "Circularly decrement i.", "id": "13988"}
{"code": "private MBeanAttributeInfo[] nonNullAttributes(){\n  return (attributes == null) ? MBeanAttributeInfo.NO_ATTRIBUTES : attributes;\n}\n", "nl": "Return the value of the attributes field, or an empty array if the field is null.  This can't happen with a normally-constructed instance of this class, but can if the instance was deserialized from another implementation that allows the field to be null.  It would be simpler if we enforced the class invariant that these fields cannot be null by writing a readObject() method, but that would require us to define the various array fields as non-final, which is annoying because conceptually they are indeed final.", "id": "22497"}
{"code": "public PlaPointFloat board_to_user(PlaPointFloat p_point){\n  return new PlaPointFloat(board_to_user(p_point.v_x),board_to_user(p_point.v_y));\n}\n", "nl": "Transforms a geometry.planar.FloatPoint from the board coordinate space to the user coordinate space.", "id": "14542"}
{"code": "public void printlnError(String str){\n  buff.append(str).append(\"\\n\");\n}\n", "nl": "Prints error with new line.", "id": "49442"}
{"code": "public static IOFileFilter trueFileFilter(){\n  return TrueFileFilter.TRUE;\n}\n", "nl": "Returns a filter that always returns true.", "id": "44406"}
{"code": "public static boolean isOAuth2FragmentErrorType(Set<String> requestedResponseTypes){\n  if (requestedResponseTypes == null) {\n    return false;\n  }\n  return requestedResponseTypes.size() == 1 && requestedResponseTypes.contains(TOKEN);\n}\n", "nl": "When using the OAuth2 Implicit Grant the response_type value is \"token\".", "id": "26545"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(getAttributeNodeNS02.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "16430"}
{"code": "@DataProvider(name=\"decodeValueIllegalData\") Object[][] createDecodeValueIllegalData(){\n  return new Object[][]{{\"xxx\"},{null}};\n}\n", "nl": "Creates illegal data for decode value test.", "id": "49594"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodedocumentnodeattribute.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "20934"}
{"code": "public void runTest() throws Throwable {\n  Document doc;\n  Node rootNode;\n  boolean state;\n  doc=(Document)load(\"staff\",false);\n  rootNode=doc.getDocumentElement();\n  state=rootNode.isSupported(\"XML\",\"9.0\");\n  assertFalse(\"throw_False\",state);\n}\n", "nl": "Runs the test case.", "id": "13161"}
{"code": "@SuppressWarnings(\"unchecked\") public void writeBoolean(boolean x) throws SQLException {\n  attribs.add(Boolean.valueOf(x));\n}\n", "nl": "Writes a <code>boolean</code> in the Java programming language to this <code>SQLOutputImpl</code> object. The driver converts it to an SQL <code>BIT</code> before returning it to the database.", "id": "36802"}
{"code": "public OutputStream bindStream(OutputStream output){\n  OutputStream stream=m_streams.get();\n  m_streams.set(output);\n  return stream;\n}\n", "nl": "Bind the specified stream to the current thread.", "id": "32592"}
{"code": "@Override public void newLine() throws IOException {\n  write(System.lineSeparator());\n}\n", "nl": "Write a line separator.  The line separator string is defined by the system property <tt>line.separator</tt>, and is not necessarily a single newline ('\\n') character.", "id": "16780"}
{"code": "public void modify(String attrName,String value,ModificationType modificationType){\n  modify(new Attr(attrName,value),modificationType);\n}\n", "nl": "Modify a single attribute for the entity. <P> IMPORTANT: To make the changes persistent, you need to call the save method to save the changes. <P>", "id": "30127"}
{"code": "public boolean isSynthetic(){\n  return testAllFlags(SYNTHETIC);\n}\n", "nl": "Utility method to query the modifier flags of this member; returns false if the member is not a method.", "id": "18696"}
{"code": "private static synchronized Date parseDateString(String textRepresentation) throws ParseException {\n  try {\n    return sdfDefault.parse(textRepresentation);\n  }\n catch (  ParseException ex) {\n    return sdfGnuStep.parse(textRepresentation);\n  }\n}\n", "nl": "Parses the XML date string and creates a Java Date object from it. This function is synchronized as SimpleDateFormat is not thread-safe.", "id": "31715"}
{"code": "public void removePubGruuParam(){\n  if (parameters != null)   parameters.delete(ParameterNames.PUB_GRUU);\n}\n", "nl": "remove the pub-gruu value from the parameter list if it exists.", "id": "1609"}
{"code": "public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {\n  return super.newInstance(javaContentInterface);\n}\n", "nl": "Create an instance of the specified Java content interface.", "id": "19358"}
{"code": "private void goToBackup(){\n  mStage=Stage.PASSWORD;\n  updateStage();\n  mPassword.requestFocus();\n  mPassword.postDelayed(mShowKeyboardRunnable,500);\n  mFingerprintUiHelper.stopListening();\n}\n", "nl": "Switches to backup (password) screen. This either can happen when fingerprint is not available or the user chooses to use the password authentication method by pressing the button. This can also happen when the user had too many fingerprint attempts.", "id": "12359"}
{"code": "public void flip(int x,int y){\n  int offset=y * rowSize + (x / 32);\n  bits[offset]^=1 << (x & 0x1f);\n}\n", "nl": "<p>Flips the given bit.</p>", "id": "16103"}
{"code": "public static void createMultiNodes(String key,Enumeration e,StringBuffer xml) throws ParserConfigurationException {\n  while (e.hasMoreElements()) {\n    createSingleNode(key,(String)e.nextElement(),xml);\n  }\n}\n", "nl": "creates a multiple xml nodes and appends those nodes to the input xml construct.", "id": "36824"}
{"code": "public static void assertSpecificLang(String specificLang) throws XMPException {\n  if (specificLang == null || specificLang.length() == 0) {\n    throw new XMPException(\"Empty specific language\",XMPError.BADPARAM);\n  }\n}\n", "nl": "Asserts that a specific language is set.", "id": "39595"}
{"code": "public synchronized void runTask(HeadTaskRunnable toRun){\n  this.task=toRun;\n  this.notify();\n}\n", "nl": "Runs the task.", "id": "16551"}
{"code": "public boolean hasSubFrames(){\n  return !subordinateFrames.isEmpty();\n}\n", "nl": "Indicates whether this stack frame has one or more subordinate frames.", "id": "33798"}
{"code": "public static void fill(short[] a,short val){\n  for (int i=0, len=a.length; i < len; i++)   a[i]=val;\n}\n", "nl": "Assigns the specified short value to each element of the specified array of shorts.", "id": "18676"}
{"code": "@Override public void removeChannelListener(ChannelListener channelListener){\n  channelListeners.remove(channelListener);\n}\n", "nl": "Removes a channel listener from the channel.<br> Channel listeners are uniquely identified using the equals(Object) method", "id": "32119"}
{"code": "public final boolean isFinished(){\n  return mFinished;\n}\n", "nl": "Returns whether the scroller has finished scrolling.", "id": "5439"}
{"code": "public String toString(){\n  return (\"JMXPrincipal:  \" + name);\n}\n", "nl": "Returns a string representation of this <code>JMXPrincipal</code>. <p>", "id": "57488"}
{"code": "public void unfix_items(){\n  for (  BrdItem curr_ob : items_list)   curr_ob.unfix();\n  actlog_start_scope(LogfileScope.UNFIX_SELECTED_ITEMS);\n}\n", "nl": "unfixes all items in this selected set", "id": "53906"}
{"code": "public static GenericControl newControl(final String oid){\n  return new GenericControl(oid,false,null);\n}\n", "nl": "Creates a new non-critical control having the provided OID and no value.", "id": "34522"}
{"code": "public static Foo[] findByUuid_C_PrevAndNext(long fooId,java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {\n  return getPersistence().findByUuid_C_PrevAndNext(fooId,uuid,companyId,orderByComparator);\n}\n", "nl": "Returns the foos before and after the current foo in the ordered set where uuid = &#63; and companyId = &#63;.", "id": "49810"}
{"code": "public static Reflect on(String name) throws ReflectException {\n  return on(forName(name));\n}\n", "nl": "Wrap a class name. <p> This is the same as calling <code>on(Class.forName(name))</code>", "id": "56283"}
{"code": "public synchronized int count(){\n  return set.size();\n}\n", "nl": "Gets the number of elements in the set.", "id": "28714"}
{"code": "public void pushWrapper(Wrapper wrapper){\n  profiles.addFirst(wrapper);\n}\n", "nl": "Decorates the core LDAP profile with the provided LDAP profile wrapper. All profile requests will be directed to the provided wrapper before being forwarded onto the core profile if the request could not be satisfied.", "id": "27934"}
{"code": "public void paintOptionPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBorder(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the border of an option pane.", "id": "53544"}
{"code": "public SampleModel createCompatibleSampleModel(int w,int h){\n  return new SinglePixelPackedSampleModel(transferType,w,h,maskArray);\n}\n", "nl": "Creates a <code>SampleModel</code> with the specified width and height that has a data layout compatible with this <code>ColorModel</code>.", "id": "20849"}
{"code": "public void registerRenderListener(IWXRenderListener listener){\n  mRenderListener=listener;\n}\n", "nl": "begin register listener", "id": "26912"}
{"code": "protected void revokeConnection(){\n  if (managedConn == null)   return;\n  log.warn(MISUSE_MESSAGE);\n  managedConn.detach();\n  try {\n    uniquePoolEntry.shutdown();\n  }\n catch (  IOException iox) {\n    log.debug(\"Problem while shutting down connection.\",iox);\n  }\n}\n", "nl": "Revokes the currently issued connection. The adapter gets disconnected, the connection will be shut down.", "id": "33054"}
{"code": "private void stopStreamingQuote(){\n  if (streamingQuoteStarted && websocketThread != null) {\n    websocketThread.stopWS();\n    try {\n      Thread.sleep(1000);\n    }\n catch (    InterruptedException e) {\n      System.out.println(\"ZStreamingQuoteControl.stopStreamingQuote(): ERROR: InterruptedException while sleeping\");\n    }\n  }\n  if (ZStreamingConfig.isStreamingQuoteStoringRequired() && (streamingQuoteStorage != null)) {\n    streamingQuoteStorage.closeJDBCConn();\n  }\n}\n", "nl": "stopStreamingQuote - private method to stop streaming Quote WS", "id": "38172"}
{"code": "public static boolean isErrorLoggable(Level level){\n  if (logger == null) {\n    return false;\n  }\n else {\n    return logger.isErrorLoggable(level);\n  }\n}\n", "nl": "Checks if an error message of the given level would actually be logged by this logger. This check is based on the Loggers effective level.", "id": "11667"}
{"code": "public void preSingleSignOnRequest(String hostedEntityID,String idpEntityID,String realm,HttpServletRequest request,HttpServletResponse response,AuthnRequest authnRequest) throws SAML2Exception {\n  return;\n}\n", "nl": "Invokes before OpenAM sends the Single-Sign-On request to IDP.", "id": "32140"}
{"code": "public void paintTableHeaderBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}\n", "nl": "Paints the background of the header of a table.", "id": "9549"}
{"code": "@Override public Object lookupLink(String name) throws NamingException {\n  return lookup(new CompositeName(name),false);\n}\n", "nl": "Retrieves the named object, following links except for the terminal atomic component of the name.", "id": "54431"}
{"code": "public boolean isConstrained(){\n  return constrained;\n}\n", "nl": "Attempted updates to \"Constrained\" properties will cause a \"VetoableChange\" event to get fired when the property is changed.", "id": "12175"}
{"code": "public synchronized boolean canUndoOrRedo(){\n  if (indexOfNextAdd == edits.size()) {\n    return canUndo();\n  }\n else {\n    return canRedo();\n  }\n}\n", "nl": "Returns true if it is possible to invoke <code>undo</code> or <code>redo</code>.", "id": "3716"}
{"code": "public Duration minusNanos(long nanosToSubtract){\n  return (nanosToSubtract == Long.MIN_VALUE ? plusNanos(Long.MAX_VALUE).plusNanos(1) : plusNanos(-nanosToSubtract));\n}\n", "nl": "Returns a copy of this duration with the specified duration in nanoseconds subtracted. <p> This instance is immutable and unaffected by this method call.", "id": "34406"}
{"code": "@Override public boolean accept(ClusterMessage msg){\n  return (msg instanceof FileMessage) || (msg instanceof UndeployMessage);\n}\n", "nl": "Before the cluster invokes messageReceived the cluster will ask the receiver to accept or decline the message, In the future, when messages get big, the accept method will only take a message header", "id": "50668"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(documentimportnode12.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "4992"}
{"code": "@DataProvider public Object[][] validAttributeDescriptions(){\n  return new Object[][]{{\"cn\",false},{\"cn-xxx\",false},{\"cn\",true},{\"cn-xxx\",true},{\"cn_xxx\",true},{\"cn.xxx\",true},{\"cn;xxx\",false},{\"cn;xxx-yyy\",false},{\"cn;xxx\",true},{\"cn;xxx-yyy\",true},{\"cn;xxx_yyy\",true},{\"cn;xxx.yyy\",true}};\n}\n", "nl": "Returns test data for valid attribute descriptions.", "id": "56833"}
{"code": "public <M extends Configuration>void deregisterAddListener(SetRelationDefinition<?,M> d,ServerManagedObjectAddListener<M> listener){\n  validateRelationDefinition(d);\n  DN baseDN=DNBuilder.create(path,d);\n  deregisterAddListener(baseDN,listener);\n}\n", "nl": "Deregisters an existing server managed object add listener.", "id": "18426"}
{"code": "public Query include(Contact.Field... fields){\n  include.clear();\n  include.addAll(Arrays.asList(fields));\n  return this;\n}\n", "nl": "Restrict the fields of returned Contacts to only include the provided fields.", "id": "37257"}
{"code": "public void update(Graphics a,JComponent b){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).update(a,b);\n  }\n}\n", "nl": "Invokes the <code>update</code> method on each UI handled by this object.", "id": "40133"}
{"code": "private boolean isASCIIDigit(char c){\n  return (c >= '0' && c <= '9');\n}\n", "nl": "Tell if a character is an ASCII digit.", "id": "42103"}
{"code": "private static boolean checkFolderNamePattern(final String fileName){\n  Pattern pattern=Pattern.compile(Constants.INVALID_FILE_NAME_REGEX);\n  Matcher matcher=pattern.matcher(fileName);\n  return matcher.find();\n}\n", "nl": "check if new folder name contains disallowed chars.", "id": "7705"}
{"code": "private int constrainY(JTextComponent target,int y,int vis){\n  if (y < 0) {\n    y=0;\n  }\n else   if (y + vis > target.getHeight()) {\n    y=Math.max(0,target.getHeight() - vis);\n  }\n  return y;\n}\n", "nl": "Makes sure <code>y</code> is a valid location in <code>target</code>.", "id": "13766"}
{"code": "private ReplServerStartMsg sendStartToRemote() throws IOException {\n  ReplServerStartMsg outReplServerStartMsg=createReplServerStartMsg();\n  send(outReplServerStartMsg);\n  return outReplServerStartMsg;\n}\n", "nl": "Sends a start message to the remote RS.", "id": "48612"}
{"code": "public Resource property(final String name,final PropertyMapper mapper){\n  declaredProperties.put(name,mapper);\n  return this;\n}\n", "nl": "Specifies a mapping for a property contained in this JSON resource. Properties are inherited and sub-types may override them. Properties are optional: a resource that does not have any properties cannot be created, read, or modified, and may only be used for accessing sub-resources. These resources usually represent API \"endpoints\".", "id": "37919"}
{"code": "public static AccountUsabilityRequestControl newControl(final boolean isCritical){\n  return isCritical ? CRITICAL_INSTANCE : NONCRITICAL_INSTANCE;\n}\n", "nl": "Creates a new account usability request control having the provided criticality.", "id": "44349"}
{"code": "public static String ensureLeft(final String value,final String prefix){\n  return ensureLeft(value,prefix,true);\n}\n", "nl": "Ensures that the value begins with prefix. If it doesn't exist, it's prepended. It is case sensitive.", "id": "19330"}
{"code": "public void signalStatusChange(ServerStatus newStatus){\n  try {\n    connectedRS.get().session.publish(new ChangeStatusMsg(ServerStatus.INVALID_STATUS,newStatus));\n  }\n catch (  IOException ex) {\n    logger.error(ERR_EXCEPTION_SENDING_CS,getBaseDN(),getServerId(),ex.getLocalizedMessage() + \" \" + stackTraceToSingleLineString(ex));\n  }\n}\n", "nl": "Signals the RS we just entered a new status.", "id": "48965"}
{"code": "public Builder approximateMatchingRule(String approximateMatchingRuleOID){\n  this.approximateMatchingRuleOID=approximateMatchingRuleOID;\n  return this;\n}\n", "nl": "Sets the matching rule that should be used for approximate matching with this attribute type.", "id": "48108"}
{"code": "private static URL toURL(String systemId){\n  try {\n    return new URL(systemId);\n  }\n catch (  MalformedURLException e) {\n    return null;\n  }\n}\n", "nl": "Converts a system ID to an URL object.", "id": "23017"}
{"code": "@Deprecated public boolean allowThreadSuspension(boolean b){\n  this.vmAllowSuspension=b;\n  if (!b) {\n    VM.unsuspendSomeThreads();\n  }\n  return true;\n}\n", "nl": "Used by VM to control lowmem implicit suspension.", "id": "23013"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.protocol.StatusDetailType createStatusDetailType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.StatusDetailTypeImpl();\n}\n", "nl": "Create an instance of StatusDetailType", "id": "17575"}
{"code": "public void reset(){\n  System.arraycopy(IV,0,cbcV,0,IV.length);\n  Arrays.fill(cbcNextV,(byte)0);\n  cipher.reset();\n}\n", "nl": "reset the chaining vector back to the IV and reset the underlying cipher.", "id": "35712"}
{"code": "public static boolean isBridge(int mod){\n  return (mod & ACC_BRIDGE) != 0;\n}\n", "nl": "Tells whether a given access modifier is bridge. A modifier is bridge if it is marked with the ACC_BRIDGE flag (0x0040), as specified in JLS8, 4.6 <tt>Methods</tt>.", "id": "47430"}
{"code": "synchronized void establishConnection() throws IOException {\n  if (isConnected) {\n    throw new IOException(\"Pipe already connected\");\n  }\n  if (isClosed) {\n    throw new IOException(\"Pipe is closed\");\n  }\n  if (buffer == null) {\n    buffer=new char[PIPE_SIZE];\n  }\n  isConnected=true;\n}\n", "nl": "Establishes the connection to the PipedWriter.", "id": "58139"}
{"code": "public AttributeSet copyAttributes(){\n  NamedStyle a=new NamedStyle();\n  a.attributes=attributes.copyAttributes();\n  return a;\n}\n", "nl": "Copies a set of attributes.", "id": "15719"}
{"code": "public long offsetN(long absoluteOffset){\n  return absoluteOffset - firstByte;\n}\n", "nl": "Given an absolute offset (in the GroupedRandomAccessSource coordinates), calculate the effective offset in the underlying source", "id": "5618"}
{"code": "public boolean offer(E e){\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    q.offer(e);\n    if (q.peek() == e) {\n      leader=null;\n      available.signal();\n    }\n    return true;\n  }\n  finally {\n    lock.unlock();\n  }\n}\n", "nl": "Inserts the specified element into this delay queue.", "id": "24070"}
{"code": "public final void connectProxy(HttpHost proxy,boolean secure){\n  if (proxy == null) {\n    throw new IllegalArgumentException(\"Proxy host may not be null.\");\n  }\n  if (this.connected) {\n    throw new IllegalStateException(\"Already connected.\");\n  }\n  this.connected=true;\n  this.proxyChain=new HttpHost[]{proxy};\n  this.secure=secure;\n}\n", "nl": "Tracks connecting to the first proxy.", "id": "29934"}
{"code": "@Override public void addChild(Container child){\n  throw new IllegalStateException(sm.getString(\"standardWrapper.notChild\"));\n}\n", "nl": "Refuse to add a child Container, because Wrappers are the lowest level of the Container hierarchy.", "id": "810"}
{"code": "protected static void waitForTimeout(){\n  sleep(TRANSACTION_TIMES_OUT_FOR);\n}\n", "nl": "Wait till  a transaction times out.", "id": "23000"}
{"code": "protected static String[] commaDelimitedListToStringArray(String commaDelimitedStrings){\n  return (commaDelimitedStrings == null || commaDelimitedStrings.length() == 0) ? new String[0] : commaSeparatedValuesPattern.split(commaDelimitedStrings);\n}\n", "nl": "Convert a given comma delimited String into an array of String", "id": "55972"}
{"code": "public Observable<Void> addProductObservable(Product product){\n  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();\n  addProduct(product,resultHandler.toHandler());\n  return resultHandler;\n}\n", "nl": "Add a product to the persistence.", "id": "50626"}
{"code": "public String toString(){\n  return getClassName() + \"[\" + getObjectName()+ \"]\";\n}\n", "nl": "Returns a string representing this ObjectInstance object. The format of this string is not specified, but users can expect that two ObjectInstances return the same string if and only if they are equal.", "id": "57785"}
{"code": "public static String format(String pattern,Long j,String l){\n  MessageFormat mf=new MessageFormat(\"\");\n  mf.setLocale(getLocale(l));\n  mf.applyPattern(pattern);\n  String msg=format(mf,j);\n  return msg;\n}\n", "nl": "Formats the objects into specified message format.", "id": "28897"}
{"code": "public static BooleanArgument verboseArgument() throws ArgumentException {\n  return BooleanArgument.builder(OPTION_LONG_VERBOSE).shortIdentifier(OPTION_SHORT_VERBOSE).description(INFO_DESCRIPTION_VERBOSE.get()).buildArgument();\n}\n", "nl": "Returns the \"verbose\" boolean argument.", "id": "26981"}
{"code": "@Override public Promise<Void,AuthenticationException> cleanSubject(MessageInfoContext messageInfo,Subject subject){\n  return newResultPromise(null);\n}\n", "nl": "Nothing to clean up.", "id": "6980"}
{"code": "public static long remainderUnsigned(long dividend,long divisor){\n  if (dividend > 0 && divisor > 0) {\n    return dividend % divisor;\n  }\n else {\n    if (compareUnsigned(dividend,divisor) < 0)     return dividend;\n else     return toUnsignedBigInteger(dividend).remainder(toUnsignedBigInteger(divisor)).longValue();\n  }\n}\n", "nl": "Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.", "id": "18453"}
{"code": "public Boolean isRequired(){\n  return required;\n}\n", "nl": "Return whether this property is required.", "id": "30215"}
{"code": "@Override public String toString(){\n  return \"not (\" + exp + \")\";\n}\n", "nl": "Returns the string representing the object.", "id": "11368"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_nodegetnextsiblingnull.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "31508"}
{"code": "public static void fill(float[] array,int start,int end,float value){\n  Arrays.checkStartAndEnd(array.length,start,end);\n  for (int i=start; i < end; i++) {\n    array[i]=value;\n  }\n}\n", "nl": "Fills the specified range in the array with the specified element.", "id": "44099"}
{"code": "public com.sun.identity.saml2.jaxb.metadata.AssertionIDRequestServiceElement createAssertionIDRequestServiceElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.metadata.impl.AssertionIDRequestServiceElementImpl();\n}\n", "nl": "Create an instance of AssertionIDRequestServiceElement", "id": "37002"}
{"code": "private void incrementInDegree(){\n  ++inDegree;\n}\n", "nl": "Increments the in-degree of this node.", "id": "7049"}
{"code": "public void addEdge(String parentId,String childId,String successorId){\n  edgeIds.add(successorId);\n  this.addToParentChildMap(parentId,childId);\n}\n", "nl": "Adds an edge to this DAG.", "id": "38403"}
{"code": "public Object clone(){\n  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanOperationInfo.class.getName(),\"clone()\",\"Entry\");\n  }\n  return (new ModelMBeanOperationInfo(this));\n}\n", "nl": "Creates and returns a new ModelMBeanOperationInfo which is a duplicate of this ModelMBeanOperationInfo.", "id": "39456"}
{"code": "public com.sun.identity.wsfederation.jaxb.entityconfig.AttributeElement createAttributeElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.entityconfig.impl.AttributeElementImpl();\n}\n", "nl": "Create an instance of AttributeElement", "id": "6344"}
{"code": "public static String toASCII(String input,int flags){\n  return NativeIDN.toASCII(input,flags);\n}\n", "nl": "Transform a Unicode String to ASCII Compatible Encoding String according to the algorithm defined in <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>. <p>If the transformation fails (because the input is not a valid IDN), an exception will be thrown. <p>This method can handle either an individual label or an entire domain name. In the latter case, the separators are: U+002E (full stop), U+3002 (ideographic full stop), U+FF0E (fullwidth full stop), and U+FF61 (halfwidth ideographic full stop). All of these will become U+002E (full stop) in the result.", "id": "52862"}
{"code": "public static String rightPad(final String value,String pad,final int length){\n  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);\n  if (value.length() > length) {\n    return value;\n  }\n  return append(value,repeat(pad,length - value.length()));\n}\n", "nl": "Returns a new string of a given length such that the ending of the string is padded.", "id": "25401"}
{"code": "public boolean isModifyAcceptable(ManagementContext context,ManagedObject<?> managedObject,Collection<LocalizableMessage> unacceptableReasons) throws LdapException {\n  return true;\n}\n", "nl": "Determines whether the changes to an existing managed object which are about to be committed to the server configuration satisfies this constraint. <p> If the constraint is not satisfied, the implementation must return <code>false</code> and add a message describing why the constraint was not satisfied. <p> The default implementation is to return <code>true</code>.", "id": "22871"}
{"code": "protected FocusListener createFocusListener(){\n  return getHandler();\n}\n", "nl": "Creates a FocusListener for the JSplitPane UI.", "id": "49725"}
{"code": "private void pushRun(int runBase,int runLen){\n  this.runBase[stackSize]=runBase;\n  this.runLen[stackSize]=runLen;\n  stackSize++;\n}\n", "nl": "Pushes the specified run onto the pending-run stack.", "id": "30090"}
{"code": "public void invalidateSession(Object session,HttpServletRequest request,HttpServletResponse response) throws SessionException {\n  debug.message(\"FedletSessionProvider.invalidateSession called\");\n}\n", "nl": "May be used by both SP and IDP side to invalidate a session. In case of SLO with SOAP, the last two input parameters would have to be null", "id": "50570"}
{"code": "public static RequestSet parseXML(String xml){\n  RequestSetParser parser=new RequestSetParser(xml);\n  return parser.parseXML();\n}\n", "nl": "This method is used primarily at the server side to reconstruct a RequestSet object based on the XML document received from client. The DTD of this XML document is described above.", "id": "33204"}
{"code": "@Override public ConnectionEntryWriter writeComment(final CharSequence comment){\n  Reject.ifNull(comment);\n  return this;\n}\n", "nl": "Connection entry writers do not support comments, so the provided comment will be ignored.", "id": "19698"}
{"code": "public Iterator<E> iterator(){\n  return new Itr(toArray());\n}\n", "nl": "Returns an iterator over the elements in this queue. The iterator does not return the elements in any particular order. <p>The returned iterator is <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.", "id": "5759"}
{"code": "public boolean equals(Object obj){\n  if (!(obj instanceof AlphaComposite)) {\n    return false;\n  }\n  AlphaComposite ac=(AlphaComposite)obj;\n  if (rule != ac.rule) {\n    return false;\n  }\n  if (extraAlpha != ac.extraAlpha) {\n    return false;\n  }\n  return true;\n}\n", "nl": "Determines whether the specified object is equal to this <code>AlphaComposite</code>. <p> The result is <code>true</code> if and only if the argument is not <code>null</code> and is an <code>AlphaComposite</code> object that has the same compositing rule and alpha value as this object.", "id": "4467"}
{"code": "public final boolean isEnabled(AvroGenerator.Feature f){\n  return (_avroGeneratorFeatures & f.getMask()) != 0;\n}\n", "nl": "Check whether specified generator feature is enabled.", "id": "22510"}
{"code": "public boolean supportsPreStripping(){\n  return false;\n}\n", "nl": "Return true if the xsl:strip-space or xsl:preserve-space was processed during construction of the DTM document. <p>%REVEIW% Presumes a 1:1 mapping from DTM to Document, since we aren't saying which Document to query...?</p>", "id": "50981"}
{"code": "public byte[] encode(byte[] bytes){\n  return encodeQuotedPrintable(PRINTABLE_CHARS,bytes);\n}\n", "nl": "Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped. <p> This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in RFC 1521 and is suitable for encoding binary data and unformatted text. </p>", "id": "58316"}
{"code": "protected static boolean isWhitespace(int ch,boolean isWhitespace){\n  return ((isWhitespace && ch == 0) || ch == 9 || ch == 10 || ch == 12 || ch == 13 || ch == 32);\n}\n", "nl": "Checks whether a character is a whitespace. Currently checks on the following: '0', '9', '10', '12', '13', '32'.", "id": "6458"}
{"code": "@Override public String toString(){\n  return date.toString();\n}\n", "nl": "Generates a string representation of the date.", "id": "57133"}
{"code": "@Override public Iterator<E> iterator(){\n  return new PriorityIterator();\n}\n", "nl": "Gets the iterator of the priority queue, which will not return elements in any specified ordering.", "id": "38450"}
{"code": "public void message(String msg,Throwable t){\n  getDebugServiceInstance().message(msg,t);\n}\n", "nl": "<p> Prints debug and exception messages only when the debug state is either Debug.MESSAGE or Debug.ON. If the debug file is not accessible and debugging is enabled, the message along with a time stamp and thread info will be printed on <code>System.out</code>. </p> <p/> <p> This method creates the debug file if does not exist; otherwise it starts appending to the existing debug file. When invoked for the first time on this object, the method writes a line delimiter of '*'s. </p> <p/> <p> Note that the debug file will remain open until <code>destroy()</code> is invoked. To conserve file resources, you should invoke <code>destroy()</code> explicitly rather than wait for the garbage collector to clean up. </p> <p/> <p> <b>NOTE:</b> Debugging is an IO intensive operation and may hurt application performance when abused. Particularly, note that Java evaluates arguments to <code>message()</code> even when debugging is turned off. It is recommended that the debug state be checked by invoking <code>messageEnabled()</code> before invoking any <code>message()</code> methods to avoid unnecessary argument evaluation and to maximize application performance. </p>", "id": "21221"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.ps.AuthnResponseEnvelopeType createAuthnResponseEnvelopeType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnResponseEnvelopeTypeImpl();\n}\n", "nl": "Create an instance of AuthnResponseEnvelopeType", "id": "42667"}
{"code": "@SuppressWarnings(\"unchecked\") public static <T>T fromPem(String pem) throws Exception {\n  StringReader sr=new StringReader(pem);\n  PEMReader pw=new PEMReader(sr);\n  Object object=pw.readObject();\n  return (T)object;\n}\n", "nl": "Returns an object from a PEM String representation", "id": "15936"}
{"code": "public static boolean isMatchAllSocketFlagSet(final long socketIdentifier){\n  return extractPortNumber(socketIdentifier) == 0L;\n}\n", "nl": "Is this socketIdentifier a match for all ports on the encoded IP address.", "id": "52241"}
{"code": "public boolean equals(Object o){\n  boolean eq=false;\n  if (!(o instanceof IdSearchOpModifier)) {\n    eq=false;\n  }\n else {\n    IdSearchOpModifier soperation=(IdSearchOpModifier)o;\n    eq=(soperation.sOp == this.sOp);\n  }\n  return eq;\n}\n", "nl": "Returns true if the object being checked is the same as this current one.", "id": "49172"}
{"code": "public void handleButton2Request(RequestInvocationEvent event){\n  forwardToAuthServicesView(event);\n}\n", "nl": "Handles cancel request.", "id": "4159"}
{"code": "private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {\n  in.defaultReadObject();\n  reexport();\n}\n", "nl": "Re-export the remote object when it is deserialized.", "id": "27970"}
{"code": "public static String toString(URL url,Charset encoding) throws IOException {\n  InputStream inputStream=url.openStream();\n  try {\n    return toString(inputStream,encoding);\n  }\n  finally {\n    inputStream.close();\n  }\n}\n", "nl": "Gets the contents at the given URL.", "id": "42139"}
{"code": "public static boolean hasTeslaSupport(ICapabilityProvider provider,EnumFacing side){\n  return isTeslaHolder(provider,side) || isTeslaConsumer(provider,side) || isTeslaProducer(provider,side);\n}\n", "nl": "Checks if a capability provider has support for Tesla.", "id": "47728"}
{"code": "@Override public String toString(){\n  return getClass().getSimpleName();\n}\n", "nl": "String representation of this file comparator.", "id": "40468"}
{"code": "static Promise<String> blockingPromiseString(final Duration duration){\n  return new BlockingPromise<>(duration);\n}\n", "nl": "Returns a String promise Create a blocking promise. NOTE BLOCKING PROMISES ARE FOR LEGACY INTEGRATION AND TESTING ONLY!!! Added to make static imports possible.", "id": "36369"}
{"code": "private void initializeManagers(){\n  stream(D.getAll(MirrorAppScope.class,MirrorManager.class,null)).filter(null).forEach((Action1<MirrorManager>)null);\n  webServerRefresh();\n  mManagersInitialized=true;\n  tryToStart();\n}\n", "nl": "Start the MirrorManagers", "id": "19719"}
{"code": "@Override public com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(long fooId) throws com.liferay.portal.kernel.exception.PortalException {\n  return _fooLocalService.deleteFoo(fooId);\n}\n", "nl": "Deletes the foo with the primary key from the database. Also notifies the appropriate model listeners.", "id": "12307"}
{"code": "public static Builder create(final Context context){\n  if (SDK_INT >= ICE_CREAM_SANDWICH)   return new Builder(context,THEME_HOLO_LIGHT);\n else   return new Builder(context);\n}\n", "nl": "Create alert dialog builder", "id": "8820"}
{"code": "public boolean validate(String value){\n  if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\") || value.equalsIgnoreCase(\"yes\")|| value.equalsIgnoreCase(\"no\"))   return true;\n  return false;\n}\n", "nl": "Determines whether the specified string is a valid boolean value", "id": "26092"}
{"code": "public boolean isMultiSelectionEnabled(){\n  return multiSelectionEnabled;\n}\n", "nl": "Returns true if multiple files can be selected.", "id": "50168"}
{"code": "public static Long[] transformLongArray(long[] source){\n  Long[] destin=new Long[source.length];\n  for (int i=0; i < source.length; i++) {\n    destin[i]=source[i];\n  }\n  return destin;\n}\n", "nl": "convert long array to Long array", "id": "13579"}
{"code": "public int enumerate(ThreadGroup[] groups,boolean recurse){\n  return enumerateGeneric(groups,recurse,0,false);\n}\n", "nl": "Iterates over all thread groups in this group (and, optionally, its sub-groups) and stores the groups in the given array. Returns when the array is full or no more groups remain, whichever happens first. <p>Note that this method will silently ignore any thread groups that don't fit in the supplied array.", "id": "23591"}
{"code": "public static Border createRaisedSoftBevelBorder(){\n  if (sharedSoftRaisedBevel == null) {\n    sharedSoftRaisedBevel=new SoftBevelBorder(BevelBorder.RAISED);\n  }\n  return sharedSoftRaisedBevel;\n}\n", "nl": "Creates a beveled border with a raised edge and softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows. In a raised border, highlights are on top and shadows are underneath.", "id": "51472"}
{"code": "@Override public void flush() throws IOException {\n  boolean nonBlocking=checkNonBlockingWrite();\n  ob.flush();\n  if (nonBlocking) {\n    checkRegisterForWrite();\n  }\n}\n", "nl": "Will send the buffer to the client.", "id": "36540"}
{"code": "private static int priority(Tree tree){\n  String indexName=tree.getName().getIndexId();\n  if (indexName.endsWith(SuffixContainer.ID2ENTRY_INDEX_NAME)) {\n    return 1;\n  }\n else   if (indexName.endsWith(SuffixContainer.DN2ID_INDEX_NAME)) {\n    return 2;\n  }\n else {\n    return 3;\n  }\n}\n", "nl": "Calculate the relative priority of a tree for preloading.", "id": "3096"}
{"code": "final int compare(MarkData o1,MarkData o2){\n  if (o1.index < o2.index) {\n    return -1;\n  }\n else   if (o1.index > o2.index) {\n    return 1;\n  }\n else {\n    return 0;\n  }\n}\n", "nl": "Compares two marks.", "id": "51712"}
{"code": "public void adjustJulLevel(){\n  julToSlf4jManager.adjustJulLevel();\n}\n", "nl": "Update the current java.util.logging.Level. This level is used to filter logs from third party libraries which use j.u.l to our slf4j logger.", "id": "22500"}
{"code": "public List<Class<?>> parameterList(){\n  return Collections.unmodifiableList(Arrays.asList(ptypes.clone()));\n}\n", "nl": "Presents the parameter types as a list (a convenience method). The list will be immutable.", "id": "28751"}
{"code": "public static int readUint32AsInt(DataInput di) throws IOException {\n  final long l=readUint32(di);\n  if (l > Integer.MAX_VALUE) {\n    throw new IOException(\"uint32 value read overflows int\");\n  }\n  return (int)l;\n}\n", "nl": "Reads a 32-bit integer and returns it as a (signed) int. Does overflow checking since java can't handle unsigned numbers.", "id": "62"}
{"code": "public String toString(String enc) throws UnsupportedEncodingException {\n  return new String(buf,0,count,enc);\n}\n", "nl": "Converts the buffer's contents into a string, translating bytes into characters according to the specified character encoding.", "id": "38977"}
{"code": "public synchronized void writeExternal(ObjectOutput os) throws IOException {\n  if (mimeType != null) {\n    mimeType.setParameter(\"humanPresentableName\",humanPresentableName);\n    os.writeObject(mimeType);\n    mimeType.removeParameter(\"humanPresentableName\");\n  }\n else {\n    os.writeObject(null);\n  }\n  os.writeObject(representationClass);\n}\n", "nl": "Serializes this <code>DataFlavor</code>.", "id": "23961"}
{"code": "public final boolean isMimeTypeEqual(DataFlavor dataFlavor){\n  return isMimeTypeEqual(dataFlavor.mimeType);\n}\n", "nl": "Compares the <code>mimeType</code> of two <code>DataFlavor</code> objects. No parameters are considered.", "id": "40156"}
{"code": "public void reuse_entries_after_cutout(BrdTracep p_from_trace,BrdTracep p_start_piece,BrdTracep p_end_piece){\n  for (  AwtreeShapeSearch curr_tree : search_trees) {\n    curr_tree.reuse_entries_after_cutout(p_from_trace,p_start_piece,p_end_piece);\n  }\n}\n", "nl": "Trannsfers tree entries from p_from_trace to p_start and p_end_piece after a moddle piece was cut out. Special implementation for ShapeTraceEntries.fast_cutout_trace for performance reasoms.", "id": "46941"}
{"code": "private void validateClassName(String className){\n  String nvalue=className.trim();\n  if (!nvalue.matches(CLASS_RE)) {\n    throw PropertyException.illegalPropertyValueException(this,className);\n  }\n}\n", "nl": "Do some basic checks to make sure the string representation is valid.", "id": "58713"}
{"code": "public static TestSSLContext create(TestKeyStore client,TestKeyStore server){\n  String provider=StandardNames.JSSE_PROVIDER_NAME;\n  return create(client,server,provider,provider);\n}\n", "nl": "TestSSLContext creation method that allows separate creation of server key store", "id": "33451"}
{"code": "private void publishUpdateMessagesInOTest(String testName,boolean checkLastCookie,UpdateMsg... messages) throws Exception {\n  publishUpdateMessages(testName,server1,checkLastCookie,messages);\n}\n", "nl": "Shortcut method for default base DN and server id used in tests.", "id": "32524"}
{"code": "public boolean errorEnabled(){\n  return this.debugLevel.compareLevel(DebugLevel.ERROR) >= 0;\n}\n", "nl": "Returns <code>true</code> if debug error is enabled.", "id": "37442"}
{"code": "public void repaint(Rectangle r){\n  repaint(0,r.x,r.y,r.width,r.height);\n}\n", "nl": "Adds the specified region to the dirty region list if the component is showing.  The component will be repainted after all of the currently pending events have been dispatched.", "id": "33295"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodedocumenttypenodename.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "10438"}
{"code": "public JSONStringer key(String name) throws JSONException {\n  if (name == null) {\n    throw new JSONException(\"Names must be non-null\");\n  }\n  beforeKey();\n  string(name);\n  return this;\n}\n", "nl": "Encodes the key (property name) to this stringer.", "id": "47512"}
{"code": "public String encode(){\n  String retval;\n  if (requestLine != null) {\n    this.setRequestLineDefaults();\n    retval=requestLine.encode() + super.encode();\n  }\n else   if (this.isNullRequest()) {\n    retval=\"\\r\\n\\r\\n\";\n  }\n else {\n    retval=super.encode();\n  }\n  return retval;\n}\n", "nl": "Encode the SIP Request as a string.", "id": "9630"}
{"code": "public static Boolean isStreamingQuoteStoringRequired(){\n  return QUOTE_STREAMING_DB_STORE_REQD;\n}\n", "nl": "DB specific config", "id": "27792"}
{"code": "private static synchronized boolean isUpdatePending(){\n  return updatePending;\n}\n", "nl": "Returns true if a UI update is pending.", "id": "20865"}
{"code": "public static <T>ListIterator<T> emptyListIterator(){\n  return Collections.<T>emptyList().listIterator();\n}\n", "nl": "Returns a list iterator containing no elements.", "id": "27320"}
{"code": "static void clearImage(BufferedImage img){\n  Graphics2D g2=img.createGraphics();\n  g2.setComposite(AlphaComposite.Clear);\n  g2.fillRect(0,0,img.getWidth(),img.getHeight());\n  g2.dispose();\n}\n", "nl": "Clear a transparent image to 100% transparent", "id": "1583"}
{"code": "public int hashCode(){\n  return this.getClass().hashCode();\n}\n", "nl": "<p>Returns a hash code value for this <code>SslRMIClientSocketFactory</code>.</p>", "id": "38340"}
{"code": "public final void reset(byte[] encoded) throws IOException {\n  buffer=encoded;\n  next();\n}\n", "nl": "Resets this stream to initial state.", "id": "10091"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodechildnodesempty.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "4317"}
{"code": "public void notifyObservers(){\n  notifyObservers(null);\n}\n", "nl": "If this object has changed, as indicated by the <code>hasChanged</code> method, then notify all of its observers and then call the <code>clearChanged</code> method to indicate that this object has no longer changed. <p> Each observer has its <code>update</code> method called with two arguments: this observable object and <code>null</code>. In other words, this method is equivalent to: <blockquote><tt> notifyObservers(null)</tt></blockquote>", "id": "38063"}
{"code": "public void uninstallUI(JComponent a){\n  for (int i=0; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);\n  }\n}\n", "nl": "Invokes the <code>uninstallUI</code> method on each UI handled by this object.", "id": "36243"}
{"code": "public void insertRow(final int row,final Object[] rowData){\n  insertRow(row,convertToVector(rowData));\n}\n", "nl": "Inserts a row at <code>row</code> in the model. The new row will contain <code>null</code> values unless <code>rowData</code> is specified. Notification of the row being added will be generated.", "id": "26797"}
{"code": "@SuppressWarnings(\"unchecked\") @Override public PdfDictionary makeIndirect(PdfDocument document,PdfIndirectReference reference){\n  return (PdfDictionary)super.makeIndirect(document,reference);\n}\n", "nl": "Marks object to be saved as indirect.", "id": "10102"}
{"code": "public static RawHeaders fromBytes(InputStream in) throws IOException {\n  RawHeaders headers;\n  do {\n    headers=new RawHeaders();\n    headers.setStatusLine(Util.readAsciiLine(in));\n    readHeaders(in,headers);\n  }\n while (headers.getResponseCode() == HttpEngine.HTTP_CONTINUE);\n  return headers;\n}\n", "nl": "Parses bytes of a response header from an HTTP transport.", "id": "39434"}
{"code": "public final void removeField(String fieldName){\n  if (fieldName != null && fieldIndex(fieldName) >= 0)   unsupported();\n}\n", "nl": "Removes a field from the descriptor.", "id": "9711"}
{"code": "public void endElement(String uri,String localName,String qName) throws SAXException {\n}\n", "nl": "Receive notification of the end of an element. <p>By default, do nothing.  Application writers may override this method in a subclass to take specific actions at the end of each element (such as finalising a tree node or writing output to a file).</p>", "id": "29187"}
{"code": "public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {\n  return left.lessThanOrEqual(right) ? XBoolean.S_TRUE : XBoolean.S_FALSE;\n}\n", "nl": "Apply the operation to two operands, and return the result.", "id": "41339"}
{"code": "@Override public Object clone(){\n  PrivilegeCondition theClone=null;\n  try {\n    theClone=(PrivilegeCondition)super.clone();\n  }\n catch (  CloneNotSupportedException e) {\n    throw new InternalError();\n  }\n  theClone.state=state;\n  return theClone;\n}\n", "nl": "Returns a clone of this object.", "id": "16674"}
{"code": "public static CRAMMD5SASLBindRequest copyOfCRAMMD5SASLBindRequest(final CRAMMD5SASLBindRequest request){\n  return new CRAMMD5SASLBindRequestImpl(request);\n}\n", "nl": "Creates a new CRAM MD5 SASL bind request that is an exact copy of the provided request.", "id": "8779"}
{"code": "static String pathToCookiePath(String path){\n  if (path == null) {\n    return \"/\";\n  }\n  int lastSlash=path.lastIndexOf('/');\n  return path.substring(0,lastSlash + 1);\n}\n", "nl": "Returns a cookie-safe path by truncating everything after the last \"/\". When request path like \"/foo/bar.html\" yields a cookie, that cookie's default path is \"/foo/\".", "id": "26076"}
{"code": "static MethodHandle bindCaller(MethodHandle mh,Class<?> hostClass){\n  return BindCaller.bindCaller(mh,hostClass);\n}\n", "nl": "Create an alias for the method handle which, when called, appears to be called from the same class loader and protection domain as hostClass. This is an expensive no-op unless the method which is called is sensitive to its caller.  A small number of system methods are in this category, including Class.forName and Method.invoke.", "id": "48682"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlsig.DSAKeyValueElement createDSAKeyValueElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.DSAKeyValueElementImpl();\n}\n", "nl": "Create an instance of DSAKeyValueElement", "id": "33111"}
{"code": "@Advice.OnMethodExit public static void exit(@Advice.Enter long startTime,@Advice.Argument(0) Statement statement,@Advice.Return ResultSetFuture result){\n  ConnectorImpl.executeStatementWrapper().processStatement(statement,startTime,result);\n}\n", "nl": "Code executed after the intercepted method.", "id": "39399"}
{"code": "public void deleteUsers(Set users) throws AMException, SSOException {\n  Iterator iter=users.iterator();\n  while (iter.hasNext()) {\n    String userDN=(String)iter.next();\n    AMUser user=new AMUserImpl(super.token,userDN);\n    user.delete();\n  }\n}\n", "nl": "Removes users from the organization.", "id": "11217"}
{"code": "static public void assertEquals(double expected,double actual,double delta){\n  assertEquals(null,expected,actual,delta);\n}\n", "nl": "Asserts that two doubles are equal concerning a delta. If the expected value is infinity then the delta value is ignored.", "id": "34155"}
{"code": "public com.sun.identity.federation.jaxb.entityconfig.AttributeType createAttributeType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.federation.jaxb.entityconfig.impl.AttributeTypeImpl();\n}\n", "nl": "Create an instance of AttributeType", "id": "28641"}
{"code": "public static void removeAuthContext(SessionID sid){\n  com.iplanet.dpro.session.service.InternalSession is=AuthD.getSession(sid);\n  if (is != null) {\n    is.clearAuthContext();\n  }\n}\n", "nl": "Removes the AuthContextLocal object in the Session object identified by the SessionID object parameter 'sid'.", "id": "16518"}
{"code": "@Override public int hashCode(){\n  if (location != null)   return location.hashCode();\n else   return 0;\n}\n", "nl": "Returns the hash code value for this object.", "id": "58114"}
{"code": "@AfterClass public void entryCacheTestFini() throws Exception {\n  super.cache.finalizeEntryCache();\n}\n", "nl": "Finalize the entry cache test.", "id": "584"}
{"code": "public void iterateDeclaredPrefixes(PrefixCallback callback) throws SAXException {\n  for (Enumeration e=nss.getDeclaredPrefixes(); e.hasMoreElements(); ) {\n    String p=(String)e.nextElement();\n    String uri=nss.getURI(p);\n    callback.onPrefixMapping(p,uri);\n  }\n}\n", "nl": "Iterates all newly declared namespace prefixes for this element.", "id": "18566"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlsig.ObjectType createObjectType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.ObjectTypeImpl();\n}\n", "nl": "Create an instance of ObjectType", "id": "23255"}
{"code": "private void detach(){\n  if (prevTakeIndex >= 0) {\n    prevTakeIndex=DETACHED;\n    itrs.doSomeSweeping(true);\n  }\n}\n", "nl": "Called when itrs should stop tracking this iterator, either because there are no more indices to update (cursor < 0 && nextIndex < 0 && lastRet < 0) or as a special exception, when lastRet >= 0, because hasNext() is about to return false for the first time.  Call only from iterating thread.", "id": "41399"}
{"code": "public boolean shutdownRequested(){\n  return shutdownRequested;\n}\n", "nl": "Indicates whether this work queue has received a request to shut down.", "id": "39494"}
{"code": "private void writeObject(ObjectOutputStream s) throws IOException {\n  s.defaultWriteObject();\n  if (getUIClassID().equals(uiClassID)) {\n    byte count=JComponent.getWriteObjCounter(this);\n    JComponent.setWriteObjCounter(this,--count);\n    if (count == 0 && ui != null) {\n      ui.installUI(this);\n    }\n  }\n}\n", "nl": "See <code>readObject</code> and <code>writeObject</code> in <code>JComponent</code> for more information about serialization in Swing.", "id": "34936"}
{"code": "private Object readResolve(){\n  return (list instanceof RandomAccess ? new UnmodifiableRandomAccessList<>(list) : this);\n}\n", "nl": "UnmodifiableRandomAccessList instances are serialized as UnmodifiableList instances to allow them to be deserialized in pre-1.4 JREs (which do not have UnmodifiableRandomAccessList). This method inverts the transformation.  As a beneficial side-effect, it also grafts the RandomAccess marker onto UnmodifiableList instances that were serialized in pre-1.4 JREs. Note: Unfortunately, UnmodifiableRandomAccessList instances serialized in 1.4.1 and deserialized in 1.4 will become UnmodifiableList instances, as this method was missing in 1.4.", "id": "32664"}
{"code": "public void unread(char cbuf[]) throws IOException {\n  unread(cbuf,0,cbuf.length);\n}\n", "nl": "Pushes back an array of characters by copying it to the front of the pushback buffer.  After this method returns, the next character to be read will have the value <code>cbuf[0]</code>, the character after that will have the value <code>cbuf[1]</code>, and so forth.", "id": "15178"}
{"code": "public boolean containsKey(Class<?> category){\n  return category != null && AttributeSetUtilities.verifyAttributeCategory(category,Attribute.class) != null && attrMap.get(category) != null;\n}\n", "nl": "Returns <tt>true</tt> if this attribute set contains an attribute for the specified category.", "id": "14522"}
{"code": "public static boolean isNullOrNil(String str){\n  return str == null || \"\".equals(str);\n}\n", "nl": "To show whether the String is null or is an empty String", "id": "52955"}
{"code": "public void endDocument() throws SAXException {\n  if (contentHandler != null) {\n    contentHandler.endDocument();\n  }\n}\n", "nl": "Adapter implementation method; do not call. Adapt a SAX1 end document event.", "id": "41309"}
{"code": "public static Event35Log.Builder newBuilder(){\n  return new Event35Log.Builder();\n}\n", "nl": "Creates a new EventLog RecordBuilder", "id": "45716"}
{"code": "@Override public void onSupportActionModeFinished(@NonNull final ActionMode mode){\n  delegate.onSupportActionModeFinished(mode);\n}\n", "nl": "Notifies the activity that a support action mode has finished. Activity subclasses overriding this method should call the superclass implementation.", "id": "36766"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(documentgetrootnode.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "58237"}
{"code": "public void fixupVariables(java.util.Vector vars,int globalsSize){\n  m_left.fixupVariables(vars,globalsSize);\n  m_right.fixupVariables(vars,globalsSize);\n}\n", "nl": "This function is used to fixup variables from QNames to stack frame  indexes at stylesheet build time.", "id": "57122"}
{"code": "public static MBeanServer newMBeanServer(){\n  return newMBeanServer(null);\n}\n", "nl": "<p>Return a new object implementing the MBeanServer interface with a standard default domain name, without keeping an internal reference to this new object.  The default domain name is used as the domain part in the ObjectName of MBeans when the domain is specified by the user is null.</p> <p>The standard default domain name is <code>DefaultDomain</code>.</p> <p>No reference is kept. <CODE>findMBeanServer</CODE> will not be able to return a reference to this MBeanServer object, but the garbage collector will be able to remove the MBeanServer object when it is no longer referenced.</p> <p>This method is equivalent to <code>newMBeanServer(null)</code>.</p>", "id": "23950"}
{"code": "public AMAccessAuditEventBuilder requestDetail(JsonValue detail){\n  return addDetail(detail,REQUEST);\n}\n", "nl": "Adds a JSON object of detail for the request.", "id": "46319"}
{"code": "@Provides @PerActivity Activity provideActivity(){\n  return this.activity;\n}\n", "nl": "Expose the activity to dependents in the graph.", "id": "51115"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignatureMethodType createSignatureMethodType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureMethodTypeImpl();\n}\n", "nl": "Create an instance of SignatureMethodType", "id": "32684"}
{"code": "public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {\n  ByteArrayOutputStream output=new ByteArrayOutputStream();\n  copy(input,output,encoding);\n  return output.toByteArray();\n}\n", "nl": "Get the contents of a <code>Reader</code> as a <code>byte[]</code> using the specified character encoding. <p> This method buffers the input internally, so there is no need to use a <code>BufferedReader</code>.", "id": "22176"}
{"code": "private boolean isShuttingDown(){\n  return stopRequested;\n}\n", "nl": "Used by the background thread to determine if it should exit.", "id": "42314"}
{"code": "static int toUpperCaseEx(int codePoint){\n  assert isValidCodePoint(codePoint);\n  return CharacterData.of(codePoint).toUpperCaseEx(codePoint);\n}\n", "nl": "Converts the character (Unicode code point) argument to uppercase using information from the UnicodeData file. <p>", "id": "40227"}
{"code": "@Override protected SmileParser _createParser(InputStream in,IOContext ctxt) throws IOException {\n  SmileParserBootstrapper bs=new SmileParserBootstrapper(ctxt,in);\n  return bs.constructParser(_factoryFeatures,_parserFeatures,_smileParserFeatures,_objectCodec,_byteSymbolCanonicalizer);\n}\n", "nl": "Overridable factory method that actually instantiates desired parser.", "id": "2864"}
{"code": "public long longValue(){\n  return longValue;\n}\n", "nl": "The number's long value.", "id": "48538"}
{"code": "private void invokePostResponsePlugins(boolean workflowExecuted){\n  if (workflowExecuted) {\n    List<LocalBackendDeleteOperation> localOperations=(List)getAttachment(Operation.LOCALBACKENDOPERATIONS);\n    if (localOperations != null) {\n      for (      LocalBackendDeleteOperation localOperation : localOperations) {\n        getPluginConfigManager().invokePostResponseDeletePlugins(localOperation);\n      }\n    }\n  }\n else {\n    getPluginConfigManager().invokePostResponseDeletePlugins(this);\n  }\n}\n", "nl": "Invokes the post response plugins. If a workflow has been executed then invoke the post response plugins provided by the workflow elements of the workflow, otherwise invoke the post response plugins that have been registered with the current operation.", "id": "3809"}
{"code": "public void loadArg(final int arg){\n  loadInsn(argumentTypes[arg],getArgIndex(arg));\n}\n", "nl": "Generates the instruction to load the given method argument on the stack.", "id": "45240"}
{"code": "public void invoke(String invokeMethod,Marshallable param,ClientCallback clientCallback){\n  TransactInfo transactInfo=TransactInfo.createDirectInvoke(invokeMethod);\n  mClientProxy.transact(transactInfo,param,clientCallback);\n}\n", "nl": "invoke js_server method", "id": "44056"}
{"code": "public static byte[] encodeBase64URLSafe(final byte[] binaryData){\n  return encodeBase64(binaryData,false,true);\n}\n", "nl": "Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The url-safe variation emits - and _ instead of + and / characters. <b>Note: no padding is added.</b>", "id": "9410"}
{"code": "public String toStringImpl(){\n  return str;\n}\n", "nl": "Used by super class to log the attribute's contents when packet logging is enabled.", "id": "52058"}
{"code": "void append(final Object o){\n  templateValue.append(o);\n}\n", "nl": "Appends the string representation of the provided object to this template value.", "id": "39963"}
{"code": "@Override public HijrahDate date(int prolepticYear,int month,int dayOfMonth){\n  return HijrahDate.of(this,prolepticYear,month,dayOfMonth);\n}\n", "nl": "Obtains a local date in Hijrah calendar system from the proleptic-year, month-of-year and day-of-month fields.", "id": "19127"}
{"code": "private boolean checkSecond(final byte[] msg){\n  boolean result=true;\n  for (int i=1; i < 9; i++) {\n    if (msg[i] == 0x00) {\n      result=false;\n    }\n  }\n  return result;\n}\n", "nl": "Returns true if and only if the message contains no 0x00 byte in the first 8 bytes of the decrypted text", "id": "9828"}
{"code": "public List<String> metricsPatterns(){\n  return values.metricsPatterns;\n}\n", "nl": "Metrics patterns for gathering measurements.", "id": "45578"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(elementgetelementsbytagnameaccessnodelist.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "6145"}
{"code": "public void addMethod(MappedMember mm){\n  methods.add(mm);\n}\n", "nl": "Add a method to the class. Returns the method's index.", "id": "14416"}
{"code": "public void rejectedExecution(Runnable r,ThreadPoolExecutor e){\n  throw new RejectedExecutionException(\"Task \" + r.toString() + \" rejected from \"+ e.toString());\n}\n", "nl": "Always throws RejectedExecutionException.", "id": "44576"}
{"code": "public static ContainerListener remove(ContainerListener l,ContainerListener oldl){\n  return (ContainerListener)removeInternal(l,oldl);\n}\n", "nl": "Removes the old container-listener from container-listener-l and returns the resulting multicast listener.", "id": "24731"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlsig.RSAKeyValueType createRSAKeyValueType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.RSAKeyValueTypeImpl();\n}\n", "nl": "Create an instance of RSAKeyValueType", "id": "38079"}
{"code": "public static PersistentSearchRequestControl newControl(final boolean isCritical,final boolean changesOnly,final boolean returnECs,final PersistentSearchChangeType... changeTypes){\n  Reject.ifNull((Object)changeTypes);\n  return newControl(isCritical,changesOnly,returnECs,Arrays.asList(changeTypes));\n}\n", "nl": "Creates a new persistent search request control.", "id": "22346"}
{"code": "public static void main(String[] args){\n  if (args.length != 1) {\n    System.out.println(\"usage : java SAMLSiteID <host_name>\");\n    return;\n  }\n  System.out.println(generateSourceID(args[0]));\n}\n", "nl": "Obtains site ID based on the host name. This method will print out site ID to the standard output.", "id": "56349"}
{"code": "private RunnableScheduledFuture<?> finishPoll(RunnableScheduledFuture<?> f){\n  int s=--size;\n  RunnableScheduledFuture<?> x=queue[s];\n  queue[s]=null;\n  if (s != 0)   siftDown(0,x);\n  setIndex(f,-1);\n  return f;\n}\n", "nl": "Performs common bookkeeping for poll and take: Replaces first element with last and sifts it down.  Call only when holding lock.", "id": "35564"}
{"code": "boolean matches(JComponent c){\n  return matches(c,parts.length - 1);\n}\n", "nl": "This LazyStyle is a match for the given component if, and only if, for each part of the prefix the component hierarchy matches exactly. That is, if given \"a\":something:\"b\", then: c.getName() must equals \"b\" c.getParent() can be anything c.getParent().getParent().getName() must equal \"a\".", "id": "10789"}
{"code": "@Override public String toString(){\n  return temporal.toString();\n}\n", "nl": "Returns a string version of the context for debugging.", "id": "30058"}
{"code": "protected void installKeyboardActions(){\n  InputMap km=getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);\n  SwingUtilities.replaceUIInputMap(splitPane,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,km);\n  LazyActionMap.installLazyActionMap(splitPane,BasicSplitPaneUI.class,\"SplitPane.actionMap\");\n}\n", "nl": "Installs the keyboard actions for the UI.", "id": "25366"}
{"code": "static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {\n  return createObject(factoryId,null,fallbackClassName);\n}\n", "nl": "Finds the implementation Class object in the specified order.  The specified order is the following: <ol> <li>query the system property using <code>System.getProperty</code> <li>read <code>META-INF/services/<i>factoryId</i></code> file <li>use fallback classname </ol>", "id": "89"}
{"code": "@Override public String toString(){\n  return toString(false,LINE_SEPARATOR);\n}\n", "nl": "Returns the String representation of this command builder (i.e. what we want to show to the user).", "id": "52511"}
{"code": "private static void updateWindowUI(Window window){\n  SwingUtilities.updateComponentTreeUI(window);\n  Window ownedWins[]=window.getOwnedWindows();\n  for (  Window w : ownedWins) {\n    updateWindowUI(w);\n  }\n}\n", "nl": "Updates the UI of the passed in window and all its children.", "id": "51470"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.assertion.StatementElement createStatementElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.StatementElementImpl();\n}\n", "nl": "Create an instance of StatementElement", "id": "48461"}
{"code": "private static boolean compareValue(Object first,Object second){\n  if (first.equals(second)) {\n    return true;\n  }\n  if (first.toString().equals(second.toString())) {\n    return true;\n  }\n  return false;\n}\n", "nl": "This method is needed because the TestNG assertEquals method didn't seem to work for the enum TokenType.", "id": "47113"}
{"code": "public void config(Supplier<String> msgSupplier){\n  log(Level.CONFIG,msgSupplier);\n}\n", "nl": "Log a CONFIG message, which is only to be constructed if the logging level is such that the message will actually be logged. <p> If the logger is currently enabled for the CONFIG message level then the message is constructed by invoking the provided supplier function and forwarded to all the registered output Handler objects. <p>", "id": "45981"}
{"code": "public double num() throws javax.xml.transform.TransformerException {\n  XMLString s=xstr();\n  return s.toDouble();\n}\n", "nl": "Cast result object to a number.", "id": "10259"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_documentcreatecomment.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "15159"}
{"code": "protected boolean isFixedLayout(){\n  Object positioning=this.<Object>getProperty(Property.POSITION);\n  return Integer.valueOf(LayoutPosition.FIXED).equals(positioning);\n}\n", "nl": "Indicates whether the renderer's position is fixed or not.", "id": "39896"}
{"code": "@Override public Collection<Object> values(){\n  checkInitialized();\n  return Collections.unmodifiableCollection(super.values());\n}\n", "nl": "Returns an unmodifiable Collection view of the property values contained in this provider.", "id": "39601"}
{"code": "public Cell add(Image element){\n  childElements.add(element);\n  return this;\n}\n", "nl": "Adds an image to the cell's contents.", "id": "56285"}
{"code": "public void prepend(NSString s){\n  prepend(s.getContent());\n}\n", "nl": "Prepends a string to this string.", "id": "43645"}
{"code": "public void jspError(Mark where,Exception e,String errCode,String... args) throws JasperException {\n  dispatch(where,errCode,args,e);\n}\n", "nl": "Dispatches the given JSP parse error to the configured error handler. The given error code is localized. If it is not found in the resource bundle for localized error messages, it is used as the error message.", "id": "21312"}
{"code": "@Override public Name parse(String name) throws NamingException {\n  return new CompositeName(name);\n}\n", "nl": "Parses a name into its components.", "id": "9906"}
{"code": "public void new_line() throws IOException {\n  write(\"\\n\");\n  for (int i=0; i < current_indent_level; ++i)   write(INDENT_STRING);\n}\n", "nl": "Starts a new line inside a scope.", "id": "9"}
{"code": "public boolean isRoot(){\n  return getParent() == null;\n}\n", "nl": "Returns true if this node is the root of the tree.  The root is the only node in the tree with a null parent; every tree has exactly one root.", "id": "30006"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(domimplementationfeaturenull.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "54839"}
{"code": "boolean isNewRequest(){\n  return newRequest;\n}\n", "nl": "Returns the request type.", "id": "26679"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(namednodemapremovenameditem.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "21067"}
{"code": "protected boolean canEditImmediately(EventObject event){\n  if ((event instanceof MouseEvent) && SwingUtilities.isLeftMouseButton((MouseEvent)event)) {\n    MouseEvent me=(MouseEvent)event;\n    return ((me.getClickCount() > 2) && inHitRegion(me.getX(),me.getY()));\n  }\n  return (event == null);\n}\n", "nl": "Returns true if <code>event</code> is <code>null</code>, or it is a <code>MouseEvent</code> with a click count &gt; 2 and <code>inHitRegion</code> returns true.", "id": "34277"}
{"code": "public static Foo fetchByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator){\n  return getPersistence().fetchByField2_Last(field2,orderByComparator);\n}\n", "nl": "Returns the last foo in the ordered set where field2 = &#63;.", "id": "19349"}
{"code": "@Override synchronized boolean isComparableTypeValid(ObjectName object,String attribute,Comparable<?> value){\n  if (value instanceof String) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Check that the type of the supplied observed attribute value is one of the value types supported by this monitor.", "id": "47657"}
{"code": "public void process(String name,Vector elems,Hashtable atts,String pcdata){\n  str=pcdata;\n}\n", "nl": "The method that implements the ParseOutput interface. This is called by the SAX parser.", "id": "14870"}
{"code": "public void deleteAssignableDynamicGroups(Set assignableDynamicGroupDNs) throws AMException, SSOException {\n  Iterator iter=assignableDynamicGroupDNs.iterator();\n  while (iter.hasNext()) {\n    String assignableDynamicGroupDN=(String)iter.next();\n    AMAssignableDynamicGroup assignableDynamicGroup=new AMAssignableDynamicGroupImpl(super.token,assignableDynamicGroupDN);\n    assignableDynamicGroup.delete();\n  }\n}\n", "nl": "Deletes assignable dynamic groups.", "id": "51294"}
{"code": "private void createDeleteFielsNode(Element rootElement){\n  Element element=creator.getDocument().createElement(\"DeleteFiles\");\n  element.setAttribute(\"deleted\",String.valueOf(this.filesDeleted));\n  rootElement.appendChild(element);\n}\n", "nl": "Adds delete file node in XML.", "id": "31208"}
{"code": "public Object clone(){\n  try {\n    return super.clone();\n  }\n catch (  CloneNotSupportedException e) {\n    throw new InternalError(e);\n  }\n}\n", "nl": "Clones this object.", "id": "28506"}
{"code": "public static Paint newGuidelinePaint(){\n  final Paint paint=new Paint();\n  paint.setColor(Color.parseColor(SEMI_TRANSPARENT));\n  paint.setStrokeWidth(DEFAULT_GUIDELINE_THICKNESS_PX);\n  return paint;\n}\n", "nl": "Creates the Paint object for drawing the crop window guidelines.", "id": "9516"}
{"code": "public boolean hasTrail(){\n  return trail;\n}\n", "nl": "Get whether the firework effect has a trail.", "id": "34163"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsfederation.ClientPseudonymType createClientPseudonymType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.ClientPseudonymTypeImpl();\n}\n", "nl": "Create an instance of ClientPseudonymType", "id": "42180"}
{"code": "@Override public void notationDecl(String name,String publicId,String systemId){\n  if (saxLog.isDebugEnabled()) {\n    saxLog.debug(\"notationDecl(\" + name + \",\"+ publicId+ \",\"+ systemId+ \")\");\n  }\n}\n", "nl": "Receive notification of a notation declaration event.", "id": "56645"}
{"code": "@Override public synchronized void write(int b){\n  int inBufferPos=count - filledBufferSum;\n  if (inBufferPos == currentBuffer.length) {\n    needNewBuffer(count + 1);\n    inBufferPos=0;\n  }\n  currentBuffer[inBufferPos]=(byte)b;\n  count++;\n}\n", "nl": "Write a byte to byte array.", "id": "49942"}
{"code": "public boolean disableAdminDataSynchronization(){\n  return isPropertyTrue(PROPERTY_DISABLE_ADMIN_DATA_SYNCHRONIZATION);\n}\n", "nl": "Indicates whether the Directory Server startup process should skip the synchronization between admin data and the configuration.", "id": "11930"}
{"code": "public boolean isVisible(final int col){\n  return getTableColumn(col).isVisible();\n}\n", "nl": "Checks if is visible.", "id": "452"}
{"code": "public void computeVisibleRect(Rectangle visibleRect){\n  computeVisibleRect(this,visibleRect);\n}\n", "nl": "Returns the <code>Component</code>'s \"visible rect rectangle\" -  the intersection of the visible rectangles for this component and all of its ancestors.  The return value is stored in <code>visibleRect</code>.", "id": "7164"}
{"code": "public void moveToBack(){\n  if (isIcon()) {\n    if (getDesktopIcon().getParent() instanceof JLayeredPane) {\n      ((JLayeredPane)getDesktopIcon().getParent()).moveToBack(getDesktopIcon());\n    }\n  }\n else   if (getParent() instanceof JLayeredPane) {\n    ((JLayeredPane)getParent()).moveToBack(this);\n  }\n}\n", "nl": "Convenience method that moves this component to position -1 if its parent is a <code>JLayeredPane</code>.", "id": "38660"}
{"code": "public boolean isIssued(){\n  String issued=getStringProperty(ISSUED);\n  return issued != null && Boolean.parseBoolean(issued);\n}\n", "nl": "Determines whether the authorization code has been issued.", "id": "44121"}
{"code": "public static Object evaluate(String value,Bindings bindings) throws ExpressionException {\n  return Expression.valueOf(value,Object.class).eval(bindings);\n}\n", "nl": "Evaluate a String.", "id": "17072"}
{"code": "public boolean isIDPRole(){\n  return isRoleIDP;\n}\n", "nl": "Returns the role of the session partner.", "id": "58175"}
{"code": "public void logDeleteRequest(DeleteOperation deleteOperation){\n}\n", "nl": "Writes a message to the access logger with information about the delete request associated with the provided delete operation. <p> The default implementation is to not log anything.", "id": "22797"}
{"code": "public Object clone(){\n  Object theClone=null;\n  try {\n    theClone=super.clone();\n  }\n catch (  CloneNotSupportedException cne) {\n  }\n  return theClone;\n}\n", "nl": "Creates and returns a copy of this object.", "id": "52231"}
{"code": "public boolean isExpanded(TreePath path){\n  if (path != null) {\n    FHTreeStateNode lastNode=getNodeForPath(path,true,false);\n    return (lastNode != null && lastNode.isExpanded());\n  }\n  return false;\n}\n", "nl": "Returns true if the value identified by row is currently expanded.", "id": "7952"}
{"code": "public static Object instantiate(ClassLoader cls,String beanName,BeanContext beanContext) throws IOException, ClassNotFoundException {\n  return Beans.instantiate(cls,beanName,beanContext,null);\n}\n", "nl": "<p> Instantiate a JavaBean. </p>", "id": "53402"}
{"code": "public void postProcessRemoveUser(SSOToken token,String entryDN,Set members,int objectType) throws AMPostCallBackException {\n}\n", "nl": "Method which gets invoked after users are removed from a role/group.", "id": "17134"}
{"code": "public boolean equals(XMLString obj2){\n  if (obj2 != null) {\n    if (!obj2.hasString()) {\n      return obj2.equals(str());\n    }\n else {\n      return str().equals(obj2.toString());\n    }\n  }\n  return false;\n}\n", "nl": "Compares this string to the specified object. The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>String</code> object that represents the same sequence of characters as this object.", "id": "21694"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsfederation.FederationMetadataHandlerType createFederationMetadataHandlerType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.FederationMetadataHandlerTypeImpl();\n}\n", "nl": "Create an instance of FederationMetadataHandlerType", "id": "54864"}
{"code": "public String toString(){\n  return encode();\n}\n", "nl": "Return a string representation.", "id": "5708"}
{"code": "private void repaintTab(int index){\n  if (!isRunsDirty && index >= 0 && index < tabPane.getTabCount()) {\n    tabPane.repaint(getTabBounds(tabPane,index));\n  }\n}\n", "nl": "Repaints the specified tab.", "id": "50934"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(hc_elementgetelementempty.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "50681"}
{"code": "@Override public void stop() throws LifecycleException {\n  state=LifecycleState.STOPPING_PREP;\n  clearReferences();\n  state=LifecycleState.STOPPING;\n  resourceEntries.clear();\n  jarModificationTimes.clear();\n  resources=null;\n  permissionList.clear();\n  loaderPC.clear();\n  state=LifecycleState.STOPPED;\n}\n", "nl": "Stop the class loader.", "id": "32092"}
{"code": "@Override public boolean isRespectWidth(){\n  return true;\n}\n", "nl": "Returns true.", "id": "24506"}
{"code": "@Override public void customize(ConfigurableEmbeddedServletContainer container){\n  MimeMappings mappings=new MimeMappings(MimeMappings.DEFAULT);\n  mappings.add(\"html\",\"text/html;charset=utf-8\");\n  mappings.add(\"json\",\"text/html;charset=utf-8\");\n  container.setMimeMappings(mappings);\n}\n", "nl": "Customize the Servlet engine: Mime types, the document root, the cache.", "id": "25872"}
{"code": "public boolean isMutable(){\n  return mutable;\n}\n", "nl": "Returns the mutability of the object.", "id": "44363"}
{"code": "static Promise<Integer> blockingPromiseInt(){\n  return new BlockingPromise<>();\n}\n", "nl": "Returns a Integer promise Added to make static imports possible. Create a blocking promise. NOTE BLOCKING PROMISES ARE FOR LEGACY INTEGRATION AND TESTING ONLY!!!", "id": "34867"}
{"code": "private boolean continueLine(String line){\n  int slashCount=0;\n  int index=line.length() - 1;\n  while ((index >= 0) && (line.charAt(index--) == '\\\\')) {\n    slashCount++;\n  }\n  return (slashCount % 2 == 1);\n}\n", "nl": "Copied from java.util.Properties.", "id": "16824"}
{"code": "public SAML2ConfigBuilder customAttributeMapperClassName(String customAttributeMapperClassName){\n  this.customAttributeMapperClassName=customAttributeMapperClassName;\n  return this;\n}\n", "nl": "Sets the CustomAttributeMapper classname on the SAML2ConfigBuilder.", "id": "13259"}
{"code": "public boolean empty(){\n  return m_firstFree == 0;\n}\n", "nl": "Tests if this stack is empty.", "id": "8198"}
{"code": "public void remove(){\n  throw new UnsupportedOperationException();\n}\n", "nl": "The remove operation is not supported by this implementation of <code>Iterator</code>.", "id": "19588"}
{"code": "public boolean equals(Object obj){\n  if (this == obj) {\n    return true;\n  }\n  if (obj instanceof ECFieldFp) {\n    return (this.p.equals(((ECFieldFp)obj).p));\n  }\n  return false;\n}\n", "nl": "Returns whether the specified object is equal to this finite field.", "id": "17095"}
{"code": "public LogfileScope start_read_scope(){\n  Object curr_ob=next_token();\n  if (curr_ob == null) {\n    return null;\n  }\n  if (!(curr_ob instanceof String)) {\n    System.out.println(\"Logfile.start_read_scope: String expected\");\n    pending_token=curr_ob;\n    return null;\n  }\n  LogfileScope result=LogfileScope.get_scope((String)curr_ob);\n  return result;\n}\n", "nl": "Reads the next scope iidentifier from the logfile. Returns null if no more item scope was found.", "id": "32287"}
{"code": "public void entityReference(String name) throws org.xml.sax.SAXException {\n  flushPending();\n  startEntity(name);\n  endEntity(name);\n  if (m_tracer != null)   fireEntityReference(name);\n}\n", "nl": "Entity reference event.", "id": "7844"}
{"code": "public int width(){\n  return mColumns;\n}\n", "nl": "Returns the width of the PackedIntVector.  This number is set at construction and will not change.", "id": "4021"}
{"code": "public void insertElementAt(E element,int index){\n  delegate.insertElementAt(element,index);\n  fireIntervalAdded(this,index,index);\n}\n", "nl": "Inserts the specified element as a component in this list at the specified <code>index</code>. <p> Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is invalid. <blockquote> <b>Note:</b> Although this method is not deprecated, the preferred method to use is <code>add(int,Object)</code>, which implements the <code>List</code> interface defined in the 1.2 Collections framework. </blockquote>", "id": "15029"}
{"code": "private void writeObject(ObjectOutputStream s) throws IOException {\n  s.defaultWriteObject();\n  if (getUIClassID().equals(uiClassID)) {\n    byte count=JComponent.getWriteObjCounter(this);\n    JComponent.setWriteObjCounter(this,--count);\n    if (count == 0 && ui != null) {\n      ui.installUI(this);\n    }\n  }\n}\n", "nl": "See <code>readObject</code> and <code>writeObject</code> in <code>JComponent</code> for more information about serialization in Swing.", "id": "46647"}
{"code": "@Override public void onChanged(T sender){\n  this.adapter.notifyDataSetChanged();\n}\n", "nl": "Called whenever a change of unknown type has occurred, such as the entire list being set to new values.", "id": "42589"}
{"code": "public void addFragment(BaseIntroFragment fragment,int backgroundColor){\n  mBackgroundColors.put(mFragments.size(),backgroundColor);\n  mFragments.add(fragment);\n}\n", "nl": "Add a Fragment to the PagerAdapter.", "id": "32785"}
{"code": "public static ComponentUI createUI(JComponent c){\n  return new SynthSpinnerUI();\n}\n", "nl": "Returns a new instance of SynthSpinnerUI.", "id": "53027"}
{"code": "public void handleTblServerButtonAddRequest(RequestInvocationEvent event){\n  ServerAddViewBean vb=(ServerAddViewBean)getViewBean(ServerAddViewBean.class);\n  unlockPageTrail();\n  passPgSessionMap(vb);\n  vb.forwardTo(getRequestContext());\n}\n", "nl": "Forwards request to server creation view bean.", "id": "35261"}
{"code": "public static boolean verifySignature(Response samlResponse){\n  if ((samlResponse != null) && (!samlResponse.isSigned() || (!samlResponse.isSignatureValid()))) {\n    return false;\n  }\n  return true;\n}\n", "nl": "Verifies Signature for Post response.", "id": "39267"}
{"code": "public void init(ToXMLSAXHandler h,Transformer transformer,ContentHandler realHandler){\n  h.setTransformer(transformer);\n  h.setContentHandler(realHandler);\n}\n", "nl": "Initializer method.", "id": "13169"}
{"code": "public synchronized E lastElement(){\n  if (elementCount == 0) {\n    throw new NoSuchElementException();\n  }\n  return elementData(elementCount - 1);\n}\n", "nl": "Returns the last component of the vector.", "id": "5750"}
{"code": "public boolean isPartialReturn(){\n  return partialReturn;\n}\n", "nl": "Flag to indicate that partial returns are valid.", "id": "19196"}
{"code": "public static void registerPasswordGenerator(DN configEntryDN,PasswordGenerator<?> generator){\n  directoryServer.passwordGenerators.put(configEntryDN,generator);\n}\n", "nl": "Registers the provided password generator for use with the Directory Server.", "id": "38535"}
{"code": "public com.sun.identity.liberty.ws.interaction.jaxb.SelectElement createSelectElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.SelectElementImpl();\n}\n", "nl": "Create an instance of SelectElement", "id": "26094"}
{"code": "public com.sun.identity.liberty.ws.soapbinding.jaxb.ConsentType createConsentType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.ConsentTypeImpl();\n}\n", "nl": "Create an instance of ConsentType", "id": "56156"}
{"code": "public BaseID createBaseID(){\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.BASEID);\n  if (obj == null) {\n    return new BaseIDImpl();\n  }\n else {\n    return (BaseID)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>BaseID</code>.", "id": "43555"}
{"code": "public int size(){\n  return avas.length;\n}\n", "nl": "Returns the number of AVAs in this RDN.", "id": "9615"}
{"code": "public static String formatDateTime(String format,Date date){\n  return new SimpleDateFormat(format).format(date);\n}\n", "nl": "convert date and time to String like format", "id": "53863"}
{"code": "public static boolean areDnsEqual(String dn1,String dn2){\n  try {\n    LdapName name1=new LdapName(dn1);\n    LdapName name2=new LdapName(dn2);\n    return name1.equals(name2);\n  }\n catch (  Exception ignored) {\n    return false;\n  }\n}\n", "nl": "Returns whether the provided strings represent the same DN.", "id": "21028"}
{"code": "public void rotate_45_deg(int p_factor){\n  if (p_factor % 2 == 0) {\n    rotate_90_degree(p_factor / 2);\n  }\n else {\n    rotate_deg(p_factor * 45);\n  }\n}\n", "nl": "Turns the items in the list by p_factor times 90 degree around the current position.", "id": "22992"}
{"code": "public void characters(String characters) throws SAXException {\n  final int len=characters.length();\n  if (len > m_charsBuff.length) {\n    m_charsBuff=new char[len * 2 + 1];\n  }\n  characters.getChars(0,len,m_charsBuff,0);\n  characters(m_charsBuff,0,len);\n}\n", "nl": "Receive notification of character data.", "id": "53629"}
{"code": "public byte[] readBytes() throws SQLException {\n  return (byte[])getNextAttribute();\n}\n", "nl": "Retrieves the next attribute in this <code>SQLInputImpl</code> object as an array of bytes. <p> This method does not perform type-safe checking to determine if the returned type is the expected type; this responsibility is delegated to the UDT mapping as defined by a <code>SQLData</code> implementation. <P>", "id": "42815"}
{"code": "public Scoping createScoping() throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SCOPING);\n  if (obj == null) {\n    return new ScopingImpl();\n  }\n else {\n    return (Scoping)obj;\n  }\n}\n", "nl": "Returns the <code>Scoping</code> Object.", "id": "37306"}
{"code": "public static CountryPicker newInstance(String dialogTitle){\n  CountryPicker picker=new CountryPicker();\n  Bundle bundle=new Bundle();\n  bundle.putString(\"dialogTitle\",dialogTitle);\n  picker.setArguments(bundle);\n  return picker;\n}\n", "nl": "To support show as dialog", "id": "58480"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(prefix05.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "44701"}
{"code": "@Override public String toString(){\n  String s=null;\n  try {\n    JSONObject jo=toJSONObject();\n    s=(jo == null) ? super.toString() : jo.toString(2);\n  }\n catch (  JSONException e) {\n    PolicyConstants.DEBUG.error(\"LogicalSubject.toString\",e);\n  }\n  return s;\n}\n", "nl": "Returns string representation of the object", "id": "31761"}
{"code": "public void unlockSwipe(String... id){\n  setLockSwipe(false,id);\n}\n", "nl": "Unlock swipe for some layouts.", "id": "41419"}
{"code": "public void copyTo(int srcPos,byte[] buffer,int offset,int count){\n  System.arraycopy(bytes,srcPos,buffer,offset,count);\n}\n", "nl": "Copies content to the destination buffer", "id": "38825"}
{"code": "public void removeChild(int itemIndex){\n  getChildren().remove(itemIndex - 1);\n  cleanupChildren();\n}\n", "nl": "Removes a child at the requested index.", "id": "33820"}
{"code": "@Override public void recycle(){\n}\n", "nl": "Make the filter ready to process the next request.", "id": "14010"}
{"code": "@Override public int hashCode(){\n  return oid.hashCode();\n}\n", "nl": "Returns the hash code for this attribute type. It will be calculated as the hash code of the numeric OID.", "id": "30780"}
{"code": "public long readCompactUnsignedLong(){\n  try {\n    return PackedLong.readCompactUnsignedLong(asInputStream());\n  }\n catch (  IOException e) {\n    throw new IllegalStateException(e);\n  }\n}\n", "nl": "Relative read method for reading a compacted long value. Compaction allows to reduce number of bytes needed to hold long types depending on its value (i.e: if value < 128, value will be encoded using one byte only). Reads the next bytes at this reader's current position, composing them into a long value according to big-endian byte order, and then increments the position by the size of the encoded long. Note that the maximum value of a compact long is 2^56.", "id": "50081"}
{"code": "private void assertObjectIsAMap(JsonValue value){\n  if (Map.class.isAssignableFrom(value.getObject().getClass())) {\n    return;\n  }\n  throw new IllegalArgumentException(\"Only Map instances are permitted in the OAuth token.\");\n}\n", "nl": "Verify that the object in the JsonValue is actually a map.", "id": "54616"}
{"code": "protected final void unexpectedEndOfInput(){\n  if (cacheRequest != null) {\n    cacheRequest.abort();\n  }\n  httpEngine.release(true);\n}\n", "nl": "Calls abort on the cache entry and disconnects the socket. This should be invoked when the connection is closed unexpectedly to invalidate the cache entry and to prevent the HTTP connection from being reused. HTTP messages are sent in serial so whenever a message cannot be read to completion, subsequent messages cannot be read either and the connection must be discarded. <p>An earlier implementation skipped the remaining bytes, but this requires that the entire transfer be completed. If the intention was to cancel the transfer, closing the connection is the only solution.", "id": "42526"}
{"code": "public com.sun.identity.saml2.jaxb.xmlsig.DSAKeyValueType createDSAKeyValueType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.xmlsig.impl.DSAKeyValueTypeImpl();\n}\n", "nl": "Create an instance of DSAKeyValueType", "id": "8745"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n  config.getExcludedAttribute().add(getModifyTimestampAttributeType());\n  provider.initializeVirtualAttributeProvider(config);\n}\n", "nl": "Ensures that the Directory Server is running.", "id": "21192"}
{"code": "public ASN1Primitive toASN1Primitive(){\n  return seq;\n}\n", "nl": "ECPrivateKey ::= SEQUENCE { version INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1), privateKey OCTET STRING, parameters [0] Parameters OPTIONAL, publicKey [1] BIT STRING OPTIONAL }", "id": "33022"}
{"code": "@Override public int available(){\n  long avail=size - position;\n  if (avail <= 0) {\n    return 0;\n  }\n else   if (avail > Integer.MAX_VALUE) {\n    return Integer.MAX_VALUE;\n  }\n else {\n    return (int)avail;\n  }\n}\n", "nl": "Return the number of bytes that can be read.", "id": "8034"}
{"code": "public static Feature fromJson(String json){\n  GsonBuilder gson=new GsonBuilder();\n  gson.registerTypeAdapter(Position.class,new PositionDeserializer());\n  gson.registerTypeAdapter(Geometry.class,new GeometryDeserializer());\n  return gson.create().fromJson(json,Feature.class);\n}\n", "nl": "Create a GeoJSON feature object from JSON.", "id": "34342"}
{"code": "public void shutdownOutput() throws IOException {\n  if (isClosed())   throw new SocketException(\"Socket is closed\");\n  if (!isConnected())   throw new SocketException(\"Socket is not connected\");\n  if (isOutputShutdown())   throw new SocketException(\"Socket output is already shutdown\");\n  getImpl().shutdownOutput();\n  shutOut=true;\n}\n", "nl": "Disables the output stream for this socket. For a TCP socket, any previously written data will be sent followed by TCP's normal connection termination sequence. If you write to a socket output stream after invoking shutdownOutput() on the socket, the stream will throw an IOException.", "id": "18682"}
{"code": "public static void fill(Object[] array,Object value){\n  for (int i=0; i < array.length; i++) {\n    array[i]=value;\n  }\n}\n", "nl": "Fills the specified array with the specified element.", "id": "4818"}
{"code": "public static String printDateTime(java.util.Calendar val){\n  if (theConverter == null)   initConverter();\n  return theConverter.printDateTime(val);\n}\n", "nl": "<p> Converts a Calendar value into a string.", "id": "20104"}
{"code": "public String toString(){\n  return name;\n}\n", "nl": "Returns the attribute name as a String.", "id": "1649"}
{"code": "public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {\n  return super.newInstance(javaContentInterface);\n}\n", "nl": "Create an instance of the specified Java content interface.", "id": "40278"}
{"code": "public void navigateToPoint(LatLng latLng,float tilt,float bearing,float zoom,boolean animate){\n  CameraPosition position=new CameraPosition.Builder().target(latLng).zoom(zoom).bearing(bearing).tilt(tilt).build();\n  changeCameraPosition(position,animate);\n}\n", "nl": "Allows us to navigate to a certain point.", "id": "9156"}
{"code": "private BigInteger inflated(){\n  if (intVal == null) {\n    return BigInteger.valueOf(intCompact);\n  }\n  return intVal;\n}\n", "nl": "Returns appropriate BigInteger from intVal field if intVal is null, i.e. the compact representation is in use.", "id": "22869"}
{"code": "public void init(ServletConfig config) throws ServletException {\n  super.init(config);\n  if (CookieUtils.debug.messageEnabled()) {\n    CookieUtils.debug.message(\"CookieReaderServlet: Initializing...\");\n  }\n}\n", "nl": "Gets handle to CookieUtils.debug.", "id": "38839"}
{"code": "@Override public TagResult generateValue(TemplateEntry templateEntry,TemplateValue templateValue){\n  DN parentDN=templateEntry.getParentDN();\n  if (parentDN == null || parentDN.isRootDN()) {\n    return TagResult.SUCCESS_RESULT;\n  }\n  templateValue.getValue().append(parentDN);\n  return TagResult.SUCCESS_RESULT;\n}\n", "nl": "Generates the content for this tag by appending it to the provided tag.", "id": "27666"}
{"code": "public static char highSurrogate(int c){\n  return (char)(((c - 0x00010000) >> 10) + 0xD800);\n}\n", "nl": "Returns the high surrogate of a supplemental character", "id": "5307"}
{"code": "public void callback(final String instanceId,final String callback,final Map<String,Object> data){\n  callback(instanceId,callback,data,false);\n}\n", "nl": "Invoke JavaScript callback", "id": "33989"}
{"code": "public Certificate[] certificates(){\n  if (certificates == null) {\n    return new Certificate[0];\n  }\n  int len=certificates.size();\n  Certificate[] certs=new Certificate[len];\n  certificates.copyInto(certs);\n  return certs;\n}\n", "nl": "Returns a copy of all the certificates for this identity.", "id": "20490"}
{"code": "@Override public void onMessageReceived(String from,Bundle data){\n  String message=data.getString(\"message\");\n  Log.d(TAG,\"From: \" + from);\n  Log.d(TAG,\"Message: \" + message);\n  if (from.startsWith(\"/topics/\")) {\n  }\n else {\n  }\n  sendNotification(message);\n}\n", "nl": "Called when message is received.", "id": "1441"}
{"code": "public void addOverride(MappedMember override){\n  overrides.add(override);\n}\n", "nl": "Sets the overridden (method) member object.", "id": "50451"}
{"code": "public static boolean isErrorLoggable(Level level){\n  SSOToken authSSOToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());\n  if ((authSSOToken == null) || !logActive) {\n    return false;\n  }\n  return errorLogger.isLoggable(level);\n}\n", "nl": "Checks if an error message of the given level would actually be logged by this logger. This check is based on the Logger's effective level.", "id": "13475"}
{"code": "public int compareTo(XMLString anotherString){\n  return m_str.compareTo(anotherString.toString());\n}\n", "nl": "Compares two strings lexicographically.", "id": "57139"}
{"code": "@AfterClass public void cleanUp() throws Exception {\n  TaskUtils.enableBackend(beID);\n  TestCaseUtils.deleteDirectory(tempDir);\n}\n", "nl": "Clean up method.", "id": "50540"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic128Element createBasic128Element() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic128ElementImpl();\n}\n", "nl": "Create an instance of Basic128Element", "id": "12578"}
{"code": "public static AddRequest newAddRequest(final String... ldifLines){\n  final ChangeRecord record=LDIFChangeRecordReader.valueOfLDIFChangeRecord(ldifLines);\n  if (record instanceof AddRequest) {\n    return (AddRequest)record;\n  }\n else {\n    final LocalizableMessage message=WARN_READ_LDIF_RECORD_CHANGE_RECORD_WRONG_TYPE.get(\"add\");\n    throw new LocalizedIllegalArgumentException(message);\n  }\n}\n", "nl": "Creates a new add request using the provided lines of LDIF decoded using the default schema.", "id": "44550"}
{"code": "public void schemaChanged(String serviceName,String version){\n}\n", "nl": "This method will be invoked when a service's schema has been changed.", "id": "39726"}
{"code": "public String versionPrintable(){\n  return versionPrintable;\n}\n", "nl": "Returns the printable version string for this product.", "id": "35616"}
{"code": "public synchronized void removeFlavorListener(FlavorListener listener){\n  if (listener == null || flavorListeners == null) {\n    return;\n  }\n  flavorListeners.remove(listener);\n}\n", "nl": "Removes the specified <code>FlavorListener</code> so that it no longer receives <code>FlavorEvent</code>s from this <code>Clipboard</code>. This method performs no function, nor does it throw an exception, if the listener specified by the argument was not previously added to this <code>Clipboard</code>. If <code>listener</code> is <code>null</code>, no exception is thrown and no action is performed.", "id": "2983"}
{"code": "public final void clear(){\n  m_index=-1;\n}\n", "nl": "Clears the stack.", "id": "7446"}
{"code": "public static void pickImage(Context context,Fragment fragment){\n  pickImage(context,fragment,REQUEST_PICK);\n}\n", "nl": "Pick image from a Fragment", "id": "13276"}
{"code": "public void notifyHorizontalEdgeReached(int startX,int finalX,int overX){\n  mScrollerX.notifyEdgeReached(startX,finalX,overX);\n}\n", "nl": "Notify the scroller that we've reached a horizontal boundary. Normally the information to handle this will already be known when the animation is started, such as in a call to one of the fling functions. However there are cases where this cannot be known in advance. This function will transition the current motion and animate from startX to finalX as appropriate.", "id": "5741"}
{"code": "boolean isPainting(){\n  Container component=this;\n  while (component != null) {\n    if (component instanceof JComponent && ((JComponent)component).getFlag(ANCESTOR_USING_BUFFER)) {\n      return true;\n    }\n    component=component.getParent();\n  }\n  return false;\n}\n", "nl": "Returns true if this component, or any of its ancestors, are in the processing of painting.", "id": "34357"}
{"code": "public static byte[] LZWDecode(byte[] in){\n  ByteArrayOutputStream out=new ByteArrayOutputStream();\n  LZWDecoder lzw=new LZWDecoder();\n  lzw.decode(in,out);\n  return out.toByteArray();\n}\n", "nl": "Decodes a byte[] according to the LZW encoding.", "id": "14915"}
{"code": "public Period minusMonths(long monthsToSubtract){\n  return (monthsToSubtract == Long.MIN_VALUE ? plusMonths(Long.MAX_VALUE).plusMonths(1) : plusMonths(-monthsToSubtract));\n}\n", "nl": "Returns a copy of this period with the specified months subtracted. <p> This subtracts the amount from the months unit in a copy of this period. The years and days units are unaffected. For example, \"1 year, 6 months and 3 days\" minus 2 months returns \"1 year, 4 months and 3 days\". <p> This instance is immutable and unaffected by this method call.", "id": "20135"}
{"code": "protected static boolean compare(Vector<FieldContainer> vector1,Vector<FieldContainer> vector2){\n  return vector1.size() == vector2.size() && vector1.containsAll(vector2);\n}\n", "nl": "compares two vectors regardless of the order of their elements", "id": "8055"}
{"code": "public void mail() throws IOException {\n  checkAWTPermission();\n  checkExec();\n  checkActionSupport(Action.MAIL);\n  URI mailtoURI=null;\n  try {\n    mailtoURI=new URI(\"mailto:?\");\n    peer.mail(mailtoURI);\n  }\n catch (  URISyntaxException e) {\n  }\n}\n", "nl": "Launches the mail composing window of the user default mail client.", "id": "20871"}
{"code": "public static void registerKeyManagerProvider(DN providerDN,KeyManagerProvider<?> provider){\n  directoryServer.keyManagerProviders.put(providerDN,provider);\n}\n", "nl": "Registers the provided key manager provider with the Directory Server.", "id": "36731"}
{"code": "public int hashCode(){\n  return super.hashCode();\n}\n", "nl": "Return a hash code for this <code>Subject</code>.", "id": "43897"}
{"code": "static int applyMaskPenaltyRule1(ByteMatrix matrix){\n  return applyMaskPenaltyRule1Internal(matrix,true) + applyMaskPenaltyRule1Internal(matrix,false);\n}\n", "nl": "Apply mask penalty rule 1 and return the penalty. Find repetitive cells with the same color and give penalty to them. Example: 00000 or 11111.", "id": "34746"}
{"code": "@SuppressWarnings(\"unchecked\") public void writeTime(java.sql.Time x) throws SQLException {\n  attribs.add(x);\n}\n", "nl": "Writes a <code>java.sql.Time</code> object in the Java programming language to this <code>SQLOutputImpl</code> object. The driver converts it to an SQL <code>TIME</code> before returning it to the database.", "id": "58568"}
{"code": "public synchronized void removeConsumer(ImageConsumer ic){\n  ics.removeElement(ic);\n}\n", "nl": "Remove an ImageConsumer from the list of consumers interested in data for this image.", "id": "27820"}
{"code": "public boolean containsKey(String key){\n  if ((key == null) || (key.trim().equals(\"\"))) {\n    return false;\n  }\n  return contents.containsKey(key);\n}\n", "nl": "Returns <tt>true</tt> if and only if this <tt>CompositeData</tt> instance contains an item whose name is <tt>key</tt>. If <tt>key</tt> is a null or empty String, this method simply returns false.", "id": "14608"}
{"code": "private LDIFReader createLDIFReader(String ldifString) throws Exception {\n  byte[] bytes=StaticUtils.getBytes(ldifString);\n  LDIFReader reader=new LDIFReader(new LDIFImportConfig(new ByteArrayInputStream(bytes)));\n  return reader;\n}\n", "nl": "Create an LDIF reader from a string of LDIF.", "id": "24907"}
{"code": "public static void warning(CommandManager mgr,String msg,Throwable t){\n  dumpToOutput(mgr,msg,t);\n  mgr.getDebugger().warning(msg,t);\n}\n", "nl": "Prints warning messages only when debug level is greater than Debug.ERROR. <p><b>NOTE:</b> Debugging is an IO intensive operation and may hurt application performance when abused. Particularly, note that Java evaluates arguments to <code>warning()</code> even when debugging is turned off. It is recommended that the debug state be checked by invoking <code>warningEnabled()</code> before invoking any <code>warning()</code> methods to avoid unnecessary argument evaluation and to maximize application performance.</p> <p>If the debug file is not accessible and debugging is enabled, the message along with a time stamp and thread info will be printed on <code>System.out</code>.</p> <p>This method creates the debug file if does not exist; otherwise it starts appending to the existing debug file. When invoked for the first time on this object, the method writes a line delimiter of '*'s.</p> <p>Note that the debug file will remain open until <code>destroy()</code> is invoked. To conserve file resources, you should invoke <code>destroy()</code> explicitly rather than wait for the garbage collector to clean up.</p>", "id": "28928"}
{"code": "public void updateCRLCache(X509Certificate certificate,X509CRL crl){\n  String issuer=CertUtils.getIssuerName(certificate);\n  if (crl == null) {\n    cachedcrls.remove(issuer);\n  }\n else {\n    cachedcrls.put(issuer,crl);\n  }\n}\n", "nl": "Checks certificate and update CRL in cached CRL store.", "id": "5633"}
{"code": "@Before public void init() throws IOException {\n  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();\n  git=new Git(repository);\n  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setAutoIncrementPatch(true);\n  unchecked(null);\n}\n", "nl": "Prepare common variables to access the git repository.", "id": "39479"}
{"code": "public void add(Permission permission){\n  if (!(permission instanceof DelegationPermission))   throw new IllegalArgumentException(\"invalid permission: \" + permission);\n  if (isReadOnly())   throw new SecurityException(\"attempt to add a Permission to a readonly PermissionCollection\");\nsynchronized (this) {\n    perms.add(0,permission);\n  }\n}\n", "nl": "Adds a permission to the DelegationPermissions. The key for the hash is the name.", "id": "49001"}
{"code": "public synchronized boolean containsAll(Collection<?> c){\n  return super.containsAll(c);\n}\n", "nl": "Returns true if this Vector contains all of the elements in the specified Collection.", "id": "20140"}
{"code": "public boolean add(E e){\n  ensureCapacityInternal(size + 1);\n  elementData[size++]=e;\n  return true;\n}\n", "nl": "Appends the specified element to the end of this list.", "id": "15890"}
{"code": "public String toString(){\n  StringBuilder sb=new StringBuilder();\n  sb.append(\"Plugin name: \").append(getName());\n  sb.append(\"\\n\\tAttributes: \").append(getAttributes()).append(\"\\n\");\n  return (sb.toString());\n}\n", "nl": "Returns String representation of the plugin object. It returns attributes defined and sub configurations.", "id": "46258"}
{"code": "public Iterator<Integer> ldapIterator(){\n  return data.ldapStates.keySet().iterator();\n}\n", "nl": "Returns an iterator on the serverId of the connected LDAP servers.", "id": "34401"}
{"code": "public static Border createBevelBorder(int type,Color highlight,Color shadow){\n  return new BevelBorder(type,highlight,shadow);\n}\n", "nl": "Creates a beveled border of the specified type, using the specified highlighting and shadowing. The outer edge of the highlighted area uses a brighter shade of the highlight color. The inner edge of the shadow area uses a brighter shade of the shadow color.", "id": "312"}
{"code": "public int lastIndexOf(Object elem,int index){\n  return delegate.lastIndexOf(elem,index);\n}\n", "nl": "Searches backwards for <code>elem</code>, starting from the specified index, and returns an index to it.", "id": "49388"}
{"code": "public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {\n  xstr().dispatchCharactersEvents(ch);\n}\n", "nl": "Directly call the characters method on the passed ContentHandler for the string-value. Multiple calls to the ContentHandler's characters methods may well occur for a single call to this method.", "id": "27281"}
{"code": "static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {\n  return createObject(factoryId,null,fallbackClassName);\n}\n", "nl": "Finds the implementation Class object in the specified order.  The specified order is the following: <ol> <li>query the system property using <code>System.getProperty</code> <li>read <code>META-INF/services/<i>factoryId</i></code> file <li>use fallback classname </ol>", "id": "53409"}
{"code": "public final boolean push(boolean val){\n  if (m_index == m_allocatedSize - 1)   grow();\n  return (m_values[++m_index]=val);\n}\n", "nl": "Pushes an item onto the top of this stack.", "id": "28847"}
{"code": "private void applyRetrievedLengthLimit(){\n  Long friendly_msg_length=mFirebaseRemoteConfig.getLong(\"friendly_msg_length\");\n  mMessageEditText.setFilters(new InputFilter[]{new InputFilter.LengthFilter(friendly_msg_length.intValue())});\n  Log.d(TAG,\"FML is: \" + friendly_msg_length);\n}\n", "nl": "Apply retrieved length limit to edit text field. This result may be fresh from the server or it may be from cached values.", "id": "41700"}
{"code": "protected int checkHorizontalKey(int key,String message){\n  if ((key == LEFT) || (key == CENTER) || (key == RIGHT)|| (key == LEADING)|| (key == TRAILING)) {\n    return key;\n  }\n else {\n    throw new IllegalArgumentException(message);\n  }\n}\n", "nl": "Verify that key is a legal value for the horizontalAlignment properties.", "id": "2538"}
{"code": "public String toXML(){\n  StringBuilder stringBuilder=new StringBuilder();\n  return stringBuilder.toString();\n}\n", "nl": "Default toXML Method to Marshal Object into XML.", "id": "642"}
{"code": "public com.sun.identity.saml2.jaxb.entityconfig.AuthnAuthorityConfigElement createAuthnAuthorityConfigElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.entityconfig.impl.AuthnAuthorityConfigElementImpl();\n}\n", "nl": "Create an instance of AuthnAuthorityConfigElement", "id": "17900"}
{"code": "public void removeElementAt(int i){\n  if (null == m_map)   return;\n  if (i > m_firstFree)   System.arraycopy(m_map,i + 1,m_map,i - 1,m_firstFree - i);\n else   m_map[i]=DTM.NULL;\n}\n", "nl": "Deletes the component at the specified index. Each component in this vector with an index greater or equal to the specified index is shifted downward to have an index one smaller than the value it had previously.", "id": "47043"}
{"code": "void applyExpensiveOutlineWithBlur(Bitmap srcDst,Canvas srcDstCanvas,int color,int outlineColor){\n  applyExpensiveOutlineWithBlur(srcDst,srcDstCanvas,color,outlineColor,true);\n}\n", "nl": "Applies a more expensive and accurate outline to whatever is currently drawn in a specified bitmap.", "id": "42989"}
{"code": "public NodeList selectNodeList(Node contextNode,String str) throws TransformerException {\n  return selectNodeList(contextNode,str,contextNode);\n}\n", "nl": "Use an XPath string to select a nodelist. XPath namespace prefixes are resolved from the contextNode.", "id": "26086"}
{"code": "int peekChar(int readAhead){\n  int target=current.cursor + readAhead;\n  if (target < current.stream.length) {\n    return current.stream[target];\n  }\n  return -1;\n}\n", "nl": "Read ahead the given number of characters without moving the cursor.", "id": "12845"}
{"code": "public void addNumberProperty(String key,Number value){\n  getProperties().addProperty(key,value);\n}\n", "nl": "Convenience method to add a Number member.", "id": "3154"}
{"code": "protected void fireEndDoc() throws org.xml.sax.SAXException {\n  if (m_tracer != null) {\n    flushMyWriter();\n    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENDDOCUMENT);\n  }\n}\n", "nl": "To fire off end document trace event", "id": "19420"}
{"code": "protected void Argument() throws javax.xml.transform.TransformerException {\n  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);\n  appendOp(2,OpCodes.OP_ARGUMENT);\n  Expr();\n  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);\n}\n", "nl": "Argument    ::=    Expr", "id": "51777"}
{"code": "public StateInteractive left_button_clicked(PlaPointFloat p_next_corner){\n  if (item_to_modify == null) {\n    return return_state;\n  }\n  if (item_to_modify.get_area().contains(p_next_corner)) {\n    super.add_corner(p_next_corner);\n    i_brd.repaint();\n  }\n  return this;\n}\n", "nl": "Adds a corner to the polygon of the the hole under construction.", "id": "36417"}
{"code": "private Path concatArchiveExtension(Path path) throws UpdateException {\n  try {\n    return Paths.get(new URI(path.toUri().toString().concat(archiveExtension)));\n  }\n catch (  URISyntaxException e) {\n    throw new UpdateException(e.getMessage(),e);\n  }\n}\n", "nl": "Appends the archive extension to the file Path.", "id": "31222"}
{"code": "public double distance(PlaPointInt p_to_point){\n  return Math.sqrt(distance_square(p_to_point));\n}\n", "nl": "calculates the distance between this point and p_to_point", "id": "49623"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireInternalReferenceElement createRequireInternalReferenceElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireInternalReferenceElementImpl();\n}\n", "nl": "Create an instance of RequireInternalReferenceElement", "id": "51068"}
{"code": "public void insertUpdate(DocumentEvent e,Shape a,ViewFactory f){\n  if (isLoaded()) {\n    super.insertUpdate(e,a,f);\n  }\n}\n", "nl": "Gives notification that something was inserted into the document in a location that this view is responsible for. If the zone has been loaded, the superclass behavior is invoked, otherwise this does nothing.", "id": "14543"}
{"code": "private SessionResponse handleException(SessionRequest req,SessionID sid,String error){\n  SessionResponse response=new SessionResponse(req.getRequestID(),req.getMethodID());\n  response.setException(sid + \" \" + error);\n  return response;\n}\n", "nl": "!!!!! IMPORTANT !!!!! DO NOT REMOVE \"sid\" FROM EXCEPTIONMESSAGE Logic kludge in legacy Agent 2.0 code will break If it can not find SID value in the exception message returned by Session Service. This dependency should be eventually removed once we migrate customers to a newer agent code base or switch to a new version of Session Service interface", "id": "31557"}
{"code": "public Enumeration<String> attributeNames(){\n  return getTable().keys();\n}\n", "nl": "Gets an enumeration of the locale-independent names of this feature.", "id": "21239"}
{"code": "private PageSize ensureDocumentHasNPages(int n,PageSize customPageSize){\n  PageSize lastPageSize=null;\n  while (document.getPdfDocument().getNumberOfPages() < n) {\n    lastPageSize=addNewPage(customPageSize);\n  }\n  return lastPageSize;\n}\n", "nl": "Adds some pages so that the overall number is at least n. Returns the page size of the n'th page.", "id": "1432"}
{"code": "private void reset(){\n  _handler=null;\n  _depth=0;\n  _mapping.clear();\n  _stateInfos.clear();\n  _colorTypes.clear();\n  _statePainters.clear();\n  _stylePainters.clear();\n}\n", "nl": "Clears our internal state.", "id": "19529"}
{"code": "public int next(){\n  if (_currentNode == _startNodeID || _currentNode == DTM.NULL) {\n    return NULL;\n  }\n else {\n    final int node=_currentNode;\n    _currentNode=_nextsib2(node);\n    return returnNode(makeNodeHandle(node));\n  }\n}\n", "nl": "Get the next node in the iteration.", "id": "15769"}
{"code": "public void startDTD(String name,String publicId,String systemId) throws org.xml.sax.SAXException {\n  setDoctypeSystem(systemId);\n  setDoctypePublic(publicId);\n  m_elemContext.m_elementName=name;\n  m_inDoctype=true;\n}\n", "nl": "Report the start of DTD declarations, if any. Any declarations are assumed to be in the internal subset unless otherwise indicated.", "id": "12847"}
{"code": "public void validateAttributeQuery(HttpServletRequest request,HttpServletResponse response,AttributeQuery attrQuery,String attrAuthorityEntityID,String realm) throws SAML2Exception {\n  AttributeQueryUtil.verifyAttrQuerySignature(attrQuery,attrAuthorityEntityID,realm);\n  ;\n}\n", "nl": "Checks if the attribute query is valid.", "id": "52376"}
{"code": "public static AuthorizationIdentityRequestControl newControl(final boolean isCritical){\n  return isCritical ? CRITICAL_INSTANCE : NONCRITICAL_INSTANCE;\n}\n", "nl": "Creates a new authorization identity request control having the provided criticality.", "id": "35968"}
{"code": "public int read() throws IOException {\n  if (this.closed) {\n    throw new IOException(\"Attempted read from closed stream.\");\n  }\n  if (this.eof) {\n    return -1;\n  }\n  if (this.pos >= this.chunkSize) {\n    nextChunk();\n    if (this.eof) {\n      return -1;\n    }\n  }\n  pos++;\n  return in.read();\n}\n", "nl": "<p> Returns all the data in a chunked stream in coalesced form. A chunk is followed by a CRLF. The method returns -1 as soon as a chunksize of 0 is detected.</p> <p> Trailer headers are read automcatically at the end of the stream and can be obtained with the getResponseFooters() method.</p>", "id": "13846"}
{"code": "public void resetFragments(int position,boolean allowingStateLoss){\n  this.mCurrentPosition=position;\n  FragmentTransaction transaction=mFragmentManager.beginTransaction();\n  removeAll(transaction);\n  add(position,transaction);\n  if (allowingStateLoss) {\n    transaction.commitAllowingStateLoss();\n  }\n else {\n    transaction.commit();\n  }\n}\n", "nl": "reset all the fragment and show given position fragment", "id": "47471"}
{"code": "public static int sizeOfString(String string){\n  if (string == null) {\n    return 0;\n  }\n  return 4 + string.length() * 2;\n}\n", "nl": "Returns the size in bytes of a String.", "id": "54972"}
{"code": "protected void adjustChildIndexs(int index,int amount){\n  for (int counter=index, maxCounter=getChildCount(); counter < maxCounter; counter++) {\n    ((FHTreeStateNode)getChildAt(counter)).childIndex+=amount;\n  }\n}\n", "nl": "Adjusts the child indexs of the receivers children by <code>amount</code>, starting at <code>index</code>.", "id": "16184"}
{"code": "public com.sun.identity.liberty.ws.interaction.jaxb.RedirectRequestElement createRedirectRequestElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.RedirectRequestElementImpl();\n}\n", "nl": "Create an instance of RedirectRequestElement", "id": "18236"}
{"code": "public void joinGroup(InetAddress groupAddr) throws IOException {\n  checkJoinOrLeave(groupAddr);\n  impl.join(groupAddr);\n}\n", "nl": "Adds this socket to the specified multicast group. A socket must join a group before data may be received. A socket may be a member of multiple groups but may join any group only once.", "id": "11015"}
{"code": "public void makeImmutable(){\n  if (isMutable) {\n    isMutable=false;\n  }\n}\n", "nl": "Makes this object immutable.", "id": "31113"}
{"code": "public static String toSnakeCase(final String value){\n  return toDecamelize(value,\"_\");\n}\n", "nl": "Transform to snake_case.", "id": "49057"}
{"code": "public static boolean isThreadContentionMonitoringEnabled(){\n  return threadMXBean.isThreadContentionMonitoringEnabled();\n}\n", "nl": "Check whether thread contention monitoring is enabled.", "id": "54315"}
{"code": "public void installUI(JComponent c){\n}\n", "nl": "Configures the specified component appropriately for the look and feel. This method is invoked when the <code>ComponentUI</code> instance is being installed as the UI delegate on the specified component.  This method should completely configure the component for the look and feel, including the following: <ol> <li>Install default property values for color, fonts, borders, icons, opacity, etc. on the component.  Whenever possible, property values initialized by the client program should <i>not</i> be overridden. <li>Install a <code>LayoutManager</code> on the component if necessary. <li>Create/add any required sub-components to the component. <li>Create/install event listeners on the component. <li>Create/install a <code>PropertyChangeListener</code> on the component in order to detect and respond to component property changes appropriately. <li>Install keyboard UI (mnemonics, traversal, etc.) on the component. <li>Initialize any appropriate instance data. </ol>", "id": "12596"}
{"code": "private void verifyIntent(String intentStr) throws Exception {\n  Intent intent=Intent.parseUri(intentStr,0);\n  if (intent.getComponent() != null) {\n    verifyPackage(intent.getComponent().getPackageName());\n  }\n else   if (intent.getPackage() != null) {\n    verifyPackage(intent.getPackage());\n  }\n}\n", "nl": "Verifies if the intent should be restored.", "id": "31769"}
{"code": "public static void closeSession() throws HibernateException {\n  Session session=(Session)threadLocal.get();\n  threadLocal.set(null);\n  if (session != null) {\n    session.close();\n  }\n}\n", "nl": "Close the single hibernate session instance.", "id": "47994"}
{"code": "public int next(){\n  if (_startNode == _currentNode)   return NULL;\n  _currentNode=_startNode;\n  return returnNode(_startNode);\n}\n", "nl": "Get the next node in the iteration.", "id": "19021"}
{"code": "public boolean is_equal_last(PlaPointInt a_point){\n  if (a_point == null)   return false;\n  PlaPointInt last=get_last();\n  if (last == null)   return false;\n  return last.equals(a_point);\n}\n", "nl": "Returns true if the given point is equal to the last point in the list", "id": "6110"}
{"code": "private boolean isDefaultScript(ScriptConfiguration scriptConfig){\n  try {\n    int usageCount=getUsageCount(getScriptingServiceGlobalConfig(),getDefaultScriptSearchString(scriptConfig.getId()));\n    return usageCount > 0;\n  }\n catch (  SSOException|SMSException e) {\n    logger.error(\"isDefaultScript caught exception with script {} UUID {}\",scriptConfig.getName(),scriptConfig.getId(),e);\n    return false;\n  }\n}\n", "nl": "Return true if the specifed script is a default script, false otherwise.", "id": "23824"}
{"code": "@Indexable(type=IndexableType.DELETE) @Override public Foo deleteFoo(Foo foo){\n  return fooPersistence.remove(foo);\n}\n", "nl": "Deletes the foo from the database. Also notifies the appropriate model listeners.", "id": "32047"}
{"code": "public boolean contains(String attrName,String value){\n  boolean containsTheValue=false;\n  Attr attr=findAttribute(attrName);\n  if (attr != null) {\n    containsTheValue=attr.contains(value);\n  }\n  return containsTheValue;\n}\n", "nl": "Check if this attrSet has the attribute with the given value", "id": "15866"}
{"code": "private static Handler<AsyncResult<Void>> completer(Future<SQLConnection> future,SQLConnection connection){\n  return null;\n}\n", "nl": "A utility method returning a `Handler<SQLConnection>`", "id": "56041"}
{"code": "public static PasswordModifyExtendedRequest unmodifiablePasswordModifyExtendedRequest(final PasswordModifyExtendedRequest request){\n  if (request instanceof UnmodifiablePasswordModifyExtendedRequestImpl) {\n    return request;\n  }\n  return new UnmodifiablePasswordModifyExtendedRequestImpl(request);\n}\n", "nl": "Creates an unmodifiable password modify extended request of the provided request.", "id": "8671"}
{"code": "public String toString(){\n  String text=\"\";\nswitch (m_timeout) {\ncase _RETRANSMIT:\n    text=\"Retransmission Timeout\";\n  break;\ncase _TRANSACTION:\ntext=\"Transaction Timeout\";\nbreak;\ndefault :\ntext=\"Error while printing Timeout\";\nbreak;\n}\nreturn text;\n}\n", "nl": "This method returns a string version of this class.", "id": "38308"}
{"code": "protected void updateIncludeExclude(Collection<LocalizableMessage> errors,String backendName){\n  updateErrors(lDnsToInclude,dnsToInclude,lAttributesToInclude,attributesToInclude,lInclusionFilter,inclusionFilter,errors,backendName);\n  updateErrors(lDnsToExclude,dnsToExclude,lAttributesToExclude,attributesToExclude,lExclusionFilter,exclusionFilter,errors,backendName);\n}\n", "nl": "Updates a list of errors in the include and exclude subpanels.", "id": "5779"}
{"code": "@AfterClass public static void cleanupClass(){\n  try {\n    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());\n  }\n catch (  Exception ignore) {\n    System.err.println(\"cannot remove \" + scenario.getRepositoryLocation());\n  }\n}\n", "nl": "Cleanup the whole junit scenario ; deletes the created git repository.", "id": "18877"}
{"code": "public Builder syntaxOID(final String syntax){\n  this.syntaxOID=syntax;\n  return this;\n}\n", "nl": "Sets the syntax OID of this matching rule.", "id": "11616"}
{"code": "public void next(){\n  index++;\n}\n", "nl": "Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction.", "id": "58750"}
{"code": "public void write(String str,int off,int len) throws IOException {\n  out.write(str,off,len);\n}\n", "nl": "Writes a portion of a string.", "id": "30151"}
{"code": "private void updateView(){\n  if (rebuildItems()) {\n    calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);\n    layout(getWidth(),getHeight());\n  }\n}\n", "nl": "Updates view. Rebuilds items and label if necessary, recalculate items sizes.", "id": "19230"}
{"code": "public static void writeStringToFile(File file,String data,boolean append) throws IOException {\n  writeStringToFile(file,data,Charset.defaultCharset(),append);\n}\n", "nl": "Writes a String to a file creating the file if it does not exist using the default encoding for the VM.", "id": "22567"}
{"code": "@Deprecated @SuppressWarnings(\"deprecation\") public final void suspend(){\n  if (stopOrSuspend(true))   Thread.currentThread().suspend();\n}\n", "nl": "Suspends all threads in this thread group. <p> First, the <code>checkAccess</code> method of this thread group is called with no arguments; this may result in a security exception. <p> This method then calls the <code>suspend</code> method on all the threads in this thread group and in all of its subgroups.", "id": "15944"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.security.SessionContextStatementElement createSessionContextStatementElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.SessionContextStatementElementImpl();\n}\n", "nl": "Create an instance of SessionContextStatementElement", "id": "12043"}
{"code": "public void removeLayoutComponent(Component comp){\n  invalidateLayout(comp.getParent());\n}\n", "nl": "Not used by this class.", "id": "13571"}
{"code": "public static String downloadString(String url,int triesCount) throws MalformedURLException {\n  return downloadString(new URL(url),null,DEFAULT_READ_TIMEOUT,DEFAULT_SOCKET_TIMEOUT,\"utf-8\",triesCount);\n}\n", "nl": "Tries to download from the specified url for triesCount times", "id": "44174"}
{"code": "public void suspendEncoding() throws java.io.IOException {\n  flushBase64();\n  this.suspendEncoding=true;\n}\n", "nl": "Suspends encoding of the stream. May be helpful if you need to embed a piece of base64-encoded data in a stream.", "id": "39890"}
{"code": "@SuppressWarnings(\"unchecked\") @Override public PdfBoolean copyTo(PdfDocument document,boolean allowDuplicating){\n  return (PdfBoolean)super.copyTo(document,allowDuplicating);\n}\n", "nl": "Copies object to a specified document. Works only for objects that are read from existing document, otherwise an exception is thrown.", "id": "28184"}
{"code": "private String readInputUntil(char... symbols){\n  String s=\"\";\n  while (!accept(symbols)) {\n    s+=(char)data[index];\n    skip();\n  }\n  return s;\n}\n", "nl": "Reads input until one of the given symbols is found.", "id": "25506"}
{"code": "private void goToBackup(){\n  mStage=Stage.BACKUP;\n  updateStage();\n}\n", "nl": "Switches to backup (password) screen. This either can happen when fingerprint is not available or the user chooses to use the password authentication method by pressing the button. This can also happen when the user had too many fingerprint attempts.", "id": "5736"}
{"code": "public static long readSwappedLong(InputStream input) throws IOException {\n  byte[] bytes=new byte[8];\n  for (int i=0; i < 8; i++) {\n    bytes[i]=(byte)read(input);\n  }\n  return readSwappedLong(bytes,0);\n}\n", "nl": "Reads a \"long\" value from an InputStream. The value is converted to the opposed endian system while reading.", "id": "45332"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic256Sha256Rsa15Element createBasic256Sha256Rsa15Element() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic256Sha256Rsa15ElementImpl();\n}\n", "nl": "Create an instance of Basic256Sha256Rsa15Element", "id": "23501"}
{"code": "protected void parseSessionSslId(Request request){\n  if (request.getRequestedSessionId() == null && SSL_ONLY.equals(request.getServletContext().getEffectiveSessionTrackingModes()) && request.connector.secure) {\n    request.setRequestedSessionId(request.getAttribute(SSLSupport.SESSION_ID_KEY).toString());\n    request.setRequestedSessionSSL(true);\n  }\n}\n", "nl": "Look for SSL session ID if required. Only look for SSL Session ID if it is the only tracking method enabled.", "id": "22219"}
{"code": "public boolean alwaysUseSsl(){\n  return alwaysUseSSL;\n}\n", "nl": "Indicate if the SSL mode is always used.", "id": "51625"}
{"code": "public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){\n  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());\n}\n", "nl": "scale image", "id": "20819"}
{"code": "public String next(){\n  return nextLine();\n}\n", "nl": "Returns the next line in the wrapped <code>Reader</code>.", "id": "54128"}
{"code": "public com.sun.identity.saml2.jaxb.entityconfig.ValueElement createValueElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.saml2.jaxb.entityconfig.impl.ValueElementImpl();\n}\n", "nl": "Create an instance of ValueElement", "id": "4264"}
{"code": "public synchronized void readDone(){\n  if (--currentReaders == 0) {\n    notify_writers();\n  }\n}\n", "nl": "Release the lock. You must call this method when you're done with the read operation.", "id": "7383"}
{"code": "private void checkComplianceAttributes(AttrSet attrSet,boolean ignoreCompliance) throws AMException {\n  if (!ignoreCompliance && ComplianceServicesImpl.isComplianceUserDeletionEnabled()) {\n    complianceImpl.verifyAttributes(attrSet);\n  }\n}\n", "nl": "Checks for Compliance related attributes if applicable. The check can be over-ridden by setting the ignoreCompliance to true", "id": "13262"}
{"code": "public FSAccountFedInfo readAccountFedInfo(String userID,String providerID) throws FSAccountMgmtException {\n  return readAccountFedInfo(userID,providerID,null);\n}\n", "nl": "Reads Account's federation Info from data store for given  providerID and returns value as fedInfo object. Returns null if value not found for given providerID", "id": "54813"}
{"code": "private int calculateHashCode(){\n  return 32 + toString.hashCode();\n}\n", "nl": "Calculates the hashCode. To be called after the calculateToString is called.", "id": "54460"}
{"code": "public boolean before(Date when){\n  return getMillisOf(this) < getMillisOf(when);\n}\n", "nl": "Tests if this date is before the specified date.", "id": "41495"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(nodeentityreferencenodevalue.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "299"}
{"code": "void reportError(String message) throws SAXException {\n  if (errorHandler != null)   errorHandler.error(makeException(message));\n}\n", "nl": "Report a non-fatal error.", "id": "26703"}
{"code": "public boolean isLeap(){\n  return Year.isLeap(year);\n}\n", "nl": "Checks if the year is a leap year, according to the ISO proleptic calendar system rules. <p> This method applies the current rules for leap years across the whole time-line. In general, a year is a leap year if it is divisible by four without remainder. However, years divisible by 100, are not leap years, with the exception of years divisible by 400 which are. <p> For example, 1904 is a leap year it is divisible by 4. 1900 was not a leap year as it is divisible by 100, however 2000 was a leap year as it is divisible by 400. <p> The calculation is proleptic - applying the same rules into the far future and far past. This is historically inaccurate, but is correct for the ISO-8601 standard.", "id": "15298"}
{"code": "public static SearchFilter createGreaterOrEqualFilter(AttributeType attributeType,ByteString assertionValue){\n  return new SearchFilter(FilterType.GREATER_OR_EQUAL,null,null,attributeType,null,assertionValue,null,null,null,null,false);\n}\n", "nl": "Creates a greater-or-equal search filter with the provided information.", "id": "10633"}
{"code": "public void key_typed_action(char p_key_char){\n  if (board_is_read_only)   return;\n  StateInteractive return_state=interactive_state.key_typed(p_key_char);\n  if (return_state != null && return_state != interactive_state) {\n    set_interactive_state(return_state);\n    board_panel.board_frame.hilight_selected_button();\n    repaint();\n  }\n}\n", "nl": "Action to be taken in the current interactive state when a key on the keyboard is typed.", "id": "30049"}
{"code": "@AfterClass public void classCleanUp() throws Exception {\n  logger.error(LocalizableMessage.raw(\" ##### Calling ReplicationTestCase.classCleanUp ##### \"));\n  removeReplicationServerDB();\n  cleanConfigEntries();\n  cleanRealEntries();\n  TestCaseUtils.initializeTestBackend(true);\n  if (callParanoiaCheck) {\n    paranoiaCheck();\n  }\n}\n", "nl": "Clean up the environment. return null;", "id": "33037"}
{"code": "public ResultHandler<Token,CoreTokenException> create(Token token) throws CoreTokenException {\n  applyBlobStrategy(token);\n  debug(\"Create: queued {0} Token {1}\\n{2}\",token.getType(),token.getTokenId(),token);\n  final ResultHandler<Token,CoreTokenException> createHandler=handlerFactory.getCreateHandler();\n  dispatcher.create(token,createHandler);\n  return createHandler;\n}\n", "nl": "Create a token in the persistent store.", "id": "56305"}
{"code": "boolean inOpenRange(K key,K least,K fence){\n  if (key == null)   throw new NullPointerException();\n  return ((least == null || compare(key,least) >= 0) && (fence == null || compare(key,fence) <= 0));\n}\n", "nl": "Returns true if given key greater than or equal to least and less or equal to fence. Needed mainly in submap operations.", "id": "16064"}
{"code": "public boolean isDiscardIfFileAltered(String frameID){\n  return discardIfFileAlteredFrames.contains(frameID);\n}\n", "nl": "If file changes discard these frames", "id": "31449"}
{"code": "public void dispatch(NamingListener listener){\n  listener.namingExceptionThrown(this);\n}\n", "nl": "Invokes the <tt>namingExceptionThrown()</tt> method on a listener using this event.", "id": "31569"}
{"code": "@Override public boolean markSupported(){\n  return fInputStream.markSupported();\n}\n", "nl": "Tell whether this stream supports the mark() operation.", "id": "14549"}
{"code": "public SignerInfoGenerator build(ContentSigner contentSigner,byte[] subjectKeyIdentifier) throws OperatorCreationException {\n  SignerIdentifier sigId=new SignerIdentifier(new DEROctetString(subjectKeyIdentifier));\n  return createGenerator(contentSigner,sigId);\n}\n", "nl": "Build a generator with the passed in subjectKeyIdentifier as the signerIdentifier. If used  you should try to follow the calculation described in RFC 5280 section 4.2.1.2.", "id": "478"}
{"code": "synchronized void recursiveSync(int iter){\n  if (iter < 40) {\n    recursiveSync(iter + 1);\n  }\n else {\n    System.out.println(\"recursiveSync ok\");\n  }\n}\n", "nl": "Recursive synchronized method.", "id": "32794"}
{"code": "public PollingWaitCallback build(){\n  return new PollingWaitCallback(this);\n}\n", "nl": "finalise the construction process and return the completed PollingWaitCallback Object.", "id": "14283"}
{"code": "public ScriptCompiler add(String classPath) throws IOException {\n  compiler.add(classPath);\n  return this;\n}\n", "nl": "add class path", "id": "34622"}
{"code": "public boolean containsJwt(String tokenId){\n  return containsJwt(new SessionID(tokenId));\n}\n", "nl": "Determines whether the given token id contains a client-side JWT.", "id": "31339"}
{"code": "public void generate_snapshot(){\n  undo_items.generate_snapshot();\n  brd_components.generate_snapshot();\n}\n", "nl": "Makes the current board situation restorable by undo.", "id": "56453"}
{"code": "public void onLoginFailure(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response) throws AuthenticationException {\n}\n", "nl": "Post processing on failed authentication.", "id": "56218"}
{"code": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(name);\n  if (hasDescription()) {\n    sb.append(\" (\");\n    sb.append(description);\n    sb.append(\")\");\n  }\n  return sb.toString();\n}\n", "nl": "Gets a string representation of this object.", "id": "43264"}
{"code": "public void appendDataTo(StringBuilder stringBuilder){\n  stringBuilder.append(buffer);\n}\n", "nl": "Appends this node's text content to the given builder.", "id": "28022"}
{"code": "public void start_scope() throws IOException {\n  new_line();\n  write(BEGIN_SCOPE);\n  current_indent_level++;\n}\n", "nl": "Begins a new scope.", "id": "38418"}
{"code": "private @Nonnull StepStartNode addBodyStartFlowNode(FlowHead head){\n  StepStartNode start=new StepStartNode(head.getExecution(),context.getStepDescriptor(),head.get());\n  this.startNodeId=start.getId();\n  start.addAction(new BodyInvocationAction());\n  head.setNewHead(start);\n  return start;\n}\n", "nl": "Inserts the flow node that indicates the beginning of the body invocation.", "id": "17003"}
{"code": "public boolean isSpecified(int index){\n  if (index < 0 || index >= getLength())   throw new ArrayIndexOutOfBoundsException(\"No attribute at index: \" + index);\n  return specified[index];\n}\n", "nl": "Returns the current value of an attribute's \"specified\" flag.", "id": "8158"}
{"code": "public static void putLayer(JComponent c,int layer){\n  Integer layerObj;\n  layerObj=new Integer(layer);\n  c.putClientProperty(LAYER_PROPERTY,layerObj);\n}\n", "nl": "Sets the layer property on a JComponent. This method does not cause any side effects like setLayer() (painting, add/remove, etc). Normally you should use the instance method setLayer(), in order to get the desired side-effects (like repainting).", "id": "31689"}
{"code": "public static Keymap removeKeymap(String nm){\n  return getKeymapTable().remove(nm);\n}\n", "nl": "Removes a named keymap previously added to the document.  Keymaps with <code>null</code> names may not be removed in this way.", "id": "15048"}
{"code": "public void create(SSOToken token,String dn,Map attrs) throws SMSException, SSOException {\n  create(token.getPrincipal(),dn,attrs);\n  objectChanged(dn,ADD);\n}\n", "nl": "Create an entry in the directory", "id": "4836"}
{"code": "public boolean validate(String value){\n  if ((value.indexOf(\"://\") != -1))   return true;\n  return false;\n}\n", "nl": "Determines whether the specified string is a valid URL", "id": "24007"}
{"code": "public boolean isLocked(){\n  return locked;\n}\n", "nl": "Gets whether the layer is currently locked or not. If the layer is locked, it will not be possible to change its state (on/off) in a viewer.", "id": "41949"}
{"code": "public static void addEntry(Entry entry) throws Exception {\n  AddOperation addOperation=getRootConnection().processAdd(entry);\n  assertEquals(addOperation.getResultCode(),ResultCode.SUCCESS);\n}\n", "nl": "Adds the provided entry to the Directory Server using an internal operation.", "id": "20099"}
{"code": "private void checkChangelogSize(int expectedCount) throws Exception {\n}\n", "nl": "Check that the expected number of changes are in the replication server database.", "id": "28604"}
{"code": "public long length() throws SerialException {\n  isValid();\n  return len;\n}\n", "nl": "Retrieves the number of bytes in this <code>SerialBlob</code> object's array of bytes.", "id": "36651"}
{"code": "public void writeRejectedEntries(String rejectFile,ExistingFileBehavior existingFileBehavior) throws IOException {\n  if (rejectFile == null) {\n    closeRejectWriter();\n    return;\n  }\n  final BufferedWriter writer=newBufferedWriter(rejectFile,existingFileBehavior,ERR_REJECT_FILE_EXISTS);\n  if (writer != null) {\n    rejectWriter=writer;\n  }\n}\n", "nl": "Indicates that rejected entries should be written to the specified file.  Note that this applies only to entries that are rejected because they are invalid (e.g., are malformed or don't conform to schema requirements), and not to entries that are rejected because they matched exclude criteria.", "id": "49775"}
{"code": "public void runTo(int index){\n  if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_CANNOT_INDEX,null));\n  if ((index >= 0) && (m_next < m_firstFree))   m_next=index;\n else   m_next=m_firstFree - 1;\n}\n", "nl": "If an index is requested, NodeSet will call this method to run the iterator to the index.  By default this sets m_next to the index.  If the index argument is -1, this signals that the iterator should be run to the end.", "id": "5878"}
{"code": "public static Application saveApplication(Subject adminSubject,String realm,Application application) throws EntitlementException {\n  return getApplicationService(adminSubject,realm).saveApplication(application);\n}\n", "nl": "Saves application data.", "id": "18098"}
{"code": "public String encode(){\n  return INFORMATION_FIELD + information + Separators.NEWLINE;\n}\n", "nl": "Get the string encoded version of this object", "id": "42856"}
{"code": "public static void main(final String[] args){\n  DOMTestCase.doMain(prefix08.class,args);\n}\n", "nl": "Runs this test from the command line.", "id": "43677"}
{"code": "@Override public void characters(char buffer[],int start,int length) throws SAXException {\n  if (saxLog.isDebugEnabled()) {\n    saxLog.debug(\"characters(\" + new String(buffer,start,length) + \")\");\n  }\n  bodyText.append(buffer,start,length);\n}\n", "nl": "Process notification of character data received from the body of an XML element.", "id": "49222"}
{"code": "public static boolean isPubid(int c){\n  return c < 0x10000 && (CHARS[c] & MASK_PUBID) != 0;\n}\n", "nl": "Returns true if the specified character is a valid Pubid character as defined by production [13] in the XML 1.0 specification.", "id": "56527"}
{"code": "@Override public com.liferay.blade.samples.servicebuilder.model.Foo addFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){\n  return _fooLocalService.addFoo(foo);\n}\n", "nl": "Adds the foo to the database. Also notifies the appropriate model listeners.", "id": "11912"}
{"code": "public boolean isValid(TagData data){\n  TagExtraInfo tei=getTagExtraInfo();\n  if (tei == null) {\n    return true;\n  }\n  return tei.isValid(data);\n}\n", "nl": "Translation-time validation of the attributes. This is a convenience method on the associated TagExtraInfo class.", "id": "52225"}
{"code": "public boolean useSSL(){\n  return useSSL;\n}\n", "nl": "Return the useSSL flag value.", "id": "51639"}
{"code": "private void enqueueTopoInfoToAllRSs(){\n  sendRSTopologyMsg=true;\n}\n", "nl": "Enqueues a TopologyMsg for all the connected replication servers in order to let them know our connected LDAP servers.", "id": "58086"}
{"code": "public void addLayoutComponent(Component comp,Object constraints){\n  invalidateLayout(comp.getParent());\n}\n", "nl": "Not used by this class.", "id": "6334"}
{"code": "public void registerEngineExtension(String extension,ScriptEngineFactory factory){\n  if (extension == null || factory == null)   throw new NullPointerException();\n  extensionAssociations.put(extension,factory);\n}\n", "nl": "Registers a <code>ScriptEngineFactory</code> to handle an extension. Overrides any such association found using the Discovery mechanism.", "id": "58686"}
{"code": "public static final int drawTabbedText(Segment s,int x,int y,Graphics g,TabExpander e,int startOffset){\n  return drawTabbedText(null,s,x,y,g,e,startOffset);\n}\n", "nl": "Draws the given text, expanding any tabs that are contained using the given tab expansion technique.  This particular implementation renders in a 1.1 style coordinate system where ints are used and 72dpi is assumed.", "id": "17089"}
{"code": "public int length(){\n  return str().length();\n}\n", "nl": "Returns the length of this string.", "id": "5743"}
{"code": "public static void removeLocalTypes(Collection<ClassNode> nodes){\n  for (  ClassNode cn : nodes) {\n    for (    MethodNode mn : cn.methods) {\n      if (mn.localVariables != null) {\n        for (        LocalVariableNode lvn : mn.localVariables) {\n          lvn.signature=null;\n        }\n      }\n    }\n  }\n}\n", "nl": "Removes the types of all local variables.", "id": "4609"}
{"code": "@BeforeClass public void startServer() throws Exception {\n  TestCaseUtils.startServer();\n}\n", "nl": "Ensures that the Directory Server is running.", "id": "51796"}
{"code": "public void dispatch(UnsolicitedNotificationListener listener){\n  listener.notificationReceived(this);\n}\n", "nl": "Invokes the <tt>notificationReceived()</tt> method on a listener using this event.", "id": "27816"}
{"code": "public static ComponentListener remove(ComponentListener l,ComponentListener oldl){\n  return (ComponentListener)removeInternal(l,oldl);\n}\n", "nl": "Removes the old component-listener from component-listener-l and returns the resulting multicast listener.", "id": "8287"}
{"code": "public TagAttribute buildAttribute(){\n  final TagAttribute attr=new TagAttributeImpl(getLocation(),getNamespace(),getLocalName(),getqName(),getValue());\n  return attr;\n}\n", "nl": "Builds the attribute.", "id": "1514"}
{"code": "@Override public synchronized boolean containsAll(Collection<?> collection){\n  return super.containsAll(collection);\n}\n", "nl": "Searches this vector for all objects in the specified collection.", "id": "16000"}
{"code": "public com.sun.identity.wsfederation.jaxb.wsspolicy.HeaderType createHeaderType() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.HeaderTypeImpl();\n}\n", "nl": "Create an instance of HeaderType", "id": "24272"}
{"code": "public static boolean dispatchCommand(CommandSender sender,String commandLine) throws CommandException {\n  return server.dispatchCommand(sender,commandLine);\n}\n", "nl": "Dispatches a command on this server, and executes it if found.", "id": "30368"}
{"code": "public boolean is_orthogonal(){\n  int lmax=plaline_len();\n  for (int index=0; index < lmax; ++index) {\n    if (plaline(index).is_orthogonal())     continue;\n    return false;\n  }\n  return true;\n}\n", "nl": "checks, if all lines of this polyline are orthogonal", "id": "49104"}
{"code": "void endRequest() throws IOException {\n  if (swallowInput && (lastActiveFilter != -1)) {\n    int extraBytes=(int)activeFilters[lastActiveFilter].end();\n    pos=pos - extraBytes;\n  }\n}\n", "nl": "End request (consumes leftover bytes).", "id": "21913"}
{"code": "EmulatedFields emulatedFields(){\n  return emulatedFields;\n}\n", "nl": "Return the actual EmulatedFields instance used by the receiver. We have the actual work in a separate class so that the code can be shared. The receiver has to be of a subclass of GetField.", "id": "54459"}
{"code": "public static boolean isXML11Name(int c){\n  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME) != 0) || (c >= 0x10000 && c < 0xF0000);\n}\n", "nl": "Returns true if the specified character is a valid name character as defined by production [4a] in the XML 1.1 specification.", "id": "30179"}
{"code": "public static void main(String[] args){\n  try {\n    LoginDialog dlg=new LoginDialog(org.opends.guitools.controlpanel.util.Utilities.createFrame(),new ApplicationTrustManager(null),5000);\n    dlg.pack();\n    dlg.setVisible(true);\n  }\n catch (  Exception ex) {\n    ex.printStackTrace();\n  }\n}\n", "nl": "Method written for testing purposes.", "id": "49220"}
{"code": "public String toString(){\n  return toString(true,false);\n}\n", "nl": "Translates the <code>StatusCode</code> to an XML document String based on the SAML schema.", "id": "30920"}
{"code": "public Duration dividedBy(long divisor){\n  if (divisor == 0) {\n    throw new ArithmeticException(\"Cannot divide by zero\");\n  }\n  if (divisor == 1) {\n    return this;\n  }\n  return create(toSeconds().divide(BigDecimal.valueOf(divisor),RoundingMode.DOWN));\n}\n", "nl": "Returns a copy of this duration divided by the specified value. <p> This instance is immutable and unaffected by this method call.", "id": "32914"}
{"code": "@Override public void close() throws NamingException {\n  if (!checkWritable()) {\n    return;\n  }\n  env.clear();\n}\n", "nl": "Closes this context. This method releases this context's resources immediately, instead of waiting for them to be released automatically by the garbage collector. This method is idempotent: invoking it on a context that has already been closed has no effect. Invoking any other method on a closed context is not allowed, and results in undefined behaviour.", "id": "16334"}
{"code": "public int indexOf(Object obj){\n  return this.hlist.indexOf(obj);\n}\n", "nl": "Return the index of a given object.", "id": "4763"}
{"code": "private List<Attribute> toAttributesList(List<AttributeBuilder> builders){\n  List<Attribute> results=new ArrayList<>(builders.size());\n  for (  AttributeBuilder builder : builders) {\n    results.add(builder.toAttribute());\n  }\n  return results;\n}\n", "nl": "Converts the provided List of AttributeBuilders to a new list of Attributes.", "id": "4578"}
{"code": "public AudienceRestriction createAudienceRestriction(Element elem) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUDIENCE_RESTRICTION,elem);\n  if (obj == null) {\n    return new AudienceRestrictionImpl(elem);\n  }\n else {\n    return (AudienceRestriction)obj;\n  }\n}\n", "nl": "Returns a new instance of <code>AudienceRestriction</code>. The return object is immutable.", "id": "10451"}
{"code": "protected Object configureValue(Object value){\n  if (value instanceof Integer) {\n    value=new Font(DefaultMetalTheme.getDefaultFontName(type),DefaultMetalTheme.getDefaultFontStyle(type),((Integer)value).intValue());\n  }\n  return super.configureValue(value);\n}\n", "nl": "Overriden to create a Font with the size coming from the desktop and the style and name coming from DefaultMetalTheme.", "id": "52770"}
{"code": "public TransactionTerminatedEvent extractCollectedTransactionTerminatedEvent(){\n  if (transactionTerminationCollector == null)   throw new TckInternalError(\"A timeout collect was attempted when the transactionTerminationCollector was null\");\n  TransactionTerminatedEvent collectedEvent=this.transactionTerminationCollector.collectedEvent;\n  transactionTerminationCollector.provider.removeSipListener(transactionTerminationCollector);\n  resetCollectors();\n  return collectedEvent;\n}\n", "nl": "Returns the collected javax.sip.DialogTerminatedEvent or null if no event has been collected. After this method is called the SipEventCollector will remove itself from the corresponding javax.sip.SipProvider and reset its internal state so that it could be reused.", "id": "39861"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.secext.EmbeddedElement createEmbeddedElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.EmbeddedElementImpl();\n}\n", "nl": "Create an instance of EmbeddedElement", "id": "51610"}
{"code": "private static void deregisterLocalBackend(DN baseDN){\nsynchronized (registeredLocalBackendsLock) {\n    LocalBackendWorkflowElement existingLocalBackend=registeredLocalBackends.get(baseDN);\n    if (existingLocalBackend != null) {\n      TreeMap<DN,LocalBackendWorkflowElement> newLocalBackends=new TreeMap<>(registeredLocalBackends);\n      newLocalBackends.remove(baseDN);\n      registeredLocalBackends=newLocalBackends;\n    }\n  }\n}\n", "nl": "Deregisters a local backend with the server.", "id": "57009"}
{"code": "@Override public void run(){\n  try {\n    templateFile.generateLDIF(inputStream);\n  }\n catch (  MakeLDIFException mle) {\n    inputStream.setIOException(new IOException(mle.getMessage()));\n    inputStream.closeEntryWriter();\n  }\ncatch (  IOException ioe) {\n    inputStream.setIOException(ioe);\n    inputStream.closeEntryWriter();\n  }\n}\n", "nl": "Operates in a loop, generating entries and feeding them to the input stream until either all entries have been generated or the input stream is closed.", "id": "2354"}
{"code": "public boolean containedIn(Oid[] oids){\n  for (int i=0; i < oids.length; i++) {\n    if (oids[i].equals(this))     return (true);\n  }\n  return (false);\n}\n", "nl": "A utility method to test if this Oid value is contained within the supplied Oid array.", "id": "16633"}
{"code": "public void handleButton2Request(RequestInvocationEvent event){\n  populateValues=true;\n  forwardTo();\n}\n", "nl": "Handles reset request.", "id": "13083"}
{"code": "@Override public void shutdown(){\nsynchronized (lock) {\n    shutdown=true;\n    logger.debug(\"Job Scheduler Stopped\");\n  }\n}\n", "nl": "<p> Called by the QuartzScheduler to inform the <code>JobStore</code> that it should free up all of it's resources because the scheduler is shutting down. </p>", "id": "36722"}
{"code": "public void runTest() throws Throwable {\n  Document doc;\n  NodeList elementList;\n  doc=(Document)load(\"staff\",false);\n  elementList=doc.getElementsByTagName(\"noMatch\");\n  assertSize(\"elementGetElementsByTagNameNoMatchNoMatchAssert\",0,elementList);\n}\n", "nl": "Runs the test case.", "id": "10381"}
{"code": "public static <A>ImmutableList<A> of(final A x1,final A x2,final A x3){\n  return new ImmutableList<>(x1,of(x2,x3));\n}\n", "nl": "Construct a list consisting of given elements.", "id": "24384"}
{"code": "@Override public int lengthOfMonth(){\n  return isoDate.lengthOfMonth();\n}\n", "nl": "Returns the length of the month represented by this date. <p> This returns the length of the month in days. Month lengths match those of the ISO calendar system.", "id": "34465"}
{"code": "private boolean useLocalTrustStoreIfPossible(){\n  try {\n    if (InetAddress.getLocalHost().getHostName().equals(state.hostName) && secureArgsList.getAdminPortFromConfig() == portNumber) {\n      final String trustStoreFileAbsolute=secureArgsList.getTruststoreFileFromConfig();\n      if (trustStoreFileAbsolute != null) {\n        secureArgsList.getTrustStorePathArg().addValue(trustStoreFileAbsolute);\n        return true;\n      }\n    }\n  }\n catch (  Exception ex) {\n  }\n  return false;\n}\n", "nl": "Add the TrustStore of the administration connector of the local instance.", "id": "57810"}
{"code": "public synchronized boolean isClosed(){\n  return closed;\n}\n", "nl": "Returns true if this cache has been closed.", "id": "41364"}
{"code": "public synchronized int read() throws IOException {\n  if (pos >= count) {\n    fill();\n    if (pos >= count)     return -1;\n  }\n  return getBufIfOpen()[pos++] & 0xff;\n}\n", "nl": "See the general contract of the <code>read</code> method of <code>InputStream</code>.", "id": "7018"}
{"code": "public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {\n  return exp1.apply(name) && exp2.apply(name);\n}\n", "nl": "Applies the AndQueryExp on a MBean.", "id": "5185"}
{"code": "public static void dropAllTables(SQLiteDatabase db,boolean ifExists){\n  GreenNewsDao.dropTable(db,ifExists);\n  GreenStrategyDao.dropTable(db,ifExists);\n  GreenUpdateDao.dropTable(db,ifExists);\n  GreenVideoDao.dropTable(db,ifExists);\n  GreenWatchedVideoDao.dropTable(db,ifExists);\n}\n", "nl": "Drops underlying database table using DAOs.", "id": "53478"}
{"code": "public boolean isCachedMemory(){\n  return false;\n}\n", "nl": "Returns <code>false</code> since this <code>ImageOutputStream</code> does not maintain a main memory cache.", "id": "898"}
{"code": "public int hashCode(){\n  if (isRoleIDP) {\n    return sessionPartner.hashCode() + 1;\n  }\n else {\n    return sessionPartner.hashCode() + 0;\n  }\n}\n", "nl": "Returns a hash code for this object.", "id": "23826"}
{"code": "public void clear(){\n  serverIdToCSN.clear();\n}\n", "nl": "Empty the ServerState. After this call the Server State will be in the same state as if it was just created.", "id": "53235"}
{"code": "@Override public void clear(){\n  data.clear();\n  notifyDataSetChanged();\n}\n", "nl": "Clear data list", "id": "16128"}
{"code": "public int invokeConfigureServer(String[] args) throws ApplicationException {\n  return ConfigureDS.configMain(args,System.out,System.err);\n}\n", "nl": "Invokes the method ConfigureDS.configMain with the provided parameters.", "id": "33046"}
{"code": "private static JsonValue checkIfExist(JsonValue jsonValue,String jsonLabel){\n  try {\n    return jsonValue.get(jsonLabel).required();\n  }\n catch (  JsonValueException e) {\n    debug.message(\"{} doesn't exist in {}.\",jsonLabel,jsonValue);\n    throw new IllegalArgumentException(jsonLabel + \" doesn't exist in \" + jsonValue+ \".\");\n  }\n}\n", "nl": "Check if a json attribute exist and return the value", "id": "40834"}
{"code": "protected File configFile(){\n  File file=new File(configFile);\n  if (!file.isAbsolute()) {\n    file=new File(Bootstrap.getCatalinaBase(),configFile);\n  }\n  return (file);\n}\n", "nl": "Return a File object representing our configuration file.", "id": "14224"}
{"code": "public void initialize(int keysize,SecureRandom random){\n}\n", "nl": "Initializes the key pair generator for a certain keysize with the given source of randomness (and a default parameter set).", "id": "6044"}
{"code": "public Set<BrdItem> filter(Set<BrdItem> p_items){\n  Set<BrdItem> result=new TreeSet<BrdItem>();\n  for (  BrdItem curr_item : p_items) {\n    if (curr_item.is_selected_by_filter(this)) {\n      result.add(curr_item);\n    }\n  }\n  return result;\n}\n", "nl": "Filters a collection of items with this filter.", "id": "6785"}
{"code": "public com.sun.identity.liberty.ws.common.jaxb.xmlsig.PGPDataElement createPGPDataElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.PGPDataElementImpl();\n}\n", "nl": "Create an instance of PGPDataElement", "id": "53729"}
{"code": "void detachView(){\n  getPresenter().detachView(delegateCallback.shouldInstanceBeRetained());\n}\n", "nl": "Called to detach the view from presenter", "id": "37036"}
{"code": "@Override public boolean accept(File dir,String name){\n  if (dir != null && new File(dir,name).isDirectory()) {\n    return false;\n  }\n  for (  String wildcard : wildcards) {\n    if (FilenameUtils.wildcardMatch(name,wildcard)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks to see if the filename matches one of the wildcards.", "id": "8329"}
{"code": "public char next(){\n  pos+=1;\n  int end=offset + count;\n  if (pos >= end) {\n    pos=end;\n    return DONE;\n  }\n  return current();\n}\n", "nl": "Increments the iterator's index by one and returns the character at the new index.  If the resulting index is greater or equal to getEndIndex(), the current index is reset to getEndIndex() and a value of DONE is returned.", "id": "12177"}
{"code": "public static ActionListener add(ActionListener a,ActionListener b){\n  return (ActionListener)addInternal(a,b);\n}\n", "nl": "Adds action-listener-a with action-listener-b and returns the resulting multicast listener.", "id": "323"}
{"code": "public static ByteString createGeneralizedTimeValue(long time){\n  return ByteString.valueOfUtf8(format(time));\n}\n", "nl": "Retrieves an attribute value containing a generalized time representation of the provided date.", "id": "765"}
{"code": "public String generatorSettings(){\n  return generatorSettings;\n}\n", "nl": "Gets the generator settings of the world that will be created or loaded", "id": "31793"}
{"code": "@Before public void init() throws IOException {\n  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();\n  git=new Git(repository);\n  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true);\n  unchecked(null);\n}\n", "nl": "Prepare common variables to access the git repository.", "id": "52855"}
{"code": "public boolean isClosed(){\n  return journalWriter == null;\n}\n", "nl": "Returns true if this cache has been closed.", "id": "19442"}
{"code": "public boolean equals(Object schemaType){\n  if (schemaType instanceof SchemaType) {\n    SchemaType s=(SchemaType)schemaType;\n    return (s.lSchemaType.equalsIgnoreCase(this.lSchemaType));\n  }\n  return (false);\n}\n", "nl": "Method to check if two schema types are equal.", "id": "54361"}
{"code": "private String formatMessage(String message,Object... args){\n  if (args == null || args.length == 0) {\n    return message;\n  }\n  return MessageFormatter.arrayFormat(message,args).getMessage();\n}\n", "nl": "Format a message containing '{}' as arguments placeholder.", "id": "53406"}
{"code": "public final Node peepTail(){\n  return m_map[m_firstFree - 1];\n}\n", "nl": "Return the node at the tail of the vector without popping Special purpose method for TransformerImpl, pushElemTemplateElement. Performance critical.", "id": "50759"}
{"code": "public AuditEvent auditAccessOutcome(){\n  if (response.hasSuccessStatusCode()) {\n    return auditAccessSuccess();\n  }\n else {\n    return auditAccessFailure();\n  }\n}\n", "nl": "Creates an audit event that captures details of the outcome from a HTTP call.", "id": "32132"}
{"code": "@Override public int doEndTag() throws JspException {\n  return super.doEndTag();\n}\n", "nl": "Default processing of the end tag returning EVAL_PAGE.", "id": "41525"}
{"code": "protected StringBuilder encodeBody(StringBuilder retval){\n  retval.append(Integer.toString(expires));\n  if (!parameters.isEmpty()) {\n    retval.append(SEMICOLON);\n    parameters.encode(retval);\n  }\n  return retval;\n}\n", "nl": "Encode the header content into a String.", "id": "12555"}
{"code": "public boolean isNameResolved(String beanName){\n  return false;\n}\n", "nl": "Can this resolver resolve the given bean name?", "id": "42427"}
{"code": "public Class<?> loadClass(String name,Map<String,byte[]> classBytes) throws ClassNotFoundException, IOException {\n  try (MemoryClassLoader classLoader=new MemoryClassLoader(classBytes)){\n    return classLoader.loadClass(name);\n  }\n }\n", "nl": "Load class from compiled classes.", "id": "43851"}
{"code": "public static String filterSchemaBackendName(final String dsCfgBackendName){\n  final String cfgNameRegExp=\"(.*)-backend.*\";\n  final Matcher regExpMatcher=Pattern.compile(cfgNameRegExp,Pattern.CASE_INSENSITIVE).matcher(dsCfgBackendName);\n  if (regExpMatcher.matches()) {\n    return regExpMatcher.group(1);\n  }\n  return dsCfgBackendName;\n}\n", "nl": "Filter the provided backend name by removing the backend suffix.", "id": "43157"}
{"code": "public static String makeKey(String host,int port,String transport){\n  return new StringBuilder(host).append(\":\").append(port).append(\"/\").append(transport).toString().toLowerCase();\n}\n", "nl": "Construct a key to refer to this structure from the SIP stack", "id": "35121"}
{"code": "public boolean isDataFlavorSupported(DataFlavor flavor){\n  return proxy.isDataFlavorSupported(flavor);\n}\n", "nl": "Returns whether or not the specified data flavor is supported by the encapsulated transferable.", "id": "54265"}
{"code": "public ByteBufferOutputStream append(String str){\n  if (str != null)   return append(str.getBytes(StandardCharsets.ISO_8859_1));\n  return this;\n}\n", "nl": "Appends a <CODE>String</CODE> to the buffer. The <CODE>String</CODE> is converted according to the encoding ISO-8859-1.", "id": "49472"}
{"code": "public String encodeBody(){\n  return encodeBody(new StringBuilder()).toString();\n}\n", "nl": "Encode into canonical form. Acknowledgement: contains a bug fix for a bug reported by Laurent Schwizer", "id": "3988"}
{"code": "public static BooleanArgument remoteArgument() throws ArgumentException {\n  return BooleanArgument.builder(OPTION_LONG_REMOTE).shortIdentifier(OPTION_SHORT_REMOTE).description(INFO_DESCRIPTION_REMOTE.get()).buildArgument();\n}\n", "nl": "Returns the \"remote\" boolean argument. <br> <i> N.B : the 'r' short option is also used by useSASLExternal, stopreason.</i>", "id": "45663"}
{"code": "public void removeResourceEnvRef(String name){\n  try {\n    envCtx.unbind(name);\n  }\n catch (  NamingException e) {\n    log.error(sm.getString(\"naming.unbindFailed\",e));\n  }\n}\n", "nl": "Set the specified resources in the naming context.", "id": "22226"}
{"code": "public void runTest() throws Throwable {\n  Document doc;\n  Element elementNode;\n  String elementValue;\n  doc=(Document)load(\"staff\",false);\n  elementNode=doc.getDocumentElement();\n  elementValue=elementNode.getNodeValue();\n  assertNull(\"elementNodeValueNull\",elementValue);\n}\n", "nl": "Runs the test case.", "id": "51958"}
{"code": "@BeforeClass public static void initClass(){\n  scenario=Scenarios.s4_linear_with_only_annotated_tags_and_branch();\n  if (Misc.isDebugMode()) {\n    System.out.println(\"git repository created under: \" + scenario.getRepositoryLocation());\n  }\n}\n", "nl": "Initialiaze the whole junit class tests ; creates the git scenario.", "id": "55032"}
{"code": "public boolean hasExpired(long maxtime){\n  long delta=System.currentTimeMillis() - lastHeardFrom;\n  return delta > maxtime;\n}\n", "nl": "Check if this member has expired.", "id": "57627"}
{"code": "public GenericObject next(ListIterator li){\n  return (NetObject)super.next(li);\n}\n", "nl": "returns the next element", "id": "57897"}
{"code": "@AfterClass @Override public void classCleanUp() throws Exception {\n  callParanoiaCheck=false;\n  super.classCleanUp();\n  replicationServer.remove();\n  paranoiaCheck();\n}\n", "nl": "Clean up the environment.", "id": "22716"}
{"code": "@Override public void execute() throws BuildException {\n  super.execute();\n  execute(createQueryString(\"/sessions\").toString());\n}\n", "nl": "Execute the requested operation.", "id": "22496"}
{"code": "public static <T>java.util.List<T> dynamicQuery(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){\n  return getService().dynamicQuery(dynamicQuery);\n}\n", "nl": "Performs a dynamic query on the database and returns the matching rows.", "id": "57887"}
{"code": "public SchemaBuilder addToSchemaOverwrite(){\n  return getSchemaBuilder().addObjectClass(new ObjectClass(this),true);\n}\n", "nl": "Adds this object class to the schema overwriting any existing object class with the same numeric OID.", "id": "35716"}
{"code": "public com.sun.identity.liberty.ws.disco.jaxb.EncryptedResourceIDElement createEncryptedResourceIDElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.disco.jaxb.impl.EncryptedResourceIDElementImpl();\n}\n", "nl": "Create an instance of EncryptedResourceIDElement", "id": "34449"}
{"code": "private void applyPartnerDeviceProfileOverrides(Context context,DisplayMetrics dm){\n  Partner p=Partner.get(context.getPackageManager());\n  if (p != null) {\n    p.applyInvariantDeviceProfileOverrides(this,dm);\n  }\n}\n", "nl": "Apply any Partner customization grid overrides. Currently we support: all apps row / column count.", "id": "35857"}
{"code": "public void sendNotification(Notification notification){\n  if (notification.getSequenceNumber() < 1) {\nsynchronized (this) {\n      notification.setSequenceNumber(this.sequenceNumber++);\n    }\n  }\n  broadcaster.sendNotification(notification);\n}\n", "nl": "Enables the MBean server to send a notification. If the passed <var>notification</var> has a sequence number lesser or equal to 0, then replace it with the delegate's own sequence number.", "id": "9306"}
{"code": "public boolean hasName(final String name){\n  for (  final String n : names) {\n    if (n.equalsIgnoreCase(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Indicates whether this schema definition has the specified name.", "id": "16902"}
{"code": "private static int capacity(int expectedSize){\n  if (expectedSize < 3) {\n    checkNonnegative(expectedSize,\"expectedSize\");\n    return expectedSize + 1;\n  }\n  if (expectedSize < MAX_POWER_OF_TWO) {\n    return (int)((float)expectedSize / 0.75F + 1.0F);\n  }\n  return Integer.MAX_VALUE;\n}\n", "nl": "Returns a capacity that is sufficient to keep the map from being resized as long as it grows no larger than expectedSize and the load factor is >= its default (0.75).", "id": "33519"}
{"code": "private void turnOffBluetooth(){\n  BluetoothAdapter mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();\n  if (mBluetoothAdapter.isEnabled()) {\n    mBluetoothAdapter.disable();\n  }\n  ResultProcessor.process(this,intent,ResultProcessor.RESULT_SUCCESS,getString(R.string.bluetooth_turned_off));\n}\n", "nl": "turn off the bluetooth.", "id": "12975"}
{"code": "@Override public void allObjectsChanged(){\n  try {\n    createServices();\n  }\n catch (  SSOException e) {\n    debug.error(\"Could not recreate SMS REST services\",e);\n  }\ncatch (  SMSException e) {\n    debug.error(\"Could not recreate SMS REST services\",e);\n  }\n}\n", "nl": "When all SMS objects have changed, we reload all the routes.", "id": "33213"}
{"code": "public Class<? extends Enum> enumType(){\n  return enumType;\n}\n", "nl": "Returns the type of the missing enum constant.", "id": "20627"}
{"code": "@Override public boolean accept(File file){\n  if (file.isDirectory()) {\n    return false;\n  }\n  for (  String wildcard : wildcards) {\n    if (FilenameUtils.wildcardMatch(file.getName(),wildcard)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks to see if the filename matches one of the wildcards.", "id": "36842"}
{"code": "public LongInfo addLongInfo(long value) throws JavaSpecificationViolation {\n  LongInfo longinfo=new LongInfo(this,value);\n  addItem(longinfo);\n  addItem(new ConstantPoolPadding(this));\n  return longinfo;\n}\n", "nl": "Adds a blank entry afterwards since 8 byte contants take two constant pool entries.", "id": "25891"}
{"code": "public boolean contains(Object attrVal){\n  return (find(attrVal) >= 0);\n}\n", "nl": "Determines whether a value is in this attribute. <p> By default, <tt>Object.equals()</tt> is used when comparing <tt>attrVal</tt> with this attribute's values except when <tt>attrVal</tt> is an array. For an array, each element of the array is checked using <tt>Object.equals()</tt>. A subclass may use schema information to determine equality.", "id": "7017"}
{"code": "public com.sun.identity.liberty.ws.idpp.jaxb.VATElement createVATElement() throws javax.xml.bind.JAXBException {\n  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.VATElementImpl();\n}\n", "nl": "Create an instance of VATElement", "id": "28993"}
{"code": "public int hashCode(){\n  return hash;\n}\n", "nl": "Override the hashCode() method in the Object class", "id": "46990"}
{"code": "public Object clone() throws CloneNotSupportedException {\n  TemplateSubPatternAssociation tspa=(TemplateSubPatternAssociation)super.clone();\n  tspa.m_next=null;\n  return tspa;\n}\n", "nl": "Clone this object.", "id": "6001"}
{"code": "public AssertionIDRequest createAssertionIDRequest(String value) throws SAML2Exception {\n  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ASSERTION_ID_REQUEST,value);\n  if (obj == null) {\n    return new AssertionIDRequestImpl(value);\n  }\n else {\n    return (AssertionIDRequest)obj;\n  }\n}\n", "nl": "Returns the <code>AssertionIDRequest</code> Object.", "id": "8800"}
{"code": "public static double parseDouble(String lexicalXSDDouble){\n  if (theConverter == null)   initConverter();\n  return theConverter.parseDouble(lexicalXSDDouble);\n}\n", "nl": "<p> Converts the string argument into a double value.", "id": "41139"}
{"code": "final boolean addResult(Entry entry){\n  try {\n    return resultQueue.offer(entry,10,TimeUnit.SECONDS);\n  }\n catch (  InterruptedException ie) {\n    return false;\n  }\n}\n", "nl": "Adds the provided entry to the set of results that should be returned for this member list.", "id": "9852"}
{"code": "@Override public void toString(StringBuilder buffer){\n  buffer.append(\"AbandonRequest(idToAbandon=\");\n  buffer.append(idToAbandon);\n  buffer.append(\")\");\n}\n", "nl": "Appends a string representation of this LDAP protocol op to the provided buffer.", "id": "53668"}
{"code": "public void printCloseTag(PrintWriter aWriter,StoreDescription aDesc) throws Exception {\n  aWriter.print(\"</\");\n  aWriter.print(aDesc.getTag());\n  aWriter.println(\">\");\n}\n", "nl": "Print the closing tag.", "id": "48855"}
{"code": "public boolean isAlreadyConnectedToDS(DataServerHandler dsHandler){\n  if (connectedDSs.containsKey(dsHandler.getServerId())) {\n    logger.error(ERR_DUPLICATE_SERVER_ID,localReplicationServer.getMonitorInstanceName(),connectedDSs.get(dsHandler.getServerId()),dsHandler,dsHandler.getServerId());\n    return true;\n  }\n  return false;\n}\n", "nl": "Checks whether it is already connected to a DS with same id.", "id": "28716"}
{"code": "public int size(){\n  if (size == 0)   return 0;\n  expungeStaleEntries();\n  return size;\n}\n", "nl": "Returns the number of key-value mappings in this map. This result is a snapshot, and may not reflect unprocessed entries that will be removed before next attempted access because they are no longer referenced.", "id": "20735"}
{"code": "public void return_from_state(){\n  if (board_is_read_only)   return;\n  StateInteractive new_state=interactive_state.complete();\n  if (new_state != interactive_state) {\n    set_interactive_state(new_state);\n    repaint();\n  }\n}\n", "nl": "Completes the curreent interactive state and returns to its return state.", "id": "58449"}
{"code": "public ClientConfig findClient(String ipAddress){\n  return clients.get(ipAddress);\n}\n", "nl": "Returns the defined client for the given IP address or null if not client for that IP address is defined.", "id": "47535"}
{"code": "public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  doGetPost(request,response);\n}\n", "nl": "Handles the HTTP GET request.", "id": "35087"}
{"code": "public void mark(int readAheadLimit) throws IOException {\nsynchronized (lock) {\n    super.mark(readAheadLimit);\n    markedLineNumber=lineNumber;\n    markedSkipLF=skipLF;\n  }\n}\n", "nl": "Mark the present position in the stream.  Subsequent calls to reset() will attempt to reposition the stream to this point, and will also reset the line number appropriately.", "id": "53278"}
{"code": "public boolean equals(Object object){\n  return (super.equals(object) && object instanceof JobKOctetsSupported);\n}\n", "nl": "Returns whether this job K octets supported attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: <OL TYPE=1> <LI> <CODE>object</CODE> is not null. <LI> <CODE>object</CODE> is an instance of class JobKOctetsSupported. <LI> This job K octets supported attribute's members and <CODE>object</CODE>'s members are the same. </OL>", "id": "30553"}
{"code": "public void clearInMemory(){\n  state.clear();\n  state.setSaved(false);\n}\n", "nl": "Empty the ServerState. After this call the Server State will be in the same state as if it was just created.", "id": "34383"}
{"code": "static void failIfNotInitialized() throws IllegalStateException {\n  if (!mInitialized) {\n    throw new IllegalStateException(\"Storo instance is not initialized! You must call initialize() before calling any other methods.\");\n  }\n}\n", "nl": "Checks if the Storo instance has been initialized", "id": "37534"}
{"code": "public static String formatNumber(Number count){\n  Format numberFormatter=getNumberFormatter(DEFAULT_NUMBER_FORMAT);\n  return numberFormatter.format(count);\n}\n", "nl": "Format number.", "id": "5574"}
{"code": "public String to_string(){\n  return name;\n}\n", "nl": "Returns the string of this instance", "id": "2254"}
{"code": "public int size(){\n  return size;\n}\n", "nl": "Returns the number of elements in this set.", "id": "8116"}
{"code": "public boolean isTimestampWithinInterval(DateTime timestamp,String intervalString) throws IllegalArgumentException {\n  Interval interval=Interval.parse(intervalString);\n  return interval.contains(timestamp);\n}\n", "nl": "Returns true if the supplied timestamp is within the specified time interval.  The supplied interval string  should contain an ISO 8601 formatted interval string and may be of the formats 'datetime/datetime',  'datetime/period' or 'period/datetime'", "id": "7050"}
{"code": "private AttributeTypePropertyDefinition createPropertyDefinition(){\n  AttributeTypePropertyDefinition.Builder builder=AttributeTypePropertyDefinition.createBuilder(RootCfgDefn.getInstance(),\"test-property\");\n  return builder.getInstance();\n}\n", "nl": "Create a new definition.", "id": "51627"}
