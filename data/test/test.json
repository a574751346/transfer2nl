{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MoveBehindATK_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200991,skillcaster,num0,skilltarget,skillname);\n}\n", "nl": "[%SkillCaster] inflicted %num0 damage on [%SkillTarget] by using [%SkillName].", "id": "55874"}
{"code": "private void stop(){\n  if (start == 0) {\n    LOG.warn(\"Tried to stop timer that has not been started: {}\",name);\n    return;\n  }\n  duration+=System.nanoTime() - start;\n  REGISTRY.timer(name).update(duration,TimeUnit.NANOSECONDS);\n  start=0;\n}\n", "nl": "Stop the phase.", "id": "16254"}
{"code": "public static boolean gr(double a,double b){\n  return (a - b > SMALL);\n}\n", "nl": "Tests if a is greater than b.", "id": "58416"}
{"code": "public void showLoading(List<Integer> skipIds){\n  switchState(LOADING,null,null,null,null,skipIds);\n}\n", "nl": "Hide content and show the progress bar", "id": "50209"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_ABSTATUS_SKILL_CAN_NOT_BE_TURNED_OFF_BY_TARGET(String value0){\n  return new SM_SYSTEM_MESSAGE(1300056,value0);\n}\n", "nl": "The %0 skill effect cannot be removed.", "id": "46072"}
{"code": "public boolean isDistinct(){\n  return distinct;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.news", "id": "28736"}
{"code": "public void removeScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.remove(listener);\n}\n", "nl": "Removes wheel scrolling listener", "id": "41195"}
{"code": "protected boolean hasDropExportStart(Drop drop){\n  return drop.getDropExporterConfig() != null;\n}\n", "nl": "Check if the export has started", "id": "53542"}
{"code": "public Color mul(float value){\n  this.r*=value;\n  this.g*=value;\n  this.b*=value;\n  this.a*=value;\n  clamp();\n  return this;\n}\n", "nl": "Multiplies all components of this Color with the given value.", "id": "54783"}
{"code": "public void closeDriver(){\n  if (camera != null) {\n    FlashlightManager.disableFlashlight();\n    camera.release();\n    camera=null;\n  }\n}\n", "nl": "Closes the camera driver if still in use.", "id": "46153"}
{"code": "private void notifyNewTabCreated(Tab tab){\n  for (  TabModelSelectorObserver listener : mObservers) {\n    listener.onNewTabCreated(tab);\n  }\n}\n", "nl": "Notifies all the listeners that a new tab has been created.", "id": "13202"}
{"code": "public final CharSequence yytext(){\n  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);\n}\n", "nl": "Returns the text matched by the current regular expression.", "id": "32941"}
{"code": "public PollsAddVoteQuery addVote(UserActor actor,int pollId,int answerId){\n  return new PollsAddVoteQuery(getClient(),actor,pollId,answerId);\n}\n", "nl": "Adds the current user's vote to the selected answer in the poll.", "id": "41305"}
{"code": "@TargetApi(8) public Bundler putCharSequenceArrayList(String key,ArrayList<CharSequence> value){\n  bundle.putCharSequenceArrayList(key,value);\n  return this;\n}\n", "nl": "Inserts an ArrayList<CharSequence> value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.", "id": "10772"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SwitchHPMP_Instant_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200428,skillname);\n}\n", "nl": "You exchanged your MP with your HP by using [%SkillName].", "id": "37045"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_FORCE_MATCH_JUST_INVITE(String value0){\n  return new SM_SYSTEM_MESSAGE(1400192,value0);\n}\n", "nl": "You have invited %0 to join the alliance.", "id": "39767"}
{"code": "public void showButtons(){\n  mAlert.showButtons();\n}\n", "nl": "Show all buttons. NOTE: This only work if the buttons are icon button.", "id": "45307"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Curse_END_A_TO_SELF(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200777,skilltarget);\n}\n", "nl": "[%SkillTarget] is released from the cursed state.", "id": "13371"}
{"code": "public void releaseScan(){\n  release();\n}\n", "nl": "release SLHolder for this scan", "id": "16698"}
{"code": "@NotNull public static String listToString(@NotNull JListFixture list){\n  return listToString(list,0,Integer.MAX_VALUE,40);\n}\n", "nl": "Pretty-prints the given list fixture", "id": "51403"}
{"code": "public String toString(){\n  return this.mode == 'd' ? this.writer.toString() : null;\n}\n", "nl": "Return the JSON text. This method is used to obtain the product of the JSONStringer instance. It will return <code>null</code> if there was a problem in the construction of the JSON text (such as the calls to <code>array</code> were not properly balanced with calls to <code>endArray</code>).", "id": "46779"}
{"code": "public Criteria createCriteria(){\n  Criteria criteria=createCriteriaInternal();\n  if (oredCriteria.size() == 0) {\n    oredCriteria.add(criteria);\n  }\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.users", "id": "8447"}
{"code": "private synchronized void refreshPermissions(){\n  if (userData == null) {\n    return;\n  }\n  UserData ud=userData;\n  ud.recalculatePermissions();\n  ud.recalculateMeta();\n  getPlugin().getApiProvider().fireEventAsync(new UserPermissionRefreshEvent(new UserLink(this)));\n}\n", "nl": "Refresh and re-assign the users permissions Blocking call.", "id": "22467"}
{"code": "public Vector3f mult(float scalar){\n  return new Vector3f(x * scalar,y * scalar,z * scalar);\n}\n", "nl": "<code>mult</code> multiplies this vector by a scalar. The resultant vector is returned.", "id": "11038"}
{"code": "private void fillBuf() throws IOException {\n  int result=in.read(buf,0,buf.length);\n  if (result == -1) {\n    throw new EOFException();\n  }\n  pos=0;\n  end=result;\n}\n", "nl": "Reads new input data into the buffer. Call only with pos == end or end == -1, depending on the desired outcome if the function throws.", "id": "314"}
{"code": "public void configureIndicator(int indicatorWidth,int indicatorHeight,int indicatorMargin){\n  configureIndicator(indicatorWidth,indicatorHeight,indicatorMargin,R.animator.scale_with_alpha,0,R.drawable.white_radius,R.drawable.white_radius);\n}\n", "nl": "Create and configure Indicator in Java code.", "id": "7630"}
{"code": "public static void openWirelessNetworkSettings(Context context){\n  if (android.os.Build.VERSION.SDK_INT > 10) {\n    context.startActivity(new Intent(android.provider.Settings.ACTION_SETTINGS));\n  }\n else {\n    context.startActivity(new Intent(android.provider.Settings.ACTION_WIRELESS_SETTINGS));\n  }\n}\n", "nl": "open the wireless network settings", "id": "16506"}
{"code": "protected MarketReportCommentQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n", "nl": "Complaint reason", "id": "32868"}
{"code": "public void add(PushLog log){\n  configPushLogDao.save(log);\n  if (!configPushLogDao.bindApp(log)) {\n    Logs.error(\"failed to bind app of log({})\",log);\n  }\n}\n", "nl": "Save the config", "id": "55104"}
{"code": "public RTText convertTo(RTFormat destFormat,RTMediaFactory<RTImage,RTAudio,RTVideo> mediaFactory){\n  if (destFormat == mRTFormat) {\n    return this;\n  }\n  throw new UnsupportedOperationException(\"Can't convert from \" + mRTFormat.getClass().getSimpleName() + \" to \"+ destFormat.getClass().getSimpleName());\n}\n", "nl": "Converts this rich text to another rich text. The default implementation doesn't support any conversion except the one to itself (which is technically no conversion). <p> The method has to make sure that the original rich text isn't modified. It does however not make sure that the returned RTText isn't referencing the original RTText meaning modifying the resulting object might also modify the original object.", "id": "37129"}
{"code": "public void startPreview(){\n  if (camera != null && !previewing) {\n    camera.startPreview();\n    previewing=true;\n  }\n}\n", "nl": "Asks the camera hardware to begin drawing preview frames to the screen.", "id": "45068"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_END_A_TO_B(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200928,skilltarget);\n}\n", "nl": "[%SkillTarget] is no longer bound", "id": "53618"}
{"code": "public void incrementCurrentCount(boolean store) throws GenericEntityException {\n  if (store) {\n    info.set(\"recurrenceCount\",getCurrentCount() + 1);\n    info.store();\n  }\n}\n", "nl": "Increments the current count of this recurrence.", "id": "26333"}
{"code": "public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HE_LEAVED_PARTY_OFFLINE_TIMEOUT(String value0){\n  return new SM_SYSTEM_MESSAGE(1300203,value0);\n}\n", "nl": "%0 has been offline for too long and has been automatically kicked out of the group and the alliance.", "id": "3705"}
{"code": "public Boolean isLogQos(){\n  return logQos;\n}\n", "nl": "Gets the value of the logQos property.", "id": "10565"}
{"code": "public BlockId block(){\n  return blk;\n}\n", "nl": "Returns the block associated with this record ID.", "id": "57330"}
{"code": "public MyDialog contentView(int layoutId){\n  if (layoutId == 0)   return this;\n  View v=LayoutInflater.from(getContext()).inflate(layoutId,null);\n  return contentView(v);\n}\n", "nl": "Set the content view of this BottomSheetDialog.", "id": "23727"}
{"code": "public Set<Map.Entry<String,JsonElement>> entrySet(){\n  return members.entrySet();\n}\n", "nl": "Returns a set of members of this object. The set is ordered, and the order is in which the elements were added.", "id": "11788"}
{"code": "public Builder className(String className){\n  this.className=className;\n  return this;\n}\n", "nl": "Custom class name set on an element. </br> default empty string", "id": "21829"}
{"code": "public boolean containsKey(short key){\n  return contains(key);\n}\n", "nl": "checks for the present of <tt>key</tt> in the keys of the map.", "id": "22059"}
{"code": "@Override public void afterInjection(Object injectee){\n  setFramePath(injectee);\n  initFindByFields(injectee);\n  initPageObjectFields(injectee);\n  invokePostConstruct(injectee);\n}\n", "nl": "Guice will call this method automatically when it is done injecting the object. Don't call this method manually.", "id": "45007"}
{"code": "public TShortArrayList grep(TShortProcedure condition){\n  TShortArrayList list=new TShortArrayList();\n  for (int i=0; i < _pos; i++) {\n    if (condition.execute(_data[i])) {\n      list.add(_data[i]);\n    }\n  }\n  return list;\n}\n", "nl": "Searches the list for values satisfying <tt>condition</tt> in the manner of the *nix <tt>grep</tt> utility.", "id": "54026"}
{"code": "private void tryScrollBackToTop(){\n  if (!mPtrIndicator.isUnderTouch()) {\n    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);\n  }\n}\n", "nl": "Scroll back to to if is not under touch", "id": "28165"}
{"code": "public static final void popTransform(GL2 gl){\n  gl.glPopMatrix();\n}\n", "nl": "Removes the current OpenGL transformation matrix.", "id": "48816"}
{"code": "public Builder autoPanPaddingBottomRight(Point autoPanPaddingBottomRight){\n  this.autoPanPaddingBottomRight=autoPanPaddingBottomRight;\n  return this;\n}\n", "nl": "The margin between the popup and the bottom right corner of the map view after autopanning was performed.", "id": "31791"}
{"code": "public static String generateRandomHexString(int numChars){\n  StringBuilder sb=new StringBuilder();\n  while (sb.length() < numChars) {\n    sb.append(Integer.toHexString(RANDOM.nextInt()));\n  }\n  return sb.toString().substring(0,numChars);\n}\n", "nl": "Generates a random hex String with the given length.", "id": "29982"}
{"code": "public static boolean isUSPhoneAreaCode(String s){\n  if (isEmpty(s))   return defaultEmptyOK;\n  String normalizedPhone=stripCharsInBag(s,phoneNumberDelimiters);\n  return (isInteger(normalizedPhone) && normalizedPhone.length() == digitsInUSPhoneAreaCode);\n}\n", "nl": "isUSPhoneAreaCode returns true if string s is a valid U.S. Phone Area Code.  Must be 3 digits.", "id": "48253"}
{"code": "public void addEvent(String e){\n  if (TextUtils.isEmpty(e)) {\n    return;\n  }\n  if (event == null) {\n    event=new WXEvent();\n  }\n  if (containsEvent(e)) {\n    return;\n  }\n  event.add(e);\n}\n", "nl": "Add the given event for current object.", "id": "38376"}
{"code": "public void disableDashedLine(){\n  mDashPathEffect=null;\n}\n", "nl": "Disables the line to be drawn in dashed mode.", "id": "46135"}
{"code": "public int size(){\n  return 9;\n}\n", "nl": "Returns the size of this cp_info object.", "id": "55130"}
{"code": "public FaveGetPhotosQuery photoSizes(Boolean value){\n  return unsafeParam(\"photo_sizes\",value);\n}\n", "nl": "Set photo sizes", "id": "40077"}
{"code": "@Override public int available() throws IOException {\n  try {\n    return super.available();\n  }\n catch (  IOException e) {\n    handleIOException(e);\n    return 0;\n  }\n}\n", "nl": "Invokes the delegate's <code>available()</code> method.", "id": "12170"}
{"code": "@Override public WeibullDistribution makeDistribution(){\n  return new WeibullDistribution(1.2,2.1);\n}\n", "nl": "Creates the default continuous distribution instance to use in tests.", "id": "5549"}
{"code": "public static void requestPermission(CordovaPlugin plugin,int requestCode,String permission){\n  PermissionHelper.requestPermissions(plugin,requestCode,new String[]{permission});\n}\n", "nl": "Requests a \"dangerous\" permission for the application at runtime. This is a helper method alternative to cordovaInterface.requestPermission() that does not require the project to be built with cordova-android 5.0.0+", "id": "16148"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FACTION_HOSTIL(String value0){\n  return new SM_SYSTEM_MESSAGE(1300519,value0);\n}\n", "nl": "%0's Reputation has become Hostile.", "id": "32666"}
{"code": "public Single<AuthResult> createUserWithEmailAndPassword(final String _email,final String _password){\n  return observeSingleValue(firebaseAuth.createUserWithEmailAndPassword(_email,_password));\n}\n", "nl": "Allows to _create_ a user with a given email address and password", "id": "24145"}
{"code": "public PhotosEditAlbumQuery privacyView(String... value){\n  return unsafeParam(\"privacy_view\",value);\n}\n", "nl": "Set privacy view", "id": "31550"}
{"code": "public String toString(){\n  StringBuilder classPathBuilder=new StringBuilder(\"\");\n  for (  String cpEntry : _classpathList) {\n    classPathBuilder.append(cpEntry);\n    classPathBuilder.append(File.pathSeparatorChar);\n  }\n  return classPathBuilder.toString();\n}\n", "nl": "Converts the classpath to a platform compatible classpath String using the path separator character from the File class.", "id": "56359"}
{"code": "public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  String subSignature=method.getSubSignature();\n{\n    defaultMethod(method,thisVar,returnVar,params);\n    return;\n  }\n}\n", "nl": "Implements the abstract method simulateMethod. It distributes the request to the corresponding methods  by signatures.", "id": "10724"}
{"code": "public VideoReorderAlbumsQuery reorderAlbums(UserActor actor,int albumId){\n  return new VideoReorderAlbumsQuery(getClient(),actor,albumId);\n}\n", "nl": "Reorders the album in the list of user video albums.", "id": "5027"}
{"code": "private void removeEntry(String key){\n  CacheHeader entry=mEntries.get(key);\n  if (entry != null) {\n    mTotalSize-=entry.size;\n    mEntries.remove(key);\n  }\n}\n", "nl": "Removes the entry identified by 'key' from the cache.", "id": "43997"}
{"code": "public static SM_SYSTEM_MESSAGE STR_NO_SUCH_USER(String value0){\n  return new SM_SYSTEM_MESSAGE(1300627,value0);\n}\n", "nl": "%0 is not playing the game.", "id": "19385"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "55787"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GATHER_SUCCESS_1_BASIC(String value0){\n  return new SM_SYSTEM_MESSAGE(1330016,value0);\n}\n", "nl": "You have gathered %0.", "id": "27294"}
{"code": "private static FormatterFunction createBasicFormatterFunction(final ConversionMethod conversionMethod){\n  final FormatterFunction function=new FormatterFunction();\n  final ConversionFormatterDetails conversionFormatterDetails=new ConversionFormatterDetails();\n  conversionFormatterDetails.setFormat(conversionMethod);\n  function.setConversion(conversionFormatterDetails);\n  return function;\n}\n", "nl": "Creates a basic formatter function from the supplied conversion method.", "id": "39960"}
{"code": "public void startEntity(String name,String publicId,String systemId,String encoding) throws XNIException {\n}\n", "nl": "This method notifies of the start of an entity. The DTD has the pseudo-name of \"[dtd]\" and parameter entity names start with '%'. <p/> <strong>Note:</strong> Since the DTD is an entity, the handler will be notified of the start of the DTD entity by calling the startEntity method with the entity name \"[dtd]\" <em>before</em> calling the startDTD method.", "id": "18231"}
{"code": "public PhotosCreateCommentQuery fromGroup(Boolean value){\n  return unsafeParam(\"from_group\",value);\n}\n", "nl": "Post a comment from the community", "id": "30543"}
{"code": "public void init$Children(){\n  children=new ASTNode[3];\n  setChild(new Opt(),1);\n  setChild(new List(),2);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "3468"}
{"code": "public StreamMessage createStreamMessage() throws JMSException {\n  ensureOpen();\n  GSStreamMessageImpl streamMsg=new GSStreamMessageImpl(this);\n  return streamMsg;\n}\n", "nl": "Creates a <CODE>StreamMessage</CODE> object. A <CODE>StreamMessage</CODE> object is used to send a self-defining stream of primitive values in the Java programming language.", "id": "27764"}
{"code": "public void add(final SAMRecord read,final int position){\n  recordAndOffsets.add(new RecordAndOffset(read,position));\n}\n", "nl": "Accumulate info for one read at the locus.", "id": "36103"}
{"code": "@Override protected void handleIOException(IOException e) throws IOException {\n  throw new TaggedIOException(e,tag);\n}\n", "nl": "Tags any IOExceptions thrown, wrapping and re-throwing.", "id": "3149"}
{"code": "static void trackSyncError(@NotNull String errorType,@Nullable String extraInfo){\n  UsageTracker.getInstance().trackEvent(CATEGORY_GRADLE_SYNC_FAILURE,errorType,extraInfo,null);\n}\n", "nl": "Do NOT include any information that can identify the user in \"extraInfo\".", "id": "30967"}
{"code": "public void add(UIElement element){\n  elements.add(element);\n}\n", "nl": "Add a UI element to the container.", "id": "2728"}
{"code": "public GroupsEditManagerQuery role(GroupsEditManagerRole value){\n  return unsafeParam(\"role\",value);\n}\n", "nl": "Manager role.", "id": "38717"}
{"code": "public MessagesGetHistoryAttachmentsQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields", "id": "33146"}
{"code": "public DataFrame toDataFrame(JavaSparkContext jsc,DependencyGraph graph,FeatureFrame featureFrame){\n  List<ParsingContext> list=TransitionDecoder.decode(graph,featureFrame);\n  JavaRDD<ParsingContext> javaRDD=jsc.parallelize(list);\n  return sqlContext.createDataFrame(javaRDD,ParsingContext.class);\n}\n", "nl": "Converts a dependency graph to a data frame.", "id": "28546"}
{"code": "public boolean isAllowed(VersionData versionData){\n  if (versionData == null) {\n    return false;\n  }\n  if (versionData.getVendorOptionType() == NoVendorOption.class) {\n    return true;\n  }\n  if (versionData.getVendorOptionType() != this.classType) {\n    return false;\n  }\n  return versionData.inRange(this.minimumVersion,this.maximumVersion);\n}\n", "nl": "Checks if vendor option is allowed.", "id": "30169"}
{"code": "public static ExpectedCondition<Boolean> listSizeIsConstant(final WebElement element,final By byElement){\n  return null;\n}\n", "nl": "List of WebElements found in provided scope using provided locator is constant", "id": "322"}
{"code": "@Override protected void onStart(){\n  super.onStart();\n  LOG.d(TAG,\"Started the activity.\");\n  if (this.appView == null) {\n    return;\n  }\n  this.appView.handleStart();\n}\n", "nl": "Called when the activity is becoming visible to the user.", "id": "35545"}
{"code": "public static ValueGetterSpacePredicate<ServerEntry> pathEqual(String path,Object value){\n  return path(path,equal(value));\n}\n", "nl": "Shortcut for path(path, equal(value)).", "id": "38204"}
{"code": "@Override public void redoAction(UndoInterface undoRedoObject){\n  if (textField != null) {\n    if (undoRedoObject != null) {\n      String newValue=(String)undoRedoObject.getNewValue();\n      textField.setText(newValue);\n    }\n  }\n}\n", "nl": "Redo action.", "id": "1356"}
{"code": "public static void pickImage(Activity activity,String chooserTitle){\n  Intent chooseImageIntent=getPickImageIntent(activity,chooserTitle);\n  activity.startActivityForResult(chooseImageIntent,PICK_IMAGE_ID);\n}\n", "nl": "Launch a dialog to pick an image from camera/gallery apps.", "id": "23315"}
{"code": "public void attachTo(RecyclerView recycler){\n  attachTo(recycler,false);\n}\n", "nl": "Attaches <code>RecyclerViewHeader</code> to <code>RecyclerView</code>. This method will perform necessary actions to properly align the header within <code>RecyclerView</code>. Be sure that <code>setLayoutManager(...)</code> has been called for <code>RecyclerView</code> before calling this method. Also, if you were planning to use <code>setOnScrollListener(...)</code> method for your <code>RecyclerView</code>, be sure to do it before calling this method.", "id": "56047"}
{"code": "protected void createMediaPlayerIfNeeded(){\n  if (mPlayer == null) {\n    mPlayer=new MediaPlayer();\n    mPlayer.setWakeMode(getApplicationContext(),PowerManager.PARTIAL_WAKE_LOCK);\n    mPlayer.setOnPreparedListener(this);\n    mPlayer.setOnCompletionListener(this);\n    mPlayer.setOnErrorListener(this);\n  }\n else {\n    mPlayer.reset();\n  }\n}\n", "nl": "Makes sure the media player exists and has been reset. This will create the media player if needed. reset the existing media player if one already exists.", "id": "48975"}
{"code": "public String jsonEncode(String object){\n  return StringEscapeUtils.escapeJava(object);\n}\n", "nl": "Escaped the given JSON content using Java String rules. Assumes \" is used as quote char and not used inside values and does not escape '.", "id": "44307"}
{"code": "public boolean equalTo(Entry e){\n  if (e == null)   return false;\n  if (e.mData != this.mData)   return false;\n  if (e.mXIndex != this.mXIndex)   return false;\n  if (Math.abs(e.mVal - this.mVal) > 0.00001f)   return false;\n  return true;\n}\n", "nl": "Compares value, xIndex and data of the entries. Returns true if entries are equal in those points, false if not. Does not check by hash-code like it's done by the \"equals\" method.", "id": "39368"}
{"code": "public SpaceTypeDescriptorBuilder addFixedProperty(String propertyName,Class<?> propertyType){\n  return addFixedProperty(propertyName,propertyType,SpaceDocumentSupport.DEFAULT,StorageType.DEFAULT);\n}\n", "nl": "Adds a property to the fixed properties set.", "id": "29740"}
{"code": "public static LinkedHashSet<PhysicalTableDefinition> buildHourlyMonthlyTableDefinitions(TestDimensions testDimensions){\n  return Stream.concat(buildHourlyTableDefinitions(testDimensions).stream(),buildMonthlyTableDefinitions(testDimensions).stream()).collect(Collectors.toCollection(null));\n}\n", "nl": "Build hourly monthly table definitions.", "id": "20366"}
{"code": "public void open() throws IOException {\n  FileFactory.FileType fileType=FileFactory.getFileType(fileName);\n  dataOutputStream=FileFactory.getDataOutputStream(fileName,fileType,bufferSize,append);\n  binaryOut=new TCompactProtocol(new TIOStreamTransport(dataOutputStream));\n}\n", "nl": "Open the file for writing.", "id": "21917"}
{"code": "public void invalidate(String group){\n  Iterator items=items(group,ValidatedPredicate.TRUE);\n  while (items.hasNext()) {\n    VisualItem item=(VisualItem)items.next();\n    item.setValidated(false);\n  }\n}\n", "nl": "Invalidate the bounds of all VisualItems in the given group. This will cause the bounds to be recomputed for all items upon the next redraw.", "id": "16909"}
{"code": "public static NumericEntityEscaper above(final int codepoint){\n  return outsideOf(0,codepoint);\n}\n", "nl": "<p>Constructs a <code>NumericEntityEscaper</code> above the specified value (exclusive). </p>", "id": "22833"}
{"code": "public FaveGetPhotosQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of photos.", "id": "47776"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARRY_A_TO_B(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1201101,value0,value1);\n}\n", "nl": "%0 parried %1's attack.", "id": "32976"}
{"code": "public DocsDeleteQuery delete(UserActor actor,int ownerId,int docId){\n  return new DocsDeleteQuery(getClient(),actor,ownerId,docId);\n}\n", "nl": "Deletes a user or community document.", "id": "50932"}
{"code": "public void partitionWithPercent(boolean withPercent){\n  this.withPercent=withPercent;\n  if (withPercent)   chartUtils=ChartHelper.generateSimpleRadiusWithPercent(chartData,(int)side);\n else   chartUtils=ChartHelper.generateSimpleRadius(chartData,(int)side);\n  animateValue=-1;\n  invalidate();\n}\n", "nl": "This property will define the partitions width (equal or acc. to percent)", "id": "15564"}
{"code": "public static float unQuantize(short s,float fMin,float fRange){\n  return ((float)(((s) + 32768.0) * fRange / 65535.0 - fMin));\n}\n", "nl": "Unquantize a 16bits signed short over a float range", "id": "41336"}
{"code": "public int available() throws IOException {\n  int avail=(count - pos - 2) + in.available();\n  return (avail < 0 ? 0 : avail);\n}\n", "nl": "Returns the number of bytes that can be read from this input stream without blocking.  This is a standard <code>InputStream</code> idiom to deal with buffering gracefully, and is not same as the length of the part arriving in this stream.", "id": "12747"}
{"code": "public SkillTreeCursor querySkillTrees(){\n  return mHelper.querySkillTrees();\n}\n", "nl": "SKILL TREE QUERIES", "id": "42101"}
{"code": "public AdsGetSuggestionsQueryWithCities country(Integer value){\n  return unsafeParam(\"country\",value);\n}\n", "nl": "ID of the country objects are searched in.", "id": "32220"}
{"code": "public static <T extends GenericEntity>List<T> filterByDate(List<T> datedValues){\n  return filterByDate(datedValues,UtilDateTime.nowTimestamp(),null,null,true);\n}\n", "nl": "returns the values that are currently active.", "id": "25269"}
{"code": "@Override public boolean next(){\n  if (isLhsEmpty)   return false;\n  if (idx.next()) {\n    ts.moveToRecordId(idx.getDataRecordId());\n    return true;\n  }\n else   if (!(isLhsEmpty=!s.next())) {\n    resetIndex();\n    return next();\n  }\n else   return false;\n}\n", "nl": "Moves the scan to the next record. The method moves to the next index record, if possible. Otherwise, it moves to the next LHS record and the first index record. If there are no more LHS records, the method returns false.", "id": "17807"}
{"code": "@Deprecated public void ignoreMissingProperties(boolean ignore){\n  setIgnoreMissingProperties(ignore);\n}\n", "nl": "How are missing properties handled? <p/> <p>If ignore is true, missing or unreadable property files will not be reported. Otherwise, a message will be sent to System.err. </p>", "id": "17183"}
{"code": "private LinearConstraint normalize(final LinearConstraint constraint){\n  if (constraint.getValue() < 0) {\n    return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1 * constraint.getValue());\n  }\n  return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());\n}\n", "nl": "Get a new equation equivalent to this one with a positive right hand side.", "id": "19734"}
{"code": "public Fraction subtract(Fraction fraction){\n  return addSub(fraction,false);\n}\n", "nl": "<p>Subtracts the value of another fraction from the value of this one, returning the result in reduced form.</p>", "id": "50569"}
{"code": "public static boolean isValid(int c){\n  return (c < 0x10000 && (CHARS[c] & MASK_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);\n}\n", "nl": "Returns true if the specified character is valid. This method also checks the surrogate character range from 0x10000 to 0x10FFFF. <p/> If the program chooses to apply the mask directly to the <code>CHARS</code> array, then they are responsible for checking the surrogate character range.", "id": "6844"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"show window=message;\");\n  execute(\"list assignmentsToLevels;\");\n}\n", "nl": "action to be performed", "id": "36964"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARTY_PARRY(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1220220,value0,value1);\n}\n", "nl": "%0 parried %1's attack.", "id": "8568"}
{"code": "public void loaded(int startIndex,List<T> data,boolean cacheData){\n  loaded(startIndex,data,getTotalRows(),cacheData);\n}\n", "nl": "Provide the option to load data with a cache parameter.", "id": "50313"}
{"code": "public static void assertCommitterLineMatches(GitRepository repo,String commitRef,String regex) throws RepoException {\n  assertLineWithPrefixMatches(repo,commitRef,\"committer \",regex);\n}\n", "nl": "Asserts that the committer line of the given commit matches the given regex.", "id": "31971"}
{"code": "public static UInteger uint(int value){\n  return UInteger.valueOf(value);\n}\n", "nl": "Create an <code>unsigned int</code> by masking it with <code>0xFFFFFFFF</code> i.e. <code>(int) -1</code> becomes <code>(uint) 4294967295</code>", "id": "42672"}
{"code": "public void onSuccess(int statusCode,byte[] binaryData){\n  onSuccess(binaryData);\n}\n", "nl": "Fired when a request returns successfully, override to handle in your own code", "id": "52029"}
{"code": "public boolean isTransactionComplete(){\n  return transactionComplete;\n}\n", "nl": "Checks if the processor marked the transaction as complete", "id": "14835"}
{"code": "public static String classVersionToJdk(int version){\n  return \"1.\" + Integer.toString(version - 44);\n}\n", "nl": "Converts a class file version number  JDK string like 1.6.0_65 to the corresponding class file version number, e.g. 50", "id": "48031"}
{"code": "private static void expandNumberAt(String numberString,int startIndex,WordRelation wordRelation,Item tokenItem){\n  expandNumber(numberString.substring(startIndex,numberString.length()),wordRelation,tokenItem);\n}\n", "nl": "Returns the number string list of the given string starting at the given index. E.g., expandNumberAt(\"1100\", 1) gives \"one hundred\"", "id": "39506"}
{"code": "public void closeRows(){\n  SQLModel.closeQuietly(currentRow);\n  SQLModel.closeQuietly(currentStatement);\n}\n", "nl": "Close the current row and statement.", "id": "44408"}
{"code": "public DateTimeFormatter generateDateTimeFormatter(DateTimeZone timeZone){\n  return FULLY_OPTIONAL_DATETIME_FORMATTER.withZone(timeZone);\n}\n", "nl": "Get the DateTimeFormatter shifted to the given time zone.", "id": "19203"}
{"code": "@Override public boolean isAlreadyMatched(){\n  return false;\n}\n", "nl": "is the entry returned already matched against the searching template currently is true if the underlying scan made by CacheManager::EntriesIter", "id": "26454"}
{"code": "public static List<String> readLines(InputStream input,String encoding) throws IOException {\n  return readLines(input,Charsets.toCharset(encoding));\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a list of Strings, one entry per line, using the specified character encoding. <p/> Character encoding names can be found at <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>.", "id": "55224"}
{"code": "@Override public boolean sameOrientationAs(final Hyperplane<Euclidean3D> other){\n  return (((Plane)other).w).dotProduct(w) > 0.0;\n}\n", "nl": "Check if the instance has the same orientation as another hyperplane.", "id": "16199"}
{"code": "public static String makeLogTag(Class cls){\n  return makeLogTag(cls.getSimpleName());\n}\n", "nl": "Don't use this when obfuscating class names!", "id": "53965"}
{"code": "private static String formatErrorMessage(@NotNull RenderingContext context,@NotNull TemplateUserVisibleException ex){\n  if (!context.canCausePartialRendering()) {\n    return ex.getMessage();\n  }\n  return new StringBuilder().append(ex.getMessage()).append(String.format(\"\\n\\n%1$s was only partially completed.\",context.getCommandName())).append(\"\\nYour project may not compile.\").append(\"\\nYou may want to Undo to get back to the original state.\").toString();\n}\n", "nl": "If this is not a dry run, we may have created/changed some files and the project may no longer compile. Let the user know about undo.", "id": "23987"}
{"code": "protected boolean searchForRecursiveIncludes(String includedSysId){\n  if (includedSysId.equals(fCurrentBaseURI.getExpandedSystemId())) {\n    return true;\n  }\n else   if (fParentXIncludeHandler == null) {\n    return false;\n  }\n else {\n    return fParentXIncludeHandler.searchForRecursiveIncludes(includedSysId);\n  }\n}\n", "nl": "Checks if the file indicated by the given system id has already been included in the current stack.", "id": "23793"}
{"code": "public static PlaceholderFragment newInstance(int sectionNumber){\n  PlaceholderFragment fragment=new PlaceholderFragment();\n  Bundle args=new Bundle();\n  args.putInt(ARG_SECTION_NUMBER,sectionNumber);\n  fragment.setArguments(args);\n  return fragment;\n}\n", "nl": "Returns a new instance of this fragment for the given section number.", "id": "32460"}
{"code": "public String process(Item item) throws ProcessException {\n  return getPhoneFeature(item,\"cvox\");\n}\n", "nl": "Performs some processing on the given item.", "id": "49604"}
{"code": "public EntityQuery where(Object... fields){\n  this.whereEntityCondition=EntityCondition.makeCondition(UtilMisc.toMap(fields));\n  return this;\n}\n", "nl": "Set a series of field name/values to be ANDed together as the WHERE clause for the query NOTE: Each successive call to any of the where(...) methods will replace the currently set condition for the query.", "id": "19782"}
{"code": "public SimpleBooleanProperty showProperty(){\n  return this.show;\n}\n", "nl": "'Show' flag.", "id": "55488"}
{"code": "protected void fireChangeEvent(){\n  Iterator iter=m_listeners.iterator();\n  ChangeEvent evt=new ChangeEvent(this);\n  while (iter.hasNext()) {\n    ChangeListener cl=(ChangeListener)iter.next();\n    cl.stateChanged(evt);\n  }\n}\n", "nl": "Fire a change event to listeners.", "id": "37172"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GET_EXP_VITAL_BONUS(String value0,long num1,long num2){\n  return new SM_SYSTEM_MESSAGE(1400342,value0,num1,num2);\n}\n", "nl": "You have gained %num1 XP from %0 (Energy of Repose %num2).", "id": "14553"}
{"code": "public void connectionLost(final Throwable cause){\n  logger.error(\"Connection lost\",cause);\n  connection.connectionLost(cause);\n}\n", "nl": "Handles connection loss.", "id": "3512"}
{"code": "public void clearPayments(){\n  this.expireSingleUsePayments();\n  paymentInfo.clear();\n}\n", "nl": "clears all payment method/payment method types", "id": "47540"}
{"code": "public void addMemberEx(LegionMemberEx legionMember){\n  if (legionMemberExById.containsKey(legionMember.getObjectId()) || legionMemberExByName.containsKey(legionMember.getName())) {\n    throw new DuplicateAionObjectException();\n  }\n  legionMemberExById.put(legionMember.getObjectId(),legionMember);\n  legionMemberExByName.put(legionMember.getName(),legionMember);\n}\n", "nl": "Add LegionMemberEx to this Container.", "id": "31768"}
{"code": "protected Preference onCreateItem(String name,AttributeSet attrs) throws ClassNotFoundException {\n  return createItem(name,mDefaultPackages,attrs);\n}\n", "nl": "This routine is responsible for creating the correct subclass of item given the xml element name. Override it to handle custom item objects. If you override this in your subclass be sure to call through to super.onCreateItem(name) for names you do not recognize.", "id": "7265"}
{"code": "public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {\n  writeLines(lines,lineEnding,output,Charset.defaultCharset());\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to an <code>OutputStream</code> line by line, using the default character encoding of the platform and the specified line ending.", "id": "44639"}
{"code": "public void mixedElement(String elementName) throws XNIException {\n}\n", "nl": "A referenced element in a mixed content model. If the mixed content model only allows text content, then this method will not be called for that model. However, if this method is called for a mixed content model, then the zero or more occurrence count is implied. <p/> <strong>Note:</strong> This method is only called after a call to the startContentModel method where the type is TYPE_MIXED.", "id": "31808"}
{"code": "protected final void fireColumnEvent(int idx,Object prev){\n  Object[] lstnrs=m_listeners.getArray();\n  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);\n}\n", "nl": "Notifies all registered listeners of a column UPDATE event", "id": "12959"}
{"code": "@Override protected void authorizeRequests(final HttpSecurity http) throws Exception {\n  http.authorizeRequests().antMatchers(\"/ping\").permitAll().anyRequest().authenticated();\n}\n", "nl": "Our API Configuration - for Profile CRUD operations Here we choose not to bother using the `auth0.securedRoute` property configuration and instead ensure any unlisted endpoint in our config is secured by default", "id": "54981"}
{"code": "public boolean isReifiable(){\n  ASTNode$State state=state();\n  try {\n    return elementType().isReifiable();\n  }\n  finally {\n  }\n}\n", "nl": "A type is reifiable if it either refers to a non-parameterized type, is a raw type, is a parameterized type with only unbound wildcard parameters or is an array type with a reifiable type parameter.", "id": "37319"}
{"code": "public static Long stringToLong(String val){\n  return Long.valueOf(trim(val));\n}\n", "nl": "Converts String to Long.", "id": "11961"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_FEED_FOOD_NOT_LOVEFLAVOR(String petName,int nameId){\n  return new SM_SYSTEM_MESSAGE(1400618,petName,new DescriptionId(nameId));\n}\n", "nl": "%0 spits out %1 and makes a face.", "id": "33698"}
{"code": "@After @Before @CacheEvict(\"default\") public void post(){\n}\n", "nl": "Because the \"default\" cache is shared, we need to make sure it is empty before testing it. Otherwise, if a value of another type is stored in it, an exception will be thrown.", "id": "46846"}
{"code": "public void addGroup(GroupConfigInterface subGroup){\n  subGroupList.add(subGroup);\n}\n", "nl": "Adds the sub group.", "id": "6713"}
{"code": "public static byte[] translate(byte[] sequence,byte[] alphabet){\n  return translate(sequence,alphabet,0,sequence.length);\n}\n", "nl": "decode sequence to nucleotides or amino acids", "id": "37565"}
{"code": "@Override public void invalidateView(){\n  mViewBinder.invalidateView();\n}\n", "nl": "Invalidates the cache of the latest bound view. Forces the next binding of the view to run through all the interceptors (again).", "id": "10562"}
{"code": "protected void addNameToAST(String name){\n  if (sootNameToAST == null) {\n    sootNameToAST=new HashMap<String,Node>();\n  }\n  sootNameToAST.put(name,astNode);\n}\n", "nl": "add name to AST to map - used mostly for inner and non public top-level classes", "id": "40789"}
{"code": "private void createUI(){\n  readConfigFile(null,this,\"Rule.xml\");\n  createFilter();\n}\n", "nl": "Creates the ui.", "id": "8948"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Recall_Instant_A_TO_B(String skillcaster,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201244,skillcaster,skilltarget,skillname);\n}\n", "nl": "[%SkillCaster] requested [%SkillTarget] to be summoned by using [%SkillName].", "id": "28123"}
{"code": "public static short readSwappedShort(InputStream input) throws IOException {\n  return (short)(((read(input) & 0xff) << 0) + ((read(input) & 0xff) << 8));\n}\n", "nl": "Reads a \"short\" value from an InputStream. The value is converted to the opposed endian system while reading.", "id": "16036"}
{"code": "public boolean canGetBoolean(){\n  return canGet(boolean.class);\n}\n", "nl": "Indicates if convenience get method can be called without an exception being thrown for the boolean type.", "id": "58092"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CHANGE_ITEM_SKIN_NOT_ENOUGH_GOLD(DescriptionId descriptionId){\n  return new SM_SYSTEM_MESSAGE(1300481,descriptionId);\n}\n", "nl": "You do not have enough Kinah to modify the appearance of %0.", "id": "30046"}
{"code": "@Override public final void writeMapleAsciiString(final String s){\n  writeShort((short)s.length());\n  writeAsciiString(s);\n}\n", "nl": "Writes a maple-convention ASCII string to the stream.", "id": "52715"}
{"code": "public int timePassed(){\n  final long time=AnimationUtils.currentAnimationTimeMillis();\n  final long startTime=Math.min(mScrollerX.mStartTime,mScrollerY.mStartTime);\n  return (int)(time - startTime);\n}\n", "nl": "Returns the time elapsed since the beginning of the scrolling.", "id": "49968"}
{"code": "public static boolean isUnicode(String unicodeString){\n  return unicodeString.startsWith(UNICODE_PREFIX);\n}\n", "nl": "Checks if is unicode.", "id": "35171"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Disease_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200891,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] became diseased because [%SkillCaster] used [%SkillName].", "id": "33848"}
{"code": "public void updateDataTagAddress(final DataTagAddressUpdate dataTagAddressUpdate,final DataTagAddress dataTagAddress) throws NoSuchFieldException, IllegalAccessException {\n  fillNonNullFields(dataTagAddressUpdate,dataTagAddress);\n  removeListOfFields(dataTagAddressUpdate.getFieldsToRemove(),dataTagAddress);\n  if (dataTagAddressUpdate.getHardwareAddressUpdate() != null) {\n    updateHardwareAddress(dataTagAddressUpdate.getHardwareAddressUpdate(),dataTagAddress.getHardwareAddress());\n  }\n}\n", "nl": "Updates the values of a data tag address with the values of an update object.", "id": "28022"}
{"code": "public final void connect(){\n  for (  JmsSender jmsSender : jmsSenders) {\n    jmsSender.connect();\n  }\n}\n", "nl": "Connects to all the registered brokers (individual JMSSenders should implement this on separate threads if the connection is unessential).", "id": "26727"}
{"code": "public void clear(){\n  removeChildListeners();\n  m_clauses.clear();\n  fireExpressionChange();\n}\n", "nl": "Remove all clauses.", "id": "5082"}
{"code": "public static Intent createGetContentIntent(){\n  final Intent intent=new Intent(Intent.ACTION_GET_CONTENT);\n  intent.setType(\"*/*\");\n  intent.addCategory(Intent.CATEGORY_OPENABLE);\n  return intent;\n}\n", "nl": "Get the Intent for selecting content to be used in an Intent Chooser.", "id": "26875"}
{"code": "public static RoutingService.Builder buildRoutingService(ServerSet serverSet){\n  return buildRoutingService(serverSet,false);\n}\n", "nl": "Building routing service from <code>serverSet</code>.", "id": "47852"}
{"code": "public static void main(String[] args){\n  LinkTerrain simulation=new LinkTerrain();\n  simulation.run();\n}\n", "nl": "Entry point for the example application.", "id": "25490"}
{"code": "public PhotosCreateAlbumQuery privacyView(List<String> value){\n  return unsafeParam(\"privacy_view\",value);\n}\n", "nl": "Set privacy view", "id": "17949"}
{"code": "public boolean matchKeyword(String keyword){\n  return tok.ttype == StreamTokenizer.TT_WORD && tok.sval.equals(keyword) && keywords.contains(tok.sval);\n}\n", "nl": "Returns true if the current token is the specified keyword.", "id": "35654"}
{"code": "@Override public void reset() throws XNIException {\n  super.reset();\n  fInDTD=false;\n  fVersion=\"1.0\";\n  fStandalone=false;\n  fNamespaces=fConfiguration.getFeature(NAMESPACES);\n  fAugmentations=null;\n  fDeclaredAttrs=null;\n}\n", "nl": "Reset all components before parsing.", "id": "40822"}
{"code": "public boolean hasScrolled(){\n  return this.scroll != 0;\n}\n", "nl": "Returns true if the user has scrolled the mouse wheel.", "id": "57220"}
{"code": "public static void loadArmV7aLibrary(ApplicationLike applicationLike,String libName){\n  if (libName == null || libName.isEmpty() || applicationLike == null) {\n    throw new TinkerRuntimeException(\"libName or context is null!\");\n  }\n  if (TinkerApplicationHelper.isTinkerEnableForNativeLib(applicationLike)) {\n    if (TinkerApplicationHelper.loadLibraryFromTinker(applicationLike,\"lib/armeabi-v7a\",libName)) {\n      return;\n    }\n  }\n  System.loadLibrary(libName);\n}\n", "nl": "only support auto load lib/armeabi-v7a library from patch. in some process, you may not want to install tinker and you can load patch dex and library without install tinker! }", "id": "8915"}
{"code": "public static <T>Iterable<T> Iterable(T object){\n  return null;\n}\n", "nl": "Return a new iterable over a single item", "id": "28457"}
{"code": "public boolean blocksForInput(ConversationContext context){\n  return true;\n}\n", "nl": "Ensures that the prompt waits for the user to provide input.", "id": "35776"}
{"code": "public void onLoad(boolean viewRecreated){\n}\n", "nl": "This method is called, when view is ready", "id": "37371"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Pulled_A_TO_SELF(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200857,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] received %num0 damage and was put in the pull state because he used [%SkillName].", "id": "15607"}
{"code": "@Override public void run(){\n  try {\n    AudioSystem.write(m_audioInputStream,m_targetType,m_outputFile);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n", "nl": "Main working method. You may be surprised that here, just 'AudioSystem.write()' is called. But internally, it works like this: AudioSystem.write() contains a loop that is trying to read from the passed AudioInputStream. Since we have a special AudioInputStream that gets its data from a TargetDataLine, reading from the AudioInputStream leads to reading from the TargetDataLine. The data read this way is then written to the passed File. Before writing of audio data starts, a header is written according to the desired audio file type. Reading continues untill no more data can be read from the AudioInputStream. In our case, this happens if no more data can be read from the TargetDataLine. This, in turn, happens if the TargetDataLine is stopped or closed (which implies stopping). (Also see the comment above.) Then, the file is closed and 'AudioSystem.write()' returns.", "id": "19463"}
{"code": "@SuppressWarnings(\"unchecked\") public static <T>T convertFromNoneable(Object obj,@Nullable T defaultValue){\n  if (EvalUtils.isNullOrNone(obj)) {\n    return defaultValue;\n  }\n  return (T)obj;\n}\n", "nl": "Converts an object that can be the NoneType to the actual object if it is not or returns the default value if none.", "id": "56985"}
{"code": "@Override public String addSymbol(String symbol){\nsynchronized (fSymbolTable) {\n    return fSymbolTable.addSymbol(symbol);\n  }\n}\n", "nl": "Adds the specified symbol to the symbol table and returns a reference to the unique symbol. If the symbol already exists, the previous symbol reference is returned instead, in order guarantee that symbol references remain unique.", "id": "39837"}
{"code": "public boolean use_original_names(){\n  return soot.PhaseOptions.getBoolean(options,\"use-original-names\");\n}\n", "nl": "Use Original Names -- . Retain the original names for local variables when the source  includes those names. Otherwise, Soot gives variables generic  names based on their types.", "id": "51509"}
{"code": "public void dumpBinary(String path){\n  String compiledPath=path + \"_compiled.bin\";\n  String addendaPath=path + \"_addenda.bin\";\n  dumpBinaryLexicon(compiled,compiledPath);\n  dumpBinaryLexicon(addenda,addendaPath);\n}\n", "nl": "Dumps this lexicon (just the compiled form). Lexicon will be dumped to two binary files PATH_compiled.bin and PATH_addenda.bin", "id": "3088"}
{"code": "public static String formatItem(final ItemId item){\n  return WordUtils.capitalize(item.toString().toLowerCase().replaceAll(\"item_\",\"\").replaceAll(StringLiterals.UNDERSCORE,StringLiterals.SPACE));\n}\n", "nl": "Formats given Item to a readable String.", "id": "6837"}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){\n  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. <p/> This should only be used on AdapterView's such as ListView as it just calls through to overScrollBy() with the scrollRange = 0. AdapterView's do not have a scroll range (i.e. getScrollY() doesn't work).", "id": "26920"}
{"code": "public JsonObject add(String name,String value){\n  add(name,Json.value(value));\n  return this;\n}\n", "nl": "Appends a new member to the end of this object, with the specified name and the JSON representation of the specified string. <p> This method <strong>does not prevent duplicate names</strong>. Calling this method with a name that already exists in the object will append another member with the same name. In order to replace existing members, use the method <code>set(name, value)</code> instead. However, <strong> <em>add</em> is much faster than <em>set</em></strong> (because it does not need to search for existing members). Therefore <em>add</em> should be preferred when constructing new objects. </p>", "id": "9138"}
{"code": "public static final String unescapeHtml4(final String input){\n  return UNESCAPE_HTML4.translate(input);\n}\n", "nl": "<p>Unescapes a string containing entity escapes to a string containing the actual Unicode characters corresponding to the escapes. Supports HTML 4.0 entities.</p> <p/> <p>For example, the string \"&amp;lt;Fran&amp;ccedil;ais&amp;gt;\" will become \"&lt;Fran&ccedil;ais&gt;\"</p> <p/> <p>If an entity is unrecognized, it is left alone, and inserted verbatim into the result string. e.g. \"&amp;gt;&amp;zzzz;x\" will become \"&gt;&amp;zzzz;x\".</p>", "id": "14877"}
{"code": "public void printMcepMean(){\n  printVectors(mcepMean,mcepVariance);\n}\n", "nl": "Print mean and variance of each state", "id": "22113"}
{"code": "public Path newPath(){\n  return new FieldPathNode();\n}\n", "nl": "Return a value representing a path which will consist of a chain of 1 or more field names starting in the namespace of the candidate class.<br /> Example: <code>parent.address.city</code>", "id": "26668"}
{"code": "public ResourcesPoet indent(boolean indent){\n  this.indent=indent;\n  return this;\n}\n", "nl": "Specify if you want the output to be indented or not", "id": "9270"}
{"code": "public void unlockUserInput(){\n  isLocked=false;\n  if (commandManager != null)   commandManager.setEnableCritical(true);\n  getTabbedPane().setEnabled(true);\n  setCursor(Cursor.getDefaultCursor());\n}\n", "nl": "ask view to allow user input", "id": "27314"}
{"code": "public static void fireCellChanged(final JTable table,final int rowIndex,final int columnIndex){\n  ((AbstractTableModel)table.getModel()).fireTableCellUpdated(rowIndex,columnIndex);\n}\n", "nl": "Fires the cell data changed event for given table and cell.", "id": "48056"}
{"code": "public static RequestQueue newRequestQueue(Context context,String assetFile) throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException, KeyManagementException {\n  return newRequestQueue(context,DEFAULT_CA_TYPE,assetFile);\n}\n", "nl": "Create a new Volley RequestQueue.", "id": "32873"}
{"code": "@Override public WebDriver frame(int index){\n  frameSwitcher.putFramePathOnStack(index);\n  return targetLocator.frame(index);\n}\n", "nl": "Switches to frame indicated by index and puts the frame on FrameSwitcher's stack.", "id": "2186"}
{"code": "static boolean isExist(String libName,int version){\n  String file=_targetSoFile(libName,version);\n  File a=new File(file);\n  return a.exists();\n}\n", "nl": "Tell whether the so is extracted.", "id": "26677"}
{"code": "public static void e(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_ERROR) {\n    return;\n  }\n  Log.e(tag,msg,throwable);\n}\n", "nl": "Send an ERROR log message", "id": "43496"}
{"code": "void onRendererCrashed(){\n  if (mRestoreStartedAtMillis != -1) {\n    mRestoreStartedAtMillis=-1;\n  }\n}\n", "nl": "Called when the renderer of the correspoding tab crashes.", "id": "24092"}
{"code": "public boolean findFirst(String regularExpression){\n  return findAndUncollapseNext(regularExpression,false,false) > 0;\n}\n", "nl": "Find first instance", "id": "27676"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnTargetDead_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200526,skilltarget,skillname);\n}\n", "nl": "[%SkillTarget] converted death to healing by using [%SkillName].", "id": "315"}
{"code": "public Value distinct(Value obj){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return distinct values of the given value. This is typically used within aggregates, for example: max(distinct(path))", "id": "21791"}
{"code": "public Header nextHeader() throws NoSuchElementException {\n  final int current=this.currentIndex;\n  if (current < 0) {\n    throw new NoSuchElementException(\"Iteration already finished.\");\n  }\n  this.lastIndex=current;\n  this.currentIndex=findNext(current);\n  return (Header)this.allHeaders.get(current);\n}\n", "nl": "Obtains the next header from this iteration.", "id": "34859"}
{"code": "private void mark(){\n  theLastColumn=theCurrentColumn;\n  theLastLine=theCurrentLine;\n}\n", "nl": "Mark the current scan position as a \"point of interest\" - start of a tag, cdata, processing instruction etc.", "id": "56279"}
{"code": "public LeastSquaresBuilder start(final double[] newStart){\n  return start(new ArrayRealVector(newStart,false));\n}\n", "nl": "Configure the initial guess.", "id": "51386"}
{"code": "private boolean canScrollLinearly(int fromStackIndex){\n  int count=mStacks.length;\n  if (!(mScrollIndexOffset <= 0 && -mScrollIndexOffset <= (count - 1))) {\n    return false;\n  }\n  return mStacks[fromStackIndex ^ 0x01].isDisplayable();\n}\n", "nl": "Based on the current position, determine if we will map mScrollDistance linearly to mRenderedScrollDistance. The logic is, if there is only stack, we will not map linearly; if we are scrolling two the boundary of either of the stacks, we will not map linearly; otherwise yes.", "id": "45972"}
{"code": "public MessagesGetHistoryQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of messages to return.", "id": "8637"}
{"code": "public static void main(String[] args){\n  byte[] json_chunk1=\"{\\\"name\\\":\\\"El\".getBytes(StandardCharsets.UTF_8);\n  byte[] json_chunk2=\"vis\\\"}\".getBytes(StandardCharsets.UTF_8);\n  Observable.just(json_chunk1,json_chunk2).lift(new JsonParserOperator()).toBlocking().forEach(null);\n}\n", "nl": "The main program", "id": "55711"}
{"code": "public SpaceTypeDescriptorBuilder fifoGroupingProperty(String fifoGroupingPropertyPath){\n  if (fifoGroupingPropertyPath == null)   throw new IllegalArgumentException(\"Argument cannot be null - 'fifoGroupingPropertyPath'.\");\n  if (_fifoGroupingPropertyPath != null)   throw new IllegalStateException(\"Cannot set fifo grouping to '\" + fifoGroupingPropertyPath + \"' - it was already set to '\"+ _fifoGroupingPropertyPath+ \"'.\");\n  validateNoCollectionPath(fifoGroupingPropertyPath);\n  this._fifoGroupingPropertyPath=fifoGroupingPropertyPath;\n  return this;\n}\n", "nl": "Sets the fifo grouping property", "id": "40812"}
{"code": "public void clear(){\n  oredCriteria.clear();\n  orderByClause=null;\n  distinct=false;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.submissions", "id": "53359"}
{"code": "@Override public ProcessChange removeControlTag(Long id,ConfigurationElementReport tagReport){\n  ProcessChange change=controlTagConfigTransacted.doRemoveControlTag(id,tagReport);\n  controlTagCache.remove(id);\n  return change;\n}\n", "nl": "Removes the control tag and fills in the passed report in case of failure. The control tag removed is commited if successful. If it fails, a rollback exception is throw and all *local* changes are rolled back (the calling method needs to handle the thrown  UnexpectedRollbackException appropriately.", "id": "55199"}
{"code": "public synchronized void resetTime(){\n}\n", "nl": "Resets the audio clock", "id": "37109"}
{"code": "public RTMClient rtm(String apiToken) throws IOException {\n  try {\n    return new RTMClient(methods().rtmStart(RTMStartRequest.builder().token(apiToken).build()).getUrl());\n  }\n catch (  SlackApiException|URISyntaxException e) {\n    throw new IllegalStateException(\"Couldn't fetch RTM API WebSocket endpoint. Ensure the apiToken value.\");\n  }\n}\n", "nl": "Creates an RTM API client.", "id": "37864"}
{"code": "public void onDirectoryChange(final File directory){\n}\n", "nl": "Directory changed Event.", "id": "30451"}
{"code": "public <X extends DataSource>void unregisterPropertiesProvider(PropertiesProvider<X> provider){\n  providers.remove(provider);\n}\n", "nl": "Unregisters the PropertiesProvider.", "id": "34768"}
{"code": "protected void prepareBlock(){\n}\n", "nl": "Prepare a block of data for output. This method is called before readBlock() is called. This implementation does nothing. Subclasses will want to override this method.", "id": "18755"}
{"code": "@Override public boolean equals(Object o){\n  return ReferentUuids.compare(proxyObject,o);\n}\n", "nl": "Proxies for servers with the same Uuid are considered equal.", "id": "3922"}
{"code": "public Vector2f subtract(float valX,float valY){\n  return new Vector2f(x - valX,y - valY);\n}\n", "nl": "<code>subtract</code> subtracts the given x,y values from those of this vector creating a new vector object.", "id": "31948"}
{"code": "public boolean isApplicable(){\n  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "57705"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_GET_REWARD_TITLE(int value0){\n  return new SM_SYSTEM_MESSAGE(1300035,new DescriptionId(value0));\n}\n", "nl": "You acquired the %0 title as a quest reward.", "id": "11473"}
{"code": "@RequestMapping(value=\"/{namespace}\",method=RequestMethod.DELETE) public void deleteKeys(@PathVariable String namespace,HttpServletResponse response) throws WebMessageException {\n  userKeyJsonValueService.deleteNamespaceFromUser(currentUserService.getCurrentUser(),namespace);\n  messageService.sendJson(WebMessageUtils.ok(\"All keys from namespace '\" + namespace + \"' deleted.\"),response);\n}\n", "nl": "Deletes all keys with the given user and namespace.", "id": "54739"}
{"code": "public PhotosGetAllQueryWithExtended noServiceAlbums(Boolean value){\n  return unsafeParam(\"no_service_albums\",value);\n}\n", "nl": "\"true\" - to return photos only from standard albums \"false\" - to return all photos including those in service albums, e.g., \"My wall photos\" (default)", "id": "30210"}
{"code": "public String name(){\n  if (this.record != null) {\n    return this.record.name();\n  }\n else {\n    return null;\n  }\n}\n", "nl": "The record name the anonymous record is currently referring to", "id": "3591"}
{"code": "private static int transformClassAccessForInstantRun(int access){\n  AccessRight accessRight=AccessRight.fromNodeAccess(access);\n  return accessRight == AccessRight.PACKAGE_PRIVATE ? access | Opcodes.ACC_PUBLIC : access;\n}\n", "nl": "If a class is package private, make it public so instrumented code living in a different class loader can instantiate them.", "id": "25642"}
{"code": "public boolean isBigEndian(){\n  return isBigEndian;\n}\n", "nl": "Returns the endianness of the file", "id": "11715"}
{"code": "public static void onSync(Project project,BlazeContext context,ProjectViewSet projectViewSet,BlazeProjectData blazeProjectData,BlazeSyncParams.SyncMode syncMode){\n  for (  FileCache fileCache : FileCache.EP_NAME.getExtensions()) {\n    Scope.push(context,null);\n  }\n  LocalFileSystem.getInstance().refresh(true);\n}\n", "nl": "Call on sync. Updates the file cache and deletes any old files.", "id": "52157"}
{"code": "public void clear(){\n  for (int i=0; i < fTableSize; i++) {\n    fBuckets[i]=null;\n  }\n  fNum=0;\n}\n", "nl": "Remove all key/value assocaition. This tries to save a bit of GC'ing by at least keeping the fBuckets array around.", "id": "22961"}
{"code": "public static _Fields findByName(String name){\n  return byName.get(name);\n}\n", "nl": "Find the _Fields constant that matches name, or null if its not found.", "id": "44413"}
{"code": "public static boolean isConnectedFast(Context context){\n  NetworkInfo info=NetworkUtil.getNetworkInfo(context);\n  return (info != null && info.isConnected() && NetworkUtil.isConnectionFast(info.getType(),info.getSubtype()));\n}\n", "nl": "Check if there is fast connectivity", "id": "20109"}
{"code": "public static IOFileFilter suffixFileFilter(String suffix,IOCase caseSensitivity){\n  return new SuffixFileFilter(suffix,caseSensitivity);\n}\n", "nl": "Returns a filter that returns true if the filename ends with the specified text.", "id": "21457"}
{"code": "private void authorizeDomain(Registration registration,String domain){\n  try {\n    val authorization=getAuthorization(registration,domain);\n    val challenge=prepareDnsChallenge(authorization);\n    completeChallenge(challenge);\n  }\n catch (  AcmeException e) {\n    e.printStackTrace();\n    throw new LetsencryptException(e.getMessage());\n  }\n}\n", "nl": "Performs the authorization flow for a single domain after which the domain is authorized for the given registration.", "id": "35986"}
{"code": "public boolean hasAuthorities(){\n  for (  UserAuthorityGroup group : userAuthorityGroups) {\n    if (group != null && group.getAuthorities() != null && !group.getAuthorities().isEmpty()) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Indicates whether this user credentials has at least one authority through its user authority groups.", "id": "357"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "46986"}
{"code": "public Vector2D toSpace(Vector<Euclidean1D> vector){\n  return toSpace((Point<Euclidean1D>)vector);\n}\n", "nl": "Transform a sub-space point into a space point.", "id": "20119"}
{"code": "protected void createAccount(){\n  AccountManager am=AccountManager.get(getApplicationContext());\n  am.addAccount(MainApp.getAccountType(),null,null,null,this,new AccountCreationCallback(),new Handler());\n}\n", "nl": "Launches the account creation activity. To use when no ownCloud account is available.", "id": "21959"}
{"code": "public RecordID next(){\n  return null;\n}\n", "nl": "Yields the next RecordID of this iterator.", "id": "45593"}
{"code": "public final void updateZone(){\n  ZoneUpdateService.getInstance().add(getOwner());\n}\n", "nl": "Zone update mask management", "id": "17592"}
{"code": "public Txn<T> txnWrite(){\n  return txn(null);\n}\n", "nl": "Obtain a read-write transaction.", "id": "55916"}
{"code": "private boolean isRequestingSensorEventData(){\n  for (  Map.Entry<String,SensorDataRequest> sensorDataRequestEntry : sensorDataRequests.entrySet()) {\n    if (sensorDataRequestEntry.getValue().getEndTimestamp() == DataRequest.TIMESTAMP_NOT_SET) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Returns true if the app is requesting sensor data from the local or any connected device", "id": "10635"}
{"code": "public WallPostQuery lat(Float value){\n  return unsafeParam(\"lat\",value);\n}\n", "nl": "Geographical latitude of a check-in, in degrees (from -90 to 90).", "id": "6334"}
{"code": "int onCount(String tableName,String[] conditions){\n  return mathQuery(tableName,new String[]{\"count(1)\"},conditions,int.class);\n}\n", "nl": "The open interface for other classes in CRUD package to Count the records.", "id": "17225"}
{"code": "public synchronized void resume(){\n  if (paused) {\n    setPaused(false);\n    if (currentClip != null) {\n      currentClip.start();\n    }\n    notifyAll();\n  }\n}\n", "nl": "Resumes playing audio after a pause.", "id": "54048"}
{"code": "private LogRecordWithInputStream nextLogRecord() throws IOException {\n  return nextLogRecord(reader);\n}\n", "nl": "Get input stream representing next entry in the ledger.", "id": "54935"}
{"code": "static double checkDouble(double d) throws JSONException {\n  if (Double.isInfinite(d) || Double.isNaN(d)) {\n    throw new JSONException(\"Forbidden numeric value: \" + d);\n  }\n  return d;\n}\n", "nl": "Returns the input if it is a JSON-permissible value; throws otherwise.", "id": "46743"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeathBlow_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200958,skillcaster,num0,skilltarget,skillname);\n}\n", "nl": "[%SkillCaster] inflicted %num0 damage on [%SkillTarget] by using [%SkillName].", "id": "52452"}
{"code": "private void handleFailedSendDataRequest(SerialMessage originalMessage){\n  new SendDataMessageClass().handleFailedSendDataRequest(this,originalMessage);\n}\n", "nl": "Handles a failed SendData request. This can either be because of the stick actively reporting it or because of a time-out of the transaction in the send thread.", "id": "39925"}
{"code": "public FieldRefNode findGlobalFieldRefNode(Object baseValue,SparkField field){\n  VarNode base=findGlobalVarNode(baseValue);\n  if (base == null)   return null;\n  return base.dot(field);\n}\n", "nl": "Finds the FieldRefNode for base variable value and field field, or returns null.", "id": "50025"}
{"code": "public Editor edit() throws IOException {\n  return DiskLruCache.this.edit(key,sequenceNumber);\n}\n", "nl": "Returns an editor for this snapshot's entry, or null if either the entry has changed since this snapshot was created or if another edit is in progress.", "id": "44284"}
{"code": "public boolean isEmpty(){\n  return size() == 0;\n}\n", "nl": "Returns <tt>true</tt> if this map contains no key-value mappings. This result is a snapshot, and may not reflect unprocessed entries that will be removed before next attempted access because they are no longer referenced.", "id": "37410"}
{"code": "public static ServiceType toServiceType(Class cls) throws MarshalException {\n  if (cls != null)   return toServiceTypeBase(cls,false).type;\n  return null;\n}\n", "nl": "Returns a ServiceType descriptor for a class.", "id": "53089"}
{"code": "public void resetStartTime(){\n  dStart=new Date();\n}\n", "nl": "Reset start of time counting to now.", "id": "52755"}
{"code": "private boolean inverted(){\n  return (mClosestDataSetToTouch == null && mChart.isAnyAxisInverted()) || (mClosestDataSetToTouch != null && mChart.isInverted(mClosestDataSetToTouch.getAxisDependency()));\n}\n", "nl": "Returns true if the current touch situation should be interpreted as inverted, false if not.", "id": "42267"}
{"code": "public boolean write(byte[] bytes,int offset,int size){\n  System.arraycopy(bytes,offset,outputData,curIndex,size);\n  curIndex+=size;\n  return true;\n}\n", "nl": "Writes the given bytes to the audio stream", "id": "17426"}
{"code": "private static void forceSet(Object obj,Field f,Object val) throws IllegalAccessException {\n  f.setAccessible(true);\n  f.set(obj,val);\n}\n", "nl": "dalvik do not have security manager", "id": "11230"}
{"code": "private void updateUI(WKTType wktType){\n  multiListModel.clear();\n  segmentListModel.clear();\n  tablePointModel.clear();\n  showMultiPanel(wktType);\n  tablePointModel.setWKTType(wktType);\n  updateSegmentButtons();\n  updatePointButtons();\n}\n", "nl": "Update ui.", "id": "3808"}
{"code": "public TrafficLogPredicate add(Predicate<HarEntry> entry){\n  predicates.add(entry);\n  return this;\n}\n", "nl": "Adds a new HarEntry predicate to this object.", "id": "55411"}
{"code": "public FaveGetUsersQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of users to return.", "id": "46085"}
{"code": "public static final SM_SYSTEM_MESSAGE STR_MAIL_CASHITEM_BUY(int itemId){\n  return new SM_SYSTEM_MESSAGE(1300956,\"[item:\" + itemId + \"]\");\n}\n", "nl": "Purchase Item\\n%attachItemName you bought has arrived.", "id": "55393"}
{"code": "void addClassName(String className){\n  getClassNames().add(className);\n}\n", "nl": "Add a class name into the current mapping model list.", "id": "30657"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Rebirth_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201012,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] entered the reserved resurrection state because [%SkillCaster] used [%SkillName].", "id": "36468"}
{"code": "public boolean isCollapsed(){\n  return collapsed;\n}\n", "nl": "Returns true if similar entries are collapsed", "id": "30920"}
{"code": "public final char yycharat(int pos){\n  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);\n}\n", "nl": "Returns the character at position <tt>pos</tt> from the matched text. It is equivalent to yytext().charAt(pos), but faster", "id": "27743"}
{"code": "public boolean hasSequenceParameter(SequenceContextParameters seqParameter,ContextInfo contextInfo){\n  return hasTemplateParameter(new TemplateParameter(TemplateParameterContext.SEQUENCE,seqParameter.getName()),contextInfo);\n}\n", "nl": "Whether a given sequence parameter is defined in the context.", "id": "35793"}
{"code": "public Builder zoomOutText(String zoomOutText){\n  this.zoomOutText=zoomOutText;\n  return this;\n}\n", "nl": "The text set on the zoom out button. </br> default \"-\"", "id": "14683"}
{"code": "public static String toString(InputStream input,Charset encoding) throws IOException {\n  StringBuilderWriter sw=new StringBuilderWriter();\n  copy(input,sw,encoding);\n  return sw.toString();\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a String using the specified character encoding. <p> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>. </p>", "id": "17382"}
{"code": "protected VideoGetCommentsQueryWithExtended videoId(int value){\n  return unsafeParam(\"video_id\",value);\n}\n", "nl": "Video ID.", "id": "13423"}
{"code": "private Bitmap processBitmap(int resId){\n  if (BuildConfig.DEBUG) {\n    Log.d(TAG,\"processBitmap - \" + resId);\n  }\n  return decodeSampledBitmapFromResource(mResources,resId,mImageWidth,mImageHeight,getImageCache());\n}\n", "nl": "The main processing method. This happens in a background task. In this case we are just sampling down the bitmap and returning it from a resource.", "id": "8064"}
{"code": "public void descreaseNestingLevel(){\n  currentNestingLevel--;\n}\n", "nl": "Decrease the current nesting level.", "id": "55263"}
{"code": "protected static String resolveName(DataSource dataSource,String name){\n  String persistedName=dataSource.getStorage().getCustomProperty(PROPERTY_NAME);\n  if (persistedName != null)   return persistedName;\n else   return name;\n}\n", "nl": "Returns persisted DataSource name if available in DataSource Storage as PROPERTY_NAME. Otherwise returns the provided name.", "id": "14562"}
{"code": "public static void printLogs(){\n  System.out.println(getLogString());\n}\n", "nl": "Print out the log for checking", "id": "40478"}
{"code": "public boolean isVisible(int row){\n  return getBoolean(row,VisualItem.VISIBLE);\n}\n", "nl": "Indicates if the given row is currently set to be visible. Items with the visible flag set false will not be drawn by a display. Invisible items are also by necessity not interactive, regardless of the value of the interactive flag.", "id": "54883"}
{"code": "@Override public void onChangeTheme(Theme theme){\n  mColorModeButtons.get(theme).setChecked(true);\n}\n", "nl": "Changes which button is selected if the theme is changed in another tab.", "id": "50764"}
{"code": "public static float calculateAspectRatio(@NonNull RectF rect){\n  return rect.width() / rect.height();\n}\n", "nl": "Calculates the aspect ratio given a rectangle.", "id": "51230"}
{"code": "public static void write(File file,CharSequence data,String encoding) throws IOException {\n  write(file,data,encoding,false);\n}\n", "nl": "Writes a CharSequence to a file creating the file if it does not exist.", "id": "25538"}
{"code": "public void close() throws IOException {\n  if (fReader != null) {\n    fReader.close();\n    fReader=null;\n  }\n}\n", "nl": "Closes the stream.  Call this after parse(), or when there is no longer any need for this object.", "id": "8430"}
{"code": "public DynamicTemplateParameterContext addParameter(String paramName,String paramValue,boolean deleteOnExit,ContextInfo contextInfo){\n  paramName=parameterResolver.resolveTemplateParameter(paramName,contextInfo);\n  paramValue=parameterResolver.resolveTemplateParameter(paramValue,contextInfo);\n  params.put(paramName,new CustomParameterValue(paramValue,deleteOnExit));\n  return this;\n}\n", "nl": "Adds a dynamic parameter value. <ul> <li>All template parameters within the parameter value and name are resolved.</li> <li>The parameter value replaces the previous parameter value.</li> </ul>", "id": "40801"}
{"code": "public double optDouble(String key,double defaultValue){\n  try {\n    return this.getDouble(key);\n  }\n catch (  Exception e) {\n    return defaultValue;\n  }\n}\n", "nl": "Get an optional double associated with a key, or the defaultValue if there is no such key or if its value is not a number. If the value is a string, an attempt will be made to evaluate it as a number.", "id": "27354"}
{"code": "@Override public Node renameNode(Node n,String namespaceURI,String name) throws DOMException {\n  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,\"Method not supported\");\n}\n", "nl": "DOM Level 3", "id": "40573"}
{"code": "private static boolean isInCenterTargetZone(float x,float y,float left,float top,float right,float bottom){\n  return x > left && x < right && y > top && y < bottom;\n}\n", "nl": "Determines if the specified coordinate falls anywhere inside the given bounds.", "id": "47197"}
{"code": "public static boolean isLegal(boolean expression){\n  return isLegal(expression,\"\");\n}\n", "nl": "Asserts that an argument is legal. If the given boolean is not <code>true</code>, an <code>IllegalArgumentException</code> is thrown.", "id": "6066"}
{"code": "public static void main(String[] args){\n  System.out.println((new KevinVoiceDirectory()).toString());\n}\n", "nl": "Print out information about this voice jarfile.", "id": "17667"}
{"code": "public void reset(){\n  mPacketCount=0;\n  mOctetCount=0;\n  setLong(mPacketCount,20,24);\n  setLong(mOctetCount,24,28);\n  delta=now=oldnow=0;\n}\n", "nl": "Resets the reports (total number of bytes sent, number of packets sent, etc.)", "id": "46621"}
{"code": "public void unlockUserInput(){\n  locked=false;\n  tabbedPane.setEnabled(true);\n  setCursor(Cursor.getDefaultCursor());\n  getCommandManager().setEnableCritical(true);\n  getCommandManager().updateEnableState();\n}\n", "nl": "ask view to allow user input", "id": "22992"}
{"code": "public static BufferedImage toBufferedImage(Image image){\n  return ImageTransform.toBufferedImage(image,BufferedImage.TYPE_INT_ARGB_PRE);\n}\n", "nl": "toBufferedImage <p> Transform from an Image instance to a BufferedImage instance", "id": "19326"}
{"code": "public Criteria or(){\n  Criteria criteria=createCriteriaInternal();\n  oredCriteria.add(criteria);\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.banned_ips", "id": "32882"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CANNOT_USE_ITEM_TOO_LOW_LEVEL_MUST_BE_THIS_LEVEL(int value1,int value0){\n  return new SM_SYSTEM_MESSAGE(1300372,value0,new DescriptionId(value1));\n}\n", "nl": "You cannot use %1 until you reach level %0.", "id": "21950"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FIELDARTIFACT_FIRE(String value1,String value0,String value2){\n  return new SM_SYSTEM_MESSAGE(1400316,value1,value0,value2);\n}\n", "nl": "%1 of %0 has activated the Artifact %2.", "id": "25047"}
{"code": "public static void showError(String message){\n  showNotification(title,message,Mode.error,Pos.BOTTOM_LEFT,60000);\n}\n", "nl": "show an error notation", "id": "33437"}
{"code": "public static void copyAssets(Context context,String assetsFilename,File file,String mode) throws IOException, InterruptedException {\n  AssetManager manager=context.getAssets();\n  final InputStream is=manager.open(assetsFilename);\n  copyFile(file,is,mode);\n}\n", "nl": "copy file in assets into destination file", "id": "6896"}
{"code": "public void clearAll(){\n  if (items != null) {\n    items.clear();\n  }\n  if (emptyItems != null) {\n    emptyItems.clear();\n  }\n}\n", "nl": "Clears all views", "id": "24525"}
{"code": "private void saveTouchStart(MotionEvent event){\n  mSavedMatrix.set(mMatrix);\n  mTouchStartPoint.set(event.getX(),event.getY());\n  mClosestDataSetToTouch=mChart.getDataSetByTouchPoint(event.getX(),event.getY());\n}\n", "nl": "Saves the current Matrix state and the touch-start point.", "id": "14847"}
{"code": "public PhotosGetNewTagsQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of photos to return.", "id": "28161"}
{"code": "public boolean filterOut(final SAMRecord first,final SAMRecord second){\n  throw new UnsupportedOperationException(\"Paired *Filter not implemented!\");\n}\n", "nl": "Determines whether a pair of SAMRecord matches this filter", "id": "32434"}
{"code": "public void reset(){\n  Iterator iIter=Arrays.asList(getAvailableCategories()).iterator();\n  while (iIter.hasNext())   Repository.deleteObject((String)iIter.next(),INSECTDB.CATEGORY_TYPE);\n}\n", "nl": "Resets categories and all other data of the Decider.", "id": "3795"}
{"code": "public boolean isMotorEnabled(){\n  return motorEnabled;\n}\n", "nl": "Returns true if the motor is enabled.", "id": "36414"}
{"code": "private boolean isPrimitiveTypeWrapper(ModelImpl modelImpl){\n  return (modelImpl.getProperties() == null && modelImpl.getAdditionalProperties() == null) && !Strings.isNullOrEmpty(modelImpl.getType()) && !\"object\".equalsIgnoreCase(modelImpl.getType())&& WellKnownTypeUtils.isPrimitiveType(modelImpl.getType());\n}\n", "nl": "Returns true if the modelImpl is a wrapper of primitive type like string, Float etc; false otherwise", "id": "31352"}
{"code": "@Override public void endExternalSubset(Augmentations augmentations) throws XNIException {\n}\n", "nl": "The end of the external subset.", "id": "29702"}
{"code": "@Override public Node cloneNode(boolean deep){\n  ElementImpl newnode=(ElementImpl)super.cloneNode(deep);\n  if (attributes != null) {\n    newnode.attributes=(AttributeMap)attributes.cloneMap(newnode);\n  }\n  return newnode;\n}\n", "nl": "Return a duplicate copy of this Element. Note that its children will not be copied unless the \"deep\" flag is true, but Attributes are <i>always</i> replicated.", "id": "37994"}
{"code": "public MessagesSendQuery forwardMessages(List<String> value){\n  return unsafeParam(\"forward_messages\",value);\n}\n", "nl": "ID of forwarded messages, separated with a comma. Listed messages of the sender will be shown in the message body at the recipient's. <p> Example: 123,431,544", "id": "33154"}
{"code": "public EmailBuilder to(List<String> toAddresses){\n  this.to.addAll(toAddresses);\n  return this;\n}\n", "nl": "adds \"To\" (primary) recipients to the email that is being built.", "id": "15743"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bleed_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200767,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] is bleeding because it used [%SkillName].", "id": "40566"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_LIMIT_SALE_M_EPIC_SHOP_DESC02(String value0){\n  return new SM_SYSTEM_MESSAGE(1400440,value0);\n}\n", "nl": "%0 is selling materials to create the items of Crafting Masters.", "id": "43860"}
{"code": "public void toggleDividerVisibility(boolean show){\n  mStepDivider.setVisibility(show ? VISIBLE : GONE);\n}\n", "nl": "Changes the visibility of the horizontal line in the tab", "id": "49892"}
{"code": "@Override public void close(){\n}\n", "nl": "close the array", "id": "31343"}
{"code": "@Override public void onEffectChanged(Effect effect){\n  requestRender(GLRenderer.RenderRequest.EFFECT);\n}\n", "nl": "Gets called when a parameter of an effect has changed. This method then triggers a fresh rendering of the effect. Can be overridden in subclasses but must be called through.", "id": "11486"}
{"code": "public static Color toColour(String htmlColour){\n  Color colour=null;\n  if (validColourString(htmlColour)) {\n    colour=SLD.toColor(htmlColour);\n  }\n  return colour;\n}\n", "nl": "Converts colour string to colour.", "id": "54548"}
{"code": "public final TestSubscriber<T> requestedFusionMode(int requestMode){\n  this.requestedFusionMode=requestMode;\n  return this;\n}\n", "nl": "Setup what fusion mode should be requested from the incomining Subscription if it happens to be QueueSubscription", "id": "14201"}
{"code": "public double reduce(String numericColumnName,NumericReduceFunction function){\n  Column column=column(numericColumnName);\n  return function.reduce(column.subset(rowMap).toDoubleArray());\n}\n", "nl": "Returns the result of applying the given function to the specified column", "id": "49970"}
{"code": "public static JavaRDD<List<Writable>> normalize(Schema schema,JavaRDD<List<Writable>> data,List<String> skipColumns){\n  return normalize(schema,data,0,1,skipColumns);\n}\n", "nl": "Scale all data  0 to 1", "id": "29661"}
{"code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.isAllowNucleotides() && viewer.isShowAminoAcids();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "10220"}
{"code": "public void reenterPreparedExternalXid(Object xid,List<TransactionParticipant> parts) throws RemoteException, CannotCommitException {\n  getProxy().reenterPreparedExternalXid(xid,parts);\n}\n", "nl": "Retrieves a <code>Transaction</code> given the transaction's ID.", "id": "20417"}
{"code": "@Override public boolean onOptionsItemSelected(MenuItem item){\nswitch (item.getItemId()) {\ncase R.id.menu_refresh:\n    SyncUtils.triggerRefresh();\n  return true;\n}\nreturn super.onOptionsItemSelected(item);\n}\n", "nl": "Respond to user gestures on the ActionBar.", "id": "47178"}
{"code": "public boolean isApplicable(){\n  ImportBlastDialog importBlastDialog=(ImportBlastDialog)getParent();\n  return importBlastDialog.isAppliable();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "5450"}
{"code": "private void drawSolidProgress(Canvas canvas){\n  canvas.drawArc(mProgressRectF,DEFAULT_START_DEGREE,360.0f,false,mProgressBackgroundPaint);\n  canvas.drawArc(mProgressRectF,DEFAULT_START_DEGREE,360.0f * getProgress() / getMax(),true,mProgressPaint);\n}\n", "nl": "Just draw arc", "id": "52718"}
{"code": "public void add(short value){\n  ensureCapacity(fLength + 1);\n  fData[fLength++]=value;\n}\n", "nl": "Adds the value to the vector.", "id": "11701"}
{"code": "public boolean isBcontains(int taxon){\n  return B.get(taxon);\n}\n", "nl": "does B part containt taxon?", "id": "26749"}
{"code": "private String toHexString(long value,int digits){\n  long cutoff=1L << (digits * 4);\n  return Long.toHexString(cutoff | (value & (cutoff - 1))).substring(1);\n}\n", "nl": "Returns the specified number of the least significant digits of the hexadecimal representation of the given value, discarding more significant digits or padding with zeros as necessary. Only lowercase letters are used in the returned hexadecimal representation.", "id": "1437"}
{"code": "public Builder subdomains(String[] subdomains){\n  this.subdomains=subdomains;\n  return this;\n}\n", "nl": "Subdomains of the tile service. Can be passed in the form of one string (where each letter is a subdomain name) or an array of strings. </br> default {\"abc\"}", "id": "45430"}
{"code": "public void useItem(ItemId type) throws RemoteServerException, LoginFailedException {\n  if (type == ItemId.UNRECOGNIZED) {\n    throw new IllegalArgumentException(\"You cannot use item for UNRECOGNIZED\");\n  }\nswitch (type) {\ncase ITEM_INCENSE_ORDINARY:\ncase ITEM_INCENSE_SPICY:\ncase ITEM_INCENSE_COOL:\ncase ITEM_INCENSE_FLORAL:\n    useIncense(type);\n  break;\ndefault :\nbreak;\n}\n}\n", "nl": "use an item with itemID", "id": "42658"}
{"code": "public boolean contains(String name){\n  return indexOf(name) != -1;\n}\n", "nl": "does this taxa object contain the named taxon?", "id": "5257"}
{"code": "static <T>T checkNotNull(T reference){\n  if (reference == null) {\n    throw new NullPointerException();\n  }\n  return reference;\n}\n", "nl": "Ensures that an object reference passed as a parameter to the calling method is not null.", "id": "31077"}
{"code": "public boolean isCleared(){\n  return _cleared;\n}\n", "nl": "Gets whether the fields of this state manager have been cleared.", "id": "16174"}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){\n  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. This version of the call is used for Views that need to specify a Scroll Range but scroll back to it's edge correctly.", "id": "30308"}
{"code": "public Iterator<PDGNode> iterator(){\n  return new ChildPDGFlowIterator(this.m_nodes);\n}\n", "nl": "return an iterator that know how to follow the control flow in a region. This actually returns a ChildPDGFlowIterator that only iterates through the  dependent nodes that contribute to the units that belong to a region as defined by a weak region.", "id": "23163"}
{"code": "public DocsSaveQuery save(Actor actor,String file){\n  return new DocsSaveQuery(getClient(),actor,file);\n}\n", "nl": "Saves a document after uploading it to a server.", "id": "10764"}
{"code": "public void onDestroy(){\n  this.stop();\n}\n", "nl": "Called by AccelBroker when listener is to be shut down. Stop listener.", "id": "35087"}
{"code": "@Bean public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(){\n  MappingJackson2HttpMessageConverter mjhmc=new MappingJackson2HttpMessageConverter();\n  Jackson2ObjectMapperFactoryBean jomfb=new Jackson2ObjectMapperFactoryBean();\n  jomfb.setAutoDetectFields(false);\n  jomfb.setIndentOutput(shouldIndentJacksonOutput);\n  jomfb.afterPropertiesSet();\n  mjhmc.setObjectMapper(jomfb.getObject());\n  return mjhmc;\n}\n", "nl": "Configuration Jackson ObjectMapper", "id": "33617"}
{"code": "public Map.Entry<K,V> firstEntry(){\n  for (; ; ) {\n    Node<K,V> n=findFirst();\n    if (n == null)     return null;\n    AbstractMap.SimpleImmutableEntry<K,V> e=n.createSnapshot();\n    if (e != null)     return e;\n  }\n}\n", "nl": "Returns a key-value mapping associated with the least key in this map, or <tt>null</tt> if the map is empty. The returned entry does <em>not</em> support the <tt>Entry.setValue</tt> method.", "id": "27605"}
{"code": "@Override public void onRequestError(int code,String message){\n  progressDialog.cancel();\n  if (code == ConnectAPI.COUPON_CODE) {\n    showMessage(message);\n  }\n}\n", "nl": "On request failed message is shown to the user.", "id": "40083"}
{"code": "public void onSearchResultsLoaded(boolean wasPrefetch){\n  mPanelMetrics.onSearchResultsLoaded(wasPrefetch);\n}\n", "nl": "Called when the SERP finishes loading, this records the duration of loading the SERP from the time the panel was opened until the present.", "id": "26807"}
{"code": "private static String wrapWithMergeConflict(String original,String added){\n  String sep=\"\\n\";\n  return \"<<<<<<< Original\" + sep + original+ sep+ \"=======\"+ sep+ added+ \">>>>>>> Added\"+ sep;\n}\n", "nl": "Wraps the given strings in the standard conflict syntax", "id": "21833"}
{"code": "public static IOFileFilter magicNumberFileFilter(byte[] magicNumber,long offset){\n  return new MagicNumberFileFilter(magicNumber,offset);\n}\n", "nl": "Returns a filter that accepts files that contains the provided magic number at a specified offset within the file.", "id": "29309"}
{"code": "public double cond(){\n  return s[0] / s[Math.min(m,n) - 1];\n}\n", "nl": "Two norm condition number", "id": "34521"}
{"code": "public static int px2dip(Context context,float pxValue){\n  return (int)(pxValue / getDensity(context) + 0.5f);\n}\n", "nl": "convert the px to dp depend on the device density.", "id": "52184"}
{"code": "public boolean isReachable(){\n  return method.isReachable();\n}\n", "nl": "Returns if the rest method reachable with current scoper.", "id": "8392"}
{"code": "public boolean isHighlightEnabled(){\n  for (  IDataSet set : mDataSets) {\n    if (!set.isHighlightEnabled())     return false;\n  }\n  return true;\n}\n", "nl": "Returns true if highlighting of all underlying values is enabled, false if not.", "id": "828"}
{"code": "public boolean isNotSet(){\n  return isNotSet;\n}\n", "nl": "Returns the not set flag.", "id": "28035"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "10124"}
{"code": "public LookupExtractionFunction withRetainMissingValue(Boolean retainMissingValue){\n  return new LookupExtractionFunction(lookup,retainMissingValue,replaceMissingValueWith,injective,optimize);\n}\n", "nl": "Builds a new LookupExtractionFunction with the given retainMissingValue property, preserves other properties.", "id": "23984"}
{"code": "public void dismissLoFiBar(){\n  if (mSnackbarManager.isShowing())   mSnackbarManager.dismissSnackbars(this);\n}\n", "nl": "Dismisses the snackbar.", "id": "25613"}
{"code": "final public boolean has(String name){\n  return context != null && context.containsKey(name);\n}\n", "nl": "Checks if has the name in the model for response", "id": "7863"}
{"code": "public static String toString(URL url) throws IOException {\n  return toString(url,Charset.defaultCharset());\n}\n", "nl": "Gets the contents at the given URL.", "id": "43930"}
{"code": "@Override public void startGeneralEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {\n  fEntityRef=true;\n  if (fDocumentHandler != null) {\n    fDocumentHandler.startGeneralEntity(name,identifier,encoding,augs);\n  }\n}\n", "nl": "This method notifies the start of a general entity. <p/> <strong>Note:</strong> This method is not called for entity references appearing as part of attribute values.", "id": "27370"}
{"code": "public static LikesAttributesImpl empty(){\n  return new LikesAttributesImpl();\n}\n", "nl": "Create empty LikesAttributes.", "id": "54572"}
{"code": "public void stateChanged(ChangeEvent evt){\n  int scale=slider.getValue();\n  value.setText(\"x\" + String.valueOf(scale));\n  size.setText(\"Image Size: \" + (width * scale) + \" x \"+ (height * scale)+ \" pixels\");\n  preview.repaint();\n}\n", "nl": "Monitor changes to the scale slider.", "id": "55651"}
{"code": "public void addEntry(LocalVarEntry e){\n  vars.addElement(e);\n}\n", "nl": "Add a LocalVar Entry to the attribute", "id": "8376"}
{"code": "public Object[] copyAll(){\n  return Arrays.copyOf(args,args.length);\n}\n", "nl": "Returns all arguments in the argument list in a freshly-allocated array.", "id": "10344"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "744"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "3203"}
{"code": "public static boolean isScreenW(int widthDp){\n  DisplayMetrics displayMetrics=Resources.getSystem().getDisplayMetrics();\n  float screenWidth=displayMetrics.widthPixels / displayMetrics.density;\n  return screenWidth >= widthDp;\n}\n", "nl": "Return true if the width in DP of the device is equal or greater than the given value", "id": "14033"}
{"code": "protected boolean isOnSameScreenAsChildren(){\n  return true;\n}\n", "nl": "Whether this preference group should be shown on the same screen as its contained preferences.", "id": "17669"}
{"code": "protected FaveAddLinkQuery link(String value){\n  return unsafeParam(\"link\",value);\n}\n", "nl": "Link URL.", "id": "1636"}
{"code": "public List<String> endpoints(){\n  return this.endpoints;\n}\n", "nl": "gets the endpoints for the builder", "id": "18802"}
{"code": "@Override public boolean equals(Object other){\n  if (other instanceof IntArrayWrapper) {\n    return Arrays.equals(data,((IntArrayWrapper)other).data);\n  }\n  return false;\n}\n", "nl": "This method will be used check to ArrayWrapper object is equal or not", "id": "17092"}
{"code": "public GroupsGetMembersQueryWithFilter offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of community members.", "id": "36807"}
{"code": "public void addBodyDecl(BodyDecl node){\n  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the BodyDecl list.", "id": "19936"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Silence_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200895,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] became silenced because [%SkillCaster] used [%SkillName].", "id": "51504"}
{"code": "private void clone(final Properties properties){\n  if (properties.isEmpty())   return;\nsynchronized (properties) {\n    for (    final String key : properties.stringPropertyNames()) {\n      final String value=properties.getProperty(key);\n      if (!Strings.isNullOrEmpty(value)) {\n        data.put(key,value);\n      }\n    }\n  }\n}\n", "nl": "Clones all the values from the properties.  If the value is null, it will be ignored.", "id": "44646"}
{"code": "private void notify_1(){\n  bleManager.notifyDevice(UUID_SERVICE,UUID_NOTIFY_1,notifyCallback_1);\n}\n", "nl": "listen notify1", "id": "21331"}
{"code": "public void emit(View emiter,int particlesPerSecond){\n  emitWithGravity(emiter,Gravity.CENTER,particlesPerSecond);\n}\n", "nl": "Starts emiting particles from a specific view. If at some point the number goes over the amount of particles availabe on create no new particles will be created", "id": "14679"}
{"code": "public void reset(byte[] input,int length){\n  buffer.reset(input,0,length);\n}\n", "nl": "Resets the data that the buffer reads.", "id": "42086"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OpenAerial_END_ME_TO_B(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200473,skilltarget);\n}\n", "nl": "[%SkillTarget] is released from the Aerial Snare.", "id": "43891"}
{"code": "@Override protected void finalize() throws Throwable {\n  super.finalize();\n  _map.remove(_key,_value);\n}\n", "nl": "Remove any reference to this object from the cache", "id": "43213"}
{"code": "public boolean hasProgramStatus(){\n  return programStatus != null;\n}\n", "nl": "Indicates whether this parameters specifies a program status.", "id": "52498"}
{"code": "public void addChangingListener(OnWheelChangedListener listener){\n  changingListeners.add(listener);\n}\n", "nl": "Adds wheel changing listener", "id": "52997"}
{"code": "public int seconds(){\n  return this.seconds;\n}\n", "nl": "Returns the seconds in this time duration.", "id": "23505"}
{"code": "@Override public int hashCode(){\n  return _map.hashCode();\n}\n", "nl": "Returns the hash code value for this map.  The hash code of a map is defined to be the sum of the hashCodes of each entry in the map's entrySet view.  This ensures that <tt>t1.equals(t2)</tt> implies that <tt>t1.hashCode()==t2.hashCode()</tt> for any two maps <tt>t1</tt> and <tt>t2</tt>, as required by the general contract of Object.hashCode.", "id": "52340"}
{"code": "public synchronized void reset(){\n  timer.start(\"audioOut\");\n  if (line != null) {\n    waitResume();\n    if (isCancelled() && !isDone()) {\n      cancelled=false;\n      line.start();\n    }\n  }\n}\n", "nl": "Prepares for another batch of output. Larger groups of output (such as all output associated with a single FreeTTSSpeakable) should be grouped between a reset/drain pair.", "id": "23288"}
{"code": "public static boolean isNotNull(final String element){\n  boolean isNotNull=false;\n  if (element != null && !element.isEmpty()) {\n    isNotNull=true;\n  }\n  return isNotNull;\n}\n", "nl": "This utility method checks whether a particular String is null or not.", "id": "21098"}
{"code": "@Override public int countMissing(){\n  int count=0;\n  for (int i=0; i < size(); i++) {\n    if (get(i) == MISSING_VALUE) {\n      count++;\n    }\n  }\n  return count;\n}\n", "nl": "Returns the count of missing values in this column", "id": "14997"}
{"code": "public boolean hasDeviceFrame(@Nullable Device device){\n  DeviceData deviceData=getDeviceData(device);\n  if (deviceData == null) {\n    return false;\n  }\n  return !deviceData.getDescriptor().isStretchable();\n}\n", "nl": "Returns true if we have a dedicated frame image for the given device", "id": "36386"}
{"code": "public static void checkout(final ISVNRemoteFolder[] resources,final IProject[] projects,final IProgressMonitor monitor) throws SVNException {\n  CheckoutCommand command=new CheckoutCommand(resources,projects);\n  command.run(monitor);\n}\n", "nl": "Checkout the remote resources into the local workspace as projects. Each resource will be checked out into the corresponding project. You can use getProject to get a project for a given remote Folder Resources existing in the local file system at the target project location but now known to the workbench will be overwritten.", "id": "45071"}
{"code": "public void releaseWriteLockOnKey(K id){\n  if (id != null) {\n    cache.releaseWriteLockOnKey(id);\n    if (LOGGER.isTraceEnabled()) {\n      LOGGER.trace(cache.getName() + \" Released WRITE lock for id=\" + String.valueOf(id));\n    }\n  }\n else {\n    LOGGER.error(\"Trying to release write lock with a NULL key - throwing an exception!\");\n    throw new IllegalArgumentException(\"Trying to release write lock with null key!\");\n  }\n}\n", "nl": "Release a held write lock for the passed in key", "id": "57921"}
{"code": "private boolean isUserLimitReachedLocked(){\n  int nUsers=mUsers.size();\n  return nUsers >= VUserManager.getMaxSupportedUsers();\n}\n", "nl": "Check if we've hit the limit of how many users can be created.", "id": "24715"}
{"code": "public static String createRGBAString(Color c,double opacity){\n  return \"rgba(\" + (c.getRed() * 255) + \",\"+ (c.getGreen() * 255)+ \",\"+ (c.getBlue() * 255)+ \", \"+ opacity+ \");\";\n}\n", "nl": "Creates CSS RGBA string from the given color and opacity.", "id": "5178"}
{"code": "private void stopTimer(){\n  if (taskId != -1) {\n    plugin.getServer().getScheduler().cancelTask(taskId);\n    taskId=-1;\n  }\n}\n", "nl": "Stops the active inactivity timer.", "id": "27573"}
{"code": "public static <T>void addToJMenu(JPopupMenu popupMenu,T[] choices,T initialChoice,final CallBack<T> callBack){\n  add(popupMenu,choices,initialChoice,callBack);\n}\n", "nl": "add choices to an existing menu", "id": "1693"}
{"code": "public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HE_IS_ALREADY_MEMBER_OF_OTHER_ALLIANCE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300192,value0);\n}\n", "nl": "%0 is already a member of another alliance.", "id": "28924"}
{"code": "public static String toInternalName(String qual){\n  return qual.replace('.','/');\n}\n", "nl": "Converts a fully qualified class name to an internal name.", "id": "25185"}
{"code": "protected boolean shouldDrawValues(IDataSet set){\n  return set.isVisible() && set.isDrawValuesEnabled();\n}\n", "nl": "Returns true if the DataSet values should be drawn, false if not.", "id": "30364"}
{"code": "public final boolean canGetString(String field){\n  Column col=getColumn(field);\n  return (col == null ? false : col.canGetString());\n}\n", "nl": "Check if the given data field can return primitive <code>String</code> values.", "id": "57419"}
{"code": "public static String readPemStringFromFile(File file){\n  try {\n    byte[] fileContents=FileUtils.readFileToByteArray(file);\n    return new String(fileContents,Charset.forName(\"US-ASCII\"));\n  }\n catch (  IOException e) {\n    throw new ImportException(\"Unable to read PEM-encoded data from file: \" + file.getName());\n  }\n}\n", "nl": "Convenience method to read PEM data from a file. The file encoding must be US_ASCII.", "id": "52842"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set drawer=\" + ViewerBase.DiagramType.RoundedCladogram + \";\");\n}\n", "nl": "action to be performed", "id": "10310"}
{"code": "public int findFirstCompletelyVisibleItemPosition(){\n  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),true,false);\n  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);\n}\n", "nl": "Returns the adapter position of the first fully visible view. This position does not include adapter changes that were dispatched after the last layout pass.", "id": "51336"}
{"code": "public DistributedLogNamespaceBuilder regionId(int regionId){\n  this._regionId=regionId;\n  return this;\n}\n", "nl": "Region Id used for encoding logs in the namespace. The region id is useful when the namespace is globally spanning over regions.", "id": "20278"}
{"code": "@Override public int countMissing(){\n  int count=0;\n  for (int i=0; i < size(); i++) {\n    float f=get(i);\n    if (f != f) {\n      count++;\n    }\n  }\n  return count;\n}\n", "nl": "Returns the count of missing values in this column Implementation note: We use NaN for missing, so we can't compare against the MISSING_VALUE and use val != val instead", "id": "57923"}
{"code": "@NonNull @Override protected ViewHolder createViewHolder(@LayoutRes int layout,@NonNull ViewGroup parent){\n  return new ViewHolder(layout,parent);\n}\n", "nl": "Hint: Required method; if java had a way of allocating a generic I could move this method into the adapter. :(", "id": "45269"}
{"code": "private boolean isValidInHTTPHeader(String value){\n  char ch;\n  for (int i=value.length() - 1; i >= 0; --i) {\n    ch=value.charAt(i);\n    if (ch < 0x20 || ch > 0x7E) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Returns <code>true</code> if the given string would be valid in an HTTP header.", "id": "47493"}
{"code": "@Override public boolean onUnbind(Intent intent){\n  ((FileDownloaderBinder)mBinder).clearListeners();\n  return false;\n}\n", "nl": "Called when ALL the bound clients were onbound.", "id": "11289"}
{"code": "public static double regularizedBeta(double x,double a,double b){\n  return regularizedBeta(x,a,b,DEFAULT_EPSILON,Integer.MAX_VALUE);\n}\n", "nl": "Returns the <a href=\"http://mathworld.wolfram.com/RegularizedBetaFunction.html\"> regularized beta function</a> I(x, a, b).", "id": "54768"}
{"code": "public static void write(CharSequence data,Writer output) throws IOException {\n  if (data != null) {\n    write(data.toString(),output);\n  }\n}\n", "nl": "Writes chars from a <code>CharSequence</code> to a <code>Writer</code>.", "id": "45295"}
{"code": "@Deprecated public SpaceTypeDescriptorBuilder addCompoundIndex(String[] paths,SpaceIndexType indexType,boolean unique){\n  if (indexType != SpaceIndexType.BASIC)   throw new UnsupportedOperationException(\"only BASIC index type is supported for compoundindex\");\n  return addIndex(SpaceIndexFactory.createCompoundIndex(paths,indexType,null,unique));\n}\n", "nl": "Adds an index of the specified type for the specified path.", "id": "14571"}
{"code": "static public int makePosition(int line,int column){\n  return line << COLUMN_FIELD_BITS | column;\n}\n", "nl": "Packs symbol \"coordinates\" into a single number.", "id": "35733"}
{"code": "private Object readResolve(){\n  wakeUpQueue=new ArrayBlockingQueue<SerialMessage>(MAX_BUFFFER_SIZE,true);\n  timer=new Timer();\n  return this;\n}\n", "nl": "Resolves uninitialized fields after XML Deserialization.", "id": "2962"}
{"code": "public double compareDistributions(Distribution d1,Distribution d2){\n  return d1.similarityTo(d2);\n}\n", "nl": "Use default comparison between d1 and d2.", "id": "55202"}
{"code": "public double trace(){\n  double t=0;\n  for (int i=0; i < Math.min(m,n); i++) {\n    t+=A[i][i];\n  }\n  return t;\n}\n", "nl": "Matrix trace.", "id": "40647"}
{"code": "public boolean contains(BasenameList bnl){\n  if (bnl.getLength() > this.getLength())   return (false);\n  for (int i=0; i < bnl.getLength(); i++) {\n    if (!this.contains(bnl.getName(i)))     return (false);\n  }\n  return (true);\n}\n", "nl": "Check if the list contains another given one.", "id": "22535"}
{"code": "public void changeButtonBackgroundColor(int resId){\n  this.slickButtonBackgroundColor=resId;\n  slickFormSubmitButton.setBackgroundColor(slickButtonBackgroundColor);\n  slickFormSubmitButton.invalidate();\n}\n", "nl": "Change the submit button's background color to the one provided, this will not change the circular progress animation's color.", "id": "38651"}
{"code": "public static void addLooperPrinter(Printer printer){\n  addLooperPrinter(Looper.myLooper(),printer);\n}\n", "nl": "Add a printer to current thread's looper.", "id": "13323"}
{"code": "public static void init(Context context){\n  if (cameraManager == null) {\n    cameraManager=new CameraManager(context);\n  }\n}\n", "nl": "Initializes this static object with the Context of the calling Activity.", "id": "11273"}
{"code": "public GotoStmt newGotoStmt(Unit target){\n  return Jimple.v().newGotoStmt(target);\n}\n", "nl": "Constructs a GotoStmt(Stmt) grammar chunk.", "id": "678"}
{"code": "public Criteria createCriteria(){\n  Criteria criteria=createCriteriaInternal();\n  if (oredCriteria.size() == 0) {\n    oredCriteria.add(criteria);\n  }\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.countries", "id": "33489"}
{"code": "public BafBody newBody(SootMethod m){\n  return new BafBody(m);\n}\n", "nl": "Returns an empty BafBody associated with method m.", "id": "3299"}
{"code": "public boolean isVariable(){\n  return false;\n}\n", "nl": "Return true if this value is a variable.", "id": "57434"}
{"code": "public void close(){\n  connection.close();\n}\n", "nl": "Closes connection with mailbox.", "id": "49516"}
{"code": "public boolean last(){\n  return seek(MDB_LAST);\n}\n", "nl": "Position at last key/data item.", "id": "33753"}
{"code": "public static float calculateAngleFrom(VisibleObject obj1,VisibleObject obj2){\n  return calculateAngleFrom(obj1.getX(),obj1.getY(),obj2.getX(),obj2.getY());\n}\n", "nl": "Get an angle between the line defined by two objects and the horizontal axis", "id": "23450"}
{"code": "@Override public boolean hasNext(){\n  if (!isForward) {\n    currentRec=currentRec - pointerSize;\n    isForward=true;\n  }\n  return currentRec > 0 || blk.number() > 0;\n}\n", "nl": "Determines if the current log record is the earliest record in the log file.", "id": "46909"}
{"code": "private void createVendorOptionPanel(){\n  vendorOptionRasterFactory=new VendorOptionRasterFactory(getClass(),getFunctionManager(),this);\n  List<VendorOptionInterface> veList=vendorOptionRasterFactory.getVendorOptionList();\n  if (veList != null) {\n    for (    VendorOptionInterface extension : veList) {\n      extension.setParentPanel(this);\n    }\n  }\n}\n", "nl": "Creates the vendor option panel.", "id": "43846"}
{"code": "protected static void parseAndIgnoreWhitespace(final String source,final ParsePosition pos){\n  parseNextCharacter(source,pos);\n  pos.setIndex(pos.getIndex() - 1);\n}\n", "nl": "Parses <code>source</code> until a non-whitespace character is found.", "id": "17794"}
{"code": "protected synchronized void addType(String index,String typeName){\n  if (cacheIndicesTypes.containsKey(index)) {\n    cacheIndicesTypes.get(index).add(typeName);\n    log.debug(\"addType() - Added type {} in memory list\",typeName);\n  }\n else {\n    throw new IllegalArgumentException(\"Types must follow the format \\\"tag_dataType\\\"\");\n  }\n}\n", "nl": "Add a type in-memory cache. Called by the writing of a new Index if it was successful.", "id": "15069"}
{"code": "public boolean isPressed(int code){\n  MouseButton mb=this.buttons.get(code);\n  if (mb == null) {\n    return false;\n  }\n  return mb.isPressed();\n}\n", "nl": "Returns true if the given MouseEvent code was clicked and is waiting to be released.", "id": "55275"}
{"code": "public Boolean isWebSocket(){\n  return webSocket;\n}\n", "nl": "Gets the value of the webSocket property.", "id": "43543"}
{"code": "public static NBTTagList readNBTList(PacketBuffer buf){\n  NBTTagList value=new NBTTagList();\n  for (int i=0; i < buf.readInt(); i++) {\n    value.set(i,buf.readNBTTagCompoundFromBuffer());\n  }\n  return value;\n}\n", "nl": "Reads an NBT list from the buffer", "id": "37017"}
{"code": "private synchronized void trim(){\n  while (mCurrentSize > mSizeLimit) {\n    byte[] buf=mBuffersByLastUse.remove(0);\n    mBuffersBySize.remove(buf);\n    mCurrentSize-=buf.length;\n  }\n}\n", "nl": "Removes buffers from the pool until it is under its size limit.", "id": "35437"}
{"code": "private void saveProject(){\n  saveProject(false);\n}\n", "nl": "Saves the project and stays on the same screen.", "id": "29594"}
{"code": "private synchronized void disconnect(){\n  disconnectQuietly();\n  notifyConnectionListenerOnDisconnection();\n}\n", "nl": "Disconnects and notifies listeners of disconnection.", "id": "49822"}
{"code": "public static void createTask(Context context,Task task){\n  Intent intent=new Intent(context,NagboxService.class);\n  intent.setAction(ACTION_CREATE_TASK);\n  intent.putExtra(EXTRA_TASK,task);\n  context.startService(intent);\n}\n", "nl": "Create a new unstarted task. Doesn't trigger rescheduling alarms.", "id": "15003"}
{"code": "public static String implementationVersion(){\n  return implementationVersion;\n}\n", "nl": "Implementation version", "id": "10527"}
{"code": "public Future<?> scheduleRespawn(){\n  if (!getOwner().getSpawn().isNoRespawn()) {\n    return RespawnService.scheduleRespawnTask(getOwner());\n  }\n  return null;\n}\n", "nl": "Schedule respawn of npc In instances - no npc respawn", "id": "50098"}
{"code": "public static void write(File file,CharSequence data,String encoding) throws IOException {\n  write(file,data,encoding,false);\n}\n", "nl": "Writes a CharSequence to a file creating the file if it does not exist.", "id": "24766"}
{"code": "protected Object newInitialFlow(){\n  return emptySet.clone();\n}\n", "nl": "All INs are initialized to the empty set.", "id": "52620"}
{"code": "public static void verifyInterval(final double lower,final double upper) throws MathIllegalArgumentException {\n  if (lower >= upper) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.ENDPOINTS_NOT_AN_INTERVAL,lower,upper,false);\n  }\n}\n", "nl": "Check that the endpoints specify an interval.", "id": "29628"}
{"code": "public WallGetByIdQueryWithExtended fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields", "id": "38117"}
{"code": "public static UByte ubyte(short value) throws NumberFormatException {\n  return UByte.valueOf(value);\n}\n", "nl": "Create an <code>unsigned byte</code>", "id": "16006"}
{"code": "public VideoSearchQueryWithExtended date(Integer value){\n  return unsafeParam(\"date\",value);\n}\n", "nl": "Set date", "id": "38726"}
{"code": "public void quit(){\n  mQuit=true;\n  interrupt();\n}\n", "nl": "Forces this dispatcher to quit immediately.  If any requests are still in the queue, they are not guaranteed to be processed.", "id": "26314"}
{"code": "public boolean equalsShared(Item otherItem){\n  if (otherItem == null) {\n    return false;\n  }\n else {\n    return getSharedContents().equals(otherItem.getSharedContents());\n  }\n}\n", "nl": "Determines if the shared contents of the two items are the same.", "id": "53534"}
{"code": "public static final Vector2 show(Window owner){\n  ShiftWorldDialog swd=new ShiftWorldDialog(owner);\n  swd.setLocationRelativeTo(owner);\n  swd.setVisible(true);\n  if (!swd.canceled) {\n    return swd.shiftPanel.getShift();\n  }\n  return null;\n}\n", "nl": "Shows a dialog used to accept input for applying a force to a body. <p> Returns null if the dialog is closed or canceled.", "id": "14064"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CaseHeal_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200492,skilltarget,skillname);\n}\n", "nl": "[%SkillTarget] is recovering HP as you used [%SkillName].", "id": "30035"}
{"code": "public static SM_SYSTEM_MESSAGE STR_PETITION_GM_LEAVE_MSG(String value0){\n  return new SM_SYSTEM_MESSAGE(1300565,value0);\n}\n", "nl": "This is a message from the GM: %0", "id": "12484"}
{"code": "public int length(){\n  if (root.child == null) {\n    return 0;\n  }\n  if (length > -1) {\n    return length;\n  }\n  length=root.getChildCount();\n  return length;\n}\n", "nl": "Returns the number of fields on this object", "id": "46929"}
{"code": "public void clear(){\n  consumed=0;\n  next=0;\n  computeBlockSize();\n}\n", "nl": "Clears data, recomputes blockSize and resets consumed and nextToTake.", "id": "34957"}
{"code": "public static Style createNewStyle(){\n  Style style=styleFactory.createStyle();\n  style.setName(\"New Style\");\n  return style;\n}\n", "nl": "Creates the new style.", "id": "41380"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n  setChild(new List(),1);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "8128"}
{"code": "public boolean isNavigationAtBottom(){\n  return (mSmallestWidthDp >= 600 || mInPortrait);\n}\n", "nl": "Should a navigation bar appear at the bottom of the screen in the current device configuration? A navigation bar may appear on the right side of the screen in certain configurations.", "id": "10673"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "31426"}
{"code": "public PolyhedronsSet rotate(final Vector3D center,final Rotation rotation){\n  return (PolyhedronsSet)applyTransform(new RotationTransform(center,rotation));\n}\n", "nl": "Rotate the region around the specified point. <p>The instance is not modified, a new instance is created.</p>", "id": "17646"}
{"code": "public String process(Item seg) throws ProcessException {\n  return segCodaCtype(seg,\"s\");\n}\n", "nl": "Performs some processing on the given item.", "id": "14476"}
{"code": "public Builder dragging(Boolean dragging){\n  this.dragging=dragging;\n  return this;\n}\n", "nl": "Whether the map is draggable with mouse/touch or not. default null", "id": "23816"}
{"code": "public static boolean isGeneralPunctuation(char c){\n  return isRange(c,'\\u2000','\\u206F');\n}\n", "nl": "Unicode: 2000 ~ 206F.", "id": "29306"}
{"code": "public static void sendServerListFor(int accountId){\n  if (accountsOnLS.containsKey(accountId)) {\n    accountsOnLS.get(accountId).sendPacket(new SM_SERVER_LIST());\n  }\n}\n", "nl": "SM_SERVER_LIST call", "id": "26104"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATK_Instant_A_TO_ME(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200716,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] has inflicted %num0 damage on you by using [%SkillName].", "id": "28751"}
{"code": "@Override public int hashCode(){\n  return (getClass().getName() + Name).hashCode();\n}\n", "nl": "The hash code of the object is the hashcode of its class name, followed by the object's name.", "id": "33042"}
{"code": "public final synchronized void sendPacket(AionServerPacket bp){\n  if (isWriteDisabled()) {\n    return;\n  }\n  log.debug(\"sending packet: \" + bp);\n  sendMsgQueue.addLast(bp);\n  enableWriteInterest();\n}\n", "nl": "Sends AionServerPacket to this client.", "id": "23920"}
{"code": "public synchronized ZooKeeperClientBuilder zkc(ZooKeeperClient zkc){\n  this.cachedClient=zkc;\n  return this;\n}\n", "nl": "Build zookeeper client using existing <i>zkc</i> client.", "id": "23733"}
{"code": "protected void postProcessEntity(T entity,WebOptions options,Map<String,String> parameters) throws Exception {\n}\n", "nl": "Override to process a single entity after it has been retrieved from storage and before it is returned to the view. Entity is null-safe.", "id": "8365"}
{"code": "public boolean isRestrictedToNonNegative(){\n  return isRestricted;\n}\n", "nl": "Indicates whether all the variables must be restricted to non-negative values.", "id": "19507"}
{"code": "public boolean isAppliable(){\n  return getBlastFileName().trim().length() > 0 && (new File(Basic.getFirstLine(getBlastFileName()).trim())).exists();\n}\n", "nl": "is meganization applicable?", "id": "1145"}
{"code": "public IMethod findDeclaringMethod(IMethod overriding,boolean testVisibility) throws JavaModelException {\n  IMethod result=null;\n  IMethod overridden=findOverriddenMethod(overriding,testVisibility);\n  while (overridden != null) {\n    result=overridden;\n    overridden=findOverriddenMethod(result,testVisibility);\n  }\n  return result;\n}\n", "nl": "Finds the method that declares the given method. A declaring method is the 'original' method declaration that does not override nor implement a method. <code>null</code> is returned it the given method does not override a method. When searching, super class are examined before implemented interfaces.", "id": "51079"}
{"code": "protected OrdersGetAmountQuery votes(List<String> value){\n  return unsafeParam(\"votes\",value);\n}\n", "nl": "Set votes", "id": "35536"}
{"code": "public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {\n  writeLines(lines,lineEnding,output,Charset.defaultCharset());\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to an <code>OutputStream</code> line by line, using the default character encoding of the platform and the specified line ending.", "id": "33231"}
{"code": "public void assignBaseObjId(int baseObjId){\n  this.baseObjId=baseObjId;\n}\n", "nl": "Assigns value to baseObjId. This will override the original value. <b>Never call this method unless you know exactly what you are doing.</b>", "id": "8179"}
{"code": "public static void write(String data,Writer output) throws IOException {\n  if (data != null) {\n    output.write(data);\n  }\n}\n", "nl": "Writes chars from a <code>String</code> to a <code>Writer</code>.", "id": "4768"}
{"code": "public void addResource(ResourceDeclaration node){\n  List<ResourceDeclaration> list=(parent == null || state == null) ? getResourceListNoTransform() : getResourceList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the Resource list.", "id": "12306"}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){\n  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. This version of the call is used for Views that need to specify a Scroll Range but scroll back to it's edge correctly.", "id": "56391"}
{"code": "private void fillDeclaredPrefixes(Iterator namespaces){\n  fDeclaredPrefixes.clear();\n  while (namespaces.hasNext()) {\n    Namespace ns=(Namespace)namespaces.next();\n    String prefix=ns.getPrefix();\n    fDeclaredPrefixes.add(prefix != null ? prefix : \"\");\n  }\n}\n", "nl": "Fills in the list of declared prefixes.", "id": "46890"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FREE_EXPERIENCE_CHARACTER_CANT_USE_VENDOR(String value0){\n  return new SM_SYSTEM_MESSAGE(1400398,value0);\n}\n", "nl": "Characters under level %0 who are using a free trial cannot use the Broker.", "id": "17985"}
{"code": "public void readFrom(InputStream is) throws ParserConfigurationException, SAXException, IOException, TransformerException {\n  readFrom(is,null);\n}\n", "nl": "Read data from input stream <code>is</code>, in the appropriate way as determined by our <code>type</code>.", "id": "6129"}
{"code": "public void renewUntil(Lease lease,long desiredExpiration,long renewDuration,LeaseListener listener){\n  validateDuration(renewDuration,desiredExpiration == Lease.FOREVER,\"desiredExpiration\");\n  addLease(lease,desiredExpiration,renewDuration,listener,SystemTime.timeMillis());\n}\n", "nl": "Include a lease in the managed set until a specified time and with a specified renewal duration. <p> This method takes as arguments: a reference to the lease to manage, the desired expiration time of the lease, the renewal duration time for the lease, and a reference to the <code>LeaseListener</code> object that will receive notification of exceptional conditions when attempting to renew this lease. The <code>LeaseListener</code> argument may be <code>null</code>. <p> If the <code>lease</code> argument is <code>null</code>, a <code>NullPointerException</code> will be thrown. If the <code>desiredExpiration</code> argument is <code>Lease.FOREVER</code>, the <code>renewDuration</code> argument may be <code>Lease.ANY</code> or any positive value; otherwise, the <code>renewDuration</code> argument must be a positive value. If the <code>renewDuration</code> argument does not meet these requirements, an <code>IllegalArgumentException</code> will be thrown. <p> If the lease passed to this method is already in the set of managed leases, the listener object, the desired expiration, and the renewal duration associated with that lease will be replaced with the new listener, desired expiration, and renewal duration. <p> The lease will remain in the set until one of the following occurs: <ul> <li> The lease's desired or actual expiration time is reached. <li> An explicit removal of the lease from the set is requested via a <code>cancel</code>, <code>clear</code>, or <code>remove</code> call on the renewal manager. <li> The renewal manager tries to renew the lease and gets a bad object exception, bad invocation exception, or <code>LeaseException</code>. </ul> <p> This method will interpret the value of the <code>desiredExpiration</code> argument as the desired absolute system time after which the lease is no longer valid. This argument provides the ability to indicate an expiration time that extends beyond the actual expiration of the lease. If the value passed for this argument does indeed extend beyond the lease's actual expiration time, then the lease will be systematically renewed at appropriate times until one of the conditions listed above occurs. If the value is less than or equal to the actual expiration time, nothing will be done to modify the time when the lease actually expires. That is, the lease will not be renewed with an expiration time that is less than the actual expiration time of the lease at the time of the call. <p> If the <code>LeaseListener</code> argument is a non-<code>null</code> object reference, it will receive notification of exceptional conditions occurring upon a renewal attempt of the lease. In particular, exceptional conditions include the reception of a <code>LeaseException</code>, bad object exception, or bad invocation exception (collectively these are referred to as <em>definite exceptions</em>) during a renewal attempt or the lease's actual expiration being reached before its desired expiration. <p> If a definite exception occurs during a lease renewal request, the exception will be wrapped in an instance of the <code>LeaseRenewalEvent</code> class and sent to the listener. <p> If an indefinite exception occurs during a renewal request for the lease, renewal requests will continue to be made for that lease until: the lease is renewed successfully, a renewal attempt results in a definite exception, or the lease's actual expiration time has been exceeded. If the lease cannot be successfully renewed before its actual expiration is reached, the exception associated with the most recent renewal attempt will be wrapped in an instance of the <code>LeaseRenewalEvent</code> class and sent to the listener. <p> If the lease's actual expiration is reached before the lease's desired expiration time, and either 1) the last renewal attempt succeeded or 2) there have been no renewal attempts, a <code>LeaseRenewalEvent</code> containing a <code>null</code> exception will be sent to the listener.", "id": "53651"}
{"code": "@Override public Node item(int index){\n  return nodeListItem(index);\n}\n", "nl": "NodeList method: Return the Nth immediate child of this node, or null if the index is out of bounds.", "id": "29991"}
{"code": "public final boolean canSetDouble(String field){\n  return m_table.canSetDouble(field);\n}\n", "nl": "Check if the <code>setDouble</code> method can safely be used for the given data field.", "id": "6548"}
{"code": "protected final float calculateModuleSize(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft){\n  return (calculateModuleSizeOneWay(topLeft,topRight) + calculateModuleSizeOneWay(topLeft,bottomLeft)) / 2.0f;\n}\n", "nl": "<p>Computes an average estimated module size based on estimated derived from the positions of the three finder patterns.</p>", "id": "366"}
{"code": "public VideoSearchQuery shorter(Integer value){\n  return unsafeParam(\"shorter\",value);\n}\n", "nl": "Set shorter", "id": "6333"}
{"code": "@Override public int hashCode(){\n  if (_stubId != null)   return _stubId.hashCode();\n  return _part.hashCode();\n}\n", "nl": "Return the <code>hashCode</code> of the embedded <code>TransactionParticipant</code>.", "id": "33342"}
{"code": "protected UsersGetNearbyQuery latitude(float value){\n  return unsafeParam(\"latitude\",value);\n}\n", "nl": "Geographic latitude of the place a user is located, in degrees (from -90 to 90)", "id": "15330"}
{"code": "public long blocksAccessed(){\n  return numBlks;\n}\n", "nl": "Returns the estimated number of blocks in the table.", "id": "21888"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.GOODALL + \";\");\n}\n", "nl": "action to be performed", "id": "11772"}
{"code": "public boolean hasInit(){\n  return getInitOpt().getNumChild() != 0;\n}\n", "nl": "Check whether the optional Init child exists.", "id": "48177"}
{"code": "public <T>T recall(String pathName,Class<T> type) throws IOException {\n  return recall(new Path(pathName),type);\n}\n", "nl": "Retrieves the object stored at the given path name in HDFS.", "id": "46328"}
{"code": "public boolean hadAnnotations(){\n  return hadAnnotations;\n}\n", "nl": "Returns <code>true</code> if any non-<code>null</code> location annotations have been written to this stream.", "id": "9278"}
{"code": "@Override public void revertToDefaultValue(){\n  if (this.checkBox != null) {\n    checkBox.setSelected(defaultValue);\n  }\n}\n", "nl": "Revert to default value.", "id": "5370"}
{"code": "private static File createReserveDiskCacheDir(Context context){\n  File cacheDir=StorageUtils.getCacheDirectory(context,false);\n  File individualDir=new File(cacheDir,\"uil-images\");\n  if (individualDir.exists() || individualDir.mkdir()) {\n    cacheDir=individualDir;\n  }\n  return cacheDir;\n}\n", "nl": "Creates reserve disk cache folder which will be used if primary disk cache folder becomes unavailable", "id": "339"}
{"code": "@VisibleForTesting void reset(){\n  setRawCounter(0);\n}\n", "nl": "Resets the counter to zero and enabled.", "id": "9233"}
{"code": "public void clear(){\n  this.n=0;\n  minImpl.clear();\n  maxImpl.clear();\n  sumImpl.clear();\n  sumLogImpl.clear();\n  sumSqImpl.clear();\n  geoMeanImpl.clear();\n  meanImpl.clear();\n  covarianceImpl.clear();\n}\n", "nl": "Resets all statistics and storage.", "id": "9639"}
{"code": "int toplineFrequency(int time){\n  if (time < startTime || time > endTime) {\n    throw new RuntimeException(\"Invalid time \" + time + \" (startTime \"+ startTime+ \", endTime \"+ endTime+ \")\");\n  }\n  return topStart + (int)(topSlope * (time - startTime));\n}\n", "nl": "Calculate the frequency of the topline at time <code>time</code>. This is calculated as a linear function of topStart, topEnd and time.", "id": "11434"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "12738"}
{"code": "public static JsonObject unmodifiableObject(JsonObject object){\n  return new JsonObject(object,true);\n}\n", "nl": "Returns an unmodifiable JsonObject for the specified one. This method allows to provide read-only access to a JsonObject. <p> The returned JsonObject is backed by the given object and reflect changes that happen to it. Attempts to modify the returned JsonObject result in an <code>UnsupportedOperationException</code>. </p>", "id": "35100"}
{"code": "private void checkLegal(){\n  if (mDataSets == null)   return;\n  if (this instanceof ScatterData || this instanceof CombinedData)   return;\n  for (int i=0; i < mDataSets.size(); i++) {\n    if (mDataSets.get(i).getEntryCount() > mXVals.size()) {\n      throw new IllegalArgumentException(\"One or more of the DataSet Entry arrays are longer than the x-values array of this ChartData object.\");\n    }\n  }\n}\n", "nl": "Checks if the combination of x-values array and DataSet array is legal or not.", "id": "25371"}
{"code": "public final int yylength(){\n  return zzMarkedPos - zzStartRead;\n}\n", "nl": "Returns the length of the matched text region.", "id": "6573"}
{"code": "public void delete(PushLog log){\n  configPushLogDao.unBindApp(log);\n  configPushLogDao.delete(log.getId());\n}\n", "nl": "Delete the config", "id": "39674"}
{"code": "protected int indexOfLocal(Value local){\n  int localIndex=origLocals.indexOf(local);\n  if (localIndex == -1) {\n    Local oldLocal=newLocalsToOldLocal.get(local);\n    localIndex=origLocals.indexOf(oldLocal);\n  }\n  return localIndex;\n}\n", "nl": "Convenient function that maps new Locals to the originating Local, and finds the appropriate array index into the naming structures.", "id": "6460"}
{"code": "private void afterFailedBulkExecution(IReplicationInBatchContext context){\n  if (_operationStatisticsHandler != null) {\n    MirrorOperationsImpl sourceChannelStatistics=(MirrorOperationsImpl)_operationStatisticsHandler.getSourceChannelStatistics(context.getSourceLookupName());\n    List<BulkItem> bulk=context.getPendingContext();\n    sourceChannelStatistics.addFailedOperationCount(bulk);\n  }\n}\n", "nl": "Invoked after bulk execution in EDS to update mirror statistics", "id": "53839"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_GET_REWARD_ERROR_NO_QUEST_ITEM_MULTIPLE(String value1,String value0){\n  return new SM_SYSTEM_MESSAGE(1300603,value1,value0);\n}\n", "nl": "You cannot receive the quest reward as you do not have %1 %0.", "id": "50038"}
{"code": "@Override public int read() throws IOException {\n  for (; ; ) {\n    if (encoderOut.hasRemaining()) {\n      return encoderOut.get() & 0xFF;\n    }\n else {\n      fillBuffer();\n      if (endOfInput && !encoderOut.hasRemaining()) {\n        return -1;\n      }\n    }\n  }\n}\n", "nl": "Read a single byte.", "id": "27271"}
{"code": "public boolean optimizeScanForSingleObject(){\n  return size() <= 1;\n}\n", "nl": "return true if we can save iterator creation and get a single entry", "id": "5242"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonTrap_A_TO_ME(String skillcaster,String value0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200733,skillcaster,value0,skillname);\n}\n", "nl": "[%SkillCaster] has caused you to summon %0 by using [%SkillName].", "id": "39319"}
{"code": "public final void yybegin(int newState){\n  zzLexicalState=newState;\n}\n", "nl": "Enters a new lexical state", "id": "24926"}
{"code": "public static byte[] toByteArray(Reader input) throws IOException {\n  return toByteArray(input,Charset.defaultCharset());\n}\n", "nl": "Get the contents of a <code>Reader</code> as a <code>byte[]</code> using the default character encoding of the platform. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedReader</code>.", "id": "56417"}
{"code": "public GroupsIsMemberQueryWithUserIds isMember(String groupId,List<Integer> userIds){\n  return new GroupsIsMemberQueryWithUserIds(getClient(),groupId,userIds);\n}\n", "nl": "Returns information specifying whether a user is a member of a community.", "id": "9453"}
{"code": "public void upgradeDataDimensionItemsToReportingRateMetric(){\n  String sql=\"update datadimensionitem \" + \"set metric='REPORTING_RATE' \" + \"where datasetid is not null \"+ \"and metric is null;\";\n  executeSql(sql);\n}\n", "nl": "Upgrade data dimension items for legacy data sets to use REPORTING_RATE as metric.", "id": "12843"}
{"code": "public static DataFileFooter readMetadatFile(String filePath,long blockOffset,long blockLength) throws CarbonUtilException {\n  DataFileFooterConverter fileFooterConverter=new DataFileFooterConverter();\n  try {\n    return fileFooterConverter.readDataFileFooter(filePath,blockOffset,blockLength);\n  }\n catch (  IOException e) {\n    throw new CarbonUtilException(\"Problem while reading the file metadata\",e);\n  }\n}\n", "nl": "Below method will be used to read the data file matadata", "id": "35240"}
{"code": "public Table<C,R,V> computeTransposedTable(){\n  final Table<C,R,V> transposed=new Table<>();\n  for (  R row : rowKeySet())   for (  C col : columnKeySet())   transposed.put(col,row,get(row,col));\n  return transposed;\n}\n", "nl": "compute table with tranposed rows and cols", "id": "17962"}
{"code": "public final static String base64Encode(String str){\n  if (str == null) {\n    return null;\n  }\n  return new String(base64Encode(str.getBytes()));\n}\n", "nl": "This method encodes the given string using the base64-encoding specified in RFC-2045 (Section 6.8).", "id": "42758"}
{"code": "private void initThreadPoolSize(){\n  try {\n    thread_pool_size=Integer.parseInt(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.NUM_CORES_LOADING,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL));\n  }\n catch (  NumberFormatException e) {\n    thread_pool_size=Integer.parseInt(CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);\n  }\n}\n", "nl": "This method will initialize the thread pool size to be used for creating the max number of threads for a job", "id": "26911"}
{"code": "public List<String> concernPackages(){\n  return null;\n}\n", "nl": "Packages that developer concern, by default it uses process name, put high priority one in pre-order.", "id": "28507"}
{"code": "public Builder primaryColor(int colorPrimary){\n  this.stepNumberBackgroundColor=colorPrimary;\n  this.buttonBackgroundColor=colorPrimary;\n  return this;\n}\n", "nl": "Set the primary color (background color of the left circles and buttons)", "id": "1831"}
{"code": "void offer(T obj){\n  _queue.put(obj,obj);\n}\n", "nl": "Adds an object at the tail of the queue.", "id": "8983"}
{"code": "public boolean isFirstTimeUser(){\n  return getPreference(\"firstTimeUser\",true);\n}\n", "nl": "Use this method to know whether user is a first time user or not", "id": "57343"}
{"code": "public static String readFileAsString(File file,String encoding) throws IOException {\n  ByteBuffer buffer=readFile(file);\n  if (null == encoding) {\n    encoding=\"UTF-8\";\n  }\n  String converted=new String(buffer.array(),encoding);\n  return converted;\n}\n", "nl": "New NIO based method to read a file as a String with the given encoding.", "id": "20887"}
{"code": "public Iterator<MethodOrMethodContext> sourceMethods(){\n  return srcMethodToEdge.keySet().iterator();\n}\n", "nl": "Returns an iterator over all methods that are the sources of at least one edge.", "id": "25206"}
{"code": "@Deprecated public static void putJava2IANAMapping(String javaEncoding,String ianaEncoding){\n  fJava2IANAMap.put(javaEncoding,ianaEncoding);\n}\n", "nl": "Adds a Java to IANA encoding name mapping.", "id": "28841"}
{"code": "protected void sendPacket(AionServerPacket msg){\n  getConnection().sendPacket(msg);\n}\n", "nl": "Send new AionServerPacket to connection that is owner of this packet. This method is equvalent to: getConnection().sendPacket(msg);", "id": "41484"}
{"code": "private void checkCreateTemplate(String category,String name) throws Exception {\n  checkCreateTemplate(category,name,false);\n}\n", "nl": "Checks the given template in the given category, adding it to an existing project", "id": "7208"}
{"code": "public static final float toJulian(Date date){\n  Calendar c=Calendar.getInstance();\n  c.setTime(date);\n  return toJulian(c);\n}\n", "nl": "Return a Julian date based on the input parameter. This is based from calculations found at <a href=\"http://quasar.as.utexas.edu/BillInfo/JulianDatesG.html\">Julian Day Calculations (Gregorian Calendar)</a>, provided by Bill Jeffrys.", "id": "45666"}
{"code": "public static synchronized HostViewsSupport sharedInstance(){\n  if (sharedInstance == null)   sharedInstance=new HostViewsSupport();\n  return sharedInstance;\n}\n", "nl": "Returns singleton instance of HostViewsSupport.", "id": "57137"}
{"code": "public ChangeSet decrement(String path,byte delta){\n  return increment(path,-delta);\n}\n", "nl": "Decrement a byte property with the given delta.", "id": "1800"}
{"code": "public static void save(){\n  if (conf != null) {\n    String file=home + File.separator + confName+ \".properties\";\n    conf.setProperty(\"home\",null);\n    try {\n      conf.save(file);\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n", "nl": "set the configuration back to the file.", "id": "31806"}
{"code": "void invokeMenuPath(@NotNull String... path){\n  JMenuItem menuItem=findActionMenuItem(path);\n  assertWithMessage(\"Menu path \\\"\" + Joiner.on(\" -> \").join(path) + \"\\\" is not enabled\").that(menuItem.isEnabled()).isTrue();\n  myRobot.click(menuItem);\n}\n", "nl": "Invokes an action by menu path", "id": "42327"}
{"code": "public Bundler putFloatArray(String key,float[] value){\n  bundle.putFloatArray(key,value);\n  return this;\n}\n", "nl": "Inserts a float array value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.", "id": "54824"}
{"code": "public Builder renameColumn(String oldName,String newName){\n  return transform(new RenameColumnsTransform(oldName,newName));\n}\n", "nl": "Rename a single column", "id": "44493"}
{"code": "public void commit() throws IOException {\n  if (hasErrors) {\n    completeEdit(this,false);\n    remove(entry.key);\n  }\n else {\n    completeEdit(this,true);\n  }\n  committed=true;\n}\n", "nl": "Commits this edit so it is visible to readers.  This releases the edit lock so another edit may be started on the same key.", "id": "10872"}
{"code": "public boolean isView(){\n  return SqlViewType.QUERY.equals(type) || isMaterializedView();\n}\n", "nl": "Indicates whether this SQl view is a view / materialized view.", "id": "38804"}
{"code": "private static String[] toSuffixes(String[] extensions){\n  String[] suffixes=new String[extensions.length];\n  for (int i=0; i < extensions.length; i++) {\n    suffixes[i]=\".\" + extensions[i];\n  }\n  return suffixes;\n}\n", "nl": "Converts an array of file extensions to suffixes for use with IOFileFilters.", "id": "57718"}
{"code": "private boolean dynomiteRedisPing(Jedis dynomiteJedis){\n  if (dynomiteJedis.ping().equals(\"PONG\") == false) {\n    logger.warn(\"Pinging Dynomite failed\");\n    return false;\n  }\n  logger.info(\"Dynomite is up and running\");\n  return true;\n}\n", "nl": "Ping Dynomite to perform a basic health check.", "id": "41835"}
{"code": "public boolean isGlobalScope(){\n  return true;\n}\n", "nl": "get scope global rather than selected", "id": "21844"}
{"code": "public int model(){\n  return theType.model();\n}\n", "nl": "Return the content model vector of the element's type. Convenience method.", "id": "2751"}
{"code": "public void updateCloud(int pointCount,FloatBuffer pointBuffer){\n  calculateColors(pointCount,pointBuffer);\n  updatePoints(pointCount,pointBuffer,mColorArray);\n}\n", "nl": "Update the points and colors in the point cloud.", "id": "824"}
{"code": "private PreferenceLayout createPreferenceLayout(Preference preference,PreferenceLayout in){\n  PreferenceLayout pl=in != null ? in : new PreferenceLayout();\n  pl.name=preference.getClass().getName();\n  pl.resId=preference.getLayoutResource();\n  pl.widgetResId=preference.getWidgetLayoutResource();\n  return pl;\n}\n", "nl": "Creates a string that includes the preference name, layout id and widget layout id. If a particular preference type uses 2 different resources, they will be treated as different view types.", "id": "9797"}
{"code": "private static boolean isInCornerTargetZone(float x,float y,float handleX,float handleY,float targetRadius){\n  return Math.abs(x - handleX) <= targetRadius && Math.abs(y - handleY) <= targetRadius;\n}\n", "nl": "Determines if the specified coordinate is in the target touch zone for a corner handle.", "id": "37221"}
{"code": "public WallDeleteCommentQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "User ID or community ID. Use a negative value to designate a community ID.", "id": "49010"}
{"code": "public void addGenericAttr(GenericAttr g){\n  generic.addElement(g);\n  g.resolve(this);\n}\n", "nl": "Add a generic attribute to the class file. A generic attribute contains a stream of uninterpreted bytes which is ignored by the VM (as long as its name doesn't conflict with other names for attributes that are understood by the VM)", "id": "29152"}
{"code": "public void addInit(Expr node){\n  List<Expr> list=(parent == null || state == null) ? getInitListNoTransform() : getInitList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the Init list.", "id": "42240"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof GraphView && (((GraphView)getViewer()).getSelectedNodes().size() > 0 || ((GraphView)getViewer()).getSelectedEdges().size() > 0);\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "29513"}
{"code": "public static void writeShort(PacketBuffer buf,short value){\n  buf.writeShort(value);\n}\n", "nl": "Writes a short to the buffer", "id": "39067"}
{"code": "@Override public Object invoke(MethodInvocation methodInvocation) throws Throwable {\n  return isObjectMethodCall(methodInvocation) ? methodInvocation.proceed() : switchFrameAndProceed(methodInvocation);\n}\n", "nl": "This is an advice method that wraps around the intercepted method. It should not be called directly by Bobcat's user. <p> If the intercepted methods comes from Object class, the advice calls this method directly. Otherwise, it switches to frame associated with the intercepted method, performs the method and switches back.", "id": "45598"}
{"code": "public static Document parseDocument(InputStream is,boolean validating) throws ParserConfigurationException, SAXException, IOException {\n  DocumentBuilder builder=createDocumentBuilder(validating);\n  return builder.parse(is);\n}\n", "nl": "Parse XML data into a DOM representation, taking local resources and Schemas into account.", "id": "16629"}
{"code": "public boolean isFollowPeak(){\n  return followPeak;\n}\n", "nl": "Status of the follow-peak", "id": "38037"}
{"code": "public void add(X509TrustManager mgr){\n  if (mgr instanceof X509Extensions) {\n    managers.add((X509Extensions)mgr);\n  }\n else {\n    managers.add(new X509ExtensionsWrapper(mgr));\n  }\n}\n", "nl": "Add an X509TrustManager to the ones being governed by this composite. Ideally, this implements X509Extensions. If not, it will be wrapped in an X509ExtensionsWrapper, to try to call additional methods via reflection.", "id": "51373"}
{"code": "private EmoClientException asEmoClientException(UniformInterfaceException e) throws EmoClientException {\n  throw new EmoClientException(e.getMessage(),e,toEmoResponse(e.getResponse()));\n}\n", "nl": "Returns an EmoClientException with a thin wrapper around the Jersey exception response.", "id": "46725"}
{"code": "public static ToolbarTapTarget forToolbarOverflow(android.widget.Toolbar toolbar,CharSequence title){\n  return forToolbarOverflow(toolbar,title,null);\n}\n", "nl": "Return a tap target for the overflow button from the given toolbar <p> <b>Note:</b> This is currently experimental, use at your own risk", "id": "2458"}
{"code": "@NotNull public NlConfigurationToolbarFixture requireDevice(@NotNull String id){\n  Wait.seconds(30).expecting(\"configuration to be updated\").until(null);\n  return this;\n}\n", "nl": "Requires the device id to be the given id", "id": "27755"}
{"code": "public static String formatDateTime(Date date,String dateTimeFormat,Locale locale,TimeZone timeZone){\n  return UtilDateTime.toDateTimeFormat(dateTimeFormat,timeZone,locale).format(date);\n}\n", "nl": "Formats a <code>Date</code> into a date-time <code>String</code> using the specified locale and time zone, or using the specified format.", "id": "47657"}
{"code": "public boolean hasSuperClassAccess(){\n  return getSuperClassAccessOpt().getNumChild() != 0;\n}\n", "nl": "Check whether the optional SuperClassAccess child exists.", "id": "92"}
{"code": "public void commit() throws IOException {\n  if (hasErrors) {\n    completeEdit(this,false);\n    remove(entry.key);\n  }\n else {\n    completeEdit(this,true);\n  }\n}\n", "nl": "Commits this edit so it is visible to readers.  This releases the edit lock so another edit may be started on the same key.", "id": "43670"}
{"code": "public boolean isChecked(){\n  return mChecked;\n}\n", "nl": "Returns the checked state.", "id": "6009"}
{"code": "@BeforeClass @Parameters({\"configFile\"}) protected void beforeClassTestWrapper(@Optional(Constants.DEFAULT_CONFIG_FILE) String configFile) throws IOException {\n  LOGGER.debug(this.getClass().getName() + \"@BeforeClass\");\n  loadProperties(configFile);\n  createAPIServerConnector();\n}\n", "nl": "Will be called before any tests of a class are invoked. Creates an APIServerConnector and tries to ping the service.", "id": "42816"}
{"code": "@Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){\n  FieldConfigSymbolType copy=null;\n  if (fieldConfigBase != null) {\n    copy=new FieldConfigSymbolType(fieldConfigBase.getCommonData());\n  }\n  return copy;\n}\n", "nl": "Creates a copy of the field.", "id": "44183"}
{"code": "public static long calculateDifference(long startTimeMillis,long endTimeMillis,DifferenceMode mode){\n  return calculateDifference(new Date(startTimeMillis),new Date(endTimeMillis),mode);\n}\n", "nl": "Calculate difference long.", "id": "36297"}
{"code": "public static Charset toCharset(Charset charset){\n  return charset == null ? Charset.defaultCharset() : charset;\n}\n", "nl": "Returns the given Charset or the default Charset if the given Charset is null.", "id": "55735"}
{"code": "private void findClusterAndLaunchBulk(){\n  Thread clusterFinder=new Thread(null,\"C2MON-ES-Module-Cluster-Health-Check\");\n  log.info(\"init() - Trying to connect to Elasticsearch cluster {} on host={}, port={}\",cluster,host,port);\n  clusterFinder.start();\n}\n", "nl": "Launch the Thread that is looking for an ElasticSearch cluster, according to the parameters set.", "id": "6948"}
{"code": "public void addSoundEvent(State event,int resId){\n  mSoundMap.put(event,resId);\n}\n", "nl": "Set the Sounds to be played when a Pull Event happens. You specify which sound plays for which events by calling this method multiple times for each event. <p/> If you've already set a sound for a certain event, and add another sound for that event, only the new sound will be played.", "id": "25041"}
{"code": "public static ValueGetterSpacePredicate<ServerEntry> propertyBetween(String propertyName,Comparable<?> low,Comparable<?> high){\n  return property(propertyName,between(low,high));\n}\n", "nl": "Shortcut for property(propertyName, between(low, high)).", "id": "39450"}
{"code": "public void add(final int location,final T object){\n  this.data.add(location,object);\n  this.notifyItemInserted(location);\n}\n", "nl": "Inserts the specified object into the data at the specified location. The object is inserted before the current element at the specified location. If the location is equal to the size of the data, the object is added at the end. If the location is smaller than the size of the data, then all elements beyond the specified location are moved by one location towards the end of the data.", "id": "8136"}
{"code": "public Object jjtAccept(MithraQLVisitor visitor,Object data){\n  return visitor.visit(this,data);\n}\n", "nl": "Accept the visitor.", "id": "31716"}
{"code": "public T waitForResult() throws InterruptedException {\n  try {\n    return waitForResult(-1,TimeUnit.MILLISECONDS);\n  }\n catch (  TimeoutException e) {\n    throw new RuntimeException(\"Should not occur as we are waiting forever\");\n  }\n}\n", "nl": "Waits for any result indefently.", "id": "44511"}
{"code": "@Override public String toString(){\n  final StringBuilder builder=new StringBuilder(32);\n  builder.append(\"Functions []\");\n  return builder.toString();\n}\n", "nl": "Method toString.", "id": "16871"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuff_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200662,skillcaster,skillname);\n}\n", "nl": "Your magical debuffs were dispelled because [%SkillCaster] used [%SkillName] on you.", "id": "46448"}
{"code": "protected VideoRemoveFromAlbumQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Set owner id", "id": "45408"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "26051"}
{"code": "public Object postProcessAfterInitialization(Object bean,String beanName) throws BeansException {\n  return bean;\n}\n", "nl": "A no op, just returned the bean itself.", "id": "26622"}
{"code": "public void resourceCopied(ISVNRemoteResource source,ISVNRemoteFolder destination){\n  Iterator it=listeners.iterator();\n  while (it.hasNext()) {\n    IRepositoryListener listener=(IRepositoryListener)it.next();\n    listener.remoteResourceCopied(source,destination);\n  }\n}\n", "nl": "A resource has been copied", "id": "30537"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_BATTLE_END(String value0){\n  return new SM_SYSTEM_MESSAGE(1400255,value0);\n}\n", "nl": "%0 has left the battle.", "id": "57841"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_SLAYER_DARK_DEATH_TO_B(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1400142,value0,value1);\n}\n", "nl": "Hero of Elyos %0 killed the Divinely Punished Intruder %1.", "id": "17563"}
{"code": "private JsonWriter open(int empty,String openBracket) throws IOException {\n  beforeValue();\n  push(empty);\n  out.write(openBracket);\n  return this;\n}\n", "nl": "Enters a new scope by appending any necessary whitespace and the given bracket.", "id": "27431"}
{"code": "@Override public void confirm(){\n  bobcatWait.withTimeout(Timeouts.BIG).until(WindowActions.clickButton(createButton));\n}\n", "nl": "Confirms the dialog and waits for the dialog to be closed.", "id": "32480"}
{"code": "public int addSecondaryEquations(final FieldSecondaryODE<T> secondary){\n  components.add(secondary);\n  mapper=new FieldEquationsMapper<T>(mapper,secondary.getDimension());\n  return components.size();\n}\n", "nl": "Add a set of secondary equations to be integrated along with the primary set.", "id": "30995"}
{"code": "public MulExpr newMulExpr(Value op1,Value op2){\n  return new JMulExpr(op1,op2);\n}\n", "nl": "Constructs a MulExpr(Immediate, Immediate) grammar chunk.", "id": "33772"}
{"code": "public void init$Children(){\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "41979"}
{"code": "private static void verify(boolean expression,String falseMessage){\n  if (!expression) {\n    throw new IllegalStateException(falseMessage);\n  }\n}\n", "nl": "Supportive method.", "id": "31610"}
{"code": "public synchronized void add(String name,long threadId){\n  if (mFinished) {\n    throw new IllegalStateException(\"Marker added to finished log\");\n  }\n  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));\n}\n", "nl": "Adds a marker to this log with the specified name.", "id": "34080"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SignetBurst_ME_TO_SELF(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200409,num0,skillname);\n}\n", "nl": "You received %num0 damage due to [%SkillName].", "id": "37893"}
{"code": "public static double distanceSq(Vector2D p1,Vector2D p2){\n  return p1.distanceSq(p2);\n}\n", "nl": "Compute the square of the distance between two vectors. <p>Calling this method is equivalent to calling: <code>p1.subtract(p2).getNormSq()</code> except that no intermediate vector is built</p>", "id": "42609"}
{"code": "@Override public byte[] asBytes(int rowNumber){\n  return ByteBuffer.allocate(4).putInt(getInt(rowNumber)).array();\n}\n", "nl": "Returns the contents of the cell at rowNumber as a byte[]", "id": "46401"}
{"code": "public static SM_SYSTEM_MESSAGE STR_REMOVE_ITEM_OPTION_IT_CAN_NOT_BE_GIVEN_OPTION(String value0){\n  return new SM_SYSTEM_MESSAGE(1300469,value0);\n}\n", "nl": "Manastone socketing / removal is not possible for the item %0.", "id": "45600"}
{"code": "public synchronized boolean holdsLock(String tableName,long transNum,LockType lockType){\n  return this.databaseLocked && this.databaseTransactionOwner == transNum;\n}\n", "nl": "Returns a boolnea indicating whether or not transNum holds a lock of type lt on tableName.", "id": "1515"}
{"code": "protected Locale determineLocale(String text,Locale defaultLocale){\n  if (defaultLocale == null) {\n    defaultLocale=Locale.getDefault();\n    Log.w(Mary.LOG,\"Locale is null, overriding with \" + defaultLocale);\n  }\n  return defaultLocale;\n}\n", "nl": "Try to determine the locale of the given text. This implementation simply returns the default locale; subclasses can try to do something fancy here.", "id": "30349"}
{"code": "public void init$Children(){\n  children=new ASTNode[1];\n  setChild(new Opt(),0);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "26939"}
{"code": "public static void apply(Taxa taxa,Distances distances,PhyloTreeView treeView){\n  if (instance == null)   instance=new UPGMA();\n  instance.computeUPMATree(taxa,distances,treeView.getPhyloTree());\n  instance.embedTree(treeView);\n}\n", "nl": "apply the UPGMA algorithm", "id": "55264"}
{"code": "public FieldRefNode dot(SparkField field){\n  return fields == null ? null : fields.get(field);\n}\n", "nl": "Returns the field ref node having this node as its base, and field as its field; null if nonexistent.", "id": "36376"}
{"code": "public static IntellijLintClient forEditor(@NotNull State state){\n  return new EditorLintClient(state);\n}\n", "nl": "Creates a lint client used for in-editor single file lint analysis (e.g. background checking while user is editing.)", "id": "50799"}
{"code": "@Override public V remove(Object o){\n  throw new UnsupportedOperationException(\"Remove is not defined on DelegatingMap. Add is the only allowed modification operation.\");\n}\n", "nl": "Delegating map should be changed in a put-only fashion.  Removes are not allowed.", "id": "56404"}
{"code": "@Override public void xmlDecl(String version,String encoding,String standalone,Augmentations augs) throws XNIException {\n}\n", "nl": "Notifies of the presence of an XMLDecl line in the document. If present, this method will be called immediately following the startDocument call.", "id": "42025"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BackDashATK_A_TO_ME(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200642,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] has inflicted %num0 damage on you by using [%SkillName].", "id": "48633"}
{"code": "public BeanMetricManager createBeanMetricManager(String name){\n  return metricRegistrator.extend(name);\n}\n", "nl": "Creates a bean metric manager using the specified name.", "id": "37391"}
{"code": "public void put(Object[] parameters){\n  if (!this.isAlive()) {\n    LOGGER.warn(\"HandlerThread has not being started yet and objects are being added!\");\n  }\n else {\n    if (handlerEnabled) {\nsynchronized (threadMonitorObject) {\n        incomingQueue.offer(parameters);\n        threadMonitorObject.notify();\n      }\n    }\n else {\n      throw new IllegalStateException(\"The ThreadHandler is no longer enabled and cannot accept any new objects.\");\n    }\n  }\n}\n", "nl": "Add the parameter list to the thread (constitutes a \"single\" incoming object, and should be the arguments taken by the method). Called by external thread.", "id": "38455"}
{"code": "public static void show(Context context,CharSequence msg){\n  show(context,msg,LENGTH_SHORT);\n}\n", "nl": "Show application or activity level toast.", "id": "20916"}
{"code": "@Override public void onRequestError(int code,String message){\n  progressDialog.cancel();\n  if (code == ConnectAPI.TIMELINE_CODE) {\n    showMessage(message);\n  }\n}\n", "nl": "Used to show error message to the user when there is a error while making request to the server.", "id": "3968"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n  setChild(new List(),0);\n  setChild(new List(),1);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "33659"}
{"code": "@Override public void stop(Runnable arg0){\n  stop();\n  arg0.run();\n}\n", "nl": "Smart lifecycle stop implementation. Closes the DB connection pool.", "id": "1149"}
{"code": "private void writeDomainAssignment(Document document,Element rootElement){\n  Element domainAssignment=document.createElement(\"domainassignment\");\n  rootElement.appendChild(domainAssignment);\n  for (  SourceSinkDomPair spec : this.document.getDomainAssignment())   writeSourceSinkDomPair(spec,document,domainAssignment);\n}\n", "nl": "Writes out the domains assignments section of the RIFL document", "id": "45415"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_HEAL_A_TO_ME(String skillcaster,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201229,skillcaster,skilltarget,skillname);\n}\n", "nl": "[%SkillCaster] has boosted [%SkillTarget]'s DP by using [%SkillName].", "id": "21931"}
{"code": "@Override public void startDocument() throws SAXException {\n  baseURIStack.push(catalog.getCurrentBase());\n  overrideStack.push(catalog.getDefaultOverride());\n  return;\n}\n", "nl": "The SAX <code>startDocument</code>", "id": "46928"}
{"code": "public boolean hasProgramIncidentEndDate(){\n  return programIncidentEndDate != null;\n}\n", "nl": "Indicates whether this parameters specifies a program incident end date.", "id": "20435"}
{"code": "public static String arrayToCommaDelimitedString(Object[] arr){\n  return arrayToDelimitedString(arr,\",\");\n}\n", "nl": "Convenience method to return a String array as a CSV String. E.g. useful for toString() implementations.", "id": "34861"}
{"code": "@Override public boolean checkCondition(){\n  return !alliance.hasMember(invited.getObjectId());\n}\n", "nl": "Entered player should not be in group yet", "id": "36049"}
{"code": "private void validateRelationType(RelationTypeImpl relationType){\n  if (!ValidateGlobalRules.validateHasMinimumRoles(relationType))   errorsFound.add(ErrorMessage.VALIDATION_RELATION_TYPE.getMessage(relationType.getId()));\n}\n", "nl": "Validation rules exclusive to relation types", "id": "47622"}
{"code": "public static String stripFileProtocol(String uriString){\n  if (uriString.startsWith(\"file://\")) {\n    uriString=uriString.substring(7);\n  }\n  return uriString;\n}\n", "nl": "Removes the \"file://\" prefix from the given URI string, if applicable. If the given URI string doesn't have a \"file://\" prefix, it is returned unchanged.", "id": "28008"}
{"code": "public static boolean putFloat(Context context,String key,float value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putFloat(key,value);\n  return editor.commit();\n}\n", "nl": "put float preferences", "id": "18439"}
{"code": "public Bundler putAll(Bundle bundle){\n  this.bundle.putAll(bundle);\n  return this;\n}\n", "nl": "Inserts all mappings from the given Bundle into this Bundle.", "id": "19924"}
{"code": "public Builder clickable(Boolean clickable){\n  this.clickable=clickable;\n  return this;\n}\n", "nl": "If false, the vector will not emit mouse events and will act as a part of the underlying map. </br> default true", "id": "38997"}
{"code": "protected void init(){\n  checkLegal();\n  calcYValueCount();\n  calcMinMax(0,mYValCount);\n  calcXValMaximumLength();\n}\n", "nl": "performs all kinds of initialization calculations, such as min-max and value count and sum", "id": "55138"}
{"code": "@Override public Element createElementNS(String namespaceURI,String qualifiedName,String localpart) throws DOMException {\n  return new PSVIElementNSImpl(this,namespaceURI,qualifiedName,localpart);\n}\n", "nl": "Create an element with PSVI information", "id": "2130"}
{"code": "public int failed(String ip,String sid,String useragent){\n  set(\"failtimes\",getInt(\"failtimes\") + 1);\n  return Lock.locked(getId(),sid,ip,useragent);\n}\n", "nl": "record the login failure, and record the user lock info.", "id": "45709"}
{"code": "public void addSoundEvent(State event,int resId){\n  mSoundMap.put(event,resId);\n}\n", "nl": "Set the Sounds to be played when a Pull Event happens. You specify which sound plays for which events by calling this method multiple times for each event. <p/> If you've already set a sound for a certain event, and add another sound for that event, only the new sound will be played.", "id": "24673"}
{"code": "public GtExpr newGtExpr(Value op1,Value op2){\n  return new JGtExpr(op1,op2);\n}\n", "nl": "Constructs a GtExpr(Immediate, Immediate) grammar chunk.", "id": "10952"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_AUTHORIZE_CANCEL(int nameId){\n  return new SM_SYSTEM_MESSAGE(1402147,new Object[]{new DescriptionId(nameId)});\n}\n", "nl": "Authorize System", "id": "12816"}
{"code": "public <S extends Domino<T,?>>S convert(DominoConverter<T,R,S> converter){\n  return converter.call(this);\n}\n", "nl": "Convert this Domino into another one.", "id": "12190"}
{"code": "public static boolean isEnabled(){\n  return enabledFlag.get();\n}\n", "nl": "Public method to check if the flag flagz_etcd_enabled is true.", "id": "52717"}
{"code": "public static boolean isXML11Invalid(int c){\n  return !isXML11Valid(c);\n}\n", "nl": "Returns true if the specified character is invalid.", "id": "24229"}
{"code": "public double length(){\n  return Math.sqrt(NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z));\n}\n", "nl": "Gets the magnitude of the location, defined as sqrt(x^2+y^2+z^2). The value of this method is not cached and uses a costly square-root function, so do not repeatedly call this method to get the location's magnitude. NaN will be returned if the inner result of the sqrt() function overflows, which will be caused if the length is too long. Not world-aware and orientation independent.", "id": "45518"}
{"code": "private static void deleteDirectoryOnExit(File directory) throws IOException {\n  if (!directory.exists()) {\n    return;\n  }\n  directory.deleteOnExit();\n  if (!isSymlink(directory)) {\n    cleanDirectoryOnExit(directory);\n  }\n}\n", "nl": "Schedules a directory recursively for deletion on JVM exit.", "id": "4778"}
{"code": "public String process(Item item) throws ProcessException {\n  int count=-1;\n  for (Item p=item.getItemAs(Relation.SYLLABLE_STRUCTURE); p != null; p=p.getPrevious()) {\n    count++;\n  }\n  return Integer.toString(rail(count));\n}\n", "nl": "Performs some processing on the given item.", "id": "1013"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "20351"}
{"code": "public boolean isNavBarTintEnabled(){\n  return mNavBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system navigation bar?", "id": "29003"}
{"code": "public PhotosGetAllCommentsQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of comments to return. By default, \"20\". Maximum value, \"100\".", "id": "31918"}
{"code": "public static double information(double[] probabilities){\n  double total=0.0;\n  for (  double d : probabilities) {\n    total+=(-1.0 * log2(d) * d);\n  }\n  return total;\n}\n", "nl": "This returns the entropy for a given vector of probabilities.", "id": "33040"}
{"code": "public static RuleKey forDependency(RuleIdeInfo rule,Label dep){\n  return new RuleKey(dep);\n}\n", "nl": "Returns a key identifying dep for a dependency rule -> dep", "id": "53867"}
{"code": "@VisibleForTesting static boolean isTagsMatched(Launch launch,EmailSenderCase oneCase){\n  return !(null != oneCase.getTags() && !oneCase.getTags().isEmpty()) || null != launch.getTags() && oneCase.getTags().containsAll(launch.getTags());\n}\n", "nl": "Validate matching of finished launch tags and project settings for emailing", "id": "58219"}
{"code": "public static String localizeTarget(String xliffContent,String localizedTargetPrefix){\n  return xliffContent.replaceAll(\"<target xml:lang=\\\"(.*?)\\\" state=\\\"(.*?)\\\">(.*?)</target>\",\"<target xml:lang=\\\"$1\\\" state=\\\"$2\\\">\" + localizedTargetPrefix + \" - $3 $1</target>\");\n}\n", "nl": "Localizes an Xliff file by replacing original targets by target where the content has been prepended with a prefix and the locale.", "id": "47555"}
{"code": "public Builder removeAllColumnsExceptFor(Collection<String> columnNames){\n  return removeAllColumnsExceptFor(columnNames.toArray(new String[columnNames.size()]));\n}\n", "nl": "Remove all columns, except for those that are specified here", "id": "42996"}
{"code": "public void reset(PermissionFlag flag,Identity<?> identity){\n  strictPermission.getOrDefault(flag,emptyMap()).remove(identity);\n}\n", "nl": "Removes a direct permission/restriction from an identity.", "id": "15052"}
{"code": "public boolean addAll(final List<T> collection){\n  final boolean added=this.data.addAll(collection);\n  this.notifyItemRangeInserted(0,data.size() + 1);\n  return added;\n}\n", "nl": "Adds the objects in the specified collection to the end of the data. The objects are added in the order in which they are returned from the collection's iterator.", "id": "26786"}
{"code": "public static boolean isElementContent(String tagName){\n  return isElement(tagName,ELEM_CONTENT);\n}\n", "nl": "Returns true if element is declared to have element content. Whitespaces appearing inside element content will be ignored, other text will simply report an error.", "id": "19090"}
{"code": "@Override public boolean shouldOverrideUrlLoading(WebView view,String url){\n  return CommonRefreshWebViewActivity.this.shouldOverrideUrlLoading(view,url);\n}\n", "nl": "Give the host application a chance to take over the control when a new url is about to be loaded in the current WebView. If WebViewClient is not provided, by default WebView will ask Activity Manager to choose the proper handler for the url. If WebViewClient is provided, return true means the host application handles the url, while return false means the current WebView handles the url. This method is not called for requests using the POST \"method\".", "id": "7783"}
{"code": "public SimpleAsyncPollingContainerConfigurer eventListenerMethod(Object eventListener,String methodName){\n  MethodEventListenerAdapter methodEventListenerAdapter=new MethodEventListenerAdapter();\n  methodEventListenerAdapter.setDelegate(eventListener);\n  methodEventListenerAdapter.setMethodName(methodName);\n  methodEventListenerAdapter.afterPropertiesSet();\n  pollingEventListenerContainer.setEventListener(methodEventListenerAdapter);\n  return this;\n}\n", "nl": "Sets an event listener that uses method name as an adapter", "id": "94"}
{"code": "public static Record createRecord(ModelRecord modelRecord,Map<String,Object> fields) throws DataFileException {\n  Record record=new Record(modelRecord,fields);\n  return record;\n}\n", "nl": "Creates new Record from existing fields Map", "id": "54957"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "6897"}
{"code": "public AemInsertWindow insertComponent(String componentGroup,String componentName){\n  chooseComponent(componentGroup,componentName,chooseTab(componentGroup));\n  clickOkAndWait();\n  return this;\n}\n", "nl": "Selects component in the window, clicks ok and waits until insert window disappears.", "id": "55491"}
{"code": "public Observable<Book> observeChangingBooks(){\n  return changingBookSubject;\n}\n", "nl": "emit event, when book changed", "id": "21168"}
{"code": "public JSONArray optJSONArray(String key){\n  Object o=this.opt(key);\n  return o instanceof JSONArray ? (JSONArray)o : null;\n}\n", "nl": "Get an optional JSONArray associated with a key. It returns null if there is no such key, or if its value is not a JSONArray.", "id": "32411"}
{"code": "@Override public int reapUnused(){\n  int res=0;\n  for (  EvictionReplicationsMarkersSegment segment : _segments) {\n    if (size() == 0)     return res;\n    res+=reapUnused(segment);\n  }\n  return res;\n}\n", "nl": "reap unsed (i.e. reached) markers", "id": "8332"}
{"code": "public static Intent makeInitIntent(Context context){\n  Intent i=new Intent(context,FileObserverService.class);\n  i.setAction(ACTION_START_OBSERVE);\n  return i;\n}\n", "nl": "Factory method to create intents that allow to start an ACTION_START_OBSERVE command.", "id": "54608"}
{"code": "public void addLive(boolean live){\n  query.append(\" +live:\" + live);\n}\n", "nl": "Adds +live to the query", "id": "16840"}
{"code": "public boolean isKinematic(){\n  return this.mass.isInfinite() && (!this.velocity.isZero() || Math.abs(this.angularVelocity) > Epsilon.E);\n}\n", "nl": "Returns true if this body has infinite mass and the velocity or angular velocity are NOT zero.", "id": "31747"}
{"code": "public synchronized void readLock(){\n  while (activeWriter || waitingWriters != 0) {\n    try {\n      wait();\n    }\n catch (    InterruptedException e) {\n      throw new ConcurrentLockException(\"read lock interrupted in thread\");\n    }\n  }\n  activeReaders++;\n}\n", "nl": "Obtain a read lock.  Multiple concurrent readers allowed.", "id": "3756"}
{"code": "private void zzScanError(int errorCode){\n  String message;\n  try {\n    message=ZZ_ERROR_MSG[errorCode];\n  }\n catch (  ArrayIndexOutOfBoundsException e) {\n    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];\n  }\n  throw new Error(message);\n}\n", "nl": "Reports an error that occured while scanning. In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all fallback rule) this method will only be called with things that \"Can't Possibly Happen\". If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.). Usual syntax/scanner level error handling should be done in error fallback rules.", "id": "37480"}
{"code": "@Override public EquipmentConfiguration clone(){\n  EquipmentConfiguration equipmentConfiguration=null;\n  try {\n    equipmentConfiguration=(EquipmentConfiguration)super.clone();\n  }\n catch (  CloneNotSupportedException ex) {\n    ex.printStackTrace();\n  }\n  return equipmentConfiguration;\n}\n", "nl": "Clones the equipment configuration. Be careful The contained maps will NOT be cloned. So if you try to access for example the contained data tags the references to them will still be the same.", "id": "55395"}
{"code": "public boolean isSuccess(){\n  return success;\n}\n", "nl": "Gets the value of the success property.", "id": "15895"}
{"code": "public static DedupQueueClientFactory forClusterAndHttpClient(String clusterName,Client client){\n  return new DedupQueueClientFactory(clusterName,client);\n}\n", "nl": "Connects to the System of Record using the specified Jersey client.  If you're using Dropwizard, use this factory method and pass the Dropwizard-constructed Jersey client.", "id": "8964"}
{"code": "public void or(Criteria criteria){\n  oredCriteria.add(criteria);\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.operatelog", "id": "17138"}
{"code": "public void afterMemberRemoved(MemberRemovedEvent memberRemovedEvent){\n}\n", "nl": "Called after target member is removed", "id": "26430"}
{"code": "public GroupsGetMembersQuery groupId(String value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "ID or screen name of the community.", "id": "39938"}
{"code": "@Override public boolean canAccessSubscription(OwnedSubscription subscription){\n  return _ownerId.equals(subscription.getOwnerId()) || _internalAuthorizer.hasPermissionByInternalId(_ownerId,Permissions.assumeDatabusSubscriptionOwnership(new NamedResource(subscription.getName())));\n}\n", "nl": "A subscription can be accessed if either of the following conditions are met: <ol> <li>The subscription is owned by the provider user.</li> <li>The provided user has explicit permission to act as an owner of this subscription (typically reserved for administrators).</li> </ol>", "id": "9555"}
{"code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0.001,0.01,0.025,0.05,0.1,0.999,0.990,0.975,0.950,0.900};\n}\n", "nl": "Creates the default cumulative probability density test expected values", "id": "38849"}
{"code": "public GroupsEditManagerQuery contactPosition(String value){\n  return unsafeParam(\"contact_position\",value);\n}\n", "nl": "Position to show in Contacts block.", "id": "9351"}
{"code": "public void removeSample(String name){\n  if (table.rowKeySet().contains(name)) {\n    table.rowKeySet().remove(name);\n    sampleOrder.remove(name);\n  }\n}\n", "nl": "remove a sample from the table", "id": "20121"}
{"code": "public void releaseAll(){\n  controller.mouseRelease(InputEvent.BUTTON1_MASK);\n  controller.mouseRelease(InputEvent.BUTTON2_MASK);\n  controller.mouseRelease(InputEvent.BUTTON3_MASK);\n}\n", "nl": "Release 3 primary mouse masks: 1, 2, and 3", "id": "54551"}
{"code": "private void populateBuiltInProcessFunctions(){\n  for (  FunctionName functionName : factory.getFunctionNames()) {\n    functionListModel.addElement(functionName.getName());\n  }\n}\n", "nl": "Populate built in process functions.", "id": "39691"}
{"code": "@Override public void delete(long timeout) throws AWSIotException, AWSIotTimeoutException {\n  super.delete(timeout);\n}\n", "nl": "Deletes the content of a thing shadow. This is a blocking call, so the calling thread will be blocked until the operation succeeded, failed, or timed out.", "id": "48244"}
{"code": "public boolean isActive(){\n  return this.state != null && this.state.equals(AlarmCondition.ACTIVE);\n}\n", "nl": "Checks if the Alarm state is ACTIVE.", "id": "58714"}
{"code": "public boolean isIconGenerated(){\n  return mIsIconGenerated;\n}\n", "nl": "Returns whether the icon was generated by Chromium.", "id": "58170"}
{"code": "protected Criteria createCriteriaInternal(){\n  Criteria criteria=new Criteria();\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.users", "id": "53805"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "4682"}
{"code": "protected void reset() throws XNIException {\n}\n", "nl": "reset all components before parsing", "id": "47016"}
{"code": "@Override public XSObject item(int index){\n  if (index < 0 || index >= fLength) {\n    return null;\n  }\n  return fArray[index];\n}\n", "nl": "Returns the <code>index</code>th item in the collection. The index starts at 0. If <code>index</code> is greater than or equal to the number of nodes in the list, this returns <code>null</code>.", "id": "3434"}
{"code": "public Expression lessThan(Value v1,Value v2){\n  return new BinaryExpression(v1,v2,ExpressionType.LESS_THAN);\n}\n", "nl": "Return an expression representing the given condition.", "id": "18733"}
{"code": "@Override public String toString(){\n  return ToStringBuilder.reflectionToString(this,ToStringStyle.SHORT_PREFIX_STYLE);\n}\n", "nl": "Returns a String representation of this entry.", "id": "31154"}
{"code": "public <T>Constant<T> constant(String name,T constant){\n  return new Constant<T>(name,constant);\n}\n", "nl": "Return a named Constant object.", "id": "33218"}
{"code": "protected WallUnpinQuery postId(int value){\n  return unsafeParam(\"post_id\",value);\n}\n", "nl": "Post ID.", "id": "19129"}
{"code": "public boolean isStatic(){\n  return Modifier.isStatic(this.getModifiers());\n}\n", "nl": "Convenience method returning true if this field is static.", "id": "8715"}
{"code": "@Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {\n  return decode(image,null);\n}\n", "nl": "Locates and decodes a Data Matrix code in an image.", "id": "7847"}
{"code": "public Builder withPrevKV(boolean prevKV){\n  this.prevKV=prevKV;\n  return this;\n}\n", "nl": "Get the previous key/value pairs before deleting them.", "id": "4110"}
{"code": "public void detectAdBlockers(Constants.AdBlockerCallback callback){\n  new DetectTask(callback).execute();\n}\n", "nl": "Asynchronous ad-blockers detection. Callback is called in GUI thread.", "id": "8560"}
{"code": "protected void propagate(D sourceVal,N target,D targetVal,N relatedCallSite,boolean isUnbalancedReturn){\n  propagate(sourceVal,target,targetVal,relatedCallSite,isUnbalancedReturn,false);\n}\n", "nl": "Propagates the flow further down the exploded super graph.", "id": "52515"}
{"code": "public synchronized void startPreview(){\n  Camera theCamera=camera;\n  if (theCamera != null && !previewing) {\n    theCamera.startPreview();\n    previewing=true;\n    setFocus();\n  }\n}\n", "nl": "Asks the camera hardware to begin drawing preview frames to the screen.", "id": "16723"}
{"code": "public static boolean startsWithHttpOrHttps(String uri){\n  if (uri == null) {\n    return false;\n  }\n  String lowercaseUri=uri.toLowerCase(Locale.US);\n  return lowercaseUri.startsWith(\"http://\") || lowercaseUri.startsWith(\"https://\");\n}\n", "nl": "Returns true if the string starts with http:// or https://.", "id": "51409"}
{"code": "public void start(){\n  this.prestartAllCoreThreads();\n}\n", "nl": "Start all core threads, causing them to idly wait for work", "id": "35015"}
{"code": "@Override public DataRefNode findFirstDataBlock(DataRefNode dataRefBlock,IndexKey searchKey){\n  BTreeNode rootNode=(BTreeNode)dataRefBlock;\n  while (!rootNode.isLeafNode()) {\n    rootNode=findFirstLeafNode(searchKey,rootNode);\n  }\n  return rootNode;\n}\n", "nl": "Below method will be used to get the first tentative data block based on search key", "id": "12198"}
{"code": "public static void main(String[] args){\n  runShell(args,Version.VERSION,HISTORY_FILENAME,new GraqlClientImpl());\n}\n", "nl": "Run a Graql REPL", "id": "10196"}
{"code": "public EmailBuilder cc(List<String> ccAddresses){\n  this.cc.addAll(ccAddresses);\n  return this;\n}\n", "nl": "adds \"Cc\" (carbon copy) recipients to the email that is being built.", "id": "27059"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FORCE_REJECT_ME(String value0){\n  return new SM_SYSTEM_MESSAGE(1300971,value0);\n}\n", "nl": "You have declined %0's invitation to join the alliance.", "id": "4489"}
{"code": "private void replaceTop(int topOfStack){\n  stack[stackSize - 1]=topOfStack;\n}\n", "nl": "Replace the value on the top of the stack with the given value.", "id": "36504"}
{"code": "public void onDirectoryCreate(final File directory){\n}\n", "nl": "Directory created Event.", "id": "38573"}
{"code": "public VerifyFaceAction verifyFace(String faceId1,String faceId2){\n  return new VerifyFaceAction(cognitiveContext,faceId1,faceId2);\n}\n", "nl": "Verify whether two faces belong to a same person. <p> Remarks: <p> Verify works well for frontal and near-frontal faces. For the scenarios that are sensitive to accuracy please use with own judgment.", "id": "49969"}
{"code": "public DistributedLogClientBuilder clientId(ClientId clientId){\n  DistributedLogClientBuilder newBuilder=newBuilder(this);\n  newBuilder._clientId=clientId;\n  return newBuilder;\n}\n", "nl": "Client ID.", "id": "8096"}
{"code": "public void invalidate(){\n  damageReport();\n  super.invalidate();\n}\n", "nl": "Invalidates this component. Overridden to ensure that an internal damage report is generated.", "id": "54153"}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){\n  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. This version of the call is used for Views that need to specify a Scroll Range but scroll back to it's edge correctly.", "id": "18071"}
{"code": "public void doUpdate(){\n  lock.lock();\n  try {\n    forgetObjects();\n    findVisibleObjects();\n  }\n  finally {\n    lock.unlock();\n  }\n}\n", "nl": "Do KnownList update.", "id": "39780"}
{"code": "@RequestMapping(value=\"/rest/activiti/forms\",method=RequestMethod.GET,produces=\"application/json\") public JsonNode listForms(HttpServletRequest request){\n  ServerConfig serverConfig=retrieveServerConfig();\n  Map<String,String[]> parameterMap=getRequestParametersWithoutServerId(request);\n  return clientService.listForms(serverConfig,parameterMap);\n}\n", "nl": "GET a list of deployed forms.", "id": "52879"}
{"code": "public static Pair<ZooKeeperServerShim,Integer> runZookeeperOnAnyPort(File zkDir) throws Exception {\n  return runZookeeperOnAnyPort((int)(Math.random() * 10000 + 7000),zkDir);\n}\n", "nl": "Try to start zookkeeper locally on any port.", "id": "16681"}
{"code": "public static SM_SYSTEM_MESSAGE STR_COMBINE_USAGE_OVER(String value0){\n  return new SM_SYSTEM_MESSAGE(1400287,value0);\n}\n", "nl": "Crafting %0 has used up the recipe.", "id": "16060"}
{"code": "private void expectException(){\n  expectedException.expect(IllegalArgumentException.class);\n  expectedException.expectMessage(EMPTY_ERROR_MESSAGE);\n}\n", "nl": "Method that provides exception expectation settings.", "id": "36129"}
{"code": "public synchronized void remove(Lease lease) throws UnknownLeaseException {\n  Entry e=findEntry(lease);\n  if (!removeLeaseInRenew(e))   leases.remove(e);\n  calcActualRenews();\n  logger.log(Level.FINE,\"Removed lease {0}\",lease);\n}\n", "nl": "Removes a given lease from the managed set of leases; but does not cancel the given lease.", "id": "6544"}
{"code": "public void addHeader(String header,String value){\n  clientHeaderMap.put(header,value);\n}\n", "nl": "Sets headers that will be added to all requests this client makes (before sending).", "id": "8039"}
{"code": "public boolean hasSuperClassAccess(){\n  return getSuperClassAccessOpt().getNumChild() != 0;\n}\n", "nl": "Check whether the optional SuperClassAccess child exists.", "id": "13432"}
{"code": "public void init$Children(){\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "56895"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_INTERVAL_A_TO_ME(int num0,String skillname,String skillcaster){\n  return new SM_SYSTEM_MESSAGE(1200669,num0,skillname,skillcaster);\n}\n", "nl": "Your flight time decreased by %num0 due to the effect of [%SkillName] used by [%SkillCaster].", "id": "6776"}
{"code": "public DynamicTemplateParameterContext appendParameter(String paramName,String paramValue){\n  return appendParameter(paramName,paramValue,ContextInfo.EMPTY);\n}\n", "nl": "Appends a dynamic parameter value. <ul> <li>It doesn't expect any template parameters within the parameter value.</li> <li>The parameter value is appended to the previous parameter value.</li> <li>A file defined by the parameter will not be deleted on exit.</li> </ul>", "id": "33409"}
{"code": "protected void doIteration(final SimplexTableau tableau) throws MathIllegalStateException {\n  incrementIterationCount();\n  Integer pivotCol=getPivotColumn(tableau);\n  Integer pivotRow=getPivotRow(tableau,pivotCol);\n  if (pivotRow == null) {\n    throw new MathIllegalStateException(LocalizedOptimFormats.UNBOUNDED_SOLUTION);\n  }\n  tableau.performRowOperations(pivotCol,pivotRow);\n}\n", "nl": "Runs one iteration of the Simplex method on the given model.", "id": "7874"}
{"code": "public String name(){\n  return this.record.name();\n}\n", "nl": "Return the list name", "id": "3503"}
{"code": "public int length(){\n  java.util.Iterator iIter=java.util.Arrays.asList(NGramGraphArray).iterator();\n  int iCnt=0;\n  while (iIter.hasNext())   iCnt+=((UniqueVertexGraph)iIter.next()).getEdgesCount();\n  return iCnt;\n}\n", "nl": "Measures an indication of the size of a document n-gram graph based on  the edge count of its contained graphs.", "id": "9269"}
{"code": "public String toString(){\n  return \"PauseGenerator\";\n}\n", "nl": "Returns the string representation of the object", "id": "13883"}
{"code": "public boolean isAskForUsername(){\n  return askForUsername;\n}\n", "nl": "Gets the value of the askForUsername property.", "id": "6684"}
{"code": "public VideoEditCommentQuery attachments(List<String> value){\n  return unsafeParam(\"attachments\",value);\n}\n", "nl": "List of objects attached to the comment, in the following format: \"type\"\"owner_id\"_\"media_id\" \"\"type\"\" - Type of media attachment: \"photo\" - photo \"video\" - video \"audio\" - audio \"doc\" - document \"\"owner_id\"\" - ID of the media attachment owner. \"\"media_id\"\" - Media attachment ID. <p> Example: photo100172_166443618,photo66748_265827614", "id": "9559"}
{"code": "public void notifyListeners(double oldValue,double newValue){\n  for (  SpinnerNotifyInterface observer : observers) {\n    observer.notify(oldValue,newValue);\n  }\n}\n", "nl": "Notify listeners.", "id": "21156"}
{"code": "public void update(LineEvent event){\n  if (event.getType().equals(LineEvent.Type.OPEN)) {\nsynchronized (openLock) {\n      openLock.notifyAll();\n    }\n  }\n}\n", "nl": "Implements update() method of LineListener interface. Responds to the line events as appropriate.", "id": "47630"}
{"code": "private void pauseServiceIntent(){\n  Intent intent=new Intent(getApplicationContext(),ScreenDimmer.class);\n  intent.setAction(TAG_PAUSE);\n  startService(intent);\n}\n", "nl": "service helper methods", "id": "31801"}
{"code": "private void acquirePrecachingWakeLock(){\n  if (mPrecachingWakeLock == null) {\n    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);\n    mPrecachingWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);\n  }\n  mPrecachingWakeLock.acquire();\n}\n", "nl": "Acquire the precaching WakeLock.", "id": "31811"}
{"code": "public boolean isComplete(){\n  return !(Double.isNaN(getXmin()) || Double.isNaN(getXmax()));\n}\n", "nl": "determine if interval is fully specified", "id": "14698"}
{"code": "public WriteModifiers remove(WriteModifiers modifiers){\n  return createIfNeeded(super.remove(modifiers));\n}\n", "nl": "Creates a new modifiers instance which excludes the specified modifiers from this instance.", "id": "58275"}
{"code": "@Override public void onPassphraseCanceled(){\n}\n", "nl": "Callback for PassphraseDialogFragment.Listener", "id": "47235"}
{"code": "public static double[] convolveWithZeroPadding(final double[] signal1,final double[] signal2,double deltaT){\n  double[] result=convolveWithZeroPadding(signal1,signal2);\n  for (int i=0; i < result.length; i++) {\n    result[i]*=deltaT;\n  }\n  return result;\n}\n", "nl": "Compute the convolution of two signals, by multipying them in the frequency domain. Normalise the result with respect to deltaT (the inverse of the sampling rate). This method applies zero padding where necessary to ensure that the result is not polluted because of assumed periodicity. The two signals need not be of equal length.", "id": "56610"}
{"code": "public boolean contains(String key){\n  return myProperties.containsKey(key);\n}\n", "nl": "Returns true if the store contains a value for the given key.", "id": "42043"}
{"code": "private static boolean isDebugEnabled(){\n  try {\n    String val=SecuritySupport.getSystemProperty(\"xerces.debug\");\n    return (val != null && (!\"false\".equals(val)));\n  }\n catch (  SecurityException se) {\n  }\n  return false;\n}\n", "nl": "Returns true if debug has been enabled.", "id": "39487"}
{"code": "public void discard(ServiceRegistrar proxy){\n  if (proxy == null)   return;\n  ProxyReg reg=findReg(proxy);\n  if (reg != null) {\nsynchronized (discoveredSet) {\n      reg.discard();\n      reg.commDiscard=true;\n    }\n  }\n}\n", "nl": "Removes an instance of <code>ServiceRegistrar</code> from the managed set of lookup services, making the corresponding lookup service eligible for re-discovery. This method takes no action if the parameter input to this method is <code>null</code>, or if it does not match (using <code>equals</code>) any of the elements in the managed set.", "id": "27774"}
{"code": "public synchronized boolean canThreadDecoding(Thread t){\n  ThreadStatus status=mThreadStatus.get(t);\n  if (status == null) {\n    return true;\n  }\n  return (status.mState != State.CANCEL);\n}\n", "nl": "The following three methods are used to keep track of which thread is being disabled for bitmap decoding.", "id": "54646"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_HOUSING_OBJECT_REWARD_ITEM(int objectNameId,int rewardItemNameId){\n  return new SM_SYSTEM_MESSAGE(1401263,calculateNameId(objectNameId),new DescriptionId(rewardItemNameId));\n}\n", "nl": "You have acquired %1% from %0%.", "id": "11224"}
{"code": "public float[] evaluate(String inputFileName){\n  JavaRDD<String> lines=jsc.textFile(inputFileName);\n  DataFrame dataset=createDataFrame(lines.collect());\n  return evaluate(dataset);\n}\n", "nl": "Evaluates the tagger on a manually tagged data file.", "id": "10391"}
{"code": "public void remoteResourceCreated(ISVNRemoteFolder parent,String resourceName){\n  for (  ISVNListener listener : repositoryListeners) {\n    listener.remoteResourceCreated(parent,resourceName);\n  }\n}\n", "nl": "signals all listener that a remote resource has been created", "id": "17544"}
{"code": "public static void print(short x){\n  out.print(x);\n  out.flush();\n}\n", "nl": "Prints a short integer to standard output and flushes standard output.", "id": "35510"}
{"code": "@Override public Grammar[] retrieveInitialGrammarSet(String grammarType){\n  Grammar[] grammars=super.retrieveInitialGrammarSet(grammarType);\n  if (grammars != null)   return grammars;\n  return fGrammarPool.retrieveInitialGrammarSet(grammarType);\n}\n", "nl": "Retrieve the initial set of grammars for the validator to work with. REVISIT:  does this need to be synchronized since it's just reading?", "id": "30491"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "13242"}
{"code": "public void close() throws IOException {\n  infoSection.updateModificationDate();\n  infoSection.write(io);\n}\n", "nl": "append the info section to the main file and then close it", "id": "5311"}
{"code": "public SQLSchemaMigrator migrate(Loader loader){\n  loader.addToQueue(migrate());\n  loader.flush();\n  loader.waitToFinish();\n  return this;\n}\n", "nl": "Migrate the entire schema into the given loader.", "id": "41908"}
{"code": "@Override public float toFloat(){\n  return 0;\n}\n", "nl": "Convert Writable to float. Whether this is supported depends on the specific writable.", "id": "53198"}
{"code": "public AppsGetCatalogQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Set name case", "id": "10926"}
{"code": "public boolean isActive(){\n  if (getStatus() == XtnStatus.UNINITIALIZED || getStatus() == XtnStatus.BEGUN)   return true;\n  return false;\n}\n", "nl": "Returns true is new operations can still attach to this transaction, false otherwise (transaction was already committed for example)", "id": "6794"}
{"code": "public User withDefaults(){\n  setIsEnabled(true);\n  setCivility(Civility.MR);\n  return this;\n}\n", "nl": "Apply the default values.", "id": "12210"}
{"code": "protected PhotosGetMarketUploadServerQuery groupId(int value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "Community ID.", "id": "45973"}
{"code": "private void initDictionaryChunkSize(){\n  dictionary_one_chunk_size=CarbonUtil.getDictionaryChunkSize();\n}\n", "nl": "initialize the value of dictionary chunk that can be kept in memory at a time", "id": "3242"}
{"code": "private void skipToEndOfLine() throws IOException {\n  while (pos < limit || fillBuffer(1)) {\n    char c=buffer[pos++];\n    if (c == '\\n') {\n      lineNumber++;\n      lineStart=pos;\n      break;\n    }\n else     if (c == '\\r') {\n      break;\n    }\n  }\n}\n", "nl": "Advances the position until after the next newline character. If the line is terminated by \"\\r\\n\", the '\\n' must be consumed as whitespace by the caller.", "id": "17501"}
{"code": "public boolean isPhantom(){\n  return isPhantom;\n}\n", "nl": "Convenience method returning true if this class is phantom.", "id": "28092"}
{"code": "public void openProperties(DataSource dataSource,int propertiesCategory){\n  if (dataSource == null)   throw new IllegalArgumentException(\"DataSource cannot be null\");\n  PropertiesConfigurator.editProperties(dataSource,propertiesCategory);\n}\n", "nl": "Opens Properites window of the DataSource and selects the provided category if available.", "id": "7096"}
{"code": "public LikesDeleteQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "ID of the user or community that owns the object.", "id": "40691"}
{"code": "public void enableDashedHighlightLine(float lineLength,float spaceLength,float phase){\n  mHighlightDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);\n}\n", "nl": "Enables the highlight-line to be drawn in dashed mode, e.g. like this \"- - - - - -\"", "id": "12526"}
{"code": "@Override public void update(String jsonState,long timeout) throws AWSIotException, AWSIotTimeoutException {\n  super.update(jsonState,timeout);\n}\n", "nl": "Updates the content of a thing shadow with the data provided in the request. This is a blocking call, so the calling thread will be blocked until the operation succeeded, failed, or timed out.", "id": "28403"}
{"code": "public Editor edit() throws IOException {\n  return DiskLruCache.this.edit(key,sequenceNumber);\n}\n", "nl": "Returns an editor for this snapshot's entry, or null if either the entry has changed since this snapshot was created or if another edit is in progress.", "id": "54814"}
{"code": "public static int copy(InputStream input,OutputStream output) throws IOException {\n  long count=copyLarge(input,output);\n  if (count > Integer.MAX_VALUE) {\n    return -1;\n  }\n  return (int)count;\n}\n", "nl": "Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>. <p/> Large streams (over 2GB) will return a bytes copied value of <code>-1</code> after the copy has completed since the correct number of bytes cannot be returned as an int. For large streams use the <code>copyLarge(InputStream, OutputStream)</code> method.", "id": "1184"}
{"code": "@ObjectiveCName(\"addEntry:index:\") public List addEntry(String entry,int index){\n  java.util.List<String> entries=this.getEntries();\n  entries.add(index,entry);\n  this.updateList(entries);\n  return this;\n}\n", "nl": "Add an entry at a certain index into the list", "id": "46832"}
{"code": "private boolean isIP4SubnetFilter(String token){\n  return IPWithSubnetChecker.isValidIP4Range(token);\n}\n", "nl": "Checks if the given token is an IP4 subnet filter.", "id": "19123"}
{"code": "@Override public void browserInfoEntry(BrowserInfoEntry browserInfoEntry){\n  throw new UnsupportedOperationException();\n}\n", "nl": "Unsupported, because HtmlReporter doesn't participate in Visitor implementation. You should call \"generateReport\".", "id": "55799"}
{"code": "int size(){\n  return 0;\n}\n", "nl": "A number of children.", "id": "24357"}
{"code": "public Iterator<Edge> edgesInto(MethodOrMethodContext m){\n  return new CallersOfMethodIterator(m);\n}\n", "nl": "Returns an iterator over all edges that have m as their target method.", "id": "41702"}
{"code": "@Nullable public static PsiNamedElement findInScope(PsiElement element,String name){\n  PsiNamedElement[] resultHolder=new PsiNamedElement[1];\n  Processor<BuildElement> processor=null;\n  searchInScope(element,processor);\n  return resultHolder[0];\n}\n", "nl": "Walks up PSI tree of local file, checking PsiNamedElements", "id": "10677"}
{"code": "public void removeAllTags(){\n  mTagList=null;\n}\n", "nl": "Removes all the tags from this host.", "id": "32717"}
{"code": "public void seekToAudio(String id,int milliseconds){\n  AudioPlayer audio=this.players.get(id);\n  if (audio != null) {\n    audio.seekToPlaying(milliseconds);\n  }\n}\n", "nl": "Seek to a location.", "id": "17700"}
{"code": "public int download_file1(String file_id,DownloadCallback callback) throws IOException, MyException {\n  final long file_offset=0;\n  final long download_bytes=0;\n  return this.download_file1(file_id,file_offset,download_bytes,callback);\n}\n", "nl": "download file from storage server", "id": "27379"}
{"code": "public static boolean isValidMajorVersion(String apiVersion){\n  return MAJOR_VERSION_REGEX_PATTERN.matcher(apiVersion).matches();\n}\n", "nl": "Return true if apiVersion has a valid major version format.", "id": "17844"}
{"code": "@Override public void cleanup(){\n  fEntityManager.closeReaders();\n}\n", "nl": "If the application decides to terminate parsing before the xml document is fully parsed, the application should call this method to free any resource allocated during parsing. For example, close all opened streams.", "id": "35746"}
{"code": "public boolean more(){\n  return this.myIndex < this.mySource.length();\n}\n", "nl": "Determine if the source string still contains characters that next() can consume.", "id": "42184"}
{"code": "public AemContextMenu openContextMenuFirstComponent(Class<?> componentClass){\n  return openContextMenuNthComponent(componentClass,0);\n}\n", "nl": "Opens context menu for the first component of type componentClass.", "id": "52746"}
{"code": "public static void addStoneStats(Item item,ManaStone stone,CreatureGameStats<?> cgs){\n  List<StatFunction> modifiers=stone.getModifiers();\n  if (modifiers == null) {\n    return;\n  }\n  cgs.addEffect(stone,modifiers);\n}\n", "nl": "Used when socketing of equipped item", "id": "16864"}
{"code": "public boolean hasBlock(){\n  return getBlockOpt().getNumChild() != 0;\n}\n", "nl": "Check whether the optional Block child exists.", "id": "40064"}
{"code": "public WallGetCommentsQueryWithExtended allowGroupComments(Boolean value){\n  return unsafeParam(\"allow_group_comments\",value);\n}\n", "nl": "Set allow group comments", "id": "10923"}
{"code": "public static void writeStringToFile(File file,String data,String encoding) throws IOException {\n  writeStringToFile(file,data,encoding,false);\n}\n", "nl": "Writes a String to a file creating the file if it does not exist. NOTE: As from v1.3, the parent directories of the file will be created if they do not exist.", "id": "56757"}
{"code": "public void writeInt(int value) throws JMSException {\n  initializeWriting();\n  try {\n    this.dataOut.writeInt(value);\n  }\n catch (  IOException ioe) {\n    JMSException jmsEx=new JMSException(\"Could not write data:\" + ioe.toString());\n    jmsEx.setLinkedException(ioe);\n    throw jmsEx;\n  }\n}\n", "nl": "Writes an <code>int</code> to the bytes message stream as four bytes, high byte first.", "id": "52643"}
{"code": "public AudioSearchQuery sort(AudioSearchSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order", "id": "29353"}
{"code": "private void addSegmentsIfEmpty(JobContext job,AbsoluteTableIdentifier absoluteTableIdentifier) throws IOException {\n  if (getSegmentsFromConfiguration(job).length == 0) {\n    SegmentStatusManager.ValidAndInvalidSegmentsInfo validAndInvalidSegments=new SegmentStatusManager(absoluteTableIdentifier).getValidAndInvalidSegments();\n    setSegmentsToAccess(job.getConfiguration(),validAndInvalidSegments.getValidSegments());\n  }\n}\n", "nl": "Below method will be used to set the segments details if segments are not added in the configuration", "id": "30437"}
{"code": "public static boolean isFullyEvolved(PokemonId pokemonId){\n  if (EEVEE_FINAL_EVOLUTIONS.contains(pokemonId)) {\n    return true;\n  }\n else {\n    PokemonId[] info=EVOLUTION_INFO.get(pokemonId);\n    return info[info.length - 1] == pokemonId;\n  }\n}\n", "nl": "Tell if a pokemon is fully evolved", "id": "40721"}
{"code": "public static boolean isWalking(NpcAI2 npcAI){\n  return npcAI.isMoveSupported() && (hasWalkRoutes(npcAI) || npcAI.getOwner().isAttackableNpc());\n}\n", "nl": "Is this npc will walk. Currently all monsters will walk and those npc wich has walk routes", "id": "21726"}
{"code": "public boolean isXPath(){\n  return false;\n}\n", "nl": "Return true if this value is an XML Path.", "id": "26352"}
{"code": "public T remove(HttpSession session,Map<String,Object> expandContext){\n  AttributeAccessor<T> aa=new AttributeAccessor<T>(name,expandContext,this.attributeName,this.fma,this.needsExpand);\n  return aa.remove(session);\n}\n", "nl": "Based on name remove from HttpSession or from List in HttpSession", "id": "5822"}
{"code": "private StringBuilder appendIfNotNull(StringBuilder source,String addStr,String delimiter){\n  if (addStr != null) {\n    if (addStr.length() == 0) {\n      delimiter=\"\";\n    }\n    return source.append(addStr).append(delimiter);\n  }\n  return source;\n}\n", "nl": "Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since the logger takes so many arguments that might be null, this method helps cut out some of the agonizing tedium of writing the same 3 lines over and over.", "id": "44087"}
{"code": "public void guardMode(){\n  SummonsService.guardMode(getOwner());\n}\n", "nl": "Change to guard mode", "id": "35209"}
{"code": "@Override public boolean hasMoreData(){\n  return hasMoreData;\n}\n", "nl": "Whether or not any more data can be read from this data source.", "id": "44624"}
{"code": "protected void addClassPath(String classpath){\n  if (classpath == null)   return;\n  String sep=classpath.indexOf(\";\") == -1 ? \":\" : \";\";\n  String[] parseCp=classpath.split(sep);\n  for (  String cpEntry : parseCp) {\n    addEntry(cpEntry);\n  }\n}\n", "nl": "Add classpath with path separator. Separator can be ; or : For example: /usr/lib/mylib1.jar:/usr/lib/mylib2.jar:/usr/lib/mylib3.jar", "id": "30117"}
{"code": "@Override protected void initComparator(){\n  if (Comparator == null)   Comparator=new NGramCachedNonSymmGraphComparator();\n}\n", "nl": "Makes sure the comparator is not null.", "id": "2757"}
{"code": "public final boolean containsKey(String name){\n  return mMap.containsKey(name);\n}\n", "nl": "Returns true iff a key of the given name exists in the format.", "id": "57050"}
{"code": "public IntIterator nodeRows(){\n  return getNodeTable().rows();\n}\n", "nl": "Get an iterator over all node ids (node table row numbers).", "id": "39815"}
{"code": "@Override public boolean isEnabled(){\n  return mIsEnabled;\n}\n", "nl": "Returns whether the controller is enabled or not.", "id": "17716"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().getFirstPC() == 0 && viewer.getPcoaTab().getSecondPC() == 1 && !viewer.getPcoaTab().isIs3dMode();\n}\n", "nl": "this is currently selected?", "id": "22900"}
{"code": "public void addUserPresenceListener(UserPresenceListener userPresenceListener){\n  userPresenceListeners.add(userPresenceListener);\n}\n", "nl": "Adds a user presence listener.", "id": "5460"}
{"code": "public static boolean processPayment(Player player,Item item,int level){\n  return processPayment(player,item.getImprovement().getChargeWay(),getPayAmountForService(item,level));\n}\n", "nl": "Pay for conditioning of item", "id": "4795"}
{"code": "private String extractDeclaringTypeFQN(CompletionProposal methodProposal){\n  char[] declaringTypeSignature=methodProposal.getDeclarationSignature();\n  if (declaringTypeSignature == null)   return \"java.lang.Object\";\n  return SignatureUtil.stripSignatureToFQN(String.valueOf(declaringTypeSignature));\n}\n", "nl": "Extracts the fully qualified name of the declaring type of a method reference.", "id": "32294"}
{"code": "public Builder maxHeight(Number maxHeight){\n  this.maxHeight=maxHeight;\n  return this;\n}\n", "nl": "If set, creates a scrollable container of the given height inside a popup if its content exceeds it.", "id": "35571"}
{"code": "public NewsfeedGetSuggestedSourcesQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "List of extra fields to be returned. See communities.", "id": "12360"}
{"code": "public void popContext(){\n  fMatchersCount=fContextStack.pop();\n}\n", "nl": "Pops a context off of the stack.", "id": "5098"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "43762"}
{"code": "public boolean hasFusionStones(){\n  return fusionStones != null && fusionStones.size() > 0;\n}\n", "nl": "Check fusionstones without initialization", "id": "56942"}
{"code": "public static void moveFile(File srcFile,File destFile){\n  boolean rename=srcFile.renameTo(destFile);\n  if (!rename) {\n    copyFile(srcFile.getAbsolutePath(),destFile.getAbsolutePath());\n    deleteFile(srcFile.getAbsolutePath());\n  }\n}\n", "nl": "move file", "id": "58370"}
{"code": "public long length() throws IOException {\n  return position;\n}\n", "nl": "get length of file", "id": "57498"}
{"code": "public boolean hasSuperClassAccess(){\n  return getSuperClassAccessOpt().getNumChild() != 0;\n}\n", "nl": "Check whether the optional SuperClassAccess child exists.", "id": "45127"}
{"code": "private void deleteLogFile(int ver) throws LogException {\n  if (ver != 0) {\n    deleteFile(versionName(logfilePrefix,ver));\n  }\n}\n", "nl": "Removes the incremental update log file.", "id": "39885"}
{"code": "public static SM_SYSTEM_MESSAGE STR_ABYSS_GUILD_CASTLE_TAKEN(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1301037,value0,value1);\n}\n", "nl": "%0 Legion lost %1.", "id": "10412"}
{"code": "public static double tfidf(double td,double idf){\n  return td * idf;\n}\n", "nl": "Return td * idf", "id": "14419"}
{"code": "public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){\n  return compareTo(cp);\n}\n", "nl": "Compares this entry with another cp_info object (which may reside in a different constant pool).", "id": "41178"}
{"code": "public boolean isValidLocalTld(String lTld){\n  lTld=unicodeToASCII(lTld);\n  return Arrays.binarySearch(LOCAL_TLDS,chompLeadingDot(lTld.toLowerCase(Locale.ENGLISH))) >= 0;\n}\n", "nl": "Returns true if the specified <code>String</code> matches any widely used \"local\" domains (localhost or localdomain). Leading dots are ignored if present. The search is case-insensitive.", "id": "26990"}
{"code": "public static int count(Iterator tuples,String field){\n  int i=0;\n  for (; tuples.hasNext(); ++i, tuples.next())   ;\n  return i;\n}\n", "nl": "Get the number of values in a data column. Duplicates will be counted.", "id": "56900"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "33566"}
{"code": "public FriendsGetOnlineQueryWithMobile order(FriendsGetOnlineOrder value){\n  return unsafeParam(\"order\",value);\n}\n", "nl": "Sort order", "id": "8241"}
{"code": "public void activate(){\n  mSensorManager.registerListener(this,mSensor,SensorManager.SENSOR_DELAY_UI);\n  mActive=true;\n}\n", "nl": "Activates sensor input.", "id": "36480"}
{"code": "public final int size(){\n  return dis.size();\n}\n", "nl": "Get size of stream.", "id": "20209"}
{"code": "public static boolean isInitialized(Context ctx){\n  vitamioPackage=ctx.getPackageName();\n  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + \"lib/\";\n  return true;\n}\n", "nl": "Check if Vitamio is initialized at this device", "id": "20039"}
{"code": "public V put(K key,V value){\n  if (value == null)   throw new NullPointerException();\n  int hash=hash(key.hashCode());\n  return segmentFor(hash).put(key,hash,value,false,false);\n}\n", "nl": "Maps the specified key to the specified value in this table. Neither the key nor the value can be null. <p> The value can be retrieved by calling the <tt>get</tt> method with a key that is equal to the original key.", "id": "45173"}
{"code": "protected void init(Table table,Graph graph,int row){\n  m_table=table;\n  m_graph=graph;\n  m_row=m_table.isValidRow(row) ? row : -1;\n}\n", "nl": "Initialize a new Edge backed by an edge table. This method is used by the appropriate TupleManager instance, and should not be called directly by client code, unless by a client-supplied custom TupleManager.", "id": "6451"}
{"code": "private void writeObject(ObjectOutputStream out) throws IOException {\n  if (needsSyncChildren()) {\n    synchronizeChildren();\n  }\n  out.defaultWriteObject();\n}\n", "nl": "Serialize object.", "id": "601"}
{"code": "public void addBottomResourceBundle(String resource){\n  if (this.initialResourceBundle == null) {\n    throw new IllegalArgumentException(\"Cannot add bottom resource bundle, this wrapper was not properly initialized (there is no base/initial ResourceBundle).\");\n  }\n  this.addBottomResourceBundle(new InternalRbmWrapper(UtilProperties.getResourceBundle(resource,this.initialResourceBundle.getLocale())));\n}\n", "nl": "Don't pass the locale to make sure it has the same locale as the base", "id": "21383"}
{"code": "public static SM_SYSTEM_MESSAGE STR_DUEL_TIMEOUT_WITHOUT_PARTNER(String value0){\n  return new SM_SYSTEM_MESSAGE(1300104,value0);\n}\n", "nl": "The duel with %0 ended due to the time limit.", "id": "52139"}
{"code": "public static StatefulHash sha256(){\n  return Hashes.createStateful(SimpleHashParameters.SHA256);\n}\n", "nl": "Returns a hash function implementing the SHA-256 algorithm (256 bits).", "id": "16838"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonBindingGroupGate_A_TO_ME(String skillcaster,String value0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200728,skillcaster,value0,skillname);\n}\n", "nl": "[%SkillCaster] has caused you to summon %0 by using [%SkillName].", "id": "21462"}
{"code": "public Builder popUpAnchor(Point popUpAnchor){\n  this.popUpAnchor=popUpAnchor;\n  return this;\n}\n", "nl": "The coordinates of the point from which popups will \"open\", relative to the icon anchor.", "id": "54169"}
{"code": "@Override public void clear(){\n  rowMap.clear();\n}\n", "nl": "Clears all rows from this View, leaving the structure in place", "id": "35799"}
{"code": "public boolean isPrefixOf(FieldSelector sel){\n  for (int i=0; i < fields.size(); i++) {\n    if (i >= sel.fields.size() || fields.get(i) != sel.fields.get(i)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Check whether this selector is a prefix of another selector.", "id": "52439"}
{"code": "public AppsGetLeaderboardQuery global(Boolean value){\n  return unsafeParam(\"global\",value);\n}\n", "nl": "Rating type.  Possible values: true - global rating among all players; false - rating among user friends.", "id": "16583"}
{"code": "public static String joinStrings(Collection<String> strings){\n  StringBuilder buf=new StringBuilder();\n  if (strings == null) {\n    throw new NullPointerException(\"Received null collection\");\n  }\n  for (  String s : strings) {\n    buf.append(s);\n  }\n  return buf.toString();\n}\n", "nl": "Join a collection of strings into a single String object, in the order indicated by the collection's iterator.", "id": "6472"}
{"code": "public GenericValue findByPrimaryKeyPartial(GenericPK primaryKey,Set<String> keys) throws GenericEntityException {\n  if (primaryKey == null) {\n    return null;\n  }\n  GenericValue genericValue=GenericValue.create(primaryKey);\n  genericDAO.partialSelect(genericValue,keys);\n  return genericValue;\n}\n", "nl": "Find a Generic Entity by its Primary Key and only returns the values requested by the passed keys (names)", "id": "26175"}
{"code": "void receiveMessages(ClientCnx cnx,int numMessages){\n  if (cnx != null) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"[{}] [{}] Adding {} additional permits\",topic,subscription,numMessages);\n    }\n    cnx.ctx().writeAndFlush(Commands.newFlow(consumerId,numMessages),cnx.ctx().voidPromise());\n  }\n}\n", "nl": "send the flow command to have the broker start pushing messages", "id": "12955"}
{"code": "public static ContextSet empty(){\n  return new ContextSet();\n}\n", "nl": "Creates a new empty ContextSet.", "id": "51078"}
{"code": "static int hash(Object[] elements){\n  int h=0;\n  for (int i=elements.length; --i >= 0; ) {\n    h+=elements[i].hashCode();\n  }\n  return h;\n}\n", "nl": "Returns the sum of the hash codes of all elements of the given array.", "id": "27112"}
{"code": "@Override public Filter createLogicFilter(List<Filter> filterList){\n  return null;\n}\n", "nl": "Creates the logic filter.", "id": "16492"}
{"code": "@Override public void updateValue(String key,boolean value){\n  updateValue(key,value ? TRUE : FALSE);\n}\n", "nl": "Update property value.", "id": "9828"}
{"code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getAlignment().getNumberOfSequences() > 0 && viewer.getSelectedBlock().isSelected() && viewer.getSelectedBlock().getLastRow() < viewer.getAlignment().getNumberOfSequences() - 1;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "31368"}
{"code": "public static void resetCount(){\n  count=1;\n}\n", "nl": "Resets the current number of executed conversion operations.", "id": "40061"}
{"code": "@Override public boolean remove(Object o){\n  return backedSet.remove(o);\n}\n", "nl": "Removes the specified element from this applyTransformToDestination if it is present (optional operation).  More formally, removes an element <tt>e</tt> such that <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>, if this applyTransformToDestination contains such an element.  Returns <tt>true</tt> if this applyTransformToDestination contained the element (or equivalently, if this applyTransformToDestination changed as a result of the call).  (This applyTransformToDestination will not contain the element once the call returns.)", "id": "29851"}
{"code": "public boolean addStyleKey(String styleKey){\n  return styleKeys.add(styleKey);\n}\n", "nl": "The style keys of the content.", "id": "5431"}
{"code": "public static String bind(String key){\n  try {\n    return getResourceBundle().getString(key);\n  }\n catch (  MissingResourceException e) {\n    return key;\n  }\ncatch (  NullPointerException e) {\n    return \"!\" + key + \"!\";\n  }\n}\n", "nl": "Gets a string from the resource bundle. We don't want to crash because of a missing String. Returns the key if not found.", "id": "52864"}
{"code": "public boolean isComplex(){\n  return false;\n}\n", "nl": "Method to indicate whether this query is complex - false only if the template can be translated to a space query without post processing some space operations don't support complex queries", "id": "8279"}
{"code": "public static String createShortTag(String cName){\n  if (cName.equalsIgnoreCase(Taxonomy))   return \"tax|\";\n else   if (cName.equalsIgnoreCase(\"interpro2go\"))   return \"IPR|\";\n else   if (cName.equalsIgnoreCase(\"eggnog\"))   return \"cog|\";\n else   return cName.toLowerCase() + \"|\";\n}\n", "nl": "create short tag for writing header line", "id": "47935"}
{"code": "public boolean isClassSuperclassOf(SootClass parent,SootClass possibleChild){\n  parent.checkLevel(SootClass.HIERARCHY);\n  possibleChild.checkLevel(SootClass.HIERARCHY);\n  return getSubclassesOf(parent).contains(possibleChild);\n}\n", "nl": "Returns true if child is a superclass of possibleParent.", "id": "15983"}
{"code": "public static void writeLines(File file,String encoding,Collection<?> lines) throws IOException {\n  writeLines(file,encoding,lines,null,false);\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to the specified <code>File</code> line by line. The specified character encoding and the default line ending will be used. <p> NOTE: As from v1.3, the parent directories of the file will be created if they do not exist.", "id": "46813"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "52391"}
{"code": "default String relationName(String type){\n  return String.format(RELATION,type);\n}\n", "nl": "Get the name of a relation relating something to the given type", "id": "16137"}
{"code": "public void requestProjectSync(@NotNull Project project,boolean generateSourcesOnSuccess,@Nullable GradleSyncListener listener){\n  requestProjectSync(project,false,generateSourcesOnSuccess,false,listener);\n}\n", "nl": "Requests a project sync with Gradle.", "id": "49180"}
{"code": "public S2LatLng mul(final double m){\n  return new S2LatLng(latRadians * m,lngRadians * m);\n}\n", "nl": "Scales this point by the given scaling factor. Note that there is no guarantee that the new point will be <em>valid</em>.", "id": "9838"}
{"code": "public GroupsEditQuery marketCountry(Integer... value){\n  return unsafeParam(\"market_country\",value);\n}\n", "nl": "Market delivery regions", "id": "34864"}
{"code": "public static long calculateDifferentSecond(long startTimeMillis,long endTimeMillis){\n  return calculateDifference(startTimeMillis,endTimeMillis,DifferenceMode.Second);\n}\n", "nl": "Calculate different second long.", "id": "58638"}
{"code": "@NonNull public String tag(){\n  return getClass().getSimpleName();\n}\n", "nl": "Used for logging purposes.", "id": "40910"}
{"code": "protected MessagesAddChatUserQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "ID of the user to be added to the chat.", "id": "30906"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CloseAerial_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200648,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] released you from the aerial snare by using [%SkillName].", "id": "49563"}
{"code": "public boolean declaresMethod(NumberedString subsignature){\n  checkLevel(SIGNATURES);\n  SootMethod ret=subSigToMethods.get(subsignature);\n  return ret != null;\n}\n", "nl": "Does this class declare a method with the given subsignature?", "id": "25100"}
{"code": "public static void isInstanceOf(String argumentName,Object argumentObject,Class<?> targetClass){\n  notNull(argumentName,argumentObject);\n  if (!targetClass.isInstance(argumentObject)) {\n    throw new IllegalArgumentException(argumentName + \" is not an instance of \" + targetClass.getName());\n  }\n}\n", "nl": "Tests if an argument is not null and is an instance of a specified class. <p><code>Assert.isInstanceOf(\"foo\", foo, Foo.class);</code></p>", "id": "53723"}
{"code": "public void showLoading(){\n  switchState(LOADING,null,null,null,null,null,Collections.<Integer>emptyList());\n}\n", "nl": "Hide content and show the progress bar", "id": "50225"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_PAY_RESULT_OTHER(String value0){\n  return new SM_SYSTEM_MESSAGE(1390184,value0);\n}\n", "nl": "%0 settled the account instantly.", "id": "46977"}
{"code": "public boolean removeUser(int handle){\n  try {\n    return mService.removeUser(handle);\n  }\n catch (  RemoteException re) {\n    Log.w(TAG,\"Could not remove user \",re);\n    return false;\n  }\n}\n", "nl": "Removes a user and all associated data.", "id": "56088"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_ACQUIRE_QUEST(String value0){\n  return new SM_SYSTEM_MESSAGE(1300613,value0);\n}\n", "nl": "Quest acquired: %0", "id": "24115"}
{"code": "private void dump(final Thread thread,final Throwable exception){\n  if (isWriting) {\n    return;\n  }\n  isWriting=true;\n  SharePref.saveLastCrashLog(mContext,mWriter.write(thread,exception));\n  isWriting=false;\n}\n", "nl": "dump the crash log", "id": "53340"}
{"code": "public boolean geom_trans(){\n  return soot.PhaseOptions.getBoolean(options,\"geom-trans\");\n}\n", "nl": "Transform to context-insensitive result -- Transform to context-insensitive result. If you stick to working with SPARK, you can use this  option to transform the context sensitive result to insensitive  result. After the transformation, the context sensitive  points-to quries cannot be answered. \t\t\t\t\t\t", "id": "24463"}
{"code": "public void onLongPress(long time,float x,float y){\n  getActiveStripLayoutHelper().onLongPress(time,x,y);\n}\n", "nl": "Called on long press touch event.", "id": "21560"}
{"code": "@PostConstruct public void init(){\n  commandExecutionManager.registerAsPersistenceListener(this);\n}\n", "nl": "Registers as command persistence listener.", "id": "17996"}
{"code": "public void reset(){\n  for (int i=0; i < measureDataChunk.length; i++) {\n    this.measureDataChunk[i]=null;\n  }\n  for (int i=0; i < dimensionDataChunk.length; i++) {\n    this.dimensionDataChunk[i]=null;\n  }\n}\n", "nl": "To reset the measure chunk and dimension chunk array", "id": "45921"}
{"code": "@Override public boolean isEmpty(){\n  return false;\n}\n", "nl": "Checks if is empty.", "id": "19701"}
{"code": "public static String generateCode(){\n  return generateCode(CODESIZE);\n}\n", "nl": "Generates a pseudo random string using the allowed characters. Code is 11 characters long.", "id": "29973"}
{"code": "@Override public byte[] asBytes(int rowNumber){\n  return ByteBuffer.allocate(4).putInt(get(rowNumber)).array();\n}\n", "nl": "Returns the contents of the cell at rowNumber as a byte[]", "id": "57198"}
{"code": "protected PlacesGetByIdQuery places(List<Integer> value){\n  return unsafeParam(\"places\",value);\n}\n", "nl": "Location IDs.", "id": "36777"}
{"code": "public static boolean expressionIsTrue(String expression){\n  final JEP parser=getJep();\n  parser.parseExpression(expression);\n  return isEqual(parser.getValue(),1.0);\n}\n", "nl": "Evaluates whether an expression is true or false.", "id": "4577"}
{"code": "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n  return encodeObject(serializableObject,NO_OPTIONS);\n}\n", "nl": "Serializes an object and returns the Base64-encoded version of that serialized object.   <p>As of v 2.3, if the object cannot be serialized or there is another error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned a null value, but in retrospect that's a pretty poor way to handle it.</p> The object is not GZip-compressed before being encoded.", "id": "26273"}
{"code": "public UsersGetNearbyQuery radius(UsersGetNearbyRadius value){\n  return unsafeParam(\"radius\",value);\n}\n", "nl": "Search zone radius type", "id": "51252"}
{"code": "public final TestSubscriber<T> assertFusionEnabled(){\n  if (establishedFusionMode != Fuseable.SYNC && establishedFusionMode != Fuseable.ASYNC) {\n    throw new AssertionError(\"Fusion was not enabled\");\n  }\n  return this;\n}\n", "nl": "Assert that the fusion mode was granted.", "id": "12227"}
{"code": "private void createEventSessionConfig() throws IOException {\n  eventSessionConfig=new EventSessionConfig();\n  eventSessionConfig.setFifo(true);\n  eventSessionConfig.setReplicateNotifyTemplate(true);\n  eventSessionConfig.setTriggerNotifyTemplate(false);\n}\n", "nl": "Creates the DataEventSession configuration.", "id": "35145"}
{"code": "public void putCorrection(String ocredPokemonName,String correctedPokemonName){\n  userCorrections.put(ocredPokemonName,correctedPokemonName);\n}\n", "nl": "Saves the pokemon nickname relation to picked pokemon.", "id": "52885"}
{"code": "public String toString(){\n  return Graph.toString();\n}\n", "nl": "Returns a string representation of the document graph.", "id": "17848"}
{"code": "@NonNull public static StorableFence not(@NonNull StorableFence fence){\n  StorableFence metaFence=new StorableFence(Type.META);\n  metaFence.mNotFence=fence;\n  return metaFence;\n}\n", "nl": "Creates a meta storable fence which is a logical 'not' of the given fence", "id": "19171"}
{"code": "public static double pareto(){\n  return pareto(1.0);\n}\n", "nl": "Returns a random real number from the standard Pareto distribution.", "id": "16217"}
{"code": "public int model(){\n  return theType.model();\n}\n", "nl": "Return the content model vector of the element's type. Convenience method.", "id": "42404"}
{"code": "public boolean hasSuperClassAccess(){\n  return getSuperClassAccessOpt().getNumChild() != 0;\n}\n", "nl": "Check whether the optional SuperClassAccess child exists.", "id": "11733"}
{"code": "public static Value noLocal(Value val){\n  if (val != null && !isLocal(val))   return val;\n else   return null;\n}\n", "nl": "only lets non-Locals through.<br> returns <code>null</code> if <code>val</code> is null.", "id": "27891"}
{"code": "public boolean isSuccess(){\n  return success;\n}\n", "nl": "Gets the value of the success property.", "id": "21181"}
{"code": "public static long min(final long a,final long b){\n  return (a <= b) ? a : b;\n}\n", "nl": "Compute the minimum of two values", "id": "51579"}
{"code": "public void addProcessIds(final Collection<Long> processIds){\n  for (  Long processId : processIds) {\n    addProcessId(processId);\n  }\n}\n", "nl": "Adds all process id's of that list as dependency to this tag", "id": "22744"}
{"code": "public ShimpleBody newBody(SootMethod m,Map<String,String> options){\n  return new ShimpleBody(m,options);\n}\n", "nl": "Returns an empty ShimpleBody associated with method m, using provided option map.", "id": "10893"}
{"code": "public static String formatPrice(Double price){\n  if (price == null)   return \"\";\n  return formatPrice(price.doubleValue());\n}\n", "nl": "Formats a Double representing a price into a string", "id": "6731"}
{"code": "public boolean simplify_offline(){\n  return soot.PhaseOptions.getBoolean(options,\"simplify-offline\");\n}\n", "nl": "Simplify Offline -- Collapse single-entry subgraphs of the PAG. When this option is set to true, variable (Green) nodes which  form single-entry subgraphs (so they must have the same  points-to set) are merged before propagation begins.", "id": "36815"}
{"code": "protected boolean isStressed(String phone){\n  return phone.endsWith(\"1\");\n}\n", "nl": "Determines if the given phonene is stressed. To determine stress, this method relies upon a phone ending in the number \"1\".  Subclasses should override this method if stresses are determined in other ways.", "id": "57769"}
{"code": "protected AdsRemoveOfficeUsersQuery accountId(int value){\n  return unsafeParam(\"account_id\",value);\n}\n", "nl": "Advertising account ID.", "id": "52722"}
{"code": "public Builder keyboard(Boolean keyboard){\n  return this;\n}\n", "nl": "Makes the map focusable and allows users to navigate the map with keyboard arrows and +/- keys. default true", "id": "41164"}
{"code": "public synchronized void flush() throws IOException {\n  checkNotClosed();\n  trimToSize();\n  journalWriter.flush();\n}\n", "nl": "Force buffered operations to the filesystem.", "id": "31370"}
{"code": "public final int yystate(){\n  return zzLexicalState;\n}\n", "nl": "Returns the current lexical state.", "id": "27599"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_ABSTATUS_SKILL_CAN_NOT_BE_TURNED_OFF_BY_CASTOR(String value0){\n  return new SM_SYSTEM_MESSAGE(1300057,value0);\n}\n", "nl": "The %0 skill effect cannot be removed.", "id": "31248"}
{"code": "static Set<String> parsePathParameters(String path){\n  Matcher m=PARAM_URL_REGEX.matcher(path);\n  Set<String> patterns=new LinkedHashSet<>();\n  while (m.find()) {\n    patterns.add(m.group(1));\n  }\n  return patterns;\n}\n", "nl": "Gets the set of unique path parameters used in the given URI. If a parameter is used twice in the URI, it will only show up once in the set.", "id": "35436"}
{"code": "public static void angleToDefaultAngle(double[] angle){\n  for (int i=0; i < angle.length; i++) {\n    angle[i]=angleToDefaultAngle(angle[i]);\n  }\n}\n", "nl": "For each of an array of angles (in radians), return the equivalent angle in the range [-PI, PI].", "id": "24970"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "56188"}
{"code": "public static void createReader(String fileName){\n  try {\n    createReader(new FileInputStream(fileName));\n  }\n catch (  FileNotFoundException e) {\n    e.printStackTrace();\n  }\n}\n", "nl": "Create a buffered reader to read from a UTF-8 text file.", "id": "54270"}
{"code": "public Bitmap put(String key,Bitmap value){\n  return cache.put(key,value);\n}\n", "nl": "put bitmap to image cache", "id": "20402"}
{"code": "public boolean equals(Object other){\n  if (!(other instanceof TLongObjectHashMap)) {\n    return false;\n  }\n  TLongObjectHashMap that=(TLongObjectHashMap)other;\n  if (that.size() != this.size()) {\n    return false;\n  }\n  return forEachEntry(new EqProcedure(that));\n}\n", "nl": "Compares this map with another map for equality of their stored entries.", "id": "40577"}
{"code": "private static File constructFilePaths(String file1,String file2){\n  File newPath;\n  if (file2.startsWith(file1)) {\n    newPath=new File(file2);\n  }\n else {\n    newPath=new File(file1 + \"/\" + file2);\n  }\n  return newPath;\n}\n", "nl": "Create a new file object from two file paths.", "id": "32990"}
{"code": "public void resetOriginals(){\n  mStartingStartTrim=0;\n  mStartingEndTrim=0;\n  mStartingRotation=0;\n  setStartTrim(0);\n  setEndTrim(0);\n  setRotation(0);\n}\n", "nl": "Reset the progress spinner to default rotation, start and end angles.", "id": "9000"}
{"code": "public boolean isEmpty(){\n  return priorityQueue.isEmpty();\n}\n", "nl": "Is queue is Empty", "id": "53386"}
{"code": "public short key(){\n  return _map._set[_index];\n}\n", "nl": "Provides access to the key of the mapping at the iterator's position. Note that you must <tt>advance()</tt> the iterator at least once before invoking this method.", "id": "53301"}
{"code": "public static boolean isXML11Name(int c){\n  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME) != 0) || (c >= 0x10000 && c < 0xF0000);\n}\n", "nl": "Returns true if the specified character is a valid name character as defined by production [4a] in the XML 1.1 specification.", "id": "4463"}
{"code": "public QueryAnswers resolve(MatchQuery inputQuery,boolean materialise){\n  Query query=new ReasonerMatchQuery(inputQuery,graph);\n  return resolveQuery(query,materialise);\n}\n", "nl": "Resolve a given query using the rule base", "id": "20957"}
{"code": "public static void showToast(Context context,int resourceId){\n  Toast.makeText(context,context.getString(resourceId),Toast.LENGTH_LONG).show();\n}\n", "nl": "Shows a (long) toast.", "id": "3487"}
{"code": "public int size(){\n  return name2id.size();\n}\n", "nl": "gets the size of the mapping", "id": "12609"}
{"code": "public static <T extends Serializable,R>DistributedTask<T,R> task(Callable<T> callable,AsyncResultsReducer<T,R> reducer,AsyncResultFilter<T> filter){\n  return new CallableDistributedTaskAdapter<T,R>(callable,reducer,filter);\n}\n", "nl": "Constructs a new callable distributed task adapter with a separate reducer and filter.", "id": "12582"}
{"code": "private int parseLastInt(String line){\n  String lastInt=line.trim().substring(line.lastIndexOf(\" \"));\n  return Integer.parseInt(lastInt.trim());\n}\n", "nl": "Returns the integer value of the last integer in the given string.", "id": "11364"}
{"code": "public static SM_SYSTEM_MESSAGE STR_OTHER_combine_FAIL(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1400148,value0,value1);\n}\n", "nl": "%0 failed to craft %1.", "id": "24436"}
{"code": "@Override public void textDecl(String version,String encoding,Augmentations augs) throws XNIException {\n  if (fDTDGrammar != null)   fDTDGrammar.textDecl(version,encoding,augs);\n  if (fDTDHandler != null) {\n    fDTDHandler.textDecl(version,encoding,augs);\n  }\n}\n", "nl": "Notifies of the presence of a TextDecl line in an entity. If present, this method will be called immediately following the startParameterEntity call. <p/> <strong>Note:</strong> This method is only called for external parameter entities referenced in the DTD.", "id": "46594"}
{"code": "public CastExpr newCastExpr(Value op1,Type t){\n  return new JCastExpr(op1,t);\n}\n", "nl": "Constructs a CastExpr(Immediate, Type) grammar chunk.", "id": "18804"}
{"code": "public static boolean isValidEmail(String email){\n  return Patterns.EMAIL_ADDRESS.matcher(email).matches();\n}\n", "nl": "Check if an email is valid", "id": "17643"}
{"code": "public boolean cancel(boolean mayInterruptIfRunning){\n  return this.request != null && request.cancel(mayInterruptIfRunning);\n}\n", "nl": "Attempts to cancel this request. This attempt will fail if the request has already completed, has already been cancelled, or could not be cancelled for some other reason. If successful, and this request has not started when cancel is called, this request should never run. If the request has already started, then the mayInterruptIfRunning parameter determines whether the thread executing this request should be interrupted in an attempt to stop the request. <p>&nbsp;</p> After this method returns, subsequent calls to isDone() will always return true. Subsequent calls to isCancelled() will always return true if this method returned true.", "id": "54726"}
{"code": "private synchronized boolean incRef(){\n  if (_closed) {\n    return false;\n  }\n  _referenceCount+=1;\n  _log.info(\"Data store reference count updated: [id = {}, reference count = {}]\",_id,_referenceCount);\n  return true;\n}\n", "nl": "Increment the number of references to the DataStore by one.", "id": "12584"}
{"code": "public void delete(){\n  if (getOwner().isSpawned()) {\n    World.getInstance().despawn(getOwner());\n  }\n  World.getInstance().removeObject(getOwner());\n}\n", "nl": "Removes controlled object from the world.", "id": "47322"}
{"code": "@Frame(\"$cq\") public AemRichText click(final RtButton button){\n  if (!buttonSelected(button)) {\n    bobcatWait.withTimeout(Timeouts.BIG).until(null,2);\n  }\n  return this;\n}\n", "nl": "Clicks the button indicated by the parameter.", "id": "27873"}
{"code": "public int storeByCondition(Delegator delegator,ModelEntity modelEntity,Map<String,? extends Object> fieldsToSet,EntityCondition condition) throws GenericEntityException {\n  if (modelEntity == null || condition == null) {\n    return 0;\n  }\n  return genericDAO.updateByCondition(delegator,modelEntity,fieldsToSet,condition);\n}\n", "nl": "Updates a group of values in a single pass.", "id": "42250"}
{"code": "public void addScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.add(listener);\n}\n", "nl": "Adds wheel scrolling listener", "id": "34542"}
{"code": "@Override public void endMerging(){\n}\n", "nl": "Default implementation ending merging; does nothing.", "id": "56562"}
{"code": "private static void createReader(InputStream inputStream){\n  try {\n    closeReader();\n    Reader iReader=new InputStreamReader(inputStream,\"UTF-8\");\n    reader=new BufferedReader(iReader);\n  }\n catch (  UnsupportedEncodingException e) {\n    e.printStackTrace();\n  }\n}\n", "nl": "Create a buffered reader to read from an input stream.", "id": "25870"}
{"code": "public void connect(List<StompHeader> _headers,boolean reconnect){\n  if (reconnect)   disconnect();\n  if (mConnected)   return;\n  mConnectionProvider.getLifecycleReceiver().subscribe(null);\n  mMessagesSubscription=mConnectionProvider.messages().map(null).subscribe(null);\n}\n", "nl": "If already connected and reconnect=false - nope", "id": "38156"}
{"code": "@Override public long toLong(){\n  throw new UnsupportedOperationException();\n}\n", "nl": "Convert Writable to long. Whether this is supported depends on the specific writable.", "id": "25454"}
{"code": "@Override public String toString(){\n  return \"Xen []\";\n}\n", "nl": "Method toString.", "id": "38509"}
{"code": "public void storeOriginals(){\n  mStartingStartTrim=mStartTrim;\n  mStartingEndTrim=mEndTrim;\n  mStartingRotation=mRotation;\n}\n", "nl": "If the start / end trim are offset to begin with, store them so that animation starts from that offset.", "id": "47249"}
{"code": "public static String decodeString(String s){\n  return new String(decode(s));\n}\n", "nl": "Decodes a string from Base64 format. No blanks or line breaks are allowed within the Base64 encoded input data.", "id": "13551"}
{"code": "public void addParameter(ParameterDeclaration node){\n  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the Parameter list.", "id": "19895"}
{"code": "public SimpleStringProperty stepNumberProperty(){\n  return this.stepNumberProperty;\n}\n", "nl": "The stepNumber property.", "id": "47993"}
{"code": "@Override public void empty(Augmentations augs) throws XNIException {\n  if (fDTDGrammar != null)   fDTDGrammar.empty(augs);\n  if (fDTDContentModelHandler != null) {\n    fDTDContentModelHandler.empty(augs);\n  }\n}\n", "nl": "A content model of EMPTY.", "id": "47749"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GUILD_INVITE_I_JOINED(String value0){\n  return new SM_SYSTEM_MESSAGE(1390215,value0);\n}\n", "nl": "You have joined the %0 Legion.", "id": "47091"}
{"code": "private static boolean permissionExists(String permission){\n  Integer minVersion=MIN_SDK_PERMISSIONS.get(permission);\n  return minVersion == null || Build.VERSION.SDK_INT >= minVersion;\n}\n", "nl": "Returns true if the permission exists in this SDK version", "id": "5826"}
{"code": "protected Criteria createCriteriaInternal(){\n  Criteria criteria=new Criteria();\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.files", "id": "18443"}
{"code": "public static UByte valueOf(short value) throws NumberFormatException {\n  return valueOfUnchecked(rangeCheck(value));\n}\n", "nl": "Get an instance of an <code>unsigned byte</code>", "id": "28818"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCFPHeal_Instant_HEAL_ME_TO_SELF(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200392,num0,skillname);\n}\n", "nl": "You increased the flight time by %num0 by using [%SkillName].", "id": "8726"}
{"code": "protected boolean needInputMethod(){\n  return false;\n}\n", "nl": "Returns whether the preference needs to display a soft input method when the dialog is displayed. Default is false. Subclasses should override this method if they need the soft input method brought up automatically.", "id": "23089"}
{"code": "@RequestMapping(value={\"/recordings\"},method=RequestMethod.GET) public String returnRecordingsView(){\n  return \"recordings\";\n}\n", "nl": "If a request comes to as \"http://server name/App Name/recordings\" or \"http://server name/App Name/recordings\", this function will hold the rest.", "id": "54784"}
{"code": "private static RetainFragment findOrCreateRetainFragment(FragmentManager fm){\n  RetainFragment mRetainFragment=(RetainFragment)fm.findFragmentByTag(TAG);\n  if (mRetainFragment == null) {\n    mRetainFragment=new RetainFragment();\n    fm.beginTransaction().add(mRetainFragment,TAG).commitAllowingStateLoss();\n  }\n  return mRetainFragment;\n}\n", "nl": "Locate an existing instance of this Fragment or if not found, create and add it using FragmentManager.", "id": "43959"}
{"code": "public boolean isAuthorized(String auth){\n  return userCredentials != null && userCredentials.isAuthorized(auth);\n}\n", "nl": "Tests whether the user has the given authority. Returns true in any case if the user has the ALL authority.", "id": "21136"}
{"code": "public void addEdge(Object from,Object to){\n  if (!super.containsNode(from))   super.addNode(from);\n  if (!super.containsNode(to))   super.addNode(to);\n  super.addEdge(from,to);\n}\n", "nl": "If nodes are not in the graph, add them into graph first.", "id": "13239"}
{"code": "private void writeDictionaryFile() throws IOException {\n  ColumnDictionaryChunk columnDictionaryChunk=new ColumnDictionaryChunk();\n  columnDictionaryChunk.setValues(oneDictionaryChunkList);\n  writeThriftObject(columnDictionaryChunk);\n}\n", "nl": "This method will serialize the object of dictionary file", "id": "29342"}
{"code": "NewExpr newNewExpr(RefType type){\n  return Jimple.v().newNewExpr(type);\n}\n", "nl": "Constructs a NewExpr(RefType) grammar chunk.", "id": "6392"}
{"code": "public boolean canCreate(){\n  return count < capacity;\n}\n", "nl": "Returns true if there is capacity to create a new buffer.", "id": "27823"}
{"code": "public void inflateMenu(@MenuRes int resId){\n  mNavigationView.inflateMenu(resId);\n}\n", "nl": "Inflate a menu resource into this navigation view. <p/> <p>Existing items in the menu will not be modified or removed.</p>", "id": "16910"}
{"code": "public void hide(boolean animate){\n  hide(animate,fadeOut);\n}\n", "nl": "Make the badge non-visible in the UI.", "id": "35713"}
{"code": "public static String mapChineseMarksToAnsi(String text){\n}\n", "nl": "Convert Chinese full-width punctuation marks to corresponding ANSI marks.", "id": "36336"}
{"code": "public int pageCount(){\n  int r=values / pageSize;\n  int m=values % pageSize;\n  return m == 0 ? r : (r + 1);\n}\n", "nl": "Returns the number of pages in the list.", "id": "3597"}
{"code": "public PollsEditQuery deleteAnswers(String value){\n  return unsafeParam(\"delete_answers\",value);\n}\n", "nl": "List of answer ids to be deleted. For example: [382967099, 382967103]", "id": "56290"}
{"code": "public PointsToSet reachingObjects(Context c,Local l){\n  return reachingObjects(l);\n}\n", "nl": "Returns the set of objects pointed to by variable l in context c.", "id": "25717"}
{"code": "@PostConstruct protected void init(){\n  cacheReadLock=controller.getReadLock();\n}\n", "nl": "This method is called by Spring after having created this service.", "id": "21199"}
{"code": "public double lngDegrees(){\n  return 180.0 / Math.PI * lngRadians;\n}\n", "nl": "Returns the longitude of this point as degrees.", "id": "9303"}
{"code": "public int size(){\n  return 3;\n}\n", "nl": "Returns the size of this cp_info object.", "id": "2041"}
{"code": "public boolean isHighQuality(){\n  return m_highQuality;\n}\n", "nl": "Indicates if the Display is using high quality (return value true) or regular quality (return value false) rendering.", "id": "34083"}
{"code": "public void clear(){\n  headers.clear();\n}\n", "nl": "Removes any contained headers.", "id": "31838"}
{"code": "public void write(byte[] bytes,int offset,int len) throws IOException {\n  outs.write(bytes,offset,len);\n}\n", "nl": "write bytes", "id": "47307"}
{"code": "public IntIterator columnRows(int col,boolean reverse){\n  return new ColumnRowIterator(rows(reverse),col);\n}\n", "nl": "Return an iterator over column row indices.", "id": "57749"}
{"code": "@Override public void onError(String error){\n}\n", "nl": "Call if have some problem with getting content", "id": "19353"}
{"code": "public static void initManager(Context context){\n  if (mInstance == null) {\n    mInstance=new AssetsDatabaseManager(context);\n  }\n}\n", "nl": "Initialize AssetsDatabaseManager", "id": "51534"}
{"code": "public ContextVarNode makeContextVarNode(LocalVarNode base,Context context){\n  ContextVarNode ret=base.context(context);\n  if (ret == null) {\n    ret=new ContextVarNode(this,base,context);\n    addNodeTag(ret,base.getMethod());\n  }\n  return ret;\n}\n", "nl": "Finds or creates the ContextVarNode for base variable base and context context, of type type.", "id": "6833"}
{"code": "public static void checkArgument(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){\n  if (!expression) {\n    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));\n  }\n}\n", "nl": "Ensures the truth of an expression involving one or more parameters to the calling method.", "id": "21758"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "30842"}
{"code": "@PreDestroy public void automaticsBrokerStop() throws Exception {\n  stopBroker();\n}\n", "nl": "Import the associated XML to start this bean.", "id": "48620"}
{"code": "public Bindings add(String property,JToggleButton c){\n  registerPropertyChangeListener(c);\n  return add(new JToggleButtonBinding(property,c,false));\n}\n", "nl": "Handles JToggleButton, JCheckBox", "id": "4773"}
{"code": "private void onSaveState(Bundle outState){\n  outState.putSerializable(KEY_UUID,mUUID);\n}\n", "nl": "Called when the host is being saved for serialisation. Takes the state from the host and puts what we need to store.", "id": "35383"}
{"code": "private void tryStartingKbMode(int keyCode){\n  if (keyCode == -1 || addKeyIfLegal(keyCode)) {\n    mInKbMode=true;\n    onValidationChanged(false);\n    updateDisplay(false);\n    mRadialTimePickerView.setInputEnabled(false);\n  }\n}\n", "nl": "Try to start keyboard mode with the specified key.", "id": "45109"}
{"code": "public static Path parsePath(String pathString){\n  return doPath(pathString);\n}\n", "nl": "Parses a single SVG path and returns it as a <code>android.graphics.Path</code> object. An example path is <code>M250,150L150,350L350,350Z</code>, which draws a triangle.", "id": "46531"}
{"code": "@Override public Filter createFilter(){\n  return new IsLessThanOrEqualToExtended();\n}\n", "nl": "Creates the filter.", "id": "6515"}
{"code": "protected FriendsGetRequestsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return response messages from users who have sent a friend request or, if \"suggested\" is set to true, to return a list of suggested friends", "id": "32158"}
{"code": "public void resourceMoved(ISVNRemoteResource resource,ISVNRemoteFolder destinationFolder,String destinationResourceName){\n  Iterator it=listeners.iterator();\n  while (it.hasNext()) {\n    IRepositoryListener listener=(IRepositoryListener)it.next();\n    listener.remoteResourceMoved(resource,destinationFolder,destinationResourceName);\n  }\n}\n", "nl": "A resource has been moved", "id": "28162"}
{"code": "public static boolean isLowSurrogate(int c){\n  return (0xDC00 <= c && c <= 0xDFFF);\n}\n", "nl": "Returns whether the given character is a low surrogate", "id": "5204"}
{"code": "public static float swapFloat(float value){\n  return Float.intBitsToFloat(swapInteger(Float.floatToIntBits(value)));\n}\n", "nl": "Converts a \"float\" value between endian systems.", "id": "25940"}
{"code": "public Value generalCaseExpression(Expression[] exp,Value val){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return a general case expression", "id": "16689"}
{"code": "private void initRefreshData(){\n  for (int i=0; i < 1; i++) {\n    List<String> url=new ArrayList<>();\n    url.add(\"http://qq1234.org/uploads/allimg/140404/3_140404114606_1.jpg\");\n    url.add(\"http://qq1234.org/uploads/allimg/140404/3_140404114555_6.jpg\");\n    mLists.add(url);\n  }\n}\n", "nl": "init refrsh data", "id": "23770"}
{"code": "public void collapseSelectedNodes(){\n  for (Node v=getSelectedNodes().getFirstElement(); v != null; v=getSelectedNodes().getNextElement(v)) {\n    getCollapsedIds().add((Integer)v.getInfo());\n  }\n  updateTree();\n}\n", "nl": "collapse  all selected  nodes", "id": "23256"}
{"code": "public static double toDouble(Object obj){\n  Double result=toDoubleObject(obj);\n  return result == null ? 0.0 : result.doubleValue();\n}\n", "nl": "Converts an <code>Object</code> to a <code>double</code>. Returns zero if conversion is not possible.", "id": "825"}
{"code": "public void emitWithGravity(View emiter,int gravity,int particlesPerSecond,int emitingTime){\n  configureEmiter(emiter,gravity);\n  startEmiting(particlesPerSecond,emitingTime);\n}\n", "nl": "Starts emiting particles from a specific view. If at some point the number goes over the amount of particles availabe on create no new particles will be created", "id": "6567"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_DUNGEON_OPENED_INFO(String worldname1,int num0){\n  return new SM_SYSTEM_MESSAGE(1400360,worldname1,num0);\n}\n", "nl": "%WORLDNAME1 with a %num0 player limit is currently open.", "id": "17422"}
{"code": "public void loading(){\n  mHintView.setVisibility(View.GONE);\n  mProgressBar.setVisibility(View.VISIBLE);\n}\n", "nl": "loading status", "id": "817"}
{"code": "static <T>AnyVal<T> anySome(AnyVal<T> value){\n  return new AnyOptional<>(value,null);\n}\n", "nl": "Returns a new AnyVal that matches a present Optional. The given value is assigned the value of the optional on match.", "id": "55966"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_Instant_A_TO_SELF(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200874,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] absorbed %num0 HP by using [%SkillName].", "id": "56095"}
{"code": "public String process(Item seg) throws ProcessException {\n  return segOnsetCtype(seg,\"f\");\n}\n", "nl": "Performs some processing on the given item.", "id": "23259"}
{"code": "@Override public void undoAction(UndoInterface undoRedoObject){\n  if ((textField != null) && (undoRedoObject != null)) {\n    if (undoRedoObject.getOldValue() instanceof String) {\n      String oldValue=(String)undoRedoObject.getOldValue();\n      textField.setText(oldValue);\n    }\n  }\n}\n", "nl": "Undo action.", "id": "23362"}
{"code": "private double nextAfter(final double t){\n  final double dir=forward ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n  return FastMath.nextAfter(t,dir);\n}\n", "nl": "Get the next number after the given number in the current propagation direction.", "id": "6242"}
{"code": "public boolean hasDiphone(String diphone){\n  return !(missingDiphones != null && missingDiphones.contains(diphone));\n}\n", "nl": "Verify whether a diphone (p1-p2) is in the list of missing diphones.", "id": "1588"}
{"code": "@Override public int hashCode(){\n  return mask != null ? mask.hashCode() : 0;\n}\n", "nl": "Returns ban's hashcode. Based on mask", "id": "52246"}
{"code": "public boolean hasDataRecords(){\n  long blkNum=(Long)getVal(OFFSET_TS_BLOCKID,BIGINT).asJavaVal();\n  return blkNum != NO_SLOT_BLOCKID ? true : false;\n}\n", "nl": "Return true if this file has inserted data records.", "id": "23941"}
{"code": "@Override public final void writeAsciiString(final String s){\n  write(s.getBytes(ASCII));\n}\n", "nl": "Writes an ASCII string the the stream.", "id": "25118"}
{"code": "public static void debugInfo(String msg){\n  debugInfo(\"zhibo\",msg);\n}\n", "nl": "author  hhj TODO", "id": "42987"}
{"code": "public CatchOptions withProbability(double probability){\n  this.probability=probability;\n  return this;\n}\n", "nl": "Set a capture probability before switching balls or the minimum probability for a specific ball", "id": "16115"}
{"code": "public Arguments newArgumentList(Value... values){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return a function argument list consisting of the given values, any of which may itself be an argument list.", "id": "45248"}
{"code": "private double melToLinFreq(double inputFreq){\n  return (700.0 * (Math.pow(10.0,(inputFreq / 2595.0)) - 1.0));\n}\n", "nl": "Compute linear frequency from mel frequency.", "id": "12404"}
{"code": "@Override public void onTxCommit(Transaction tx){\n  if (!tx.isReadOnly() && enableLogging) {\n    LogSeqNum lsn=new CommitRecord(txNum).writeToLog();\n    VanillaDb.logMgr().flush(lsn);\n  }\n}\n", "nl": "Writes a commit record to the log, and then flushes the log record to disk.", "id": "56749"}
{"code": "@Override public int read(){\n  return -1;\n}\n", "nl": "Returns -1 to indicate that the stream is closed.", "id": "20489"}
{"code": "public synchronized void resetTimeLimit(){\n  if (customer == Thread.currentThread()) {\n    doResetTimeLimit();\n    notify();\n  }\n}\n", "nl": "Reset the time limit to 0. Only the thread who initiated the latest time limit can also take it back. If another thread tries to reset the time limit, it is ignored.", "id": "5306"}
{"code": "public ViewsFinder includingFromViews(){\n  this.includeRootView=true;\n  return this;\n}\n", "nl": "Specifies to include from views.", "id": "43923"}
{"code": "public UsersIsAppUserQuery isAppUser(UserActor actor){\n  return new UsersIsAppUserQuery(getClient(),actor);\n}\n", "nl": "Returns information whether a user installed the application.", "id": "18168"}
{"code": "public static void write(File file,CharSequence data,Charset encoding) throws IOException {\n  write(file,data,encoding,false);\n}\n", "nl": "Writes a CharSequence to a file creating the file if it does not exist.", "id": "12321"}
{"code": "public GroupsIsMemberQueryWithExtended userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "User ID.", "id": "31606"}
{"code": "public boolean fire(Context context){\n  return Utils.openIntentSafely(context,action);\n}\n", "nl": "Fires the given action", "id": "870"}
{"code": "public static void load(){\n  taxonomyClassification=ClassificationManager.get(Classification.Taxonomy,true);\n}\n", "nl": "explicitly load the taxonomy classification", "id": "16734"}
{"code": "public boolean do_mhp(){\n  return soot.PhaseOptions.getBoolean(options,\"do-mhp\");\n}\n", "nl": "Perform May-Happen-in-Parallel Analysis -- Perform a May-Happen-in-Parallel analysis. Perform a May-Happen-in-Parallel analysis to assist in  allocating locks.", "id": "33082"}
{"code": "public WidgetsGetCommentsQuery pageId(String value){\n  return unsafeParam(\"page_id\",value);\n}\n", "nl": "Set page id", "id": "40343"}
{"code": "public void close(){\n  if (blk != null) {\n    tx.bufferMgr().unpin(currentBuff);\n    blk=null;\n    currentBuff=null;\n  }\n}\n", "nl": "Closes the header manager, by unpinning the block.", "id": "52621"}
{"code": "public void clear(){\n  oredCriteria.clear();\n  orderByClause=null;\n  distinct=false;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.challenges", "id": "11727"}
{"code": "public static String stringifyException(Throwable e){\n  StringWriter stm=new StringWriter();\n  PrintWriter wrt=new PrintWriter(stm);\n  e.printStackTrace(wrt);\n  wrt.close();\n  return stm.toString();\n}\n", "nl": "Make a string representation of the exception.", "id": "16013"}
{"code": "public boolean forEachKey(TObjectProcedure<K> procedure){\n  return forEach(procedure);\n}\n", "nl": "Executes <tt>procedure</tt> for each key in the map.", "id": "30916"}
{"code": "public int delete_file1(String file_id) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.delete_file(parts[0],parts[1]);\n}\n", "nl": "delete file from storage server", "id": "29416"}
{"code": "@Override public boolean mayIntersect(S2Cell cell){\n  return intersects(cell.getRectBound());\n}\n", "nl": "This test is cheap but is NOT exact. Use Intersects() if you want a more accurate and more expensive test. Note that when this method is used by an S2RegionCoverer, the accuracy isn't all that important since if a cell may intersect the region then it is subdivided, and the accuracy of this method goes up as the cells get smaller.", "id": "44077"}
{"code": "private void notifyListeners(){\n  for (  LegendOptionDataUpdateInterface listener : listenerList) {\n    listener.updateLegendOptionData(data);\n  }\n}\n", "nl": "Notify listeners.", "id": "29780"}
{"code": "@Override public Writer append(CharSequence csq){\n  return this;\n}\n", "nl": "Does nothing - output to <code>/dev/null</code>.", "id": "43917"}
{"code": "public void add(Legion legion){\n  if (legion == null || legion.getLegionName() == null) {\n    return;\n  }\n  if (legionsById.put(legion.getLegionId(),legion) != null) {\n    throw new DuplicateAionObjectException();\n  }\n  if (legionsByName.put(legion.getLegionName().toLowerCase(),legion) != null) {\n    throw new DuplicateAionObjectException();\n  }\n}\n", "nl": "Add Legion to this Container.", "id": "12220"}
{"code": "protected void makeDecisionTablesConsistentWithPersistedVersions(ParsedDeployment parsedDeployment){\n  for (  DecisionTableEntity decisionTable : parsedDeployment.getAllDecisionTables()) {\n    DecisionTableEntity persistedDecisionTable=dmnDeploymentHelper.getPersistedInstanceOfDecisionTable(decisionTable);\n    if (persistedDecisionTable != null) {\n      decisionTable.setId(persistedDecisionTable.getId());\n      decisionTable.setVersion(persistedDecisionTable.getVersion());\n    }\n  }\n}\n", "nl": "Loads the persisted version of each decision table and set values on the in-memory version to be consistent.", "id": "16032"}
{"code": "public static byte[] readPackedSequence(ByteInputBuffer buffer,int query_len,int bits){\n  int size=(query_len * bits + 7) / 8;\n  return buffer.readBytes(size);\n}\n", "nl": "read packed sequence from buffer", "id": "31670"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().isShowGroupsAsConvexHulls();\n}\n", "nl": "this is currently selected?", "id": "18647"}
{"code": "public static void delete(String event){\n  instance.events.remove(event);\n  log(event + \" deleted\");\n}\n", "nl": "Delete event", "id": "47696"}
{"code": "@Override public void close(){\n}\n", "nl": "Close this serializer", "id": "25912"}
{"code": "public void add(String key,Object obj){\n  context.put(key,obj);\n}\n", "nl": "Adds an object to the context.", "id": "56654"}
{"code": "public Vector copy(Vector vec){\n  x=vec.x;\n  y=vec.y;\n  z=vec.z;\n  return this;\n}\n", "nl": "Copies another vector", "id": "15365"}
{"code": "public static String execute(String command){\n  return SubprocessUttility.execute(command);\n}\n", "nl": "Execute a command in the environment", "id": "25794"}
{"code": "public static synchronized void removeInstance(String providerName){\n  LUCENE_SEARCH_PROVIDERS.remove(providerName);\n  Utils.deleteFiles(getProviderPath(providerName));\n}\n", "nl": "Cleanup the existing instance.", "id": "39280"}
{"code": "public void addParameter(ParameterDeclaration node){\n  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the Parameter list.", "id": "33956"}
{"code": "int available(){\n  return numAvailable.get();\n}\n", "nl": "Returns the number of available (i.e. unpinned) buffers.", "id": "15501"}
{"code": "public static void addTimingSplit(String splitLabel){\n  mTimingLogger.addSplit(splitLabel);\n}\n", "nl": "Add timing split, the meaning of this operation is same as standard TimingLogger.", "id": "17327"}
{"code": "@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){\n  super.onMeasure(heightMeasureSpec,heightMeasureSpec);\n}\n", "nl": "Simply return the same measure as height for width", "id": "31753"}
{"code": "public static void sendFCMTokenToServer(Context context,boolean sent){\n  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext());\n  pref.edit().putBoolean(SENT_TOKEN_TO_SERVER,sent).apply();\n}\n", "nl": "Check if token is null", "id": "55087"}
{"code": "public String message(){\n  return message;\n}\n", "nl": "HTTP status message.", "id": "10208"}
{"code": "public AppsSendRequestQuery name(String value){\n  return unsafeParam(\"name\",value);\n}\n", "nl": "Set name", "id": "22631"}
{"code": "public void addBodyDecl(BodyDecl node){\n  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the BodyDecl list.", "id": "3172"}
{"code": "public String formatBytes(long value){\n  return SimpleXYChartUtils.formatBytes((long)(value * chartFactor));\n}\n", "nl": "Formats a bytes value to String. Use this method to make sure the value appears in the same format as used in the chart (tooltip). Useful for updating details area. <br><br><b>Note:</b> This method must be called in the Event Dispatch Thread.", "id": "18148"}
{"code": "public Builder doubleColumnsMathOp(String newColumnName,MathOp mathOp,String... columnNames){\n  return transform(new DoubleColumnsMathOpTransform(newColumnName,mathOp,columnNames));\n}\n", "nl": "Calculate and add a new double column by performing a mathematical operation on a number of existing columns. New column is added to the end.", "id": "9265"}
{"code": "public Builder considerExifParams(boolean considerExifParams){\n  this.considerExifParams=considerExifParams;\n  return this;\n}\n", "nl": "Sets whether ZjbImageLoader will consider EXIF parameters of JPEG image (rotate, flip)", "id": "27708"}
{"code": "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  ConstrainableProxyUtil.verifyConsistentConstraints(constraints,server,methodMappings);\n}\n", "nl": "Verifies that the client constraints for this proxy are consistent with those set on the underlying server ref.", "id": "21960"}
{"code": "@Override public void endElement(String name) throws SAXException {\n  if (saxParser != null) {\n    saxParser.endElement(name);\n  }\n}\n", "nl": "The SAX <code>endElement</code> method. Does nothing.", "id": "1723"}
{"code": "public boolean method_context_counts(){\n  return soot.PhaseOptions.getBoolean(options,\"method-context-counts\");\n}\n", "nl": "Method Context Counts (Totals only) -- Print number of contexts for each method. Causes Paddle to print the number of contexts and number of  context equivalence classes split out by method. Requires  total-context-counts to also be turned on.", "id": "6182"}
{"code": "public Dimension findByApiName(String dimensionName){\n  return apiNameToDimension.get(dimensionName);\n}\n", "nl": "Find a Dimension given a dimension api name.", "id": "17829"}
{"code": "public String toString(){\n  return \"(\" + x + \", \"+ y+ \")\";\n}\n", "nl": "<code>toString</code> returns the string representation of this vector object. The format of the string is such: com.jme.math.Vector2f [X=XX.XXXX, Y=YY.YYYY]", "id": "53009"}
{"code": "private void displayCaughtMsg(PokeModel pokeModel,boolean hasPokemonBeenCaught){\n  if (hasPokemonBeenCaught) {\n    SoundUtils.playPokemonCaughtSound(mContext);\n    TypefaceUtils.displayToast(mContext,pokeModel.getName().toUpperCase() + \" was caught!\",TypefaceUtils.TOAST_SHORT_DURATION);\n  }\n}\n", "nl": "If the Pokemon has been \"caught\" it plays a sound and displays a message to let the user know.", "id": "35444"}
{"code": "@ObjectiveCName(\"add:action:name:event:timeout:\") void add(Topic topic,Actions action,String name,Event event,int timeout){\n  this.add(topic,action,name,event,this,timeout);\n}\n", "nl": "Checks to see if an ack timer already exists in the register for the given name and action. If it does, it clears it, then starts a new one.", "id": "15046"}
{"code": "public final static String formatProtocolVersion(final SaveProtocolVersion version,LineFormatter formatter){\n  if (formatter == null)   formatter=SaveLineFormatter.DEFAULT;\n  return formatter.appendProtocolVersion(null,version).toString();\n}\n", "nl": "Formats a protocol version.", "id": "31931"}
{"code": "@Override public void parseXPointer(String part) throws XNIException {\n  fShortHandPointer=part;\n  fIsFragmentResolved=false;\n}\n", "nl": "The XPointerProcessor takes care of this.  Simply set the ShortHand Pointer here.", "id": "42490"}
{"code": "public synchronized void add(String name,long threadId){\n  if (mFinished) {\n    throw new IllegalStateException(\"Marker added to finished log\");\n  }\n  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));\n}\n", "nl": "Adds a marker to this log with the specified name.", "id": "3270"}
{"code": "public DefaultHibernateSpaceSynchronizationEndpointConfigurer sessionFactory(SessionFactory sessionFactory){\n  this.sessionFactory=sessionFactory;\n  return this;\n}\n", "nl": "Injects the Hibernate SessionFactory to be used with this synchronization endpoint interceptor.", "id": "58721"}
{"code": "@Override TaskDomino<T,R,U> defaultScheduler(){\n  return new TaskDomino<T,R,U>(super.defaultScheduler());\n}\n", "nl": "For unit test only.", "id": "20184"}
{"code": "private static int probe(final int perturb,final int j){\n  return (j << 2) + j + perturb+ 1;\n}\n", "nl": "Compute next probe for collision resolution", "id": "30654"}
{"code": "public void delete(String id){\n  log.debug(\"Request to delete PetCategory : {}\",id);\n  petCategoryRepository.delete(UUID.fromString(id));\n}\n", "nl": "Delete the  petCategory by id.", "id": "53377"}
{"code": "public boolean isNextEvolutionOf(Pokemon otherPokemon){\n  for (  Pokemon evolution : otherPokemon.evolutions) {\n    if (number == evolution.number) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks if this Pokemon is the direct evolution of otherPokemon. Example: - Charmeleon.isInNextEvolution(Charmander) returns true - Charizard.isInNextEvolution(Charmander) returns false (it has to be the NEXT evolution)", "id": "13212"}
{"code": "public static boolean shoudUseLightForegroundOnBackground(int backgroundColor){\n  return getContrastForColor(backgroundColor) >= CONTRAST_LIGHT_ITEM_THRESHOLD;\n}\n", "nl": "Check whether lighter or darker foreground elements (i.e. text, drawables etc.) should be used depending on the given background color.", "id": "44888"}
{"code": "public boolean isRasterSymbol(){\n  return rasterSymbol;\n}\n", "nl": "Checks if is raster symbol.", "id": "37925"}
{"code": "public void doStart(){\n  try {\n    if (gigaSpace == null) {\n      initSpace();\n    }\n    super.doStart();\n  }\n catch (  Exception e) {\n    Log.getLog().warn(\"Problem initialising session ids\",e);\n    throw new IllegalStateException(e);\n  }\n}\n", "nl": "Start up the id manager.", "id": "31341"}
{"code": "public final boolean canGetBoolean(String field){\n  Column col=getColumn(field);\n  return (col == null ? false : col.canGetBoolean());\n}\n", "nl": "Check if the given data field can return primitive <code>boolean</code> values.", "id": "10374"}
{"code": "private void layout(int width,int height){\n  int itemsWidth=width - 2 * PADDING;\n  itemsLayout.layout(0,0,itemsWidth,height);\n}\n", "nl": "Sets layouts width and height", "id": "28699"}
{"code": "public void parse(){\n  method_info mi;\n  int i;\n  for (i=0; i < methods_count; i++) {\n    mi=methods[i];\n    mi.instructions=parseMethod(mi);\n  }\n}\n", "nl": "For every method, this calls parseMethod, storing the list of Instructions in the method_info object, and also constructs the corresponding CFG.", "id": "7424"}
{"code": "public void shutdown(){\n  Iterator<JmsSender> it=jmsSenders.iterator();\n  while (it.hasNext()) {\n    it.next().shutdown();\n  }\n}\n", "nl": "Shuts down all JmsSenders.", "id": "24754"}
{"code": "public Boolean isTriggerNotifyTemplate(){\n  return triggerNotifyTemplate;\n}\n", "nl": "Should notify template be triggered on replication event.", "id": "48697"}
{"code": "private void checkIndex(final int index) throws MathIllegalArgumentException {\n  MathUtils.checkRangeInclusive(index,0,getDimension() - 1);\n}\n", "nl": "Check whether an index is valid.", "id": "50275"}
{"code": "public boolean canSetLong(){\n  return canSet(long.class);\n}\n", "nl": "Indicates if convenience set method can be called without an exception being thrown for the long type.", "id": "50171"}
{"code": "public void addColumn(String name,Class type){\n  throw new UnsupportedOperationException();\n}\n", "nl": "Unsupported by default.", "id": "58677"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.EUCLIDEAN + \";\");\n}\n", "nl": "action to be performed", "id": "56646"}
{"code": "public static boolean writeFile(String filePath,InputStream stream){\n  return writeFile(filePath,stream,false);\n}\n", "nl": "write file, the bytes will be written to the begin of the file", "id": "52254"}
{"code": "public static void debugInfo(String msg){\n  debugInfo(DEFAULT_TAG,msg);\n}\n", "nl": "author  hhj TODO", "id": "27720"}
{"code": "public MessagesGetLongPollHistoryQuery ts(Integer value){\n  return unsafeParam(\"ts\",value);\n}\n", "nl": "Last value of the \"ts\" parameter returned from the Long Poll server or by using messages.getLongPollServer method.", "id": "47030"}
{"code": "@Override public boolean supportsFifoOrder(){\n  return true;\n}\n", "nl": "equality matching preserves fifo order", "id": "53321"}
{"code": "@Override public void pluginInitialize(){\n  this.initTelephonyReceiver();\n}\n", "nl": "Sets the context of the Command. This can then be used to do things like get file paths associated with the Activity.", "id": "29140"}
{"code": "public boolean hasNext(){\n  try {\n    return !error && dataIndexReader.getPosition() < dataIndexReader.length();\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n    return false;\n  }\n}\n", "nl": "Returns <tt>true</tt> if the iteration has more elements. (In other words, returns <tt>true</tt> if <tt>next</tt> would return an element rather than throwing an exception.)", "id": "1870"}
{"code": "private static ScoutWidget[] removeGuidelines(ScoutWidget[] list){\n  ArrayList<ScoutWidget> al=new ArrayList<>();\n  for (  ScoutWidget aList : list) {\n    if (aList.mConstraintWidget instanceof Guideline) {\n      continue;\n    }\n    al.add(aList);\n  }\n  return al.toArray(new ScoutWidget[al.size()]);\n}\n", "nl": "Filter ScoutWidget's of GuideLine objects", "id": "25678"}
{"code": "public HumanTime ms(int n){\n  delta+=Math.abs(n);\n  return this;\n}\n", "nl": "Adds n milliseconds to the time delta.", "id": "38765"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_INTERVAL_ME_TO_SELF(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200350,num0,skillname);\n}\n", "nl": "You reduced your flight time by %num0 by using [%SkillName].", "id": "27340"}
{"code": "public void init$Children(){\n  children=new ASTNode[3];\n  setChild(new Opt(),1);\n  setChild(new List(),2);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "874"}
{"code": "protected PollsDeleteVoteQuery answerId(int value){\n  return unsafeParam(\"answer_id\",value);\n}\n", "nl": "Answer ID.", "id": "21692"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GUILD_DISPERSE_TIME(String durationday0){\n  return new SM_SYSTEM_MESSAGE(1300308,durationday0);\n}\n", "nl": "Time remaining until disbanding: %DURATIONDAY0", "id": "20744"}
{"code": "public void select() throws RemoteException {\n  try {\n    if (_spaceMode == SpaceMode.NONE) {\n      _electManager.elect();\n    }\n else {\n      _electManager.reelect();\n    }\n  }\n catch (  ActiveElectionException e) {\n    throw new RemoteException(_spaceMember + \" failed to elect Primary space\",e);\n  }\ncatch (  InterruptedException ex) {\n  }\n}\n", "nl": "start the primary election manager", "id": "3688"}
{"code": "private void tryScrollBackToTopAbortRefresh(){\n  tryScrollBackToTop();\n}\n", "nl": "just make easier to understand", "id": "26628"}
{"code": "protected TimelineReader loadAudioTimeline(String fileName) throws IOException, MaryConfigurationException {\n  return new TimelineReader(fileName);\n}\n", "nl": "Load audio timeline from file", "id": "10698"}
{"code": "@Override public boolean isEmpty(){\n  return mSize <= 0;\n}\n", "nl": "Return true if the array map contains no items.", "id": "33383"}
{"code": "public final int yylength(){\n  return zzMarkedPos - zzStartRead;\n}\n", "nl": "Returns the length of the matched text region.", "id": "38744"}
{"code": "public void releaseScan() throws SAException {\n  if (_SAiter != null)   _SAiter.close();\n}\n", "nl": "release SLHolder for this scan", "id": "47803"}
{"code": "public void createSets(boolean bEvenly,double dPartOfTheCorpus){\n  createSets(bEvenly,dPartOfTheCorpus,false);\n}\n", "nl": "Initializes the document sets using a portion of the files of the base directory subtree, either in a stratified or not stratified manner. Assumes non-flat structure.", "id": "56477"}
{"code": "public void java_lang_ClassLoader_findLoadedClass(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  helper.assignObjectTo(returnVar,Environment.v().getClassObject());\n}\n", "nl": "Finds the class with the given name if it had been previously loaded through this class loader. NOTE: assuming all classes. protected final native java.lang.Class findLoadedClass(java.lang.String);", "id": "32920"}
{"code": "public void showPeekPromo(){\n  getPeekPromoControl().show();\n}\n", "nl": "Shows the peek promo.", "id": "11792"}
{"code": "public static String toString(byte[] input,String encoding) throws IOException {\n  return new String(input,Charsets.toCharset(encoding));\n}\n", "nl": "Get the contents of a <code>byte[]</code> as a String using the specified character encoding. <p> Character encoding names can be found at <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.", "id": "26201"}
{"code": "protected void animateToState(boolean checked){\n  if (mProcessAnimator == null) {\n    return;\n  }\n  if (mProcessAnimator.isRunning()) {\n    mProcessAnimator.cancel();\n  }\n  mProcessAnimator.setDuration(mAnimationDuration);\n  if (checked) {\n    mProcessAnimator.setFloatValues(mProcess,1f);\n  }\n else {\n    mProcessAnimator.setFloatValues(mProcess,0);\n  }\n  mProcessAnimator.start();\n}\n", "nl": "processing animation", "id": "47"}
{"code": "public Builder preProcessor(BitmapProcessor preProcessor){\n  this.preProcessor=preProcessor;\n  return this;\n}\n", "nl": "Sets bitmap processor which will be process bitmaps before they will be cached in memory. So memory cache will contain bitmap processed by incoming preProcessor.<br /> Image will be pre-processed even if caching in memory is disabled.", "id": "48120"}
{"code": "public void addParameter(ParameterDeclaration node){\n  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the Parameter list.", "id": "17756"}
{"code": "@Provides @Singleton @ScannerZooKeeper CuratorFramework provideScannerZooKeeperConnection(@Global CuratorFramework curator){\n  return withComponentNamespace(curator,\"scanner\");\n}\n", "nl": "Provide ZooKeeper namespaced to scanner data.", "id": "14915"}
{"code": "private boolean isPrivateAndNonPrimitive(Field field){\n  return Modifier.isPrivate(field.getModifiers()) && !field.getType().isPrimitive();\n}\n", "nl": "Judge the field is a private non primitive field or not.", "id": "6781"}
{"code": "public synchronized void resetBookInfoList(){\n  bookInfoList=null;\n}\n", "nl": "Resets a to-many relationship, making the next get call to query for a fresh result.", "id": "49758"}
{"code": "public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_PICKUP_ITEM_ALL_ACCEPT_HIM(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1300216,value0,value1);\n}\n", "nl": "%0's request for permission to pick up %1 was approved.", "id": "5055"}
{"code": "@Override public void attributeSelection(String field){\n  if (this.spinner != null) {\n    this.spinner.setEnabled(field == null);\n  }\n}\n", "nl": "Attribute selection.", "id": "11754"}
{"code": "public SimpleStringProperty keyProperty(){\n  return this.key;\n}\n", "nl": "The key property.", "id": "32927"}
{"code": "@Subscribe(threadMode=ThreadMode.MAIN) public void onEvent(PokestopsEvent event){\n  setPokestopsMarkers(event);\n}\n", "nl": "Called whenever a PokestopsEvent is posted to the bus. Posted when new pokestops are found.", "id": "13991"}
{"code": "public Map.Entry<K,V> floorEntry(K key){\n  return getNear(key,LT | EQ);\n}\n", "nl": "Returns a key-value mapping associated with the greatest key less than or equal to the given key, or <tt>null</tt> if there is no such key. The returned entry does <em>not</em> support the <tt>Entry.setValue</tt> method.", "id": "31382"}
{"code": "public void addBodyDecl(BodyDecl node){\n  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the BodyDecl list.", "id": "50586"}
{"code": "protected void shareBySystem(){\n  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_SYSTEM,getShareData(ShareConstant.SHARE_CHANNEL_SYSTEM),ShareConstant.REQUEST_CODE);\n}\n", "nl": "share more", "id": "35522"}
{"code": "public void addFilter(){\n  if (filterConfig != null) {\n    FilterName filterName=filterConfig.getFilterConfiguration();\n    setFilterParameter(null,filterName.getParameter(0));\n  }\n}\n", "nl": "Adds the filter.", "id": "39316"}
{"code": "public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){\n  FileModelDao.createTable(db,ifNotExists);\n}\n", "nl": "Creates underlying database table using DAOs.", "id": "15145"}
{"code": "@ColorInt private int extractIntAttribute(Context context,int[] attribute){\n  TypedValue typedValue=new TypedValue();\n  TypedArray a=context.obtainStyledAttributes(typedValue.data,attribute);\n  int color=a.getColor(0,0);\n  a.recycle();\n  return color;\n}\n", "nl": "Extracts the drawable of the passing Context's theme", "id": "29585"}
{"code": "public VideoGetQuery videos(String... value){\n  return unsafeParam(\"videos\",value);\n}\n", "nl": "Video IDs", "id": "25834"}
{"code": "@SuppressWarnings(\"unused\") public void hideBackButton(){\n  backButton.setVisibility(View.INVISIBLE);\n  skipButton.setVisibility(View.GONE);\n}\n", "nl": "Hides any back button", "id": "5845"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATKDrain_Instant_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201023,skillcaster,num0,skilltarget,skillname);\n}\n", "nl": "[%SkillCaster] inflicted %num0 damage on [%SkillTarget] by using [%SkillName].", "id": "47147"}
{"code": "public int compare(File file1,File file2){\n  long result=file1.lastModified() - file2.lastModified();\n  if (result < 0) {\n    return -1;\n  }\n else   if (result > 0) {\n    return 1;\n  }\n else {\n    return 0;\n  }\n}\n", "nl": "Compare the last the last modified date/time of two files.", "id": "38827"}
{"code": "protected AdsGetSuggestionsQuery section(AdsGetSuggestionsSection value){\n  return unsafeParam(\"section\",value);\n}\n", "nl": "Section, suggestions are retrieved in.", "id": "12278"}
{"code": "public void putObject(String key,Object obj,Gson gson){\n  checkForNullKey(key);\n  putString(key,gson.toJson(obj));\n}\n", "nl": "Put ObJect any type into SharedPrefrences with 'key' and save", "id": "44832"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_COMBINE_ITEM(String value0){\n  return new SM_SYSTEM_MESSAGE(1300788,value0);\n}\n", "nl": "You have crafted %0.", "id": "14375"}
{"code": "public void translate(double x,double y){\n  this.translation.x+=x;\n  this.translation.y+=y;\n}\n", "nl": "Translates the camera the given amount along the x and y axes.", "id": "48137"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GUILD_INVITE_HE_REJECTED_INVITATION(String value0){\n  return new SM_SYSTEM_MESSAGE(1300259,value0);\n}\n", "nl": "%0 has declined your Legion invitation.", "id": "56366"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_ME_TO_B(String skillcaster,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200521,skillcaster,skilltarget,skillname);\n}\n", "nl": "[%SkillCaster] has caused [%SkillTarget] to recover HP over time by using [%SkillName].", "id": "51642"}
{"code": "public void checkConstraints() throws IOException {\n}\n", "nl": "Checks if the constraints whose checking was delayed when this instance was decoded, if any, are satisfied. If the instance was not decoded, but directly constructed, this method does nothing.", "id": "28857"}
{"code": "public AccountSetOnlineQuery voip(Boolean value){\n  return unsafeParam(\"voip\",value);\n}\n", "nl": "Set voip", "id": "38981"}
{"code": "public void addStmt(Stmt node){\n  List<Stmt> list=(parent == null || state == null) ? getStmtListNoTransform() : getStmtList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the Stmt list.", "id": "41063"}
{"code": "public static String toString(Reader input) throws IOException {\n  StringBuilderWriter sw=new StringBuilderWriter();\n  copy(input,sw);\n  return sw.toString();\n}\n", "nl": "Get the contents of a <code>Reader</code> as a String. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedReader</code>.", "id": "46438"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set showLabels=\");\n  boolean showLabels=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  ClusterViewer viewer=getViewer();\n  viewer.setShowLabels(showLabels);\n}\n", "nl": "parses the given command and executes it", "id": "23494"}
{"code": "public void convertInputsToItt() throws TransformerConfigurationException {\n  Transformer transformer=TtmlUtils.createTtmlTransformer(TTML_TO_ITT_TRANSFORMATION);\n  convertedItts=ttmlTts.stream().map(null).collect(Collectors.toCollection(null));\n  mergedItt=convertedItts.get(0);\n}\n", "nl": "Converts all TTML input documents to corresponding iTT.", "id": "43221"}
{"code": "private void updateHalfDayTogglesState(int halfDay){\nswitch (halfDay) {\ncase HALF_DAY_1:\n    mFirstHalfDayToggle.setTextColor(mHalfDayToggleSelectedColor);\n  mSecondHalfDayToggle.setTextColor(mHalfDayToggleUnselectedColor);\nbreak;\ncase HALF_DAY_2:\nmSecondHalfDayToggle.setTextColor(mHalfDayToggleSelectedColor);\nmFirstHalfDayToggle.setTextColor(mHalfDayToggleUnselectedColor);\nbreak;\n}\n}\n", "nl": "Update the indicator of the toggle buttons to show the given half-day as selected.", "id": "43751"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GATHER_FAIL_5_FORESTRY(String value0){\n  return new SM_SYSTEM_MESSAGE(1330025,value0);\n}\n", "nl": "You have failed to acquire %0.", "id": "5064"}
{"code": "@PostConstruct public void init(){\n  listenerContainer=cacheRegistrationService.registerToAllTags(this,numEvaluationThreads);\n}\n", "nl": "Registers to tag caches.", "id": "58787"}
{"code": "public void zoomIn(){\n  this.scale*=0.5;\n}\n", "nl": "Zooms in the camera.", "id": "22643"}
{"code": "public boolean isEncountered(){\n  if (encountered == null) {\n    return false;\n  }\n  return encountered;\n}\n", "nl": "Encounter check", "id": "12683"}
{"code": "private void error(Element element,String message,Object... args){\n  if (args.length > 0) {\n    message=String.format(message,args);\n  }\n  processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,message,element);\n}\n", "nl": "compiler output method,when compiler occurs exception.should be notice here.", "id": "21209"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_INTERVAL_TO_B(String skilltarget,int num0){\n  return new SM_SYSTEM_MESSAGE(1201074,skilltarget,num0);\n}\n", "nl": "[%SkillTarget] blocked %num0 damage.", "id": "20793"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "35638"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_ABSORBED_MY(String skillcaster){\n  return new SM_SYSTEM_MESSAGE(1210005,skillcaster);\n}\n", "nl": "You absorbed [%SkillCaster]'s magic.", "id": "9029"}
{"code": "public int size(){\n  if (mListeners != null) {\n    return mListeners.size();\n  }\n else {\n    return 0;\n  }\n}\n", "nl": "Gets the number of underlying listener objects.", "id": "45019"}
{"code": "public static float calculateLeft(float top,float right,float bottom,float targetAspectRatio){\n  final float height=bottom - top;\n  final float left=right - (targetAspectRatio * height);\n  return left;\n}\n", "nl": "Calculates the x-coordinate of the left edge given the other sides of the rectangle and an aspect ratio.", "id": "46866"}
{"code": "@Override public String toString(){\n  return displayString;\n}\n", "nl": "To string.", "id": "16783"}
{"code": "public final void yyclose() throws java.io.IOException {\n  zzAtEOF=true;\n  zzEndRead=zzStartRead;\n  if (zzReader != null)   zzReader.close();\n}\n", "nl": "Closes the input stream.", "id": "358"}
{"code": "public Rotation revert(){\n  return new Rotation(-q0,q1,q2,q3,false);\n}\n", "nl": "Revert a rotation. Build a rotation which reverse the effect of another rotation. This means that if r(u) = v, then r.revert(v) = u. The instance is not changed.", "id": "7882"}
{"code": "public FriendsGetOnlineQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of friends to return.", "id": "46976"}
{"code": "public boolean isOverwrite(){\n  return overwrite;\n}\n", "nl": "Checks if is overwrite.", "id": "52876"}
{"code": "public boolean isGuestEnabled(){\n  try {\n    return mService.isGuestEnabled();\n  }\n catch (  RemoteException re) {\n    Log.w(TAG,\"Could not retrieve guest enabled state\");\n    return false;\n  }\n}\n", "nl": "Checks if a guest user is enabled for this device.", "id": "25508"}
{"code": "public void hold(int key,int duration) throws InterruptedException {\n  press(key);\n  if (duration >= 0) {\n    Thread.sleep(duration);\n  }\n  release(key);\n}\n", "nl": "Hold a key for a certain duration", "id": "55423"}
{"code": "public void removeObserver(final FileAlterationObserver observer){\n  if (observer != null) {\n    while (observers.remove(observer)) {\n    }\n  }\n}\n", "nl": "Remove a file system observer from this monitor.", "id": "20266"}
{"code": "public VideoReorderAlbumsQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "ID of the user or community that owns the albums..", "id": "43125"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GUILD_CHANGE_MEMBER_RANK_DONE_1_GUILD_MASTER(String value0){\n  return new SM_SYSTEM_MESSAGE(1300266,value0);\n}\n", "nl": "%0 has become the Legion Brigade General.", "id": "36762"}
{"code": "public AuthenticationToken removeAuthenticationToken(String host,String realm){\n  return this.authenticationTokens.remove(host.concat(realm));\n}\n", "nl": "Removes the authentication token.", "id": "19609"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  execute(\"zoom selected;\");\n}\n", "nl": "parses the given command and executes it", "id": "57126"}
{"code": "public boolean isUseDefinedMargin(){\n  return mUseDefinedMargin;\n}\n", "nl": "Getter returning true if we'll use the defined margin value, false if we'll use the current distance between anchors as a margin.", "id": "32340"}
{"code": "public Object clone(){\n  Object retval=super.clone();\n  return retval;\n}\n", "nl": "Make an exact copy of this step, make sure to explicitly copy Collections etc.", "id": "53833"}
{"code": "public boolean isUptoDate(){\n  return uptodate;\n}\n", "nl": "is viewer uptodate?", "id": "20545"}
{"code": "@ManagedOperation(description=\"Runs task performed on every server restart (does nothing so far)\") public void refreshAfterStandardRestart(){\n}\n", "nl": "Operations that are run after every server restart, fixing inconsistencies that could be due to the shutdown.", "id": "52472"}
{"code": "public void notifyUnlockInput(){\n  if (locked) {\nsynchronized (directorListeners) {\n      IDirectorListener[] listeners=directorListeners.toArray(new IDirectorListener[directorListeners.size()]);\n      for (      IDirectorListener directorListener : listeners) {\n        if (directorListener != this)         directorListener.unlockUserInput();\n      }\n    }\n  }\n  locked=false;\n}\n", "nl": "notify listeners to allow user input", "id": "55983"}
{"code": "public void stopScrolling(){\n  scroller.stopScrolling();\n}\n", "nl": "Stops scrolling", "id": "58625"}
{"code": "public AemTags addTag(String namespace,String pathAndTagName) throws DeniedTagException {\n  final String textToSend;\n  if (StringUtils.isNotBlank(namespace)) {\n    textToSend=namespace + NAMESPACE_SEPARATOR + pathAndTagName;\n  }\n else {\n    textToSend=pathAndTagName;\n  }\n  return addTag(textToSend);\n}\n", "nl": "Adds new tag. Parameters are case sensitive.", "id": "57143"}
{"code": "public static boolean isBypass(final MultivaluedMap<String,String> headers){\n  return BYPASS_HEADER_VALUE.equals(headers.getFirst(BYPASS_HEADER_NAME));\n}\n", "nl": "Check if the request header is a bypass header.", "id": "8131"}
{"code": "public void endObject(O object){\n}\n", "nl": "Indicates the end of an object in the JSON input. This method will be called after reading the closing curly bracket character (<code>'}'</code>).", "id": "36603"}
{"code": "void onException(JMSException jE){\n  if (errorHandler != null) {\n    if (_logger.isLoggable(Level.FINE)) {\n      _logger.fine(\"calling ExceptionListener.onException(): \" + cnxKey);\n    }\n    errorHandler.onException(jE);\n  }\n else {\n    if (_logger.isLoggable(Level.FINE)) {\n      _logger.fine(\"ExceptionListener is not set for connection: \" + cnxKey);\n    }\n  }\n}\n", "nl": "Passes an asynchronous exception to the exception listener, if any.", "id": "6779"}
{"code": "public WallPostQuery post(UserActor actor){\n  return new WallPostQuery(getClient(),actor);\n}\n", "nl": "Adds a new post on a user wall or community wall. Can also be used to publish suggested or scheduled posts.", "id": "15760"}
{"code": "public static final void convertColor(Color color,float[] destination){\n  color.getRGBComponents(destination);\n}\n", "nl": "Places the RGBA values from the given Color object into the destination array.", "id": "12204"}
{"code": "private Unit insertGotoAfter(Unit node,Unit target){\n  Unit newGoto=Jimple.v().newGotoStmt(target);\n  body.getUnits().insertAfter(newGoto,node);\n  return newGoto;\n}\n", "nl": "inserts a Jimple<code>Goto</code> to <code> target, directly after <code>node</code> in the <code>unitChain</code> of the body.<br> As we use <code>JGoto</code> the chain must contain Jimple-stmts.", "id": "22454"}
{"code": "private boolean isViewWasReused(){\n  String currentCacheKey=engine.getLoadingUriForView(imageAware);\n  return !memoryCacheKey.equals(currentCacheKey);\n}\n", "nl": "Checks whether memory cache key (image URI) for current ImageAware is actual", "id": "15480"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_ENEMY_ATTACK(int num1,String value0){\n  return new SM_SYSTEM_MESSAGE(1210006,num1,value0);\n}\n", "nl": "You received %num1 damage from %0.", "id": "41042"}
{"code": "public Quaternion normalize(){\n  final double norm=getNorm();\n  if (norm < Precision.SAFE_MIN) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.NORM,norm);\n  }\n  return new Quaternion(q0 / norm,q1 / norm,q2 / norm,q3 / norm);\n}\n", "nl": "Computes the normalized quaternion (the versor of the instance). The norm of the quaternion must not be zero.", "id": "34060"}
{"code": "public static String hexToStringNoException(final String data){\n  try {\n    return ConversionUtils.arrayToString(Hex.decodeHex(data.toCharArray()));\n  }\n catch (  DecoderException e) {\n    return \"[invalid hex]\";\n  }\n}\n", "nl": "Converts the given HEX string into a plain string.", "id": "50822"}
{"code": "public static PlaceholderFragment newInstance(int sectionNumber){\n  PlaceholderFragment fragment=new PlaceholderFragment();\n  Bundle args=new Bundle();\n  args.putInt(ARG_SECTION_NUMBER,sectionNumber);\n  fragment.setArguments(args);\n  return fragment;\n}\n", "nl": "Returns a new instance of this fragment for the given section number.", "id": "30163"}
{"code": "private void initBulkProcessor(){\n  this.bulkProcessor=BulkProcessor.builder(client,createBulkProcessorListener()).setName(bulkProcessorName).setBulkActions(bulkActions).setBulkSize(new ByteSizeValue(bulkSize,ByteSizeUnit.GB)).setFlushInterval(TimeValue.timeValueSeconds(flushInterval)).setConcurrentRequests(concurrent).build();\n  log.debug(\"initBulkSettings() - BulkProcessor created.\");\n}\n", "nl": "Instantiate a BulkProcessor for batch writings.", "id": "58778"}
{"code": "public void close(){\n  currentPage.close();\n  dirsMayBeUpdated=null;\n}\n", "nl": "Closes the directory page.", "id": "52150"}
{"code": "@Override public boolean isDataPresent(){\n  return true;\n}\n", "nl": "Checks if is data present.", "id": "1563"}
{"code": "public AccountSaveProfileInfoQuery cancelRequestId(Integer value){\n  return unsafeParam(\"cancel_request_id\",value);\n}\n", "nl": "Id of the name change request to be canceled. If this paremeter is sent, all the others are ignored.", "id": "3846"}
{"code": "@Nullable public Interface resolveInterface(String inPackage,String name){\n  for (  String cand : nameCandidates(inPackage,name)) {\n    Interface endpointInterface=lookupInterface(cand);\n    if (endpointInterface != null) {\n      return endpointInterface;\n    }\n  }\n  return null;\n}\n", "nl": "Resolves a interface by a partial name within a given package context, following PB (== C++) conventions.", "id": "34776"}
{"code": "public static TestDimensionConfig buildStandardLuceneDimensionConfig(TestApiDimensionName dimensionName){\n  return new TestDimensionConfig(dimensionName,dimensionName.asName(),getDefaultKeyValueStore(dimensionName),LuceneSearchProviderManager.getInstance(dimensionName.asName()),getDefaultFields(),getDefaultFields());\n}\n", "nl": "Build a standard-config Lucene-backed dimension config.", "id": "21317"}
{"code": "private Record emptyRecord(Key key){\n  return new RecordImpl(key,Iterators.<Map.Entry<UUID,Compaction>>emptyIterator(),Iterators.<Map.Entry<UUID,Change>>emptyIterator(),Iterators.<RecordEntryRawMetadata>emptyIterator());\n}\n", "nl": "Helper method to return a record with no rows.", "id": "45650"}
{"code": "private static Comparable<?> castToComparable(Object obj){\n  try {\n    return (Comparable<?>)obj;\n  }\n catch (  ClassCastException cce) {\n    throw new IllegalArgumentException(\"Type \" + obj.getClass() + \" doesn't implement Comparable, Serialization mode might be different than \"+ StorageType.OBJECT+ \".\",cce);\n  }\n}\n", "nl": "Cast the object to Comparable otherwise throws an IllegalArgumentException exception", "id": "18083"}
{"code": "public GroupsGetQuery filter(List<GroupsGetFilter> value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Types of communities to return", "id": "54376"}
{"code": "@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n  PlatformLogicalVersion version=LRMIInvocationContext.getEndpointLogicalVersion();\n  readExternal(in,version);\n}\n", "nl": "Required for Externalizable", "id": "34377"}
{"code": "void generateLocalizedFilesWithoutLocaleMapping(Repository repository,FileMatch sourceFileMatch) throws CommandException {\n  logger.debug(\"Generate localized files (without locale mapping)\");\n  for (  RepositoryLocale repositoryLocale : repositoryLocalesWithoutRootLocale.values()) {\n    LocalizedAssetBody localizedAsset=getLocalizedAsset(repository,sourceFileMatch,repositoryLocale,null);\n    writeLocalizedAssetToTargetDirectory(localizedAsset,sourceFileMatch);\n  }\n}\n", "nl": "Default generation, uses the locales defined in the repository to generate the localized files.", "id": "55700"}
{"code": "public static void logError(Throwable e,boolean invalidRowsPresent){\n  if (!invalidRowsPresent) {\n    invalidRowsPresent=true;\n    LOGGER.error(e,CarbonCommonConstants.FILTER_INVALID_MEMBER + e.getMessage());\n  }\n}\n", "nl": "This method will print the error log.", "id": "12727"}
{"code": "public double optDouble(String key,double defaultValue){\n  LazyNode token=getOptionalFieldToken(key);\n  if (token == null)   return defaultValue;\n  if (token.type == LazyNode.VALUE_NULL)   return defaultValue;\n  return token.getDoubleValue(cbuf);\n}\n", "nl": "Returns the double value stored in this object for the given key. Returns the default value if there is no such key.", "id": "35389"}
{"code": "@Override public void onStart(){\n  super.onStart();\n  setData();\n}\n", "nl": "Every time when the Fragment starts setData function is called to set all necessary details.", "id": "34328"}
{"code": "public void my_readFromParcel(Parcel in){\n  x=in.readFloat();\n  y=in.readFloat();\n}\n", "nl": "Set the point's coordinates from the data stored in the specified parcel. To write a point to a parcel, call writeToParcel(). Provided to support older Android devices.", "id": "24178"}
{"code": "private static boolean isKDE(){\n  return System.getenv(\"KDE_SESSION_VERSION\") != null;\n}\n", "nl": "Checks if we are currently running under KDE desktop.", "id": "19661"}
{"code": "public static void cleanup(){\n  Helper.delete(W.create().and(\"expired\",System.currentTimeMillis(),W.OP_LT),AuthToken.class);\n}\n", "nl": "cleanup the expired token", "id": "49726"}
{"code": "public static synchronized void removeInstance(String storeName){\n  MAP_STORES.remove(storeName);\n}\n", "nl": "Delete the named singleton instance.", "id": "1349"}
{"code": "public Builder stringRemoveWhitespaceTransform(String columnName){\n  return transform(new RemoveWhiteSpaceTransform(columnName));\n}\n", "nl": "Remove all whitespace characters from the values in the specified String column", "id": "28164"}
{"code": "protected MessagesGetLastActivityQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "User ID.", "id": "9043"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FREE_EXPERIENCE_CHARACTER_CANT_OPEN_PERSONAL_SHOP(String value0){\n  return new SM_SYSTEM_MESSAGE(1400399,value0);\n}\n", "nl": "Characters under level %0 who are using a free trial cannot open a private store.", "id": "39930"}
{"code": "public Value toLowerCase(Value str){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return the upper case of the given value.", "id": "14757"}
{"code": "public boolean isError(){\n  return state == State.ERROR;\n}\n", "nl": "Check if error state is shown", "id": "12560"}
{"code": "public DocsEditQuery tags(List<String> value){\n  return unsafeParam(\"tags\",value);\n}\n", "nl": "Document tags.", "id": "18353"}
{"code": "public Date time(){\n  return getCalendar().toIso(dateTimeUnit).toJdkDate();\n}\n", "nl": "Returns the current date the cal.", "id": "55575"}
{"code": "public Iterator nodes(){\n  return m_nodeTuples.iterator(nodeRows());\n}\n", "nl": "Get an iterator over all nodes in the graph.", "id": "54794"}
{"code": "public void refreshPanel(){\n  revalidate();\n  repaint();\n}\n", "nl": "Refresh panel.", "id": "31315"}
{"code": "public void rectValueToPixelHorizontal(RectF r,float phaseY){\n  r.left*=phaseY;\n  r.right*=phaseY;\n  mMatrixValueToPx.mapRect(r);\n  mViewPortHandler.getMatrixTouch().mapRect(r);\n  mMatrixOffset.mapRect(r);\n}\n", "nl": "Transform a rectangle with all matrices with potential animation phases.", "id": "38201"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sleep_END_A_TO_B(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200908,skilltarget);\n}\n", "nl": "[%SkillTarget] woke up.", "id": "54174"}
{"code": "public void clearDelimiters(){\n  smDelims=null;\n}\n", "nl": "Clears list of delimiters determined.", "id": "58307"}
{"code": "protected boolean lockJobIfNeeded(){\n  try {\n    if (job.isExclusive()) {\n      processEngineConfiguration.getCommandExecutor().execute(new LockExclusiveJobCmd(job));\n    }\n  }\n catch (  Throwable lockException) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"Could not lock exclusive job. Unlocking job so it can be acquired again. Catched exception: \" + lockException.getMessage());\n    }\n    unacquireJob();\n    return false;\n  }\n  return true;\n}\n", "nl": "Returns true if lock succeeded, or no lock was needed. Returns false if locking was unsuccessfull.", "id": "23195"}
{"code": "private boolean initHeader(int appId,String channel){\n  if (!TcHeadrHandle.isInit()) {\n    return TcHeadrHandle.initHeader(mContext,appId,channel);\n  }\n  return false;\n}\n", "nl": "init header", "id": "31904"}
{"code": "public boolean hasWhereClause(){\n  if (_expression == null)   return false;\n  String trimmed=_expression.trim();\n  return !(trimmed.length() == 0 || ORDER.matcher(trimmed).matches() || GROUP.matcher(trimmed).matches());\n}\n", "nl": "Returns true if the query has a where clause. Used in partial SQLQuery", "id": "34969"}
{"code": "@Override public List<WebElement> findElementsByXPath(String xPath){\n  return ((FindsByXPath)super.getWrappedDriver()).findElementsByXPath(xPath);\n}\n", "nl": "Finds elements by xpath.", "id": "27278"}
{"code": "@Override public void redoAction(UndoInterface undoRedoObject){\n  if ((attributeComboBox != null) && (undoRedoObject != null)) {\n    if (undoRedoObject.getNewValue() instanceof String) {\n      String newValue=(String)undoRedoObject.getNewValue();\n      attributeComboBox.setSelectedItem(newValue);\n    }\n  }\n}\n", "nl": "Redo action.", "id": "43639"}
{"code": "@Override public synchronized void stop(){\n  LOG.debug(\"Stopping server heartbeat.\");\n  this.timer.cancel();\n  running=false;\n}\n", "nl": "Stops heartbeat sending.", "id": "45703"}
{"code": "protected void pluginInitialize(){\n}\n", "nl": "Called after plugin construction and fields have been initialized.", "id": "48785"}
{"code": "@NotNull public static String attrOrDefault(@NotNull Attributes attributes,@NotNull String name,@NotNull String defaultValue){\n  String value=attributes.getValue(name);\n  return (value != null) ? value : defaultValue;\n}\n", "nl": "Retrieve the named parameter from the attribute list, or a default value if no match is found.", "id": "6873"}
{"code": "@Override public String toString(){\n  return super.toString() + \"[caseSensitivity=\" + caseSensitivity+ \"]\";\n}\n", "nl": "String representation of this file comparator.", "id": "38703"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostHealEffect_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200384,skillname);\n}\n", "nl": "You boosted your recovery by using [%SkillName].", "id": "47913"}
{"code": "public DynamicTemplateParameterContext appendParameter(DynamicContextParameters param,String paramValue,boolean deleteOnExit,ContextInfo contextInfo){\n  return appendParameter(param.getName(),paramValue,deleteOnExit,false,contextInfo);\n}\n", "nl": "Appends a dynamic parameter value. <ul> <li>All template parameters within the parameter value and name are resolved.</li> <li>The parameter value is appended to the previous parameter value.</li> </ul>", "id": "21405"}
{"code": "public Matrix zoomOut(float x,float y){\n  Matrix save=new Matrix();\n  save.set(mMatrixTouch);\n  save.postScale(0.7f,0.7f,x,y);\n  return save;\n}\n", "nl": "Zooms out by 0.7f, x and y are the coordinates (in pixels) of the zoom center.", "id": "26654"}
{"code": "public WallGetCommentsQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of comments to return (maximum 100).", "id": "53493"}
{"code": "public AdsUpdateClientsQuery updateClients(UserActor actor,int accountId,String data){\n  return new AdsUpdateClientsQuery(getClient(),actor,accountId,data);\n}\n", "nl": "Edits clients of an advertising agency.", "id": "11302"}
{"code": "@Override public long addUserRole(UserRole userRole){\n  return sessionTemplate.insert(NAMESPACE + \".addUserRole\",userRole);\n}\n", "nl": "Add new user role mapping", "id": "9798"}
{"code": "protected static ImageIcon createImageIcon(String path){\n  java.net.URL imgURL=MenuLookDemo.class.getResource(path);\n  if (imgURL != null) {\n    return new ImageIcon(imgURL);\n  }\n else {\n    System.err.println(\"Couldn't find file: \" + path);\n    return null;\n  }\n}\n", "nl": "Returns an ImageIcon, or null if the path was invalid.", "id": "53503"}
{"code": "private void updateSequence(){\n  setLong(mBuffers[mBufferIn],++mSeq,2,4);\n}\n", "nl": "Increments the sequence number.", "id": "627"}
{"code": "public Waterfall waterfall(Task... tasks){\n  return new Waterfall(this.executor_,tasks);\n}\n", "nl": "Create a Waterfall control flow strategy.", "id": "44844"}
{"code": "public void removeListener(final FileAlterationListener listener){\n  if (listener != null) {\n    while (listeners.remove(listener)) {\n    }\n  }\n}\n", "nl": "Remove a file system listener.", "id": "39915"}
{"code": "public byte[] compress(byte[] unCompInput){\n  try {\n    return Snappy.rawCompress(unCompInput,unCompInput.length);\n  }\n catch (  IOException e) {\n    LOGGER.error(e,e.getMessage());\n    return null;\n  }\n}\n", "nl": "wrapper method for compressing byte[] unCompInput.", "id": "7986"}
{"code": "public Builder opacity(Number opacity){\n  this.opacity=opacity;\n  return this;\n}\n", "nl": "The opacity of the marker. </br> default 1.0", "id": "18544"}
{"code": "public Builder diskCacheExtraOptions(int maxImageWidthForDiskCache,int maxImageHeightForDiskCache,BitmapProcessor processorForDiskCache){\n  this.maxImageWidthForDiskCache=maxImageWidthForDiskCache;\n  this.maxImageHeightForDiskCache=maxImageHeightForDiskCache;\n  this.processorForDiskCache=processorForDiskCache;\n  return this;\n}\n", "nl": "Sets options for resizing/compressing of downloaded images before saving to disk cache.<br /> <b>NOTE: Use this option only when you have appropriate needs. It can make TinyImageLoader slower.</b>", "id": "7073"}
{"code": "public PhotosEditAlbumQuery title(String value){\n  return unsafeParam(\"title\",value);\n}\n", "nl": "New album title.", "id": "31837"}
{"code": "public void begin(String header,int bias){\n  begin();\n  m_out.print(header);\n  m_bias=bias;\n}\n", "nl": "Begin the XML document. This must be called before any other formatting methods. This method prints an XML header into the top of the output stream, plus additional header text provided by the client", "id": "45264"}
{"code": "@Override public void close(){\n  s1.close();\n  if (s2 != null)   s2.close();\n}\n", "nl": "Closes the two underlying scans.", "id": "7067"}
{"code": "public boolean isXMLDoc(){\n  if (isXMLDoc == UNKNOWN_TYPE)   isXMLDoc=getDocumentType();\n  return isXMLDoc == VALID_XML;\n}\n", "nl": "Document can be an XML document or a text document.", "id": "48315"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  if (getViewer() instanceof GroupsViewer) {\n    GroupsViewer viewer=(GroupsViewer)getViewer();\n    viewer.getGroupsPanel().addNewGroup(-1);\n  }\n}\n", "nl": "parses the given command and executes it", "id": "50680"}
{"code": "void checkNormalizationAfterRemove(ChildNode previousSibling){\n  if (previousSibling != null && previousSibling.getNodeType() == Node.TEXT_NODE) {\n    ChildNode next=previousSibling.nextSibling;\n    if (next != null && next.getNodeType() == Node.TEXT_NODE) {\n      isNormalized(false);\n    }\n  }\n}\n", "nl": "Checks the normalized of this node after removing a child. If the removed child causes this node to be unnormalized, then this node is flagged accordingly. The conditions for changing the normalized state are: <ul> <li>The removed child had two adjacent siblings that were text nodes. </ul>", "id": "54523"}
{"code": "public static boolean identical(ItemStack a,ItemStack b){\n  if (a == null && b == null) {\n    return true;\n  }\n else   if (a == null || b == null) {\n    return false;\n  }\n  return couldMerge(a,b);\n}\n", "nl": "return if the two itemstacks are identical, excepting stacksize", "id": "44924"}
{"code": "protected boolean sameLanguageAsIncludeParent(){\n  String parentLanguage=getIncludeParentLanguage();\n  return parentLanguage != null && parentLanguage.equalsIgnoreCase(fCurrentLanguage);\n}\n", "nl": "Returns true if the current [language] is equivalent to the [language] that was in effect on the include parent, taking case-insensitivity into account as per [RFC 3066].  This method should <em>only</em> be called when the current element is a top level included element, i.e. the direct child of a fallback element, or the root elements in an included document. The \"include parent\" is the element which, in the result infoset, will be the direct parent of the current element.", "id": "20912"}
{"code": "public void addModule(Module module){\n  if (module instanceof HttpAdapterAware) {\n    ((HttpAdapterAware)module).setHttpAdapter(getHttpAdapter());\n  }\n  this.moduleRegistry.addModule(module);\n}\n", "nl": "Adds the given module.", "id": "772"}
{"code": "private void sendBroadcastNewOperation(Target target,RemoteOperation operation){\n  Intent intent=new Intent(ACTION_OPERATION_ADDED);\n  if (target.mAccount != null) {\n    intent.putExtra(EXTRA_ACCOUNT,target.mAccount);\n  }\n else {\n    intent.putExtra(EXTRA_SERVER_URL,target.mServerUrl);\n  }\n  sendStickyBroadcast(intent);\n}\n", "nl": "Sends a broadcast when a new operation is added to the queue. Local broadcasts are only delivered to activities in the same process, but can't be done sticky :\\", "id": "5669"}
{"code": "private boolean supportsControllableClass(ZWaveNode node){\n  for (  CommandClass commandClass : controllableClasses) {\n    if (node.supportsCommandClass(commandClass) == true) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Check if this node supports a controllable command class", "id": "13992"}
{"code": "public boolean isAckPending(){\n  return this.ackPending;\n}\n", "nl": "Returns true is there is an ack pending from the controller", "id": "28158"}
{"code": "public void clearCounters(){\n  this.hitCount.set(0);\n  this.missCountNotFound.set(0);\n  this.missCountExpired.set(0);\n  this.missCountSoftRef.set(0);\n  this.removeHitCount.set(0);\n  this.removeMissCount.set(0);\n}\n", "nl": "Clears the hit and miss counters", "id": "57747"}
{"code": "public AemSidekick expandFieldsetIfCollapsed(String fieldsetName){\n  final WebElement fieldset=getFieldsetByName(fieldsetName);\n  bobcatWait.withTimeout(Timeouts.BIG).until(SidekickActions.expandFieldset(fieldset),Timeouts.SMALL);\n  return this;\n}\n", "nl": "Expands fieldset if collapsed based on fieldset name", "id": "13900"}
{"code": "@After public void afterTest(){\n  removeTestData();\n}\n", "nl": "Removes test values after test.", "id": "46406"}
{"code": "public void registerProvider(EnvironmentProvider provider){\n  JmxConnectionSupportImpl.registerProviderImpl(provider);\n}\n", "nl": "Registers new EnvironmentProvider.", "id": "2339"}
{"code": "protected AccountLookupContactsQuery service(AccountLookupContactsService value){\n  return unsafeParam(\"service\",value);\n}\n", "nl": "String identifier of a service which contacts are used for searching.", "id": "17761"}
{"code": "public boolean addSubEquipmentId(final Long subEquipmentId){\n  if (subEquipmentId != null && subEquipmentId > 0) {\n    return subEquipmentIds.add(subEquipmentId);\n  }\n  return false;\n}\n", "nl": "Adds the sub equipment id as dependency to this tag", "id": "10966"}
{"code": "public void addCommunicationListener(FTPCommunicationListener listener){\n  communicationListeners.add(listener);\n}\n", "nl": "This method adds a FTPCommunicationListener to the object.", "id": "22944"}
{"code": "public IntArrayList values(){\n  return values;\n}\n", "nl": "Returns the integer encoded value of each cell in this column. It can be used to lookup the mapped string in the lookupTable", "id": "24649"}
{"code": "public NewsfeedSearchQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of posts to return.", "id": "719"}
{"code": "public Set<E> keySet(){\n  return entries.keySet();\n}\n", "nl": "The elements in the counter.", "id": "17122"}
{"code": "public ChangeSet increment(String path,long delta){\n  return add(new IncrementSpaceEntryMutator(path,delta));\n}\n", "nl": "Increment a long property with the given delta.", "id": "19512"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "35276"}
{"code": "private void tryScrollBackToTopAfterComplete(){\n  tryScrollBackToTop();\n}\n", "nl": "just make easier to understand", "id": "23217"}
{"code": "public static void printf(String format,Object... args){\n  out.printf(LOCALE,format,args);\n  out.flush();\n}\n", "nl": "Prints a formatted string to standard output, using the specified format string and arguments, and then flushes standard output.", "id": "58411"}
{"code": "protected VideoEditAlbumQuery albumId(int value){\n  return unsafeParam(\"album_id\",value);\n}\n", "nl": "Album ID.", "id": "31760"}
{"code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "43836"}
{"code": "public boolean hasSingleExit(){\n  return getLoopExits().size() == 1;\n}\n", "nl": "Returns <code>true</code> if this loop has a single exit statement.", "id": "43541"}
{"code": "public boolean canProduce(DestinationName destination,String role){\n  return checkAuthorization(destination,role,AuthAction.produce);\n}\n", "nl": "Check if the specified role has permission to send messages to the specified fully qualified destination name.", "id": "14183"}
{"code": "private ChannelType createXmlChannel(Pair<SequenceUUID,Integer> pair){\n  ChannelType channel=new ChannelType();\n  channel.setCPLVirtualTrackId(pair.getLeft().getUuid());\n  channel.setCPLVirtualTrackChannel(pair.getRight());\n  return channel;\n}\n", "nl": "Create xml channel info form input pair.", "id": "40070"}
{"code": "public boolean isValueOnly(){\n  if (valueOnly == null) {\n    return false;\n  }\n else {\n    return valueOnly;\n  }\n}\n", "nl": "Gets the value of the valueOnly property.", "id": "18510"}
{"code": "public static byte[] extractReadableBytes(ByteBuf content){\n  byte[] binaryContent=new byte[content.readableBytes()];\n  content.markReaderIndex();\n  content.readBytes(binaryContent);\n  content.resetReaderIndex();\n  return binaryContent;\n}\n", "nl": "Extracts all readable bytes from the ByteBuf as a byte array.", "id": "25366"}
{"code": "public static void f(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_FATAL) {\n    return;\n  }\n  Log.wtf(tag,msg,throwable);\n}\n", "nl": "Send a FATAL ERROR log message", "id": "31503"}
{"code": "private void reset(){\n  currentIndex=0;\n  undoList.clear();\n  updateMenuItems();\n}\n", "nl": "Reset undo list", "id": "2669"}
{"code": "public static void hideProgressDialog(String tag){\n  if (tag == null)   return;\nsynchronized (sLock) {\n    ProgressDialog dialog=findDialog(tag);\n    if (dialog != null) {\n      if (isAlive(dialog) && dialog.isShowing())       dialog.dismiss();\n      sDialogs.remove(dialog);\n    }\n  }\n}\n", "nl": "Hide dialog with specific tag", "id": "48596"}
{"code": "public JSearchPanel createSearchPanel(boolean monitorKeystrokes){\n  JSearchPanel jsp=new JSearchPanel(m_set,m_field,monitorKeystrokes);\n  if (m_lock != null) {\n    jsp.setLock(m_lock);\n  }\n  return jsp;\n}\n", "nl": "Create a new search text panel for searching over the data.", "id": "2224"}
{"code": "public WebElement elementReady(WebElement element){\n  return bobcatWait.withTimeout(Timeouts.MEDIUM).until(null);\n}\n", "nl": "Checks if a WebElement is ready to be operated on, ie. is visible and not stale and returns that element.", "id": "48654"}
{"code": "public void addColor(int color){\n  if (mColors == null)   mColors=new ArrayList<>();\n  mColors.add(color);\n}\n", "nl": "Adds a new color to the colors array of the DataSet.", "id": "12012"}
{"code": "public void drawResultBitmap(Bitmap barcode){\n  resultBitmap=barcode;\n  invalidate();\n}\n", "nl": "Draw a bitmap with the result points highlighted instead of the live scanning display.", "id": "53371"}
{"code": "public LogSeqNum logSetVal(Buffer buff,int offset,Constant newVal){\n  if (enableLogging) {\n    BlockId blk=buff.block();\n    if (isTempBlock(blk))     return null;\n    return new SetValueRecord(txNum,blk,offset,buff.getVal(offset,newVal.getType()),newVal).writeToLog();\n  }\n else   return null;\n}\n", "nl": "Writes a set value record to the log.", "id": "55005"}
{"code": "@Deprecated public Builder cacheInMemory(){\n  cacheInMemory=true;\n  return this;\n}\n", "nl": "Loaded image will be cached in memory", "id": "28277"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Petrification_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200771,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] became petrified because he used [%SkillName].", "id": "24567"}
{"code": "public static DexlibAbstractInstruction fromInstruction(Instruction instruction,int codeAddress){\n  return fromOpcode(instruction.getOpcode(),instruction,codeAddress);\n}\n", "nl": "Resolve an Instruction from a dexlib instruction.", "id": "40737"}
{"code": "public boolean isLegendVisible(){\n  return legendVisible;\n}\n", "nl": "Returns true if legend section of the chart is visible, false otherwise. <br><br><b>Note:</b> This method must be called in the Event Dispatch Thread.", "id": "38289"}
{"code": "private boolean resolveEverything(){\n  if (Options.v().on_the_fly())   return false;\n  return (Options.v().whole_program() || Options.v().whole_shimple() || Options.v().full_resolver()|| Options.v().output_format() == Options.output_format_dava);\n}\n", "nl": "Returns true if we are resolving all class refs recursively.", "id": "28124"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_PAINT_SUCCEED(int objectNameId,int colorItemNameId){\n  return new SM_SYSTEM_MESSAGE(1401436,calculateNameId(objectNameId),new DescriptionId(colorItemNameId));\n}\n", "nl": "You have painted %0 with %1.", "id": "2744"}
{"code": "@Override protected List<Target> overridableCreateTargetsWithPauses(List<Element> segmentsAndBoundaries,String pauseSymbol){\n  return HalfPhoneTargetFeatureLister.createTargetsWithPauses(segmentsAndBoundaries,pauseSymbol);\n}\n", "nl": "Access the code from within the our own code so that a subclass can override it. Use this rather than the public static method in local code.", "id": "36909"}
{"code": "public void flushChanges(){\n  for (  GradleEditorEntityTable table : myTablesByGroupName.values()) {\n    if (table.isEditing()) {\n      table.getCellEditor().stopCellEditing();\n    }\n  }\n}\n", "nl": "Instructs current component to flush all changes made by a user to the underlying gradle config.", "id": "1659"}
{"code": "public static ULong ulong(BigInteger value) throws NumberFormatException {\n  return ULong.valueOf(value);\n}\n", "nl": "Create an <code>unsigned long</code>", "id": "33058"}
{"code": "public Object[] fetchConverted() throws KeyGenException {\n  if (null != currentConveretedRawRow) {\n    return currentConveretedRawRow;\n  }\n  if (hasNext()) {\n    Object[] rawRow=batch.getRawRow(counter);\n    currentConveretedRawRow=convertRow(rawRow);\n    ;\n    return currentConveretedRawRow;\n  }\n else {\n    return null;\n  }\n}\n", "nl": "for fetching the row with out incrementing counter.", "id": "32665"}
{"code": "public static boolean isFileOlder(File file,long timeMillis){\n  if (file == null) {\n    throw new IllegalArgumentException(\"No specified file\");\n  }\n  if (!file.exists()) {\n    return false;\n  }\n  return file.lastModified() < timeMillis;\n}\n", "nl": "Tests if the specified <code>File</code> is older than the specified time reference.", "id": "8857"}
{"code": "public static GenericEntity createGenericEntity(Delegator delegator,ModelEntity modelEntity,Map<String,? extends Object> fields){\n  if (modelEntity == null) {\n    throw new IllegalArgumentException(\"Cannot create a GenericEntity with a null modelEntity parameter\");\n  }\n  GenericEntity newEntity=new GenericEntity();\n  newEntity.init(delegator,modelEntity,fields);\n  return newEntity;\n}\n", "nl": "Creates new GenericEntity from existing Map", "id": "26688"}
{"code": "public static String execute(String command,String cwd){\n  return execute(command,new File(cwd));\n}\n", "nl": "Execute a command in a specific directory", "id": "9592"}
{"code": "public void monitor(String key){\n  Timer t=new Timer(true);\n  t.schedule(new WatchableRegistration(key),10 * 1000,10 * 1000);\n}\n", "nl": "activates a watchdog watching over a registration. If lookup fails, will issue a process termination.", "id": "19180"}
{"code": "public Builder fillColor(String fillColor){\n  this.fillColor=fillColor;\n  return this;\n}\n", "nl": "Fill color. </br> default \"#03f\"", "id": "9074"}
{"code": "public Builder position(String position){\n  this.position=position;\n  return this;\n}\n", "nl": "The initial position of the control (one of the map corners). </br>  default \"topright\" </br>  possible values: \"topleft\", \"topright\", \"bottomleft\", \"bottomright\"", "id": "12054"}
{"code": "protected void modify(){\n  ++m_modCount;\n  m_cur=-1;\n}\n", "nl": "Tracks table modifications.", "id": "7220"}
{"code": "public static int robustCCW(S2Point a,S2Point b,S2Point c){\n  return robustCCW(a,b,c,S2Point.crossProd(a,b));\n}\n", "nl": "WARNING! This requires arbitrary precision arithmetic to be truly robust. This means that for nearly colinear AB and AC, this function may return the wrong answer. <p> Like SimpleCCW(), but returns +1 if the points are counterclockwise and -1 if the points are clockwise. It satisfies the following conditions: (1) RobustCCW(a,b,c) == 0 if and only if a == b, b == c, or c == a (2) RobustCCW(b,c,a) == RobustCCW(a,b,c) for all a,b,c (3) RobustCCW(c,b,a) ==-RobustCCW(a,b,c) for all a,b,c In other words: (1) The result is zero if and only if two points are the same. (2) Rotating the order of the arguments does not affect the result. (3) Exchanging any two arguments inverts the result. This function is essentially like taking the sign of the determinant of a,b,c, except that it has additional logic to make sure that the above properties hold even when the three points are coplanar, and to deal with the limitations of floating-point arithmetic. Note: a, b and c are expected to be of unit length. Otherwise, the results are undefined.", "id": "39598"}
{"code": "public static boolean isConcreteType(@NotNull Element element){\n  return isConcreteType(element.asType());\n}\n", "nl": "Determines whether or not the Element is a concrete type. If the element is a generic type or contains generic type arguments, this method will return false.", "id": "4410"}
{"code": "public synchronized void abandon(ConversationAbandonedEvent details){\n  if (!abandoned) {\n    abandoned=true;\n    currentPrompt=null;\n    context.getForWhom().abandonConversation(this);\n    for (    ConversationAbandonedListener listener : abandonedListeners) {\n      listener.conversationAbandoned(details);\n    }\n  }\n}\n", "nl": "Abandons and resets the current conversation. Restores the user's normal chat behavior.", "id": "43875"}
{"code": "public boolean isApplicable(){\n  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "53724"}
{"code": "public int value(){\n  return _map._values[_index];\n}\n", "nl": "Provides access to the value of the mapping at the iterator's position. Note that you must <tt>advance()</tt> the iterator at least once before invoking this method.", "id": "56481"}
{"code": "public void addImplements(Access node){\n  List<Access> list=(parent == null || state == null) ? getImplementsListNoTransform() : getImplementsList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the Implements list.", "id": "55046"}
{"code": "public static void threadSleep(long millis){\n  try {\n    Thread.sleep(millis);\n  }\n catch (  InterruptedException ex) {\n    Log.e(\"Exception\",StringUtils.exceptionStackTraceToString(ex));\n  }\n}\n", "nl": "Makes the thread sleep for some time", "id": "42110"}
{"code": "public UsersSearchQuery hasPhoto(Boolean value){\n  return unsafeParam(\"has_photo\",value);\n}\n", "nl": "Return with photo only", "id": "42392"}
{"code": "public Vector ortho(){\n  return new Vector(-y,x);\n}\n", "nl": "Returns the orthogonal vector (-y,x).", "id": "55524"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_BARRIER_ATSTAKE(String value0value){\n  return new SM_SYSTEM_MESSAGE(1400326,value0value);\n}\n", "nl": "%0% is in danger!", "id": "5632"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonGroupGate_ME_TO_SELF(String value0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200423,value0,skillname);\n}\n", "nl": "You summoned %0 by using [%SkillName].", "id": "51192"}
{"code": "@Override public String object2Relation(String fieldType){\n  if (fieldType != null) {\n    if (fieldType.equals(\"byte\") || fieldType.equals(\"java.lang.Byte\")) {\n      return \"blob\";\n    }\n  }\n  return null;\n}\n", "nl": "If the field type passed in is byte, it will change it into blob as column type.", "id": "43494"}
{"code": "public NewsfeedDeleteBanQuery deleteBan(UserActor actor){\n  return new NewsfeedDeleteBanQuery(getClient(),actor);\n}\n", "nl": "Allows news from previously banned users and communities to be shown in the current user's newsfeed.", "id": "1335"}
{"code": "public static <V>boolean addListNotNullValue(List<V> sourceList,V value){\n  return (sourceList != null && value != null) ? sourceList.add(value) : false;\n}\n", "nl": "add not null entry to list", "id": "5552"}
{"code": "@Override public void reset(){\n  dataIter=delimitedData.iterator();\n}\n", "nl": "Reset record reader iterator", "id": "55258"}
{"code": "public static ValueGetterSpacePredicate<ServerEntry> pathOr(String path,ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){\n  return path(path,or(leftPredicate,rightPredicate));\n}\n", "nl": "Shortcut for path(path, or(leftPredicate, rightPredicate)).", "id": "18226"}
{"code": "public int readInt(){\n  return (readShort() << 16) | (readShort() & 0xFFFF);\n}\n", "nl": "Read int.", "id": "6648"}
{"code": "@Override public void onActivityResult(int requestCode,int resultCode,Intent data){\n  super.onActivityResult(requestCode,resultCode,data);\n  ReactiveLogin.onActivityResult(requestCode,resultCode,data);\n}\n", "nl": "We need to call ReactiveFB.onActivityResult in order to execute the onActivityResult and the login listener callbacks Example : ReactiveFB.onActivityResult(requestCode, resultCode, data);", "id": "26328"}
{"code": "@Override public void dispose(){\n  if (receiveThread != null) {\n    receiveThread.interrupt();\n    try {\n      receiveThread.join();\n    }\n catch (    InterruptedException e) {\n    }\n    receiveThread=null;\n  }\n  if (serialPort != null) {\n    serialPort.close();\n    serialPort=null;\n  }\n  logger.info(\"Stopped ZWave serial handler\");\n  super.dispose();\n}\n", "nl": "Closes the connection to the ZWave controller.", "id": "48333"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "5134"}
{"code": "public void addObserver(AppMenuObserver observer){\n  mObservers.add(observer);\n}\n", "nl": "Adds the observer to App Menu.", "id": "27686"}
{"code": "public void runActions(Context context,boolean onlyIfScreenIsOn){\n  assert mServiceRunnable != null;\n  assert mPowerManagerHelper != null;\n  if (!onlyIfScreenIsOn || mPowerManagerHelper.isScreenOn(context)) {\n    if (mNeedToRunActions.getAndSet(false)) {\n      unregisterReceiver(context);\n      mHandler.postDelayed(mServiceRunnable,mServiceRunnable.delayToRun());\n    }\n  }\n}\n", "nl": "Posts a task to run the necessary actions.  The task is delayed to prevent spin-locking in ChromeTabbedActivity.onResume(): http://b/issue?id=5864891&query=5864891", "id": "17189"}
{"code": "public PhotosReorderAlbumsQuery reorderAlbums(UserActor actor,int albumId){\n  return new PhotosReorderAlbumsQuery(getClient(),actor,albumId);\n}\n", "nl": "Reorders the album in the list of user albums.", "id": "37672"}
{"code": "public void download(String remoteFileName,File localFile,long restartAt) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {\n  download(remoteFileName,localFile,restartAt,null);\n}\n", "nl": "This method resumes a download operation from the remote server to a local file. Calling this method blocks the current thread until the operation is completed. The operation could be interrupted by another thread calling abortCurrentDataTransfer(). The method will break with a FTPAbortedException.", "id": "49102"}
{"code": "public void insertAfter(E toInsert,E point){\n  innerChain.insertAfter(toInsert,point);\n}\n", "nl": "Inserts <code>toInsert</code> in the Chain after <code>point</code>.", "id": "22489"}
{"code": "private Response requireJSON(IHTTPSession session){\n  final Map<String,String> headers=session.getHeaders();\n  if (!APPLICATION_JSON.equals(headers.get(CONTENT_TYPE))) {\n    return newFixedLengthResponse(Response.Status.NOT_ACCEPTABLE,MIME_PLAINTEXT,\"Set content-type to application/json\");\n  }\n else {\n    return null;\n  }\n}\n", "nl": "Ensures that the supplied data has the \"content-type\" set to JSON", "id": "3181"}
{"code": "void submit(ProcessAndDisplayImageTask task){\n  initExecutorsIfNeed();\n  taskExecutorForCachedImages.execute(task);\n}\n", "nl": "Submits task to execution pool", "id": "32135"}
{"code": "private String printDFormat(int x){\n  return printDFormat(Integer.toString(x));\n}\n", "nl": "Format method for the d conversion character and int argument. <p/> For d format, the flag character '-', means that the output should be left justified within the field.  The default is to pad with blanks on the left.  A '+' character means that the conversion will always begin with a sign (+ or -).  The blank flag character means that a non-negative input will be preceded with a blank.  If both a '+' and a ' ' are specified, the blank flag is ignored.  The '0' flag character implies that padding to the field width will be done with zeros instead of blanks. <p/> The field width is treated as the minimum number of characters to be printed.  The default is to add no padding.  Padding is with blanks by default. <p/> The precision, if set, is the minimum number of digits to appear.  Padding is with leading 0s.", "id": "4088"}
{"code": "@Override public int hashCode(){\n  return this.id.hashCode();\n}\n", "nl": "Hashcode method - keep consistent with equals()!", "id": "26672"}
{"code": "public void destroy(){\n  BackgroundExecutor.cancelAll(\"\",true);\n  UiThreadExecutor.cancelAll(\"\");\n}\n", "nl": "Cancel all current operations", "id": "40385"}
{"code": "protected void recordConnectionResult(final int resultCode){\n  RecordHistogram.recordSparseSlowlyHistogram(CONNECTION_RESULT_HISTOGRAM_NAME,resultCode);\n}\n", "nl": "Record the result of a connection attempt. The default implementation records via a UMA histogram.", "id": "57075"}
{"code": "private static LinkedHashMap<String,ChannelType> createTrack(Channel... channels){\n  return StreamUtil.createLinkedMap(channels);\n}\n", "nl": "Creates audio track.", "id": "38543"}
{"code": "private void runPCoA(final PCoA pcoa) throws CanceledException {\n  ProgressListener progressListener=clusterViewer.getDir().getDocument().getProgressListener();\n  if (progressListener == null)   progressListener=new ProgressSilent();\n  pcoa.calculateClassicMDS(progressListener);\n}\n", "nl": "run the MDS code", "id": "49265"}
{"code": "public boolean throwsException(SootClass e){\n  return exceptions != null && exceptions.contains(e);\n}\n", "nl": "Returns true if this method throws exception <code>e</code>.", "id": "53684"}
{"code": "@Override public void comment(XMLString text,Augmentations augs) throws XNIException {\n  try {\n    if (fLexicalHandler != null) {\n      fLexicalHandler.comment(text.ch,0,text.length);\n    }\n  }\n catch (  SAXException e) {\n    throw new XNIException(e);\n  }\n}\n", "nl": "A comment.", "id": "23938"}
{"code": "public VideoCreateCommentQuery createComment(UserActor actor,int videoId){\n  return new VideoCreateCommentQuery(getClient(),actor,videoId);\n}\n", "nl": "Adds a new comment on a video.", "id": "16627"}
{"code": "public double calcCoexistenceImportance(String sNode){\n  VertexImpl v=new VertexImpl();\n  v.setLabel(sNode);\n  return calcCoexistenceImportance(v);\n}\n", "nl": "Returns a functions of [element graph edges max],[number of neighbours], where [element graph edges max] refers to the maximum weight of the edges including [sNode], and [number of neightbours] is its number of neighbours in the graph.", "id": "15847"}
{"code": "public boolean extended(){\n  return soot.PhaseOptions.getBoolean(options,\"extended\");\n}\n", "nl": "Extended SSA (SSI) -- Compute extended SSA (SSI) form.. If enabled, Shimple will created extended SSA (SSI)  form.", "id": "38559"}
{"code": "@Override public void close() throws IOException {\n  try {\n    super.close();\n  }\n  finally {\n    if (closeBranch) {\n      branch.close();\n    }\n  }\n}\n", "nl": "Closes the proxied input stream and, if so configured, the associated output stream. An exception thrown from one stream will not prevent closing of the other stream.", "id": "11359"}
{"code": "public static void parseAndIgnoreWhitespace(final String source,final ParsePosition pos){\n  parseNextCharacter(source,pos);\n  pos.setIndex(pos.getIndex() - 1);\n}\n", "nl": "Parses <code>source</code> until a non-whitespace character is found.", "id": "46631"}
{"code": "void initAcceptableFilterList(int capacity){\n  if (_acceptableFilterIDList == null && capacity > 0)   _acceptableFilterIDList=new ArrayList<String>(capacity);\n}\n", "nl": "init the acceptableFilterList by desired capacity.", "id": "15421"}
{"code": "public void clear(){\n  m_nodeTuples.invalidateAll();\n  m_edgeTuples.invalidateAll();\n  super.clear();\n  m_links.clear();\n}\n", "nl": "Clear this graph, removing all nodes and edges.", "id": "45624"}
{"code": "public IObjectInfo<T> add(T subject){\n  return addImpl(subject);\n}\n", "nl": "store an element", "id": "21806"}
{"code": "@Override public String toString(){\n  return new String(toByteArray());\n}\n", "nl": "Gets the curent contents of this byte stream as a string.", "id": "20458"}
{"code": "private static double doubleHighPart(double d){\n  if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN) {\n    return d;\n  }\n  long xl=Double.doubleToRawLongBits(d);\n  xl&=MASK_30BITS;\n  return Double.longBitsToDouble(xl);\n}\n", "nl": "Get the high order bits from the mantissa. Equivalent to adding and subtracting HEX_40000 but also works for very large numbers", "id": "25925"}
{"code": "public void showMetrics(){\n}\n", "nl": "Shows metrics for this audio player", "id": "24709"}
{"code": "public NewsfeedGetQuery endTime(Integer value){\n  return unsafeParam(\"end_time\",value);\n}\n", "nl": "Latest timestamp (in Unix time) of a news item to return. By default, the current time.", "id": "22038"}
{"code": "public boolean empties_as_allocs(){\n  return soot.PhaseOptions.getBoolean(options,\"empties-as-allocs\");\n}\n", "nl": "Treat EMPTY as Alloc -- Treat singletons for empty sets etc. as allocation sites. When this option is set to true, Spark treats references to  EMPTYSET, EMPTYMAP, and EMPTYLIST as allocation sites for  HashSet, HashMap and LinkedList objects respectively, and  references to Hashtable.emptyIterator as allocation sites for  Hashtable.EmptyIterator. This enables subsequent analyses to  differentiate different uses of Java's immutable empty  collections.", "id": "20588"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_REJECTED_TRADE(String value0){\n  return new SM_SYSTEM_MESSAGE(1390115,value0);\n}\n", "nl": "%0 is currently rejecting trade requests.", "id": "50224"}
{"code": "public PhotosSearchQuery radius(Integer value){\n  return unsafeParam(\"radius\",value);\n}\n", "nl": "Radius of search in meters (works very approximately). Available values: \"10\", \"100\", \"800\", \"6000\", \"50000\".", "id": "21837"}
{"code": "public void initialize(int[] data){\n  if (data == null) {\n    throw new IllegalArgumentException(\" Data Array is NUll\");\n  }\n  this.data=data;\n}\n", "nl": "This method is used to initialize data array", "id": "23932"}
{"code": "public ZoomPanOptions build(){\n  ZoomPanOptions options=new ZoomPanOptions();\n  options.animate=this.animate;\n  options.pan=this.pan;\n  options.zoom=this.zoom;\n  options.reset=this.reset;\n  return options;\n}\n", "nl": "Builds the.", "id": "27985"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_QUEST_LIMIT_START_WEEK(String value1,String value0){\n  return new SM_SYSTEM_MESSAGE(1400857,value1,value0);\n}\n", "nl": "You can receive the weekly quest again at %1 in the morning on %0.", "id": "17609"}
{"code": "public Set possibleTypes(){\n  Set ret=new HashSet();\n  ret.addAll(oldSet.possibleTypes());\n  ret.addAll(newSet.possibleTypes());\n  return ret;\n}\n", "nl": "Set of all possible run-time types of objects in the set.", "id": "24984"}
{"code": "public void disableWhenHorizontalMove(boolean disable){\n  mDisableWhenHorizontalMove=disable;\n}\n", "nl": "It's useful when working with viewpager.", "id": "26708"}
{"code": "public boolean isPingOptIn(){\n  if (StatisticsUploadAssistant.isSendAllowed()) {\n    return true;\n  }\n  PreferenceStore prefs=getPreferenceStore();\nsynchronized (DdmsPreferenceStore.class) {\n    return prefs != null && prefs.contains(PING_OPT_IN);\n  }\n}\n", "nl": "Returns the \"ping opt in\" value from the preference store. This would be true if there's a valid preference store and the user opted for sending ping statistics.", "id": "37890"}
{"code": "public void put(final Long key){\n  keyList.add(key);\n}\n", "nl": "Add the key to the task, prior to execution.", "id": "34843"}
{"code": "@Override public void ignorableWhitespace(char[] ch,int start,int length) throws SAXException {\n  if (documentHandler != null) {\n    documentHandler.ignorableWhitespace(ch,start,length);\n  }\n}\n", "nl": "SAX DocumentHandler API.", "id": "57563"}
{"code": "void remove(VisibleObject object){\n  if (objects.remove(object.getObjectId()) != null) {\n    if (object instanceof Player) {\n      checkActiveness(playerCount.decrementAndGet() > 0);\n    }\n  }\n}\n", "nl": "Remove AionObject from region objects list.", "id": "35983"}
{"code": "public boolean isStatusBarTintEnabled(){\n  return mStatusBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system status bar?", "id": "17638"}
{"code": "public void quit(){\n  mQuit=true;\n  interrupt();\n}\n", "nl": "Forces this dispatcher to quit immediately.  If any requests are still in the queue, they are not guaranteed to be processed.", "id": "38866"}
{"code": "public boolean gotoPrevious(){\n  currentTaxonIterator=null;\n  currentTaxonId=null;\n  return isCurrentSet();\n}\n", "nl": "goto the previous object", "id": "6727"}
{"code": "public DistributedLogClientBuilder periodicHandshakeIntervalMs(long intervalMs){\n  DistributedLogClientBuilder newBuilder=newBuilder(this);\n  newBuilder._clientConfig.setPeriodicHandshakeIntervalMs(intervalMs);\n  return newBuilder;\n}\n", "nl": "Set the periodic handshake interval in milliseconds. Every <code>intervalMs</code>, the DL client will handshake with existing proxies again. If the interval is less than ownership sync interval, the handshake won't sync ownerships. Otherwise, it will.", "id": "50206"}
{"code": "public static AudioFileFormat.Type findTargetType(String strExtension){\n  AudioFileFormat.Type[] aTypes=AudioSystem.getAudioFileTypes();\n  for (int i=0; i < aTypes.length; i++) {\n    if (aTypes[i].getExtension().equals(strExtension)) {\n      return aTypes[i];\n    }\n  }\n  return null;\n}\n", "nl": "Trying to get an audio file type for the passed extension. This works by examining all available file types. For each type, if the extension this type promisses to handle matches the extension we are trying to find a type for, this type is returned. If no appropriate type is found, null is returned.", "id": "10166"}
{"code": "public void close() throws SQLException {\n  if (resultSet != null)   resultSet.close();\n}\n", "nl": "This statement is not connected to the QueryProcessor, only the GConnection is. so this call is silently ignored", "id": "16905"}
{"code": "String inprogressZNodeName(long ledgerId,long firstTxId,long logSegmentSeqNo){\n  if (DistributedLogConstants.LOGSEGMENT_NAME_VERSION == conf.getLogSegmentNameVersion()) {\n    return String.format(\"%s_%018d\",DistributedLogConstants.INPROGRESS_LOGSEGMENT_PREFIX,logSegmentSeqNo);\n  }\n else {\n    return DistributedLogConstants.INPROGRESS_LOGSEGMENT_PREFIX + \"_\" + Long.toString(firstTxId,16);\n  }\n}\n", "nl": "Get the name of the inprogress znode.", "id": "51302"}
{"code": "public static boolean canAffectBySkill(Player player,VisibleObject target,Skill skill){\n  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canAffectBySkill.ordinal()]) {\n    if (!restrictions.canAffectBySkill(player,target,skill)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "This function is created for enable/disable on specific target.", "id": "22797"}
{"code": "public void onNameClear(View view){\n  setName(null);\n}\n", "nl": "Clear current name.", "id": "24443"}
{"code": "public PhotosReorderAlbumsQuery after(Integer value){\n  return unsafeParam(\"after\",value);\n}\n", "nl": "ID of the album after which the album in question shall be placed.", "id": "47293"}
{"code": "private static StringBuilder dump(StringBuilder _lbuffer,long value){\n  for (int j=0; j < 8; j++) {\n    _lbuffer.append(_hexcodes[(int)(value >> _shifts[j]) & 15]);\n  }\n  return _lbuffer;\n}\n", "nl": "Dump a long value into a StringBuilder.", "id": "24523"}
{"code": "public static void pickImage(Activity activity){\n  pickImage(activity,REQUEST_PICK);\n}\n", "nl": "Pick image from an Activity", "id": "2184"}
{"code": "private synchronized void trim(){\n  while (mCurrentSize > mSizeLimit) {\n    byte[] buf=mBuffersByLastUse.remove(0);\n    mBuffersBySize.remove(buf);\n    mCurrentSize-=buf.length;\n  }\n}\n", "nl": "Removes buffers from the pool until it is under its size limit.", "id": "28634"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CURRENT_INCLUDES(int num0){\n  return new SM_SYSTEM_MESSAGE(1300639,num0);\n}\n", "nl": "Users listed as friends: %num0 users", "id": "13549"}
{"code": "public static boolean stringIsContained(String string1,String string2){\n  return string1.toLowerCase().replace(\" \",\"\").replace(\",\",\"\").contains(string2.toLowerCase().replace(\" \",\"\").replace(\",\",\"\"));\n}\n", "nl": "Check if the first string contains the second string.", "id": "47258"}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){\n  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. <p/> This should only be used on AdapterView's such as ListView as it just calls through to overScrollBy() with the scrollRange = 0. AdapterView's do not have a scroll range (i.e. getScrollY() doesn't work).", "id": "46119"}
{"code": "public void decline(){\n  if (processed) {\n    return;\n  }\n  skype.declineContactRequest(this);\n  processed=true;\n}\n", "nl": "Declines the contact request. Ignored if already accepeted or declined.", "id": "27195"}
{"code": "private void tryScrollBackToTopWhileLoading(){\n  tryScrollBackToTop();\n}\n", "nl": "just make easier to understand", "id": "43155"}
{"code": "public ModelSubMenu cloneModelSubMenu(ModelMenu modelMenu,ModelMenuItem parentMenuItem,BuildArgs buildArgs){\n  return new ModelSubMenu(this,modelMenu,parentMenuItem,buildArgs);\n}\n", "nl": "SCIPIO: Clones item. <p> NOTE: if modelMenu/parentMenuItem are null, they are taken from the current item.", "id": "13524"}
{"code": "public static boolean isLetterOrDigit(char c){\n  return Character.isLetterOrDigit(c);\n}\n", "nl": "Returns true if character c is a letter or digit.", "id": "8874"}
{"code": "private boolean shouldAuthenticate(String username,String password){\n  if (username == null && password != null) {\n    throw new EmailConnectionException(PASSWORD_NO_USERNAME_ERROR);\n  }\n  if (username != null && password == null) {\n    throw new EmailConnectionException(USERNAME_NO_PASSWORD_ERROR);\n  }\n  return username != null;\n}\n", "nl": "Checks the consistency of the username and password parameters and returns whether we should authenticate with the server or not.", "id": "25658"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillCost_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200639,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] has changed your MP consumption by using [%SkillName].", "id": "45404"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_INTERVAL_ME_TO_SELF(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200363,num0,skillname);\n}\n", "nl": "You reduced your flight time by %num0 by using [%SkillName].", "id": "27969"}
{"code": "public String loadFile(String sID){\n  return getDocumentText(sID,true);\n}\n", "nl": "Loads the text of a given file, given its filename.", "id": "47816"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Snare_END_A(String value0){\n  return new SM_SYSTEM_MESSAGE(1201146,value0);\n}\n", "nl": "%0's movement speed is restored to normal.", "id": "28926"}
{"code": "@Override public Packet read(PacketBuffer buf){\n  PacketSpec spec=getSpec(buf.readInt());\n  Packet packet=new Packet(new PacketBuilder(this,spec));\n  packet.read(buf);\n  return packet;\n}\n", "nl": "Reads a packet from the given buffer", "id": "45967"}
{"code": "public FriendsAreFriendsQuery areFriends(UserActor actor,int... userIds){\n  return new FriendsAreFriendsQuery(getClient(),actor,userIds);\n}\n", "nl": "Checks the current user's friendship status with other specified users.", "id": "55919"}
{"code": "@Override public boolean equals(final Object o){\n  if (!(o instanceof DelegatingMap)) {\n    return false;\n  }\n  DelegatingMap that=(DelegatingMap)o;\n  return super.equals(that) && delegate.equals(that.delegate);\n}\n", "nl": "Are these two delegating maps the same in terms of the current layer and their delegates are equal under the definition of equality for that delegate.", "id": "15062"}
{"code": "public Provider<T> withKey(Object key){\n  this.key=key.toString();\n  return new Provider<>(this);\n}\n", "nl": "Set the key for the provider.", "id": "24328"}
{"code": "private static void decreaseItemFromPlayer(Player seller,Item item,TradeItem tradeItem){\n  seller.getInventory().decreaseItemCount(item,tradeItem.getCount());\n  seller.getStore().getTradeItemByObjId(item.getObjectId()).decreaseCount(tradeItem.getCount());\n}\n", "nl": "Decrease item count and update inventory", "id": "45664"}
{"code": "public static int readShort(byte[] bytes){\n  return ((bytes[0] << 8) & 0x0000ff00) | (bytes[1] & 0x000000ff);\n}\n", "nl": "Reads an unsigned 16 bit big-endian number.", "id": "51265"}
{"code": "private boolean clipPathSupported(){\n  return Utils.getSDKInt() >= 18;\n}\n", "nl": "Clip path with hardware acceleration only working properly on API level 18 and above.", "id": "28471"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_END_A_TO_B(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200934,skilltarget);\n}\n", "nl": "[%SkillTarget] is no longer poisoned.", "id": "3765"}
{"code": "public INDArray toRaveledTensor(InputStream is){\n  return toBgr(is).ravel();\n}\n", "nl": "Changes the input stream in to an bgr based raveled(flattened) vector", "id": "31911"}
{"code": "private boolean gzipped(String contentEncoding){\n  return contentEncoding != null && contentEncoding.toLowerCase().contains(\"gzip\");\n}\n", "nl": "Is gzipped?", "id": "49967"}
{"code": "public void calculateCount(){\n  count=Rnd.get(dropTemplate.getMinAmount(),dropTemplate.getMaxAmount());\n}\n", "nl": "Regenerates item count upon each call // TODO input parameters - based on attacker stats // TODO more precise calculations (non-linear)", "id": "25165"}
{"code": "public DefaultHibernateSpaceDataSourceConfigurer sessionFactory(SessionFactory sessionFactory){\n  this.sessionFactory=sessionFactory;\n  return this;\n}\n", "nl": "Injects the Hibernate SessionFactory to be used with this data source.", "id": "45012"}
{"code": "public boolean isGlobalFindable(){\n  return table.getGrid().getRowCount() > 0;\n}\n", "nl": "is a global find possible?", "id": "46307"}
{"code": "public static void moveFile(String sourceFilePath,String destFilePath){\n  if (TextUtils.isEmpty(sourceFilePath) || TextUtils.isEmpty(destFilePath)) {\n    throw new RuntimeException(\"Both sourceFilePath and destFilePath cannot be null.\");\n  }\n  moveFile(new File(sourceFilePath),new File(destFilePath));\n}\n", "nl": "move file", "id": "24871"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_INTERVAL_ME_TO_SELF(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200402,num0,skillname);\n}\n", "nl": "You reflected %num0 damage by the effect of [%SkillName].", "id": "16372"}
{"code": "public static boolean isXML11Space(int c){\n  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_SPACE) != 0);\n}\n", "nl": "Returns true if the specified character is a space character as amdended in the XML 1.1 specification.", "id": "16579"}
{"code": "public Series series(Task... tasks){\n  return new Series(this.executor_,tasks);\n}\n", "nl": "Create a Series control flow strategy.", "id": "14102"}
{"code": "public void invalidateAuthToken(){\n  mAccountManager.invalidateAuthToken(AccountConstants.ACCOUNT_TYPE,mAuthToken);\n  mAuthToken=null;\n}\n", "nl": "Invalidates the auth token for the account. Must call this method when the auth token is found to have expired or otherwise become invalid for authenticating requests.", "id": "29632"}
{"code": "protected void validateInput(){\n  String errorMessage=null;\n  if (validator != null) {\n    errorMessage=validator.isValid(text.getText());\n  }\n  setErrorMessage(errorMessage);\n}\n", "nl": "Validates the input. <p> The default implementation of this framework method delegates the request to the supplied input validator object; if it finds the input invalid, the error message is displayed in the dialog's message line. This hook method is called whenever the text changes in the input field. </p>", "id": "34704"}
{"code": "public static SM_SYSTEM_MESSAGE STR_UNION_HE_IS_NEW_LEADER(String value0,String value1,String value2){\n  return new SM_SYSTEM_MESSAGE(1400581,value0,value1,value2);\n}\n", "nl": "%0 entrusted %1 with the league leadership authority. From now on, %1 is the league leader.", "id": "12483"}
{"code": "private static boolean possiblyValidStringLiteral(PsiElement element){\n  if (element instanceof StringLiteral) {\n    return true;\n  }\n  if (element instanceof LiteralExpression) {\n    return false;\n  }\n  if (element instanceof LoadStatement || element instanceof FunctionStatement || element instanceof GlobExpression) {\n    return false;\n  }\n  return true;\n}\n", "nl": "Returns false iff we know with certainty that the element cannot resolve to a string literal.", "id": "31418"}
{"code": "public boolean willOpenInForeground(TabLaunchType type,boolean isNewTabIncognito){\n  if (type == TabLaunchType.FROM_RESTORE)   return false;\n  return type != TabLaunchType.FROM_LONGPRESS_BACKGROUND || (!mTabModelSelector.isIncognitoSelected() && isNewTabIncognito);\n}\n", "nl": "Determine if a launch type will result in the tab being opened in the foreground.", "id": "23501"}
{"code": "public V removeLocal(K key){\n  return super.remove(key);\n}\n", "nl": "Remove from the local map.", "id": "30090"}
{"code": "public static String convertTime(int time){\n  time/=1000;\n  int minute=time / 60;\n  int second=time % 60;\n  minute%=60;\n  return String.format(\"%02d:%02d\",minute,second);\n}\n", "nl": "convert time str", "id": "21444"}
{"code": "public void clearPayment(int index){\n  paymentInfo.remove(index);\n}\n", "nl": "removes a specific payment info from the list", "id": "21067"}
{"code": "private static boolean notInstanceAvailable(){\n  if (sInstance == null) {\n    if (!sTrainingTaskFuture.isDone()) {\n      try {\n        sInstance=sTrainingTaskFuture.get();\n        return false;\n      }\n catch (      InterruptedException|ExecutionException e) {\n        e.printStackTrace();\n        return true;\n      }\n    }\n else {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Code processor should be created ones at start. But processor creation is not guarantee that classifier is available. Not trained classifier is not ready to use & must be trained soon as possible. The main cases why code processor is not available is: 1) processor is not created yet & classifier not trained 2) processor created, but occurs an error on classifier train 3) processor created, classifier start train, but not finished (3rd case is ok, it's temporary unavailability & awaiting for training) In 3rd case, user awaiting for train accomplish to get code processor and then take classifier to perform language classifying (see below).", "id": "4512"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_OPTION_INVALID_STANCE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300466,value0);\n}\n", "nl": "You cannot socket manastones while %0.", "id": "34374"}
{"code": "public byte[] decrypt(byte[] bytes){\n  byte[] resp=null;\n  try {\n    resp=crypt(bytes,Cipher.DECRYPT_MODE);\n  }\n catch (  Exception e) {\n    return null;\n  }\n  return resp;\n}\n", "nl": "Decrypt the byte array with the secret key.", "id": "39784"}
{"code": "@TargetApi(Build.VERSION_CODES.KITKAT) public void hide(){\n  if (!isShow)   return;\n  try {\n    hide.invoke(mTN);\n  }\n catch (  InvocationTargetException|IllegalAccessException e) {\n    e.printStackTrace();\n  }\n  isShow=false;\n}\n", "nl": "Close the view if it's showing, or don't show it if it isn't showing yet. You do not normally have to call this.  Normally view will disappear on its own after the appropriate duration.", "id": "13169"}
{"code": "public void addAll(List<String> stringValues){\n  for (  String stringValue : stringValues) {\n    add(stringValue);\n  }\n}\n", "nl": "Add all the strings in the list to this column", "id": "33264"}
{"code": "public Boolean removeColumn(Column columnToRemove){\n  return this.columns.remove(columnToRemove);\n}\n", "nl": "Method to remove a column.", "id": "227"}
{"code": "private static double computeJSD(double[] px,double[] py){\n  double[] m=computeMean(px,py);\n  return 0.5 * (computeKLD(px,m) + computeKLD(py,m));\n}\n", "nl": "compute the Jensen-Shannon divergence", "id": "35402"}
{"code": "protected WallSearchQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Show extended post info.", "id": "35439"}
{"code": "@LegacyNetworkConstant private int convertConstraintsToLegacyNetConstant(int constraintMap){\n  int reqNet=LEGACY_NETWORK_ANY;\n  reqNet=(constraintMap & Constraint.ON_ANY_NETWORK) == Constraint.ON_ANY_NETWORK ? LEGACY_NETWORK_CONNECTED : reqNet;\n  reqNet=(constraintMap & Constraint.ON_UNMETERED_NETWORK) == Constraint.ON_UNMETERED_NETWORK ? LEGACY_NETWORK_UNMETERED : reqNet;\n  return reqNet;\n}\n", "nl": "Converts a bitmap of Constraint values into a LegacyNetworkConstraint constant (int).", "id": "437"}
{"code": "public static void assertSame(double expected,double actual){\n  Assert.assertEquals(expected,actual,0);\n}\n", "nl": "Verifies that the two arguments are exactly the same, either both NaN or infinities of same sign, or identical floating point values.", "id": "21622"}
{"code": "public static Date parseDate(final String dateString){\n  if (dateString == null) {\n    return null;\n  }\n  return DATE_FORMATTER.parseDateTime(dateString).toDate();\n}\n", "nl": "Parses the given string into a Date using the supported date formats. Returns null if the string cannot be parsed.", "id": "39828"}
{"code": "public void write(Writer w) throws IOException {\n  boolean useOriginal=(originalData != null && disabledSamples.size() > 0);\n  write(w,useOriginal);\n}\n", "nl": "write the datatable", "id": "52487"}
{"code": "public static String[] splitMultiplePacket(String packet){\n  String _partitioningPacket[]=packet.split(Settings.sReceiverSplitMultipleToken);\n  return _partitioningPacket;\n}\n", "nl": "split the multiple packet to packets", "id": "14576"}
{"code": "public void addRelationshipFilter(RelatedFinder relatedFinder,Operation filter){\n  Operation existing=this.filters.get(relatedFinder);\n  this.filters.put(relatedFinder,existing == null ? filter : existing.or(filter));\n}\n", "nl": "Add a filter to be applied to the result of a traversed relationship.", "id": "37126"}
{"code": "public void onPatchServiceResult(boolean isUpgradePatch){\n  if (!isRetryEnable) {\n    TinkerLog.w(TAG,\"onPatchServiceResult retry disabled, just return\");\n    return;\n  }\n  if (!isUpgradePatch) {\n    TinkerLog.w(TAG,\"onPatchServiceResult is not upgrade patch, just return\");\n    return;\n  }\n  if (retryInfoFile.exists()) {\n    SharePatchFileUtil.safeDeleteFile(retryInfoFile);\n  }\n  if (tempPatchFile.exists()) {\n    SharePatchFileUtil.safeDeleteFile(tempPatchFile);\n  }\n}\n", "nl": "if we receive any result, we can delete the temp retry info file", "id": "22409"}
{"code": "public boolean isEmpty(){\n  return this.getEntries().size() == 0;\n}\n", "nl": "Returns true if the list is empty", "id": "30048"}
{"code": "public static void write(File file,CharSequence data,String encoding) throws IOException {\n  write(file,data,encoding,false);\n}\n", "nl": "Writes a CharSequence to a file creating the file if it does not exist.", "id": "17213"}
{"code": "public void refreshNode(DefaultMutableTreeNode nodeToRefresh){\n  if (treeModel != null) {\n    treeModel.reload(nodeToRefresh);\n  }\n}\n", "nl": "Refresh node.", "id": "21772"}
{"code": "public static boolean isInRange(final String currentRelease,final ReleaseStatus release){\n  if ((new DefaultArtifactVersion(currentRelease).compareTo(new DefaultArtifactVersion(release.getFromVersion())) >= 0) && (new DefaultArtifactVersion(currentRelease).compareTo(new DefaultArtifactVersion(release.getToVersion())) <= 0)) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Checks whether the current release is within the range of the given release to check.", "id": "35303"}
{"code": "public ServerConfiguration enableDurableWrite(boolean enabled){\n  setProperty(SERVER_DURABLE_WRITE_ENABLED,enabled);\n  return this;\n}\n", "nl": "Set the flag to enable/disable durable write", "id": "43771"}
{"code": "public static boolean canDeconstruct(ItemStack stack){\n  return stack != null && (stack.getItem() instanceof IDeconstructable) && ((IDeconstructable)stack.getItem()).canDestroy(stack);\n}\n", "nl": "Determines if the inputted item stack can be destroyed in the Engineering Table, meaning it implements IDeconstructable.", "id": "26874"}
{"code": "public void handleData(ByteString bytes){\n  this.data=bytes;\n}\n", "nl": "Handle data.", "id": "27085"}
{"code": "@Override public byte[] next(){\n  if (iteratorIndex >= dictionaryChunks.get(outerIndex).size()) {\n    iteratorIndex=0;\n    outerIndex++;\n  }\n  byte[] value=dictionaryChunks.get(outerIndex).get(iteratorIndex);\n  currentIndex++;\n  iteratorIndex++;\n  return value;\n}\n", "nl": "Returns the next element in the iteration. The method pics the next elements from the first inner list till first is not finished, pics the second inner list ...", "id": "43982"}
{"code": "public static int readLittleEndianInt(DataInputStream dataStream) throws IOException {\n  int bits=0x00000000;\n  for (int shift=0; shift < 32; shift+=8) {\n    int byteRead=(0x000000ff & dataStream.readByte());\n    bits|=(byteRead << shift);\n  }\n  return bits;\n}\n", "nl": "Reads the next little-endian integer from the given DataInputStream.", "id": "23237"}
{"code": "public boolean isWordWrapEnabled(){\n  return mWordWrapEnabled;\n}\n", "nl": "If this is set, then word wrapping the legend is enabled. This means the legend will not be cut off if too long.", "id": "56715"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "16460"}
{"code": "public void onCompletion(MediaPlayer player){\n  Log.d(LOG_TAG,\"on completion is calling stopped\");\n  this.setState(STATE.MEDIA_STOPPED);\n}\n", "nl": "Callback to be invoked when playback of a media source has completed.", "id": "42909"}
{"code": "public void closeDriver(){\n  if (mCamera != null) {\n    mCamera.release();\n    mInitialized=false;\n    mPreviewing=false;\n    mCamera=null;\n  }\n}\n", "nl": "Closes the camera driver if still in use.", "id": "28778"}
{"code": "public static boolean isConnected(Context context){\n  NetworkInfo info=Connectivity.getNetworkInfo(context);\n  return (info != null && info.isConnected());\n}\n", "nl": "Check if there is any connectivity", "id": "35668"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPTransfer_A_TO_SELF(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200818,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] transferred %num0 DP by using [%SkillName].", "id": "45406"}
{"code": "public VideoSaveQuery wallpost(Boolean value){\n  return unsafeParam(\"wallpost\",value);\n}\n", "nl": "Post the saved video on a user's wall", "id": "36798"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "43036"}
{"code": "@Override public DocumentType createDocumentType(String qualifiedName,String publicID,String systemID){\n  checkQName(qualifiedName);\n  return new DocumentTypeImpl(null,qualifiedName,publicID,systemID);\n}\n", "nl": "Introduced in DOM Level 2. <p> <p/> Creates an empty DocumentType node.", "id": "46040"}
{"code": "public String checkin(IResource[] resources,final String comment,boolean keepLocks,final int depth,IProgressMonitor progress) throws TeamException {\n  CheckinResourcesCommand command=new CheckinResourcesCommand(getSVNWorkspaceRoot(),resources,depth,comment,keepLocks);\n  command.run(progress);\n  return command.getPostCommitError();\n}\n", "nl": "Checkin any local changes to given resources", "id": "41747"}
{"code": "public boolean fastContains(double p){\n  if (isInverted()) {\n    return (p >= lo() || p <= hi()) && !isEmpty();\n  }\n else {\n    return p >= lo() && p <= hi();\n  }\n}\n", "nl": "Return true if the interval (which is closed) contains the point 'p'. Skips the normalization of 'p' from -Pi to Pi.", "id": "30282"}
{"code": "private static boolean isSeparator(char ch){\n  return ch == UNIX_SEPARATOR || ch == WINDOWS_SEPARATOR;\n}\n", "nl": "Checks if the character is a separator.", "id": "9121"}
{"code": "public final void unload(T t){\n  if (t != null) {\n    objects.invalidate(t.getId());\n  }\n}\n", "nl": "Removes and unloads the object from the manager", "id": "43905"}
{"code": "public WallSearchQueryWithExtended count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Count of posts to return.", "id": "50291"}
{"code": "GSMessageImpl duplicate() throws JMSException {\n  GSObjectMessageImpl dup=new GSObjectMessageImpl();\n  copyTo(dup);\n  return dup;\n}\n", "nl": "Creates a copy of this message.", "id": "45451"}
{"code": "public void populateExpression(Expression expression){\n  if (valueTextField != null) {\n    valueTextField.setText(expression.toString());\n  }\n}\n", "nl": "Populate expression.", "id": "37545"}
{"code": "public synchronized void closeDriver(){\n  if (camera != null) {\n    camera.release();\n    camera=null;\n  }\n}\n", "nl": "Closes the camera driver if still in use.", "id": "21099"}
{"code": "public Predicate selectPredicate(Schema sch){\n  Predicate result=new Predicate();\n  for (  Term t : terms)   if (t.isApplicableTo(sch))   result.terms.add(t);\n  if (result.terms.size() == 0)   return null;\n else   return result;\n}\n", "nl": "Returns the sub-predicate that applies to the specified schema.", "id": "30728"}
{"code": "public void resetUploadSettings(){\n  this.isUploading=false;\n  this.uploadedSize=0;\n  this.uploadData=null;\n}\n", "nl": "This method will clear out all upload data", "id": "781"}
{"code": "public ISourceCommandTag findCommandTag(final Long commandTagId){\n  Map<Long,EquipmentConfiguration> equipmentMap=getProcessConfiguration().getEquipmentConfigurations();\n  for (  EquipmentConfiguration equipmentConfiguration : equipmentMap.values()) {\n    if (equipmentConfiguration.hasSourceCommandTag(commandTagId)) {\n      return equipmentConfiguration.getSourceCommandTag(commandTagId);\n    }\n  }\n  return null;\n}\n", "nl": "Searches a command tag with the provided id and returns the first found.", "id": "40664"}
{"code": "public static boolean isInitialized(Context ctx){\n  vitamioPackage=ctx.getPackageName();\n  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + \"lib/\";\n  return true;\n}\n", "nl": "Check if Vitamio is initialized at this device", "id": "34690"}
{"code": "public Builder clickable(Boolean clickable){\n  this.clickable=clickable;\n  return this;\n}\n", "nl": "If false, the vector will not emit mouse events and will act as a part of the underlying map. </br> default true", "id": "6864"}
{"code": "public boolean isNavBarTintEnabled(){\n  return mNavBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system navigation bar?", "id": "11078"}
{"code": "public void loadDataStringFromFile(String sFilename) throws java.io.IOException, java.io.FileNotFoundException {\n  String sDataString=utils.loadFileToStringWithNewlines(sFilename);\n  setDataString(sDataString);\n}\n", "nl": "Opens a text file and sets its contents as data string", "id": "13197"}
{"code": "public Builder useAutoTag(boolean val){\n  useAutoTag=val;\n  return this;\n}\n", "nl": "If set to true, then use class name as tag. The concat global tag config is still valid.", "id": "26860"}
{"code": "@PostConstruct public void init(){\n  highPriorityBuffer=new SynchroBuffer(100,200,100,SynchroBuffer.DUPLICATE_OK,10000);\n  highPriorityBuffer.setSynchroBufferListener(new HighPriorityListener());\n  highPriorityBuffer.enable();\n  lowPriorityBuffer=new SynchroBuffer(100,500,100,SynchroBuffer.DUPLICATE_OK,10000);\n  lowPriorityBuffer.setSynchroBufferListener(new LowPriorityListener());\n  lowPriorityBuffer.enable();\n}\n", "nl": "Init method called on bean initialization.", "id": "34179"}
{"code": "private synchronized void trim(){\n  while (mCurrentSize > mSizeLimit) {\n    byte[] buf=mBuffersByLastUse.remove(0);\n    mBuffersBySize.remove(buf);\n    mCurrentSize-=buf.length;\n  }\n}\n", "nl": "Removes buffers from the pool until it is under its size limit.", "id": "9821"}
{"code": "public static TestLookupDimensionConfig buildStandardLookupDimensionConfig(TestApiDimensionName dimensionName,List<String> namespaces){\n  return new TestLookupDimensionConfig(buildStandardDimensionConfig(dimensionName),namespaces);\n}\n", "nl": "Builds a lookup dimension config with a namespace.", "id": "1511"}
{"code": "public void mouseMoved(float x,float y){\n  if (mMoveOnlyMode) {\n    return;\n  }\n  mClickListener.mEnableBaseline=false;\n  mHoverListener.mEnableBaseline=false;\n  mBaselineTimer.restart();\n  updateFromHoverListener(mViewTransform.getSwingFX(x),mViewTransform.getSwingFY(y));\n}\n", "nl": "Mouse moved handling", "id": "47716"}
{"code": "public int addOrderTerm(GenericValue orderTerm){\n  orderTerms.add(orderTerm);\n  return orderTerms.indexOf(orderTerm);\n}\n", "nl": "Add an orderTerm to the order", "id": "34440"}
{"code": "public static String formatTime(Date date,String dateTimeFormat,Locale locale,TimeZone timeZone){\n  return UtilDateTime.toTimeFormat(dateTimeFormat,timeZone,locale).format(date);\n}\n", "nl": "SCIPIO: Formats a <code>Date</code> into a time <code>String</code> using the specified locale and time zone, or using the specified format.", "id": "43297"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SUBMIT_PETITION_FAILED_OUT_OF_QUOTA(int num0){\n  return new SM_SYSTEM_MESSAGE(1300547,num0);\n}\n", "nl": "You have used up your daily quota of %num0 Support Petitions. You cannot make any more inquiries with this account today.", "id": "49735"}
{"code": "public AdsUpdateCampaignsQuery updateCampaigns(UserActor actor,int accountId,String data){\n  return new AdsUpdateCampaignsQuery(getClient(),actor,accountId,data);\n}\n", "nl": "Edits advertising campaigns.", "id": "48607"}
{"code": "public static void hideToast(){\n  if (null != toast) {\n    toast.cancel();\n  }\n}\n", "nl": "Hide the toast, if any.", "id": "5562"}
{"code": "public static void checkState(boolean expression,Object errorMessage){\n  if (!expression) {\n    throw new IllegalStateException(String.valueOf(errorMessage));\n  }\n}\n", "nl": "Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method.", "id": "42967"}
{"code": "public static Style amber(){\n  final Style style=new Style();\n  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_AMBER);\n  return style;\n}\n", "nl": "Default material amber transparent style for SuperToasts.", "id": "54485"}
{"code": "public static boolean exists(String name){\n  if (cache.contains(name)) {\n    return true;\n  }\n  try {\n    if (Helper.exists(name,Access.class)) {\n      cache.add(name);\n      return true;\n    }\n  }\n catch (  Exception e1) {\n    log.error(e1.getMessage(),e1);\n  }\n  return false;\n}\n", "nl": "check exists of the name", "id": "57893"}
{"code": "public void writeFileContent(String content,Path path) throws CommandException {\n  try {\n    Files.write(content,path.toFile(),StandardCharsets.UTF_8);\n  }\n catch (  IOException e) {\n    throw new CommandException(\"Cannot write file content in path: \" + path.toString(),e);\n  }\n}\n", "nl": "Writes the content into a file in UTF8", "id": "38192"}
{"code": "public GroupsGetRequestsQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of results to return.", "id": "2146"}
{"code": "@Deprecated public static String percentageWithTwoCharacters(final double decimalNumber){\n  final int percentage=(int)Math.round(decimalNumber * PERCENTAGE_FACTOR);\n  return (percentage < PERCENTAGE_FACTOR) ? StringUtils.leftPad(String.valueOf(percentage),2,'0') : \"XX\";\n}\n", "nl": "Returns the percentage with two characters, based on a given double decimal number (like 0.7531).", "id": "57652"}
{"code": "public static void d(String tag,String msg){\n  d(tag,msg,null);\n}\n", "nl": "Prints a message at DEBUG priority.", "id": "42695"}
{"code": "public int keyAt(int index){\n  if (mGarbage) {\n    gc();\n  }\n  return mKeys[index];\n}\n", "nl": "Given an index in the range <code>0...size()-1</code>, returns the key from the <code>index</code>th key-value mapping that this SparseArray stores.", "id": "55541"}
{"code": "public RequestHandle delete(Context context,String url,ResponseHandlerInterface responseHandler){\n  final HttpDelete delete=new HttpDelete(url);\n  return sendRequest(httpClient,httpContext,delete,null,responseHandler,context);\n}\n", "nl": "Perform a HTTP DELETE request.", "id": "27716"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Root_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200282,skillname);\n}\n", "nl": "You became immobilized after using [%SkillName].", "id": "58298"}
{"code": "void announceforAccessibility(){\n  mMessageView.announceForAccessibility(mMessageView.getContentDescription());\n}\n", "nl": "Sends an accessibility event to mMessageView announcing that this window was added so that the mMessageView content description is read aloud if accessibility is enabled.", "id": "4477"}
{"code": "public static void writeLines(File file,Collection<?> lines,boolean append) throws IOException {\n  writeLines(file,null,lines,null,append);\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to the specified <code>File</code> line by line. The default VM encoding and the default line ending will be used.", "id": "17804"}
{"code": "public WallReportPostQuery reportPost(UserActor actor,int ownerId,int postId){\n  return new WallReportPostQuery(getClient(),actor,ownerId,postId);\n}\n", "nl": "Reports (submits a complaint about) a post on a user wall or community wall.", "id": "35803"}
{"code": "public static JsonRootNode readJSON(File file){\n  StringBuffer strings=FileUtility.readFromFile(file);\n  return jsonFromString(strings.toString());\n}\n", "nl": "Read a JSON file and return a JSON object", "id": "52007"}
{"code": "public void requestAutoFocus(Handler handler,int message){\n  if (camera != null && previewing) {\n    autoFocusCallback.setHandler(handler,message);\n    camera.autoFocus(autoFocusCallback);\n  }\n}\n", "nl": "Asks the camera hardware to perform an autofocus.", "id": "10726"}
{"code": "@Override public void syncStateChanged(){\n  boolean wasSyncInitialized=mIsBackendInitialized;\n  boolean wasPassphraseRequired=mIsPassphraseRequired;\n  mIsBackendInitialized=mProfileSyncService.isBackendInitialized();\n  mIsPassphraseRequired=mIsBackendInitialized && mProfileSyncService.isPassphraseRequiredForDecryption();\n  if (mIsBackendInitialized != wasSyncInitialized || mIsPassphraseRequired != wasPassphraseRequired) {\n    updateSyncStateFromSwitch();\n  }\n}\n", "nl": "Listen to sync state changes. If the user has just turned on sync, this listener is needed in order to enable the encryption settings once the backend has initialized.", "id": "36361"}
{"code": "public void onNewIntent(Intent intent){\n}\n", "nl": "Called when the activity receives a new intent.", "id": "17735"}
{"code": "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  servID=new ServiceID(in);\n  if (item instanceof Item)   item=((Item)item).get();\n}\n", "nl": "Reads the default serializable field value for this instance, followed by the item's service ID encoded as specified by the ServiceID.writeBytes method. If the value of the item field is an Item instance, converts it to a ServiceItem.", "id": "34903"}
{"code": "public float expansion_factor(){\n  return soot.PhaseOptions.getFloat(options,\"expansion-factor\");\n}\n", "nl": "Expansion Factor -- . Determines the maximum allowed expansion of a method. Inlining  will cause the method to grow by a factor of no more than the  Expansion Factor.", "id": "11704"}
{"code": "public void confirm(){\n  okButton.click();\n  bobcatWait.withTimeout(Timeouts.SMALL).until(elementNotPresentOrVisible(By.cssSelector(CSS)));\n}\n", "nl": "Confirms the window by clicking OK button, waits until it's not visible.", "id": "52445"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Blind_END_A(String value0){\n  return new SM_SYSTEM_MESSAGE(1201126,value0);\n}\n", "nl": "%0 is no longer blinded.", "id": "15516"}
{"code": "public static boolean applyCount(Context context,int badgeCount){\n  try {\n    applyCountOrThrow(context,badgeCount);\n    return true;\n  }\n catch (  ShortcutBadgeException e) {\n    Log.e(LOG_TAG,\"Unable to execute badge\",e);\n    return false;\n  }\n}\n", "nl": "Tries to update the notification count", "id": "30749"}
{"code": "public GroupsCreateQuery publicCategory(Integer value){\n  return unsafeParam(\"public_category\",value);\n}\n", "nl": "Set public category", "id": "31957"}
{"code": "public static Bitmap scaleImage(Bitmap src,float scaleWidth,float scaleHeight){\n  if (src == null) {\n    return null;\n  }\n  Matrix matrix=new Matrix();\n  matrix.postScale(scaleWidth,scaleHeight);\n  return Bitmap.createBitmap(src,0,0,src.getWidth(),src.getHeight(),matrix,true);\n}\n", "nl": "scale image", "id": "49539"}
{"code": "public static S2LatLngRect empty(){\n  return new S2LatLngRect(R1Interval.empty(),S1Interval.empty());\n}\n", "nl": "The canonical empty rectangle", "id": "54421"}
{"code": "public static final void sort(double[] a,int[] b,int begin,int end){\n  mergesort(a,b,begin,end - 1);\n}\n", "nl": "Sort two arrays simultaneously, using the sort order of the values in the first array to determine the sort order for both arrays.", "id": "19364"}
{"code": "public List<String> provideWhiteList(){\n  LinkedList<String> whiteList=new LinkedList<>();\n  whiteList.add(\"org.chromium\");\n  return whiteList;\n}\n", "nl": "Provide white list, entry in white list will not be shown in ui list.", "id": "7388"}
{"code": "@NotNull public DetectFaceAction detectFace(boolean returnFaceId,boolean returnFaceLandmarks,@NotNull EnumSet<FaceAttributes> returnFaceAttributes,@NotNull InputStream image){\n  return new DetectFaceAction(cognitiveContext,returnFaceId,returnFaceLandmarks,returnFaceAttributes,image);\n}\n", "nl": "* Detect human faces in an image and returns face locations, and optionally with face ID, landmarks, and attributes. <p> Optional parameters for returning face ID, landmarks, and attributes. Attributes include age, gender, smile intensity, facial hair and head-pose. Face ID is for other APIs use including Face - Identify, Face - Verify, and Face - Find Similar. The face ID will expire in 24 hours after detection call. JPEG, PNG, GIF(the first frame), and BMP are supported. The image file size should be no larger than 4MB. The detectable face size is between 36x36 to 4096x4096 pixels. The faces out of this range will not be detected. A maximum of 64 faces could be returned for an image. The returned faces are ranked by face rectangle size in descending order. Some faces may not be detected for technical challenges, e.g. very large face angles (head-pose) or large occlusion. Frontal and near-frontal faces have the best results. Attributes (age, gender, headPose, smile and facialHair, and glasses) are still experimental and may not be very accurate. HeadPose's pitch value is reserved as 0.", "id": "33102"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "2159"}
{"code": "public int code(){\n  return rawResponse.code();\n}\n", "nl": "HTTP status code.", "id": "42033"}
{"code": "public static InputStream toInputStream(CharSequence input,Charset encoding){\n  return toInputStream(input.toString(),encoding);\n}\n", "nl": "Convert the specified CharSequence to an input stream, encoded as bytes using the specified character encoding.", "id": "46169"}
{"code": "private ODEStateAndDerivative state(double t){\n  return new ODEStateAndDerivative(t,new double[0],new double[0]);\n}\n", "nl": "Create a state at a time.", "id": "8104"}
{"code": "public static String removeLineEnds(String text){\n  return text.replaceAll(\"[\\r\\n]+\",\" \").trim();\n}\n", "nl": "Remove all line-ends like '\\r\\n' or '\\n', make sure the returned text contains only one line.", "id": "14096"}
{"code": "@Override public void undoAction(UndoInterface undoRedoObject){\n  if ((table != null) && (undoRedoObject != null)) {\n    if (undoRedoObject.getOldValue() instanceof ColorMap) {\n      ColorMap oldValue=(ColorMap)undoRedoObject.getOldValue();\n      populateField(oldValue);\n    }\n  }\n}\n", "nl": "Undo action.", "id": "25733"}
{"code": "private boolean isAssignableFrom(ServiceType[] ifaces){\n  for (int i=ifaces.length; --i >= 0; ) {\n    if (hash == ifaces[i].hash || isAssignableFrom(ifaces[i].interfaces))     return true;\n  }\n  return false;\n}\n", "nl": "Test if this isAssignableFrom any of the given interface types. Note ifaces cannot be null.", "id": "42125"}
{"code": "@Override public Object illegal(Metadata<DTO> metadata){\n  return null;\n}\n", "nl": "Provide a null reference as the illegal value.", "id": "49223"}
{"code": "public Iterator sourceMethods(){\n  return new ArrayList(srcMap.keySet()).iterator();\n}\n", "nl": "Returns an iterator over all methods that are the sources of at least one edge.", "id": "37035"}
{"code": "public static void deleteAircraft(AirMapAircraft aircraft,AirMapCallback<Void> listener){\n  String url=String.format(pilotAircraftByIdUrl,AirMap.getUserId(),aircraft.getAircraftId());\n  AirMap.getClient().delete(url,new VoidCallback(listener));\n}\n", "nl": "Delete an aircraft", "id": "41511"}
{"code": "public AttributesImpl atts(){\n  return theAtts;\n}\n", "nl": "Return the attributes as an AttributesImpl object. Returning an AttributesImpl makes the attributes mutable.", "id": "3541"}
{"code": "@Override public String toString(){\n  return super.toString() + \"[sumDirectoryContents=\" + sumDirectoryContents+ \"]\";\n}\n", "nl": "String representation of this file comparator.", "id": "7790"}
{"code": "protected AdsCheckLinkQuery accountId(int value){\n  return unsafeParam(\"account_id\",value);\n}\n", "nl": "Account ID.", "id": "45142"}
{"code": "private void tryScrollBackToTop(){\n  if (!mPtrIndicator.isUnderTouch()) {\n    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);\n  }\n}\n", "nl": "Scroll back to to if is not under touch", "id": "43876"}
{"code": "public void resetCustom(){\n  mIsLegendCustom=false;\n}\n", "nl": "Calling this will disable the custom legend labels (set by setCustom(...)). Instead, the labels will again be calculated automatically (after notifyDataSetChanged() is called).", "id": "44571"}
{"code": "public boolean isCellEditable(Object node,int column){\n  return getColumnClass(column) == TreeTableModel.class;\n}\n", "nl": "By default, make the column with the Tree in it the only editable one. Making this column editable causes the JTable to forward mouse and keyboard events in the Tree column to the underlying JTree.", "id": "26258"}
{"code": "public DefaultHibernateSpaceDataSourceConfigurer augmentInitialLoadEntries(boolean augmentInitialLoadEntries){\n  this.augmentInitialLoadEntries=augmentInitialLoadEntries;\n  return this;\n}\n", "nl": "Feature switch for initial load entries augmentation (creation of partition-specific query for entries) Defaults to <code>true</code>.", "id": "28987"}
{"code": "public void invalidate(int row){\n  if (m_tuples == null || row < 0 || row >= m_tuples.length) {\n    return;\n  }\n else   if (m_tuples[row] != null) {\n    m_tuples[row].invalidate();\n    m_tuples[row]=null;\n  }\n}\n", "nl": "Invalidate the tuple at the given row.", "id": "43333"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "15123"}
{"code": "synchronized public int writeBulk(List<LogRecord> records) throws IOException {\n  int numRecords=0;\n  for (  LogRecord r : records) {\n    write(r);\n    numRecords++;\n  }\n  return numRecords;\n}\n", "nl": "Write bulk of records. (TODO: moved this method to log writer level)", "id": "28950"}
{"code": "protected boolean isValidQuery(String query){\n  if (query == null) {\n    return true;\n  }\n  return QUERY_PATTERN.matcher(query).matches();\n}\n", "nl": "Returns true if the query is null or it's a properly formatted query string.", "id": "47584"}
{"code": "public Activity put(String key,Activity activity){\n  return (Activity)m_map.put(key,activity);\n}\n", "nl": "Associates the given key with the given Activity", "id": "52901"}
{"code": "@Deprecated public MapCursor addCursor(int x,int y,byte direction,byte type){\n  return addCursor(x,y,direction,type,true);\n}\n", "nl": "Add a cursor to the collection.", "id": "148"}
{"code": "@Override public void updateUserLayers(){\n  createUserLayerDataSources();\n  notifyDataSourceLoaded();\n}\n", "nl": "Recreate inline data sources for user layers.", "id": "54940"}
{"code": "public void allow(PermissionFlag flag,Identity<?> identity){\n  strictPermission.computeIfAbsent(flag,null).put(identity,DIRECT_ALLOW);\n}\n", "nl": "Directly allow a flag for an ID, this will take priority over the default permission  and will override the previous direct permission", "id": "4433"}
{"code": "public boolean removeAll(Collection<?> collection){\n  return MapCollections.removeAllHelper(this,collection);\n}\n", "nl": "Remove all keys in the array map that exist in the given collection.", "id": "40541"}
{"code": "public void removeEventListener(ZWaveEventListener eventListener){\nsynchronized (zwaveEventListeners) {\n    zwaveEventListeners.remove(eventListener);\n  }\n}\n", "nl": "Remove a listener for ZWave events to this controller.", "id": "21281"}
{"code": "public MarketSearchQuery sort(MarketSearchSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Items sort", "id": "28631"}
{"code": "public boolean execute(String action,CordovaArgs args,CallbackContext callbackContext) throws JSONException {\n  return false;\n}\n", "nl": "Executes the request. This method is called from the WebView thread. To do a non-trivial amount of work, use: cordova.getThreadPool().execute(runnable); To run on the UI thread, use: cordova.getActivity().runOnUiThread(runnable);", "id": "30770"}
{"code": "public static void deleteFile(final File file){\n  deleteFile(file,false);\n}\n", "nl": "Deletes the file (which can't be a dir).", "id": "22081"}
{"code": "public AudioSaveQuery hash(String value){\n  return unsafeParam(\"hash\",value);\n}\n", "nl": "This parameter is returned when the audio file is uploaded to the server.", "id": "26403"}
{"code": "private boolean scrollToChildRect(Rect rect,boolean immediate){\n  final int delta=computeScrollDeltaToGetChildRectOnScreen(rect);\n  final boolean scroll=delta != 0;\n  if (scroll) {\n    if (immediate) {\n      scrollBy(delta,0);\n    }\n else {\n      smoothScrollBy(delta,0);\n    }\n  }\n  return scroll;\n}\n", "nl": "If rect is off screen, scroll just enough to get it (or at least the first screen size chunk of it) on screen.", "id": "17236"}
{"code": "public MessagesSendQuery peerId(Integer value){\n  return unsafeParam(\"peer_id\",value);\n}\n", "nl": "Set peer id", "id": "55836"}
{"code": "private static boolean isUppercaseLetter(char ch){\n  return ('A' <= ch && ch <= 'Z');\n}\n", "nl": "Returns true if the given character is an uppercase letter (A-Z).", "id": "15523"}
{"code": "public synchronized int size(){\n  return count;\n}\n", "nl": "Return the current size of the byte array.", "id": "29551"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SubTypeBoostResist_ME_TO_B(String skilltarget,String value0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200572,skilltarget,value0,skillname);\n}\n", "nl": "[%SkillTarget]'s %0 resistance effects were weakened as you used [%SkillName].", "id": "40291"}
{"code": "public boolean context_counts(){\n  return soot.PhaseOptions.getBoolean(options,\"context-counts\");\n}\n", "nl": "Print Context Counts -- Print number of contexts for each method. Causes Paddle to print the number of contexts for each method  and call edge, and the number of equivalence classes of contexts  for each variable node.", "id": "17747"}
{"code": "public static INDArray toArray(Collection<Writable> record){\n  return toArray(record,record.size());\n}\n", "nl": "Convert a record to an ndarray", "id": "49042"}
{"code": "public void addParameterJacobianProvider(final NamedParameterJacobianProvider provider){\n  jacobianProviders.add(provider);\n}\n", "nl": "Add a parameter Jacobian provider.", "id": "45602"}
{"code": "public boolean selectServiceTab(String url){\n  url=url.replaceAll(\".*://\",\"\");\n  for (int i=0; i < tabbedPane.getTabCount(); i++) {\n    if (tabbedPane.getTitleAt(i).equalsIgnoreCase(url)) {\n      tabbedPane.setSelectedIndex(i);\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "select the given service tab, if present", "id": "29206"}
{"code": "public boolean isTooLong(){\n  return fullNickname.length() > MAX_NICKNAME_LENGTH;\n}\n", "nl": "Checks if the original planned nickname was too long.", "id": "14622"}
{"code": "private void addColumns(List<ColumnModel> columnModelList){\n  LogUtil.d(TAG,\"do addColumn\");\n  execute(getAddColumnSQLs(columnModelList),mDb);\n  for (  ColumnModel columnModel : columnModelList) {\n    mTableModelDB.addColumnModel(columnModel);\n  }\n}\n", "nl": "When some fields are added into the class after last upgrade, the table should synchronize the changes by adding the corresponding columns.", "id": "35422"}
{"code": "public void init$Children(){\n  children=new ASTNode[3];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "21727"}
{"code": "public static void verifyWhichActivityToSwitch(Context mContext,String source,String dest){\n  UserInfoActivity.start(mContext,dest);\n}\n", "nl": "to determine which activity we should switch to", "id": "48723"}
{"code": "public boolean add(final T object){\n  final boolean added=this.data.add(object);\n  this.notifyItemInserted(this.data.size() + 1);\n  return added;\n}\n", "nl": "Adds the specified object at the end of the data.", "id": "39482"}
{"code": "public boolean enabled(){\n  return soot.PhaseOptions.getBoolean(options,\"enabled\");\n}\n", "nl": "Enabled -- .", "id": "4279"}
{"code": "public void addException(Access node){\n  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the Exception list.", "id": "38627"}
{"code": "public static boolean sm(double a,double b){\n  return (b - a > SMALL);\n}\n", "nl": "Tests if a is smaller than b.", "id": "43775"}
{"code": "public static String[] nullToBlank(final String[] stringArray){\n  String[] result=stringArray;\n  if (stringArray == null) {\n    result=new String[]{};\n  }\n  return result;\n}\n", "nl": "when string[] is null return blank array", "id": "9726"}
{"code": "public PhotosSaveMarketPhotoQuery saveMarketPhoto(UserActor actor,String photo,int server,String hash){\n  return new PhotosSaveMarketPhotoQuery(getClient(),actor,photo,server,hash);\n}\n", "nl": "Saves market photos after successful uploading.", "id": "55921"}
{"code": "public double norm2(){\n  return (new SingularValueDecomposition(this).norm2());\n}\n", "nl": "Two norm", "id": "16086"}
{"code": "public void updateSizes(int size){\n  if (size == LARGE) {\n    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);\n  }\n else {\n    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);\n  }\n}\n", "nl": "Set the overall size for the progress spinner. This updates the radius and stroke width of the ring.", "id": "44848"}
{"code": "public int flags(){\n  return theFlags;\n}\n", "nl": "Returns the flags associated with this element type.", "id": "47359"}
{"code": "public void clear(){\n  coveringView=null;\n  touchPoint=null;\n}\n", "nl": "Clear informations.", "id": "9309"}
{"code": "private boolean regionDialingFromMatchesNumber(PhoneNumber number,String regionDialingFrom){\n  List<String> regionCodes=getRegionCodesForCountryCode(number.getCountryCode());\n  return regionCodes.contains(regionDialingFrom);\n}\n", "nl": "Helper method to check that the country calling code of the number matches the region it's being dialed from.", "id": "24881"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_BUY_ITEM_MULTI(String value1,String value0s){\n  return new SM_SYSTEM_MESSAGE(1300785,value1,value0s);\n}\n", "nl": "You have purchased %1 %0s.", "id": "9992"}
{"code": "public static SM_SYSTEM_MESSAGE STR_DECOMPOUND_ERROR_NOT_DECOMPOUNDABLE_ITEM(String value0){\n  return new SM_SYSTEM_MESSAGE(1400859,value0);\n}\n", "nl": "%0 cannot break the combination.", "id": "38302"}
{"code": "public boolean isCellEditable(int row,int col){\n  if (!m_rows.isValidRow(row)) {\n    return false;\n  }\n else {\n    return getColumn(col).isCellEditable(row);\n  }\n}\n", "nl": "Indicates if the value of the given table cell can be changed.", "id": "862"}
{"code": "public static String diagPrefixForLint(String aspectName,String ruleName){\n  return String.format(\"(lint) %s-%s: \",aspectName,ruleName);\n}\n", "nl": "Returns a prefix to be used in diag messages representing linter warnings.", "id": "50857"}
{"code": "public void onAccessibilityStatusChanged(boolean enabled){\n  if (enabled && (mNodeProvider == null)) {\n    mAccessibilityView=new View(getContext());\n    addView(mAccessibilityView);\n    mNodeProvider=new CompositorAccessibilityProvider(mAccessibilityView);\n    ViewCompat.setAccessibilityDelegate(mAccessibilityView,mNodeProvider);\n  }\n}\n", "nl": "Called when the accessibility enabled state changes.", "id": "52666"}
{"code": "<T>T onFindLast(Class<T> modelClass,boolean isEager){\n  List<T> dataList=query(modelClass,null,null,null,null,null,\"id desc\",\"1\",getForeignKeyAssociations(modelClass.getName(),isEager));\n  if (dataList.size() > 0) {\n    return dataList.get(0);\n  }\n  return null;\n}\n", "nl": "The open interface for other classes in CRUD package to query the last record in a table. If the result set is empty, gives null back.", "id": "31218"}
{"code": "public void attribute(String elemName,String attrName,String type,String value){\n  ElementType e=getElementType(elemName);\n  if (e == null) {\n    throw new Error(\"Attribute \" + attrName + \" specified for unknown element type \"+ elemName);\n  }\n  e.setAttribute(attrName,type,value);\n}\n", "nl": "Add or replace a default attribute for an element type in this schema.", "id": "1872"}
{"code": "protected PhotosSaveMessagesPhotoQuery photo(String value){\n  return unsafeParam(\"photo\",value);\n}\n", "nl": "Parameter returned when photo upload to the server.", "id": "41834"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "1440"}
{"code": "public DistributedLogClientBuilder periodicDumpOwnershipCacheIntervalMs(long intervalMs){\n  DistributedLogClientBuilder newBuilder=newBuilder(this);\n  newBuilder._clientConfig.setPeriodicDumpOwnershipCacheIntervalMs(intervalMs);\n  return newBuilder;\n}\n", "nl": "Set periodic dumping ownership cache interval.", "id": "56210"}
{"code": "@SafeVarargs public static final <T>T firstNonNull(T... objects){\n  if (objects != null) {\n    for (    T object : objects) {\n      if (object != null) {\n        return object;\n      }\n    }\n  }\n  return null;\n}\n", "nl": "Returns the first non-null argument. Returns null if all arguments are null.", "id": "30362"}
{"code": "@Override public boolean equals(Object other){\n  if (this == other)   return true;\n  if (!(other instanceof ServerTransaction))   return false;\n  ServerTransaction t=(ServerTransaction)other;\n  return (id == t.id && mgr.equals(t.mgr));\n}\n", "nl": "Two instances are equal if they have the same transaction manager and the same transaction id.", "id": "35698"}
{"code": "private static void markChecked(String category,String name,boolean createWithProject){\n  String key=getCheckKey(category,name,createWithProject);\n  ourTemplatesChecked.add(key);\n}\n", "nl": "Marks that we've already checked the given template in a new project or existing project context", "id": "24105"}
{"code": "public void init$Children(){\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "31615"}
{"code": "public boolean context_counts(){\n  return soot.PhaseOptions.getBoolean(options,\"context-counts\");\n}\n", "nl": "Print Context Counts -- Print number of contexts for each method. Causes Paddle to print the number of contexts for each method  and call edge, and the number of equivalence classes of contexts  for each variable node.", "id": "31179"}
{"code": "public int deplete(){\n  int ret=getValue();\n  setValue(0);\n  return ret;\n}\n", "nl": "Removes all the charge.", "id": "45966"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "58213"}
{"code": "public static boolean isAtLeastJava15(){\n  return getMajorJavaVersion() >= JAVA_15;\n}\n", "nl": "Convenience method to determine if the current JVM is at least Java 1.5 (Java 5).", "id": "42746"}
{"code": "@Override public void onAttachedToWindow(){\n  super.onAttachedToWindow();\n  setupBounds();\n  setupPaints();\n  invalidate();\n}\n", "nl": "Now we know the dimensions of the view, setup the bounds and paints", "id": "31634"}
{"code": "public String toString(cp_info constant_pool[]){\n  CONSTANT_Class_info cc=(CONSTANT_Class_info)(constant_pool[class_index]);\n  CONSTANT_NameAndType_info cn=(CONSTANT_NameAndType_info)(constant_pool[name_and_type_index]);\n  return cc.toString(constant_pool) + \".\" + cn.toString(constant_pool);\n}\n", "nl": "Returns a String representation of this entry.", "id": "24138"}
{"code": "public static boolean isTestRun(){\n  return \"true\".equals(System.getProperty(\"org.hisp.dhis.test\",\"false\"));\n}\n", "nl": "Indicates whether the current thread is running for testing.", "id": "11014"}
{"code": "private static <T>String flagDefaultValue(FlagField<T> field){\n  return field.valueString(field.defaultValue());\n}\n", "nl": "String of a default value of a field. For type safety.", "id": "38055"}
{"code": "private static String formattedLocationFromGoogleResponse(final JSONObject json){\n  final JSONArray matches=json.optJSONArray(GoogleKey.RESULTS);\n  String formattedLocation=null;\n  if (matches != null && matches.length() > 0) {\n    formattedLocation=matches.getJSONObject(0).optString(GoogleKey.FORMATTED_ADDRESS);\n  }\n  return formattedLocation;\n}\n", "nl": "Gets the formatted location from the google response JSON.", "id": "41938"}
{"code": "@Override protected Dispatcher createContentDispatcher(){\n  return new NS11ContentDispatcher();\n}\n", "nl": "Creates a content dispatcher.", "id": "57076"}
{"code": "public static String removeInvertedCommas(String s){\n  return removeDelimiter(s,'\\\"');\n}\n", "nl": "Removes Inverted Commas from the string.", "id": "32983"}
{"code": "public static String[] readStrings(String filename){\n  return new In(filename).readAllStrings();\n}\n", "nl": "Reads all strings from a file and returns them as an array of strings.", "id": "32572"}
{"code": "protected AdsGetOfficeUsersQuery accountId(int value){\n  return unsafeParam(\"account_id\",value);\n}\n", "nl": "Advertising account ID.", "id": "39892"}
{"code": "public static DataSourceInterface createDataSource(DataSourceInterface override){\n  if (override != null) {\n    if ((dataSource == null) || override.getClass() != dataSource.getClass()) {\n      dataSource=override;\n    }\n  }\n else {\n    if (dataSource == null) {\n      dataSource=new DataSourceImpl();\n    }\n  }\n  return dataSource;\n}\n", "nl": "Creates a new DataSource object.", "id": "26647"}
{"code": "public void tabCreated(long time,int id){\n  if (!createTabHelper(id))   return;\n  mIsDying=false;\n  finishAnimation(time);\n  startAnimation(time,OverviewAnimationType.NEW_TAB_OPENED,TabModelUtils.getTabIndexById(mTabModel,id),TabModel.INVALID_TAB_INDEX,false);\n}\n", "nl": "Animates a new tab opening.", "id": "34256"}
{"code": "private void scheduleRepeatingAlarm(){\n  Intent registerIntent=createRegisterRequestIntent(this);\n  PendingIntent pIntent=PendingIntent.getService(this,0,registerIntent,0);\n  AlarmManager am=(AlarmManager)getSystemService(Context.ALARM_SERVICE);\n  setAlarm(am,pIntent,AlarmManager.RTC,mTimestampForNewRequest);\n}\n", "nl": "Sets a repeating alarm that fires request registration Intents. Setting the alarm overwrites whatever alarm is already there, and rebooting clears whatever alarms are currently set.", "id": "26471"}
{"code": "public AdsUpdateTargetGroupQuery lifetime(Integer value){\n  return unsafeParam(\"lifetime\",value);\n}\n", "nl": "Only for the groups that get audience from sites with user accounting code. Time in days when users added to a retarget group will be automatically excluded from it. \"0\" - automatic exclusion is off.", "id": "57978"}
{"code": "protected NotesEditQuery noteId(int value){\n  return unsafeParam(\"note_id\",value);\n}\n", "nl": "Note ID.", "id": "54838"}
{"code": "private void checkAtEnd(){\n  if (!hasSynErrors && matched) {\n    syntaxError(\"unrecognized input: \");\n  }\n}\n", "nl": "Check whether all tokens have been consumed, and report error if not.", "id": "33948"}
{"code": "public long number(){\n  return blkNum;\n}\n", "nl": "Returns the location of the block within the file.", "id": "3546"}
{"code": "public Vector3D pointAt(final double abscissa){\n  return new Vector3D(1.0,zero,abscissa,direction);\n}\n", "nl": "Get one point from the line.", "id": "8704"}
{"code": "public static <T>T checkNotNull(T reference,Object errorMessage){\n  if (reference == null) {\n    throw new NullPointerException(String.valueOf(errorMessage));\n  }\n  return reference;\n}\n", "nl": "Ensures that an object reference passed as a parameter to the calling method is not null.", "id": "40633"}
{"code": "public void suspendEncoding() throws java.io.IOException {\n  flushBase64();\n  this.suspendEncoding=true;\n}\n", "nl": "Suspends encoding of the stream. May be helpful if you need to embed a piece of base64-encoded data in a stream.", "id": "16458"}
{"code": "public <A>void publishEvents(final EventTranslatorOneArg<T,A> eventTranslator,final A[] arg){\n  ringBuffer.publishEvents(eventTranslator,arg);\n}\n", "nl": "Publish a batch of events to the ring buffer.", "id": "27415"}
{"code": "public boolean contains(Object o){\n  return elementSet.contains(o);\n}\n", "nl": "Checks if an element is present in the vector.  The check follows the convention of HashSet contains() function, so performance can be expected to be a constant factor.", "id": "9493"}
{"code": "@Override public void undoAction(UndoInterface undoRedoObject){\n  if ((comboBox != null) && (undoRedoObject != null)) {\n    if (undoRedoObject.getOldValue() instanceof String) {\n      String oldValue=(String)undoRedoObject.getOldValue();\n      comboBox.setSelectValueKey(oldValue);\n    }\n  }\n}\n", "nl": "Undo action.", "id": "21808"}
{"code": "public void removeListener(ISpaceModeListener listener){\n  _listeners.remove(listener);\n}\n", "nl": "Removes a listener for space availability", "id": "17699"}
{"code": "public void drawScreen(int mouseX,int mouseY,float partialTicks){\n  super.drawScreen(mouseX,mouseY,partialTicks);\n  this.oldMouseX=(float)mouseX;\n  this.oldMouseY=(float)mouseY;\n}\n", "nl": "Draws the screen and all the components in it.", "id": "36343"}
{"code": "public String providePath(){\n  return \"/blockcanary/\";\n}\n", "nl": "Path to save log, like \"/blockcanary/\", will save to sdcard if can.", "id": "29259"}
{"code": "public final boolean hasNext(){\n  while (cur < lastNumber) {\n    if (numberToObj[cur] != null)     break;\n    ++cur;\n  }\n  return cur < lastNumber;\n}\n", "nl": "We locate the next non-null item.", "id": "19989"}
{"code": "public WallPostQuery postId(Integer value){\n  return unsafeParam(\"post_id\",value);\n}\n", "nl": "Post ID. Used for publishing of scheduled and suggested posts.", "id": "48650"}
{"code": "public static int mulAndCheck(int x,int y){\n  long m=((long)x) * ((long)y);\n  if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {\n    throw new ArithmeticException(\"overflow: mul\");\n  }\n  return (int)m;\n}\n", "nl": "Multiply two integers, checking for overflow.", "id": "12575"}
{"code": "public void configureIndicator(int indicatorWidth,int indicatorHeight,int indicatorMargin){\n  configureIndicator(indicatorWidth,indicatorHeight,indicatorMargin,R.animator.scale_with_alpha,0,R.drawable.white_radius,R.drawable.white_radius);\n}\n", "nl": "Create and configure Indicator in Java code.", "id": "12279"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set summarized=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed", "id": "28540"}
{"code": "public PhotosGetCommentsQueryWithExtended startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n", "nl": "Set start comment id", "id": "15127"}
{"code": "public boolean hasRelativePeriods(){\n  return relatives != null && !relatives.isEmpty();\n}\n", "nl": "Indicates whether this report has relative periods.", "id": "15711"}
{"code": "private void zzScanError(int errorCode){\n  String message;\n  try {\n    message=ZZ_ERROR_MSG[errorCode];\n  }\n catch (  ArrayIndexOutOfBoundsException e) {\n    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];\n  }\n  throw new Error(message);\n}\n", "nl": "Reports an error that occured while scanning. In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all fallback rule) this method will only be called with things that \"Can't Possibly Happen\". If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.). Usual syntax/scanner level error handling should be done in error fallback rules.", "id": "4288"}
{"code": "@Override public void characters(char ch[],int start,int length) throws SAXException {\n  if (saxParser != null) {\n    saxParser.characters(ch,start,length);\n  }\n}\n", "nl": "The SAX <code>characters</code> method. Does nothing.", "id": "3346"}
{"code": "public void beginOperation(ISVNClientAdapter aSvnClient,OperationProgressNotifyListener anOperationNotifyListener){\n  this.operationNotifyListener=anOperationNotifyListener;\n  beginOperation(aSvnClient);\n}\n", "nl": "Begins a batch of operations. Forward notifications to messageNotifyListener", "id": "23492"}
{"code": "public static int calcTextHeight(Paint paint,String demoText){\n  Rect r=mCalcTextHeightRect;\n  r.set(0,0,0,0);\n  paint.getTextBounds(demoText,0,demoText.length(),r);\n  return r.height();\n}\n", "nl": "calculates the approximate height of a text, depending on a demo text avoid repeated calls (e.g. inside drawing methods)", "id": "47407"}
{"code": "public boolean hasDataElement(DataElement dataElement){\n  for (  DataSet dataSet : dataSets) {\n    if (dataSet.getDataElements().contains(dataElement)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Indicates whether this organisation unit is associated with the given data element through its data set associations.", "id": "7640"}
{"code": "public PickRequest withAllImageMimeTypesAllowed(){\n  this.mMimeType=QiPick.MIME_TYPE_IMAGES_ALL;\n  this.mMimeTypesKitKat=null;\n  return this;\n}\n", "nl": "Allow picking files of all image MIME types. This is set by default so unless other MIME type changes were made to request there's no need to call it", "id": "13337"}
{"code": "public GroupsAddLinkQuery text(String value){\n  return unsafeParam(\"text\",value);\n}\n", "nl": "Description text for the link.", "id": "3721"}
{"code": "public FriendsGetMutualQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of mutual friends.", "id": "7577"}
{"code": "private void checkMatrixDimensions(Matrix B){\n  if (B.m != m || B.n != n) {\n    throw new IllegalArgumentException(\"Matrix dimensions must agree.\");\n  }\n}\n", "nl": "Check if size(A) == size(B)", "id": "46772"}
{"code": "public static InputStream toInputStream(String input){\n  return toInputStream(input,Charset.defaultCharset());\n}\n", "nl": "Convert the specified string to an input stream, encoded as bytes using the default character encoding of the platform.", "id": "9047"}
{"code": "public static BigInteger formBitMask(int partitionSize){\n  BigInteger mask;\n  if (partitionSize < 32) {\n    mask=BigInteger.valueOf((1 << partitionSize) - 1);\n  }\n else {\n    mask=BigInteger.valueOf(2).pow(partitionSize).subtract(BigInteger.ONE);\n  }\n  return mask;\n}\n", "nl": "Returns a <code>BigInteger</code> bit mask for the given partitionSize.", "id": "5194"}
{"code": "@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {\n  if (saxParser != null) {\n    saxParser.endElement(namespaceURI,localName,qName);\n  }\n}\n", "nl": "The SAX2 <code>endElement</code> method. Does nothing.", "id": "43788"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATKDrain_Instant_A_TO_SELF(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200870,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] received %num0 damage as it used [%SkillName].", "id": "42126"}
{"code": "public static boolean veryLowMemoryCondition(){\n  return MaryUtils.availableMemory() < lowMemoryThreshold() / 2;\n}\n", "nl": "Verify if the java virtual machine is in a very low memory condition. The memory is considered very low if less than half a specified value is still available for processing. \"Available\" memory is calculated using <code>availableMemory()</code>.The threshold value can be specified as the Mary property mary.lowmemory (in bytes). It defaults to 20000000 bytes.instantiateModule", "id": "27018"}
{"code": "public float[] toArray(float[] floats){\n  if (floats == null) {\n    floats=new float[3];\n  }\n  floats[0]=x;\n  floats[1]=y;\n  floats[2]=z;\n  return floats;\n}\n", "nl": "Saves this Vector3f into the given float[] object.", "id": "31437"}
{"code": "private Object writeReplace(){\n  return new DataTransferObject(interpolator,interpolated.getTime());\n}\n", "nl": "Replace the instance with a data transfer object for serialization.", "id": "39697"}
{"code": "protected void merge(Object in1,Object in2,Object out){\n  FlowSet inSet1=((FlowSet)in1).clone(), inSet2=((FlowSet)in2).clone(), outSet=(FlowSet)out;\n  inSet1.union(inSet2,outSet);\n}\n", "nl": "union, except for transactions in progress.  They get joined", "id": "58748"}
{"code": "protected static String resolveApplicationName(Application application,ApplicationType type){\n  String persistedName=resolveName(application,null);\n  if (persistedName != null)   return persistedName;\n  String customName=resolveCustomName(application);\n  if (customName != null)   return customName;\n  return createGenericName(application,type.getName());\n}\n", "nl": "Returns Application name if available in Snapshot Storage as PROPERTY_NAME or user-provided display name defined by JVM argument <code>-Dvisualvm.display.name</code> (since VisualVM 1.3.4) or generates new name using the provided ApplicationType.", "id": "15594"}
{"code": "public static String extractCSVOutputByFieldNum(String csvOut,int fieldNum){\n  String tokens[]=csvOut.split(\",(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\",-1);\n  return tokens[fieldNum];\n}\n", "nl": "Used for testing", "id": "44608"}
{"code": "@Override public int compare(PhysicalTable table1,PhysicalTable table2){\n  return table1.getDimensions().size() - table2.getDimensions().size();\n}\n", "nl": "Compare two Physical Tables based on their number of dimensions.", "id": "7574"}
{"code": "public <T>T recall(String path,Class<T> type) throws IOException {\n  return recall(new File(path),type);\n}\n", "nl": "Returns the object stored in the local file system at the given path.", "id": "35331"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200677,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] has converted damage dealt to you to healing by using [%SkillName].", "id": "47004"}
{"code": "public void release(GL10 gl){\n  if (textureId[0] != -1) {\n    gl.glDeleteTextures(1,textureId,0);\n    textureId[0]=-1;\n  }\n}\n", "nl": "release texture", "id": "13617"}
{"code": "public static InputStream toInputStream(String input,String encoding) throws IOException {\n  byte[] bytes=StringCodingUtils.getBytes(input,Charsets.toCharset(encoding));\n  return new ByteArrayInputStream(bytes);\n}\n", "nl": "Convert the specified string to an input stream, encoded as bytes using the specified character encoding. <p/> Character encoding names can be found at <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.", "id": "10655"}
{"code": "private AudioOption audioOptionFromXmlOption(Object xmlOpt,String lang,boolean isMainAudio){\n  return (isOptionEmpty(xmlOpt)) ? generateAudioOption(xmlOpt,lang,isMainAudio) : createAudioOption(xmlOpt);\n}\n", "nl": "Create AudioOption from XML option type.", "id": "36371"}
{"code": "public static boolean isSolaris(){\n  return (OS.indexOf(\"sunos\") >= 0);\n}\n", "nl": "Checks if is solaris.", "id": "35984"}
{"code": "protected AdsCreateTargetGroupQuery accountId(int value){\n  return unsafeParam(\"account_id\",value);\n}\n", "nl": "Advertising account ID.", "id": "34158"}
{"code": "public PlacesCheckinQuery longitude(Float value){\n  return unsafeParam(\"longitude\",value);\n}\n", "nl": "Geographical longitude of the check-in, in degrees (from \"-180\" to \"180\").", "id": "19075"}
{"code": "public boolean hasSuperClassAccess(){\n  return getSuperClassAccessOpt().getNumChild() != 0;\n}\n", "nl": "Check whether the optional SuperClassAccess child exists.", "id": "56975"}
{"code": "public void flush() throws IOException {\n  outs.flush();\n}\n", "nl": "flush the current stream", "id": "53342"}
{"code": "public HumanTime y(int n){\n  delta+=YEAR * Math.abs(n);\n  return this;\n}\n", "nl": "Adds n years to the time delta.", "id": "27848"}
{"code": "public static String removeLastComma(String string){\n  string=StringUtils.stripEnd(string,\" \");\n  return StringUtils.removeEndIgnoreCase(string,\",\");\n}\n", "nl": "Removes the last occurrence of comma (\",\") from the given string, including potential trailing spaces.", "id": "47409"}
{"code": "protected void notifyClickListenersAboutClick(int item){\n  for (  OnWheelClickedListener listener : clickingListeners) {\n    listener.onItemClicked(this,item);\n  }\n}\n", "nl": "Notifies listeners about clicking", "id": "13502"}
{"code": "private void readObjectNoData() throws ObjectStreamException {\n  throw new InvalidObjectException(\"no data\");\n}\n", "nl": "Throws InvalidObjectException, since data for this class is required.", "id": "11656"}
{"code": "public static int hash32(final byte[] data,int length){\n  return hash32(data,length,0x9747b28c);\n}\n", "nl": "Generates 32 bit hash from byte array with default seed value.", "id": "51255"}
{"code": "private Map<String,List<Experiment.ID>> prepareResponseEntity(List<Experiment.ID> experimentIDs){\n  Map<String,List<Experiment.ID>> responseEntity=new HashMap<>();\n  responseEntity.put(\"experimentIDs\",experimentIDs);\n  return responseEntity;\n}\n", "nl": "Wraps the response list into a map to add it to the JSON key \"experimentIDs\".", "id": "2086"}
{"code": "public void resourceSyncInfoChanged(IResource[] changedResources){\n  for (int i=0; i < changedResources.length; i++) {\n    if (resource != null && changedResources[i].equals(resource.getIResource())) {\n      refresh();\n    }\n  }\n}\n", "nl": "the svn status of some resources changed. Refresh if we are concerned", "id": "56315"}
{"code": "public final boolean canGetFloat(String field){\n  return m_table.canGetFloat(field);\n}\n", "nl": "Check if the given data field can return primitive <code>float</code> values.", "id": "25339"}
{"code": "public synchronized BookKeeperClientBuilder bkc(BookKeeperClient bkc){\n  this.cachedClient=bkc;\n  return this;\n}\n", "nl": "Build BookKeeper client using existing <i>bkc</i> client.", "id": "10984"}
{"code": "public boolean string_constants(){\n  return soot.PhaseOptions.getBoolean(options,\"string-constants\");\n}\n", "nl": "Propagate All String Constants -- Propagate all string constants, not just class names. When this option is set to false, Spark only distinguishes  string constants that may be the name of a class loaded  dynamically using reflection, and all other string constants are  lumped together into a single string constant node. Setting this  option to true causes all string constants to be propagated  individually.", "id": "4853"}
{"code": "public static void showToastWhenPossible(Context context,String message){\n  Activity activity=Restarter.getForegroundActivity(context);\n  if (activity != null) {\n    Restarter.showToast(activity,message);\n  }\n else {\n    showToastWhenPossible(context,message,10);\n  }\n}\n", "nl": "Show a toast when an activity becomes available (if possible).", "id": "14653"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_InteralSkill_A_TO_ME(String skillname,String skillcaster){\n  return new SM_SYSTEM_MESSAGE(1201272,skillname,skillcaster);\n}\n", "nl": "You received a periodic chain effect from [%SkillName] used by [%SkillCaster].", "id": "34378"}
{"code": "public MessagesSendQuery forwardMessages(String... value){\n  return unsafeParam(\"forward_messages\",value);\n}\n", "nl": "ID of forwarded messages, separated with a comma. Listed messages of the sender will be shown in the message body at the recipient's. <p> Example: 123,431,544", "id": "47605"}
{"code": "private void updateRingColor(float interpolatedTime,Ring ring){\n  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {\n    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));\n  }\n}\n", "nl": "Update the ring color if this is within the last 25% of the animation. The new ring color will be a translation from the starting ring color to the next color.", "id": "47150"}
{"code": "public void decreaseKinah(long amount,Player actor){\n  decreaseKinah(amount,ItemUpdateType.DEC_KINAH_BUY,actor);\n}\n", "nl": "just decrease kinah without any checks", "id": "42163"}
{"code": "public void deny(PermissionFlag flag){\n  generalPermissions.put(flag,getDefaultMessage(flag));\n}\n", "nl": "Changes the default permission for a flag, will not affect direct permissions and restrictions. The current default denial message will be used, if the default message changes later it will be updated.", "id": "56177"}
{"code": "private void checkBatchSize(){\n  if (loader.getBatchSize() > 1) {\n    LOG.warn(\"Loading with batch size [\" + loader.getBatchSize() + \"]. This can cause conflicts on commit.\");\n  }\n}\n", "nl": "Warn the user when the batch size of the loader is greater than 1. If the batch size is greater than 1, it is possible that multiple of the same variables will be committed in one batch and the resulting committed data will be corrupted.", "id": "20739"}
{"code": "public static boolean hasICS(){\n  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH;\n}\n", "nl": ">=4.0 14", "id": "6561"}
{"code": "public Iterator<Edge> edgesOutOf(Unit u){\n  return new TargetsOfUnitIterator(u);\n}\n", "nl": "Returns an iterator over all edges that have u as their source unit.", "id": "41304"}
{"code": "public static void close(Closeable stream){\n  if (null != stream) {\n    try {\n      stream.close();\n    }\n catch (    IOException e) {\n      LOG.error(\"Exception while closing the Log stream\");\n    }\n  }\n}\n", "nl": "closes the stream", "id": "11407"}
{"code": "public void train(String sTrainingText){\n  sgOverallGraph.setDataString(sTrainingText + (new StringBuffer().append((char)StreamTokenizer.TT_EOF)).toString());\n  clLocator.resetCache();\n  getDelimiters();\n}\n", "nl": "Train the statistics of the chunker from a given text.", "id": "46278"}
{"code": "public static void clearColumnDictionaryCache(Map<String,Dictionary> columnToDictionaryMap){\n  for (  Map.Entry<String,Dictionary> entry : columnToDictionaryMap.entrySet()) {\n    CarbonUtil.clearDictionaryCache(entry.getValue());\n  }\n}\n", "nl": "This method will clear the dictionary cache for a given map of columns and dictionary cache mapping", "id": "12713"}
{"code": "public void addJavaDirectory(@NotNull String path){\n  File directory=myFileStructure.createProjectDir(path);\n  myJavaDirectories.add(directory);\n}\n", "nl": "Adds the given path to the list of 'java' directories. It also creates the directory in the file system.", "id": "25106"}
{"code": "public static void touch(File file) throws IOException {\n  if (!file.exists()) {\n    OutputStream out=openOutputStream(file);\n    IOUtils.closeQuietly(out);\n  }\n  boolean success=file.setLastModified(System.currentTimeMillis());\n  if (!success) {\n    throw new IOException(\"Unable to set the last modification time for \" + file);\n  }\n}\n", "nl": "Implements the same behaviour as the \"touch\" utility on Unix. It creates a new file with size 0 or, if the file exists already, it is opened and closed without modifying it, but updating the file date and time. <p> NOTE: As from v1.3, this method throws an IOException if the last modified date of the file cannot be set. Also, as from v1.3 this method creates parent directories if they do not exist.", "id": "46428"}
{"code": "public final boolean isEmpty(){\n  return empty;\n}\n", "nl": "Returns true if this set contains no run-time objects.", "id": "36894"}
{"code": "public NotesRestoreCommentQuery restoreComment(UserActor actor,int commentId){\n  return new NotesRestoreCommentQuery(getClient(),actor,commentId);\n}\n", "nl": "Restores a deleted comment on a note.", "id": "20320"}
{"code": "public static float calculateRight(float left,float top,float bottom,float targetAspectRatio){\n  final float height=bottom - top;\n  return (targetAspectRatio * height) + left;\n}\n", "nl": "Calculates the x-coordinate of the right edge given the other sides of the rectangle and an aspect ratio.", "id": "28882"}
{"code": "public int size(){\n  return counter.get();\n}\n", "nl": "return the size (i.e. Elements present in the Queue)", "id": "8737"}
{"code": "protected BoardGetTopicsQueryWithExtended groupId(int value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "ID of the community that owns the discussion board.", "id": "26776"}
{"code": "public void trimToSize(){\n  int cap=idealCapacity(length);\n  if (cap < capacity()) {\n    buffer=resize(buffer,cap);\n  }\n}\n", "nl": "Attempts to reduce the memory consumption of this builder by reducing its capacity to a smaller, yet still sufficient value.", "id": "9540"}
{"code": "public static void print(double x){\n  out.print(x);\n  out.flush();\n}\n", "nl": "Prints a double to standard output and flushes standard output.", "id": "34522"}
{"code": "private void clearIssueReferences(String launchId){\n  List<FailReferenceResource> issues=issuesRepository.findAllLaunchIssues(launchId);\n  issuesRepository.delete(issues);\n}\n", "nl": "Clear failReference collections by specified launch id", "id": "26501"}
{"code": "public List<DependencyGraph> dependencyTreebankDevelopment(){\nswitch (language) {\ncase ENGLISH:\n    return DependencyGraphReader.read(\"/export/dat/udt/en/en-ud-dev.conllu\",'u');\ncase VIETNAMESE:\n  return DependencyGraphReader.read(\"/export/dat/udt/vi/01-test.conll\",'x');\n}\nreturn null;\n}\n", "nl": "Gets development dependency treebank.", "id": "45094"}
{"code": "public String onValidate(String text){\n  if (text.length() >= 12) {\n    return null;\n  }\n else {\n    return getContext().getString(R.string.error_msg_api_secret_length);\n  }\n}\n", "nl": "Called to validate contents of the edit text. <p/> Return null to indicate success, or return a validation error message to display on the edit text.", "id": "53372"}
{"code": "public void showMessage(String message){\n  showError(message);\n}\n", "nl": "Show snackbar message", "id": "17902"}
{"code": "public Action0 onSchedule(Action0 action){\n  return action;\n}\n", "nl": "Invoked before the Action is handed over to the scheduler.  Can be used for wrapping/decorating/logging. The default is just a passthrough.", "id": "41827"}
{"code": "private char read() throws CompileException, IOException {\n  this.peek();\n  if (this.nextChar == -1)   throw new CompileException(\"Unexpected end-of-input\",this.location());\n  final char result=(char)this.nextChar;\n  this.sb.append(result);\n  this.nextChar=this.nextButOneChar;\n  this.nextButOneChar=-1;\n  return result;\n}\n", "nl": "Consumes and returns the next character.", "id": "23216"}
{"code": "protected ContextualSearchSceneLayer createNewContextualSearchSceneLayer(){\n  return new ContextualSearchSceneLayer(mContext.getResources().getDisplayMetrics().density);\n}\n", "nl": "Create a new scene layer for this panel. This should be overridden by tests as necessary.", "id": "28295"}
{"code": "@Override public Command watch(HostChangeMonitor<ServiceInstance> monitor) throws MonitorException {\nsynchronized (watchers) {\n    watchers.add(monitor);\n  }\n  if (resolutionPending.compareAndSet(false,false)) {\n    monitor.onChange(hostSet);\n  }\n  return Commands.NOOP;\n}\n", "nl": "Registers a monitor to receive change notices for this server set as long as this jvm process is alive.  Blocks until the initial server set can be gathered and delivered to the monitor. The monitor will be notified if the membership set or parameters of existing members have changed.", "id": "47324"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GUILD_CHANGE_MEMBER_RANK_DONE_GUILD_SUBMASTER(String value0){\n  return new SM_SYSTEM_MESSAGE(1400902,value0);\n}\n", "nl": "%0 has become the Legion Deputy.", "id": "57406"}
{"code": "public void collectTags(SootClass sc){\n  collectTags(sc,true);\n}\n", "nl": "Convenience function for <code>collectTags(sc, true)</code>.", "id": "19867"}
{"code": "public final void remove(String... names){\n  if (data != null && names != null) {\n    for (    String name : names) {\n      remove(name);\n    }\n  }\n}\n", "nl": "remove value by names.", "id": "24232"}
{"code": "public void cancel(){\n}\n", "nl": "Cancels all queued output. Current 'write' call will return false", "id": "47393"}
{"code": "public void resetTimeoutTimer(){\n  timeoutTimer.reset();\n}\n", "nl": "Reset the timeout timer.", "id": "42559"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnTargetDead_INTERVAL_ME_TO_B(String skilltarget,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200527,skilltarget,num0,skillname);\n}\n", "nl": "[%SkillTarget] has recovered %num0 HP due to [%SkillName].", "id": "29959"}
{"code": "public Builder addColumnTime(String columnName,DateTimeZone timeZone){\n  return addColumnTime(columnName,timeZone,null,null);\n}\n", "nl": "Add a Time column with no restrictions on the min/max allowable times <b>NOTE</b>: Time columns are represented by LONG (epoch millisecond) values. For time values in human-readable formats, use String columns + StringToTimeTransform", "id": "45761"}
{"code": "public static boolean isMemoryOnlySearch(int mod){\n  return Modifiers.contains(mod,MEMORY_ONLY_SEARCH);\n}\n", "nl": "Checks if the MEMORY_ONLY_SEARCH bit was set for this modifier.", "id": "55861"}
{"code": "public AuthSignupQuery signup(UserActor actor,String firstName,String lastName,int clientId,String clientSecret,String phone){\n  return new AuthSignupQuery(getClient(),actor,firstName,lastName,clientId,clientSecret,phone);\n}\n", "nl": "Registers a new user by phone number.", "id": "32233"}
{"code": "public BoardCreateCommentQuery message(String value){\n  return unsafeParam(\"message\",value);\n}\n", "nl": "Text of the comment. Required if \"attachments\" is not set.", "id": "14195"}
{"code": "@Override public boolean isEnabled(){\n  if ((attributeSelectionPanel != null) && !isValueOnly()) {\n    return attributeSelectionPanel.isEnabled();\n  }\n else {\n    if (comboBox != null) {\n      return comboBox.isEnabled();\n    }\n  }\n  return false;\n}\n", "nl": "Checks if is enabled.", "id": "10531"}
{"code": "public static void dropTable(SQLiteDatabase db,boolean ifExists){\n  String sql=\"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + \"\\\"HOUR_FORE_CAST\\\"\";\n  db.execSQL(sql);\n}\n", "nl": "Drops the underlying database table.", "id": "50661"}
{"code": "public boolean canHaveMultipleShapes(){\n  return canHaveMultipleShapes;\n}\n", "nl": "Checks if shape type can have multiple shapes.", "id": "15666"}
{"code": "public static void writeToFile(File outputFile,String content) throws IOException {\n  Preconditions.checkNotNull(outputFile);\n  Preconditions.checkNotNull(content);\n  try (BufferedWriter outWriter=Files.newWriter(outputFile,StandardCharsets.UTF_8)){\n    outWriter.write(content);\n  }\n }\n", "nl": "Writes string content to a file.", "id": "21908"}
{"code": "public boolean isShortFeature(int index){\n  index-=numByteFeatures;\n  return 0 <= index && index < numShortFeatures;\n}\n", "nl": "Determine whether the feature with the given index number is a short feature.", "id": "20693"}
{"code": "public void writeBytes(byte[] value,int offset,int length) throws JMSException {\n  initializeWriting();\n  try {\n    this.dataOut.write(_BYTES);\n    this.dataOut.writeInt(length);\n    this.dataOut.write(value,offset,length);\n  }\n catch (  IOException ioe) {\n    raise(ioe);\n  }\n}\n", "nl": "Writes a portion of a byte array as a byte array field to the stream message. <p/> <P>The a portion of the byte array <code>value</code> is written to the message as a byte array field. Consecutively written byte array fields are treated as two distinct fields when the fields are read.", "id": "29114"}
{"code": "public static <T>T checkNotNull(T reference){\n  if (reference == null) {\n    throw new NullPointerException();\n  }\n  return reference;\n}\n", "nl": "Ensures that an object reference passed as a parameter to the calling method is not null.", "id": "32149"}
{"code": "@Override protected Expression generateExpression(){\n  Expression expression=null;\n  if (spinner != null) {\n    expression=getFilterFactory().literal(spinner.getDoubleValue());\n  }\n  return expression;\n}\n", "nl": "Generate expression.", "id": "51501"}
{"code": "public GroupsGetQueryWithExtended count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of communities to return.", "id": "6598"}
{"code": "public static <T extends Serializable,R>DistributedTask<T,R> task(Runnable runnable,T result,AsyncResultsReducer<T,R> reducer,AsyncResultFilter<T> filter){\n  return new RunnableDistributedTaskAdapter<T,R>(runnable,result,reducer,filter);\n}\n", "nl": "Constructs a new runnable distributed task adapter with a separate reducer and filter.", "id": "36221"}
{"code": "public final void close(LsServerPacket closePacket,boolean forced){\nsynchronized (guard) {\n    if (isWriteDisabled()) {\n      return;\n    }\n    log.debug(\"sending packet: \" + closePacket + \" and closing connection after that.\");\n    pendingClose=true;\n    isForcedClosing=forced;\n    sendMsgQueue.clear();\n    sendMsgQueue.addLast(closePacket);\n    enableWriteInterest();\n  }\n}\n", "nl": "Its guaranted that closePacket will be sent before closing connection, but all past and future packets wont. Connection will be closed [by Dispatcher Thread], and onDisconnect() method will be called to clear all other things. forced means that server shouldn't wait with removing this connection.", "id": "46477"}
{"code": "public static void primeLocationForGeoHeader(Context context){\n  if (!hasGeolocationPermission(context))   return;\n  GeolocationTracker.refreshLastKnownLocation(context,REFRESH_LOCATION_AGE);\n}\n", "nl": "Requests a location refresh so that a valid location will be available for constructing an X-Geo header in the near future (i.e. within 5 minutes).", "id": "55260"}
{"code": "public static <T extends ConfigurationEntity>void validateIsUpdate(List<T> configurationObjects){\n  for (  T config : configurationObjects) {\n    if (!config.isUpdated()) {\n      throw new IllegalArgumentException(config.getClass() + \" Created through the wrong builder pattern. \" + \"Please use the 'update' builder provided by the class of the object\");\n    }\n  }\n}\n", "nl": "Validates the Configuration if its created through the update builder provided by the Configuration POJO. If not throw an Exception to inform the client to use the correct builder.", "id": "42254"}
{"code": "public JsonObject remove(String name){\n  if (name == null) {\n    throw new NullPointerException(\"name is null\");\n  }\n  int index=indexOf(name);\n  if (index != -1) {\n    table.remove(index);\n    names.remove(index);\n    values.remove(index);\n  }\n  return this;\n}\n", "nl": "Removes a member with the specified name from this object. If this object contains multiple members with the given name, only the last one is removed. If this object does not contain a member with the specified name, the object is not modified.", "id": "34719"}
{"code": "public static long parseDateAsEpoch(String dateStr){\n  try {\n    return DateUtils.parseDate(dateStr).getTime();\n  }\n catch (  DateParseException e) {\n    return 0;\n  }\n}\n", "nl": "Parse date in RFC1123 format, and return its value as epoch", "id": "74"}
{"code": "public void output(Node input) throws TransformerException {\n  output(new DOMSource(input));\n}\n", "nl": "Output a DOM node to stdout.", "id": "50844"}
{"code": "public static Map<String,Object> sendOrderConfirmNotification(DispatchContext ctx,Map<String,? extends Object> context){\n  return sendOrderNotificationScreen(ctx,context,\"PRDS_ODR_CONFIRM\");\n}\n", "nl": "Service to email a customer with initial order confirmation", "id": "53437"}
{"code": "public MyDialog outDuration(int duration){\n  mOutDuration=duration;\n  return this;\n}\n", "nl": "Set the duration of out animation.", "id": "23482"}
{"code": "private void updateRingColor(float interpolatedTime,Ring ring){\n  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {\n    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));\n  }\n}\n", "nl": "Update the ring color if this is within the last 25% of the animation. The new ring color will be a translation from the starting ring color to the next color.", "id": "2555"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "154"}
{"code": "public void dismissLoadingDialog(){\n  final Fragment frag=getActivity().getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);\n  if (frag != null) {\n    LoadingDialog loading=(LoadingDialog)frag;\n    loading.dismissAllowingStateLoss();\n  }\n}\n", "nl": "Dismiss loading dialog", "id": "46542"}
{"code": "protected MarketEditQuery mainPhotoId(int value){\n  return unsafeParam(\"main_photo_id\",value);\n}\n", "nl": "Cover photo id", "id": "29174"}
{"code": "public static SM_SYSTEM_MESSAGE STR_UNCHANGE_ITEM_SKIN_SUCCEED(String value0){\n  return new SM_SYSTEM_MESSAGE(1400372,value0);\n}\n", "nl": "The appearance modification effect of %0 has been removed.", "id": "50104"}
{"code": "public static String generateSummary(Resources resources){\n  if (DataReductionProxySettings.getInstance().isDataReductionProxyEnabled()) {\n    String percent=DataReductionProxySettings.getInstance().getContentLengthPercentSavings();\n    return resources.getString(R.string.data_reduction_menu_item_summary,percent);\n  }\n else {\n    return (String)resources.getText(R.string.text_off);\n  }\n}\n", "nl": "Returns summary string.", "id": "19022"}
{"code": "public RecognitionRequest addTagForSelectClasses(String tag){\n  selectClasses.add(tag);\n  return this;\n}\n", "nl": "Add a tag for which you'd like to get the probability of for the image.", "id": "10618"}
{"code": "private static boolean detectGoogleCloudPlatform(){\n  try {\n    val lookup=new Lookup(\"metadata.google.internal\");\n    return lookup.run() != null;\n  }\n catch (  TextParseException e) {\n    log.error(\"Error while detecting Google Cloud Platform: {}\",e.getMessage());\n    return false;\n  }\n}\n", "nl": "Attempts to figure out whether the environment is GCP by attempting to resolve the metadata server host.", "id": "39071"}
{"code": "public static final Polygon flipAlongTheYAxis(Polygon polygon){\n  return Geometry.flip(polygon,Vector2.Y_AXIS,null);\n}\n", "nl": "Flips the given polygon about its center along the y-axis and returns the result as a new polygon. <p> This method assumes that the line is through the origin.", "id": "49338"}
{"code": "public Builder translationY(float translationY){\n  this.translationY=translationY;\n  return this;\n}\n", "nl": "Set translationY for animation. Default value: -150dp.", "id": "21088"}
{"code": "public static <L,R>Either<L,R> right(R right){\n  return new Either<>(null,right,false);\n}\n", "nl": "Constructs an Either containing a right value.", "id": "924"}
{"code": "protected void shareBySinaWeibo(){\n  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_SINA_WEIBO,getShareData(ShareConstant.SHARE_CHANNEL_SINA_WEIBO),ShareConstant.REQUEST_CODE);\n}\n", "nl": "share weibo", "id": "1610"}
{"code": "public AppsGetFriendsListQuery type(AppsGetFriendsListType value){\n  return unsafeParam(\"type\",value);\n}\n", "nl": "List type.", "id": "4839"}
{"code": "public AuthSignupQuery signup(String firstName,String lastName,int clientId,String clientSecret,String phone){\n  return new AuthSignupQuery(getClient(),firstName,lastName,clientId,clientSecret,phone);\n}\n", "nl": "Registers a new user by phone number.", "id": "49879"}
{"code": "public FieldVector3D<T> subtract(final Vector3D v){\n  return new FieldVector3D<T>(x.subtract(v.getX()),y.subtract(v.getY()),z.subtract(v.getZ()));\n}\n", "nl": "Subtract a vector from the instance.", "id": "34964"}
{"code": "boolean shouldPreviousTapResolve(@Nullable URL url){\n  if (isTapResolveBeyondTheLimit()) {\n    return false;\n  }\n  if (isPromoAvailable()) {\n    return isBasePageHTTP(url);\n  }\n  return true;\n}\n", "nl": "Returns whether the previous tap (the tap last counted) should resolve.", "id": "51515"}
{"code": "public int compareTo(Issue otherIssue){\n  return this.getKey().compareTo(otherIssue.getKey());\n}\n", "nl": "Compares to Issue by their key ordering.", "id": "38738"}
{"code": "public void removeEntry(String entry){\n  _classpathList.remove(entry);\n}\n", "nl": "Removes the entry from the classpath.", "id": "40118"}
{"code": "public boolean hasBlock(){\n  return getBlockOpt().getNumChild() != 0;\n}\n", "nl": "Check whether the optional Block child exists.", "id": "28061"}
{"code": "public void removeUnusedTransaction(XtnEntry xtnEntry,boolean needLock){\n  try {\n    if (needLock)     xtnEntry.lock();\n    if (((ConcurrentHashMap<ServerTransaction,XtnEntry>)getXtnTable()).remove(xtnEntry.m_Transaction,xtnEntry))     m_TimedXtns.remove(xtnEntry.m_Transaction);\n  }\n  finally {\n    if (needLock)     xtnEntry.unlock();\n  }\n}\n", "nl": "Remove an unused transaction from handled transactions", "id": "26684"}
{"code": "static double[] loadExpFracB(){\n  return EXP_FRAC_B.clone();\n}\n", "nl": "Load \"EXP_FRAC_B\".", "id": "37592"}
{"code": "@PostConstruct public void init(){\n  LOGGER.info(\"Initializing SubEquipment cache...\");\n  commonInit();\n  doPostConfigurationOfSubEquipmentControlTags();\n  LOGGER.info(\"... SubEquipment cache initialization complete.\");\n}\n", "nl": "Init method called on bean creation. Calls the cache loading procedure.", "id": "41294"}
{"code": "public void addBodyDecl(BodyDecl node){\n  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the BodyDecl list.", "id": "25856"}
{"code": "public static void startActivity(Context context){\n  if (context == null)   return;\n  Intent intent=new Intent(context,ExpandedControllerActivity.class);\n  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n  context.startActivity(intent);\n}\n", "nl": "Launches the ExpandedControllerActivity as a new task.", "id": "57517"}
{"code": "protected GroupsRemoveUserQuery groupId(int value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "Community ID.", "id": "15703"}
{"code": "@NotNull public static BufferedImage trim(@NotNull BufferedImage image){\n  BufferedImage cropped=ImageUtils.cropBlank(image,null,TYPE_INT_ARGB);\n  return cropped != null ? cropped : image;\n}\n", "nl": "Remove any surrounding padding from the image.", "id": "42478"}
{"code": "public final ProgressEvent increaseProgress(){\n  Progress++;\n  return this;\n}\n", "nl": "Updates the progress of the object by an increase of one.", "id": "17154"}
{"code": "public static OcrHelper init(String dataPath,int widthPixels,int heightPixels,String nidoFemale,String nidoMale,boolean isPokeSpamEnabled){\n  if (instance == null) {\n    instance=new OcrHelper(dataPath,widthPixels,heightPixels,nidoFemale,nidoMale,isPokeSpamEnabled);\n  }\n  return instance;\n}\n", "nl": "init Initializes the OCR helper and readies it for use", "id": "17987"}
{"code": "public static byte parseByte(String text) throws DataParseException {\n  try {\n    return Byte.parseByte(text);\n  }\n catch (  NumberFormatException e) {\n    throw new DataParseException(e);\n  }\n}\n", "nl": "Parse an int value from a text string.", "id": "50304"}
{"code": "public void onFileDelete(final File file){\n}\n", "nl": "File deleted Event.", "id": "31013"}
{"code": "public PhotosEditQuery latitude(Float value){\n  return unsafeParam(\"latitude\",value);\n}\n", "nl": "Set latitude", "id": "45277"}
{"code": "public boolean init(StepMetaInterface smi,StepDataInterface sdi){\n  meta=(CarbonSliceMergerStepMeta)smi;\n  data=(CarbonSliceMergerStepData)sdi;\n  return super.init(smi,sdi);\n}\n", "nl": "Initialize and do work where other steps need to wait for...", "id": "11913"}
{"code": "@Override public Scan open(){\n  Scan s=p.open();\n  return new ProjectScan(s,schema.fields());\n}\n", "nl": "Creates a project scan for this query.", "id": "52653"}
{"code": "public MessagesMarkAsImportantQuery messageIds(Integer... value){\n  return unsafeParam(\"message_ids\",value);\n}\n", "nl": "IDs of messages to mark as important.", "id": "53051"}
{"code": "public void bind(List<Confetto> confetti){\n  this.confetti=confetti;\n}\n", "nl": "Sets the list of confetti to be animated by this view.", "id": "22526"}
{"code": "public void addEntityName(String name){\n  if (name != null) {\n    this.entityNameSet.add(name);\n  }\n}\n", "nl": "Adds an entity name to this context.", "id": "34321"}
{"code": "private static void replace(byte[] text,byte[] replacement,int start){\n  for (int t=start, p=0; p < replacement.length; t++, p++) {\n    text[t]=replacement[p];\n  }\n}\n", "nl": "Replace the <code>replacement.length</code> bytes in <code>text</code> starting at <code>start</code> with the bytes in <code>replacement</code>.", "id": "32505"}
{"code": "@Override public boolean equals(Object object){\n  return object == null || object == this;\n}\n", "nl": "A Null object is equal to the null value and to itself.", "id": "1943"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OutofSight_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200302,skillname);\n}\n", "nl": "Your visual range has reduced because you used [%SkillName].", "id": "8836"}
{"code": "public void clear(){\n  cache.invalidateAllData();\n}\n", "nl": "Only for UTs (for now), as this clears the whole ZK data cache.", "id": "52"}
{"code": "public static synchronized SnapshotsContainer sharedInstance(){\n  if (sharedInstance == null)   sharedInstance=new SnapshotsContainer();\n  return sharedInstance;\n}\n", "nl": "Returns singleton instance of SnapshotsContainer.", "id": "17779"}
{"code": "public PhotosDeleteAlbumQuery groupId(Integer value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "ID of the community that owns the album.", "id": "50374"}
{"code": "private void onServiceDestroyed(int notificationId){\n  if (mService == null)   return;\n  if (notificationId != -1)   clear(notificationId);\n  mNotificationBuilder=null;\n  mService=null;\n}\n", "nl": "Handles the service destruction destruction.", "id": "39783"}
{"code": "public boolean isAskForConfirmation(){\n  return askForConfirmation;\n}\n", "nl": "If the destination should ask for confirmation. Some destinations might chose to ignore this flag either because it doesn't apply to them or because the always ask for confirmation in certain circumstances. <p>But in general, any destination that could do accidental damage to a repository should not ignore when the value is true.", "id": "50752"}
{"code": "public static void dropTable(SQLiteDatabase db,boolean ifExists){\n  String sql=\"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + TABLENAME;\n  db.execSQL(sql);\n}\n", "nl": "Drops the underlying database table.", "id": "43419"}
{"code": "public <RES>MatcherNext<RES,ARG> as(){\n  return new MatcherNext<>(arg);\n}\n", "nl": "Shim to set the result type of the extraction. This is useful if you want to return a super class where expressions generate subclasses.", "id": "32167"}
{"code": "public boolean hasNavigtionBar(){\n  return mHasNavigationBar;\n}\n", "nl": "Does this device have a system navigation bar?", "id": "58801"}
{"code": "private static String separeMetaTagsContent(String content){\n  String result=Regex.pregMatch(content,Regex.METATAG_CONTENT_PATTERN,1);\n  return htmlDecode(result);\n}\n", "nl": "Gets content from metatag", "id": "12417"}
{"code": "public Item appendItem(){\n  return appendItem(null);\n}\n", "nl": "Adds a new item to this relation. The item added does not share its contents with any other item.", "id": "14420"}
{"code": "protected void onAccountCreationSuccessful(AccountManagerFuture<Bundle> future){\n}\n", "nl": "Method that gets called when a new account has been successfully created.", "id": "11483"}
{"code": "public Editor edit() throws IOException {\n  return DiskLruCache.this.edit(key,sequenceNumber);\n}\n", "nl": "Returns an editor for this snapshot's entry, or null if either the entry has changed since this snapshot was created or if another edit is in progress.", "id": "13593"}
{"code": "public boolean filterOut(final SAMRecord record){\n  if (include) {\n    if (record.getReadPairedFlag()) {\n      return false;\n    }\n  }\n else {\n    if (!record.getReadPairedFlag()) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Determines whether a SAMRecord matches this filter", "id": "16591"}
{"code": "public ViewsFinder excludeView(final View... views){\n  FunctionUtils.checkParameterArrayIsNotNull(\"views\",views);\n  viewFilters.add(new ExcluderViewFilter(views));\n  return this;\n}\n", "nl": "Excludes views.", "id": "41803"}
{"code": "public void promote(TransactionParticipant[] parts,long[] crashCounts,TransactionParticipant drop) throws UnknownTransactionException, CannotJoinException, CrashCountException, RemoteException {\n  ((NestableTransactionManager)mgr).promote(id,parts,crashCounts,drop);\n}\n", "nl": "Promote the listed participants (from a subtransaction) into this (the parent) transaction. This method is for use by the manager of a subtransaction when the subtransaction commits. At this point, all participants of the subtransaction must become participants in the parent transaction.  Prior to this point, the subtransaction's manager was a participant of the parent transaction, but after a successful promotion it need no longer be one (if it was not itself a participant of the subtransaction), and so it may specify itself as a participant to drop from the transaction.  Otherwise, participants should not be dropped out of transactions.  For each promoted participant, the participant's crash count is stored in the corresponding element of the <code>crashCounts</code> array.", "id": "39251"}
{"code": "@Override public boolean showDialog(){\n  return showExpressionDialog(fieldType,expression);\n}\n", "nl": "Show dialog.", "id": "25873"}
{"code": "@Override public void write(int b){\n}\n", "nl": "Does nothing - output to <code>/dev/null</code>.", "id": "17766"}
{"code": "public void start(Context context,android.support.v4.app.Fragment fragment,int requestCode){\n  fragment.startActivityForResult(getIntent(context),requestCode);\n}\n", "nl": "Send the crop Intent with a custom request code", "id": "49653"}
{"code": "@Override public void lockPool(){\nsynchronized (fGrammarPool) {\n    fGrammarPool.lockPool();\n  }\n}\n", "nl": "lock the grammar pool", "id": "42414"}
{"code": "@Override public long blocksAccessed(){\n  return sp.blocksAccessed();\n}\n", "nl": "Returns the number of blocks required to compute the aggregation, which is one pass through the sorted table. It does <em>not</em> include the one-time cost of materializing and sorting the records.", "id": "18794"}
{"code": "public Builder animate(Boolean animate){\n  this.animate=animate;\n  return this;\n}\n", "nl": "If true, panning will always be animated if possible. If false, it will not animate panning, either resetting the map view if panning more than a screen away, or just setting a new offset for the map pane (except for `panBy` which always does the latter). </br>", "id": "40264"}
{"code": "public RequestHandle put(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){\n  return put(context,url,paramsToEntity(params,responseHandler),null,responseHandler);\n}\n", "nl": "Perform a HTTP PUT request and track the Android Context which initiated the request.", "id": "23390"}
{"code": "public DatabaseGetFacultiesQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of faculties to return.", "id": "8222"}
{"code": "public double optDouble(String key){\n  LazyNode token=getOptionalFieldToken(key);\n  if (token == null)   return 0.0;\n  if (token.type == LazyNode.VALUE_NULL)   return 0.0;\n  return token.getDoubleValue(cbuf);\n}\n", "nl": "Returns the double value stored in this object for the given key. Returns 0.0 if there is no such key.", "id": "35214"}
{"code": "public boolean hasCategoryCombo(){\n  return categoryCombo != null && !DataElementCategoryCombo.DEFAULT_CATEGORY_COMBO_NAME.equals(categoryCombo.getName());\n}\n", "nl": "Indicates whether this data set has a category combination which is different from the default category combination.", "id": "11538"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.KULCZYNSKI);\n}\n", "nl": "this is currently selected?", "id": "42647"}
{"code": "@RequestMapping(value=\"/servers/shutdown\",method=RequestMethod.POST) public JsonResponse shutdownServer(@RequestParam(\"server\") String server){\n  serverService.shutdownServer(server);\n  return JsonResponse.ok(true);\n}\n", "nl": "Shutdown the server", "id": "43336"}
{"code": "public boolean remove(Unit item){\n  Chain<Unit> methodBody=mBody.getUnits();\n  if (item == mHead)   mHead=methodBody.getSuccOf(item);\n else   if (item == mTail)   mTail=methodBody.getPredOf(item);\n  return methodBody.remove(item);\n}\n", "nl": "Removes a Unit occurring before some other Unit in the Block.", "id": "12353"}
{"code": "public void goToNextColor(){\n  mColorIndex=(mColorIndex + 1) % (mColors.length);\n}\n", "nl": "Proceed to the next available ring color. This will automatically wrap back to the beginning of colors.", "id": "9187"}
{"code": "public void addAccount(Fragment fragment,int result){\n  fragment.startActivityForResult(createAddAccountIntent(),result);\n}\n", "nl": "Triggers Android's account adding dialog from a fragment.", "id": "15172"}
{"code": "protected static double normaliseAngle(double value){\n  double angle=value;\n  while (angle < 0.0) {\n    angle+=360.0;\n  }\n  while (angle > 360.0) {\n    angle-=360.0;\n  }\n  return angle;\n}\n", "nl": "Normalise angle.", "id": "25487"}
{"code": "public boolean executeImmediately(final String command){\n  throw new RuntimeException(\"Internal error: OLD executeImmediately()\");\n}\n", "nl": "execute a command within the swing thread", "id": "27411"}
{"code": "public void stop(){\n  messageLogger.stop();\n}\n", "nl": "Stops the message logger.", "id": "13786"}
{"code": "@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){\n  View view=inflater.inflate(R.layout.fragment_search,container,false);\n  initModel();\n  initPresenter();\n  initView(view);\n  messageManagePresenter.sendMessage(1,null);\n  return view;\n}\n", "nl": "<br> life cycle.", "id": "40676"}
{"code": "public void triangulateYMonotonePolygons(){\n  List<MonotonePolygon<DoubleEdgeListVertex>> monotonePolygons=this.getYMonotonePolygons();\n  int size=monotonePolygons.size();\n  for (int i=0; i < size; i++) {\n    this.triangulateYMonotonePolygon(monotonePolygons.get(i));\n  }\n}\n", "nl": "Performs a triangulation of the DCEL assuming all faces are Monotone Y polygons.", "id": "5491"}
{"code": "public LogSubject containsNoMoreMessages(){\n  assertThat(messages).isEmpty();\n  return this;\n}\n", "nl": "There are no more lines in the logs.", "id": "44283"}
{"code": "public void selectAll(boolean select){\n  if (classificationViewer == null)   classificationViewer=(ClassificationViewer)dir.getViewerByClass(ClassificationViewer.class);\n  if (classificationViewer == null)   return;\n  classificationViewer.selectAllNodes(select);\n}\n", "nl": "set select state of all objects", "id": "7089"}
{"code": "public static void d(String tag,String msg,Object... args){\n  if (sLevel > LEVEL_DEBUG) {\n    return;\n  }\n  if (args.length > 0) {\n    msg=String.format(msg,args);\n  }\n  Log.d(tag,msg);\n}\n", "nl": "Send a DEBUG log message", "id": "30018"}
{"code": "public Iterator tuples(IntIterator rows){\n  return m_tuples.iterator(rows);\n}\n", "nl": "Get an iterator over the tuples for the given rows in this table.", "id": "44499"}
{"code": "public static void writeLittleEndianFloat(DataOutputStream dataStream,float val) throws IOException {\n  writeLittleEndianInt(dataStream,Float.floatToRawIntBits(val));\n}\n", "nl": "Writes a float to the given DataOutputStream, where the data is in little endian.", "id": "13518"}
{"code": "public boolean print_table(){\n  return soot.PhaseOptions.getBoolean(options,\"print-table\");\n}\n", "nl": "Print Table -- Print table of transactions. Print a table of information about the program's transactions.", "id": "52303"}
{"code": "public PhotosGetAlbumsCountQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "User ID.", "id": "38142"}
{"code": "public void addCatchablePokemons(Collection<MapPokemon> catchablePokemons){\n  if (catchablePokemons == null || catchablePokemons.isEmpty()) {\n    return;\n  }\n  complete=true;\n  this.catchablePokemons.addAll(catchablePokemons);\n}\n", "nl": "Add catchable pokemons.", "id": "16778"}
{"code": "private static int nextPowerOfTwo(final int i){\n  return Integer.highestOneBit(i) << 1;\n}\n", "nl": "Find the smallest power of two greater than the input value", "id": "40482"}
{"code": "public static <T>T insteadThrowRuntime(RuntimeException exception){\n  throw exception;\n}\n", "nl": "Helper method to throw an exception when a result is expected as a return value (e.g. in a ternary operator)", "id": "18280"}
{"code": "@Override public boolean parseParameters(Object params){\n  if (params == null || !(params instanceof RewardForSendingMatchingChatMessage))   return false;\n  this.params=(RewardForSendingMatchingChatMessage)params;\n  for (  ChatMatchSpec cm : this.params.getChatMatch())   addChatMatchSpecToRewardStructure(cm);\n  return true;\n}\n", "nl": "Attempt to parse the given object as a set of parameters for this handler.", "id": "55788"}
{"code": "public void close(){\n  finished=true;\n  IOUtils.closeQuietly(bufferedReader);\n  cachedLine=null;\n}\n", "nl": "Closes the underlying <code>Reader</code> quietly. This method is useful if you only want to process the first few lines of a larger file. If you do not close the iterator then the <code>Reader</code> remains open. This method can safely be called multiple times.", "id": "40972"}
{"code": "protected void moveToPrimary(){\n  beforeSpaceModeChange(SpaceMode.PRIMARY);\n  setSpaceMode(SpaceMode.PRIMARY);\n  afterSpaceModeChange(SpaceMode.PRIMARY);\n}\n", "nl": "Change space mode to primary", "id": "55456"}
{"code": "public boolean canContainKey(Object key){\n  if (!(super.canContainKey(key) && key instanceof RemoteMethodControl)) {\n    return false;\n  }\n  return ConstrainableProxyUtil.equivalentConstraints(((RemoteMethodControl)key).getConstraints(),((RemoteMethodControl)server).getConstraints(),methodMappings);\n}\n", "nl": "Only allow leases permitted by RegistrarLeaseMap with compatible constraints.", "id": "12295"}
{"code": "private void updateFieldStates(){\n  backgroundColourButton.setEnabled(!chckboxTransparent.isSelected());\n  borderColourButton.setEnabled(chckboxShowBorder.isSelected());\n}\n", "nl": "Update field states.", "id": "37504"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "21523"}
{"code": "public boolean equals(Object obj){\n  return (obj instanceof ConstraintAlternatives && Constraint.equal(constraints,((ConstraintAlternatives)obj).constraints));\n}\n", "nl": "Two instances of this class are equal if they have the same constraints (ignoring order).", "id": "2147"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_Instant_INTERVAL_HEAL_MP_TO_ME(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201157,num0,skillname);\n}\n", "nl": "You recovered %num0 MP due to the effect of [%SkillName].", "id": "44828"}
{"code": "private void add(Diphone diphone){\n  diphoneMap.put(diphone.getName(),diphone);\n  if (defaultDiphone == null) {\n    defaultDiphone=diphone;\n  }\n}\n", "nl": "Adds the given diphone to the DB. Diphones are kept in a map so they can be accessed by name.", "id": "35852"}
{"code": "public boolean isInUpdate(){\n  return docInUpdate;\n}\n", "nl": "are we currently updating the document?", "id": "39474"}
{"code": "public boolean isByteFeature(String featureName){\n  try {\n    int index=getFeatureIndex(featureName);\n    return isByteFeature(index);\n  }\n catch (  Exception e) {\n    return false;\n  }\n}\n", "nl": "Determine whether the feature with the given name is a byte feature.", "id": "46776"}
{"code": "public void mousePressed(@AndroidCoordinate int x,@AndroidCoordinate int y){\n  if (myMouseInteraction != null) {\n    myMouseInteraction.mousePressed(pxToDp(x),pxToDp(y),false);\n    myMouseInteraction.setAutoConnect(ConstraintModel.isAutoConnect());\n  }\n}\n", "nl": "Handles mouse press in the user interaction with our model", "id": "853"}
{"code": "public void animateApperance(){\n  mIsVisible=true;\n  mPanel.addToAnimation(this,AnimationType.APPEARANCE,0.f,1.f,ContextualSearchPanelAnimation.MAXIMUM_ANIMATION_DURATION_MS,0);\n}\n", "nl": "Animates the appearance of the search provider icon sprite. This should be called after the panel open animation has finished.", "id": "20093"}
{"code": "private void readObjectNoData() throws ObjectStreamException {\n  throw new InvalidObjectException(\"no data\");\n}\n", "nl": "Throws InvalidObjectException, since data for this class is required.", "id": "57933"}
{"code": "@Override public List<Class<? extends ConfigAspect>> mergeDependencies(){\n  return ImmutableList.of();\n}\n", "nl": "Returns an empty list since this aspect does not depend on any other aspects.", "id": "33440"}
{"code": "public int addKey(String key){\n  Objects.requireNonNull(key);\n  int nextIndex=keys.size();\n  final Integer mapIndex=keys.putIfAbsent(key,nextIndex);\n  return mapIndex == null ? nextIndex : mapIndex;\n}\n", "nl": "Add the key and return it's index code. If the key already is present, the previous index code is returned and no insertion is done.", "id": "47254"}
{"code": "public static MatD makeScaleTranslation(double scale,VecD t){\n  return new MatD(new double[]{scale,0,0,0,0,scale,0,0,0,0,scale,0,scale * t.x,scale * t.y,scale * t.z,1});\n}\n", "nl": "Creates a matrix that is a scale followed by a translation.", "id": "49564"}
{"code": "@Override public boolean isXYLocked(){\n  return true;\n}\n", "nl": "must x and y coordinates by zoomed together?", "id": "21557"}
{"code": "public boolean geom_app_only(){\n  return soot.PhaseOptions.getBoolean(options,\"geom-app-only\");\n}\n", "nl": "Pointers processed by geomPTA -- Processing pointers that impact pointers in application code  only. When this option is true, geomPTA only processes the  pointers in library functions ( java.*, sun.*, and etc.) that  potentially impact the points-to information of pointers in  application code, the pointers in application code, and the base  pointers at virtual callsites. \t\t\t\t\t\t", "id": "52777"}
{"code": "public boolean rightIdentified(){\n  for (  TrieNode n : this.labelId2node.values()) {\n    if (!n.hasId())     return false;\n  }\n  return true;\n}\n", "nl": "this checks if equivalent states in the right language of this node are already identified.", "id": "29994"}
{"code": "public void dump(PrintWriter output,int pad,String title){\n  dump(output,pad,title,false);\n}\n", "nl": "Dumps this utterance in textual form.", "id": "15786"}
{"code": "public static String[] toStringArray(Collection<String> collection){\n  if (collection == null) {\n    return null;\n  }\n  return collection.toArray(new String[collection.size()]);\n}\n", "nl": "Copy the given Collection into a String array. The Collection must contain String elements only.", "id": "11543"}
{"code": "protected AdsAddOfficeUsersQuery data(String value){\n  return unsafeParam(\"data\",value);\n}\n", "nl": "Serialized JSON array of objects that describe added managers. Description of \"user_specification\" objects see below.", "id": "21025"}
{"code": "public synchronized boolean hasPendingTasks(){\n  Iterator<Future<?>> futIter=pendingTasks.iterator();\n  while (futIter.hasNext()) {\n    Future<?> fut=futIter.next();\n    if (fut.isDone())     futIter.remove();\n  }\n  return !pendingTasks.isEmpty();\n}\n", "nl": "Tests if there are any pending tasks to be completed.", "id": "57699"}
{"code": "final void removeHalfEdges(DoubleEdgeListHalfEdge edge){\n  int index=this.edges.indexOf(edge);\n  this.removeHalfEdges(index,edge);\n}\n", "nl": "Removes the given half edge and its twin.", "id": "1815"}
{"code": "@Override public boolean exclude(String identifier){\n  return !whitelist.contains(identifier);\n}\n", "nl": "Checks if the given identifier should be excluded.", "id": "27133"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Polymorph_A_TO_SELF(String skillcaster,String value0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200848,skillcaster,value0,skillname);\n}\n", "nl": "[%SkillCaster] has transformed into %0 by using [%SkillName].", "id": "52846"}
{"code": "private final boolean eq(Object o1,Object o2){\n  return o1 == o2 || ((o1 != null) && o1.equals(o2));\n}\n", "nl": "Compare two objects for equality.", "id": "55376"}
{"code": "public void removeOwnership(ServiceUnitId suname){\n  this.ownedServiceUnitsCache.invalidate(ServiceUnitZkUtils.path(suname));\n}\n", "nl": "Method to remove the ownership of local broker on the <code>ServiceUnit</code>, if owned", "id": "4334"}
{"code": "private void startDrawFragment(){\n  changeToFragment(DrawFragment.newInstance(imageUri));\n}\n", "nl": "Swap the view container for a draw fragment, restores the previous fragment if one exists.", "id": "41362"}
{"code": "@ObjectiveCName(\"respond:data:\") void respond(String rpcName,String data){\n  Object convertedData=MessageParser.convertTyped(data,this.client);\n  this.callback.onRpcSuccess(rpcName,convertedData);\n  this.clearTimeouts();\n}\n", "nl": "Called once a response message is received from the server. Converts the typed data and completes the request.", "id": "9860"}
{"code": "public short[][] reduce_table(){\n  return _reduce_table;\n}\n", "nl": "Access to <code>reduce_goto</code> table.", "id": "19033"}
{"code": "public static boolean isNullEmptyOrWhitespace(String test){\n  if (test == null) {\n    return true;\n  }\n  if (test.trim().length() == 0) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Crappy implementation of the C# is nullEmptyOrWhitespace which is occasionally useful", "id": "28392"}
{"code": "public JSONObject putOpt(String key,Object value) throws JSONException {\n  if (key != null && value != null) {\n    this.put(key,value);\n  }\n  return this;\n}\n", "nl": "Put a key/value pair in the JSONObject, but only if the key and the value are both non-null.", "id": "10697"}
{"code": "public boolean isHeader(int position){\n  return position >= 0 && position < mHeaderViews.size();\n}\n", "nl": "jude is head view", "id": "16648"}
{"code": "private FieldVector3D<T> vector(final double x,final double y,final double z){\n  final T zero=q0.getField().getZero();\n  return new FieldVector3D<T>(zero.add(x),zero.add(y),zero.add(z));\n}\n", "nl": "Create a constant vector.", "id": "3205"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonSkillArea_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201150,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] uses [%SkillName].", "id": "24457"}
{"code": "public void run(){\n  ThreadingUtils.logThreadStarting(\"Reconnection Manager\");\n  running=true;\n  while (running) {\nsynchronized (connections) {\n      oneCycle();\n    }\n    if (ThreadingUtils.sleep(SLEEP)) {\n      break;\n    }\n  }\n  ThreadingUtils.logThreadEnding();\n}\n", "nl": "Once called, it runs until 'stop' is called.", "id": "34550"}
{"code": "public void delete() throws IOException {\n  close();\n  Util.deleteContents(directory);\n}\n", "nl": "Closes the cache and deletes all of its stored values. This will delete all files in the cache directory including files that weren't created by the cache.", "id": "15493"}
{"code": "public void toggle(){\n  mSlidingMenu.toggle();\n}\n", "nl": "Toggle the SlidingMenu. If it is open, it will be closed, and vice versa.", "id": "17371"}
{"code": "public void acceptVisit(ExpressionVisitor visitor){\n  visitor.enter(this);\n}\n", "nl": "Accept a visit from a tree visitor.", "id": "1123"}
{"code": "public void loadDataStringFromFile(String sFilename) throws java.io.IOException, java.io.FileNotFoundException {\n  String sDataString=utils.loadFileToStringWithNewlines(sFilename);\n  setDataString(sDataString);\n}\n", "nl": "Creates the graph based on a data string loaded from a given file.", "id": "6459"}
{"code": "public static AirMap init(Context context){\n  return init(context,\"\");\n}\n", "nl": "Initializes the SDK. This must be called before any requests can be made", "id": "42133"}
{"code": "public static double readDouble(){\n  return scanner.nextDouble();\n}\n", "nl": "Reads the next token from standard input, parses it as a double, and returns the double.", "id": "49674"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_INTERVAL_TO_B(String skilltarget,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201050,skilltarget,num0,skillname);\n}\n", "nl": "[%SkillTarget]'s flight time decreased by %num0 due to the effect of [%SkillName].", "id": "17760"}
{"code": "public String nextLine(){\n  if (!hasNext()) {\n    throw new NoSuchElementException(\"No more lines\");\n  }\n  String currentLine=cachedLine;\n  cachedLine=null;\n  return currentLine;\n}\n", "nl": "Returns the next line in the wrapped <code>Reader</code>.", "id": "17831"}
{"code": "public FriendsGetRequestsQueryWithExtended count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of friend requests to return (default 100, maximum 1000).", "id": "41275"}
{"code": "public Vector2f subtractLocal(Vector2f vec){\n  if (null == vec) {\n    logger.warning(\"Provided vector is null, null returned.\");\n    return null;\n  }\n  x-=vec.x;\n  y-=vec.y;\n  return this;\n}\n", "nl": "<code>subtractLocal</code> subtracts a provided vector to this vector internally, and returns a handle to this vector for easy chaining of calls. If the provided vector is null, null is returned.", "id": "43848"}
{"code": "public static SM_SYSTEM_MESSAGE STR_UNION_ENTER_HIM(String value0){\n  return new SM_SYSTEM_MESSAGE(1400561,value0);\n}\n", "nl": "%0's alliance has joined the Alliance League.", "id": "26284"}
{"code": "public boolean hasSingleReportingRateAsDataFilter(){\n  return getFilterReportingRates().size() == 1 && getFilterOptions(DATA_X_DIM_ID).size() == 1;\n}\n", "nl": "Indicates whether this query has a single reporting rate specified as dimension option for the data dimension.", "id": "23493"}
{"code": "public Bundler putLong(String key,long value){\n  bundle.putLong(key,value);\n  return this;\n}\n", "nl": "Inserts a long value into the mapping of this Bundle, replacing any existing value for the given key.", "id": "8618"}
{"code": "public static void drawCircledText(Graphics2D g,String text,int x,int y){\n  drawCircledText(g,sSmallFont,text,x,y);\n}\n", "nl": "Utility function to draw a circle text centered at coordinates (x, y)", "id": "22261"}
{"code": "public VideoReorderAlbumsQuery before(Integer value){\n  return unsafeParam(\"before\",value);\n}\n", "nl": "ID of the album before which the album in question shall be placed.", "id": "28678"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_NOTIFY_PLAYING_TIME(String value0){\n  return new SM_SYSTEM_MESSAGE(1390214,value0);\n}\n", "nl": "You have played for %0 hour(s). Please take a break.", "id": "38187"}
{"code": "public void updateFifoXtnInfoForEntry(IEntryHolder eh,long xtnNumber,boolean writeLock,boolean entryWritingXtn){\n  _terminatingXtnsInfo.updateFifoXtnInfoForEntry(eh,xtnNumber,writeLock,entryWritingXtn);\n}\n", "nl": "update fifo xtn info for entry MUST be called  when entry is locked update write lock if writeLock is true, else update read lock entryWritingXtn = true if this is the commit of the entry write", "id": "57880"}
{"code": "public void write(@NonNull File file) throws IOException {\n  String summary=createSummary();\n  assert file.getParentFile().exists();\n  Files.write(summary,file,Charsets.UTF_8);\n}\n", "nl": "Writes the summary to the given file. The file should be in a directory which has already been created by the caller.", "id": "23581"}
{"code": "public static ViewTapTarget forView(View view,CharSequence title,@Nullable CharSequence description){\n  return new ViewTapTarget(view,title,description);\n}\n", "nl": "Return a tap target for the specified view", "id": "42336"}
{"code": "public void oneShot(View emiter,int numParticles){\n  oneShot(emiter,numParticles,new LinearInterpolator());\n}\n", "nl": "Launches particles in one Shot", "id": "50890"}
{"code": "public SpaceTypeDescriptorBuilder addFifoGroupingIndex(String fifoGroupingIndexPath){\n  if (fifoGroupingIndexPath == null)   throw new IllegalArgumentException(\"Argument cannot be null - 'fifoGroupingIndexPath'.\");\n  validateNoCollectionPath(fifoGroupingIndexPath);\n  this._fifoGroupingIndexes.add(fifoGroupingIndexPath);\n  return this;\n}\n", "nl": "Sets a fifo grouping index", "id": "6091"}
{"code": "public void disableDashedHighlightLine(){\n  mHighlightDashPathEffect=null;\n}\n", "nl": "Disables the highlight-line to be drawn in dashed mode.", "id": "48271"}
{"code": "public void init$Children(){\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "48027"}
{"code": "public <R>Plan<R> then(Function3<T1,T2,T3,R> selector){\n  if (selector == null) {\n    throw new NullPointerException();\n  }\n  return new Plan3<T1,T2,T3,R>(this,selector);\n}\n", "nl": "Matches when all observable sequences have an available element and projects the elements by invoking the selector function.", "id": "43006"}
{"code": "public final ScheduledTask schedule(SchedulerTask task,Quantum interval){\n  return schedule(task,interval,true);\n}\n", "nl": "Schedules a new task to be executed with the given interval The newly scheduled task is exeucted out-of-order at the moment of scheduling it This operation's result should be cached by the caller;otherwise the task will get unscheduled immediately", "id": "29437"}
{"code": "public static byte[] toByteArray(URI uri) throws IOException {\n  return IOUtils.toByteArray(uri.toURL());\n}\n", "nl": "Get the contents of a <code>URI</code> as a <code>byte[]</code>.", "id": "15544"}
{"code": "public static ShoppingCart makeShoppingListCart(LocalDispatcher dispatcher,GenericValue shoppingList,Locale locale){\n  return makeShoppingListCart(null,dispatcher,shoppingList,locale);\n}\n", "nl": "Create a new shoppingCart form a shoppingList", "id": "6351"}
{"code": "public void sendDelayedTimeDeadbandValues(){\n  this.equipmentLogger.trace(\"sendDelayedTimeDeadbandValues - Sending all time deadband delayed values to the server\");\n  for (  SDTTimeDeadbandScheduler tagScheduler : this.sdtTimeDeadbandSchedulers.values()) {\n    if (tagScheduler.isScheduledForSending()) {\n      tagScheduler.run();\n    }\n  }\n}\n", "nl": "Sends all through timedeadband delayed values immediately", "id": "22101"}
{"code": "public String createAuthorityName(Role role){\n  String roleName=role.getRoleName().toUpperCase();\n  return rolePrefix + roleName;\n}\n", "nl": "Create authority name to be used for authority", "id": "32018"}
{"code": "public void addColumn(String name,Expression expr){\n  addColumn(name,ColumnFactory.getColumn(this,expr));\n}\n", "nl": "Add a derived column to this table, using an Expression instance to dynamically calculate the column data values.", "id": "57778"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "23193"}
{"code": "public static VersionCmpTarget version(long version){\n  return new VersionCmpTarget(version);\n}\n", "nl": "Cmp on a given <i>version</i>.", "id": "12705"}
{"code": "private int doEndOfFile() throws EOFException {\n  eof=true;\n  if (throwEofException) {\n    throw new EOFException();\n  }\n  return -1;\n}\n", "nl": "Handle End of File.", "id": "28015"}
{"code": "public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {\n  ByteArrayOutputStream output=new ByteArrayOutputStream();\n  copy(input,output,encoding);\n  return output.toByteArray();\n}\n", "nl": "Get the contents of a <code>Reader</code> as a <code>byte[]</code> using the specified character encoding. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedReader</code>.", "id": "57993"}
{"code": "@Override public void keyPressed(KeyEvent e){\nsynchronized (keyLock) {\n    keysDown.add(e.getKeyCode());\n  }\n}\n", "nl": "This method cannot be called directly.", "id": "58593"}
{"code": "public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_PICKUP_ITEM_HE_DENIED(String value0,String value1,String value2){\n  return new SM_SYSTEM_MESSAGE(1300217,value0,value1,value2);\n}\n", "nl": "%0 denied %1's request for permission to pick up %2.", "id": "45774"}
{"code": "public static SM_SYSTEM_MESSAGE STR_KILLMSG(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1300739,value0,value1);\n}\n", "nl": "%0 has defeated %1.", "id": "13980"}
{"code": "private long timeSinceLastPrecacheMs(Context context){\n  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);\n  long lastPrecacheTimeMs=prefs.getLong(PREF_PRECACHE_LAST_TIME,-WAIT_UNTIL_NEXT_PRECACHE_MS);\n  return getElapsedRealtimeOnSystem() - lastPrecacheTimeMs;\n}\n", "nl": "Returns the number of milliseconds since the last precache run completed.", "id": "686"}
{"code": "public List<Contentlet> executeSafe(){\n  try {\n    return APILocator.getContentletAPI().search(query.toString(),this.limit,this.offset,this.sortBy,APILocator.getUserAPI().getSystemUser(),false);\n  }\n catch (  DotDataException|DotSecurityException e) {\n    Logger.warn(this,\"Exception while executing query\",e);\n  }\n  return new ArrayList<Contentlet>();\n}\n", "nl": "Executes the query", "id": "49467"}
{"code": "public DummyReference withTimestamp(Instant newTimestamp){\n  return new DummyReference(this.reference,this.message,this.author,this.changesBase,newTimestamp);\n}\n", "nl": "Returns an instance equivalent to this one but with the timestamp set to the specified value.", "id": "46584"}
{"code": "protected NotesDeleteCommentQuery commentId(int value){\n  return unsafeParam(\"comment_id\",value);\n}\n", "nl": "Comment ID.", "id": "2336"}
{"code": "@Override protected void componentShowing(){\n  if (!initialized) {\n    initialized=true;\n    doInitialize();\n  }\n  if (null != content && getComponentCount() == 0) {\n    add(content,BorderLayout.CENTER);\n  }\n  super.componentShowing();\n}\n", "nl": "Called when <code>TopComponent</code> is about to be shown. Shown here means the component is selected or resides in it own cell in container in its <code>Mode</code>. The container is visible and not minimized. <p><em>Note:</em> component is considered to be shown, even its container window is overlapped by another window.</p>", "id": "28301"}
{"code": "@Override public void redoAction(UndoInterface undoRedoObject){\n  if (undoRedoObject != null) {\n    if (undoRedoObject.getNewValue() instanceof String) {\n      String newValue=(String)undoRedoObject.getNewValue();\n      populateField(newValue);\n    }\n  }\n}\n", "nl": "Redo action.", "id": "16301"}
{"code": "public static byte[] decode(String s) throws Base64DecoderException {\n  byte[] bytes=s.getBytes();\n  return decode(bytes,0,bytes.length);\n}\n", "nl": "Decodes data from Base64 notation.", "id": "29901"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_NOT_ENOUGH_ITEM(DescriptionId value0){\n  return new SM_SYSTEM_MESSAGE(1300018,value0);\n}\n", "nl": "You do not have enough %0 necessary to use the skill.", "id": "54651"}
{"code": "public void add(short[] vals){\n  add(vals,0,vals.length);\n}\n", "nl": "Adds the values in the array <tt>vals</tt> to the end of the list, in order.", "id": "30672"}
{"code": "public static <T>Aggregate<Map<String,Concept>,Map<Concept,T>> group(String varName,Aggregate<? super Map<String,Concept>,T> innerAggregate){\n  return new GroupAggregate<>(varName,innerAggregate);\n}\n", "nl": "Aggregate that groups results of a match query by variable name, applying an aggregate to each group.", "id": "45797"}
{"code": "public void addDeferredJimplification(DeferableInstruction i){\n  deferredInstructions.add(i);\n}\n", "nl": "Add a deferred instruction to this body.", "id": "21222"}
{"code": "public static boolean isValidHexColor(String value){\n  return value != null && HEX_COLOR_PATTERN.matcher(value).matches();\n}\n", "nl": "Checks to see if given parameter is a valid hex color string (#xxx and #xxxxxx, xxx, xxxxxx).", "id": "30675"}
{"code": "public static float interpolateLinear(float scale,float startValue,float endValue){\n  if (startValue == endValue) {\n    return startValue;\n  }\n  if (scale <= 0f) {\n    return startValue;\n  }\n  if (scale >= 1f) {\n    return endValue;\n  }\n  return ((1f - scale) * startValue) + (scale * endValue);\n}\n", "nl": "Linear interpolation from startValue to endValue by the given percent. Basically: ((1 - percent) * startValue) + (percent * endValue)", "id": "29156"}
{"code": "@Override public void onClick(View v){\n  LogUtil.e(\"position = \" + position);\n  new BossZoomHelper((Activity)context,bossJumpView,400);\n}\n", "nl": "Called when a view has been clicked.", "id": "41166"}
{"code": "public boolean hasAggregationLevels(){\n  return aggregationLevels != null && aggregationLevels.size() > 0;\n}\n", "nl": "Tests whether more than one aggregation level exists for the DataElement.", "id": "5624"}
{"code": "public static void startPhysicalWeb(ChromeApplication application){\n  PhysicalWebBleClient physicalWebBleClient=PhysicalWebBleClient.getInstance(application);\n  physicalWebBleClient.subscribe();\n}\n", "nl": "Start the Physical Web feature. At the moment, this only enables URL discovery over BLE.", "id": "54686"}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){\n  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. This version of the call is used for Views that need to specify a Scroll Range but scroll back to it's edge correctly.", "id": "25363"}
{"code": "public boolean isResumeSupported(){\nsynchronized (lock) {\n    return restSupported;\n  }\n}\n", "nl": "Checks whether the connected server explicitly supports resuming of broken data transfers.", "id": "52932"}
{"code": "public static void v(String msg){\n  if (LOG_ENABLE) {\n    Log.v(TAG,buildMsg(msg));\n  }\n}\n", "nl": "verbose log", "id": "48068"}
{"code": "public UsersSearchQuery schoolCountry(Integer value){\n  return unsafeParam(\"school_country\",value);\n}\n", "nl": "ID of the country where users finished school.", "id": "18074"}
{"code": "private static boolean isAlphanum(char p_char){\n  return (p_char <= 'z' && (fgLookupTable[p_char] & MASK_ALPHA_NUMERIC) != 0);\n}\n", "nl": "Determine whether a char is an alphanumeric: 0-9, a-z or A-Z", "id": "19448"}
{"code": "@Override public void onStop(){\n  if (status.get() != STATUS_STOPPING) {\n    onException(new IllegalStateException(\"Binlog Receiver is stopped ungracefully.\"));\n  }\n}\n", "nl": "if binlog receiver is stopped, this method will be called.", "id": "54309"}
{"code": "public BaseViewHolder addOnLongClickListener(int viewId){\n  itemChildLongClickViewIds.add(viewId);\n  return this;\n}\n", "nl": "add long click view id", "id": "644"}
{"code": "public static void updateAircraft(AirMapAircraft aircraft,AirMapCallback<AirMapAircraft> listener){\n  String url=String.format(pilotAircraftByIdUrl,AirMap.getUserId(),aircraft.getAircraftId());\n  AirMap.getClient().patch(url,aircraft.getAsParamsPatch(),new GenericOkHttpCallback(listener,AirMapAircraft.class));\n}\n", "nl": "Update an aircraft for the authenticated user", "id": "17210"}
{"code": "private synchronized final void fallAsleep(long duration) throws InterruptedException {\n  wait(duration);\n}\n", "nl": "Fall asleep for the specified fixed duration.", "id": "53466"}
{"code": "public boolean isAintersects(BitSet H){\n  return A.intersects(H);\n}\n", "nl": "does A part intersect set H?", "id": "56445"}
{"code": "public static void main(String[] args){\n  Thrust simulation=new Thrust();\n  simulation.run();\n}\n", "nl": "Entry point for the example application.", "id": "52387"}
{"code": "public static void buildUnpaidOrderTable(Connection conn){\n  try {\n    Statement stmt=conn.createStatement();\n    stmt.execute(\"CREATE TABLE UnpaidOrder \" + \"( CustomerNumber CHAR(10) NOT NULL REFERENCES Customer(CustomerNumber), \" + \"  ProdNum CHAR(10) NOT NULL REFERENCES Coffee(ProdNum),\"+ \"  OrderDate CHAR(10),\"+ \"  Quantity DOUBLE,\"+ \"  Cost DOUBLE )\");\n  }\n catch (  SQLException ex) {\n    System.out.println(\"ERROR: \" + ex.getMessage());\n  }\n}\n", "nl": "The buildUnpaidOrderTable method creates the UnpaidOrder table.", "id": "141"}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){\n  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. <p/> This should only be used on AdapterView's such as ListView as it just calls through to overScrollBy() with the scrollRange = 0. AdapterView's do not have a scroll range (i.e. getScrollY() doesn't work).", "id": "25484"}
{"code": "public Bundler putIntArray(String key,int[] value){\n  bundle.putIntArray(key,value);\n  return this;\n}\n", "nl": "Inserts an int array value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.", "id": "2550"}
{"code": "public void destroyView() throws CanceledException {\n  MeganProperties.removePropertiesListListener(getJMenuBar().getRecentFilesListener());\n  super.destroyView();\n}\n", "nl": "ask view to destroy itself", "id": "58390"}
{"code": "private void init(final AttributeSet attrs){\n  Typeface typeface;\n  if (!isInEditMode() && (typeface=CustomFontUtils.getTypeFace(this,attrs)) != null) {\n    super.setTypeface(typeface,typeface.getStyle());\n  }\n}\n", "nl": "Initialize custom font attribute.", "id": "37074"}
{"code": "public static int readInt(){\n  return scanner.nextInt();\n}\n", "nl": "Reads the next token from standard input, parses it as an integer, and returns the integer.", "id": "1615"}
{"code": "private boolean has(Object spec){\n  if (!matched) {\n    return false;\n  }\n  String match=matcher.group(EXPR_TOKEN_GROUP);\n  if (spec instanceof Pattern) {\n    return ((Pattern)spec).matcher(match).matches();\n  }\n  return spec.equals(match);\n}\n", "nl": "Check whether the next token matches the spec, which can either be a string or a pattern.", "id": "46561"}
{"code": "public static String toString(URL url,Charset encoding) throws IOException {\n  InputStream inputStream=url.openStream();\n  try {\n    return toString(inputStream,encoding);\n  }\n  finally {\n    inputStream.close();\n  }\n}\n", "nl": "Gets the contents at the given URL.", "id": "7761"}
{"code": "private boolean zzRefill() throws java.io.IOException {\n  return true;\n}\n", "nl": "Refills the input buffer.", "id": "37645"}
{"code": "public FieldVector3D<T> scalarMultiply(final T a){\n  return new FieldVector3D<T>(x.multiply(a),y.multiply(a),z.multiply(a));\n}\n", "nl": "Multiply the instance by a scalar.", "id": "33534"}
{"code": "@Override public void onPageStarted(WebView view,String url,Bitmap favicon){\n  super.onPageStarted(view,url,favicon);\n  isCurrentlyLoading=true;\n  parentEngine.bridge.reset();\n  parentEngine.client.onPageStarted(url);\n}\n", "nl": "Notify the host application that a page has started loading. This method is called once for each main frame load so a page with iframes or framesets will call onPageStarted one time for the main frame. This also means that onPageStarted will not be called when the contents of an embedded frame changes, i.e. clicking a link whose target is an iframe.", "id": "12864"}
{"code": "public void put(String key,File file,String contentType) throws FileNotFoundException {\n  if (key != null && file != null) {\n    fileParams.put(key,new FileWrapper(file,contentType));\n  }\n}\n", "nl": "Adds a file to the request.", "id": "28056"}
{"code": "public double estimateCost(double effortApplied,double averageWage){\n  double estimatedCost=effortApplied * (averageWage / 12) * 1.8;\n  return estimatedCost;\n}\n", "nl": "Calculate the cost in dollars applied using generic COCOMO2 weighted values based on the average yearly wage.", "id": "33025"}
{"code": "public void handleDecode(String result){\n  playBeepSoundAndVibrate();\n  Toast.makeText(MyApplication.getContext(),result,Toast.LENGTH_SHORT).show();\n  restartQr();\n}\n", "nl": "QR scan result", "id": "26323"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof ViewerBase;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "41253"}
{"code": "public static SM_SYSTEM_MESSAGE STR_BINDSTONE_WARNING_REMAIN_TIME(String durationtime0){\n  return new SM_SYSTEM_MESSAGE(1400169,durationtime0);\n}\n", "nl": "The remaining active time of the registered Kisk is %DURATIONTIME0.", "id": "1489"}
{"code": "public static void removeCredentials(String url){\n  server2Credentials.remove(url);\n}\n", "nl": "remove credentials for given URL", "id": "30941"}
{"code": "public void finishPhases(){\n  if (paddleTransformer != null) {\n    paddleTransformer().finishPhases();\n  }\n}\n", "nl": "This is called when Soot finishes executing all interprocedural phases. Paddle uses it to stop profiling if profiling is enabled.", "id": "41545"}
{"code": "public AdsGetAdsLayoutQuery campaignIds(String value){\n  return unsafeParam(\"campaign_ids\",value);\n}\n", "nl": "Filter by advertising campaigns. Serialized JSON array with campaign IDs. If the parameter is 'null', ads of all campaigns will be shown.", "id": "10431"}
{"code": "public void addLanguage(Integer languageId){\n  if (languageId != null) {\n    addLanguage(languageId.toString());\n  }\n else {\n    Logger.warn(this,\"Tried to add languageId Null!\");\n  }\n}\n", "nl": "Adds a language limit to the query", "id": "50011"}
{"code": "public WallReportCommentQuery reportComment(UserActor actor,int ownerId,int commentId){\n  return new WallReportCommentQuery(getClient(),actor,ownerId,commentId);\n}\n", "nl": "Reports (submits a complaint about) a comment on a post on a user wall or community wall.", "id": "5185"}
{"code": "@Override public void run(){\n  while (!isInterrupted()) {\n    try {\n      ValueHolder<K,V> ref=(ValueHolder<K,V>)_queue.remove();\n      _table.remove(ref.getKey());\n    }\n catch (    InterruptedException e) {\n      interrupt();\n      break;\n    }\n  }\n}\n", "nl": "Block on the queue until an entry is been cleaned by the GC", "id": "5803"}
{"code": "@Override public void onLoadPackageCheckFail(File patchFile,int errorCode){\n  TinkerLog.i(TAG,\"load patch package check fail file path:%s, errorCode:%d\",patchFile.getAbsolutePath(),errorCode);\n  Tinker.with(context).cleanPatch();\n}\n", "nl": "check patch signature, TINKER_ID and meta files", "id": "38735"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "9428"}
{"code": "public int writeGraphToFile(byte[] img,String file){\n  File to=new File(file);\n  return writeGraphToFile(img,to);\n}\n", "nl": "Writes the graph's image in a file.", "id": "18496"}
{"code": "public static String delimiterConverter(String delimiter){\nswitch (delimiter) {\ncase \"|\":\ncase \"*\":\ncase \".\":\ncase \":\":\ncase \"^\":\ncase \"\\\\\":\ncase \"$\":\ncase \"+\":\ncase \"?\":\ncase \"(\":\ncase \")\":\ncase \"{\":\ncase \"}\":\ncase \"[\":\ncase \"]\":\n    return \"\\\\\" + delimiter;\ndefault :\n  return delimiter;\n}\n}\n", "nl": "special char delimiter Converter", "id": "3737"}
{"code": "public static double convertTempo(double tempo){\n  if (tempo <= 0) {\n    tempo=1;\n  }\n  return ((double)60000000l) / tempo;\n}\n", "nl": "converts<br> 1 - MPQ-Tempo to BPM tempo<br> 2 - BPM tempo to MPQ tempo<br>", "id": "36153"}
{"code": "public static Object bytesToObject(byte[] bytes) throws IOException, ClassNotFoundException {\n  ByteArrayInputStream inStream=new ByteArrayInputStream(bytes);\n  ObjectInputStream in=new ContextClassLoaderObjectInputStream(inStream);\n  Object data=in.readObject();\n  in.close();\n  return data;\n}\n", "nl": "Convert a byte array into an object.", "id": "45434"}
{"code": "public static boolean audit(){\n  return audit.get() == null ? true : audit.get();\n}\n", "nl": "Whether audit is enable ? Defaults to true.", "id": "24808"}
{"code": "public boolean isHttps(){\n  Attribute<Boolean> isHttpsAttr=ctx.attr(AttributeKey.<Boolean>valueOf(IS_HTTPS_ATTRIBUTE_NAME));\n  Boolean isHttps=isHttpsAttr.get();\n  if (isHttps == null) {\n    return false;\n  }\n else {\n    return isHttps;\n  }\n}\n", "nl": "Returns true if this is an HTTPS request.", "id": "2155"}
{"code": "public static ValueGetterSpacePredicate<ServerEntry> propertyNotEqual(String propertyName,Object value){\n  return property(propertyName,notEqual(value));\n}\n", "nl": "Shortcut for property(propertyName, notEqual(value)).", "id": "21341"}
{"code": "public static IOFileFilter ageFileFilter(Date cutoffDate){\n  return new AgeFileFilter(cutoffDate);\n}\n", "nl": "Returns a filter that returns true if the file was last modified after the specified cutoff date.", "id": "22053"}
{"code": "public static void v(String tag,String msg,Object... args){\n  if (sLevel > LEVEL_VERBOSE) {\n    return;\n  }\n  if (args.length > 0) {\n    msg=String.format(msg,args);\n  }\n  Log.v(tag,msg);\n}\n", "nl": "Send a VERBOSE log message.", "id": "51820"}
{"code": "public Builder marginTop(int marginTop){\n  this.marginTop=marginTop;\n  return this;\n}\n", "nl": "Set top margin. Default value: 24dp.", "id": "33449"}
{"code": "public static double parseDouble(String text) throws DataParseException {\n  try {\n    return Double.parseDouble(text);\n  }\n catch (  NumberFormatException e) {\n    throw new DataParseException(e);\n  }\n}\n", "nl": "Parse a double value from a text string.", "id": "30733"}
{"code": "public void clear(int code){\n  MouseButton mb=this.buttons.get(code);\n  if (mb == null) {\n    return;\n  }\n  mb.clear();\n}\n", "nl": "Clears the state of the given MouseEvent code.", "id": "308"}
{"code": "public RequestHandle put(String url,ResponseHandlerInterface responseHandler){\n  return put(null,url,null,responseHandler);\n}\n", "nl": "Perform a HTTP PUT request, without any parameters.", "id": "55312"}
{"code": "public static boolean dateIsValid(String date,Locale locale){\n  return DateValidator.getInstance().isValid(date,locale);\n}\n", "nl": "Validates whether a date string is valid for the given Locale.", "id": "23090"}
{"code": "void save(PermissionHolder holder){\n  if (holder instanceof User) {\n    plugin.getDatastore().saveUser(((User)holder),null);\n  }\n  if (holder instanceof Group) {\n    plugin.getDatastore().saveGroup(((Group)holder),null);\n  }\n}\n", "nl": "Utility method for saving a user or group", "id": "38514"}
{"code": "private void delayedHide(int delayMillis){\n  mHideHandler.removeCallbacks(mHideRunnable);\n  mHideHandler.postDelayed(mHideRunnable,delayMillis);\n}\n", "nl": "Schedules a call to hide() in [delay] milliseconds, canceling any previously scheduled calls.", "id": "33536"}
{"code": "private static String keyForSet(String name){\n  return \"service_set_\" + name;\n}\n", "nl": "Service set's key", "id": "56278"}
{"code": "public IdentityStmt newIdentityStmt(Value local,Value identityRef){\n  return new GIdentityStmt(local,identityRef);\n}\n", "nl": "Constructs a IdentityStmt(Local, IdentityRef) grammar chunk.", "id": "25392"}
{"code": "public PollsGetVotersQuery isBoard(Boolean value){\n  return unsafeParam(\"is_board\",value);\n}\n", "nl": "Set is board", "id": "34821"}
{"code": "public Builder filter(Filter filter){\n  actionList.add(new DataAction(filter));\n  return this;\n}\n", "nl": "Add a filter operation to be executed after the previously-added operations have been executed", "id": "10302"}
{"code": "public void addSwipeListener(SwipeListener listener){\n  if (mListeners == null) {\n    mListeners=new ArrayList<SwipeListener>();\n  }\n  mListeners.add(listener);\n}\n", "nl": "Add a callback to be invoked when a swipe event is sent to this view.", "id": "2662"}
{"code": "private void init() throws IOException {\n  initPath();\n  openThriftReader();\n}\n", "nl": "The method initializes the dictionary Sort Index file path and initialize and opens the thrift reader for dictionary sortIndex file.", "id": "55056"}
{"code": "public static ExpectedCondition<Boolean> heightOfElementGreaterThan(final WebElement element,final int expectedHeight){\n  return null;\n}\n", "nl": "Check if provided element height is greater than expected height", "id": "43619"}
{"code": "public boolean isValidGenericTld(String gTld){\n  gTld=unicodeToASCII(gTld);\n  return Arrays.binarySearch(GENERIC_TLDS,chompLeadingDot(gTld.toLowerCase(Locale.ENGLISH))) >= 0;\n}\n", "nl": "Returns true if the specified <code>String</code> matches any IANA-defined generic top-level domain. Leading dots are ignored if present. The search is case-insensitive.", "id": "37850"}
{"code": "public final void log(){\n  if (this.values != null) {\n    for (    FilteredDataTagValue tagValue : values) {\n      tagValue.log();\n    }\n  }\n}\n", "nl": "The method for logging a FilteredDataTagValueUpdate object in Slf4j.", "id": "42002"}
{"code": "public int modify_file(String group_name,String appender_filename,long file_offset,byte[] file_buff) throws IOException, MyException {\n  return this.do_modify_file(group_name,appender_filename,file_offset,file_buff.length,new UploadBuff(file_buff,0,file_buff.length));\n}\n", "nl": "modify appender file to storage server (by file buff)", "id": "34900"}
{"code": "public static TimeZone toTimeZone(String tzId){\n  if (UtilValidate.isEmpty(tzId)) {\n    return TimeZone.getDefault();\n  }\n else {\n    return TimeZone.getTimeZone(tzId);\n  }\n}\n", "nl": "Returns a TimeZone object based upon a time zone ID. Method defaults to server's time zone if tzID is null or empty.", "id": "26869"}
{"code": "public static Date min(Collection<Date> dates){\n  Date earliest=null;\n  for (  Date d : dates) {\n    earliest=min(d,earliest);\n  }\n  return earliest;\n}\n", "nl": "Returns the earliest of the given dates.", "id": "15457"}
{"code": "public int increment(int val){\n  if (val < 0) {\n    return decrement(-val);\n  }\n  lock.lock();\n  int newValue=(value+=val);\n  lock.unlock();\n  return newValue;\n}\n", "nl": "Increments the counter by val.", "id": "26945"}
{"code": "private static int decodeNumber(String string){\n  if (string.compareToIgnoreCase(\"x\") == 0) {\n    return ALL_VERSIONS;\n  }\n  return Integer.valueOf(string);\n}\n", "nl": "Decode number.", "id": "55211"}
{"code": "@Override public boolean isConnected(){\n  return connected;\n}\n", "nl": "Returns the is connected flag.", "id": "33721"}
{"code": "public static NumberPadTimePickerDialog newInstance(OnTimeSetListener callback){\n  NumberPadTimePickerDialog ret=new NumberPadTimePickerDialog();\n  ret.setOnTimeSetListener(callback);\n  ret.mThemeDark=false;\n  ret.mThemeSetAtRuntime=false;\n  return ret;\n}\n", "nl": "The number pad will be configured according to the user preference for 24-hour format.", "id": "27863"}
{"code": "public void block(){\n  skype.block(this);\n}\n", "nl": "Blocks this user (without reporting the account).", "id": "47382"}
{"code": "protected Datagram createZeroDatagram(int length){\n  return new Datagram(length,new byte[2 * length]);\n}\n", "nl": "Create a datagram appropriate for this unit concatenator which contains only zero values as samples.", "id": "18513"}
{"code": "public void add(String expr,StrokeAction f){\n  Predicate p=(Predicate)ExpressionParser.parse(expr);\n  super.add(p,f);\n}\n", "nl": "Add a mapping rule to this StrokeAction. VisualItems that match the provided expression will be assigned the given BasicStroke value (assuming they do not match an earlier rule). The provided expression String will be parsed to generate the needed rule Predicate.", "id": "46399"}
{"code": "public static void showProfile(android.support.v4.app.Fragment fragment,@Nullable HashMap<String,String> extras){\n  showProfile(fragment,AirMap.getUserId(),extras);\n}\n", "nl": "Display the authenticated pilot's profile", "id": "11845"}
{"code": "public UsersGetSubscriptionsQueryWithExtended count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of users and communities to return.", "id": "52639"}
{"code": "public AdsUpdateTargetGroupQuery domain(String value){\n  return unsafeParam(\"domain\",value);\n}\n", "nl": "Domain of the site where user accounting code will be placed.", "id": "24739"}
{"code": "private Object readResolve(){\n  return LazyHolder.INSTANCE;\n}\n", "nl": "Handle deserialization of the singleton.", "id": "42409"}
{"code": "protected VideoReorderVideosQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "ID of the user or community that owns the video.", "id": "505"}
{"code": "@Override public boolean onPaint(ViewTransform transform,Graphics2D g){\n  boolean needsRepaint=super.onPaint(transform,g);\n  if (isSelected()) {\n    ConstraintTableLayout table=(ConstraintTableLayout)mWidget;\n    WidgetDraw.drawTableControls(transform,g,table);\n  }\n  return needsRepaint;\n}\n", "nl": "Override the default paint method to draw the table controls when selected", "id": "47606"}
{"code": "public static double distance(S1Point p1,S1Point p2){\n  return Vector2D.angle(p1.vector,p2.vector);\n}\n", "nl": "Compute the distance (angular separation) between two points.", "id": "54494"}
{"code": "final public boolean isSyncReplicationEnabled(){\n  return _isSyncReplication;\n}\n", "nl": "is sync-replication enabled for at least one member in a clustered space.", "id": "331"}
{"code": "public void clearGroups(){\n  groups.clear();\n}\n", "nl": "Clear all of the groups within this track", "id": "9487"}
{"code": "public InputStream newInputStream(int index) throws IOException {\nsynchronized (DiskLruCache.this) {\n    if (entry.currentEditor != this) {\n      throw new IllegalStateException();\n    }\n    if (!entry.readable) {\n      return null;\n    }\n    try {\n      return new FileInputStream(entry.getCleanFile(index));\n    }\n catch (    FileNotFoundException e) {\n      return null;\n    }\n  }\n}\n", "nl": "Returns an unbuffered input stream to read the last committed value, or null if no value has been committed.", "id": "10472"}
{"code": "public static boolean isActionDown(KeyEvent event){\n  return event.getAction() == KeyEvent.ACTION_DOWN;\n}\n", "nl": "Checks whether the given event is an ACTION_DOWN event.", "id": "26836"}
{"code": "public static boolean isAndroidProjectWithoutGradleFacet(@NotNull ModuleChunk chunk){\n  return isAndroidProjectWithoutGradleFacet(chunk.getModules());\n}\n", "nl": "Indicates whether the given modules belong to a non-Gradle Android project.", "id": "30310"}
{"code": "public DynamicTemplateParameterContext addParameter(DynamicContextParameters param,String paramValue){\n  return addParameter(param,paramValue,ContextInfo.EMPTY);\n}\n", "nl": "Adds a dynamic parameter value. <ul> <li>It doesn't expect any template parameters within the parameter value.</li> <li>The parameter value replaces the previous parameter value.</li> <li>A file defined by the parameter will not be deleted on exit.</li> </ul>", "id": "5783"}
{"code": "public boolean isNumericType(){\n  return valueType.isNumeric();\n}\n", "nl": "Indicates whether the value type of this attribute is numeric.", "id": "32456"}
{"code": "@Override public boolean equals(Object o){\n  if (this == o)   return true;\n  if (o instanceof TxnMgrProxy) {\n    TxnMgrProxy other=(TxnMgrProxy)o;\n    return proxyID.getLeastSignificantBits() == other.proxyID.getLeastSignificantBits() && proxyID.getMostSignificantBits() == other.proxyID.getMostSignificantBits();\n  }\n else   return false;\n}\n", "nl": "Proxies for servers with the same <code>proxyID</code> are considered equal.", "id": "21362"}
{"code": "public void removeConnection(final IConnectionWithReconnect connection){\nsynchronized (connections) {\n    connections.remove(connection);\n  }\n}\n", "nl": "Removes a connection from the manager.", "id": "52525"}
{"code": "public static final SM_SYSTEM_MESSAGE STR_MSG_HOUSING_AUCTION_FAIL(int address){\n  return new SM_SYSTEM_MESSAGE(1401270,address);\n}\n", "nl": "Listed %addr0 was not auctioned.", "id": "41518"}
{"code": "@Override public boolean followReturnsPastSeeds(){\n  return true;\n}\n", "nl": "we need this option as we start directly at the sources, but need to go  backward in the call stack", "id": "3929"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CANNOT_USE_ITEM_INVALID_RANK(int value0){\n  return new SM_SYSTEM_MESSAGE(1300370,new DescriptionId(value0));\n}\n", "nl": "You cannot use the selected item until you reach the %0 rank.", "id": "56511"}
{"code": "private void error(Element element,String message,Object... args){\n  if (args.length > 0) {\n    message=String.format(message,args);\n  }\n  processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,message,element);\n}\n", "nl": "compiler output method,when compiler occurs exception.should be notice here.", "id": "30259"}
{"code": "public Iterator<T> asIterator(){\n  return new BlockingIterator();\n}\n", "nl": "Adapt the IterQueue as a blocking iterator.", "id": "16842"}
{"code": "public static <X extends DataSource>boolean areDataSourcesIndependent(Set<X> dataSources){\n  return dataSources.size() == getIndependentDataSources(dataSources).size();\n}\n", "nl": "Returns true if provided DataSources are independent. Independent means that no DataSource is (super)owner of any other DataSource.", "id": "44584"}
{"code": "private boolean coordIsCalendarCell(float y){\n  return y > cellHeight;\n}\n", "nl": "y is bigger than the head of the calendar, meaning that the coordination may represent a day of the calendar", "id": "47458"}
{"code": "public SpaceTypeDescriptorBuilder replicable(boolean replicable){\n  this._replicable=replicable;\n  return this;\n}\n", "nl": "Sets whether this type is replicable or not.", "id": "32653"}
{"code": "public void java_io_ObjectOutputStream_getObjectFieldValue(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  throw new NativeMethodNotSupportedException(method);\n}\n", "nl": "The object in field is retrieved out by field ID. private static native  java.lang.Object getObjectFieldValue(java.lang.Object, long);", "id": "27434"}
{"code": "public void unregisterToolbar(RTToolbar toolbar){\n  mToolbars.remove(toolbar.getId());\n  toolbar.removeToolbarListener();\n  updateToolbarVisibility();\n}\n", "nl": "Unregister a toolbar. <p> This method may be called before the component is destroyed to stop any interaction with the toolbar. Not doing so may result in (asynchronous) calls coming through when the Activity/Fragment is already stopping its operation. <p> Must be called from the ui thread. <p> Important: calling this method is obsolete once the onDestroy(boolean) is called", "id": "53920"}
{"code": "public boolean equals(ShoppingCartItem item){\n  if (item == null)   return false;\n  return this.equals(item.getProductId(),item.additionalProductFeatureAndAppls,item.attributes,item.prodCatalogId,item.selectedAmount,item.getItemType(),item.getItemGroup(),item.getIsPromo());\n}\n", "nl": "Compares the specified object with this cart item.", "id": "30999"}
{"code": "public void configPlugin(PluginLoader pluginLoader){\n}\n", "nl": "Config plugin", "id": "51614"}
{"code": "public GroupsGetBannedQuery fields(List<UserField> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields", "id": "19544"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "2314"}
{"code": "public void addSoundEvent(State event,int resId){\n  mSoundMap.put(event,resId);\n}\n", "nl": "Set the Sounds to be played when a Pull Event happens. You specify which sound plays for which events by calling this method multiple times for each event. <p/> If you've already set a sound for a certain event, and add another sound for that event, only the new sound will be played.", "id": "18944"}
{"code": "public TextUnit createTextUnit(Long id,String name,String source,String note){\n  return createTextUnit(id,name,source,note,null,null,null);\n}\n", "nl": "Creates a textUnit to be used later to generate a XLIFF", "id": "54300"}
{"code": "public Builder keepInView(Boolean keepInView){\n  this.keepInView=keepInView;\n  return this;\n}\n", "nl": "Set it to true if you want to prevent users from panning the popup off of the screen while it is open.", "id": "22774"}
{"code": "@Override public int[] makeInverseCumulativeTestValues(){\n  return new int[]{1,1,1,1,1,1,2,10,10,10,9,8,10};\n}\n", "nl": "Creates the default inverse cumulative probability density test expected values", "id": "10939"}
{"code": "public static boolean isEmpty(Map<?,?> map){\n  return (map == null || map.isEmpty());\n}\n", "nl": "Return <code>true</code> if the supplied <code>Map</code> is null or empty. Otherwise, return <code>false</code>.", "id": "31454"}
{"code": "public final void empty(){\nsynchronized (buffer) {\n    buffer.clear();\n    bufferMap.clear();\n  }\n}\n", "nl": "Empties the SynchroBuffer of all it's current content.", "id": "36156"}
{"code": "Item delete(Item item,Player actor){\n  return delete(item,ItemDeleteType.QUEST_REWARD,actor);\n}\n", "nl": "Delete item from storage and mark for DB update. UNKNOWN delete type", "id": "56518"}
{"code": "public void clear(){\n  m_lucene=new LuceneSearcher();\n  super.clear();\n}\n", "nl": "Removes all search hits and clears out the index.", "id": "57703"}
{"code": "public final void sendPacket(GsServerPacket bp){\nsynchronized (guard) {\n    if (isWriteDisabled()) {\n      return;\n    }\n    sendMsgQueue.addLast(bp);\n    enableWriteInterest();\n  }\n}\n", "nl": "Sends GsServerPacket to this client.", "id": "5824"}
{"code": "@NonNull public static StorableFence and(@NonNull StorableFence... fences){\n  return StorableFence.and(Arrays.asList(fences));\n}\n", "nl": "Creates a meta storable fence which is a logical 'and' of all the given fences", "id": "45241"}
{"code": "@PreDestroy public void shutdown(){\n  heartbeatTimer.cancel();\n}\n", "nl": "Stops the timer at shutdown.", "id": "11127"}
{"code": "public boolean insert_null_checks(){\n  return soot.PhaseOptions.getBoolean(options,\"insert-null-checks\");\n}\n", "nl": "Insert Null Checks -- . Insert a check that, before invoking the static copy of the  target method, throws a NullPointerException if the receiver  object is null. This ensures that static method binding does  not eliminate exceptions which would have occurred in its  absence.", "id": "12756"}
{"code": "protected GroupsGetMembersQueryWithFilter filter(GroupsGetMembersFilter value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Set filter", "id": "8548"}
{"code": "public void unregisterDrop(Npc npc){\n  Integer npcObjId=npc.getObjectId();\n  Map<Integer,DropNpc> dropRegmap=DropRegistrationService.getInstance().getDropRegistrationMap();\n  DropRegistrationService.getInstance().getCurrentDropMap().remove(npcObjId);\n  if (dropRegmap.containsKey(npcObjId)) {\n    dropRegmap.remove(npcObjId);\n  }\n}\n", "nl": "After NPC respawns - drop should be unregistered //TODO more correct - on despawn", "id": "55780"}
{"code": "public void addViewProvider(DataSourceViewProvider provider,Class<? extends DataSource> scope){\n  providers.put(provider,scope);\n}\n", "nl": "Registers new DataSourceViewProvider for given DataSource scope.", "id": "34524"}
{"code": "public NeExpr newNeExpr(Value op1,Value op2){\n  return new JNeExpr(op1,op2);\n}\n", "nl": "Constructs a NeExpr(Immediate, Immediate) grammar chunk.", "id": "18133"}
{"code": "protected void initInstances(Operation post,boolean checkIfExists,boolean selfDelete,ServiceDocument... states){\n  final AtomicInteger countDown=new AtomicInteger(states.length);\n  final Consumer<Throwable> callback=null;\n  for (  ServiceDocument state : states) {\n    initInstance(state,checkIfExists,callback);\n  }\n}\n", "nl": "Initialize a list of service default states if not already created. This method could be called only once per instance initialization.", "id": "47011"}
{"code": "public TopicSubscriber createDurableSubscriber(Topic topic,String name) throws JMSException {\n  throw new IllegalStateException(\"Forbidden call on a QueueSession.\");\n}\n", "nl": "API method.", "id": "55961"}
{"code": "public static boolean sameProxyClass(Object proxy1,Object proxy2){\n  return (proxy1.getClass() == proxy2.getClass() || (Proxy.isProxyClass(proxy2.getClass()) && equalInterfaces(proxy1,proxy2)));\n}\n", "nl": "Returns true if proxy2 is a generated Proxy (proxy1 is assumed to be one) and the classes of both proxies implement the same ordered list of interfaces, and returns false otherwise.", "id": "30912"}
{"code": "public static void error(@NonNull String tag,String message,Object... args){\n  android.util.Log.e(tag,String.format(Locale.ENGLISH,message,args));\n}\n", "nl": "Logs with error level", "id": "38691"}
{"code": "public QuestRewardCursor queryQuestRewardItem(long id){\n  return mHelper.queryQuestRewardItem(id);\n}\n", "nl": "QUEST REWARD QUERIES", "id": "22319"}
{"code": "public static byte[] generateIv() throws GeneralSecurityException {\n  return randomBytes(IV_LENGTH_BYTES);\n}\n", "nl": "Creates a random Initialization Vector (IV) of IV_LENGTH_BYTES.", "id": "13830"}
{"code": "public static void unsetHistory(){\n  History=false;\n}\n", "nl": "Unsets the history flag.", "id": "29522"}
{"code": "public void toAllInRadius(int dimension,Vec3d pos,double radius){\n  toAllInRadius(OpenModLoader.getSidedHandler().getServer().worldServerForDimension(dimension),pos,radius);\n}\n", "nl": "Sends this packet to all the players in the dimension within the radius", "id": "9597"}
{"code": "public PathSubject containsFiles(String... filenames){\n  for (  String filename : filenames) {\n    checkFile(filename);\n  }\n  return this;\n}\n", "nl": "Checks that the specific filenames exist relative to the path.", "id": "50394"}
{"code": "public boolean requestInterceptPreScroll(CoordinatorLayout parent){\n  return false;\n}\n", "nl": "Allow parent to intercept/consume pre-scroll event when this behaviour is on scrolling view.", "id": "20268"}
{"code": "public static FloatBuffer createVector3Buffer(FloatBuffer buf,int vertices){\n  if (buf != null && buf.limit() == 3 * vertices) {\n    buf.rewind();\n    return buf;\n  }\n  return createFloatBuffer(3 * vertices);\n}\n", "nl": "Create a new FloatBuffer of an appropriate size to hold the specified number of Vector3f object data only if the given buffer if not already the right size.", "id": "51217"}
{"code": "@Override public void innerDelete(){\n  Collection<? extends Concept> subSet=subTypes();\n  Collection<? extends Concept> instanceSet=instances();\n  subSet.remove(this);\n  if (subSet.isEmpty() && instanceSet.isEmpty()) {\n    deleteNode();\n  }\n else {\n    throw new ConceptException(ErrorMessage.CANNOT_DELETE.getMessage(toString()));\n  }\n}\n", "nl": "Deletes the concept as a type", "id": "27994"}
{"code": "public void destroy(){\n  ApplicationStatus.unregisterActivityStateListener(this);\n}\n", "nl": "Cleans up any external dependencies of this class.", "id": "23348"}
{"code": "public void removeOption(byte entryCode){\n  this.optionsTable.remove(new Byte(entryCode));\n}\n", "nl": "Removes option with specified bytecode", "id": "18688"}
{"code": "protected Integer defaultTransactionIsolation(){\n  return this.defaultTransactionIsolation;\n}\n", "nl": "Expose the default transaction isolation value.", "id": "50485"}
{"code": "public Builder buttonTextColor(int buttonTextColor){\n  this.buttonTextColor=buttonTextColor;\n  return this;\n}\n", "nl": "Set the text color of the buttons", "id": "19160"}
{"code": "private Boolean addColumn(Column columnToAdd,Set<Interval> intervals){\n  return workingIntervals.put(columnToAdd,intervals) == null;\n}\n", "nl": "Add a column to the working intervals.", "id": "43638"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "12424"}
{"code": "public Fraction add(final int i){\n  return new Fraction(numerator + i * denominator,denominator);\n}\n", "nl": "Add an integer to the fraction.", "id": "58150"}
{"code": "public static String toString(URI uri) throws IOException {\n  return toString(uri,Charset.defaultCharset());\n}\n", "nl": "Gets the contents at the given URI.", "id": "38932"}
{"code": "public void run(){\n  consumerObject.dispatch(task);\n}\n", "nl": "calls the dispatcher message of the consumer on this task", "id": "18751"}
{"code": "public static boolean isEmpty(String str){\n  if (str == null || str.length() == 0 || str.equalsIgnoreCase(\"null\") || str.isEmpty() || str.equals(\"\")) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n", "nl": "return if str is empty", "id": "13961"}
{"code": "@Override public void cancel(){\n  bobcatWait.withTimeout(Timeouts.BIG).until(WindowActions.clickButton(noButton));\n}\n", "nl": "Cancels the dialog.", "id": "2704"}
{"code": "public static String determineInitialCheckOutPage(ShoppingCart cart){\n  String page=DEFAULT_INIT_CHECKOUT_PAGE;\n  if (cart == null)   return page;\n  if (!cart.shippingApplies()) {\n    cart.setAllShipmentMethodTypeId(\"NO_SHIPPING\");\n    cart.setAllCarrierPartyId(\"_NA_\");\n    page=\"payment\";\n  }\n  return page;\n}\n", "nl": "Method to determine the initial checkout page based on requirements. This will also set any cart variables necessary to satisfy the requirements, such as setting the shipment method according to the type of items in the cart.", "id": "9155"}
{"code": "public static boolean initDebug(){\n  return StaticHelper.initOpenCV(false);\n}\n", "nl": "Loads and initializes OpenCV library from current application package. Roughly, it's an analog of system.loadLibrary(\"opencv_java\").", "id": "48581"}
{"code": "@SuppressWarnings(\"unchecked\") public final boolean hasNext(){\n  if (q[index] == null)   return false;\n  if (index == q.length - 1) {\n    q=(E[])q[index];\n    index=0;\n    if (q[index] == null)     return false;\n  }\n  return true;\n}\n", "nl": "Returns true iff there is currently another object in the queue.", "id": "45375"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "15296"}
{"code": "public boolean isLeft(){\n  return isLeft;\n}\n", "nl": "Returns whether or not this Either represents a Left value.", "id": "23460"}
{"code": "@SuppressWarnings(\"unchecked\") public static String mapWritableToString(MapWritable map){\n  JSONObject jsonObj=new JSONObject();\n  for (  Writable key : map.keySet()) {\n    jsonObj.put(key.toString(),map.get(key).toString());\n  }\n  return jsonObj.toJSONString();\n}\n", "nl": "Method to convert a MapWritable into a JSON string", "id": "30656"}
{"code": "public boolean equals(Object t){\n  return this == t;\n}\n", "nl": "Returns true if the given object is equal to this one. Since IntType is a singleton, object equality is fine.", "id": "51892"}
{"code": "public Builder fillRule(String fillRule){\n  this.fillRule=fillRule;\n  return this;\n}\n", "nl": "A string that defines how the inside of a shape is determined. See <a href= \"https://developer.mozilla.org/docs/Web/SVG/Attribute/fill-rule\"> docs </a> for more info </br>", "id": "20989"}
{"code": "public static String slurpURLNoExceptions(URL u,String encoding){\n  try {\n    return slurpURL(u,encoding);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    return null;\n  }\n}\n", "nl": "Returns all the text at the given URL.", "id": "46370"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SubTypeExtendDuration_A_TO_ME(String value0,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200726,value0,skillcaster,skillname);\n}\n", "nl": "Your %0 skill duration has changed because [%SkillCaster] used [%SkillName].", "id": "23734"}
{"code": "private boolean tryToNotifyReset(){\n  if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {\n    if (mPtrUIHandlerHolder.hasHandler()) {\n      mPtrUIHandlerHolder.onUIReset(this);\n      if (DEBUG) {\n        PtrCLog.i(LOG_TAG,\"PtrUIHandler: onUIReset\");\n      }\n    }\n    mStatus=PTR_STATUS_INIT;\n    clearFlag();\n    return true;\n  }\n  return false;\n}\n", "nl": "If at the top and not in loading, reset", "id": "38895"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.HELLINGER + \";\");\n}\n", "nl": "action to be performed", "id": "45177"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_RESISTED_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201089,skillcaster,skillname);\n}\n", "nl": "You resisted [%SkillCaster]'s [%SkillName].", "id": "25219"}
{"code": "@Override protected Dispatcher createContentDispatcher(){\n  return new NSContentDispatcher();\n}\n", "nl": "Creates a content dispatcher.", "id": "44381"}
{"code": "public Object findFeature(Item item){\n  return path.findFeature(item);\n}\n", "nl": "Find the feature associated with the given item", "id": "10844"}
{"code": "@Override public List<Class<? extends ConfigAspect>> mergeDependencies(){\n  return ImmutableList.of();\n}\n", "nl": "Returns an empty list since this aspect does not depend on any other aspects.", "id": "32484"}
{"code": "public static <K,V>MapContext<K,V> createMapContext(MapContext<K,V> source){\n  MapContext<K,V> newValue=MapContext.getMapContext();\n  newValue.stackList.addAll(source.stackList);\n  return newValue;\n}\n", "nl": "Does a shallow copy of the internal stack of the passed MapContext; enables simultaneous stacks that share common parent Maps", "id": "2835"}
{"code": "public String toString(){\n  return (constant_pool[this_class].toString(constant_pool));\n}\n", "nl": "Returns the name of this Class.", "id": "50126"}
{"code": "@Override public boolean isApplicableTo(Schema sch){\n  return sch.hasField(fldName);\n}\n", "nl": "Returns true if the field is in the specified schema.", "id": "3476"}
{"code": "private void debugPrint(String msg){\n  if (debug) {\n    System.out.println(toString() + \": \" + msg);\n  }\n}\n", "nl": "Outputs a debug message if debugging is turned on", "id": "26623"}
{"code": "@SafeVarargs public static <T>Cons<T> fromArgs(T... elems){\n  return fromArray(elems);\n}\n", "nl": "Creates a new cons list from the given arguments.", "id": "47189"}
{"code": "public void stop(){\n  running=false;\n}\n", "nl": "Stops the logger.", "id": "17604"}
{"code": "public void destroyView() throws CanceledException {\n  super.destroyView();\n}\n", "nl": "ask view to destroy itself", "id": "15372"}
{"code": "private void scheduleInvalidTapNotification(){\n  mRunnableHandler.postDelayed(mHandleInvalidTapRunnable,INVALID_IF_NO_SELECTION_CHANGE_AFTER_TAP_MS);\n}\n", "nl": "Schedules a notification to check if the tap was invalid. When we call selectWordAroundCaret it selects nothing in cases where the tap was invalid. We have no way to know other than scheduling a notification to check later. This allows us to hide the bar when there's no selection.", "id": "10072"}
{"code": "protected AudioMoveToAlbumQuery audioIds(List<Integer> value){\n  return unsafeParam(\"audio_ids\",value);\n}\n", "nl": "IDs of the audio files to be moved. NOTE: An album can hold up to 1000 audio files.", "id": "13213"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPTransfer_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200512,skilltarget,skillname);\n}\n", "nl": "[%SkillTarget] is in the DP recovery state because you used [%SkillName].", "id": "1211"}
{"code": "private JMapPane createMapPane(){\n  JMapPane internal_mapPane=new JMapPane();\n  internal_mapPane.setBackground(PrefManager.getInstance().getPrefData().getBackgroundColour());\n  internal_mapPane.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n  return internal_mapPane;\n}\n", "nl": "Creates the map pane.", "id": "16370"}
{"code": "public static void waitForCompletion(Collection<Future<?>> futures){\n  for (  Future<?> future : futures) {\n    try {\n      future.get();\n    }\n catch (    ExecutionException ex) {\n      throw new RuntimeException(\"Exception during execution\",ex);\n    }\ncatch (    InterruptedException ex) {\n      throw new RuntimeException(\"Thread interrupted\",ex);\n    }\n  }\n}\n", "nl": "Blocks and waits for all Futures in the given collection to complete.", "id": "54029"}
{"code": "@Override public void endElement(QName element,Augmentations augs) throws XNIException {\n  if (fNamespaces) {\n    handleEndElement(element,augs,false);\n  }\n else   if (fDocumentHandler != null) {\n    fDocumentHandler.endElement(element,augs);\n  }\n}\n", "nl": "The end of an element.", "id": "42675"}
{"code": "public void clearSounds(){\n  mSoundMap.clear();\n}\n", "nl": "Clears all of the previously set sounds and events.", "id": "41317"}
{"code": "@Override public void printStackTrace(final PrintStream out){\nsynchronized (out) {\n    PrintWriter pw=new PrintWriter(out,false);\n    printStackTrace(pw);\n    pw.flush();\n  }\n}\n", "nl": "Prints the stack trace of this exception to the specified stream.", "id": "8220"}
{"code": "protected void readEntityFromNBT(NBTTagCompound compound){\n  this.setFuse(compound.getShort(\"Fuse\"));\n  this.setFacing(compound.getByte(\"Facing\"));\n}\n", "nl": "(abstract) Protected helper method to read subclass entity data from NBT.", "id": "48594"}
{"code": "public static <T>MaybeSubject<T> create(){\n  return new MaybeSubject<T>();\n}\n", "nl": "Creates a fresh MaybeSubject.", "id": "57376"}
{"code": "public AudioMapType guessAudioMap() throws InvalidAudioChannelAssignmentException {\n  if (contextProvider.getSequenceContext().getSequenceCount(SequenceType.AUDIO) == 0) {\n    return null;\n  }\n  logger.debug(\"Trying to generate an audiomap.xml based on the EssenceDescriptor...\");\n  prepareContext();\n  AudioMapType audioMap=createAudioMap();\n  logger.info(\"Generated an audiomap.xml based on the EssenceDescriptor: OK\");\n  return audioMap;\n}\n", "nl": "Creates an audio map based on the channel layout information in the resource context (this information is obtained from Essence Descriptors). An audio map can be generated only if <ul> <li>All resources within a sequence has channel layout</li> <li>All resources within a sequence has equal channel layout</li> <li>For R48_2A: there are at least one stereo sequence</li> <li>For R123_4B/C: there are one or two stereo sequences</li> <li>For R123_16C: there are one or two 5.1 sequences</li> <li>For R123_16D: there are exactly two 5.1 sequences with different languages (languages must be set)</li> <li>For R123_16F: there are exactly three stereo sequences with different languages (languages must be set)</li> </ul>", "id": "12348"}
{"code": "public static boolean isMultiTenantEnabled(){\n  return \"Y\".equalsIgnoreCase(UtilProperties.getPropertyValue(\"general.properties\",\"multitenant\"));\n}\n", "nl": "Returns <code>true</code> if multi-tenant has been enabled. <p>Multi-tenant features are enabled by setting the <code>multitenant</code> property in <code>general.properties</code> to \"Y\".</p>", "id": "5721"}
{"code": "public static File removeExtension(File file){\n  String absolutePath=file.getAbsolutePath();\n  if (absolutePath.contains(\".\")) {\n    return new File(absolutePath.substring(0,absolutePath.lastIndexOf('.')));\n  }\n else {\n    return file;\n  }\n}\n", "nl": "Remove the last extension of file. If no extension found then return the input file E.g. a.out.log --> a.out a.diff --> a", "id": "15438"}
{"code": "static void scheduleRetry(Context context){\n  new Handler(context.getMainLooper()).post(new Scheduler(context));\n}\n", "nl": "Schedule a retry. If there is already one schedule, this is NO-OP.", "id": "7960"}
{"code": "public InvokeStmt newInvokeStmt(Value op){\n  return new GInvokeStmt(op);\n}\n", "nl": "Constructs a InvokeStmt(InvokeExpr) grammar chunk.", "id": "17905"}
{"code": "boolean acceptNode(Node node){\n  if (fNodeFilter == null) {\n    return (fWhatToShow & (1 << node.getNodeType() - 1)) != 0;\n  }\n else {\n    return ((fWhatToShow & (1 << node.getNodeType() - 1)) != 0) && fNodeFilter.acceptNode(node) == NodeFilter.FILTER_ACCEPT;\n  }\n}\n", "nl": "The node is accepted if it passes the whatToShow and the filter.", "id": "56848"}
{"code": "public TrustManagerBuilder withConfig(@NonNull Context ctxt,@XmlRes int resourceId,boolean isDebugBuild){\n  return (withConfig(new XmlConfigSource(ctxt,resourceId,isDebugBuild)));\n}\n", "nl": "Use the network security configuration identified by the supplied XML resource ID.", "id": "33837"}
{"code": "@Override public String toString(){\n  return new String(toByteArray());\n}\n", "nl": "Gets the curent contents of this byte stream as a string.", "id": "33846"}
{"code": "public void addColumn(String name,Class type){\n  addColumn(name,type,null);\n}\n", "nl": "Add a column with the given name and data type to this table.", "id": "9723"}
{"code": "public void resetCircleColors(){\n  if (mCircleColors == null) {\n    mCircleColors=new ArrayList<>();\n  }\n  mCircleColors.clear();\n}\n", "nl": "resets the circle-colors array and creates a new one", "id": "49051"}
{"code": "@Override public void comment(XMLString text,Augmentations augmentations) throws XNIException {\n}\n", "nl": "A comment.", "id": "22677"}
{"code": "@Override public void close() throws IOException {\n  if (null != dictionaryMetadataFileReader) {\n    dictionaryMetadataFileReader.close();\n    dictionaryMetadataFileReader=null;\n  }\n}\n", "nl": "Closes this stream and releases any system resources associated with it. If the stream is already closed then invoking this method has no effect.", "id": "21438"}
{"code": "public void delete(RecordId nextDeletedSlot){\n  Constant flag=EMPTY_CONST;\n  setVal(currentPos(),flag);\n  setNextDeletedSlotId(nextDeletedSlot);\n}\n", "nl": "Deletes the current record. Deletion is performed by marking the record as \"deleted\" and setting the content as a pointer points to next deleted slot.", "id": "2331"}
{"code": "protected UtilsCheckLinkQuery url(String value){\n  return unsafeParam(\"url\",value);\n}\n", "nl": "Link to check (e.g., \"http://google.com\").", "id": "9866"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SOUL_BOUND_ITEM_CANCELED(int value0){\n  return new SM_SYSTEM_MESSAGE(1300487,new DescriptionId(value0));\n}\n", "nl": "You cancelled the soul-binding of %0.", "id": "21947"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "50083"}
{"code": "public boolean isGridDashedLineEnabled(){\n  return mGridDashPathEffect != null;\n}\n", "nl": "Returns true if the grid dashed-line effect is enabled, false if not.", "id": "26775"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Spin_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200591,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] has spun you by using [%SkillName].", "id": "29246"}
{"code": "private static boolean hasNonEmptyGrid(List<Grid> grids){\n  if (grids != null && grids.size() > 0) {\n    for (    Grid grid : grids) {\n      if (isNonEmptyGrid(grid)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "nl": "Indicates whether the given list of grids have at least one grid which is not null and has more than zero visible columns.", "id": "1418"}
{"code": "public boolean authenticate(String username,String password,boolean isServiceAuth) throws AuthenticatorException {\n  Debug.logInfo(this.getClass().getName() + \" Authenticator authenticate() -- returning false\",module);\n  return false;\n}\n", "nl": "Method to authenticate a user", "id": "20847"}
{"code": "private void checkIsInitialized(){\n  Preconditions.checkNotNull(boxDropExporterConfig,getClass().getSimpleName() + \" must be initialized first\");\n}\n", "nl": "Checks that the exporter has been initialized", "id": "27850"}
{"code": "public boolean isElemhide(){\n  return isOptionEnabled(UrlFilterRuleOption.ELEMHIDE);\n}\n", "nl": "If true -- CssFilter cannot be applied to page", "id": "17648"}
{"code": "public static boolean matches(IIngredient ingredient,IItemStack itemStack){\n  if (ingredient == null) {\n    return false;\n  }\n  if (!ingredient.matches(itemStack)) {\n    return false;\n  }\n  return true;\n}\n", "nl": "Adds extra check to IIngredient matches() for Botania special flowers", "id": "34933"}
{"code": "public static String serializeToString(Document doc){\n  ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  try {\n    MaryNormalisedWriter mnw=new MaryNormalisedWriter();\n    mnw.output(doc,baos);\n  }\n catch (  Exception e1) {\n    return \"\";\n  }\n  return baos.toString();\n}\n", "nl": "Serialize a Document to a String.", "id": "34071"}
{"code": "public void add(Predicate p,ShapeAction f){\n  super.add(p,f);\n}\n", "nl": "Add a size mapping rule to this ShapeAction. VisualItems that match the provided predicate will be assigned the shape value returned by the given ShapeAction's getSize() method.", "id": "46678"}
{"code": "public static final void emoteStopAttacking(Npc owner){\n  owner.unsetState(CreatureState.WEAPON_EQUIPPED);\n  if (owner.getTarget() != null && owner.getTarget() instanceof Player) {\n    PacketSendUtility.sendPacket((Player)owner.getTarget(),SM_SYSTEM_MESSAGE.STR_UI_COMBAT_NPC_RETURN(owner.getObjectTemplate().getNameId()));\n  }\n}\n", "nl": "Npc stops attacking", "id": "38339"}
{"code": "public String print(String format,Object... args){\n  return String.format(format,args);\n}\n", "nl": "Prints the.", "id": "2257"}
{"code": "public void anonymize(){\n  for (int i=theAtts.getLength() - 1; i >= 0; i--) {\n    if (theAtts.getType(i).equals(\"ID\") || theAtts.getQName(i).equals(\"name\")) {\n      theAtts.removeAttribute(i);\n    }\n  }\n}\n", "nl": "Make this element anonymous. Remove any <tt>id</tt> or <tt>name</tt> attribute present in the element's attributes.", "id": "38871"}
{"code": "@Override public boolean isDataPresent(){\n  return SelectedSymbol.getInstance().hasFill();\n}\n", "nl": "Checks if is data present.", "id": "11356"}
{"code": "public static String returnWindowsFileAppropriateName(String nameOfFile){\n  return nameOfFile.replaceAll(\" \",\"\").replace(\":\",\"-\");\n}\n", "nl": "There are a couple of characters that Windows will not accept in a file name. This function will remove/change those characters and will return a windows safe file system name.", "id": "58781"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set magnifier=\" + !isSelected() + \";\");\n}\n", "nl": "action to be performed", "id": "56726"}
{"code": "public static Map<String,List<GenericValue>> makeCategoryFeatureLists(String productCategoryId,Delegator delegator){\n  return makeCategoryFeatureLists(productCategoryId,delegator,DEFAULT_PER_TYPE_MAX_SIZE);\n}\n", "nl": "Gets all features associated with the specified category through: ProductCategory -> ProductFeatureCategoryAppl -> ProductFeatureCategory -> ProductFeature. Returns a Map of Lists of ProductFeature GenericValue objects organized by productFeatureTypeId.", "id": "4978"}
{"code": "public void screenshot(){\n  screenshot(null);\n}\n", "nl": "Creates a screenshot with empty message.", "id": "52091"}
{"code": "void invalidate(){\n  m_row=-1;\n}\n", "nl": "Invalidates this tuple. Called by an enclosing table when a row  is deleted.", "id": "8052"}
{"code": "public static SortedMap<EnumSet<HashSupport>,HashProvider> search(HashParameters params){\n  return search(params,EnumSet.of(HashSupport.STATEFUL));\n}\n", "nl": "Returns a map of hash providers supporting at least a stateful implementation of a hash function with the given parameters.", "id": "52635"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "25770"}
{"code": "public boolean isNegative(){\n  return years < 0 || months < 0 || days < 0 || hours < 0 || minutes < 0 || seconds < 0 || milliseconds < 0;\n}\n", "nl": "Returns <code>true</code> if this duration is negative.", "id": "13686"}
{"code": "public static Prop use(File file){\n  return use(file,Constant.encoding);\n}\n", "nl": "Using the properties file bye File object. It will loading the properties file if not loading.", "id": "47948"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set index=\");\n  String method=np.getWordMatchesIgnoringCase(METHODS);\n  np.matchIgnoreCase(\";\");\n  ClusterViewer viewer=getViewer();\n  viewer.setEcologicalIndex(method);\n  execute(\"sync;\");\n}\n", "nl": "parses the given command and executes it", "id": "5216"}
{"code": "public void onDestroy(){\n  this.stop();\n}\n", "nl": "Called by AccelBroker when listener is to be shut down. Stop listener.", "id": "52595"}
{"code": "public static SnippetObject root(Dynamic obj,KindredSnippets[] snippets){\n  return new SnippetObject(obj,null,snippets);\n}\n", "nl": "Build a root object for the global state.", "id": "34119"}
{"code": "public Builder bounceAtZoomLimits(Boolean bounceAtZoomLimits){\n  this.bounceAtZoomLimits=bounceAtZoomLimits;\n  return this;\n}\n", "nl": "Set it to false if you don't want the map to zoom beyond min/max zoom and then bounce back when pinch-zooming. default true", "id": "16647"}
{"code": "synchronized void dropObservable(UUID host,int id){\n  mCache.remove(new CacheKey(host,id));\n}\n", "nl": "Removes a specific Observable from the cache.", "id": "16433"}
{"code": "@Override public void onProgressChanged(WebView view,int newProgress){\n  i(null,\"--> onProgressChanged() newProgress = \" + newProgress);\n  super.onProgressChanged(view,newProgress);\n  onLoadWebProgressChanged(view,newProgress);\n}\n", "nl": "Tell the host application the current progress of loading a page.", "id": "36139"}
{"code": "public BoardGetCommentsQueryWithExtended needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n", "nl": "Return the \"likes\" field", "id": "31143"}
{"code": "@Override public void fatalError(String domain,String key,XMLParseException ex) throws XNIException {\n  printError(\"Fatal Error\",ex);\n  throw ex;\n}\n", "nl": "Fatal error.", "id": "27469"}
{"code": "public void addNewStyledLayer(NamedLayer namedLayer){\n  if (this.sld == null) {\n    ConsoleManager.getInstance().error(this,\"sld == null\");\n  }\n else {\n    this.sld.addStyledLayer(namedLayer);\n  }\n}\n", "nl": "Adds the new named styled layer.", "id": "34050"}
{"code": "public boolean isUpdateOf(ComponentDescription other){\n  return !(other == null || !this.getClass().equals(other.getClass()) || !name.equals(other.getName()) || other.getStatus() != Status.INSTALLED || !(isVersionNewerThan(version,other.getVersion())));\n}\n", "nl": "This is an update of other if and only if the following is true: <ol> <li>Both components have the same type (as identified by the class) and name;</li> <li>other has status INSTALLED;</li> <li>our version number is higher than other's version number.</li> </ol>", "id": "14347"}
{"code": "public boolean isSwitchOpen(){\n  return openImage.getVisibility() == View.VISIBLE;\n}\n", "nl": "is switch open", "id": "18859"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_PET_CONDITION_CARE_01(String value0){\n  return new SM_SYSTEM_MESSAGE(1400865,value0);\n}\n", "nl": "You check how %0 feels.", "id": "35395"}
{"code": "public void fromAngleAxis(float angle,Vector3f axis){\n  Vector3f normAxis=axis.normalize();\n  fromAngleNormalAxis(angle,normAxis);\n}\n", "nl": "<code>fromAngleAxis</code> sets this matrix4f to the values specified by an angle and an axis of rotation. This method creates an object, so use fromAngleNormalAxis if your axis is already normalized.", "id": "42824"}
{"code": "private char peek(int n){\n  return getLITERAL().charAt(idx + n);\n}\n", "nl": "Look at the n'th next character.", "id": "40005"}
{"code": "@Override public List<WebElement> findElements(){\n  if (scopeFactory instanceof ParentElementLocatorProvider && !globalCurrentScope) {\n    return ((ParentElementLocatorProvider)scopeFactory).getCurrentScope().findElements().stream().flatMap(null).collect(toList());\n  }\n  return searchContext.findElements(selector);\n}\n", "nl": "Constructs a scope out of the scope factory and the parent field, then searches for the field with selector in this scope.", "id": "43502"}
{"code": "public String clientAppId(){\n  return (String)httpRequest.getAttribute(AuthenticationFilter.AuthenticatedRoleAttributeName);\n}\n", "nl": "Gets a caller id (IP + role)", "id": "17206"}
{"code": "protected void addSecondaryActions(ArrayObjectAdapter secondaryActionsAdapter){\n  secondaryActionsAdapter.add(mShuffleAction);\n  secondaryActionsAdapter.add(mRepeatAction);\n  secondaryActionsAdapter.add(mThumbsDownAction);\n  secondaryActionsAdapter.add(mThumbsUpAction);\n}\n", "nl": "Override this method in case you need to add different secondary actions.", "id": "54764"}
{"code": "public MarketReorderItemsQuery after(Integer value){\n  return unsafeParam(\"after\",value);\n}\n", "nl": "Id of an item to place current item after it", "id": "47565"}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){\n  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. This version of the call is used for Views that need to specify a Scroll Range but scroll back to it's edge correctly.", "id": "40257"}
{"code": "public static void initSPFactory(){\n  Class<?> spFactoryCls=CoreProperties.getLoader().getPropertyAsClass(VanillaDb.class.getName() + \".SP_FACTORY\",SampleStoredProcedureFactory.class,StoredProcedureFactory.class);\n  if (spFactoryCls != null) {\n    try {\n      spFactory=(StoredProcedureFactory)spFactoryCls.newInstance();\n    }\n catch (    InstantiationException|IllegalAccessException e) {\n      e.printStackTrace();\n    }\n  }\n}\n", "nl": "Initializes a store procedure factory for creating stored procedures.", "id": "21904"}
{"code": "@Deprecated public Builder cacheInMemory(){\n  cacheInMemory=true;\n  return this;\n}\n", "nl": "Loaded image will be cached in memory", "id": "54216"}
{"code": "public boolean equals(Object obj){\n  if (!(obj instanceof LocatorReg))   return false;\n  return l.equals(((LocatorReg)obj).l);\n}\n", "nl": "Returns true if the locators are equal.", "id": "49641"}
{"code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed", "id": "26022"}
{"code": "public static Builder newBuilder(){\n  return new DataQueryParams.Builder();\n}\n", "nl": "Creates a new Builder for DataQueryParams.", "id": "8781"}
{"code": "public VideoRestoreCommentQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "ID of the user or community that owns the video.", "id": "43372"}
{"code": "public Set<String> tables(){\n  return tables;\n}\n", "nl": "Returns the tables mentioned in the from clause.", "id": "10306"}
{"code": "public MetricInstance withMaker(MetricMaker maker){\n  return new MetricInstance(metricName,maker,dependencyMetricNames.toArray(new String[dependencyMetricNames.size()]));\n}\n", "nl": "Makes a copy of the metric instance with new maker.", "id": "25913"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_HOUSING_OBJECT_DELETE_USE_COUNT_FINAL(int nameId){\n  return new SM_SYSTEM_MESSAGE(1401470,calculateNameId(nameId));\n}\n", "nl": "%0 is gone.", "id": "3330"}
{"code": "public static String guessMimeTypeFromExtension(String extension){\n  if (extension == null || extension.isEmpty()) {\n    return null;\n  }\n  return extensionToMimeTypeMap.get(extension);\n}\n", "nl": "Returns the MIME type for the given extension.", "id": "38325"}
{"code": "public static double sqrtInterp(double val,double min,double max){\n  double sqrtMin=safeSqrt(min);\n  double denominator=(safeSqrt(max) - sqrtMin);\n  if (denominator == 0)   return 0;\n  return (safeSqrt(val) - sqrtMin) / denominator;\n}\n", "nl": "Interpolates a value between a given minimum and maximum value using a square root scale.", "id": "47750"}
{"code": "public static void main(String[] args){\n  Thread thread=new Thread(new WebBrowserConnection());\n  thread.start();\n}\n", "nl": "test program. Enter the following in browser: http://localhost:16358/start?hello_world4", "id": "3607"}
{"code": "private float x(TouchState s){\n  final float currToTan=(float)Math.sqrt((s.distance * s.distance) - (mScaledTouchSlop * mScaledTouchSlop));\n  return currToTan * (currToTan / s.distance);\n}\n", "nl": "The change in the x value that is required to move from the current touch point to the tangent.", "id": "6012"}
{"code": "protected User createUserAndInjectSecurityContext(Set<OrganisationUnit> organisationUnits,boolean allAuth,String... auths){\n  return createUserAndInjectSecurityContext(organisationUnits,null,allAuth,auths);\n}\n", "nl": "Creates a user and injects into the security context with username \"username\". Requires <code>identifiableObjectManager</code> and <code>userService</code> to be injected into the test.", "id": "11481"}
{"code": "public static String separatorsToSystem(String path){\n  if (path == null) {\n    return null;\n  }\n  if (isSystemWindows()) {\n    return separatorsToWindows(path);\n  }\n else {\n    return separatorsToUnix(path);\n  }\n}\n", "nl": "Converts all separators to the system separator.", "id": "58126"}
{"code": "public RequestHandle head(Context context,String url,ResponseHandlerInterface responseHandler){\n  return head(context,url,null,responseHandler);\n}\n", "nl": "Perform a HTTP HEAD request without any parameters and track the Android Context which initiated the request.", "id": "13390"}
{"code": "public void clearListeners(){\n  listeners.clear();\n}\n", "nl": "Remove all input listeners.", "id": "26690"}
{"code": "public static void toggleViewVisibility(View view,boolean setVisible){\n  if (view == null) {\n    return;\n  }\n  int visibility=View.GONE;\n  if (setVisible) {\n    visibility=View.VISIBLE;\n  }\n  view.setVisibility(visibility);\n}\n", "nl": "Sets the visiblity of the view", "id": "31575"}
{"code": "void startTransaction(Transaction transaction,boolean resume){\n}\n", "nl": "Start new transaction on this session", "id": "49768"}
{"code": "@Override public void copy(@NotNull File from,@NotNull File to){\n  try {\n    copyTemplateResource(from,to);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}\n", "nl": "Copies the given source file into the given destination file (where the source is allowed to be a directory, in which case the whole directory is copied recursively)", "id": "51489"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200828,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] recovered %num0 HP because he used [%SkillName].", "id": "3028"}
{"code": "public boolean acceptsChild(@NotNull NlComponent layout,@NotNull NlComponent newChild){\n  return true;\n}\n", "nl": "Returns whether the given layout accepts the given proposed child.", "id": "30116"}
{"code": "public Result decodeWithState(BinaryBitmap image) throws NotFoundException {\n  if (readers == null) {\n    setHints(null);\n  }\n  return decodeInternal(image);\n}\n", "nl": "Decode an image using the state set up by calling setHints() previously. Continuous scan clients will get a <b>large</b> speed increase by using this instead of decode().", "id": "33191"}
{"code": "public synchronized boolean wasReleased(){\n  return this.released;\n}\n", "nl": "Returns true if this button was pressed and waiting for release but is now released.", "id": "38125"}
{"code": "@Override public void onUIRefreshBegin(PtrFrameLayout frame){\n  mDrawable.setAlpha(255);\n  mDrawable.start();\n}\n", "nl": "perform refreshing UI", "id": "36162"}
{"code": "public void closeListeners() throws GenericServiceException {\n  loadable=0;\n  for (  String serverKey : listeners.keySet()) {\n    closeListener(serverKey);\n  }\n}\n", "nl": "Close all the JMS message listeners.", "id": "44914"}
{"code": "public boolean isTrunkServer(){\n  return this.ifTrunkServer;\n}\n", "nl": "if the trunk server", "id": "38900"}
{"code": "public double trace(){\n  double t=0;\n  for (int i=0; i < Math.min(m,n); i++) {\n    t+=A[i][i];\n  }\n  return t;\n}\n", "nl": "Matrix trace.", "id": "11023"}
{"code": "protected void checkVectorDimensions(FieldVector<T> v) throws MathIllegalArgumentException {\n  checkVectorDimensions(v.getDimension());\n}\n", "nl": "Check if instance and specified vectors have the same dimension.", "id": "14760"}
{"code": "public static boolean dateIsValid(String date){\n  return dateIsValid(date,null);\n}\n", "nl": "Validates whether a date string is valid for the default Locale.", "id": "13293"}
{"code": "private void addDataSource(EsriDataSourceInterface dataSourceObj){\n  logger.info(\"\\t\" + dataSourceObj.getName());\n  dataSourceMap.put(dataSourceObj.getType(),dataSourceObj);\n}\n", "nl": "Adds the data source.", "id": "31102"}
{"code": "public String removeReferenceHeaderFromBlastMatch(String blastText){\n  int index=blastText.indexOf(\"Length\");\n  if (index == -1)   index=blastText.indexOf(\"Score\");\n  if (index > 0)   return blastText.substring(index);\n else   return blastText;\n}\n", "nl": "remove the header from a blast text (but keeping Length statement, if present)", "id": "41341"}
{"code": "@Deprecated public int verbosity(){\n  return getVerbosity();\n}\n", "nl": "What is the current verbosity?", "id": "57030"}
{"code": "public static <T extends RealFieldElement<T>>T distanceInf(final FieldVector3D<T> v1,final Vector3D v2){\n  return v1.distanceInf(v2);\n}\n", "nl": "Compute the distance between two vectors according to the L<sub>&infin;</sub> norm. <p>Calling this method is equivalent to calling: <code>v1.subtract(v2).getNormInf()</code> except that no intermediate vector is built</p>", "id": "18739"}
{"code": "public void sendMail(MailDetailsBean mDetails) throws MailSenderException {\n  createConnection(mDetails.getServer());\n  createMessage(mDetails);\n  setTransportForm();\n}\n", "nl": "It sends the email using the information provided by the MailDetailsBean object", "id": "23772"}
{"code": "protected void init(Table table,Graph graph,int row){\n  m_table=table;\n  m_graph=graph;\n  m_row=m_table.isValidRow(row) ? row : -1;\n}\n", "nl": "Initialize a new TableNodeItem for the given graph, table, and row. This method is used by the appropriate TupleManager instance, and should not be called directly by client code, unless by a client-supplied custom TupleManager.", "id": "47511"}
{"code": "@Override public boolean equals(Object o){\n  return toString().equals(o.toString());\n}\n", "nl": "Proxies for servers with the same Uuid are considered equal.", "id": "44959"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Paralyze_END_A(String value0){\n  return new SM_SYSTEM_MESSAGE(1201130,value0);\n}\n", "nl": "%0 is no longer paralyzed.", "id": "30771"}
{"code": "public static boolean isExternalMemoryAvailable(){\n  return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);\n}\n", "nl": "Judge whether external momory is available", "id": "47780"}
{"code": "public void notifySkilluseObservers(Skill skill){\n  notifyObservers(ObserverType.SKILLUSE,skill);\n}\n", "nl": "notify that creature used a skill", "id": "57767"}
{"code": "public boolean hasNext(){\n  if (this.samIterator == null) {\n    iterator();\n  }\n  while (complete.isEmpty() && ((!accumulator.isEmpty()) || samHasMore() || hasRemainingMaskBases())) {\n    final LocusInfo locusInfo=next();\n    if (locusInfo != null) {\n      complete.add(0,locusInfo);\n    }\n  }\n  return !complete.isEmpty();\n}\n", "nl": "Returns true if there are more LocusInfo objects that can be returned, due to any of the following reasons: 1) there are more aligned reads in the SAM file 2) there are LocusInfos in some stage of accumulation 3) there are loci in the target mask that have yet to be accumulated (even if there are no reads covering them)", "id": "49610"}
{"code": "public static void unsetInitializer(){\n  _threadId.set(null);\n}\n", "nl": "Unset current thread as space initializer", "id": "22529"}
{"code": "public void init$Children(){\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "57604"}
{"code": "private void clustering(int tagetClusterSize){\n  clustering(tagetClusterSize,\"Average\");\n}\n", "nl": "clustering with default linkage type It uses 'Average' linkage clustering approach as default", "id": "29064"}
{"code": "private static String keyForVersion(String name){\n  return \"service_version_\" + name;\n}\n", "nl": "Service name's Version key", "id": "35882"}
{"code": "@Override public void clear(){\n  if (null != columnDictionaryInfo) {\n    columnDictionaryInfo.clear();\n    columnDictionaryInfo=null;\n  }\n}\n", "nl": "This method will release the objects and set default value for primitive types", "id": "16228"}
{"code": "GitReference resolveReference(String reference) throws RepoException {\n  return new GitReference(this,revParse(reference));\n}\n", "nl": "Resolve a reference", "id": "40371"}
{"code": "@Override public void printStackTrace(){\n  super.printStackTrace();\n}\n", "nl": "Prints the composite message to System.err.", "id": "12149"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysBlock_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200631,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] has boosted your block by using [%SkillName].", "id": "3985"}
{"code": "public JsonWriter endArray() throws IOException {\n  return close(EMPTY_ARRAY,NONEMPTY_ARRAY,\"]\");\n}\n", "nl": "Ends encoding the current array.", "id": "4455"}
{"code": "public static boolean isFieldsetExpanded(WebElement fieldset){\n  boolean isExpanded=false;\n  if (!fieldset.getAttribute(HtmlTags.Attributes.CLASS).contains(COLLAPSED_CLASS)) {\n    isExpanded=true;\n  }\n  return isExpanded;\n}\n", "nl": "Checks if fieldset in sidekick is expanded based on fieldset WebElement", "id": "4012"}
{"code": "public AemContentFinder expand(){\n  if (isCollapsed()) {\n    bobcatWait.withTimeout(Timeouts.MEDIUM).until(ContentFinderActions.expand());\n    bobcatWait.withTimeout(Timeouts.MEDIUM).until(ExpectedConditions.visibilityOf(collapseButton));\n  }\n  return this;\n}\n", "nl": "Expand contentFinder if it is not already expanded.", "id": "50951"}
{"code": "private boolean shouldGrowTable(){\n  return size > (mask + 1) * LOAD_FACTOR;\n}\n", "nl": "Check if tables should grow due to increased size.", "id": "28644"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_REPAIR_BROKEN(String value1,String value0){\n  return new SM_SYSTEM_MESSAGE(1400308,value1,value0);\n}\n", "nl": "%1 of the %0 destroyed the Gate Guardian Stone.", "id": "8124"}
{"code": "public static boolean isMonth(String s){\n  if (isEmpty(s))   return defaultEmptyOK;\n  return isIntegerInRange(s,1,12);\n}\n", "nl": "isMonth returns true if string s is a valid month number between 1 and 12.", "id": "29441"}
{"code": "public String render(String resourceName,String screenName) throws GeneralException, IOException, SAXException, ParserConfigurationException {\n  return render(resourceName,screenName,false);\n}\n", "nl": "Renders the named screen using the render environment configured when this ScreenRenderer was created. <p> SCIPIO: now delegating. Renders directly to writer.", "id": "53776"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof IViewerWithFindToolBar;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "48229"}
{"code": "public AemPathWindow clickOk(){\n  okButton.click();\n  return this;\n}\n", "nl": "Clicks \"ok\" button.", "id": "50988"}
{"code": "public void rewind(){\n  goTo(0);\n}\n", "nl": "Rewinds the iterator, moving the next pointer to the beginning of the argument list.", "id": "38721"}
{"code": "public void registerKey(SelectionKey key){\n  if (key == null)   return;\n  _keysToEnable.add(key);\n  _keysToEnableCounter.incrementAndGet();\n  getSelector().wakeup();\n}\n", "nl": "called after the reading has finished", "id": "8166"}
{"code": "public static void createSchemaFiles(String filter) throws Exception {\n  createSchemaFiles(null,false,filter);\n}\n", "nl": "Create and load the data and query schema files used for testing", "id": "26528"}
{"code": "public boolean isForceUnderTransaction(){\n  return _selfIncrementedUpdateColumn;\n}\n", "nl": "Gets whether this query is forced to be executed under transaction. If the query contains a column which is self incremented a TXN should be created for emulating compare & set.", "id": "11580"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeboostHealAmount_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200806,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] changed his own recovery amount by using [%SkillName].", "id": "39872"}
{"code": "public PhotosGetQueryWithExtended photoIds(List<String> value){\n  return unsafeParam(\"photo_ids\",value);\n}\n", "nl": "Photo IDs.", "id": "18097"}
{"code": "public FilterSpec addExpression(FilterSpec expr){\n  if (expressions == null) {\n    expressions=new ArrayList<>();\n  }\n  expressions.add((FilterSpec)expr);\n  return this;\n}\n", "nl": "Adds the given expression to the expression list and returns itself.", "id": "58772"}
{"code": "public synchronized ZooKeeperClientBuilder zkAclId(String zkAclId){\n  this.zkAclIdSet=true;\n  this.zkAclId=zkAclId;\n  return this;\n}\n", "nl": "* Build zookeeper client with given zk acl digest id <i>zkAclId</i>.", "id": "9049"}
{"code": "private static byte[] hash(String text) throws AWSIotException {\n  try {\n    MessageDigest md=MessageDigest.getInstance(HASH_ALGORITHM);\n    md.update(text.getBytes(UTF8));\n    return md.digest();\n  }\n catch (  Exception e) {\n    throw new AWSIotException(\"Unable to compute hash while signing request: \" + e.getMessage());\n  }\n}\n", "nl": "Hashes the string contents (assumed to be UTF-8) using the SHA-256 algorithm.", "id": "39809"}
{"code": "public static Zmat o(Zmat A) throws JampackException {\n  if (A.nrow != A.ncol)   throw new JampackException(\"Cannot compute the inverse of a rectangular matrix.\");\n  return Solve.aib(A,Eye.o(A.nrow));\n}\n", "nl": "Computes the inverse of a square Zmat", "id": "11874"}
{"code": "public void removeLocations(Collection<PBLocation> locations){\n  l_locations.removeAll(locations);\n  if (!l_locations.isEmpty())   l_locations.get(0).setType(StringConst.EMPTY);\n}\n", "nl": "Removes the specific collection of locations from this argument.", "id": "48124"}
{"code": "protected Set<D> computeCallFlowFunction(FlowFunction<D> callFlowFunction,D d1,D d2){\n  return callFlowFunction.computeTargets(d2);\n}\n", "nl": "Computes the call flow function for the given call-site abstraction", "id": "18213"}
{"code": "public long initial(){\n  return initial;\n}\n", "nl": "Returns the initial value of the CRC register.", "id": "4787"}
{"code": "public boolean filterOut(final SAMRecord first,final SAMRecord second){\n  throw new UnsupportedOperationException(\"Paired *Filter not implemented!\");\n}\n", "nl": "Determines whether a pair of SAMRecord matches this filter", "id": "19641"}
{"code": "public JSONWriter endObject() throws JSONException {\n  return this.end('k','}');\n}\n", "nl": "End an object. This method most be called to balance calls to <code>object</code>.", "id": "4176"}
{"code": "public boolean remove(final T object){\n  final int location=this.getLocation(object);\n  final boolean removed=this.data.remove(object);\n  this.notifyItemRemoved(location);\n  return removed;\n}\n", "nl": "Removes the first occurrence of the specified object from the data.", "id": "33916"}
{"code": "public static void close(URLConnection conn){\n  if (conn instanceof HttpURLConnection) {\n    ((HttpURLConnection)conn).disconnect();\n  }\n}\n", "nl": "Closes a URLConnection.", "id": "57111"}
{"code": "public TextMessage createTextMessage(String text) throws JMSException {\n  ensureOpen();\n  GSTextMessageImpl textMsg=new GSTextMessageImpl(this,text);\n  return textMsg;\n}\n", "nl": "Creates an initialized <CODE>TextMessage</CODE> object. A <CODE> TextMessage</CODE> object is used to send a message containing a <CODE> String</CODE>.", "id": "5655"}
{"code": "public static int toOffset(IBuffer buffer,int line,int column){\n  try {\n    return toDocument(buffer).getLineOffset(line) + column;\n  }\n catch (  BadLocationException e) {\n    e.printStackTrace();\n  }\n  return -1;\n}\n", "nl": "Convert line, column to a document offset. ", "id": "17828"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "43313"}
{"code": "public double featureCost(Target target,Unit unit,String featureName){\n  return featureCost(target,unit,featureName,featureDefinition,weightFunction);\n}\n", "nl": "Compute the goodness-of-fit between given unit and given target for a given feature", "id": "49400"}
{"code": "@Override protected void onResume(){\n  super.onResume();\n  Log.i(TAG,\"onResume\");\n  startPreview();\n}\n", "nl": "Restarts the camera.", "id": "6780"}
{"code": "public void uninitialize(){\n  for (  TabModel model : mTabModelSelector.getModels()) {\n    model.removeObserver(mTabModelObserver);\n  }\n  mTabModelSelector.removeObserver(mTabModelSelectorObserver);\n}\n", "nl": "Unregister all dependencies and listeners.", "id": "41218"}
{"code": "@VisibleForTesting public void enableExperiment(String experiment){\n  this.experiments=FluentIterable.from(experiments).append(experiment).toSet();\n}\n", "nl": "Enables the given experiment (for testing).", "id": "56140"}
{"code": "public static RecipientEntry constructFakePhoneEntry(final String phoneNumber,final boolean isValid){\n  return new RecipientEntry(ENTRY_TYPE_PERSON,phoneNumber,phoneNumber,INVALID_DESTINATION_TYPE,null,INVALID_CONTACT,null,INVALID_CONTACT,null,true,isValid,null);\n}\n", "nl": "Construct a RecipientEntry from just a phone number.", "id": "8558"}
{"code": "private <Q,R>void recordFinalStatus(JobIdentifier<Q,R> jobId,JobStatus<Q,R> jobStatus){\n  try {\n    _jobStatusDAO.updateJobStatus(jobId,jobStatus);\n  }\n catch (  Exception e) {\n    _log.error(\"Failed to record final status for job: [id={}, status={}]\",jobId,jobStatus.getStatus(),e);\n  }\n}\n", "nl": "Attempts to record the final status for a job.  Logs any errors, but always returns without throwing an exception.", "id": "51473"}
{"code": "public String process(Item item) throws ProcessException {\n  int count=0;\n  Item daughter=item.getItemAs(Relation.SYLLABLE_STRUCTURE).getDaughter();\n  while (daughter != null) {\n    count++;\n    daughter=daughter.getNext();\n  }\n  return Integer.toString(rail(count));\n}\n", "nl": "Performs some processing on the given item.", "id": "8615"}
{"code": "public Bundler putInt(String key,int value){\n  bundle.putInt(key,value);\n  return this;\n}\n", "nl": "Inserts an int value into the mapping of this Bundle, replacing any existing value for the given key.", "id": "44702"}
{"code": "@Override protected Expression generateExpression(){\n  return null;\n}\n", "nl": "Generate expression.", "id": "51398"}
{"code": "public MessagesSearchQuery date(Integer value){\n  return unsafeParam(\"date\",value);\n}\n", "nl": "Set date", "id": "20629"}
{"code": "private void unsetBoundsAction(){\n  NullBounds bounds=new NullBounds();\nsynchronized (Simulation.LOCK) {\n    this.simulation.getWorld().setBounds(bounds);\n  }\n  this.bounds.setUserObject(bounds);\n  this.model.reload(this.bounds);\n}\n", "nl": "Sets the bounds on the world object to unset.", "id": "28854"}
{"code": "public IObjectInfo<T> addUnlocked(T subject){\n  return store_impl(subject);\n}\n", "nl": "store an element, while the SL is unlocked", "id": "20613"}
{"code": "public boolean profile(){\n  return soot.PhaseOptions.getBoolean(options,\"profile\");\n}\n", "nl": "Profile -- Profile BDDs using JeddProfiler. Turns on JeddProfiler for profiling BDD operations.", "id": "25335"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_CANT_CHANGE_SKIN_OPPOSITE_REQUIREMENT(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1400290,value0,value1);\n}\n", "nl": "This modification cannot be completed as the equipment requirements for %0 and %1 are different.", "id": "53347"}
{"code": "private static float centerFromEnd(int[] stateCount,int end){\n  return (float)(end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0f;\n}\n", "nl": "Given a count of black/white/black/white/black pixels just seen and an end position, figures the location of the center of this run.", "id": "8372"}
{"code": "static int readUnsignedShort(final byte[] b,final int index){\n  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);\n}\n", "nl": "Reads an unsigned short value in the given byte array.", "id": "11789"}
{"code": "public void activate(){\n  getViewer().getSearchManager().setSearcher(getSearcher());\n  getViewer().getSearchManager().getFindDialogAsToolBar().clearMessage();\n  if (!inSelection) {\n    inSelection=true;\n    try {\n      chartSelection.clearSelectionSeries();\n      chartSelection.setSelectedSeries(getSelectedLabels(),true);\n      this.repaint();\n    }\n  finally {\n      inSelection=false;\n    }\n  }\n}\n", "nl": "call this when tab containing list is activated", "id": "38149"}
{"code": "private static Integer[] newZeroedIntegerArray(int size){\n  Integer[] result=new Integer[size];\n  for (int i=0; i < size; i++)   result[i]=0;\n  return result;\n}\n", "nl": "create new array with zero entries", "id": "43500"}
{"code": "public boolean isSuccessful(){\n  return code >= 200 && code < 300;\n}\n", "nl": "Returns true if the code is in [200..300), which means the request was successfully received, understood, and accepted.", "id": "2083"}
{"code": "public void addExpressionListener(ExpressionUpdateInterface listener){\n  listenerList.add(listener);\n}\n", "nl": "Adds the expression listener.", "id": "16169"}
{"code": "public void addLanguage(String languageId){\n  query.append(\" +languageId:\" + languageId);\n}\n", "nl": "Adds a language limit to the query", "id": "55786"}
{"code": "@Override public String toString(){\n  return x + \",\" + y+ \",\"+ z;\n}\n", "nl": "Returns this vector's components as x,y,z.", "id": "48344"}
{"code": "private FilterOperation extractOperation(Matcher tokenizedQuery) throws BadFilterException {\n  String operationName=tokenizedQuery.group(2);\n  try {\n    return FilterOperation.valueOf(operationName);\n  }\n catch (  IllegalArgumentException ignored) {\n    LOG.debug(FILTER_OPERATOR_INVALID.logFormat(operationName));\n    throw new BadFilterException(FILTER_OPERATOR_INVALID.format(operationName));\n  }\n}\n", "nl": "Extracts the operation to be performed by the ApiJobStore filter query.", "id": "4749"}
{"code": "@Override public void onConnectionSuccess(){\n  super.onConnectionSuccess();\n}\n", "nl": "This callback function is called when the connection used by the client is successfully established. The user could supply a different callback function via subclassing, however the default implementation should always be called in the override function in order for the connection retry as well as device synchronization to work properly.", "id": "58175"}
{"code": "public boolean isSPD(){\n  return isspd;\n}\n", "nl": "Is the matrix symmetric and positive definite?", "id": "19198"}
{"code": "public boolean optBoolean(String key){\n  LazyNode token=getOptionalFieldToken(key);\n  if (token == null)   return false;\n  if (token.type == LazyNode.VALUE_TRUE)   return true;\n  return false;\n}\n", "nl": "Returns the boolean value stored in this object for the given key. Returns false if there is no such key.", "id": "12473"}
{"code": "private boolean hasPermissionsGranted(String permission){\n  return ActivityCompat.checkSelfPermission(this.getActivity(),permission) == PackageManager.PERMISSION_GRANTED;\n}\n", "nl": "checks whether permission is granted or not.", "id": "8237"}
{"code": "public static SM_SYSTEM_MESSAGE STR_UNION_LEAVE_HIM(String value0){\n  return new SM_SYSTEM_MESSAGE(1400572,value0);\n}\n", "nl": "%0's alliance has left the Alliance League.", "id": "14009"}
{"code": "public void add(Animation animation){\n  mAnimations.add(animation);\n}\n", "nl": "Add an animation to the AnimationSet", "id": "51639"}
{"code": "public Builder sumColumns(String... columns){\n  return add(ReduceOp.Sum,columns);\n}\n", "nl": "Reduce the specified columns by taking the sum of values", "id": "47705"}
{"code": "public void addImplements(Access node){\n  List<Access> list=(parent == null || state == null) ? getImplementsListNoTransform() : getImplementsList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the Implements list.", "id": "14925"}
{"code": "public void applyOnMembers(Predicate<M> predicate){\n  lock();\n  try {\n    for (    TM member : members.values()) {\n      if (!predicate.apply(member.getObject())) {\n        return;\n      }\n    }\n  }\n  finally {\n    unlock();\n  }\n}\n", "nl": "Apply some predicate on all group member's objects<br> Should be used only to change state of the group or its members", "id": "26193"}
{"code": "private boolean canModifyUserConversation(User currentUser,User user){\n  return currentUser.equals(user) || currentUser.isSuper();\n}\n", "nl": "Determines whether the current user has permission to modify the given user in a MessageConversation. <p> The modification is either marking a conversation read/unread for the user or removing the user from the MessageConversation. <p> Since there are no per-conversation authorities provided the permission is given if the current user equals the user or if the current user has update-permission to User objects.", "id": "37195"}
{"code": "@RequestMapping(value={\"/\",\"/index.html\"},method=RequestMethod.GET) public String returnHomeView(){\n  return \"newHomePage\";\n}\n", "nl": "If a request comes to as \"http://server name/App Name/\" or \"http://server name/App Name/index.html\", this function will hold the rest.", "id": "49246"}
{"code": "public boolean isInterfaceDirectSuperinterfaceOf(SootClass parent,SootClass possibleChild){\n  parent.checkLevel(SootClass.HIERARCHY);\n  possibleChild.checkLevel(SootClass.HIERARCHY);\n  return getDirectSuperinterfacesOf(possibleChild).contains(parent);\n}\n", "nl": "Returns true if parent is a direct superinterface of possibleChild.", "id": "362"}
{"code": "@Override public boolean supports(AuthenticationToken token){\n  return super.supports(token) || (_anonymousId != null && AnonymousToken.isAnonymous(token));\n}\n", "nl": "Override the parent method to also accept anonymous tokens", "id": "47027"}
{"code": "void forgetAllOpeners(){\n  TabModel currentModel=mTabModelSelector.getCurrentModel();\n  int count=currentModel.getCount();\n  for (int i=0; i < count; i++) {\n    currentModel.getTabAt(i).setGroupedWithParent(false);\n  }\n}\n", "nl": "Clear the opener attribute on all tabs in the model.", "id": "37025"}
{"code": "public static double max(final double... values) throws MathIllegalArgumentException {\n  return MAX.evaluate(values);\n}\n", "nl": "Returns the maximum of the entries in the input array, or <code>Double.NaN</code> if the array is empty. <p> Throws <code>MathIllegalArgumentException</code> if the array is null. <p> <ul> <li>The result is <code>NaN</code> iff all values are <code>NaN</code> (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li> <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>, the result is <code>Double.POSITIVE_INFINITY.</code></li> </ul>", "id": "5379"}
{"code": "public void addBodyDecl(BodyDecl node){\n  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the BodyDecl list.", "id": "4698"}
{"code": "@Override public void onResume(){\n  super.onResume();\n  startCameraSource();\n}\n", "nl": "Restarts the camera.", "id": "18385"}
{"code": "public ChangeSet decrement(String path,long delta){\n  return increment(path,-delta);\n}\n", "nl": "Decrement a long property with the given delta.", "id": "13220"}
{"code": "public static Map<String,Object> createDataResource(DispatchContext dctx,Map<String,? extends Object> context){\n  Map<String,Object> result=createDataResourceMethod(dctx,context);\n  return result;\n}\n", "nl": "A service wrapper for the createDataResourceMethod method. Forces permissions to be checked.", "id": "58223"}
{"code": "public int hashCode(){\n  return MarshalledWrapper.class.hashCode() ^ instance.hashCode();\n}\n", "nl": "Returns the hash code value for this <code>MarshalledWrapper</code>.", "id": "27684"}
{"code": "public boolean hasEventEndDate(){\n  return eventEndDate != null;\n}\n", "nl": "Indicates whether this parameters specifies an event end date.", "id": "34319"}
{"code": "public static void checkState(boolean expression){\n  if (!expression) {\n    throw new IllegalStateException();\n  }\n}\n", "nl": "Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method.", "id": "1407"}
{"code": "public RetrofitClient createBaseApi(){\n  apiService=create(BaseApiService.class);\n  return this;\n}\n", "nl": "create BaseApi  defalte ApiManager", "id": "12346"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "33658"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Blind_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200583,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] has blinded you by using [%SkillName].", "id": "47447"}
{"code": "private void onAliveTimerExpiration(final Long aliveTimerId){\n  supervisionManager.onAliveTimerExpiration(aliveTimerId);\n}\n", "nl": "Notifies the supervision manager.", "id": "15491"}
{"code": "public AemTextArea typeLine(CharSequence text){\n  return type(text).typeNewLine();\n}\n", "nl": "Types a line of text into the text area.", "id": "51447"}
{"code": "public UnrevealBuilder withUnrevealDuration(final int unrevealDuration){\n  this.mUnrevealDuration=unrevealDuration;\n  return this;\n}\n", "nl": "Defines the unreveal duration.", "id": "18746"}
{"code": "private void init(final AttributeSet attrs){\n  Typeface typeface;\n  if (!isInEditMode() && (typeface=CustomFontUtils.getTypeFace(this,attrs)) != null) {\n    super.setTypeface(typeface,typeface.getStyle());\n  }\n}\n", "nl": "Initialize custom font attribute.", "id": "10955"}
{"code": "@Override public void any(Augmentations augs) throws XNIException {\n}\n", "nl": "A content model of ANY.", "id": "50069"}
{"code": "private void assertResult(String expected,String result){\n  if (diagCollector.getErrorCount() > 0) {\n    Truth.assertWithMessage(\"Errors detected while filtering comment\").fail(NEWLINE_JOINER.join(diagCollector.getErrors()));\n  }\n else {\n    Truth.assertThat(result).isEqualTo(expected);\n  }\n}\n", "nl": "Asserts if filtered result equals expected string. Asserts failure if there are errors detected during the filtering.", "id": "1181"}
{"code": "@RequestMapping(value=\"/gotoauthpage\") public String goToAuthPage(HttpSession httpSession){\n  final String state=CommonUtils.getToken();\n  httpSession.setAttribute(LINE_WEB_LOGIN_STATE,state);\n  final String url=lineConfig.getLineWebLoginUrl(state);\n  return \"redirect:\" + url;\n}\n", "nl": "<p>Redirect to LINE Login Page</p>", "id": "4786"}
{"code": "private void showNextSuperToast(){\n  if (superToastPriorityQueue.isEmpty())   return;\n  final SuperToast superToast=superToastPriorityQueue.peek();\n  if (!superToast.isShowing()) {\n    final Message message=obtainMessage(Messages.DISPLAY_SUPERTOAST);\n    message.obj=superToast;\n    sendMessage(message);\n  }\n}\n", "nl": "Show the next SuperToast in the current queue. If a SuperToast is currently showing, do nothing. The currently showing SuperToast will call this method when it dismisses.", "id": "35486"}
{"code": "public static ProbeItemDescriptor discreteLineFillItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue){\n  return discreteOutlineItem(name,description,formatter,dataFactor,minValue,maxValue,DEFAULT_LINE_WIDTH,DEFAULT_COLOR,DEFAULT_COLOR);\n}\n", "nl": "Creates descriptor for a discrete item created by line segments representing the outline and filled segments with custom dataFactor ad min/max values.", "id": "33045"}
{"code": "public boolean isCentralDB(){\n  return _isCentralDB;\n}\n", "nl": "returns an indication if the underlying DB is a central DB common to several cluster members", "id": "40189"}
{"code": "private double mean(double[] vec){\n  double result=0;\n  for (int i=0; i < vec.length; i++)   result+=vec[i];\n  return result / vec.length;\n}\n", "nl": "the mean of the values in the double array", "id": "27077"}
{"code": "public static boolean useDarkTheme(){\n  return sDarkTheme;\n}\n", "nl": "Since we can't use the application context to retrieve the current theme, we retrieve the theme from the Activity context when the object is initialized.", "id": "32630"}
{"code": "public static double combination(double n,double r){\n  double nFac=MathUtils.factorial(n);\n  double rFac=MathUtils.factorial(r);\n  double nMinusRFac=MathUtils.factorial((n - r));\n  return nFac / (rFac * nMinusRFac);\n}\n", "nl": "This returns the combination of n choose r", "id": "36781"}
{"code": "public static boolean hasDataTypeChanged(final ISourceDataTag sourceDataTag,final ISourceDataTag oldSourceDataTag){\n  return !sourceDataTag.getDataType().equals(oldSourceDataTag.getDataType());\n}\n", "nl": "Checks if the data type has changed between the old and the new data tag.", "id": "16765"}
{"code": "public boolean isCellEditable(int row,int col){\n  return true;\n}\n", "nl": "Checks if is cell editable.", "id": "1961"}
{"code": "public static int cmdHdr(GeomCmd cmd,int length){\n  return (cmd.getCmdId() & 0x7) | (length << 3);\n}\n", "nl": "<p>Encodes a 'command header' with the first 3 LSB as the command id, the remaining bits as the command length. See the vector-tile-spec for details.</p>", "id": "54750"}
{"code": "public void recordSplashscreenThemeColor(int type){\n  assert !mCommitted;\n  assert type >= 0 && type < SPLASHSCREEN_COLOR_STATUS_MAX;\n  mSplashScreenThemeColor=type;\n}\n", "nl": "Records the type of theme color on the splash screen.", "id": "8321"}
{"code": "public boolean contains(TakeModifiers modifiers){\n  return super.contains(modifiers);\n}\n", "nl": "Checks if the specified modifier is set.", "id": "27374"}
{"code": "public static InSpacePredicate in(Object... values){\n  return new InSpacePredicate(values);\n}\n", "nl": "Creates an IN predicate using the specified expected values.", "id": "52265"}
{"code": "public void addNewStyledLayer(UserLayer userLayer){\n  if (this.sld == null) {\n    ConsoleManager.getInstance().error(this,\"sld == null\");\n  }\n else {\n    this.sld.addStyledLayer(userLayer);\n  }\n}\n", "nl": "Adds the new user styled layer.", "id": "48883"}
{"code": "public void finish(){\n  this.done=true;\n  this.interrupt();\n}\n", "nl": "Tells the thread to finish.", "id": "28068"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200802,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] recovered from the transformation by using [%SkillName].", "id": "45129"}
{"code": "public void sendFeedback(FeedbackRequest request) throws ClarifaiException {\n  new ClarifaiRequester<Void>(connectionFactory,credentialManager,POST,\"/feedback\",Void.class,maxAttempts).execute(request);\n}\n", "nl": "Makes a feedback request.", "id": "14107"}
{"code": "public static void main(final String[] args) throws InterruptedException {\n  withGeneric();\n  withoutGeneric();\n}\n", "nl": "main method.", "id": "55001"}
{"code": "public boolean containsSinkMethod(String sinkSignature){\n  return !findSinkByMethodSignature(sinkSignature).isEmpty();\n}\n", "nl": "Checks whether this result object contains a sink with the given method signature", "id": "51425"}
{"code": "public LeadsGetUsersQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of results to return.", "id": "24251"}
{"code": "public static void write(CharSequence data,Writer output) throws IOException {\n  if (data != null) {\n    write(data.toString(),output);\n  }\n}\n", "nl": "Writes chars from a <code>CharSequence</code> to a <code>Writer</code>.", "id": "22780"}
{"code": "@Override public void populateField(ProcessFunction value){\n  processFunction=value;\n  if (textField != null) {\n    textField.setText(ParameterFunctionUtils.getString(processFunction));\n    UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,value));\n    oldValueObj=value;\n    valueUpdated();\n  }\n}\n", "nl": "Populate process function field", "id": "15852"}
{"code": "public double cond(){\n  return s[0] / s[Math.min(m,n) - 1];\n}\n", "nl": "Two norm condition number", "id": "36223"}
{"code": "public static void writeSingleByte(OutputStream out,int b) throws IOException {\n  byte[] buffer=new byte[1];\n  buffer[0]=(byte)(b & 0xff);\n  out.write(buffer);\n}\n", "nl": "Implements OutputStream.write(int) in terms of OutputStream.write(byte[], int, int). OutputStream assumes that you implement OutputStream.write(int) and provides default implementations of the others, but often the opposite is more efficient.", "id": "4841"}
{"code": "public void onUpOrCancel(long time){\n  if (mModelSelectorButton.onUpOrCancel() && mTabModelSelector != null) {\n    getActiveStripLayoutHelper().finishAnimation();\n    if (!mModelSelectorButton.isVisible())     return;\n    mTabModelSelector.selectModel(!mTabModelSelector.isIncognitoSelected());\n    return;\n  }\n  getActiveStripLayoutHelper().onUpOrCancel(time);\n}\n", "nl": "Called on up or cancel touch events. This is called after the click and fling event if any.", "id": "9513"}
{"code": "public boolean isAssociated(int node){\n  return isAssociated(node,0);\n}\n", "nl": "Tests if a node is associated to this group", "id": "36071"}
{"code": "public boolean forall(P2SetVisitor v){\n  return false;\n}\n", "nl": "Calls v's visit method on all nodes in this set.", "id": "58723"}
{"code": "private boolean journalRebuildRequired(){\n  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;\n  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();\n}\n", "nl": "We only rebuild the journal when it will halve the size of the journal and eliminate at least 2000 ops.", "id": "20871"}
{"code": "@Override public boolean isEnabled(){\n  if ((attributeSelectionPanel != null) && !isValueOnly()) {\n    return attributeSelectionPanel.isEnabled();\n  }\n else {\n    if (start.datePicker != null) {\n      return start.datePicker.isEnabled();\n    }\n  }\n  return false;\n}\n", "nl": "Checks if is enabled.", "id": "52423"}
{"code": "public LogSegmentMetadata remove(String name){\nsynchronized (logSegments) {\n    LogSegmentMetadata metadata=logSegments.remove(name);\n    if (null != metadata) {\n      lid2LogSegments.remove(metadata.getLedgerId(),metadata);\n      LOG.debug(\"Removed log segment ({} : {}) from cache.\",name,metadata);\n    }\n    return metadata;\n  }\n}\n", "nl": "Remove log segment <code>name</code> from the cache.", "id": "37816"}
{"code": "public static ValueGetterSpacePredicate<ServerEntry> propertyOr(String propertyName,ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){\n  return property(propertyName,or(leftPredicate,rightPredicate));\n}\n", "nl": "Shortcut for property(propertyName, or(leftPredicate, rightPredicate)).", "id": "1200"}
{"code": "@Override public void redo(Transaction tx){\n}\n", "nl": "Logical Record should not be redo since it would not do the same physical operations as the time it terminated.", "id": "13033"}
{"code": "public EnterMonitorStmt newEnterMonitorStmt(Value op){\n  return new GEnterMonitorStmt(op);\n}\n", "nl": "Constructs a EnterMonitorStmt(Expr) grammar chunk.", "id": "35078"}
{"code": "public static String rFrameRateToEditRate(String rFrameRate){\n  String[] parts=rFrameRate.split(\"/\");\n  if (parts.length == 2) {\n    return String.format(\"%s %s\",parts[0],parts[1]);\n  }\n  return String.format(\"%s %s\",rFrameRate,1);\n}\n", "nl": "Converts rFrameRate in a form \"50/1\" or \"50\" to the edit rate form \"50 1\".", "id": "35261"}
{"code": "public void startPreview(){\n  if (mCamera != null && !mPreviewing) {\n    mCamera.startPreview();\n    mPreviewing=true;\n  }\n}\n", "nl": "Asks the mCamera hardware to begin drawing preview frames to the screen.", "id": "33129"}
{"code": "private static String readFile(File file,Charset encoding) throws IOException {\n  byte[] encoded=Files.readAllBytes(Paths.get(file.getAbsolutePath()));\n  return new String(encoded,encoding);\n}\n", "nl": "Read file.", "id": "21501"}
{"code": "protected void sendPacket(GsServerPacket msg){\n  getConnection().sendPacket(msg);\n}\n", "nl": "Send new GsServerPacket to connection that is owner of this packet. This method is equivalent to: getConnection().sendPacket(msg);", "id": "50170"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SwitchHPMP_Instant_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200887,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] exchanged his HP and MP by using [%SkillName].", "id": "34289"}
{"code": "@Override protected void onStopLoading(){\n  cancelLoad();\n}\n", "nl": "Handles a request to stop the Loader.", "id": "46191"}
{"code": "public static boolean isSignedLong(String s){\n  if (isEmpty(s))   return defaultEmptyOK;\n  try {\n    Long.parseLong(s);\n    return true;\n  }\n catch (  Exception e) {\n    return false;\n  }\n}\n", "nl": "Returns true if all characters are numbers; first character is allowed to be + or - as well. Does not accept floating point, exponential notation, etc.", "id": "27215"}
{"code": "public void pausePlaying(){\n  if (this.state == STATE.MEDIA_RUNNING && this.player != null) {\n    this.player.pause();\n    this.setState(STATE.MEDIA_PAUSED);\n  }\n else {\n    Log.d(LOG_TAG,\"AudioPlayer Error: pausePlaying() called during invalid state: \" + this.state.ordinal());\n    sendErrorStatus(MEDIA_ERR_NONE_ACTIVE);\n  }\n}\n", "nl": "Pause playing.", "id": "6526"}
{"code": "public void goToNextColor(){\n  mColorIndex=(mColorIndex + 1) % (mColors.length);\n}\n", "nl": "Proceed to the next available ring color. This will automatically wrap back to the beginning of colors.", "id": "2403"}
{"code": "protected void resetXML11() throws XNIException {\n  int count=fXML11Components.size();\n  for (int i=0; i < count; i++) {\n    XMLComponent c=(XMLComponent)fXML11Components.get(i);\n    c.reset(this);\n  }\n}\n", "nl": "reset all components before parsing and namespace context", "id": "37207"}
{"code": "public IntIterator rows(){\n  return new RowIterator(false);\n}\n", "nl": "Get an iterator over the table rows.", "id": "56182"}
{"code": "public static void startMe(Context _context){\n  Intent intent=new Intent(_context,BucketActivity.class);\n  intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\n  _context.startActivity(intent);\n}\n", "nl": "Allows to start this activity", "id": "39622"}
{"code": "@Deprecated public static String removeJava2IANAMapping(String javaEncoding){\n  return (String)fJava2IANAMap.remove(javaEncoding);\n}\n", "nl": "Removes a Java to IANA encoding name mapping.", "id": "24226"}
{"code": "Process openProcess(String[] cmdAttribs) throws IOException {\n  return Runtime.getRuntime().exec(cmdAttribs);\n}\n", "nl": "Opens the process to the operating system.", "id": "13035"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "36784"}
{"code": "public boolean isDrawGridLinesEnabled(){\n  return mDrawGridLines;\n}\n", "nl": "Returns true if drawing grid lines is enabled for this axis.", "id": "49861"}
{"code": "private void readObject(final ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  count=0;\n}\n", "nl": "Read a serialized object.", "id": "52226"}
{"code": "public Vector multiply(float m){\n  x*=m;\n  y*=m;\n  z*=m;\n  return this;\n}\n", "nl": "Performs scalar multiplication, multiplying all components with a scalar.", "id": "32805"}
{"code": "protected void readConfigFile(VendorOptionFactoryInterface vendorOptionFactory,UpdateSymbolInterface parent,String filename){\n  internal_readConfigFile(vendorOptionFactory,parent.getClass(),parent,filename,false,false);\n}\n", "nl": "Read panel configuration file.", "id": "19633"}
{"code": "@Override public void applyDimensionBehaviour(){\n  wrapContent();\n}\n", "nl": "Apply the size behaviour", "id": "47735"}
{"code": "public TypeSpec typeSpec(List<AnnotationSpec> generatedAnnotations){\n  return classBuilder(generatedType).addFields(fields).addMethod(constructor()).addMethods(transform(methods(),getMethod)).addAnnotations(generatedAnnotations).addModifiers(PUBLIC,FINAL).addTypes(nestedTypes).build();\n}\n", "nl": "Create the definition of the generated class.", "id": "43542"}
{"code": "public AemInsertWindow waitToBeDisplayed(){\n  wait.withTimeout(Timeouts.MEDIUM).until(ExpectedConditions.visibilityOf(currentScope));\n  return this;\n}\n", "nl": "Waits for the window to be displayed.", "id": "43672"}
{"code": "@Override public void accept(@NonNull final Object reference){\nsynchronized (this) {\n    this.reference=reference;\n  }\n  updateDispatcher.update();\n}\n", "nl": "Post an Event", "id": "18298"}
{"code": "public GroupsSearchQuery cityId(Integer value){\n  return unsafeParam(\"city_id\",value);\n}\n", "nl": "City ID. If this parameter is transmitted, country_id is ignored.", "id": "57564"}
{"code": "public static Bitmap drawableToBitmap(Drawable drawable){\n  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();\n}\n", "nl": "convert Drawable to Bitmap", "id": "49358"}
{"code": "public boolean isExpanded(int row){\n  return getBoolean(row,VisualItem.EXPANDED);\n}\n", "nl": "Indicates the given row is expanded. Only used for items that are part of a graph structure.", "id": "25402"}
{"code": "public T value() throws ConcurrentModificationException, NoSuchElementException {\n  if (referenceCount != count) {\n    throw new ConcurrentModificationException();\n  }\n  if (current < 0) {\n    throw new NoSuchElementException();\n  }\n  return values[current];\n}\n", "nl": "Get the value of current entry.", "id": "14723"}
{"code": "public static LocationHabitatFragment newInstance(long loc_id){\n  LocationHabitatFragment fragment=new LocationHabitatFragment();\n  Bundle args=new Bundle();\n  args.putLong(ARG_LOCATION_ID,loc_id);\n  fragment.setArguments(args);\n  return fragment;\n}\n", "nl": "Use this factory method to create a new instance of this fragment using the provided parameters.", "id": "44254"}
{"code": "public void afterOperationsBatchSynchronization(OperationsBatchData batchData){\n}\n", "nl": "Triggered after synchronization batch of operations was completed successfully.", "id": "41764"}
{"code": "public void addValue(T v){\n  incrementValue(v,1);\n}\n", "nl": "Adds 1 to the frequency count for v.", "id": "3493"}
{"code": "static <T>AnyVal<T> anyOptional(AnyVal<Optional<T>> value){\n  return new AnyOptional<>(null,value);\n}\n", "nl": "Returns a new Any that holds an Optional. The given value is assigned the optional itself on match.", "id": "42561"}
{"code": "private boolean shouldCheckApiVersionOnPath(String path){\n  for (  Pattern filterPattern : API_VERSION_FILTER_PATTERNS) {\n    Matcher matcher=filterPattern.matcher(path);\n    if (matcher.matches()) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks to see if the given path matches any of the api version filter paths.", "id": "8680"}
{"code": "public Builder removeColumns(Collection<String> columnNames){\n  return transform(new RemoveColumnsTransform(columnNames.toArray(new String[columnNames.size()])));\n}\n", "nl": "Remove all of the specified columns, by name", "id": "32808"}
{"code": "public void join(TransactionParticipant part,long crashCount) throws UnknownTransactionException, CannotJoinException, CrashCountException, RemoteException {\n  if (crashCount == EMBEDDED_CRASH_COUNT)   mgr.join(id,part,crashCount,this);\n else   mgr.join(id,part,crashCount);\n}\n", "nl": "Join the transaction. The <code>crashCount</code> marks the state of the storage used by the participant for transactions. If the participant attempts to join a transaction more than once, the crash counts must be the same. Each system crash or other event that destroys the state of the participant's unprepared transaction storage must cause the crash count to increase by at least one.", "id": "29041"}
{"code": "@Override public void endCDATA(Augmentations augs) throws XNIException {\n  fInCDATASection=false;\n  if (fDocumentHandler != null) {\n    fDocumentHandler.endCDATA(augs);\n  }\n}\n", "nl": "The end of a CDATA section.", "id": "14938"}
{"code": "public void resourceDeleted(ISVNRemoteResource resource){\n  Iterator it=listeners.iterator();\n  while (it.hasNext()) {\n    IRepositoryListener listener=(IRepositoryListener)it.next();\n    listener.remoteResourceDeleted(resource);\n  }\n}\n", "nl": "A resource has been deleted", "id": "19297"}
{"code": "public static void showBrand(Player player,int targetObjId,int brandId){\n  PlayerGroup group=player.getPlayerGroup2();\n  if (group != null) {\n    group.onEvent(new ShowBrandEvent<PlayerGroup>(group,targetObjId,brandId));\n  }\n}\n", "nl": "Show specific mark on top of player", "id": "11418"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Silence_END_A(String value0){\n  return new SM_SYSTEM_MESSAGE(1201132,value0);\n}\n", "nl": "%0 is no longer silenced.", "id": "28226"}
{"code": "@Override public void onWebsocketHandshakeSentAsClient(WebSocket conn,ClientHandshake request) throws InvalidDataException {\n}\n", "nl": "This default implementation does not do anything which will cause the connections to always progress.", "id": "10288"}
{"code": "protected void clearDictionary(List<Dictionary> dictionaryList){\n  for (  Dictionary dictionary : dictionaryList) {\n    dictionary.clear();\n  }\n}\n", "nl": "This method will update the dictionary acceess count which is required for its removal from column LRU cache", "id": "58419"}
{"code": "public boolean isZero(){\n  return dataElement != null && dataElement.getValueType().isNumeric() && value != null && ZERO_PATTERN.matcher(value).find();\n}\n", "nl": "Indicates whether the value is a zero.", "id": "4132"}
{"code": "@Override public Alert alert(){\n  return targetLocator.alert();\n}\n", "nl": "See parent.", "id": "57441"}
{"code": "public void closeLedger(LedgerDescriptor ledgerDesc) throws BKException {\n  FutureUtils.bkResult(asyncCloseLedger(ledgerDesc));\n}\n", "nl": "Close the ledger synchronously.", "id": "44316"}
{"code": "public static String id(long hash){\n  return H32.toString(hash);\n}\n", "nl": "convert the long data to a BASE32 string.", "id": "27946"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_COMBINE_ITEM_MULTI(String value1,String value0s){\n  return new SM_SYSTEM_MESSAGE(1300789,value1,value0s);\n}\n", "nl": "You have crafted %1 %0s.", "id": "49089"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_PROC_INVALID_STANCE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300509,value0);\n}\n", "nl": "You cannot socket godstones while %0.", "id": "54619"}
{"code": "public long optLong(int index,long defaultValue){\n  try {\n    return getLong(index);\n  }\n catch (  Exception e) {\n    return defaultValue;\n  }\n}\n", "nl": "Get the optional long value associated with an index. The defaultValue is returned if there is no value for the index, or if the value is not a number and cannot be converted to a number.", "id": "42883"}
{"code": "public void removeGroupPropertiesListener(GroupPropertiesListener groupPropertiesListener){\n  groupPropertiesListeners.remove(groupPropertiesListener);\n}\n", "nl": "Removes a group properties listener.", "id": "5754"}
{"code": "public static void reloadTime(int time){\n  ThreadPoolManager.getInstance().purge();\n  instance=new GameTime(time);\n  clockStarted=false;\n  startClock();\n  log.info(\"Game time changed by admin and clock restarted...\");\n}\n", "nl": "Clean scheduled queues, set a new GameTime, then restart the clock", "id": "6804"}
{"code": "public UsersIsAppUserQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id", "id": "47194"}
{"code": "@Override public Filter createLogicFilter(List<Filter> filterList){\n  return null;\n}\n", "nl": "Creates the logic filter.", "id": "14978"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_IMMUNED_MAGIC_PARTY(String skilltarget,String skillcaster){\n  return new SM_SYSTEM_MESSAGE(1220223,skilltarget,skillcaster);\n}\n", "nl": "[%SkillTarget] is immune to [%SkillCaster]'s magic.", "id": "44089"}
{"code": "public int toPageIndex(){\n  return (first + rows) / rows - 1;\n}\n", "nl": "Zero based page index.", "id": "13832"}
{"code": "public void removeObserver(FindToolbarObserver observer){\n  mObservers.removeObserver(observer);\n}\n", "nl": "Remove an observer for find in page changes.", "id": "10848"}
{"code": "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  if (server == null) {\n    throw new InvalidObjectException(\"null server\");\n  }\n else   if (lease == null) {\n    throw new InvalidObjectException(\"null lease\");\n  }\n}\n", "nl": "Verifies that member fields are non-null.", "id": "23415"}
{"code": "public void loadConf(DistributedLogConfiguration baseConf){\n  addConfiguration(baseConf);\n}\n", "nl": "You can load configuration from other configuration", "id": "45245"}
{"code": "public void listen(@NotNull ObservableValue<?> src,@NotNull InvalidationListener listener){\n  myListeners.add(new ListenerPairing(src,listener));\n}\n", "nl": "Registers the target listener with the specified observable.", "id": "42692"}
{"code": "@Override public int lastIndexOf(Object object){\n  return mItems.lastIndexOf(object);\n}\n", "nl": "Searches this List for the specified object and returns the index of the last occurrence. <p/>", "id": "57381"}
{"code": "public Map<K,V> pop(){\n  if (this.stackList.size() > 1) {\n    return stackList.remove(0);\n  }\n else {\n    return null;\n  }\n}\n", "nl": "Remove and returns the Map from the top of the stack; if there is only one Map on the stack it returns null and does not remove it", "id": "48738"}
{"code": "public Bundler putIntegerArrayList(String key,ArrayList<Integer> value){\n  bundle.putIntegerArrayList(key,value);\n  return this;\n}\n", "nl": "Inserts an ArrayList<Integer> value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.", "id": "16918"}
{"code": "public static boolean startsWithIgnoreCase(final String string,final String prefix) throws IllegalArgumentException, NullPointerException {\n  Validate.notNull(string,\"Cannot check a null string for a match\");\n  if (string.length() < prefix.length()) {\n    return false;\n  }\n  return string.regionMatches(true,0,prefix,0,prefix.length());\n}\n", "nl": "This method uses a region to check case-insensitive equality. This means the internal array does not need to be copied like a toLowerCase() call would.", "id": "10786"}
{"code": "public static String bind(String id,String binding){\n  return bind(id,new String[]{binding});\n}\n", "nl": "Lookup the message with the given ID in this catalog and bind its substitution locations with the given string.", "id": "21584"}
{"code": "boolean sameClass(String cfn){\n  String s=cfn;\n  int i=s.lastIndexOf(\".class\");\n  if (i > 0) {\n    s=s.substring(0,i);\n  }\n  if (s.compareTo(toString()) == 0)   return true;\n  return false;\n}\n", "nl": "Given the name of a class --- possibly with <tt>.class</tt> after it, this answers whether the class might refer to this ClassFile object.", "id": "43245"}
{"code": "public static void createCodeGroupClass(ICodeUnit unit,StructureInfo struInfo){\n  IMetadataGroup grp=new DexMetadataGroupClass(\"codeAnalysisClasses\",MetadataGroupType.CLASSID,struInfo);\n  unit.getMetadataManager().addGroup(grp);\n}\n", "nl": "Create class code group(matched classes).", "id": "22317"}
{"code": "public static boolean isUpdateOrWrite(int mod){\n  return Modifiers.contains(mod,UpdateModifiers.UPDATE_OR_WRITE);\n}\n", "nl": "Return <tt>true</tt> if the integer argument includes the <tt>UPDATE_OR_WRITE</tt> modifier, <tt>false</tt> otherwise.", "id": "907"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "32844"}
{"code": "public static boolean isOrSubOf(Class<?> objectClass,Class<?> parentClass){\n  while (objectClass != null) {\n    if (objectClass == parentClass)     return true;\n    objectClass=objectClass.getSuperclass();\n  }\n  return false;\n}\n", "nl": "Tests if a class is a class of or a sub-class of the parent.", "id": "28674"}
{"code": "public GroupsIsMemberQueryWithUserIds isMember(UserActor actor,String groupId,Integer... userIds){\n  return new GroupsIsMemberQueryWithUserIds(getClient(),actor,groupId,userIds);\n}\n", "nl": "Returns information specifying whether a user is a member of a community.", "id": "2672"}
{"code": "private void notifyDataSourceLoaded(){\n  List<DataSourceUpdatedInterface> copyListenerList=new ArrayList<DataSourceUpdatedInterface>(listenerList);\n  for (  DataSourceUpdatedInterface listener : copyListenerList) {\n    listener.dataSourceLoaded(getGeometryType(),this.connectedToDataSourceFlag);\n  }\n}\n", "nl": "Notify data source loaded.", "id": "9369"}
{"code": "public IdentityStmt newIdentityStmt(Value local,Value identityRef){\n  return new JIdentityStmt(local,identityRef);\n}\n", "nl": "Constructs a IdentityStmt(Local, IdentityRef) grammar chunk.", "id": "17703"}
{"code": "public static void checkDirectoryIsWriteable(@NotNull File directory) throws IOException {\n  while (!directory.exists() || !directory.isDirectory()) {\n    directory=directory.getParentFile();\n  }\n  if (!directory.canWrite()) {\n    throw new IOException(\"Cannot write to folder: \" + directory.getAbsolutePath());\n  }\n}\n", "nl": "Find the first parent directory that exists and check if this directory is writeable.", "id": "18996"}
{"code": "protected BoardGetTopicsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return information about users who created topics or who posted there last", "id": "19776"}
{"code": "public VideoEditQuery name(String value){\n  return unsafeParam(\"name\",value);\n}\n", "nl": "New video title.", "id": "33085"}
{"code": "public static byte writeByte(byte b){\n  return b;\n}\n", "nl": "Writes a signed/unsigned byte.", "id": "54969"}
{"code": "public boolean isApplicable(){\n  return ((ViewerBase)getViewer()).getGraph().getNumberOfNodes() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "54101"}
{"code": "public MultiwayPoolBuilder<K,R> expireAfterAccess(long duration,TimeUnit unit){\n  checkState(expireAfterAccessNanos == UNSET_INT,\"expireAfterAccess was already set to %s ns\",expireAfterAccessNanos);\n  checkArgument(duration >= 0,\"duration cannot be negative: %s %s\",duration,unit);\n  expireAfterAccessNanos=unit.toNanos(duration);\n  return this;\n}\n", "nl": "Specifies that each entry should be automatically removed from the pool once a fixed duration has elapsed after the resource's creation or its last access. Access time is reset when the resource is borrowed or released. A resource is considered eligible for eviction when it is idle in the pool, e.g. it is not being used.", "id": "51036"}
{"code": "public static Tuple median(Iterator tuples,String field){\n  return median(tuples,field,DefaultLiteralComparator.getInstance());\n}\n", "nl": "Get the Tuple with the median data field value.", "id": "16490"}
{"code": "private void internalSetValue(Double value){\n  if (spinner != null) {\n    if (value.doubleValue() < minValue) {\n      spinner.setValue(minValue);\n    }\n else     if (value.doubleValue() > maxValue) {\n      spinner.setValue(maxValue);\n    }\n else {\n      spinner.setValue(value);\n    }\n  }\n}\n", "nl": "Internal set value.", "id": "11255"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_LIMIT_SALE_GATHERING_DESC01(String value0){\n  return new SM_SYSTEM_MESSAGE(1400436,value0);\n}\n", "nl": "%0 is selling items to extract vitality and Aether.", "id": "51263"}
{"code": "public Criteria createCriteria(){\n  Criteria criteria=createCriteriaInternal();\n  if (oredCriteria.size() == 0) {\n    oredCriteria.add(criteria);\n  }\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.users", "id": "5058"}
{"code": "public static double exp(double x){\n  return exp(x,0.0,null);\n}\n", "nl": "Exponential function. Computes exp(x), function result is nearly rounded.   It will be correctly rounded to the theoretical value for 99.9% of input values, otherwise it will have a 1 ULP error. Method: Lookup intVal = exp(int(x)) Lookup fracVal = exp(int(x-int(x) / 1024.0) * 1024.0 ); Compute z as the exponential of the remaining bits by a polynomial minus one exp(x) = intVal * fracVal * (1 + z) Accuracy: Calculation is done with 63 bits of precision, so result should be correctly rounded for 99.9% of input values, with less than 1 ULP error otherwise.", "id": "12099"}
{"code": "public static ShortBuffer createShortBuffer(ShortBuffer buf,int size){\n  if (buf != null && buf.limit() == size) {\n    buf.rewind();\n    return buf;\n  }\n  buf=createShortBuffer(size);\n  return buf;\n}\n", "nl": "Create a new ShortBuffer of an appropriate size to hold the specified number of shorts only if the given buffer if not already the right size.", "id": "23075"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "15367"}
{"code": "private int doEndOfFile() throws EOFException {\n  eof=true;\n  if (throwEofException) {\n    throw new EOFException();\n  }\n  return -1;\n}\n", "nl": "Handle End of File.", "id": "25909"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_PAY_GIVEUP_OTHER(String value0){\n  return new SM_SYSTEM_MESSAGE(1390229,value0);\n}\n", "nl": "%0 gave up the Bidding.", "id": "2776"}
{"code": "public List<JsonValue> values(){\n  return Collections.unmodifiableList(values);\n}\n", "nl": "Returns a list of the values in this array in document order. The returned list is backed by this array and will reflect subsequent changes. It cannot be used to modify this array. Attempts to modify the returned list will result in an exception.", "id": "34113"}
{"code": "public void clear(){\n  oredCriteria.clear();\n  orderByClause=null;\n  distinct=false;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.hints", "id": "6746"}
{"code": "public static Drawable bitmapToDrawable(Bitmap bitmap){\n  return bitmap == null ? null : new BitmapDrawable(bitmap);\n}\n", "nl": "convert Bitmap to Drawable", "id": "5102"}
{"code": "public JSONStringer key(String name) throws JSONException {\n  if (name == null) {\n    throw new JSONException(\"Names must be non-null\");\n  }\n  beforeKey();\n  string(name);\n  return this;\n}\n", "nl": "Encodes the key (property name) to this stringer.", "id": "23248"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_PROTECT_A_to_ME(String skillcaster){\n  return new SM_SYSTEM_MESSAGE(1201174,skillcaster);\n}\n", "nl": "You blocked [%SkillCaster]'s attack with the protective shield effect.", "id": "22356"}
{"code": "public void init$Children(){\n  children=new ASTNode[4];\n  setChild(new Opt(),1);\n  setChild(new List(),2);\n  setChild(new List(),3);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "36829"}
{"code": "public void collapse(TreePath[] paths){\n  for (  TreePath path : paths) {\n    collapse((DefaultMutableTreeNode)path.getLastPathComponent());\n  }\n}\n", "nl": "collapse an array of paths", "id": "24091"}
{"code": "public boolean isLimitEnabled(){\n  return this.limitEnabled;\n}\n", "nl": "Returns true if the rotational limit is enabled.", "id": "38525"}
{"code": "@Override public boolean isEnabled(){\n  if ((attributeSelectionPanel != null) && !isValueOnly()) {\n    return attributeSelectionPanel.isEnabled();\n  }\n else {\n    if (spinner != null) {\n      return spinner.isEnabled();\n    }\n  }\n  return false;\n}\n", "nl": "Checks if is enabled.", "id": "52972"}
{"code": "public void addModifier(ItemIdOuterClass.ItemId item) throws LoginFailedException, RemoteServerException {\n  AsyncHelper.toBlocking(addModifierAsync(item));\n}\n", "nl": "Adds a modifier to this pokestop. (i.e. add a lure module)", "id": "40150"}
{"code": "@Override public void close(){\n  idx=0;\n  mark=0;\n}\n", "nl": "Close resets the file back to the start and removes any marked position.", "id": "50071"}
{"code": "public void hideOverlappingContainer(){\n  mFrameLayoutOverlappingViewContainer.setVisibility(GONE);\n}\n", "nl": "Hide overlapping container, all overlapping view will be hidden", "id": "37038"}
{"code": "public void toString(StringBuffer sb){\n  sb.append(getID());\n}\n", "nl": "Parser debug printout.", "id": "2923"}
{"code": "public Object clone(){\n  TIntArrayList list=null;\n  try {\n    list=(TIntArrayList)super.clone();\n    list._data=toNativeArray();\n  }\n catch (  CloneNotSupportedException e) {\n  }\n  return list;\n}\n", "nl": "Returns a clone of this list.  Since this is a primitive collection, this will be a deep clone.", "id": "40951"}
{"code": "public boolean isSuccess(){\n  return this.status != null && this.status.equals(ConfigConstants.Status.OK);\n}\n", "nl": "Check whether the configuration operation was successful or not.", "id": "4389"}
{"code": "public void enterFullScreen(){\n  View decorView=mContext.getWindow().getDecorView();\n  hideSystemUI(decorView);\n  for (  View view : views) {\n    view.setVisibility(View.GONE);\n    view.invalidate();\n  }\n}\n", "nl": "call this method to enter full screen", "id": "14674"}
{"code": "public static SM_SYSTEM_MESSAGE STR_ABYSS_BOSS_KILLED(String value1,String value0){\n  return new SM_SYSTEM_MESSAGE(1390195,value1,value0);\n}\n", "nl": "%1 of the %0 killed the Guardian General.", "id": "19426"}
{"code": "public void attackMode(int targetObjId){\n  VisibleObject obj=getOwner().getKnownList().getObject(targetObjId);\n  if (obj != null && obj instanceof Creature) {\n    SummonsService.attackMode(getOwner());\n  }\n}\n", "nl": "Change to attackMode", "id": "38427"}
{"code": "public static void main(String[] args){\n  if (args.length != 1) {\n    System.err.println(\"Usage: VertxExample <json file>\");\n    System.exit(1);\n  }\n  VertxExample example=new VertxExample();\n  example.parseFile(args[0],null);\n}\n", "nl": "The main program. Accepts one argument: the name of the file to parse", "id": "48419"}
{"code": "public void zoomTo(float zoom){\n  this.zoom=zoom;\n}\n", "nl": "Change the zoom level", "id": "18010"}
{"code": "public static S1Interval fullLng(){\n  return S1Interval.full();\n}\n", "nl": "The full allowable range of longitudes.", "id": "43940"}
{"code": "private static int computeCapacity(final int expectedSize){\n  if (expectedSize == 0) {\n    return 1;\n  }\n  final int capacity=(int)FastMath.ceil(expectedSize / LOAD_FACTOR);\n  final int powerOfTwo=Integer.highestOneBit(capacity);\n  if (powerOfTwo == capacity) {\n    return capacity;\n  }\n  return nextPowerOfTwo(capacity);\n}\n", "nl": "Compute the capacity needed for a given size.", "id": "16766"}
{"code": "public void removeAllSections(){\n  this.sections.clear();\n}\n", "nl": "Remove all sections from this recyclerview.", "id": "32469"}
{"code": "public Point2D.Double[] generate(int n){\n  final Point2D.Double[] cloud=new Point2D.Double[n];\n  for (int i=0; i < n; i++) {\n    cloud[i]=create();\n  }\n  return cloud;\n}\n", "nl": "Point generator.", "id": "36227"}
{"code": "public static int convertDPItoPixels(Context context,int dpi){\n  final float scale=context.getResources().getDisplayMetrics().density;\n  return (int)(dpi * scale + 0.5f);\n}\n", "nl": "Convert a size in dp to a size in pixels", "id": "55039"}
{"code": "void discardFromRetired(ResourceKey<K> resourceKey,R resource){\n  resourceKey.removeFromTransferStack();\n  lifecycle.onRemoval(resourceKey.getKey(),resource);\n}\n", "nl": "Discards the resource after becoming dead from the retired state.", "id": "43218"}
{"code": "public synchronized Vertex locateVertex(String sVertexLabel){\n  return (Vertex)UniqueVertices.get(sVertexLabel);\n}\n", "nl": "Looks up a given vertex label in this graph.", "id": "43123"}
{"code": "@Override public void startConditional(short type,Augmentations augmentations) throws XNIException {\n}\n", "nl": "The start of a conditional section.", "id": "53932"}
{"code": "public boolean isEmpty(){\n  if (mySnippets.length == 0) {\n    return true;\n  }\n  for (  KindredSnippets snip : mySnippets) {\n    Pathway path=snip.getPath();\n    if (myPath.isPrefix(path)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Verify if this object has no interesting snippets.", "id": "13039"}
{"code": "public void init$Children(){\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "47756"}
{"code": "public static float nextUp(final float a){\n  return nextAfter(a,Float.POSITIVE_INFINITY);\n}\n", "nl": "Compute next number towards positive infinity.", "id": "18199"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FORCE_INVITE_PARTY(String value0,String value2,String value1){\n  return new SM_SYSTEM_MESSAGE(1300968,value0,value2,value1);\n}\n", "nl": "You have invited %0's group to the alliance. %0's group has a total of %1 members.", "id": "46000"}
{"code": "public final boolean canSetString(String field){\n  Column col=getColumn(field);\n  return (col == null ? false : col.canSetString());\n}\n", "nl": "Check if the <code>setString</code> method can safely be used for the given data field.", "id": "36497"}
{"code": "private BSPTree<Euclidean1D> previousInternalNode(BSPTree<Euclidean1D> node){\n  if (childBefore(node).getCut() != null) {\n    return leafBefore(node).getParent();\n  }\n  while (isBeforeParent(node)) {\n    node=node.getParent();\n  }\n  return node.getParent();\n}\n", "nl": "Get the previous internal node.", "id": "12725"}
{"code": "public void logMessage(MessageType type,String msg){\n  NotificationMessage<LogMessageParams> message=new NotificationMessage<>();\n  message.setMethod(LSPMethods.WINDOW_LOGMESSAGE.getMethod());\n  message.setParams(new LogMessageParams().withMessage(msg).withType(type.getType()));\n  send(message);\n}\n", "nl": "Sends the logMessage message back to the client as a notification", "id": "50565"}
{"code": "public void enqueueDownloadManagerRequest(final DownloadInfo info,boolean notifyCompleted){\n  EnqueueDownloadRequestTask task=new EnqueueDownloadRequestTask(info);\n  task.execute(notifyCompleted);\n}\n", "nl": "Sends the download request to Android download manager. If |notifyCompleted| is true, a notification will be sent to the user once download is complete and the downloaded content will be saved to the public directory on external storage. Otherwise, the download will be saved in the app directory and user will not get any notifications after download completion.", "id": "26166"}
{"code": "public static String decodeFilename(Map<String,String> map){\n  if (map != null) {\n    return map.get(DataSourceConnectorInterface.FILE_MAP_KEY);\n  }\n  return null;\n}\n", "nl": "Decode filename.", "id": "8758"}
{"code": "@ObjectiveCName(\"addRecordEventsListener:\") public List addRecordEventsListener(RecordEventsListener recordEventsListener){\n  this.record.addRecordEventsListener(recordEventsListener);\n  return this;\n}\n", "nl": "Adds a Listener that will notify you if a Discard, Delete or Error event occurs", "id": "28954"}
{"code": "boolean waitForFileDone(){\nsynchronized (waitFileSync) {\n    try {\n      while (!fileDone)       waitFileSync.wait();\n    }\n catch (    Exception e) {\n    }\n  }\n  return fileSuccess;\n}\n", "nl": "Block until file writing is done.", "id": "22662"}
{"code": "public double intercept(){\n  return alpha;\n}\n", "nl": "Returns the <em>y</em>-intercept &alpha; of the best of the best-fit line <em>y</em> = &alpha; + &beta; <em>x</em>.", "id": "4992"}
{"code": "public boolean isSame(ModelSubMenu subMenu){\n  return (this == subMenu);\n}\n", "nl": "SCIPIO: NOTE: only valid if the sub-menus were part of the same ModelMenu instance.", "id": "53901"}
{"code": "private void updateSymbols(){\n  if (rendererList != null) {\n    for (    RenderSymbolInterface renderer : rendererList) {\n      renderer.renderSymbol();\n    }\n  }\n}\n", "nl": "Refresh the drawing of any symbols in renderers", "id": "47404"}
{"code": "protected static SAXParseException createSAXParseException(XMLParseException exception){\n  return new SAXParseException(exception.getMessage(),exception.getPublicId(),exception.getExpandedSystemId(),exception.getLineNumber(),exception.getColumnNumber(),exception.getException());\n}\n", "nl": "Creates a SAXParseException from an XMLParseException.", "id": "20056"}
{"code": "protected void handleIOException(IOException e) throws IOException {\n  throw e;\n}\n", "nl": "Handle any IOExceptions thrown. <p> This method provides a point to implement custom exception handling. The default behaviour is to re-throw the exception.", "id": "11810"}
{"code": "public Scoop bind(Object obj,int toppingId,IBinding binding){\n  Topping topping=getOrCreateTopping(toppingId);\n  autoUpdateBinding(binding,topping);\n  Set<IBinding> bindings=getBindings(obj.getClass());\n  bindings.add(binding);\n  return this;\n}\n", "nl": "Provide a custom binding to a certain topping id on a given object. This allows you to customize the changes between color on certain properties, i.e. Toppings, to define it to your use case", "id": "37244"}
{"code": "public static boolean isValidUrl(String url){\n  return Patterns.WEB_URL.matcher(url).matches();\n}\n", "nl": "Check if a url is valid", "id": "14816"}
{"code": "public void finish() throws CarbonDataWriterException {\n  if (this.entryCount > 0) {\n    producerExecutorServiceTaskList.add(producerExecutorService.submit(new Producer(blockletDataHolder,dataRows,++writerTaskSequenceCounter)));\n    blockletProcessingCount.incrementAndGet();\n    processedDataCount+=entryCount;\n  }\n  closeWriterExecutionService(producerExecutorService);\n  processWriteTaskSubmitList(producerExecutorServiceTaskList);\n  processingComplete=true;\n}\n", "nl": "below method will be used to finish the data handler", "id": "49497"}
{"code": "public void refresh(){\n  refresh(null,false);\n}\n", "nl": "Refreshes any updated files in the cache. Does not add or removes any files", "id": "48515"}
{"code": "public void endArray(A array){\n}\n", "nl": "Indicates the end of an array in the JSON input. This method will be called after reading the closing square bracket character (<code>']'</code>).", "id": "30092"}
{"code": "public String toString(){\n  return \"JavaClipAudioPlayer\";\n}\n", "nl": "Returns the name of this audio player", "id": "52335"}
{"code": "private EmoClientException asEmoClientException(UniformInterfaceException e) throws EmoClientException {\n  throw new EmoClientException(e.getMessage(),e,toEmoResponse(e.getResponse()));\n}\n", "nl": "Returns an EmoClientException with a thin wrapper around the Jersey exception response.", "id": "55024"}
{"code": "private void processDataTag(final SourceDataTagValue sourceDataTagValue){\n  try {\n    if (LOGGER.isTraceEnabled()) {\n      LOGGER.trace(\"Processing incoming update for datatag #\" + sourceDataTagValue.getId());\n    }\n    dataTagFacade.updateFromSource(sourceDataTagValue.getId(),sourceDataTagValue);\n  }\n catch (  CacheElementNotFoundException cacheEx) {\n    LOGGER.warn(\"Received unrecognized data tag #\" + sourceDataTagValue.getId() + \": ignoring the update\");\n  }\n}\n", "nl": "Performs the necessary operations on reception of a data tag.", "id": "31386"}
{"code": "@Override public void onCanceled(){\n}\n", "nl": "Call if user manual cancel picking or taking content", "id": "25025"}
{"code": "public boolean drain(){\n  timer.stop(\"AudioOutput\");\n  return true;\n}\n", "nl": "Waits for all queued audio to be played", "id": "41227"}
{"code": "public int find(String sub){\n  int s1=s != null ? s.indexOf(sub,pos) : -1;\n  if (s1 > -1) {\n    pos=s1;\n  }\n  return s1;\n}\n", "nl": "find a substring.", "id": "43565"}
{"code": "public char nextClean() throws JSONException {\n  for (; ; ) {\n    char c=this.next();\n    if (c == 0 || c > ' ') {\n      return c;\n    }\n  }\n}\n", "nl": "Get the next char in the string, skipping whitespace.", "id": "24069"}
{"code": "public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){\n  if (reference == null) {\n    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));\n  }\n  return reference;\n}\n", "nl": "Ensures that an object reference passed as a parameter to the calling method is not null.", "id": "42030"}
{"code": "@Nullable public File resolveParentDirectory(@Nullable Label label){\n  return label != null ? resolveParentDirectory(label.blazePackage(),label.ruleName()) : null;\n}\n", "nl": "For files references, returns the parent directory.<br> For rule references, return the blaze package directory.", "id": "30318"}
{"code": "public static SinkRecord spoofSinkRecord(String topic,Schema valueSchema,Struct value){\n  return new SinkRecord(topic,0,null,null,valueSchema,value,0);\n}\n", "nl": "Utility method for spoofing SinkRecords that should be passed to SinkTask.put()", "id": "49582"}
{"code": "public void acquireReadLock(int segmentId){\n  _readLocks[segmentId].lock();\n}\n", "nl": "Acquires a read lock on the specified segment. If the lock is not available then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock has been acquired.", "id": "40585"}
{"code": "public boolean registerClassLoaderStateListener(Long classLoaderKey,IClassLoaderCacheStateListener listener){\n  ClassLoaderContext classLoaderContext=_classLoaders.get(classLoaderKey);\n  if (classLoaderContext == null)   return false;\n  if (classLoaderContext.getRepresents() != Represent.REGULAR)   return false;\n  return classLoaderContext.addListener(listener);\n}\n", "nl": "Register for a specified class loader key state events, the listener is kept as weak reference, all subscribers must keep a strong reference to the listener to keep this notification active", "id": "9327"}
{"code": "public FriendsGetOnlineQueryWithMobile listId(Integer value){\n  return unsafeParam(\"list_id\",value);\n}\n", "nl": "Friend list ID. If this parameter is not set, information about all online friends is returned.", "id": "4715"}
{"code": "static <T>AnyVal<Object> anyHeadAnyTail(AnyVal<T> head,AnyVal<? extends List<? extends T>> tail){\n  return new AnyConsImpl(null,head,null,tail);\n}\n", "nl": "Return a new AnyVal that matches any head of a list and any tail of a list", "id": "16596"}
{"code": "public void onStartAppRequested(View view){\n  preferences.setName(name);\n  if (navigator != null) {\n    navigator.navigateToMain();\n  }\n}\n", "nl": "Start app.", "id": "22379"}
{"code": "public static boolean createGradleWrapper(@NotNull File projectDirPath) throws IOException {\n  return createGradleWrapper(projectDirPath,GRADLE_LATEST_VERSION);\n}\n", "nl": "Creates the Gradle wrapper, using the latest supported version of Gradle, in the project at the given directory.", "id": "51805"}
{"code": "public boolean isCheckLower(){\n  return lowerCheck;\n}\n", "nl": "Needs lower bound check?", "id": "47814"}
{"code": "@VisibleForTesting static boolean hasAppInstalled(Context context,String packageName){\n  try {\n    context.getPackageManager().getPackageInfo(packageName,0);\n    return true;\n  }\n catch (  PackageManager.NameNotFoundException e) {\n    return false;\n  }\n}\n", "nl": "Checks whether any of the support oculus app is installed.", "id": "57654"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillCost_A_TO_B(String skillcaster,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200945,skillcaster,skilltarget,skillname);\n}\n", "nl": "[%SkillCaster] changed [%SkillTarget]'s MP consumption by using [%SkillName].", "id": "40940"}
{"code": "public void goToNextColor(){\n  mColorIndex=(mColorIndex + 1) % (mColors.length);\n}\n", "nl": "Proceed to the next available ring color. This will automatically wrap back to the beginning of colors.", "id": "58578"}
{"code": "private String trimReturnLine(String string){\n  return CharMatcher.anyOf(\"\\n\").trimFrom(string);\n}\n", "nl": "Trims the return line from the string", "id": "11442"}
{"code": "public static InputStream toInputStream(CharSequence input,Charset encoding){\n  return toInputStream(input.toString(),encoding);\n}\n", "nl": "Convert the specified CharSequence to an input stream, encoded as bytes using the specified character encoding.", "id": "37943"}
{"code": "@Override public void onClick(View v){\n  int id=v.getId();\nswitch (id) {\ncase R.id.email_login_button:\n    login();\n  break;\ncase R.id.guest_login:\nguestLogin();\nbreak;\ncase R.id.gplus_login_button:\nsignInWithGPlus();\nbreak;\ndefault :\nbreak;\n}\n}\n", "nl": "This function handles all click operations in this Activity.", "id": "38159"}
{"code": "public AirCycleConfig build(){\n  return new AirCycleConfig(passIntentBundleOnCreate,ignoredLifecycleCallbacks);\n}\n", "nl": "Build the AirCycleConfig.", "id": "35612"}
{"code": "private void createUI(){\n  panel=new JPanel();\n  panel.setLayout(new BorderLayout());\n  createTopPanel();\n  createFieldPanel();\n}\n", "nl": "Creates the UI.", "id": "37717"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200567,skilltarget,skillname);\n}\n", "nl": "You start to absorb [%SkillTarget]'s HP by using [%SkillName].", "id": "29655"}
{"code": "public static int modulateAlpha(int colorAlpha,int alpha){\n  int scale=alpha + (alpha >> 7);\n  return colorAlpha * scale >> 8;\n}\n", "nl": "Modulate the colorAlpha to new alpha", "id": "46142"}
{"code": "public boolean isAnyAxisInverted(){\n  return mAxisLeft.isInverted() || mAxisRight.isInverted();\n}\n", "nl": "Returns true if either the left or the right or both axes are inverted.", "id": "32669"}
{"code": "public static <T>boolean contains(Iterator<T> iterator,T element){\n  if (iterator != null) {\n    while (iterator.hasNext()) {\n      T candidate=iterator.next();\n      if (ObjectUtils.nullSafeEquals(candidate,element))       return true;\n    }\n  }\n  return false;\n}\n", "nl": "Check whether the given Iterator contains the given element.", "id": "36339"}
{"code": "public static boolean isOFBGiftCard(String stPassed){\n  if (isEmpty(stPassed))   return defaultEmptyOK;\n  String st=stripCharsInBag(stPassed,creditCardDelimiters);\n  if (st.length() == 15 && sumIsMod10(getLuhnSum(st))) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Check to see if a card number is a valid OFB Gift Card (Certifiicate)", "id": "25249"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "20099"}
{"code": "public int decrement(int offset){\n  return increment(-offset);\n}\n", "nl": "Decrement the numeric badge label. If the current badge label cannot be converted to an integer value, its label will be set to \"0\".", "id": "23183"}
{"code": "public boolean equals(Object o){\n  if (!(o instanceof LongWritable))   return false;\n  LongWritable other=(LongWritable)o;\n  return this.value == other.value;\n}\n", "nl": "Returns true iff <code>o</code> is a LongWritable with the same value.", "id": "16468"}
{"code": "public static void main(String[] args){\n  TrackingContactIds simulation=new TrackingContactIds();\n  simulation.run();\n}\n", "nl": "Entry point for the example application.", "id": "56133"}
{"code": "@Override public Box clone(){\n  return new Box(center.clone(),xExtent,yExtent,zExtent);\n}\n", "nl": "Creates a clone of this box. <p/> The cloned box will have '_clone' appended to it's name, but all other properties will be the same as this box.", "id": "35462"}
{"code": "public Vector3f subtractLocal(float subtractX,float subtractY,float subtractZ){\n  x-=subtractX;\n  y-=subtractY;\n  z-=subtractZ;\n  return this;\n}\n", "nl": "<code>subtractLocal</code> subtracts the provided values from this vector internally, and returns a handle to this vector for easy chaining of calls.", "id": "50613"}
{"code": "public boolean isLocked(int key){\n  return toolkit.getLockingKeyState(key);\n}\n", "nl": "Check if a key is on (in locked state).", "id": "54487"}
{"code": "private boolean isValidItemIndex(int index){\n  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());\n}\n", "nl": "Checks whether intem index is valid", "id": "7612"}
{"code": "private void magnitudePhaseFFT(double[] re,double[] im){\n  powerPhaseFFT(re,im);\n  toMagnitude(re);\n}\n", "nl": "Computes a complex (or real if im[] == {0,...}) FFT and converts the results to polar coordinates (magnitude and phase). Both arrays must be the same length, which is a power of 2.", "id": "12795"}
{"code": "protected XMLEntityManager createEntityManager(){\n  return new XMLEntityManager();\n}\n", "nl": "Creates an entity manager.", "id": "4892"}
{"code": "public List<RecognitionResult> recognize(RecognitionRequest request) throws ClarifaiException {\n  return Arrays.asList(new ClarifaiRequester<RecognitionResult[]>(connectionFactory,credentialManager,POST,\"/multiop\",RecognitionResult[].class,maxAttempts).execute(request));\n}\n", "nl": "Makes a recognition request for tags and/or embeddings.", "id": "2168"}
{"code": "public JsonObject toJson(){\n  JsonObject json=new JsonObject();\n  json.put(\"request\",request.toJson());\n  if (template != null) {\n    json.put(\"template\",template);\n  }\n  return json;\n}\n", "nl": "Convert this to JSON", "id": "47821"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_INTERVAL_HEAL_MP_TO_B(String skilltarget,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201048,skilltarget,num0,skillname);\n}\n", "nl": "[%SkillTarget] recovered %num0 MP due to the effect of [%SkillName].", "id": "52126"}
{"code": "public Builder shouldStartZK(boolean startZK){\n  this._shouldStartZK=startZK;\n  return this;\n}\n", "nl": "Whether to start zookeeper? By default is true.", "id": "55490"}
{"code": "public PhotosEditAlbumQuery description(String value){\n  return unsafeParam(\"description\",value);\n}\n", "nl": "New album description.", "id": "35226"}
{"code": "@Override public void showMessage(String message){\n  Snackbar.make(root,message,Snackbar.LENGTH_SHORT).show();\n}\n", "nl": "Used to show a snackbar message which is passed as a parameter.", "id": "55604"}
{"code": "public static boolean isDiscover(String cc){\n  String first4digs=cc.substring(0,4);\n  if ((cc.length() == 16) && (first4digs.equals(\"6011\")))   return isCreditCard(cc);\n  return false;\n}\n", "nl": "Checks to see if the cc number is a valid Discover number", "id": "58404"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"hide what=all;\");\n}\n", "nl": "action to be performed", "id": "12918"}
{"code": "public static int densityDpi(Context context){\n  return displayMetrics(context).densityDpi;\n}\n", "nl": "Density dpi int.", "id": "16187"}
{"code": "public boolean isAxisMinCustom(){\n  return mCustomAxisMin;\n}\n", "nl": "Returns true if the axis minIndex value has been customized (and is not calculated automatically)", "id": "46205"}
{"code": "public static AuditLevel toLevel(int val,Level defaultLevel){\n  return AUDIT;\n}\n", "nl": "Returns custom level for debug type log message", "id": "13046"}
{"code": "public static boolean isCurrentParent(List<? extends IdentifiableObject> objects){\n  for (  IdentifiableObject object : objects) {\n    if (object != null && object instanceof OrganisationUnit && ((OrganisationUnit)object).isCurrentParent()) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks whether the given List of IdentifiableObjects contains an object which is an OrganisationUnit and has the currentParent property set to true.", "id": "9494"}
{"code": "public static TimeZone toTimeZone(int gmtOffset){\n  if (gmtOffset > 12 || gmtOffset < -14) {\n    throw new IllegalArgumentException(\"Invalid GMT offset\");\n  }\n  String tzId=gmtOffset > 0 ? \"Etc/GMT+\" : \"Etc/GMT\";\n  return TimeZone.getTimeZone(tzId + gmtOffset);\n}\n", "nl": "Returns a TimeZone object based upon an hour offset from GMT.", "id": "4013"}
{"code": "public RequestHandle post(String url,ResponseHandlerInterface responseHandler){\n  return post(null,url,null,responseHandler);\n}\n", "nl": "Perform a HTTP POST request, without any parameters.", "id": "18711"}
{"code": "public AdsCreateTargetGroupQuery domain(String value){\n  return unsafeParam(\"domain\",value);\n}\n", "nl": "Domain of the site where user accounting code will be placed.", "id": "22995"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_BINDSTONE_CANNOT_FOR_INVALID_RIGHT(String value0){\n  return new SM_SYSTEM_MESSAGE(1400115,value0);\n}\n", "nl": "You cannot register as you are not %0.", "id": "40683"}
{"code": "public void discard(){\nsynchronized (this) {\n    bDiscarded=true;\n  }\n  if ((from & FROM_GROUP) != 0) {\n    lookupDisc.discard(proxy);\n  }\n else   if ((from & FROM_LOCATOR) != 0) {\n    locatorDisc.discard(proxy);\n  }\n}\n", "nl": "Discards the registrar referenced in this class from either the <code>LookupDiscovery</code> or <code>LookupLocatorDiscovery</code> utility employed by this <code>LookupDiscoveryManager</code>. The utility from which that registrar is discarded is dependent on whether the registrar was previously discovered via group or both group and locator discovery, or via locator discovery alone. This method enables a mechanism for sequentially \"chaining\" the discard process of the <code>LookupDiscovery</code> utility with the discard process of the <code>LookupLocatorDiscovery</code>. That is, rather than discarding the registrar from both utilities at the same time, by invoking this method, the registrar will be discarded from only one of those utilities. Then when the discarded event is received by the listener registered with the utility from which the registrar was discarded, the listener - based on the current discovered state of the registrar - determines whether to: discard the registrar from the other utility, send a discarded event out to the client's listener, or simply update state and do nothing more. This chaining mechanism helps to present a single event source to the client listeners. That is, even though the two discovery utilities used internally by this <code>LookupDiscoveryManager</code> operate independently, sending discarded events to the group discovery listener and/or the locator discovery listener, this chaining mechanism enables the coordination of those separate events so that only one event is sent to the client listeners, even though multiple events may have been received here. Although this chaining mechanism is helpful in coordinating the discarded events received from the <code>LookupDiscovery</code> and <code>LookupLocatorDiscovery</code> utilities, the actual reason it must be used is due to the fact that <code>LookupDiscovery</code> can send a certain type of discarded event - referred to as \"passive communication discard\"; whereas <code>LookupLocatorDiscovery</code> cannot. Recall that <code>LookupDiscovery</code> monitors the registrars it has discovered for reachability, whereas <code>LookupLocatorDiscovery</code> does not. When the <code>LookupDiscovery</code> sends a passive communication discard because it has determined that one of its registrars has become unreachable, if that registrar was also discovered via locator discovery, it is necessary to discard the registrar from the <code>LookupLocatorDiscovery</code> as well. In that case, this method is called to create a discard chain which ultimately will result in the registrar being discarded from the <code>LookupLocatorDiscovery</code>.", "id": "11541"}
{"code": "public boolean isContinuousFeature(String featureName){\n  try {\n    int index=getFeatureIndex(featureName);\n    return isContinuousFeature(index);\n  }\n catch (  Exception e) {\n    return false;\n  }\n}\n", "nl": "Determine whether the feature with the given name is a continuous feature.", "id": "25080"}
{"code": "public void updateTopControlsState(){\n  if (mContent == null)   return;\n  if (isFullscreenSizePanel()) {\n    mContent.updateTopControlsState(false,true,false);\n  }\n else {\n    mContent.updateTopControlsState(true,false,false);\n  }\n}\n", "nl": "Sets the top control state based on the internals of the panel.", "id": "57252"}
{"code": "public static java.sql.Time toSqlTime(String time){\n  java.util.Date newDate=toDate(\"1/1/1970\",time);\n  if (newDate != null) {\n    return new java.sql.Time(newDate.getTime());\n  }\n else {\n    return null;\n  }\n}\n", "nl": "Converts a time String into a java.sql.Time", "id": "57395"}
{"code": "public static MyServicePrx checkedCast(Ice.ObjectPrx __obj,String __facet,java.util.Map<String,String> __ctx){\n  return checkedCastImpl(__obj,__facet,__ctx,ice_staticId(),MyServicePrx.class,MyServicePrxHelper.class);\n}\n", "nl": "Contacts the remote server to verify that a facet of the object implements this type. Raises a local exception if a communication error occurs.", "id": "33521"}
{"code": "public synchronized static boolean isOpenAvailable(){\n  if (!openAvailableInitialized) {\n    if (\"true\".equals(allowDesktopOpen) && isDesktopSupported())     openAvailable=Desktop.getDesktop().isSupported(Desktop.Action.OPEN);\n else     openAvailable=false;\n    openAvailableInitialized=true;\n  }\n  return openAvailable;\n}\n", "nl": "Returns true if opening a file in native displayer is supported on host platform.", "id": "21589"}
{"code": "public void updateView(String what){\n  isUpToDate=false;\n  commandManager.updateEnableState();\n  isUpToDate=true;\n}\n", "nl": "ask view to rescan itself. This is method is wrapped into a runnable object and put in the swing event queue to avoid concurrent modifications.", "id": "19925"}
{"code": "private void internalSetValue(Integer value){\n  if (spinner != null) {\n    if (value.intValue() < minValue) {\n      spinner.setValue(minValue);\n    }\n else     if (value.intValue() > maxValue) {\n      spinner.setValue(maxValue);\n    }\n else {\n      spinner.setValue(value);\n    }\n  }\n}\n", "nl": "Internal set value.", "id": "44738"}
{"code": "public boolean hasNoDragOffset(){\n  return mTransOffsetX <= 0 && mTransOffsetY <= 0;\n}\n", "nl": "Returns true if both drag offsets (x and y) are zero or smaller.", "id": "55331"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OpenAerial_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200923,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] became snared in mid-air because [%SkillCaster] used [%SkillName].", "id": "16554"}
{"code": "protected void failed(Throwable e,Description description){\n}\n", "nl": "Invoked when a test fails", "id": "35813"}
{"code": "public void addTargetLocation(String name){\n  if (name != null) {\n    this.targetLocationSet.add(name);\n  }\n}\n", "nl": "Adds a target location to this context.", "id": "2231"}
{"code": "public synchronized BookKeeperClientBuilder statsLogger(StatsLogger statsLogger){\n  this.statsLogger=statsLogger;\n  return this;\n}\n", "nl": "Build BookKeeper Client using given stats logger <i>statsLogger</i>.", "id": "58236"}
{"code": "public FriendsGetRequestsQueryWithNeedMutual count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of friend requests to return (default 100, maximum 1000).", "id": "17444"}
{"code": "public EntityQuery cursorScrollInsensitive(){\n  this.resultSetType=EntityFindOptions.TYPE_SCROLL_INSENSITIVE;\n  return this;\n}\n", "nl": "Indicate that the ResultSet object's cursor is scrollable but generally not sensitive to changes to the data that underlies the ResultSet.", "id": "19108"}
{"code": "public static String decodeString(String s){\n  return new String(decode(s));\n}\n", "nl": "Decodes a string from Base64 format. No blanks or line breaks are allowed within the Base64 encoded input data.", "id": "6084"}
{"code": "public synchronized void animatePanTo(Point2D p,long duration){\n  Point2D pp=new Point2D.Double();\n  m_itransform.transform(p,pp);\n  animatePanToAbs(pp,duration);\n}\n", "nl": "Animate a pan to the specified location in screen (pixel)  co-ordinates using the provided duration.", "id": "54345"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MoveBehindATK_A_TO_ME(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200685,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] has inflicted %num0 damage on you by using [%SkillName].", "id": "33301"}
{"code": "public static boolean isValidIP4Range(String possibleIPAddress){\n  return IP_SUB_PATTERN.matcher(possibleIPAddress).matches();\n}\n", "nl": "Tests if a given string is of in the correct format for an IP4 subnet mask.", "id": "36730"}
{"code": "@Override public boolean bulkAdd(IndexRequest request){\n  if (bulkProcessor == null) {\n    log.error(\"bulkProcessor is null. This should not happen!\");\n    return false;\n  }\n  if (request == null) {\n    return false;\n  }\n  bulkProcessor.add(request);\n  log.trace(\"bulkAdd() - BulkProcessor will handle indexing of new index.\");\n  return true;\n}\n", "nl": "Add an indexRequest to the BulkProcessor in order to write data to ElasticSearch.", "id": "4716"}
{"code": "private void checkDigest() throws WrongMessageDigestException {\n  if (!checked) {\n    byte[] result=messageDigest.digest();\n    checked=true;\n    if (!MessageDigest.isEqual(result,expectedDigest)) {\n      failed=\"Incorrect message digest for \" + url + \": \"+ HttpmdUtil.digestString(result);\n      checkFailed();\n    }\n  }\n}\n", "nl": "Checks the message digest. Call this method when the end of the other input stream is reached.", "id": "37214"}
{"code": "public MessagesSendQuery randomId(Integer value){\n  return unsafeParam(\"random_id\",value);\n}\n", "nl": "Set random id", "id": "13860"}
{"code": "public boolean open_nesting(){\n  return soot.PhaseOptions.getBoolean(options,\"open-nesting\");\n}\n", "nl": "Use Open Nesting -- Use an open nesting model. Use an open nesting model, where inner transactions are allowed  to commit independently of any outer transaction.", "id": "22133"}
{"code": "@Override public int hashCode(){\n  IJSpace thisProxy=getProxy();\n  if (thisProxy == null)   return -1;\n  return thisProxy.hashCode();\n}\n", "nl": "overrides hashcode() method of Object.", "id": "53152"}
{"code": "public void insertAfter(List<E> toInsert,E point){\n  innerChain.insertAfter(toInsert,point);\n}\n", "nl": "Inserts <code>toInsert</code> in the Chain after <code>point</code>.", "id": "30994"}
{"code": "public void addEventListener(ZWaveEventListener eventListener){\nsynchronized (zwaveEventListeners) {\n    if (zwaveEventListeners.contains(eventListener)) {\n      logger.debug(\"Event Listener {} already registered\",eventListener);\n      return;\n    }\n    zwaveEventListeners.add(eventListener);\n  }\n}\n", "nl": "Add a listener for ZWave events to this controller.", "id": "30458"}
{"code": "@Override public Throwable fillInStackTrace(){\n  return null;\n}\n", "nl": "Override the method to avoid expensive stack build and synchronization, since no one uses it anyway.", "id": "58081"}
{"code": "public void onContextChanged(Context context){\n  mScroller=new StackScroller(context);\n  mContext=context;\n}\n", "nl": "Updates all internal resources and dimensions.", "id": "38878"}
{"code": "@Override public void write(String str) throws IOException {\n  out.write(str);\n}\n", "nl": "Write the characters from a string.", "id": "15822"}
{"code": "@Override public void toggle(){\n  setChecked(!isChecked);\n}\n", "nl": "Change the checked state of the view to the inverse of its current state", "id": "42683"}
{"code": "public void scroll(@SwingCoordinate int x,@SwingCoordinate int y,int scrollAmount){\n}\n", "nl": "Handles scrolling interactions.", "id": "12574"}
{"code": "public void revertToDefaultValue(){\n  List<FieldConfigBase> fieldList=fieldConfigManager.getFields(null);\n  for (  FieldConfigBase field : fieldList) {\n    if (field != null) {\n      field.revertToDefaultValue();\n    }\n  }\n}\n", "nl": "Revert to default value.", "id": "16737"}
{"code": "public void resetLabelsToSkip(){\n  mIsAxisModulusCustom=false;\n}\n", "nl": "Calling this will disable a custom number of labels to be skipped (set by setLabelsToSkip(...)) while drawing the x-axis. Instead, the number of values to skip will again be calculated automatically.", "id": "50731"}
{"code": "static boolean isAlive(Vertex vertex){\n  if (vertex == null)   return false;\n  try {\n    return vertex.property(Schema.BaseType.TYPE.name()).isPresent();\n  }\n catch (  IllegalStateException e) {\n    return false;\n  }\n}\n", "nl": "The state of the vertex in the database. This may detect ghost nodes and allow them to be excluded from computations. If the vertex is alive it is likely to be a valid Mindmaps concept.", "id": "29225"}
{"code": "public Criteria or(){\n  Criteria criteria=createCriteriaInternal();\n  oredCriteria.add(criteria);\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.banned_ips", "id": "34668"}
{"code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "17179"}
{"code": "public void clear(){\n  pointList.clear();\n  this.fireTableDataChanged();\n}\n", "nl": "Clear all the data from the model.", "id": "58671"}
{"code": "public void checkSymbolIsValid(){\n  boolean valid=false;\n  Expression expression=getExpression();\n  if (expression != null) {\n    valid=!expression.toString().isEmpty();\n  }\n  SelectedSymbol.getInstance().setValidSymbol(VALIDITY_KEY,valid);\n}\n", "nl": "Check symbol is valid.", "id": "3793"}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){\n  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. This version of the call is used for Views that need to specify a Scroll Range but scroll back to it's edge correctly.", "id": "46466"}
{"code": "@Override public int read(byte[] bts,int st,int end) throws IOException {\n  int n=super.read(bts,st,end);\n  if (n != -1) {\n    branch.write(bts,st,n);\n  }\n  return n;\n}\n", "nl": "Reads bytes from the proxied input stream and writes the read bytes to the associated output stream.", "id": "9514"}
{"code": "public final String yytext(){\n  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);\n}\n", "nl": "Returns the text matched by the current regular expression.", "id": "25115"}
{"code": "protected AuthConfirmQuery clientSecret(String value){\n  return unsafeParam(\"client_secret\",value);\n}\n", "nl": "Set client secret", "id": "38120"}
{"code": "public final int computeHashCode(int val){\n  return HashFunctions.hash(val);\n}\n", "nl": "Default implementation of TIntHashingStrategy: delegates hashing to HashFunctions.hash(int).", "id": "25705"}
{"code": "public synchronized void reset(){\n  initSeq=nextSeq;\n}\n", "nl": "Reset for the next write cycle. The next write cycle will exclude any data present in the dictionary, during serialization.", "id": "16839"}
{"code": "public void writeChar(char a) throws IOException {\n  outs.write((byte)(a));\n  outs.write((byte)(a >> 8));\n}\n", "nl": "write char, little endian", "id": "33852"}
{"code": "public void clearMatchRects(){\n  setMatchRects(-1,new RectF[0],null);\n}\n", "nl": "Clears the tickmarks.", "id": "51300"}
{"code": "protected VideoRemoveTagQuery tagId(int value){\n  return unsafeParam(\"tag_id\",value);\n}\n", "nl": "Tag ID.", "id": "32261"}
{"code": "public synchronized Transaction beginTransaction(){\n  Transaction t=new Transaction(this.numTransactions);\n  this.numTransactions++;\n  return t;\n}\n", "nl": "Start a new transaction.", "id": "47876"}
{"code": "private void addInitialPeer(){\n  try {\n    addPeer(null,new InetSocketAddress(InetAddress.getByName(CONNECTABLE_ADDRESS),DEFAULT_PORT),Peer.OUTGOING);\n  }\n catch (  UnknownHostException e) {\n    e.printStackTrace();\n  }\n}\n", "nl": "Add the intial hard-coded connectable peer to the peer list.", "id": "28492"}
{"code": "public void or(Criteria criteria){\n  oredCriteria.add(criteria);\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.teams", "id": "56075"}
{"code": "public void actionPerformed(ActionEvent ev){\n}\n", "nl": "action to be performed", "id": "53606"}
{"code": "public final boolean isAlternatingDeviceState(){\n  return (myAlternate & CFG_DEVICE_STATE) != 0;\n}\n", "nl": "Returns true if the device state is alternated", "id": "27248"}
{"code": "public void removeEdge(Edge edge) throws Exception {\n  if (EdgeDistros.containsKey(edge))   EdgeDistros.remove(edge);\n  super.removeEdge(edge);\n}\n", "nl": "Removes the selected edge from the graph.", "id": "21827"}
{"code": "@Override public Object clone(){\n  return GenericValue.create(this);\n}\n", "nl": "Clones this GenericValue, this is a shallow clone & uses the default shallow HashMap clone", "id": "29009"}
{"code": "public boolean hasPermissionsByInternalId(String internalId,Collection<Permission> permissions){\n  AuthorizationInfo authorizationInfo=getAuthorizationInfoByInternalId(internalId);\n  return authorizationInfo != null && isPermittedAll(permissions,authorizationInfo);\n}\n", "nl": "Test for whether an API key has specific permissions using its internal ID.", "id": "878"}
{"code": "public boolean showAllSites(){\n  return CATEGORY_ALL_SITES.equals(mCategory);\n}\n", "nl": "Returns whether this category is the All Sites category.", "id": "20562"}
{"code": "protected static JSONObject send(String command) throws Exception {\n  return server.send(command);\n}\n", "nl": "Send a no-args command, or a command taking just indexName which is automatically added (e.g., commit, closeIndex, startIndex).", "id": "8057"}
{"code": "public MessagesDeleteQuery messageIds(List<Integer> value){\n  return unsafeParam(\"message_ids\",value);\n}\n", "nl": "Message IDs.", "id": "18248"}
{"code": "public boolean hasInit(){\n  return getInitOpt().getNumChild() != 0;\n}\n", "nl": "Check whether the optional Init child exists.", "id": "55200"}
{"code": "boolean hasTransitioned(StorageState state){\n  return state.hasTransitioned(this);\n}\n", "nl": "Returns true if this storage has the marker associated with transitioning to the specified state at some point.  This does not check whether the the storage is in the specified state right now.", "id": "15175"}
{"code": "public PlacesGetCheckinsQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id", "id": "43824"}
{"code": "public static ConfigAspectBase create(Model model){\n  return new UsageConfigAspect(model);\n}\n", "nl": "Creates usage config aspect.", "id": "28683"}
{"code": "public boolean hasNext(){\n  return false;\n}\n", "nl": "Checks if there are more record(s) to yield", "id": "14249"}
{"code": "public static final String roll(String isoString,int field,boolean up) throws ParseException {\n  return roll(isoString,DATETIME_PATTERN,field,up);\n}\n", "nl": "Time Field Rolling function. Rolls (up/down) a single unit of time on the given time field.", "id": "38379"}
{"code": "public boolean supportsCommandClass(CommandClass commandClass){\n  return supportedCommandClasses.containsKey(commandClass);\n}\n", "nl": "Returns whether a node supports this command class.", "id": "50885"}
{"code": "@Override public String toString(){\n  if (kind == TokenKind.STRING) {\n    return \"\\\"\" + value + \"\\\"\";\n  }\n  return value == null ? kind.toString() : value.toString();\n}\n", "nl": "Constructs an easy-to-read string representation of token, suitable for use in user error messages.", "id": "21469"}
{"code": "public UsersGetSubscriptionsQueryWithExtended fields(UserField... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields", "id": "17705"}
{"code": "public void put(String key,Object ser){\n  put(key,ser,null);\n  put(\"\",\"\",new Base64Cipher());\n}\n", "nl": "*************** put", "id": "17981"}
{"code": "public static void logBasePageProtocol(boolean isHttpBasePage){\n  RecordHistogram.recordEnumeratedHistogram(\"Search.ContextualSearchBasePageProtocol\",isHttpBasePage ? PROTOCOL_IS_HTTP : PROTOCOL_NOT_HTTP,PROTOCOL_BOUNDARY);\n}\n", "nl": "Logs whether the base page was using the HTTP protocol or not.", "id": "16818"}
{"code": "public CursorIterator<T> iterate(final Txn<T> txn){\n  return iterate(txn,null,FORWARD);\n}\n", "nl": "Iterate the database from the first item and forwards.", "id": "6462"}
{"code": "public boolean checkTrustEquivalence(Object obj){\n  if (this == obj) {\n    return true;\n  }\n else   if (!(obj instanceof ProxyTrustInvocationHandler)) {\n    return false;\n  }\n  ProxyTrustInvocationHandler oh=(ProxyTrustInvocationHandler)obj;\n  return (((TrustEquivalence)main).checkTrustEquivalence(oh.main) && ((TrustEquivalence)boot).checkTrustEquivalence(oh.boot));\n}\n", "nl": "Returns <code>true</code> if the argument is an instance of this class, and calling the <code>checkTrustEquivalence</code> method on the main proxy of this invocation handler, passing the main proxy of the argument, returns <code>true</code>, and calling the <code>checkTrustEquivalence</code> method on the bootstrap proxy of this invocation handler, passing the bootstrap proxy of the argument, returns <code>true</code>, and returns <code>false</code> otherwise.", "id": "20649"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_LEVEL_LIMIT_FREE_TIME(String value1){\n  return new SM_SYSTEM_MESSAGE(1400036,value1);\n}\n", "nl": "Your trial has ended. %1, We hope you've enjoyed playing Aion! To continue to play, purchase Aion. Go to AionOnline.com to buy now!", "id": "51016"}
{"code": "@VisibleForTesting MinidumpUploadCallable createMinidumpUploadCallable(File minidumpFile,File logfile){\n  return new MinidumpUploadCallable(minidumpFile,logfile,getApplicationContext());\n}\n", "nl": "Factory method for creating minidump callables. This may be overridden for tests.", "id": "7090"}
{"code": "public final void write(OutputStream out) throws IOException {\n  writeLong(bits0,out);\n  writeLong(bits1,out);\n}\n", "nl": "Marshals a binary representation of this <code>Uuid</code> to an <code>OutputStream</code>. <p>Specifically, this method writes the 128-bit value to the stream as 16 bytes in network (big-endian) byte order.", "id": "1344"}
{"code": "public final void encrypt(ByteBuffer buf){\n  crypt.encrypt(buf);\n}\n", "nl": "Encrypt packet.", "id": "3875"}
{"code": "@Override public void preload(){\n  clusterCache.acquireReadLockOnKey(aliveStatusInitialized);\n  try {\n    preloadBuffer=fillBufferFromDB();\n    if (preloadBuffer != null) {\n      LOGGER.debug(\"Loading the cache from the buffer...\");\n      loadCacheFromBuffer(preloadBuffer);\n      LOGGER.debug(\"\\t...done\");\n    }\n else {\n      LOGGER.error(\"Attempt to call loadCacheFromBuffer with null buffer: \" + \"this should not happen and needs investigating!\");\n    }\n  }\n  finally {\n    clusterCache.releaseReadLockOnKey(aliveStatusInitialized);\n  }\n}\n", "nl": "Preload the cache from the database. First loads the objects from the DB into a map (on single threads so far) and then loads the cache from the  map (on multiple threads).", "id": "54602"}
{"code": "public void saveConfig(){\n  urlComboBox.getCurrentText(true);\n  ProgramProperties.put(\"RemoteServers\",urlComboBox.getItemsAsString(20,\"%%%\"));\n}\n", "nl": "save the current configuation", "id": "3636"}
{"code": "protected void drawGridBackground(Canvas c){\n  if (mDrawGridBackground) {\n    c.drawRect(mViewPortHandler.getContentRect(),mGridBackgroundPaint);\n  }\n  if (mDrawBorders) {\n    c.drawRect(mViewPortHandler.getContentRect(),mBorderPaint);\n  }\n}\n", "nl": "draws the grid background", "id": "46954"}
{"code": "public static <T>Aggregate<Map<String,Concept>,Map<Concept,T>> group(String varName,Aggregate<? super Map<String,Concept>,T> aggregate){\n  return Aggregates.group(varName,aggregate);\n}\n", "nl": "Create an aggregate that will group a query by a variable name and apply the given aggregate to each group", "id": "38048"}
{"code": "private void close(){\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)   supportFinishAfterTransition();\n else   finish();\n}\n", "nl": "Close current activity correctly", "id": "22839"}
{"code": "public Builder stepSubtitleTextColor(int stepSubtitleTextColor){\n  this.stepSubtitleTextColor=stepSubtitleTextColor;\n  return this;\n}\n", "nl": "Set the text color of the step subtitle", "id": "48568"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_GAME_TIME(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1390146,value0,value1);\n}\n", "nl": "Game Time: %0 %1", "id": "2484"}
{"code": "public Trap newTrap(SootClass exception,Unit beginStmt,Unit endStmt,Unit handlerStmt){\n  return new GTrap(exception,beginStmt,endStmt,handlerStmt);\n}\n", "nl": "Constructs a new Trap for the given exception on the given Stmt range with the given Stmt handler.", "id": "34249"}
{"code": "public PhotosGetQuery photoIds(List<String> value){\n  return unsafeParam(\"photo_ids\",value);\n}\n", "nl": "Photo IDs.", "id": "6761"}
{"code": "public TapTarget titleTextSize(int sp){\n  if (sp < 0)   throw new IllegalArgumentException(\"Given negative text size\");\n  this.titleTextSize=sp;\n  return this;\n}\n", "nl": "Specify the text size for the title in SP", "id": "17379"}
{"code": "public Variance withBiasCorrection(boolean biasCorrection){\n  return new Variance(this.moment,this.incMoment,biasCorrection);\n}\n", "nl": "Returns a new copy of this variance with the given bias correction setting.", "id": "3228"}
{"code": "public MessagesGetHistoryAttachmentsQuery mediaType(MessagesGetHistoryAttachmentsType value){\n  return unsafeParam(\"media_type\",value);\n}\n", "nl": "Type of media files to return", "id": "47981"}
{"code": "public void stopServer(){\n  keepRunning=false;\n  if (this.serverSocket != null) {\n    try {\n      this.serverSocket.close();\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n    this.serverSocket=null;\n  }\n}\n", "nl": "Immediately stop waiting for messages, and close the SocketServer.", "id": "15977"}
{"code": "public String loadFile(String sID){\n  return getDocumentText(sID,true);\n}\n", "nl": "Loads the text of a given file, given its filename.", "id": "8722"}
{"code": "private void clearDictionaryFromQueryModel(){\n  if (null != queryModel) {\n    Map<String,Dictionary> columnToDictionaryMapping=queryModel.getColumnToDictionaryMapping();\n    if (null != columnToDictionaryMapping) {\n      for (      Map.Entry<String,Dictionary> entry : columnToDictionaryMapping.entrySet()) {\n        CarbonUtil.clearDictionaryCache(entry.getValue());\n      }\n    }\n  }\n}\n", "nl": "This method will clear the dictionary access count after its usage is complete so that column can be deleted form LRU cache whenever memory reaches threshold", "id": "28394"}
{"code": "public static void printToFile(String filename,String message){\n  printToFile(new File(filename),message,false);\n}\n", "nl": "Prints to a file.  If the file does not exist, rewrites the file; does not append.", "id": "13956"}
{"code": "private void finishPrecaching(boolean tryAgainSoon){\n  Log.v(TAG,\"Finish precaching\");\n  shutdownPrecaching(tryAgainSoon);\n}\n", "nl": "End a precache cycle.", "id": "17914"}
{"code": "private boolean isSemitonesDelta(String string){\n  String s=string.trim();\n  if (s.length() < 4)   return false;\n  return s.substring(s.length() - 2).equals(\"st\") && isNumberDelta(s.substring(0,s.length() - 2));\n}\n", "nl": "Tell whether the string contains a positive or negative semitones delta, i.e., a semitones number with an obligatory + or - sign, such as \"+3.2st\" or \"-13.2st\".", "id": "30803"}
{"code": "private final void raise(IOException exception) throws JMSException {\n  JMSException error=new JMSException(exception.toString());\n  error.setLinkedException(exception);\n  throw error;\n}\n", "nl": "Helper to raise a JMSException when an I/O error occurs", "id": "9500"}
{"code": "public void invalidate(){\n  status=INVALID;\n}\n", "nl": "Invalidate the clip. In this state, the clip contents have no meaning.", "id": "9435"}
{"code": "@Override public final String readMapleAsciiString(){\n  return readAsciiString(readShort());\n}\n", "nl": "Reads a MapleStory convention lengthed ASCII string. This consists of a short integer telling the length of the string, then the string itself.", "id": "49980"}
{"code": "public PhiExpr newPhiExpr(Local leftLocal,List<Block> preds){\n  return new SPhiExpr(leftLocal,preds);\n}\n", "nl": "Create a trivial PhiExpr, where preds are an ordered list of the control predecessor Blocks of the Phi expression.  Instead of a list of blocks, you may provide a list of the tail Units from the corresponding blocks.", "id": "54059"}
{"code": "protected BoardAddTopicQuery title(String value){\n  return unsafeParam(\"title\",value);\n}\n", "nl": "Topic title.", "id": "45808"}
{"code": "public NewsfeedSearchQuery latitude(Float value){\n  return unsafeParam(\"latitude\",value);\n}\n", "nl": "Geographical latitude point (in degrees, -90 to 90) within which to search.", "id": "49831"}
{"code": "public void unsetPermission(Permission perm){\n  unsetPermission(perm.getName());\n}\n", "nl": "Removes the specified permission from this attachment. <p> If the permission does not exist in this attachment, nothing will happen.", "id": "42282"}
{"code": "public boolean isEmptyResult(){\n  return _results.getRowNumber() == 0;\n}\n", "nl": "Gets whether the result is empty", "id": "40345"}
{"code": "public final static <T extends Bean>List<T> load(String table,String[] cols,String where,Object[] args,Class<T> clazz){\n  return load(table,cols,where,args,null,-1,-1,clazz);\n}\n", "nl": "Load the data from the RDBMS table, by the where and", "id": "32139"}
{"code": "public AudioEditAlbumQuery editAlbum(UserActor actor,int albumId,String title){\n  return new AudioEditAlbumQuery(getClient(),actor,albumId,title);\n}\n", "nl": "Edits the title of an audio album.", "id": "28353"}
{"code": "public int increment(){\n  lock.lock();\n  int newValue=++value;\n  lock.unlock();\n  return newValue;\n}\n", "nl": "Increments the counter by 1.", "id": "33160"}
{"code": "public boolean isNavigationAtBottom(){\n  return (mSmallestWidthDp >= 600 || mInPortrait);\n}\n", "nl": "Should a navigation bar appear at the bottom of the screen in the current device configuration? A navigation bar may appear on the right side of the screen in certain configurations.", "id": "33448"}
{"code": "public Vector3f add(Vector3f vec,Vector3f result){\n  result.x=x + vec.x;\n  result.y=y + vec.y;\n  result.z=z + vec.z;\n  return result;\n}\n", "nl": "<code>add</code> adds the values of a provided vector storing the values in the supplied vector.", "id": "1893"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_DUNGEON_WITH_DIFFICULTY_OPENED(String worldname1,String value2,int num0){\n  return new SM_SYSTEM_MESSAGE(1400357,worldname1,value2,num0);\n}\n", "nl": "%WORLDNAME1 (difficulty: %2) with a %num0 player limit has opened.", "id": "9906"}
{"code": "public void tabMoved(long time,int id,int oldIndex,int newIndex){\n  reorderTab(id,oldIndex,newIndex,false);\n  updateVisualTabOrdering();\n  mUpdateHost.requestUpdate();\n}\n", "nl": "Called when a tab has been moved in the tabModel.", "id": "7457"}
{"code": "public MonitorServiceClient buildMonitorClient(){\n  return buildClient();\n}\n", "nl": "Build monitor service client.", "id": "15306"}
{"code": "public static GenericPK create(Delegator delegator,ModelEntity modelEntity,Object singlePkValue){\n  GenericPK newPK=new GenericPK();\n  newPK.init(delegator,modelEntity,singlePkValue);\n  return newPK;\n}\n", "nl": "Creates new GenericPK from existing Map", "id": "35288"}
{"code": "public void removeKey(String key){\n  String validKey=convertToValidKey(key);\n  try {\n    mDiskCache.remove(validKey);\n    Log_OC.d(TAG,\"removeKey from cache: \" + validKey);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n", "nl": "Remove passed key from cache", "id": "11722"}
{"code": "public static void showProgressDialog(final Context context,final String message){\n  showProgressDialog(context,DEFAULT_TAG,message);\n}\n", "nl": "Shows default dialog with a message", "id": "8370"}
{"code": "public void init$Children(){\n  children=new ASTNode[4];\n  setChild(new List(),0);\n  setChild(new Opt(),1);\n  setChild(new List(),2);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "32069"}
{"code": "public boolean use_original_names(){\n  return soot.PhaseOptions.getBoolean(options,\"use-original-names\");\n}\n", "nl": "Use Original Names -- . Retain the original names for local variables when the source  includes those names. Otherwise, Soot gives variables generic  names based on their types.", "id": "32932"}
{"code": "public void merge(DocumentNGramGraph dgOtherObject,double fWeightPercent){\n  mergeGraph(dgOtherObject,fWeightPercent);\n}\n", "nl": "See the <i>mergeGraph</i> member for details. Implements the merge interface.", "id": "31396"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_CASTLE_TAKEN(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1400300,value0,value1);\n}\n", "nl": "%0 failed to defend %1.", "id": "56354"}
{"code": "public void addGroups(String[] groups) throws IOException {\n  lookupDisc.addGroups(groups);\n}\n", "nl": "Adds a set of group names to the managed set of groups. Elements in the input set that duplicate elements already in the managed set will be ignored. Once a new name is added to the managed set, attempts will be made to discover all (as yet) undiscovered lookup services that are members of the group having that name. If the empty array (<code>DiscoveryGroupManagement.NO_GROUPS</code>) is input, the managed set of groups will not change. Note that any entity that invokes this method must have <code>DiscoveryPermission</code> on each of the groups in the new set, otherwise a <code>SecurityException</code> will be propagated through this method.", "id": "52144"}
{"code": "public Builder cacheOnDisc(){\n  cacheOnDisc=true;\n  return this;\n}\n", "nl": "Loaded image will be cached on disc", "id": "51964"}
{"code": "public String toString(){\n  return \" at \" + this.index + \" [character \"+ this.character+ \" line \"+ this.line+ \"]\";\n}\n", "nl": "Make a printable string of this JSONTokener.", "id": "49179"}
{"code": "public static void showWarning(Object parentIgnored,String message){\n  showNotification(title,message,Mode.warning,Pos.BOTTOM_LEFT,60000);\n}\n", "nl": "show a warning notation", "id": "41509"}
{"code": "@Override public boolean isShown(){\n  return isShown;\n}\n", "nl": "Is this badge currently visible in the UI?", "id": "3532"}
{"code": "public Transaction createTask(Task task){\n  if (!mIsSuccess) {\n    return this;\n  }\n  long id=mDatabase.insert(TasksTable.TABLE_NAME,null,task.toContentValues());\n  if (id != -1) {\n    task.id=id;\n  }\n else {\n    mIsSuccess=false;\n    mDatabase.endTransaction();\n  }\n  return this;\n}\n", "nl": "Insert the task into the database.", "id": "55767"}
{"code": "public void checkAndHide(){\n  if ((hideRequested() && mouseFurtherThan(5)) || (mouseFurtherThan(15))) {\n    hideTooltip();\n  }\n}\n", "nl": "Checks if the tooltip should be hidden, and if so, does it.", "id": "545"}
{"code": "public double apply(UnivariateStatistic stat){\n  return eDA.compute(stat);\n}\n", "nl": "Apply the given statistic to the data associated with this set of statistics.", "id": "36816"}
{"code": "public static FloatBuffer createFloatBuffer(int size){\n  FloatBuffer buf=ByteBuffer.allocateDirect(4 * size).order(ByteOrder.nativeOrder()).asFloatBuffer();\n  buf.clear();\n  if (trackDirectMemory) {\n    trackingHash.put(buf,ref);\n  }\n  return buf;\n}\n", "nl": "Create a new FloatBuffer of the specified size.", "id": "42134"}
{"code": "public Vector3f multLocal(Vector3f vec){\n  if (null == vec) {\n    logger.warning(\"Provided vector is null, null returned.\");\n    return null;\n  }\n  x*=vec.x;\n  y*=vec.y;\n  z*=vec.z;\n  return this;\n}\n", "nl": "<code>multLocal</code> multiplies a provided vector to this vector internally, and returns a handle to this vector for easy chaining of calls. If the provided vector is null, null is returned.", "id": "7159"}
{"code": "public void addSample(String sample,Document docToAdd){\n  getDataTable().addSample(sample,docToAdd.getDataTable());\n  Set<String> samples=new HashSet<>();\n  samples.add(sample);\n  getSampleAttributeTable().addTable(docToAdd.getSampleAttributeTable().extractTable(samples),false,true);\n}\n", "nl": "add named sample to given document", "id": "5716"}
{"code": "public static String toString(InputStream input,Charset encoding) throws IOException {\n  StringBuilderWriter sw=new StringBuilderWriter();\n  copy(input,sw,encoding);\n  return sw.toString();\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a String using the specified character encoding. <p> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>. </p>", "id": "50496"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FIND_POS_NPC_FOUND_IN_OTHER_WORLD(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1300754,value0,value1);\n}\n", "nl": "%0 is in the %1 region.", "id": "10763"}
{"code": "public static String toString(InputStream input) throws IOException {\n  return toString(input,Charset.defaultCharset());\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a String using the default character encoding of the platform. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>.", "id": "31938"}
{"code": "public boolean containsSink(Stmt sink){\n  for (  ResultSinkInfo si : this.results.keySet())   if (si.getSink().equals(sink))   return true;\n  return false;\n}\n", "nl": "Checks whether this result object contains a sink that exactly matches the given value.", "id": "30986"}
{"code": "public Object interpret(Target target,int minNumberOfData){\n  Object result=this.interpretToNode(target,minNumberOfData).getAllData();\n  return result;\n}\n", "nl": "Passes the given item through this CART and returns the interpretation.", "id": "31221"}
{"code": "@Override public void undoAction(UndoInterface undoRedoObject){\n  if (undoRedoObject != null) {\n    if (undoRedoObject.getOldValue() instanceof TimePeriod) {\n      TimePeriod oldValue=(TimePeriod)undoRedoObject.getOldValue();\n      populateDuration(start,oldValue.getStart());\n      populateDuration(end,oldValue.getEnd());\n    }\n  }\n}\n", "nl": "Undo action.", "id": "54251"}
{"code": "private boolean typeIsPresent(String index,String type){\n  Set<String> types=cacheIndicesTypes.get(index);\n  return types != null && types.contains(type);\n}\n", "nl": "Check the in memory Map to know if a type is assigned to an index.", "id": "7698"}
{"code": "public void close() throws IOException {\n  outs.close();\n}\n", "nl": "close this stream", "id": "52820"}
{"code": "public boolean tryUse(){\n  return used.compareAndSet(false,true);\n}\n", "nl": "Try to use this observer. Will return true only once.", "id": "43347"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_Instant_HEAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200995,skilltarget,num0,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] recovered %num0 MP because [%SkillCaster] used [%SkillName].", "id": "52131"}
{"code": "public void addTypeArgument(Access node){\n  List<Access> list=(parent == null || state == null) ? getTypeArgumentListNoTransform() : getTypeArgumentList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the TypeArgument list.", "id": "26485"}
{"code": "public static void clearMediaNotifications(Context context){\n  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);\n  Set<String> notificationIds=sharedPreferences.getStringSet(WEBRTC_NOTIFICATION_IDS,null);\n  if (notificationIds == null || notificationIds.isEmpty())   return;\n  context.startService(new Intent(context,MediaCaptureNotificationService.class));\n}\n", "nl": "Clear any previous media notifications.", "id": "20528"}
{"code": "public Criteria createCriteria(){\n  Criteria criteria=createCriteriaInternal();\n  if (oredCriteria.size() == 0) {\n    oredCriteria.add(criteria);\n  }\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.challenges", "id": "37368"}
{"code": "private static Optional<Set<String>> includedFields(String resourceType,TypedParams<IncludedFieldsParams> includedFields){\n  IncludedFieldsParams typeIncludedFields=findIncludedFields(includedFields,resourceType);\n  if (noResourceIncludedFieldsSpecified(typeIncludedFields)) {\n    return Optional.empty();\n  }\n else {\n    return Optional.of(typeIncludedFields.getParams());\n  }\n}\n", "nl": "When <i>fields</i> filter is passed in the query params, <b>attributes</b> and <b>relationships</b> should be filtered accordingly to the requested fields. If there are included fields defined for other resources but not for the current one, empty set is returned", "id": "57132"}
{"code": "@Override public String toString(){\n  String str=null;\n  if (BigInteger.ONE.equals(denominator)) {\n    str=numerator.toString();\n  }\n else   if (BigInteger.ZERO.equals(numerator)) {\n    str=\"0\";\n  }\n else {\n    str=numerator + \" / \" + denominator;\n  }\n  return str;\n}\n", "nl": "<p> Returns the <code>String</code> representing this fraction, ie \"num / dem\" or just \"num\" if the denominator is one. </p>", "id": "26189"}
{"code": "private static boolean matches(Pattern pattern,String input){\n  Matcher m=pattern.matcher(input);\n  return m.matches();\n}\n", "nl": "Determines if the given input matches the given Pattern.", "id": "49869"}
{"code": "private void subscribeToAdminMessageTopic() throws JMSException {\n  if (adminMessageTopic != null) {\n    Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);\n    final MessageConsumer consumer=session.createConsumer(adminMessageTopic);\n    consumer.setMessageListener(broadcastMessageListenerWrapper);\n  }\n}\n", "nl": "Called when refreshing subscriptions at start up and again if the connection goes down.", "id": "8511"}
{"code": "public boolean enabled(){\n  return soot.PhaseOptions.getBoolean(options,\"enabled\");\n}\n", "nl": "Enabled -- .", "id": "46457"}
{"code": "public static Builder newBuilder(){\n  return new Builder();\n}\n", "nl": "Create a builder to build scheduler.", "id": "13015"}
{"code": "private void startPenaltySkill(){\n  int penaltySkill=skillTemplate.getPenaltySkillId();\n  if (penaltySkill == 0) {\n    return;\n  }\n  SkillEngine.getInstance().applyEffectDirectly(penaltySkill,firstTarget,effector,0);\n}\n", "nl": "Penalty success skill", "id": "9995"}
{"code": "public FramePath addFrame(Frame frame){\n  return addFrame(frame.value());\n}\n", "nl": "Appends the frame to the frame path.", "id": "47391"}
{"code": "@Override public void remove(){\n  throw new UnsupportedOperationException(\"This operation is not supported.\");\n}\n", "nl": "<font color=\"red\"><b>NOT IMPLEMENTED</b></font>", "id": "11512"}
{"code": "public void shareWeiXin(String liveTitle,String webUrl){\n  String msgTitle=context.getString(R.string.app_name);\n  String msgText=liveTitle + context.getString(R.string.share_str_weixin_title);\n  shareWeiXin(webUrl,msgTitle,msgText);\n}\n", "nl": "Share Weixin", "id": "35731"}
{"code": "@Override public Filter createLogicFilter(List<Filter> filterList){\n  return null;\n}\n", "nl": "Creates the logic filter.", "id": "36274"}
{"code": "public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {\n  return toInputStream(input,Charsets.toCharset(encoding));\n}\n", "nl": "Convert the specified CharSequence to an input stream, encoded as bytes using the specified character encoding. <p/> Character encoding names can be found at <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.", "id": "1887"}
{"code": "public static QueryParser create(QueryBuilder queryBuilder){\n  return new QueryParser(queryBuilder);\n}\n", "nl": "Create a query parser with the specified graph", "id": "2813"}
{"code": "public boolean isAcontains(BitSet H){\n  BitSet M=((BitSet)A.clone());\n  M.and(H);\n  return M.cardinality() == H.cardinality();\n}\n", "nl": "does A part contain set H?", "id": "41005"}
{"code": "public void fill(int fromIndex,int toIndex,int val){\n  if (toIndex > _pos) {\n    ensureCapacity(toIndex);\n    _pos=toIndex;\n  }\n  Arrays.fill(_data,fromIndex,toIndex,val);\n}\n", "nl": "Fills a range in the list with the specified value.", "id": "21779"}
{"code": "public PhotosGetCommentsQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of comments to return.", "id": "43324"}
{"code": "public Z Exch(Z a){\n  double t;\n  t=re;\n  re=a.re;\n  a.re=t;\n  t=im;\n  im=a.im;\n  a.im=t;\n  return this;\n}\n", "nl": "Interchanges the real and imaginary parts of two Z's.", "id": "44593"}
{"code": "protected void addPointer(String tag,AXmlNode node){\n  if (!this.nodesWithTag.containsKey(tag))   this.nodesWithTag.put(tag,new ArrayList<AXmlNode>());\n  this.nodesWithTag.get(tag).add(node);\n}\n", "nl": "Adds a pointer to the given <code>node</code> with the key <code>tag</code>. ", "id": "6558"}
{"code": "public boolean filterOut(final SAMRecord first,final SAMRecord second){\n  throw new UnsupportedOperationException(\"Paired *Filter not implemented!\");\n}\n", "nl": "Determines whether a pair of SAMRecord matches this filter", "id": "19687"}
{"code": "public String next(int n){\n  int i=this.myIndex;\n  int j=i + n;\n  if (j >= this.mySource.length()) {\n    throw syntaxError(\"Substring bounds error\");\n  }\n  this.myIndex+=n;\n  return this.mySource.substring(i,j);\n}\n", "nl": "Get the next n characters.", "id": "27237"}
{"code": "public void clear(){\n  oredCriteria.clear();\n  orderByClause=null;\n  distinct=false;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.banned_ips", "id": "45557"}
{"code": "public boolean isRepeatable(){\n  return false;\n}\n", "nl": "Tells that this entity is not repeatable.", "id": "41810"}
{"code": "@Override public void subscribeTags(Set<Long> tagIds){\n  ExecutorService executorService=Executors.newSingleThreadExecutor();\n  executorService.execute(new AsyncTagSubscriptionTask(tagIds));\n}\n", "nl": "Subscribes to the tag value update topic and requests the values once again, in a separate thread.", "id": "22514"}
{"code": "void assignNewToLocal(Stmt stmt,Local left){\n  PurityNode node=cacheNode(new PurityStmtNode(stmt,true));\n  localsRemove(left);\n  localsPut(left,node);\n  nodes.add(node);\n  if (doCheck)   sanityCheck();\n}\n", "nl": "Allocation: left = new or left = new[?].", "id": "31734"}
{"code": "private boolean maintainSelectorMinimizationBugExperimentEnabled(){\n  return (model != null && model.isExperimentEnabled(MAINTAIN_SELECTOR_MINIMIZATION_BUG));\n}\n", "nl": "Returns true if experiment maintain_selector_minimization_bug is enabled; false otherwise.", "id": "620"}
{"code": "private SoftReference<DoubleRef<Key,Value>> reference(Key key,Value value){\n  return new SoftReference<DoubleRef<Key,Value>>(new DoubleRef<Key,Value>(key,value));\n}\n", "nl": "Create a soft double reference to the object", "id": "31199"}
{"code": "private void loadMusic(){\n  getSupportLoaderManager().initLoader(MUSIC_LOADER_ID,null,this);\n}\n", "nl": "Load music.", "id": "41466"}
{"code": "@Override public boolean contains(short item){\n  for (int i=0; i < fLength; i++) {\n    if (fArray[i] == item) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks if the <code>unsigned short</code> <code>item</code> is a member of this list.", "id": "10281"}
{"code": "public static byte[] toByteArray(InputStream input) throws IOException {\n  ByteArrayOutputStream output=new ByteArrayOutputStream();\n  copy(input,output);\n  return output.toByteArray();\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a <code>byte[]</code>. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>.", "id": "13661"}
{"code": "@Override public Tab createNewTab(LoadUrlParams loadUrlParams,TabModel.TabLaunchType type,Tab parent){\n  return createNewTab(loadUrlParams,type,parent,null);\n}\n", "nl": "Creates a new tab and posts to UI.", "id": "45484"}
{"code": "protected final Object writeReplace(){\n  return this;\n}\n", "nl": "Returns this object.  This method prevents a subclass from declaring a <code>writeReplace</code> method with an alternate implementation.", "id": "14730"}
{"code": "private List<String> convertByteArrayListToStringValueList(List<byte[]> dictionaryByteArrayList){\n  List<String> valueList=new ArrayList<>(dictionaryByteArrayList.size());\n  for (  byte[] value : dictionaryByteArrayList) {\n    valueList.add(new String(value,Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));\n  }\n  return valueList;\n}\n", "nl": "This method will convert list of byte array to list of string", "id": "12454"}
{"code": "@Override public String asFieldName(){\n  throw new ClassCastException();\n}\n", "nl": "This method should never be called. Throws a ClassCastException.", "id": "23049"}
{"code": "public java.lang.Boolean isEscaped(){\n  return escaped;\n}\n", "nl": "Gets the value of the escaped property.", "id": "7729"}
{"code": "public boolean hasProcessingHint(ProcessingHint hint){\n  return this.processingHints.contains(hint);\n}\n", "nl": "Indicates whether the given processing hint exists.", "id": "35865"}
{"code": "public void prepareTransition(View viewToShow){\n  assert mViewToHide == null && mViewToShow == null;\n  assert getChildCount() <= 2;\n  if (hasChildView()) {\n    mViewToHide=getChildAt(CONTENT_INDEX);\n  }\n  mViewToShow=viewToShow;\n  assert mViewToHide != null || mViewToShow != null;\n  assert mViewToHide != mViewToShow;\n}\n", "nl": "Prepares the animation needed to hide the current View and show the new one.", "id": "37108"}
{"code": "public Math_Vector mul(Math_Vector other){\n  this.x*=other.x;\n  this.y*=other.y;\n  return this;\n}\n", "nl": "mul the Math_Vector using scalar", "id": "18214"}
{"code": "public char next(){\n  return pos < in.length() ? in.charAt(pos++) : '\\0';\n}\n", "nl": "Returns the next available character, or the null character '\\0' if all input has been exhausted. The return value of this method is ambiguous for JSON strings that contain the character '\\0'.", "id": "54587"}
{"code": "public void remove(int childRow){\n  int parentRow=m_childToParent.getInt(childRow);\n  m_childToParent.setInt(-1,childRow);\n  m_parentToChild.remove(parentRow);\n}\n", "nl": "Remove a mapping between the given managed row and the corresponding parent row.", "id": "34143"}
{"code": "@Override public synchronized void write(int b){\n  int inBufferPos=count - filledBufferSum;\n  if (inBufferPos == currentBuffer.length) {\n    needNewBuffer(count + 1);\n    inBufferPos=0;\n  }\n  currentBuffer[inBufferPos]=(byte)b;\n  count++;\n}\n", "nl": "Write a byte to byte array.", "id": "13160"}
{"code": "synchronized public boolean unexport(Remote obj){\n  _unexport(obj);\n  _identityExportObjTable.remove(new WeakKey(obj));\n  return true;\n}\n", "nl": "Removes the remote object, obj, from the runtime of underlying transport protocol. If successful, the object can no longer accept incoming RMI calls. If the force parameter is true, the object is forcibly unexported even if there are pending calls to the remote object or the remote object still has calls in progress.  If the force parameter is false, the object is only unexported if there are no pending or in progress calls to the object.", "id": "16277"}
{"code": "protected MessagesRemoveChatUserQuery userId(String value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "ID of the user to be removed from the chat.", "id": "6193"}
{"code": "public boolean wantTag(Tag t){\n  return (t instanceof LineNumberTag) || (t instanceof SourceLnPosTag);\n}\n", "nl": "Decide whether this tag should be aggregated by this aggregator.", "id": "28045"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Petrification_END_A(String value0){\n  return new SM_SYSTEM_MESSAGE(1201143,value0);\n}\n", "nl": "%0 recovered from the petrified state.", "id": "44173"}
{"code": "public void visitPhpMethod(Method method){\n  final PhpLanguageLevel phpVersion=PhpProjectConfigurationFacade.getInstance(holder.getProject()).getLanguageLevel();\n  if (phpVersion.hasFeature(PhpLanguageFeature.SCALAR_TYPE_HINTS)) {\n    return;\n  }\n  this.checkParameters(method.getParameters(),method);\n}\n", "nl": "TODO: checkReferenceReturnedByCallable - ternary operator, argument usages ?", "id": "57224"}
{"code": "public static String bind(String key,Object[] args){\n  try {\n    return MessageFormat.format(bind(key),args);\n  }\n catch (  MissingResourceException e) {\n    return key;\n  }\ncatch (  NullPointerException e) {\n    return \"!\" + key + \"!\";\n  }\n}\n", "nl": "Gets a string from the resource bundle and binds it with the given arguments. If the key is  not found, return the key.", "id": "55319"}
{"code": "public synchronized void saveCustomPropertiesTo(File file){\n  if (file == null)   throw new NullPointerException(\"File cannot be null\");\n  if (file.isDirectory())   throw new IllegalArgumentException(\"Not a valid file: \" + file);\n  Properties prop=getCustomProperties(false);\n  if (prop != null && !prop.isEmpty())   storeProperties(prop,file);\n}\n", "nl": "Saves persistent custom properties to a file.", "id": "12925"}
{"code": "public void add(int dimension,float value){\n  if (this.map.containsKey(dimension))   this.map.put(dimension,this.map.get(dimension) + value);\n else   this.map.put(dimension,value);\n}\n", "nl": "Add a given reward value on a specified dimension.", "id": "4982"}
{"code": "public boolean hasActiveBody(){\n  return activeBody != null;\n}\n", "nl": "Returns true if this method has an active body.", "id": "42768"}
{"code": "private void captionPut(int value,String text){\n  captionMap.put(new Integer(value),text);\n}\n", "nl": "Caption put. Save a mouse caption (string) corresponding to a character value.  Do not include a character number in the caption; that is added by captionGet().", "id": "47163"}
{"code": "public int hashCode(){\n  return (int)(DelegationAbsoluteTime.class.hashCode() + minStart + maxStart+ minStop+ maxStop);\n}\n", "nl": "Returns a hash code value for this object.", "id": "5512"}
{"code": "private void updateMainPanel(){\n  if (myDumbService.isDumb()) {\n    myProgressIcon.resume();\n    ((CardLayout)myMainPanel.getLayout()).show(myMainPanel,PROGRESS);\n  }\n else {\n    myProgressIcon.suspend();\n    ((CardLayout)myMainPanel.getLayout()).show(myMainPanel,myShowError ? ERROR : PREVIEW);\n  }\n}\n", "nl": "Chooses the correct panel to display between the progress panel, the error panel or the preview panel", "id": "4127"}
{"code": "public static void computeAddresses(PhyloTree tree,Map<Integer,String> id2address,Map<String,Integer> address2id){\n  Node root=tree.getRoot();\n  if (root != null)   buildId2AddressRec(root,\"\",id2address,address2id);\n}\n", "nl": "compute node addresses used to compute LCA", "id": "42195"}
{"code": "private static String convertRelevance(int relevance){\n  StringBuilder sb=new StringBuilder();\n  while (relevance > 0) {\n    sb.insert(0,REVERSE_CHAR_MAP[relevance % 10]);\n    relevance=relevance / 10;\n  }\n  return sb.toString();\n}\n", "nl": "Converts the relevance to a sort text. Uses a reverse character map to convert digits to text.", "id": "4621"}
{"code": "@Override protected void merge(FlowSet<N> in1,FlowSet<N> in2,FlowSet<N> out){\n  in1.intersection(in2,out);\n}\n", "nl": "All paths == Intersection.", "id": "7485"}
{"code": "public AccountLookupContactsQuery fields(UserField... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields", "id": "52060"}
{"code": "public void java_lang_Class_getDeclaringClass(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  helper.assignObjectTo(returnVar,Environment.v().getClassObject());\n}\n", "nl": "If the class or interface represented by this Class object is a member of another class, returns the Class object representing the class in which it was declared. This method returns null if this class or interface is not a member of any other class. If this Class object represents an array class, a primitive type, or void,then this method returns null. Returns: the declaring class for this class public native java.lang.Class getDeclaringClass();", "id": "42809"}
{"code": "public static boolean dataValueIsZeroAndInsignificant(String value,DataElement dataElement){\n  AggregationType aggregationType=dataElement.getAggregationType();\n  return dataElement.getValueType().isNumeric() && MathUtils.isZero(value) && !dataElement.isZeroIsSignificant()&& !(aggregationType == AggregationType.AVERAGE_SUM_ORG_UNIT || aggregationType == AggregationType.AVERAGE);\n}\n", "nl": "Indicates whether the given value is zero and not zero significant according to its data element.", "id": "7010"}
{"code": "private boolean peekRead(int expected) throws CompileException, IOException {\n  if (this.peek() == expected) {\n    if (this.nextChar != -1)     this.sb.append((char)this.nextChar);\n    this.nextChar=this.nextButOneChar;\n    this.nextButOneChar=-1;\n    return true;\n  }\n  return false;\n}\n", "nl": "Consumes the next character iff it equals the <var>expected</var> character.", "id": "23557"}
{"code": "public GroupsCreateQuery type(GroupsCreateType value){\n  return unsafeParam(\"type\",value);\n}\n", "nl": "Community type", "id": "17921"}
{"code": "public void assertion(AssertionError e){\n  fail();\n  logEntries.add(new AssertionFailedEntry(e));\n}\n", "nl": "Marks the test as failed and logs a failed hard assertion.", "id": "6545"}
{"code": "public String toString(){\n  return \"null\";\n}\n", "nl": "Get the \"null\" string value.", "id": "984"}
{"code": "public static String parseCharset(Map<String,String> headers){\n  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);\n}\n", "nl": "Returns the charset specified in the Content-Type of this header, or the HTTP default (ISO-8859-1) if none can be found.", "id": "39423"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FORCE_HE_IS_ALREADY_MEMBER_OF_OTHER_FORCE(String value0){\n  return new SM_SYSTEM_MESSAGE(1301013,value0);\n}\n", "nl": "%0 is a member of another alliance.", "id": "7380"}
{"code": "protected boolean matchesAnyOf(TokenKind... kinds){\n  TokenKind current=currentToken();\n  for (  TokenKind kind : kinds) {\n    if (kind == current) {\n      builder.advanceLexer();\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Consumes the current token iff it matches one of the expected types. Otherwise, returns false", "id": "52426"}
{"code": "public static long readStartFooterSection(IInputReaderOutputWriter reader) throws IOException {\n  reader.seek(reader.length() - 16);\n  return reader.readLong();\n}\n", "nl": "reads the start of the footer section", "id": "52454"}
{"code": "public static boolean expressionHasErrors(String expression){\n  final JEP parser=getJep();\n  parser.parseExpression(expression);\n  return parser.hasError();\n}\n", "nl": "Investigates whether the expression is valid or has errors.", "id": "29886"}
{"code": "protected void notifyClickListenersAboutClick(int item){\n  for (  OnWheelClickedListener listener : clickingListeners) {\n    listener.onItemClicked(this,item);\n  }\n}\n", "nl": "Notifies listeners about clicking", "id": "47769"}
{"code": "@Override public boolean markSupported(){\n  return false;\n}\n", "nl": "Tell whether this stream supports the mark() operation.", "id": "30720"}
{"code": "@Override public boolean isDataPresent(){\n  return true;\n}\n", "nl": "Checks if is data present.", "id": "38195"}
{"code": "public static boolean isLetter(char c){\n  return Character.isLetter(c);\n}\n", "nl": "Returns true if character c is an English letter (A .. Z, a..z). NOTE: Need i18n version to support European characters. This could be tricky due to different character sets and orderings for various languages and platforms.", "id": "45746"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "27519"}
{"code": "@Override public void redo(Transaction tx){\n}\n", "nl": "Does nothing, because a checkpoint record contains no redo information.", "id": "24689"}
{"code": "public void stop(){\n  for (  final StoppableTask task : backgroundTasks) {\n    task.stop();\n  }\n}\n", "nl": "Stops any running tasks (threads).", "id": "6882"}
{"code": "public AuthConfirmQuery password(String value){\n  return unsafeParam(\"password\",value);\n}\n", "nl": "Set password", "id": "32235"}
{"code": "public PhotosEditQuery foursquareId(String value){\n  return unsafeParam(\"foursquare_id\",value);\n}\n", "nl": "Set foursquare id", "id": "16462"}
{"code": "@Override public long limit(){\n  return limit;\n}\n", "nl": "length of array", "id": "47015"}
{"code": "public static <T extends RealFieldElement<T>>T dotProduct(final FieldVector3D<T> v1,final FieldVector3D<T> v2){\n  return v1.dotProduct(v2);\n}\n", "nl": "Compute the dot-product of two vectors.", "id": "8148"}
{"code": "public final void openFallbackInputStream() throws DataFallbackException {\n  if (inputBuf == null) {\n    if (LOG.isDebugEnabled())     LOG.debug(\"openFallbackInputStream() : Opening the reader for the \" + dataFile.getName() + \"file\");\n    try {\n      setInput(new BufferedReader(new FileReader(dataFile)));\n    }\n catch (    IOException e) {\n      throw new DataFallbackException(e.getMessage());\n    }\n  }\n}\n", "nl": "It opens a file input stream", "id": "17868"}
{"code": "public void nofityChange(){\n  if (observer != null) {\n    observer.onChange();\n  }\n}\n", "nl": "Notifies an observer a change has occurred.", "id": "23763"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SwitchHostile_A_TO_B(String skillcaster,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200915,skillcaster,skilltarget,skillname);\n}\n", "nl": "[%SkillCaster] exchanged his enmity toward [%SkillTarget] with his spirit's by using [%SkillName].", "id": "31982"}
{"code": "public boolean isAborted(){\n  return state == ABORTED || state == ABORTING;\n}\n", "nl": "Check if we're aborting or aborted", "id": "6487"}
{"code": "public static final void sort(double[] a,int[] b,int length){\n  mergesort(a,b,0,length - 1);\n}\n", "nl": "Sort two arrays simultaneously, using the sort order of the values in the first array to determine the sort order for both arrays.", "id": "26203"}
{"code": "public long estimateMaxCapacity(ResourceQuota defaultQuota){\n  return calculateBrokerMaxCapacity(this.systemResourceUsage,defaultQuota);\n}\n", "nl": "Estimate the maximum number of namespace bundles ths ResourceUnit is able to handle with all resource.", "id": "52765"}
{"code": "@Override public boolean accept(File file){\n  return file.canRead();\n}\n", "nl": "Checks to see if the file can be read.", "id": "11491"}
{"code": "private synchronized void addLockObject(AbsoluteTableIdentifier absoluteTableIdentifier){\n  if (null == tableLockMap.get(absoluteTableIdentifier)) {\n    tableLockMap.put(absoluteTableIdentifier,new Object());\n  }\n}\n", "nl": "Below code is to add table lock map which will be used to add", "id": "51235"}
{"code": "public static <T extends RealFieldElement<T>>T distanceSq(final FieldVector3D<T> v1,final Vector3D v2){\n  return v1.distanceSq(v2);\n}\n", "nl": "Compute the square of the distance between two vectors. <p>Calling this method is equivalent to calling: <code>v1.subtract(v2).getNormSq()</code> except that no intermediate vector is built</p>", "id": "55980"}
{"code": "@Override public Expression createExpression(FunctionName functionName){\n  if (functionName == null) {\n    return null;\n  }\n  List<Expression> parameters=null;\n  Literal fallback=null;\n  Function function=functionFactory.function(functionName.getFunctionName(),parameters,fallback);\n  return function;\n}\n", "nl": "Creates the expression.", "id": "40540"}
{"code": "public DocsAddQuery add(UserActor actor,int ownerId,int docId){\n  return new DocsAddQuery(getClient(),actor,ownerId,docId);\n}\n", "nl": "Copies a document to a user's or community's document list.", "id": "3031"}
{"code": "public boolean removeChildEdge(int edge){\n  throw new UnsupportedOperationException(\"Changes to tree structure not allowed for spanning trees.\");\n}\n", "nl": "Unsupported operation. Spanning trees should not be edited.", "id": "5205"}
{"code": "private static boolean findActivity(List<ResolveInfo> apps,ComponentName component){\n  final String className=component.getClassName();\n  for (  ResolveInfo info : apps) {\n    final ActivityInfo activityInfo=info.activityInfo;\n    if (activityInfo.name.equals(className)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Returns whether <em>apps</em> contains <em>component</em>.", "id": "53171"}
{"code": "public static boolean hasJellyBeanMr2(){\n  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2;\n}\n", "nl": ">= 4.3 18", "id": "57389"}
{"code": "public SimpleStringProperty executionInfoProperty(){\n  return this.executionInfoProperty;\n}\n", "nl": "The executionInfo property.", "id": "3925"}
{"code": "public boolean isCurrentSet(){\n  return currentTaxonIterator != null && currentTaxonId != null;\n}\n", "nl": "is the current object set?", "id": "24952"}
{"code": "public PollsAddVoteQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "ID of the user or community that owns the poll.  Use a negative value to designate a community ID.", "id": "28906"}
{"code": "protected void registerFilters(){\n  register(BardLoggingFilter.class,1);\n  register(ResponseCorsFilter.class,2);\n  register(RateLimitFilter.class,3);\n  register(QueryParameterNormalizationFilter.class,4);\n  register(HealthCheckFilter.class,5);\n}\n", "nl": "Register the built-in filters.", "id": "14566"}
{"code": "public String geom_verify_name(){\n  return soot.PhaseOptions.getString(options,\"geom-verify-name\");\n}\n", "nl": "Verification file -- Filename for verification file. If you want to compare the precision of the points-to  results with other solvers (e.g. Paddle), you can use the  'verify-file' to specify the list of methods (soot method  signature format) that are reachable by that solver. During the  internal evaluations (see the option geom-eval), we only  consider the methods that are common to both solvers. \t\t\t\t\t\t", "id": "52558"}
{"code": "@After public void tearDown() throws Exception {\n  dictionaryChunksWrapper=null;\n  expectedData=null;\n  dictionaryChuncks=null;\n}\n", "nl": "release resources", "id": "36834"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_PVP_OFF(String value0){\n  return new SM_SYSTEM_MESSAGE(1400293,value0);\n}\n", "nl": "%0 is no longer vulnerable.", "id": "8760"}
{"code": "private static boolean inStringArray(String value,String[] stringArray){\n  for (int i=0; i < stringArray.length; i++) {\n    if (stringArray[i].equals(value)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Returns true if the given string is in the given string array.", "id": "24434"}
{"code": "public final void cancelAll(){\n  for (  ActionPair actionPair : mActions) {\n    if (actionPair.action instanceof Cancelable) {\n      ((Cancelable)actionPair.action).cancel();\n    }\n  }\n}\n", "nl": "Call this method to force actions to cancel. Usually, you may need to call this on Activity destroy to free resources which can lead to memory leak and stop pending transaction or async calls.", "id": "58383"}
{"code": "public void registerToolbar(ViewGroup toolbarContainer,RTToolbar toolbar){\n  mToolbars.put(toolbar.getId(),toolbar);\n  toolbar.setToolbarListener(this);\n  toolbar.setToolbarContainer(toolbarContainer);\n  updateToolbarVisibility();\n}\n", "nl": "Register a toolbar. <p> Only after doing that can it be used in conjunction with a rich text editor. Must be called from the ui thread.", "id": "13070"}
{"code": "public void nextGroup() throws SAException {\n  if (_curGroupValue != null) {\n    if (_alreadyUsedGroupValues == null)     _alreadyUsedGroupValues=new HashSet<Object>();\n    _alreadyUsedGroupValues.add(_curGroupValue);\n    _curGroupValue=null;\n  }\n}\n", "nl": "move to next group-value", "id": "37399"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_TOWER_DEFENCE_REJECT_INVITATION(String value0){\n  return new SM_SYSTEM_MESSAGE(1400948,value0);\n}\n", "nl": "%0 has declined your invitation to the Mini Fortress Battle.", "id": "22510"}
{"code": "public boolean isDistinct(){\n  return distinct;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.teams", "id": "40861"}
{"code": "public static long copyFile(File input,OutputStream output) throws IOException {\n  final FileInputStream fis=new FileInputStream(input);\n  try {\n    return IOUtils.copyLarge(fis,output);\n  }\n  finally {\n    fis.close();\n  }\n}\n", "nl": "Copy bytes from a <code>File</code> to an <code>OutputStream</code>. <p> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>. </p>", "id": "47335"}
{"code": "@Override public Document newDocument(){\n  return new mf.org.apache.xerces.dom.DocumentImpl();\n}\n", "nl": "Non-preferred: use the getDOMImplementation() method instead of this one to get a DOM Level 2 DOMImplementation object and then use DOM Level 2 methods to create a DOM Document object.", "id": "22205"}
{"code": "public boolean next() throws GenericDataSourceException {\n  try {\n    return _rs.next();\n  }\n catch (  SQLException sqle) {\n    throw new GenericDataSourceException(\"SQL Exception while executing the following:\" + _sql,sqle);\n  }\n}\n", "nl": "Test if there more records available", "id": "8115"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_EDIT_GUILD_NAME_SUCCESS(String value0){\n  return new SM_SYSTEM_MESSAGE(1400158,value0);\n}\n", "nl": "The Legion name has been changed to %0.", "id": "10910"}
{"code": "public Builder withLeaseId(long leaseId){\n  checkArgument(leaseId >= 0,\"leaseId should greater than or equal to zero: leaseId=%s\",leaseId);\n  this.leaseId=leaseId;\n  return this;\n}\n", "nl": "Assign a <i>leaseId</i> for a put operation. Zero means no lease.", "id": "20235"}
{"code": "public static Map<String,String> strToMap(String str){\n  return strToMap(str,\"|\",false);\n}\n", "nl": "Creates a Map from an encoded name/value pair string", "id": "57878"}
{"code": "public void clear(){\n  super.clear();\n  location=null;\n}\n", "nl": "erase the block", "id": "7635"}
{"code": "@VisibleForTesting public boolean isAnimating(){\n  return false;\n}\n", "nl": "Returns whether an animation to show/hide the FindToolbar is currently running.", "id": "35122"}
{"code": "@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.activity_main);\n  if (savedInstanceState == null) {\n    Fragment fragment=new MainFragment();\n    getFragmentManager().beginTransaction().replace(R.id.fragmentContainer,fragment).commit();\n  }\n}\n", "nl": "Called when the activity is first created.", "id": "19154"}
{"code": "private CountingThreadPoolExecutor createExecutor(int numThreads){\n  return new CountingThreadPoolExecutor(numThreads,Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());\n}\n", "nl": "Creates a new executor object for spawning worker threads", "id": "45254"}
{"code": "public void clear(){\n  processQueue();\n  map.clear();\n}\n", "nl": "Removes all associations from this map.", "id": "7072"}
{"code": "public void clear(){\n  oredCriteria.clear();\n  orderByClause=null;\n  distinct=false;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.countries", "id": "43425"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "54454"}
{"code": "void register(RTEditTextListener listener,RTMediaFactory<RTImage,RTAudio,RTVideo> mediaFactory){\n  mListener=listener;\n  mMediaFactory=mediaFactory;\n}\n", "nl": "This needs to be called before anything else because we need the media factory.", "id": "9563"}
{"code": "public Builder cacheOnDisc(boolean cacheOnDisc){\n  this.cacheOnDisc=cacheOnDisc;\n  return this;\n}\n", "nl": "Sets whether loaded image will be cached on disc", "id": "42656"}
{"code": "void notifyStop(){\n  if (!m_isQueue) {\nsynchronized (synchTopicNotifyLock) {\n      if (currentMessage == null) {\n        currentMessage=this.topicWakeupObject;\n        synchTopicNotifyLock.notify();\n      }\n    }\n  }\n}\n", "nl": "Called when we stop the consumer to wake up a control thread that might be waiting for a message.", "id": "58608"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_DELETE_CASH_SOCIALACTION_BY_TIMEOUT(String value0){\n  return new SM_SYSTEM_MESSAGE(1390245,value0);\n}\n", "nl": "Usage time for the %0 emote has expired.", "id": "35345"}
{"code": "public static LineString lineString(Collection<Point> points){\n  return lineString(points.toArray(new Point[points.size()]));\n}\n", "nl": "Creates a LineString instance from the specified points", "id": "24605"}
{"code": "@Override public boolean isDataPresent(){\n  return true;\n}\n", "nl": "Checks if is data present.", "id": "39471"}
{"code": "@GET @Signed(selector=\"anil\",domain=\"server.com\") @Produces(\"text/plain\") public String hello(){\n  return \"hello world\";\n}\n", "nl": "Sign a returned message using a private key named \"test._domainKey.samplezone.org\" found in the key store.", "id": "12579"}
{"code": "@VisibleForTesting public void clearPendingInvalidations(Context context){\n  SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(context).edit();\n  editor.putString(DELAYED_ACCOUNT_NAME,null);\n  editor.putStringSet(DELAYED_INVALIDATIONS,null);\n  editor.apply();\n}\n", "nl": "If there are any pending invalidations, they will be cleared.", "id": "57241"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "15978"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARTY_ENEMY_DODGE(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1230220,value0,value1);\n}\n", "nl": "%0 evaded %1's attack.", "id": "28386"}
{"code": "public synchronized long fileCount(){\n  return fileCount;\n}\n", "nl": "Returns the number of files currently being used to store the values in this cache. This may be greater than the max file count if a background deletion is pending.", "id": "20615"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_BLOCK_A_TO_B(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1201100,value0,value1);\n}\n", "nl": "%0 blocked %1's attack.", "id": "12732"}
{"code": "public boolean showGuidelines(){\n  return !(mEdges.width() < 100 || mEdges.height() < 100);\n}\n", "nl": "Indicates whether the crop window is small enough that the guidelines should be shown. Public because this function is also used to determine if the center handle should be focused.", "id": "3423"}
{"code": "public static long calculateDifferentMinute(Date startDate,Date endDate){\n  return calculateDifference(startDate,endDate,DifferenceMode.Minute);\n}\n", "nl": "Calculate different minute long.", "id": "29591"}
{"code": "public void saveCache(String url,byte[] bytes){\n  if (TextUtils.isEmpty(url) || null == bytes || bytes.length == 0) {\n    return;\n  }\n  if (!checkUrl(url)) {\n    return;\n  }\n  mInternalCache.putCache(url,bytes);\n}\n", "nl": "Just save to internalCache", "id": "4581"}
{"code": "public static SM_SYSTEM_MESSAGE STR_BINDSTONE_CAPACITY_LIMITTED_ALARM(int num0){\n  return new SM_SYSTEM_MESSAGE(1390231,num0);\n}\n", "nl": "The registered Kisk can resurrect %num0 times more.", "id": "10029"}
{"code": "private static void printUsage(){\n  System.err.println(\"Syntax:\\nsummaryEvaluator [-summary=summary.txt] [-modelDir=models/]\" + \"[-nMin=#] [-nMax=#] [-dist=#]\" + \"[-s] [-docClass=...] [-compClass=...] [-merge]\");\n  System.err.println(\"nMin=#\\tMin n-gram size.\\nnMax=#\\tMax n-gram size.\\n\" + \"dist=#\\tN-gram window.\\n\" + \"-s\\tFor non-verbose output (silent).\\n\"+ \"-docClass=...\\tA java class identifier to use as Document class. \"+ \"Defaults to jinsect.documentModel.NGramDocument \\n\"+ \"-compClass=...\\tA java class identifier to use as Comparator class. \"+ \"Defaults to jinsect.documentModel.NGramCachedGraphComparator \\n\"+ \"-merge\\tIf indicated then the model files' representation is merged\"+ \" to provide an overall model graph. Then comparison is performed\"+ \" with respect to the overall graph.\"+ \"-jack\\tUse jackknifing in comparison (round robin comparison with leave-one-out)\"+ \"to the model summaries. The resulting score is the mean of the scores.\"+ \"-?\\tShow this screen.\");\n}\n", "nl": "Provides command-line syntax information for the main function.", "id": "36981"}
{"code": "public static NumericEntityEscaper between(final int codepointLow,final int codepointHigh){\n  return new NumericEntityEscaper(codepointLow,codepointHigh,true);\n}\n", "nl": "<p>Constructs a <code>NumericEntityEscaper</code> between the specified values (inclusive). </p>", "id": "27330"}
{"code": "public static boolean isInited(){\n  return inited;\n}\n", "nl": "Is VanillaDB initialized ?", "id": "26478"}
{"code": "public static void destroyInstance(){\n  instance=null;\n}\n", "nl": "Destroy instance.", "id": "15215"}
{"code": "public static String encode(String str) throws RuntimeException {\n  byte[] bytes=str.getBytes();\n  byte[] encoded=encode(bytes);\n  try {\n    return new String(encoded,\"ASCII\");\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new RuntimeException(\"ASCII is not supported!\",e);\n  }\n}\n", "nl": "<p> Encodes a string. </p> <p> Before the string is encoded in Base64, it is converted in a binary sequence using the system default charset. </p>", "id": "49834"}
{"code": "public static int toInteger(Object obj){\n  Integer result=toIntegerObject(obj);\n  return result == null ? 0 : result.intValue();\n}\n", "nl": "Converts an <code>Object</code> to an <code>int</code>. Returns zero if conversion is not possible.", "id": "43223"}
{"code": "public static boolean removeFromCache(String imageUri,DiskCache diskCache){\n  File image=diskCache.get(imageUri);\n  return image != null && image.exists() && image.delete();\n}\n", "nl": "Removed cached image file from disk cache (if image was cached in disk cache before)", "id": "21544"}
{"code": "public static boolean isAllowed(Class<?> typeToCheck,Class<?> attributeType){\n  if (allowedClassTypeMap.isEmpty()) {\n    initialise();\n  }\n  List<Class<?>> list=allowedClassTypeMap.get(attributeType);\n  if (list == null) {\n    return false;\n  }\n  return list.contains(typeToCheck);\n}\n", "nl": "Checks if attribute type is allowed.", "id": "44446"}
{"code": "public Type merge(Type other,Scene cm){\n  if (other instanceof RefType)   return other;\n  throw new RuntimeException(\"illegal type merge: \" + this + \" and \"+ other);\n}\n", "nl": "Returns the least common superclass of this type and other.", "id": "45218"}
{"code": "public void dismissLoadingDialog(){\n  Fragment frag=getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);\n  if (frag != null) {\n    LoadingDialog loading=(LoadingDialog)frag;\n    loading.dismissAllowingStateLoss();\n  }\n}\n", "nl": "Dismiss loading dialog", "id": "50392"}
{"code": "public static List<DockerPortMapping> fromMap(Map<String,List<Map<String,String>>> map){\n  return map.entrySet().stream().map(null).filter(null).collect(Collectors.toList());\n}\n", "nl": "Convert a map generated by the toMap() method back to a DockerPortMapping", "id": "3175"}
{"code": "public boolean enabled(){\n  return soot.PhaseOptions.getBoolean(options,\"enabled\");\n}\n", "nl": "Enabled -- .", "id": "47779"}
{"code": "public boolean isLenient(){\n  return lenient;\n}\n", "nl": "Returns true if this writer has relaxed syntax rules.", "id": "27291"}
{"code": "protected VideoReorderVideosQuery videoId(int value){\n  return unsafeParam(\"video_id\",value);\n}\n", "nl": "ID of the video.", "id": "31210"}
{"code": "public static boolean isInitialized(Context ctx){\n  vitamioPackage=ctx.getPackageName();\n  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + \"lib/\";\n  return true;\n}\n", "nl": "Check if Vitamio is initialized at this device", "id": "19697"}
{"code": "public static void f(String tag,String msg){\n  if (sLevel > LEVEL_FATAL) {\n    return;\n  }\n  Log.wtf(tag,msg);\n}\n", "nl": "Send a FATAL ERROR log message", "id": "1164"}
{"code": "public void requestInclusionStop(){\n  stopInclusionTimer();\n}\n", "nl": "Terminates inclusion or exclusion mode - which-ever is running", "id": "10271"}
{"code": "public FriendsSearchQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname", "id": "23357"}
{"code": "public static Document parseDocument(Reader inputData) throws ParserConfigurationException, SAXException, IOException {\n  return parseDocument(inputData,false);\n}\n", "nl": "DOM-parse the given input data. Namespace-aware but non-validating.", "id": "8253"}
{"code": "public void start(){\n  logger.info(\"Starting computation...\");\n  jssc.start();\n  try {\n    jssc.awaitTermination();\n  }\n catch (  InterruptedException e) {\n    Thread.interrupted();\n  }\n}\n", "nl": "Method to start the computation", "id": "20575"}
{"code": "private static boolean validateNewSize(int level){\n  return !(level < MIN_EXPAND || level > MAX_EXPAND);\n}\n", "nl": "Checks if new player cube is not max", "id": "23121"}
{"code": "@Override public void sldDataUpdated(SLDDataInterface sldData,boolean dataEditedFlag){\n  sldDataUpdated_methodReached=true;\n  sldDataUpdated_sldData=sldData;\n  sldDataUpdated_dataEditedFlag=dataEditedFlag;\n}\n", "nl": "Sld data updated.", "id": "28535"}
{"code": "public int readInt(){\n  return scanner.nextInt();\n}\n", "nl": "Reads the next token from this input stream, parses it as a <tt>int</tt>, and returns the <tt>int</tt>.", "id": "46681"}
{"code": "@Override public void undoAction(UndoInterface undoRedoObject){\n  if ((attributeComboBox != null) && (undoRedoObject != null)) {\n    if (undoRedoObject.getOldValue() instanceof String) {\n      String oldValue=(String)undoRedoObject.getOldValue();\n      attributeComboBox.setSelectedItem(oldValue);\n    }\n  }\n}\n", "nl": "Undo action.", "id": "29535"}
{"code": "public final boolean containsKey(String name){\n  return mMap.containsKey(name);\n}\n", "nl": "Returns true iff a key of the given name exists in the format.", "id": "43650"}
{"code": "@SuppressWarnings(\"rawtypes\") public Value cast(Value obj,Class cls){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Cast the value to the given class.", "id": "32642"}
{"code": "public void addListener(PrefUpdateInterface listener){\n  if (!listenerList.contains(listener)) {\n    listenerList.add(listener);\n    listener.useAntiAliasUpdated(this.prefData.isUseAntiAlias());\n  }\n}\n", "nl": "Adds the listener.", "id": "20470"}
{"code": "public double nextDouble(boolean includeZero,boolean includeOne){\n  double d=0.0;\n  do {\n    d=nextDouble();\n    if (includeOne && nextBoolean())     d+=1.0;\n  }\n while ((d > 1.0) || (!includeZero && d == 0.0));\n  return d;\n}\n", "nl": "Returns a double in the range from 0.0 to 1.0, possibly inclusive of 0.0 and 1.0 themselves.  Thus: <p/> <p><table border=0> <th><td>Expression<td>Interval <tr><td>nextDouble(false, false)<td>(0.0, 1.0) <tr><td>nextDouble(true, false)<td>[0.0, 1.0) <tr><td>nextDouble(false, true)<td>(0.0, 1.0] <tr><td>nextDouble(true, true)<td>[0.0, 1.0] </table> <p/> <p>This version preserves all possible random values in the double range.", "id": "48920"}
{"code": "private void deleteConcept(String id){\n  try {\n    getGraph().getConcept(id).delete();\n  }\n catch (  ConceptException e) {\n    throw new RuntimeException(e);\n  }\n}\n", "nl": "Delete a concept by ID, rethrowing errors as RuntimeExceptions", "id": "34159"}
{"code": "public static int sp2px(Context context,float spValue){\n  return (int)(spValue * getFontDensity(context) + 0.5);\n}\n", "nl": "convert the sp to px depend on the device scaledDensity.", "id": "23897"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "44274"}
{"code": "public AudioAddQuery add(UserActor actor,int audioId,int ownerId){\n  return new AudioAddQuery(getClient(),actor,audioId,ownerId);\n}\n", "nl": "Copies an audio file to a user page or community page.", "id": "14558"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200866,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] is in the defense shield state as it used [%SkillName].", "id": "40668"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200809,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster]'s flight time decreased by %num0 as it used [%SkillName].", "id": "9551"}
{"code": "private String determineLastKnownUrl(){\n  int tabId=determineTabId();\n  String url=mTabModel.getCurrentUrlForDocument(tabId);\n  if (TextUtils.isEmpty(url))   url=determineInitialUrl(tabId);\n  return url;\n}\n", "nl": "Determine the last known URL that this Document was displaying when it was stopped.", "id": "27989"}
{"code": "public PointsToSet reachingObjects(Local l,SootField f){\n  return reachingObjects(f);\n}\n", "nl": "Returns the set of objects pointed to by instance field f of the objects pointed to by l.", "id": "11852"}
{"code": "public static Map<String,Object> returnError(String errorMessage){\n  return returnProblem(ModelService.RESPOND_ERROR,errorMessage,null,null,null);\n}\n", "nl": "A small routine used all over to improve code efficiency, make a result map with the message and the error response code", "id": "1118"}
{"code": "public static void unregister(ProcessEngine processEngine){\n  processEngines.remove(processEngine.getName());\n}\n", "nl": "Unregisters the given process engine.", "id": "11077"}
{"code": "static boolean lessThanUnsigned(long x1,long x2){\n  return (x1 + Long.MIN_VALUE) < (x2 + Long.MIN_VALUE);\n}\n", "nl": "Returns true if x1 is less than x2, when both values are treated as unsigned.", "id": "34312"}
{"code": "public void startHorizontalAnimate(){\n  isPlaying=true;\n  invalidate();\n}\n", "nl": "start loop animate", "id": "1604"}
{"code": "final long fn(long v,long x){\n  return v + x;\n}\n", "nl": "Version of plus for use in retryUpdate", "id": "21524"}
{"code": "public boolean isPinchZoomEnabled(){\n  return mPinchZoomEnabled;\n}\n", "nl": "returns true if pinch-zoom is enabled, false if not", "id": "52006"}
{"code": "public void addSaveLatch(String ticket,CountDownLatch latch){\n  saveLatches.put(ticket,latch);\n}\n", "nl": "Adds a countdown latch for tracking saving a particular ticket.", "id": "53117"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GATHER_OUT_OF_SKILL_POINT(String value0){\n  return new SM_SYSTEM_MESSAGE(1330001,value0);\n}\n", "nl": "Your %0 skill level is not high enough.", "id": "23990"}
{"code": "@Override protected void initData(){\n  videoFilePresenter=new VideoFilePresenter();\n  videoFilePresenter.attachView(this);\n  if (path != null && !TextUtils.isEmpty(path)) {\n    tvFilePath.setText(path);\n    rootFile=new File(path);\n    videoFilePresenter.getVideoData(rootFile);\n  }\n}\n", "nl": "Initialize the Activity data", "id": "44362"}
{"code": "public List<T> toList(){\n  return Arrays.asList(Arrays.copyOf(elements,numElements));\n}\n", "nl": "Returns a unbacked list of elements in this set.", "id": "23108"}
{"code": "public void damageEntity(float x,float y,float damage){\n  for (  TexturedEntity entity : entities) {\n    if (entity instanceof LivingEntity && entity.getBounds().overlaps(new Rectangle(x,y,0,0))) {\n      ((LivingEntity)entity).damage(damage);\n      break;\n    }\n  }\n}\n", "nl": "Damages a single entity at the given position", "id": "48518"}
{"code": "public boolean isDistinct(){\n  return distinct;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.hints", "id": "58753"}
{"code": "public static boolean isGoRight(KeyEvent event){\n  return isActionDown(event) && (event.getKeyCode() == KeyEvent.KEYCODE_DPAD_RIGHT || (!event.isNumLockOn() && event.getKeyCode() == KeyEvent.KEYCODE_NUMPAD_6));\n}\n", "nl": "Checks whether the given event is any of DPAD right or NUMPAD right.", "id": "27956"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CANNOT_QUIT_DURING_BATTLE(String value0){\n  return new SM_SYSTEM_MESSAGE(1310013,value0);\n}\n", "nl": "You cannot quit during a battle. Canceling in %0 seconds.", "id": "45131"}
{"code": "public void clear(){\n  oredCriteria.clear();\n  orderByClause=null;\n  distinct=false;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.files", "id": "35517"}
{"code": "public static boolean hasAncestor(Node node,String ancestorName){\n  Node p=node;\n  while ((p=p.getParentNode()) != null) {\n    if (p.getNodeName().equals(ancestorName))     return true;\n  }\n  return false;\n}\n", "nl": "Verify if <code>node</code> has an ancestor with name <code>ancestorName</code>", "id": "13736"}
{"code": "@Override public String toString(){\n  return \"Flavor{\" + \"mName='\" + mName + '\\''+ \", mStyleResource=\"+ mStyleResource+ \", mDialogStyleResource=\"+ mDialogStyleResource+ \", mIsDayNight=\"+ mIsDayNight+ '}';\n}\n", "nl": "Base Methods", "id": "50833"}
{"code": "public void assertTextPresentIgnoreCase(String expected,String actual){\n  assertTextPresent(expected.toLowerCase(),actual.toLowerCase());\n}\n", "nl": "Asserts if the provided text is part of some text, ignoring any uppercase characters", "id": "57726"}
{"code": "public void addBottomResourceBundle(ResourceBundle topResourceBundle){\n  this.rbmwStack.addToBottom(new InternalRbmWrapper(topResourceBundle));\n}\n", "nl": "Puts ResourceBundle on the BOTTOM of the stack (bottom meaning will be overriden by higher layers on the stack, ie everything else already there)", "id": "5582"}
{"code": "public GroupsEditQuery photos(GroupsEditPhotos value){\n  return unsafeParam(\"photos\",value);\n}\n", "nl": "Photos settings.", "id": "37639"}
{"code": "public static SM_SYSTEM_MESSAGE STR_EXCHANGE_CANT_ASK_WHEN_HE_IS_ASKED_QUESTION(String value0){\n  return new SM_SYSTEM_MESSAGE(1300356,value0);\n}\n", "nl": "%0 cannot trade at the moment.", "id": "22557"}
{"code": "private void initPrimaryOnlyComponents() throws SpaceComponentsInitializeException {\n  for (Iterator<ISpaceComponentsHandler> iterator=_componentsHandlers.iterator(); iterator.hasNext(); ) {\n    ISpaceComponentsHandler handler=iterator.next();\n    handler.initComponents(true);\n  }\n}\n", "nl": "Initialize primary-only space components", "id": "10319"}
{"code": "public static void d(String msg){\n  if (LOG_ENABLE) {\n    Log.d(TAG,buildMsg(msg));\n  }\n}\n", "nl": "debug log", "id": "34971"}
{"code": "public RequestHandle delete(Context context,String url,Header[] headers,ResponseHandlerInterface responseHandler){\n  final HttpDelete delete=new HttpDelete(url);\n  if (headers != null)   delete.setHeaders(headers);\n  return sendRequest(httpClient,httpContext,delete,null,responseHandler,context);\n}\n", "nl": "Perform a HTTP DELETE request.", "id": "32781"}
{"code": "public Fraction negate(){\n  if (numerator == Integer.MIN_VALUE) {\n    throw MathRuntimeException.createArithmeticException(OVERFLOW_MESSAGE,numerator,denominator);\n  }\n  return new Fraction(-numerator,denominator);\n}\n", "nl": "Return the additive inverse of this fraction.", "id": "16793"}
{"code": "public Bundler putParcelableArrayList(String key,ArrayList<? extends Parcelable> value){\n  bundle.putParcelableArrayList(key,value);\n  return this;\n}\n", "nl": "Inserts a List of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.", "id": "8381"}
{"code": "@Override public void revertToDefaultValue(){\n  if (wktPanel != null) {\n    wktPanel.revertToDefaultValue();\n  }\n}\n", "nl": "Revert to default value.", "id": "58647"}
{"code": "public void hideAllBudges(){\n  for (  RelativeLayout badge : badgeList) {\n    if (badge.getVisibility() == VISIBLE)     BadgeHelper.hideBadge(badge);\n  }\n  badgeSaveInstanceHashMap.clear();\n}\n", "nl": "Hiding all available badges", "id": "27732"}
{"code": "public static final double poundsToKilograms(double pound){\n  return pound * POUND_TO_KILOGRAM;\n}\n", "nl": "Converts pound-mass to kilograms.", "id": "18709"}
{"code": "public ResourceLoader add(Class<? extends Resource> resourceClass){\n  resources.add(resourceClass);\n  return this;\n}\n", "nl": "Add url mapping to resource. The view p is resourceKey", "id": "57912"}
{"code": "public final boolean canGetLong(String field){\n  Column col=getColumn(field);\n  return (col == null ? false : col.canGetLong());\n}\n", "nl": "Check if the given data field can return primitive <code>long</code> values.", "id": "52855"}
{"code": "@Override public String toString(){\n  String json=gson.toJson(this);\n  log.debug(json);\n  return json;\n}\n", "nl": "JSON representation of a AbstractEsTag.", "id": "47151"}
{"code": "public static synchronized ExplorerSupport sharedInstance(){\n  if (sharedInstance == null)   sharedInstance=new ExplorerSupport();\n  return sharedInstance;\n}\n", "nl": "Returns singleton instance of ExplorerSupport.", "id": "20412"}
{"code": "public boolean containsKey(String key){\n  return parameters.containsKey(key);\n}\n", "nl": "Returns true if this Context contains a mapping for key. Otherwise, returns false.", "id": "21948"}
{"code": "public boolean isPendingOMADownload(long downloadId){\n  return mPendingOMADownloads.get(downloadId) != null;\n}\n", "nl": "Checks if an OMA download is currently pending.", "id": "14139"}
{"code": "public void addSequence(String name,String text,String toolTip,String unalignedPrefix,int leadingGaps,String block,int trailingGaps,String unalignedSuffix){\n  lanes.add(new Lane(this,name,text,toolTip,unalignedPrefix,leadingGaps,block,trailingGaps,unalignedSuffix));\n}\n", "nl": "adds a sequence to the alignment", "id": "47339"}
{"code": "public void initialize(Configuration conf,InputSplit split,ImageTransform imageTransform) throws IOException, InterruptedException {\n  this.imageLoader=null;\n  this.imageTransform=imageTransform;\n  initialize(conf,split);\n}\n", "nl": "Called once at initialization.", "id": "35573"}
{"code": "public int timePassed(){\n  return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);\n}\n", "nl": "Returns the time elapsed since the beginning of the scrolling.", "id": "32562"}
{"code": "public static AirMap init(Context context,String authToken,boolean pinCertificates){\n  ourInstance=new AirMap(context,authToken,pinCertificates);\n  airMapTrafficService=new TrafficService(context);\n  airMapMapMappingService=new MappingService();\n  return ourInstance;\n}\n", "nl": "Initializes the SDK. This must be called before any requests can be made The API key to be used with the requests must be provided in the airmap.config.json file in your /assets directory.", "id": "16922"}
{"code": "public long optLong(int index,long defaultValue){\n  try {\n    return this.getLong(index);\n  }\n catch (  Exception e) {\n    return defaultValue;\n  }\n}\n", "nl": "Get the optional long value associated with an index. The defaultValue is returned if there is no value for the index, or if the value is not a number and cannot be converted to a number.", "id": "7056"}
{"code": "public void fireIterationStartedEvent(final IterationEvent e){\n  for (  IterationListener l : listeners) {\n    l.iterationStarted(e);\n  }\n}\n", "nl": "Informs all registered listeners that a new iteration (in the main iteration loop) has been started.", "id": "52854"}
{"code": "public boolean isGettingFull(){\n  return slotPosition(getNumRecords() + 2) >= Buffer.BUFFER_SIZE;\n}\n", "nl": "Returns true if the block is going to be full after insertion.", "id": "51129"}
{"code": "public void configureForSyncPromo(boolean isExpanded){\n  mDeviceIcon.setVisibility(View.VISIBLE);\n  mDeviceIcon.setImageResource(R.drawable.recent_laptop);\n  mDeviceLabel.setText(R.string.ntp_recent_tabs_sync_promo_title);\n  setTimeLabelVisibility(View.GONE);\n  configureExpandedCollapsed(isExpanded);\n}\n", "nl": "Configures the view for the sync promo.", "id": "7500"}
{"code": "public boolean isDisplayed(final List<WebElement> elements,int timeout){\n  return isConditionMet(visibilityOfAllElements(elements),timeout);\n}\n", "nl": "Checks if all specified WebElements are displayed within specified timeout.", "id": "25091"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Summon_A_TO_B(String skillcaster,String value0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201033,skillcaster,value0,skillname);\n}\n", "nl": "[%SkillCaster] summoned %0 by using [%SkillName].", "id": "2012"}
{"code": "@Override public boolean isEnabled(){\n  if (ttfPanel != null) {\n    return ttfPanel.isEnabled();\n  }\n  return false;\n}\n", "nl": "Checks if is enabled.", "id": "11900"}
{"code": "public double expectedWeightedValue(){\n  return this.weightedProduct;\n}\n", "nl": "Expected value for the testArray defined in UnivariateStatisticAbstractTest", "id": "32694"}
{"code": "public static int locToBlock(double loc){\n  return NumberConversions.floor(loc);\n}\n", "nl": "Safely converts a double (location coordinate) to an int (block coordinate)", "id": "52241"}
{"code": "public boolean isIncrementalBuild(){\n  return incrementalBuild;\n}\n", "nl": "This method returns true when in incremental build mode. Other classes can query this flag and change the way in which they use the Scene, depending on the flag's value.", "id": "45980"}
{"code": "public boolean isStaticTimedeadband(){\n  return staticTimedeadband;\n}\n", "nl": "The static timedeadband switch.", "id": "21891"}
{"code": "@Override public int read() throws IOException {\n  if (max >= 0 && pos >= max) {\n    return -1;\n  }\n  int result=in.read();\n  pos++;\n  return result;\n}\n", "nl": "Invokes the delegate's <code>read()</code> method if the current position is less than the limit.", "id": "49993"}
{"code": "public static InputStream toInputStream(String input,Charset encoding){\n  return new ByteArrayInputStream(StringCodingUtils.getBytes(input,Charsets.toCharset(encoding)));\n}\n", "nl": "Convert the specified string to an input stream, encoded as bytes using the specified character encoding.", "id": "49496"}
{"code": "public void show(){\n  if (mNextView == null) {\n    throw new RuntimeException(\"setView must have been called\");\n  }\n  TN tn=mTN;\n  tn.mNextView=mNextView;\n  Message.obtain(mHandler,MSG_ENQUEUE_TOAST,this).sendToTarget();\n}\n", "nl": "Show the view for the specified duration.", "id": "20009"}
{"code": "private void writeLine(String str,int start,int len) throws IOException {\n  if (beginningOfLine && len > 0) {\n    writeIndent();\n    beginningOfLine=false;\n  }\n  writer.write(str,start,len);\n}\n", "nl": "Writes out a block of text that contains no newlines", "id": "32471"}
{"code": "public void addTypeParameter(TypeVariable node){\n  List<TypeVariable> list=(parent == null || state == null) ? getTypeParameterListNoTransform() : getTypeParameterList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the TypeParameter list.", "id": "3345"}
{"code": "public void defaultCase(Object object){\n  throw new RuntimeException(\"Internal error: \" + object + \" unhandled case.\");\n}\n", "nl": "No default case, we implement explicit handling for each situation.", "id": "530"}
{"code": "public boolean start(OutputStream os){\n  if (os == null)   return false;\n  boolean ok=true;\n  closeStream=false;\n  out=os;\n  try {\n    writeString(\"GIF89a\");\n  }\n catch (  IOException e) {\n    ok=false;\n  }\n  return started=ok;\n}\n", "nl": "Initiates GIF file creation on the given stream.  The stream is not closed automatically.", "id": "58689"}
{"code": "public TopicSubscriber createDurableSubscriber(Topic topic,String name) throws JMSException {\n  ensureOpen();\n  throw new JMSException(\"This version of JMS does not support durable subscribers.\");\n}\n", "nl": "Currently not supported.", "id": "1449"}
{"code": "public void calculateSun(){\n  for (int x=0; x < Chunk.CHUNK_SIZE; x++) {\n    calculateSun(x);\n  }\n}\n", "nl": "Calculate the sun on all columns.", "id": "27418"}
{"code": "public ControlLayersOptions build(){\n  ControlLayersOptions options=new ControlLayersOptions();\n  options.position=this.position;\n  options.collapsed=this.collapsed;\n  options.autoZIndex=this.autoZIndex;\n  return options;\n}\n", "nl": "Builds the ControlLayersOptions new instance", "id": "14160"}
{"code": "private static boolean checkLearnIsPossible(Player player,PlayerSkillList playerSkillList,SkillLearnTemplate template){\n  if (playerSkillList.isSkillPresent(template.getSkillId()))   return true;\n  if (player.havePermission(MembershipConfig.STIGMA_AUTOLEARN) && template.isStigma())   return true;\n  if (template.isAutolearn())   return true;\n  return false;\n}\n", "nl": "Check SKILL_AUTOLEARN property Check skill already learned Check skill template auto-learn attribute", "id": "23205"}
{"code": "@Override public int read() throws IOException {\n  int ch=super.read();\n  if (ch != -1) {\n    branch.write(ch);\n  }\n  return ch;\n}\n", "nl": "Reads a single byte from the proxied input stream and writes it to the associated output stream.", "id": "8196"}
{"code": "public Builder closeButton(Boolean closeButton){\n  this.closeButton=closeButton;\n  return this;\n}\n", "nl": "Controls the presence of a close button in the popup.", "id": "11923"}
{"code": "public boolean naive_side_effect(){\n  return soot.PhaseOptions.getBoolean(options,\"naive-side-effect\");\n}\n", "nl": "Naive Side Effect Tester -- Use a naive side effect analysis even if interprocedural  information is available. If Naive Side Effect Tester is set to true, Busy Code Motion  uses the conservative side effect information provided by the  NaiveSideEffectTester class, even if interprocedural information  about side effects is available. The naive side effect analysis  is based solely on the information available locally about a  statement. It assumes, for example, that any method call has the  potential to write and read all instance and static fields in  the program. If Naive Side Effect Tester is set to false and  Soot is in whole program mode, then Busy Code Motion uses the  side effect information provided by the PASideEffectTester  class. PASideEffectTester uses a points-to analysis to determine  which fields and statics may be written or read by a given  statement. If whole program analysis is not performed, naive  side effect information is used regardless of the setting of  Naive Side Effect Tester.", "id": "6047"}
{"code": "public boolean intersects(Vector3f v1,Vector3f v2,Vector3f v3){\n  return Intersection.intersect(this,v1,v2,v3);\n}\n", "nl": "C code ported from http://www.cs.lth.se/home/Tomas_Akenine_Moller/code/tribox3.txt", "id": "15071"}
{"code": "public static void error(@NonNull String tag,Throwable throwable,String message,Object... args){\n  android.util.Log.e(tag,String.format(Locale.ENGLISH,message,args),throwable);\n}\n", "nl": "Logs with error level and logs stack trace for the throwable", "id": "32423"}
{"code": "public boolean intersectWhere(Vector3f v0,Vector3f v1,Vector3f v2,Vector3f loc){\n  return intersects(v0,v1,v2,loc,false,false);\n}\n", "nl": "<code>intersectWhere</code> determines if the Ray intersects a triangle defined by the specified points and if so it stores the point of intersection in the given loc vector.", "id": "44097"}
{"code": "public int max_container_size(){\n  return soot.PhaseOptions.getInt(options,\"max-container-size\");\n}\n", "nl": "Max Container Size -- . Determines the maximum number of Jimple statements for a  container method. If a method has more than this number of  Jimple statements, then no methods will be inlined into it.", "id": "43126"}
{"code": "protected View onCreateDialogView(){\n  if (mDialogLayoutResId == 0) {\n    return null;\n  }\n  LayoutInflater inflater=LayoutInflater.from(mBuilder.getContext());\n  return inflater.inflate(mDialogLayoutResId,null);\n}\n", "nl": "Creates the content view for the dialog (if a custom content view is required). By default, it inflates the dialog layout resource if it is set.", "id": "35448"}
{"code": "public synchronized static RegisteredSnapshotCategories sharedInstance(){\n  if (sharedInstance == null)   sharedInstance=new RegisteredSnapshotCategories();\n  return sharedInstance;\n}\n", "nl": "Returns singleton instance of RegisteredSnapshotCategories.", "id": "23667"}
{"code": "public void requestPreviewFrame(Handler handler,int message){\n  if (camera != null && previewing) {\n    previewCallback.setHandler(handler,message);\n    if (useOneShotPreviewCallback) {\n      camera.setOneShotPreviewCallback(previewCallback);\n    }\n else {\n      camera.setPreviewCallback(previewCallback);\n    }\n  }\n}\n", "nl": "A single preview frame will be returned to the handler supplied. The data will arrive as byte[] in the message.obj field, with width and height encoded as message.arg1 and message.arg2, respectively.", "id": "23516"}
{"code": "public static boolean isConfigured(){\n  return ds != null;\n}\n", "nl": "test is configured", "id": "22582"}
{"code": "@Override public void validate(String content,ValidationContext context) throws InvalidDatatypeValueException {\n}\n", "nl": "Checks that \"content\" string is valid NOTATION value. If invalid a Datatype validation exception is thrown.", "id": "31560"}
{"code": "private static boolean isPathCharacter(char p_char){\n  return (p_char <= '~' && (fgLookupTable[p_char] & MASK_PATH_CHARACTER) != 0);\n}\n", "nl": "Determine whether a char is a path character.", "id": "11760"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_SKIN_CHANGE_TIME_LEFT(String value1,String value0){\n  return new SM_SYSTEM_MESSAGE(1400482,value1,value0);\n}\n", "nl": "%1 remains on the appearance change time of %0.", "id": "41946"}
{"code": "public static long toNewEditRate(BigInteger eu,BigFraction oldUnitsInSec,BigFraction newUnitsInSec){\n  BigFraction editUnits=new BigFraction(eu);\n  return editUnits.divide(oldUnitsInSec).multiply(newUnitsInSec).longValue();\n}\n", "nl": "Converts the given number of edit units in old edit rate to a new edit rate. It can be used to convert audio samples to video frames.", "id": "45373"}
{"code": "@Override public void onTextChanged(CharSequence s,int start,int before,int count){\n  if (iTextWatcher != null) {\n    iTextWatcher.onTextChanged(this.curEditText);\n  }\n}\n", "nl": "This method is called to notify you that, within <code>s</code>, the <code>count</code> characters beginning at <code>start</code> have just replaced old text that had length <code>before</code>. It is an error to attempt to make changes to <code>s</code> from this callback.", "id": "1824"}
{"code": "public void outputOrigin(){\n  System.out.println(\"After decoding:\");\n  for (int i=0; i < disks; i++) {\n    System.out.printf(\"idata:%d:  \",i);\n    System.out.println(Arrays.toString(idata[i]));\n  }\n}\n", "nl": "for testing and debug.", "id": "53019"}
{"code": "public static Bucket createBucket(Experiment experiment,boolean isControl){\n  return new Bucket(bucketNameColors()[internalId++ % bucketNameColors().length] + internalId,experiment.id,1.0d / 3.0d,isControl);\n}\n", "nl": "Creates a simple bucket with only required values set. The allocation percentage is 1/3.", "id": "12979"}
{"code": "protected void writeShort(int value) throws IOException {\n  out.write(value & 0xff);\n  out.write((value >> 8) & 0xff);\n}\n", "nl": "Write 16-bit value to output stream, LSB first", "id": "48199"}
{"code": "@Override public void write(String str,int st,int end) throws IOException {\n  out.write(str,st,end);\n}\n", "nl": "Write the specified characters from a string.", "id": "12999"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_INTERVAL_A_TO_ME(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200658,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster]'s flight time has decreased by %num0 because he used [%SkillName].", "id": "33050"}
{"code": "public boolean haveSuggestions(){\n  return myCurrentLeftMatch != null || myCurrentTopMatch != null || myCurrentRightMatch != null || myCurrentBottomMatch != null;\n}\n", "nl": "Returns true if the handler has any suggestions to offer", "id": "13050"}
{"code": "private boolean journalRebuildRequired(){\n  final int redundantOpCompactThreshold=2000;\n  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();\n}\n", "nl": "We only rebuild the journal when it will halve the size of the journal and eliminate at least 2000 ops.", "id": "15991"}
{"code": "public Builder numBookies(int numBookies){\n  this._numBookies=numBookies;\n  return this;\n}\n", "nl": "How many bookies to run. By default is 3.", "id": "11635"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "13089"}
{"code": "public void addField(FieldConfigBase fieldConfig){\n  this.fieldList.add(fieldConfig);\n}\n", "nl": "Adds the field to the group.", "id": "7303"}
{"code": "void insertingNode(NodeImpl node,boolean replace){\n}\n", "nl": "A method to be called when a node is about to be inserted in the tree.", "id": "28472"}
{"code": "public static void addResource(Offer.Builder o,String name){\n  addResource(o,name,null);\n}\n", "nl": "Minimum to keep required field errors away.", "id": "12245"}
{"code": "public static void initTxMgr(){\n  txMgr=new TransactionMgr();\n}\n", "nl": "Initializes the transaction manager.", "id": "29881"}
{"code": "public static void isNotInstanceOf(String argumentName,Object argumentObject,Class<?> targetClass){\n  notNull(argumentName,argumentObject);\n  if (targetClass.isInstance(argumentObject)) {\n    throw new IllegalArgumentException(argumentName + \" cannot be an instance of \" + targetClass.getName());\n  }\n}\n", "nl": "Tests if an argument is not null and is not an instance of a specified class. <p><code>Assert.isNotInstanceOf(\"foo\", foo, Foo.class);</code></p>", "id": "46271"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_SUMMONED_ENEMY_CRITICAL(String value0,int num2,String value1){\n  return new SM_SYSTEM_MESSAGE(1200005,value0,num2,value1);\n}\n", "nl": "Critical Hit! %0 inflicted %num2 critical damage on %1.", "id": "35104"}
{"code": "public PhotosGetTagsQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "ID of the user or community that owns the photo.", "id": "50284"}
{"code": "public void showError(Drawable errorImageDrawable,String errorTextContent,String errorButtonText,OnClickListener onClickListener,List<Integer> skipIds){\n  switchState(ERROR,errorImageDrawable,errorTextContent,errorButtonText,onClickListener,skipIds);\n}\n", "nl": "Show error view with a button when something goes wrong and prompting the user to try again", "id": "41232"}
{"code": "public void clear(){\n  fDepth=0;\n}\n", "nl": "Clears the stack.", "id": "27795"}
{"code": "public boolean hasNavigtionBar(){\n  return mHasNavigationBar;\n}\n", "nl": "Does this device have a system navigation bar?", "id": "31371"}
{"code": "public int size(){\n  return data.length;\n}\n", "nl": "Data byte size of the wave excluding header size", "id": "45970"}
{"code": "static boolean isSystemWindows(){\n  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;\n}\n", "nl": "Determines if Windows file system is in use.", "id": "58631"}
{"code": "@Override public void cancel(){\n  bobcatWait.withTimeout(Timeouts.BIG).until(WindowActions.clickButton(cancelButton));\n}\n", "nl": "Cancels the dialog.", "id": "35281"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200368,skillname);\n}\n", "nl": "You are continuously recovering HP because of [%SkillName].", "id": "3685"}
{"code": "protected FriendsAddListQuery name(String value){\n  return unsafeParam(\"name\",value);\n}\n", "nl": "Name of the friend list.", "id": "7377"}
{"code": "public StorageGetKeysQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Amount of variable names the info needs to be collected from.", "id": "4097"}
{"code": "public Aggregation withFilter(Filter filter){\n  return new FilteredAggregation(getName(),getFieldName(),getAggregation(),filter);\n}\n", "nl": "Creates a new Filtered Aggregation with the provided filter.", "id": "55136"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuffPhysical_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201252,skilltarget,skillname);\n}\n", "nl": "You removed abnormal physical conditions from [%SkillTarget] by using [%SkillName].", "id": "26195"}
{"code": "public static String toREditRate(BigFraction editRate){\n  return String.format(\"%s/%s\",String.valueOf(editRate.getNumeratorAsLong()),String.valueOf(editRate.getDenominatorAsLong()));\n}\n", "nl": "Converts the edit rate as a fraction instance to the edit rate form such as \"50/1\".", "id": "58672"}
{"code": "private void loadProxySettings(){\n  this.httpProxy=System.getenv(this.httpEnv);\n  this.httpsProxy=System.getenv(this.httpsEnv);\n  this.ftpProxy=System.getenv(this.ftpEnv);\n  this.noProxy=System.getenv(this.noProxyEnv);\n}\n", "nl": "Loads the proxy settings from the system environment variables.", "id": "1695"}
{"code": "@Override public void clear(){\n  nodes.clear();\n  dates=null;\n}\n", "nl": "Clears the current node, by removing the NamedateBundle associated to this Node and the links to all the other nodes from this one.", "id": "11065"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof IViewerWithFindToolBar && ((IViewerWithFindToolBar)getViewer()).isShowFindToolBar();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "14512"}
{"code": "public AemSidekick clickModeIcon(ModeIcon iconName){\n  final String xpath=String.format(ICON_BOTTOM_XPATH,iconName.getIconName());\n  final WebElement iconBottom=driver.findElement(By.xpath(xpath));\n  iconBottom.click();\n  return this;\n}\n", "nl": "Finds the button associated with the selected view mode and clicks it.", "id": "40513"}
{"code": "public void onPageChanged(View currentView){\n  mCurrentView=currentView;\n  requestLayout();\n}\n", "nl": "This method should be called when the ViewPager changes to another page. For best results call this method in the adapter's setPrimary", "id": "17887"}
{"code": "private void printHelp(){\n  HelpFormatter formatter=new HelpFormatter();\n  formatter.setWidth(140);\n  formatter.printHelp(\"QuerierDriver\",cliOptions);\n}\n", "nl": "Prints out the help message", "id": "35895"}
{"code": "public String optString(String key){\n  return optString(key,\"\");\n}\n", "nl": "Get an optional string associated with a key. It returns an empty string if there is no such key. If the value is not a string and is not null, then it is converted to a string.", "id": "4521"}
{"code": "public static long sign(final long x){\n  return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;\n}\n", "nl": "Returns the <a href=\"http://mathworld.wolfram.com/Sign.html\"> sign</a> for long value <code>x</code>. <p> For a long value x, this method returns +1L if x > 0, 0L if x = 0, and -1L if x < 0.</p>", "id": "35059"}
{"code": "public static String keyOfIds(Class<?> clazz){\n  try {\n    return IDS_KEY_CACHE.get(clazz);\n  }\n catch (  ExecutionException e) {\n    throw new KeyException(e);\n  }\n}\n", "nl": "The key of id generator", "id": "16209"}
{"code": "public AccountSaveProfileInfoQuery lastName(String value){\n  return unsafeParam(\"last_name\",value);\n}\n", "nl": "User last name.", "id": "47054"}
{"code": "public static String formatUid(int uid){\n  StringBuilder sb=new StringBuilder();\n  formatUid(sb,uid);\n  return sb.toString();\n}\n", "nl": "Generate a text representation of the vuid, breaking out its individual components -- user, app, isolated, etc.", "id": "2701"}
{"code": "public boolean isAbstract(){\n  return Modifier.isAbstract(this.getModifiers());\n}\n", "nl": "Convenience method returning true if this class is abstract.", "id": "37658"}
{"code": "private void debugPrint(String msg){\n  if (debug) {\n    System.out.println(toString() + \": \" + msg);\n  }\n}\n", "nl": "Outputs the given msg if debugging is enabled for this audio player.", "id": "53098"}
{"code": "public static Experiment createFromJSONString(String json){\n  return new GsonBuilder().create().fromJson(json,Experiment.class);\n}\n", "nl": "Creates an Experiment from a JSON String.", "id": "46815"}
{"code": "void replacingData(NodeImpl node){\n}\n", "nl": "A method to be called when a character data node is about to be replaced", "id": "51428"}
{"code": "public WallEditQuery signed(Boolean value){\n  return unsafeParam(\"signed\",value);\n}\n", "nl": "(Applies only to a post that was created \"as community\" on a community wall.) \"1\" - to add the signature of the user who created the post", "id": "6329"}
{"code": "public Criteria createCriteria(){\n  Criteria criteria=createCriteriaInternal();\n  if (oredCriteria.size() == 0) {\n    oredCriteria.add(criteria);\n  }\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.rules", "id": "51234"}
{"code": "protected boolean isIdColumn(String columnName){\n  return \"_id\".equalsIgnoreCase(columnName) || \"id\".equalsIgnoreCase(columnName);\n}\n", "nl": "Judge the passed in column is an id column or not. The column named id or _id will be considered as id column.", "id": "42116"}
{"code": "private String redisKey(@NotNull String storeName,@NotNull String key){\n  return redisNamespace + \"-\" + storeName+ \"-\"+ key;\n}\n", "nl": "Build the namespace- and store-specific redis key for the given key.", "id": "28905"}
{"code": "public String typeName(){\n  return \"class\";\n}\n", "nl": "Returns a String description of what kind of entry this is.", "id": "8697"}
{"code": "@Override public boolean isFinal(short derivation){\n  return (fFinal & derivation) != 0;\n}\n", "nl": "{final} For complex type definition it is a subset of {extension, restriction}. For simple type definition it is a subset of {extension, list, restriction, union}.", "id": "37249"}
{"code": "public SecureAddAppEventQuery value(Integer value){\n  return unsafeParam(\"value\",value);\n}\n", "nl": "Depends on activity_id: 1 - number, current level number; 2 - number, current user's points amount <p> Any other value is ignored", "id": "4565"}
{"code": "public static <V>boolean addListNotNullValue(List<V> sourceList,V value){\n  return (sourceList != null && value != null) ? sourceList.add(value) : false;\n}\n", "nl": "add not null entry to list", "id": "21838"}
{"code": "public int size(){\n  return size;\n}\n", "nl": "Get the number of elements stored in the map.", "id": "30717"}
{"code": "public void insertEntry(Context context,IEntryHolder entryHolder,boolean origin,boolean shouldReplicate) throws SAException {\n}\n", "nl": "Inserts a new entry to the SA storage.", "id": "33328"}
{"code": "public StatelessHibernateSpaceDataSourceConfigurer sessionFactory(SessionFactory sessionFactory){\n  this.sessionFactory=sessionFactory;\n  return this;\n}\n", "nl": "Injects the Hibernate SessionFactory to be used with this data source.", "id": "36521"}
{"code": "@Override public double value(double z){\n  return evaluateInternal(x,y,z);\n}\n", "nl": "Calculate the function value at the given point.", "id": "56899"}
{"code": "public static StateContext newDefaultInstance(){\n  return newInstance(DefaultTable.factory(),new DefaultMetatableAccessor());\n}\n", "nl": "Returns a new state context with the default table factory and the default (empty) metatable accessor.", "id": "57318"}
{"code": "public void removeItemRelation(String relationName){\n  relations.remove(relationName);\n}\n", "nl": "Removes the relation/item mapping from this ItemContents.", "id": "4815"}
{"code": "public boolean intersects(S2LatLngRect other){\n  return lat.intersects(other.lat) && lng.intersects(other.lng);\n}\n", "nl": "Return true if this rectangle and the given other rectangle have any points in common.", "id": "44460"}
{"code": "public static boolean isExtension(String filename,String extension){\n  if (filename == null) {\n    return false;\n  }\n  if (extension == null || extension.length() == 0) {\n    return indexOfExtension(filename) == -1;\n  }\n  String fileExt=getExtension(filename);\n  return fileExt.equals(extension);\n}\n", "nl": "Checks whether the extension of the filename is that specified. <p> This method obtains the extension as the textual part of the filename after the last dot. There must be no directory separator after the dot. The extension check is case-sensitive on all platforms.", "id": "6912"}
{"code": "public void stop(){\n  run=false;\n}\n", "nl": "Cancels the download. If a callback is associated to the download task, its onCancel() method will be raised instead of the onComplete() one.", "id": "46795"}
{"code": "public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONObject errorResponse){\n}\n", "nl": "Returns when request failed", "id": "18899"}
{"code": "public static double sum(final double[] values,final int begin,final int length) throws MathIllegalArgumentException {\n  return SUM.evaluate(values,begin,length);\n}\n", "nl": "Returns the sum of the entries in the specified portion of the input array, or <code>Double.NaN</code> if the designated subarray is empty. <p> Throws <code>IllegalArgumentException</code> if the array is null.", "id": "5786"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CANT_USE_ITEM(DescriptionId value0){\n  return new SM_SYSTEM_MESSAGE(1300393,value0);\n}\n", "nl": "You cannot use %0.", "id": "54568"}
{"code": "public static String replaceString(String mainString,String oldString,String newString){\n  return StringUtil.replaceString(mainString,oldString,newString);\n}\n", "nl": "Replaces all occurances of oldString in mainString with newString", "id": "48613"}
{"code": "private CredentialsProvider extractCredentials(Properties properties,JSpaceAttributes spaceAttr){\n  CredentialsProvider credentialsProvider=CredentialsProviderHelper.extractCredentials(properties);\n  if (credentialsProvider != null)   CredentialsProviderHelper.clearCredentialsProperties(spaceAttr);\n  return credentialsProvider;\n}\n", "nl": "Extract the embedded user-details used to load this space. Use them to login to the embedded single and clustered proxies. Can be null if no user details were provided. Note: Remove these from the properties object so that they don't get passed around.", "id": "25187"}
{"code": "@Override public void endDocument(Augmentations augs) throws XNIException {\n}\n", "nl": "The end of the document.", "id": "45356"}
{"code": "public void resetCircleColors(){\n  mCircleColors=new ArrayList<>();\n}\n", "nl": "resets the circle-colors array and creates a new one", "id": "30125"}
{"code": "private void navigateToDetails(final Article article,final View articleView){\n  final ActivityOptions options=ActivityOptions.makeSceneTransitionAnimation(this,articleView,articleView.getTransitionName());\n  final Intent intent=new Intent(this,DetailsActivity.class);\n  intent.putExtra(DetailsActivity.EXTRA_ARTICLE,article);\n  startActivity(intent,options.toBundle());\n}\n", "nl": "Navigate to details.", "id": "4461"}
{"code": "@TargetApi(21) public Bundler putSize(String key,Size value){\n  bundle.putSize(key,value);\n  return this;\n}\n", "nl": "Inserts a Size value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.", "id": "37847"}
{"code": "public int traversal(){\n  return soot.PhaseOptions.getInt(options,\"traversal\");\n}\n", "nl": "Maximal traversal -- Make the analysis traverse at most this number of nodes per  query.. Make the analysis traverse at most this number of nodes per  query. This quota is evenly shared between multiple passes (see  next option). \t\t\t\t\t", "id": "36911"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FACTION_OPPOSITE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300520,value0);\n}\n", "nl": "%0's Reputation has become Confrontational.", "id": "10020"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "19778"}
{"code": "public Matrix3f zero(){\n  m00=m01=m02=m10=m11=m12=m20=m21=m22=0.0f;\n  return this;\n}\n", "nl": "Sets all of the values in this matrix to zero.", "id": "54195"}
{"code": "public static void main(String argv[]){\n  System.out.println(getVersion());\n}\n", "nl": "Print the release version to the command line.", "id": "34614"}
{"code": "private static void debugPrintln(String msg){\n  if (DEBUG) {\n    System.err.println(\"XERCES: \" + msg);\n  }\n}\n", "nl": "Prints a message to standard error if debugging is enabled.", "id": "57660"}
{"code": "protected MarketReportCommentQuery commentId(int value){\n  return unsafeParam(\"comment_id\",value);\n}\n", "nl": "Comment id", "id": "52946"}
{"code": "public static <T>Set<T> difference(Collection<? extends T> s1,Collection<? extends T> s2){\n  Set<T> s3=new HashSet<T>(s1);\n  s3.removeAll(s2);\n  return s3;\n}\n", "nl": "Return is s1 \\ s2", "id": "7787"}
{"code": "public VideoDeleteQuery targetId(Integer value){\n  return unsafeParam(\"target_id\",value);\n}\n", "nl": "Set target id", "id": "58803"}
{"code": "@Override public void skippedEntity(String name) throws SAXException {\n  if (saxParser != null) {\n    saxParser.skippedEntity(name);\n  }\n}\n", "nl": "The SAX <code>skippedentity</code> method. Does nothing.", "id": "19814"}
{"code": "public void startSubreport(String subreport){\n  subreports.add(subreport);\n  addLogEntry(new SubreportStartEntry(subreport));\n}\n", "nl": "Starts a new subreport. Stores the name of the subreport on the stack. Creates a timestamped subreport start log entry.", "id": "4227"}
{"code": "public Song next(){\nswitch (playMode) {\ncase LOOP:\ncase LIST:\ncase SINGLE:\n    int newIndex=playingIndex + 1;\n  if (newIndex >= songs.size()) {\n    newIndex=0;\n  }\nplayingIndex=newIndex;\nbreak;\ncase SHUFFLE:\nplayingIndex=randomPlayIndex();\nbreak;\n}\nreturn songs.get(playingIndex);\n}\n", "nl": "Move the playingIndex forward depends on the play mode", "id": "21987"}
{"code": "private Vector2 toWorldCoordinates(Point point){\n  double x=(point.getX() - this.canvas.getWidth() / 2.0) / this.scale;\n  double y=-(point.getY() - this.canvas.getHeight() / 2.0) / this.scale;\n  return new Vector2(x,y);\n}\n", "nl": "Converts from screen space to world space.", "id": "18707"}
{"code": "public void registerAboveContentView(View v,LayoutParams params){\n  if (!mBroadcasting)   mViewAbove=v;\n}\n", "nl": "Register the above content view.", "id": "12111"}
{"code": "private void init(final AttributeSet attrs){\n  Typeface typeface;\n  if (!isInEditMode() && (typeface=CustomFontUtils.getTypeFace(this,attrs)) != null) {\n    super.setTypeface(typeface,typeface.getStyle());\n  }\n}\n", "nl": "Initialize custom font attribute.", "id": "22141"}
{"code": "public void addLanguage(Integer languageId){\n  if (languageId != null) {\n    addLanguage(languageId.toString());\n  }\n else {\n    Logger.warn(this,\"Tried to add languageId Null!\");\n  }\n}\n", "nl": "Adds a language limit to the query", "id": "47917"}
{"code": "public SiteAdminPage activatePage(String title){\n  grid.activatePage(title);\n  waitForPageActivationStatus(title,ActivationStatus.ACTIVATED);\n  return this;\n}\n", "nl": "Activates the page with provided title by selecting it and pressing Activate button on Action Bar.", "id": "55102"}
{"code": "public GenericPrincipal authenticate(String username,String password){\n  GenericPrincipal principal=m_userPrincipal.get(username);\n  if (principal != null) {\n    if (!password.equals(principal.getPassword()))     throw new SpaceSecurityException(\"Wrong password for user name: \" + username);\n  }\n else   throw new SpaceSecurityException(\"Unknown user name: \" + username);\n  return principal;\n}\n", "nl": "Return the Principal associated with the specified username and credentials, if there is one; otherwise throws SecurityException.", "id": "54308"}
{"code": "public boolean useAppsecretProof(){\n  return mUseAppsecretProof;\n}\n", "nl": "Return <code>True</code> if appsecret_proof should be passed with graph api calls, otherwise return <code>False</code>", "id": "37713"}
{"code": "public String removeData(){\n  String olddata=data;\n  data=\"\";\n  return olddata;\n}\n", "nl": "NON-DOM (used by DOMParser: Sets data to empty string. Returns the value the data was set to.", "id": "18661"}
{"code": "public void addDataSources(Set<? extends DataSource> added){\n  super.registerDataSources(added);\n}\n", "nl": "Adds several DataSources to the container at once.", "id": "19528"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_INTERVAL_TO_B(String skilltarget,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201068,skilltarget,num0,skillname);\n}\n", "nl": "[%SkillTarget] received %num0 poisoning damage after you used [%SkillName].", "id": "11268"}
{"code": "public boolean equals(Object o){\n  if (!(o instanceof IntWritable))   return false;\n  IntWritable other=(IntWritable)o;\n  return this.value == other.value;\n}\n", "nl": "Returns true iff <code>o</code> is a IntWritable with the same value.", "id": "28433"}
{"code": "public static boolean isValueLinkCard(String stPassed){\n  if (isEmpty(stPassed))   return defaultEmptyOK;\n  String st=stripCharsInBag(stPassed,creditCardDelimiters);\n  if (st.length() == 16 && (st.startsWith(\"7\") || st.startsWith(\"6\"))) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Check to see if a card number is a valid ValueLink Gift Card", "id": "47841"}
{"code": "public static void main(String[] args){\n  EnvVarDlg dlg=new EnvVarDlg(EnvironmentVariableManager.getInstance());\n  dlg.showDialog();\n}\n", "nl": "The main method.", "id": "29475"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "1983"}
{"code": "public static GapisConnection connect(){\n  GapisProcess gapis;\nsynchronized (myInstanceLock) {\n    if (myInstance == null) {\n      myInstance=new GapisProcess();\n    }\n    gapis=myInstance;\n  }\n  return gapis.doConnect();\n}\n", "nl": "Attempts to connect to a gapis server. <p/> Will launch a new server process if none has been started. <p/>", "id": "21675"}
{"code": "public SecureSendNotificationQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id", "id": "44159"}
{"code": "@Override public void undoAction(UndoInterface undoRedoObject){\n  if (undoRedoObject != null) {\n    if (undoRedoObject.getOldValue() instanceof ReferencedEnvelope) {\n      ReferencedEnvelope oldValue=(ReferencedEnvelope)undoRedoObject.getOldValue();\n      populateField(oldValue);\n    }\n  }\n}\n", "nl": "Undo action.", "id": "35982"}
{"code": "@Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){\n  FieldConfigSlider copy=null;\n  if (fieldConfigBase != null) {\n    copy=new FieldConfigSlider(fieldConfigBase.getCommonData());\n  }\n  return copy;\n}\n", "nl": "Creates a copy of the field.", "id": "55100"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "424"}
{"code": "public boolean isLast(){\n  return last;\n}\n", "nl": "Returns true if this utterance is the last is a series of utterances.", "id": "8886"}
{"code": "public boolean isDone(){\n  if (cancelled != null) {\n    return true;\n  }\n  if (remoteResult != null) {\n    return true;\n  }\n  remoteResult=gigaSpace.take(template,0);\n  return remoteResult != null;\n}\n", "nl": "Returns <code>true</code> if this task completed. <p>Completion may be due to normal termination, an exception, or cancellation -- in all of these cases, this method will return <code>true</code>.", "id": "43484"}
{"code": "private Reader createUTF16Reader(InputStream stream,boolean isBigEndian){\n  return new UTF16Reader(stream,(fTempString.ch.length << 1),isBigEndian,fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN),fErrorReporter.getLocale());\n}\n", "nl": "Create a new UTF-16 reader from the InputStream.", "id": "1022"}
{"code": "@Override public void element(String elementName,Augmentations augs) throws XNIException {\n}\n", "nl": "A referenced element in a mixed or children content model.", "id": "52561"}
{"code": "private void responseJson(String jsonstr){\n  this.setContentType(Model.MIME_JSON);\n  this.print(jsonstr);\n}\n", "nl": "output the string as \"application/json\" to end-userr.", "id": "286"}
{"code": "public boolean isEmpty(){\n  return findFirst() == null;\n}\n", "nl": "Returns <tt>true</tt> if this map contains no key-value mappings.", "id": "26711"}
{"code": "public void generate(){\n  messager.printMessage(Kind.NOTE,String.format(\"%s.generate() for %s\",TAG,topLevelPackageString));\n  generateAll();\n  if (!errors.isEmpty()) {\n    messager.printMessage(Kind.ERROR,\"Generating injectors failed: \");\n    for (    String s : errors) {\n      messager.printMessage(Kind.ERROR,s);\n    }\n  }\n}\n", "nl": "Generates PackagedInjectors and return the generated.", "id": "50552"}
{"code": "public JsonObject merge(JsonObject object){\n  if (object == null) {\n    throw new NullPointerException(\"object is null\");\n  }\n  for (  Member member : object) {\n    this.set(member.name,member.value);\n  }\n  return this;\n}\n", "nl": "Copies all members of the specified object into this object. When the specified object contains members with names that also exist in this object, the existing values in this object will be replaced by the corresponding values in the specified object.", "id": "56999"}
{"code": "@Override public void revertToDefaultValue(){\n  if (colourButton != null) {\n    oldValueObj=this.defaultValue;\n    colourButton.populate(this.defaultValue);\n  }\n}\n", "nl": "Revert to default value.", "id": "41318"}
{"code": "public final static boolean isEjbQlIdentifier(String s){\n  if (s == null || s.length() == 0) {\n    return false;\n  }\n  for (int i=0; i < ejbQlIdentifiers.length; i++) {\n    if (ejbQlIdentifiers[i].equalsIgnoreCase(s)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Check whether the given String is an identifier according to the EJB-QL definition. See The EJB 2.0 Documentation Section 11.2.6.1.", "id": "9290"}
{"code": "public long optLong(int index){\n  return this.optLong(index,0);\n}\n", "nl": "Get the optional long value associated with an index. Zero is returned if there is no value for the index, or if the value is not a number and cannot be converted to a number.", "id": "11209"}
{"code": "public static final double feetToMeters(double feet){\n  return feet * FOOT_TO_METER;\n}\n", "nl": "Converts feet to meters.", "id": "26957"}
{"code": "protected VideoAddToAlbumQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Set owner id", "id": "49524"}
{"code": "public boolean isStatusBarTintEnabled(){\n  return mStatusBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system status bar?", "id": "42172"}
{"code": "public DetectorResult detect() throws NotFoundException, FormatException {\n  return detect(null);\n}\n", "nl": "<p>Detects a QR Code in an image.</p>", "id": "56980"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "56885"}
{"code": "public boolean forEachKey(TIntProcedure procedure){\n  return forEach(procedure);\n}\n", "nl": "Executes <tt>procedure</tt> for each key in the map.", "id": "20392"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_INTERVAL_HEAL_TO_ME(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201047,num0,skillname);\n}\n", "nl": "You recovered %num0 HP by using [%SkillName].", "id": "22613"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_INTERVAL_A_TO_ME(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200708,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] reflected %num0 damage through to the effect of [%SkillName].", "id": "43192"}
{"code": "public synchronized void reset(){\n}\n", "nl": "Prepares for another batch of output. Larger groups of output (such as all output associated with a single FreeTTSSpeakable) should be grouped between a reset/drain pair.", "id": "17329"}
{"code": "public boolean isAttributeDeprecated(){\n  final String doc=getDocValue(null);\n  return doc != null && StringUtil.containsIgnoreCase(doc,\"deprecated\");\n}\n", "nl": "Checks whether attribute is deprecated by looking up \"deprecated\" in its documenting comment", "id": "58303"}
{"code": "@Deprecated public static String toString(byte[] input) throws IOException {\n  return new String(input);\n}\n", "nl": "Get the contents of a <code>byte[]</code> as a String using the default character encoding of the platform.", "id": "46760"}
{"code": "private void broadcastToLeagueMembers(final Player player){\n  player.getPlayerAlliance2().getLeague().sendPacket(new SM_MESSAGE(player,message,type));\n}\n", "nl": "Sends message to all league members", "id": "40092"}
{"code": "private boolean lollipopAndAbove(){\n  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;\n}\n", "nl": "Checks if the device is running API greater than 21", "id": "37814"}
{"code": "public static Value local(Value val){\n  if (val != null && isLocal(val))   return val;\n else   return null;\n}\n", "nl": "filters out Locals.<br> returns <code>null</code> if <code>val</code> is null.", "id": "111"}
{"code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{-0.5001,-0.5,-0.4999,-0.25,-0.0001,0.0,0.0001,0.25,1.0,1.2499,1.25,1.2501};\n}\n", "nl": "Creates the default cumulative probability distribution test input values", "id": "43801"}
{"code": "public void addResource(String name){\n  addResourceObject(name);\n}\n", "nl": "Add a configuration resource. The properties of this resource will override properties of previously added resources, unless they were marked <a href=\"#Final\">final</a>.", "id": "34887"}
{"code": "public VideoSaveQuery noComments(Boolean value){\n  return unsafeParam(\"no_comments\",value);\n}\n", "nl": "Set no comments", "id": "35378"}
{"code": "public void onSuccess(int statusCode,Header[] headers,JSONArray response){\n}\n", "nl": "Returns when request succeeds", "id": "17796"}
{"code": "public static String mapCodeToSign(short code){\n  return extendedMatchCodeMapping[code];\n}\n", "nl": "Maps between extended match-codes to actual SQL Query sign.", "id": "18526"}
{"code": "public void addGlobalComplexTypeDecl(XSComplexTypeDecl decl){\n  fGlobalTypeDecls.put(decl.getName(),decl);\n  decl.setNamespaceItem(this);\n}\n", "nl": "register one global complex type", "id": "14524"}
{"code": "public void or(Criteria criteria){\n  oredCriteria.add(criteria);\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.passreset", "id": "14982"}
{"code": "public boolean containsValue(Object value){\n  return backedMap.containsValue(value);\n}\n", "nl": "Returns <tt>true</tt> if this map maps one or more keys to the specified value.  More formally, returns <tt>true</tt> if and only if this map contains at least one mapping to a value <tt>v</tt> such that <tt>(value==null ? v==null : value.equals(v))</tt>.  This operation will probably require time linear in the map size for most implementations of the <tt>Map</tt> interface.", "id": "56087"}
{"code": "public AudioGetRecommendationsQuery shuffle(Boolean value){\n  return unsafeParam(\"shuffle\",value);\n}\n", "nl": "true - shuffle on", "id": "29716"}
{"code": "public Observable<String> streamGetGithubInfoForEachMember(List<String> listOfUserName){\n  return Observable.just(listOfUserName).flatMap(githubMemberFunctions.observeEachItem()).flatMap(githubMemberFunctions.getGithubMember()).map(githubMemberFunctions.getNumberOfFollowers()).reduce(githubMemberFunctions.aggregateString()).subscribeOn(schedulerSubscribeOn).observeOn(schedulerObserveOn);\n}\n", "nl": "Stream that get Github info for each member of list of user", "id": "54111"}
{"code": "private void updateView(){\n  if (rebuildItems()) {\n    calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);\n    layout(getWidth(),getHeight());\n  }\n}\n", "nl": "Updates view. Rebuilds items and label if necessary, recalculate items sizes.", "id": "36417"}
{"code": "public static boolean removeFile(File file){\n  if (fileExists(file)) {\n    return file.delete();\n  }\n else {\n    return true;\n  }\n}\n", "nl": "Remove a file", "id": "18616"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_Instant_HEAL_ME_TO_B(int num0,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200523,num0,skilltarget,skillname);\n}\n", "nl": "You restored %num0 of [%SkillTarget]'s HP by using [%SkillName].", "id": "49710"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_REMAIN_TIME_60(String durationtime0){\n  return new SM_SYSTEM_MESSAGE(1400221,durationtime0);\n}\n", "nl": "%DURATIONTIME0 remaining.", "id": "31134"}
{"code": "public ArrayFieldVector<T> projection(ArrayFieldVector<T> v) throws MathIllegalArgumentException, MathRuntimeException {\n  return (ArrayFieldVector<T>)v.mapMultiply(dotProduct(v).divide(v.dotProduct(v)));\n}\n", "nl": "Find the orthogonal projection of this vector onto another vector.", "id": "21496"}
{"code": "public static String needFilename(String property) throws NoSuchPropertyException {\n  String filename=expandPath(needProperty(property));\n  if (!new File(filename).canRead()) {\n    throw new NoSuchPropertyException(\"Cannot read file `\" + filename + \"'. Check property `\"+ property+ \"' in configuration files\");\n  }\n  return filename;\n}\n", "nl": "Get a filename property from the underlying properties, throwing an exception if it is not defined. The string MARY_BASE is replaced with the value of the property mary.base, and path separators are adapted to the current platform.", "id": "22806"}
{"code": "protected AudioGetByIdQuery audios(String... value){\n  return unsafeParam(\"audios\",value);\n}\n", "nl": "Audio file IDs, in the following format: {owner_id}_{audio_id}", "id": "22731"}
{"code": "public void makePersistent(){\n  this.isTransient=false;\n}\n", "nl": "Makes this entry a persistent entry. Can be called only if the entry has not been written yet to the space.", "id": "48882"}
{"code": "@Override public void vendorOptionsUpdated(List<VersionData> vendorOptionVersionsList){\n  this.vendorOptionVersionsList=vendorOptionVersionsList;\n}\n", "nl": "Vendor options updated.", "id": "27781"}
{"code": "public void afterTransactionSynchronization(TransactionData transactionData){\n}\n", "nl": "Triggered after synchronization of a transaction was completed successfully.", "id": "7600"}
{"code": "private void checkIndex(final int index) throws MathIllegalArgumentException {\n  if (index < 0 || index > start.length - 2) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_RANGE_SIMPLE,index,0,start.length - 2);\n  }\n}\n", "nl": "Check equation index.", "id": "3594"}
{"code": "public static boolean isValidEmail(@NonNull String email){\n  return !TextUtils.isEmpty(email) && android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches();\n}\n", "nl": "Mehtod to cheeck valid email", "id": "26922"}
{"code": "@Override public LeafNode locateLeaf(DataType key,boolean findFirst){\n  return null;\n}\n", "nl": "See BPlusNode#locateLeaf documentation.", "id": "33210"}
{"code": "public static Builder create(){\n  return new Builder();\n}\n", "nl": "create a Block builder.", "id": "28916"}
{"code": "public void close(){\n  if (this.apk != null)   this.apk.close();\n}\n", "nl": "Closes this apk file and all resources associated with it", "id": "11323"}
{"code": "private void startWaveNorthernShieldGenerator2(){\n  sp(284838,174.50981f,251.38982f,292.43088f,(byte)0,1000,\"NorthernShieldGenerator1\");\n  sp(284839,174.9973f,254.4739f,292.3325f,(byte)0,1000,\"NorthernShieldGenerator2\");\n  sp(284840,174.84029f,257.80832f,292.4389f,(byte)0,1000,\"NorthernShieldGenerator3\");\n}\n", "nl": "Northern Shield Generator", "id": "23427"}
{"code": "public String assign(String value,Object... replacements){\n  if (setter() != null) {\n    return assignIfPossible(value,replacements);\n  }\n else {\n    throw new IllegalArgumentException(\"Attempt was made to generate assignment/setter code for [\" + name + \".\"+ (property != null ? property : type)+ \"] which has no setter/assignment method\");\n  }\n}\n", "nl": "Generates code to perform assignment to this VariableRef.", "id": "13187"}
{"code": "public void destroy(){\n  destroyOverlayPanelContent();\n}\n", "nl": "Destroy the native components associated with this panel's content.", "id": "2416"}
{"code": "public TrustManagerBuilder withManifestConfig(@NonNull Context ctxt){\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\n    return (withConfig(new ManifestConfigSource(ctxt)));\n  }\n  return (this);\n}\n", "nl": "Use the network security configuration identified configured in the app's manifest.", "id": "25511"}
{"code": "public static double log10(double x){\n  return Math.log(x) / LOG10;\n}\n", "nl": "The base 10 logarithm of the input value", "id": "57011"}
{"code": "private void subscribeRecord(){\n  for (  Subscription subscription : this.subscriptions) {\n    if (subscription.recordPathChangedCallback != null) {\n      this.record.subscribe(subscription.path,subscription.recordPathChangedCallback,true);\n    }\n else     if (subscription.recordChangedCallback != null) {\n      this.record.subscribe(subscription.recordChangedCallback,true);\n    }\n  }\n}\n", "nl": "Subscribe all callbacks to current record", "id": "23926"}
{"code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0.001d,0.01d,0.025d,0.05d,0.1d,0.999d,0.990d,0.975d,0.950d,0.900d};\n}\n", "nl": "Creates the default cumulative probability density test expected values", "id": "57155"}
{"code": "public void onSuccess(int statusCode,Header[] headers,JSONObject response){\n}\n", "nl": "Returns when request succeeds", "id": "12617"}
{"code": "private String makeSAM(String queryName,String refName,float bitScore,String line) throws IOException {\n  return String.format(\"%s\\t0\\t%s\\t0\\t255\\t*\\t*\\t0\\t0\\t*\\t*\\tAS:i:%d\\t\",queryName,refName,Math.round(bitScore)) + String.format(\"AL:Z:%s\\t\",Basic.replaceSpaces(line,' '));\n}\n", "nl": "make a SAM line", "id": "50543"}
{"code": "public static void o(double[] a){\n  o(a,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);\n}\n", "nl": "Prints an  array of doubles in default e format.", "id": "43325"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "52529"}
{"code": "public boolean isBeginningInstruction(){\n  if (predecessors.size() == 0) {\n    return false;\n  }\n  if (predecessors.first().instructionIndex == -1) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Is this instruction a \"beginning instruction\". A beginning instruction is defined to be an instruction that can be the first successfully executed instruction in the method. The first instruction is always a beginning instruction. If the first instruction can throw an exception, and is covered by a try block, then the first instruction of any exception handler for that try block is also a beginning instruction. And likewise, if any of those instructions can throw an exception and are covered by try blocks, the first instruction of the corresponding exception handler is a beginning instruction, etc. To determine this, we simply check if the first predecessor is the fake \"StartOfMethod\" instruction, which has an instruction index of -1.", "id": "31363"}
{"code": "private void notifyAdded(List<AirMapTraffic> added){\n  if (added == null || added.isEmpty()) {\n    return;\n  }\n  for (  AirMapTrafficListener listener : listeners) {\n    listener.onAddTraffic(added);\n  }\n}\n", "nl": "Notify the listeners that traffic has been added", "id": "38677"}
{"code": "private void onRequest(HttpServerRequest request){\n  AtomicInteger level=new AtomicInteger(0);\n  request.toObservable().map(null).lift(new JsonParserOperator()).map(null).flatMap(null).count().subscribe(null,null);\n}\n", "nl": "Handle an HTTP request", "id": "7697"}
{"code": "public static void doubleClick(Robot robot,Point clickLocation){\n  robot.moveMouse(clickLocation);\n  robot.pressMouse(LEFT_BUTTON);\n  robot.releaseMouse(LEFT_BUTTON);\n  robot.pressMouse(LEFT_BUTTON);\n  robot.releaseMouse(LEFT_BUTTON);\n}\n", "nl": "Fest API bug work-around - Double click on FEST moves the mouse between clicks (to the same location), and that fails on Mac.", "id": "12009"}
{"code": "public Transaction deleteTask(long taskId){\n  if (!mIsSuccess) {\n    return this;\n  }\n  mDatabase.delete(TasksTable.TABLE_NAME,BuildingBlocks.SELECTION_ID,new String[]{Long.toString(taskId)});\n  return this;\n}\n", "nl": "Delete the task with given ID, or, to be precise, ensure that the task with given ID doesn't exist anymore. This call won't fail even if there's nothing to delete (inspired by HTTP DELETE method behavior).", "id": "46595"}
{"code": "public static String escapeQuotedSwitch(String value){\n  return value.replaceAll(\"'\",\"'\\\"'\\\"'\");\n}\n", "nl": "Escape quotes in the value that can cause the shell problems (and prevent injection) This doesn't escape spaces as it is assumed that the value will be wrapped in quotes This escaping is bash specific - might not work with other shells The way to escape a single quote inside single quotes in bash is by gluing a double-quoted single quote to the single quoted expression", "id": "9470"}
{"code": "private void startAnimation(long time,OverviewAnimationType type,boolean finishImmediately){\n  startAnimation(time,type,TabModel.INVALID_TAB_INDEX,finishImmediately);\n}\n", "nl": "Starts an animation on the stack.", "id": "23314"}
{"code": "public synchronized void updateObjectPose(float[] planeFitTransform){\n  objectTransform=new Matrix4(planeFitTransform);\n  objectPoseUpdated=true;\n}\n", "nl": "Save the updated plane fit pose to update the AR object on the next render pass. This is synchronized against concurrent access in the render loop above.", "id": "34543"}
{"code": "public boolean isFileMarker(){\n  return type == Type.FILE_MARKER;\n}\n", "nl": "Returns <code>true</code> if the log entry is a file marker (representing the file where the log was extracted).", "id": "2197"}
{"code": "@Override public void update(final DataTag dataTag,final Object value,final String valueDesc,final Timestamp sourceTimestamp,final Timestamp daqTimestamp,final Timestamp cacheTimestamp){\n  updateValue(dataTag,value,valueDesc);\n  setTimestamps(dataTag,sourceTimestamp,daqTimestamp,cacheTimestamp);\n}\n", "nl": "Update the DataTag object held in the cache with the provided values.  Notice that the datatag quality is not validated and needs to be done independently using the validate public method.", "id": "11695"}
{"code": "@NotNull public DescribeImageAction describeImage(int maxCandidates,@NotNull String imageUrl){\n  return new DescribeImageAction(cognitiveContext,maxCandidates,imageUrl);\n}\n", "nl": "This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. All descriptions are in English.", "id": "48476"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "55747"}
{"code": "private boolean isWidgetNewlyCreated(){\n  long currentFolder=mPreferences.getLong(STATE_CURRENT_FOLDER,ChromeBrowserProviderClient.INVALID_BOOKMARK_ID);\n  return currentFolder == ChromeBrowserProviderClient.INVALID_BOOKMARK_ID;\n}\n", "nl": "This method relies on the fact that STATE_CURRENT_FOLDER pref is not yet set when onCreate is called for a newly created widget.", "id": "715"}
{"code": "private static void askAboutRestart(@NotNull PatchRunner patchRunner,@NotNull PatchOperation op,@NotNull final File patchFile,@NotNull FileOp fop,@NotNull final ProgressIndicator progress){\n  final ApplicationEx application=ApplicationManagerEx.getApplicationEx();\n  application.invokeLater(null,ModalityState.any());\n}\n", "nl": "If a patch fails to install because Studio is locking some of the files, we have to restart studio. Ask if the user wants to, and then move things into place so they can be picked up on restart.", "id": "52388"}
{"code": "public void joinResource() throws InterruptedException {\n  if (runObj != null) {\nsynchronized (complete) {\n      if (runObj != null)       complete.wait();\n    }\n  }\n}\n", "nl": "Waits for the resource to complete", "id": "13698"}
{"code": "private void stopCheckingStatus(){\n  executor.shutdownNow();\n  executor=Executors.newSingleThreadExecutor();\n  future=null;\n}\n", "nl": "Re-sets the executor and indicates the system is no longer checking the status of the transactions", "id": "54247"}
{"code": "public String optString(int index){\n  LazyNode token=getOptionalValueToken(index);\n  if (token == null)   return null;\n  if (token.type == LazyNode.VALUE_NULL)   return null;\n  return token.getStringValue(cbuf);\n}\n", "nl": "Returns the string value stored at the given index or null if there was no such value.", "id": "49077"}
{"code": "public static Date parseDate(final String dateValue,String[] dateFormats) throws DateParseException {\n  return parseDate(dateValue,dateFormats,null);\n}\n", "nl": "Parses the date value using the given date formats.", "id": "31861"}
{"code": "public int hashCode(){\n  return (int)(hash ^ (hash >>> 32));\n}\n", "nl": "Return a hashcode for this type.", "id": "11893"}
{"code": "public static boolean verifyPermissions(int... grantResults){\n  if (grantResults.length == 0) {\n    return false;\n  }\n  for (  int result : grantResults) {\n    if (result != PackageManager.PERMISSION_GRANTED) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Checks all given permissions have been granted.", "id": "50302"}
{"code": "public static InputStream toInputStream(String input){\n  return toInputStream(input,Charset.defaultCharset());\n}\n", "nl": "Convert the specified string to an input stream, encoded as bytes using the default character encoding of the platform.", "id": "55510"}
{"code": "public int createDeferredDocument(){\n  int nodeIndex=createNode(Node.DOCUMENT_NODE);\n  return nodeIndex;\n}\n", "nl": "Creates a document node in the table.", "id": "24384"}
{"code": "public StorageGetQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id", "id": "40606"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "36452"}
{"code": "protected List<Match> findClosest(Segment draggedEdge,List<Segment> edges){\n  List<Match> closest=new ArrayList<Match>();\n  addClosest(draggedEdge,edges,closest);\n  return closest;\n}\n", "nl": "Finds the closest matching segments among the given list of edges for the given dragged edge, and returns these as a list of matches", "id": "23977"}
{"code": "public boolean isHighQualityRenderingEnabled(){\n  return highQualityRenderingEnabled;\n}\n", "nl": "<p>Indicates whether the high quality rendering feature is enabled.</p>", "id": "1861"}
{"code": "public boolean isSink(){\n  return this.sinkSource == SinkSource.Sink || this.sinkSource == SinkSource.Both;\n}\n", "nl": "Checks whether this definition models a sink", "id": "44968"}
{"code": "public static boolean writeJson(JsonRootNode node,File file){\n  return FileUtility.writeToFile(new StringBuffer(JSONUtility.jsonToString(node)),file,false);\n}\n", "nl": "Write a JSON content into a file", "id": "49796"}
{"code": "public static final MediaFormat createVideoFormat(String mime,int width,int height){\n  MediaFormat format=new MediaFormat();\n  format.setString(KEY_MIME,mime);\n  format.setInteger(KEY_WIDTH,width);\n  format.setInteger(KEY_HEIGHT,height);\n  return format;\n}\n", "nl": "Creates a minimal video format.", "id": "44693"}
{"code": "public IExtendedIndexIterator<IEntryCacheInfo> establishScan(K startPos,short relation,K endPos,boolean endPosInclusive){\n  return establishScan(startPos,relation,endPos,endPosInclusive,false);\n}\n", "nl": "establish a scan according to the relation given and startPos : the start-scan object ,  null means scan all values. The relation is from com.j_spaces.client.TemplateMatchCodes: LT, LE, GT, GE (other codes are not relevant) endPos- key up to (or null if no limit in  index) endPosInclusive : is the endPos up to (or down to) and including ? returns an ExtendedIndexIterator object which enables scanning the ordered index, Null if no relevant elements to scan", "id": "39562"}
{"code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0d,0.4,0.24,0.144,0.0864,0.05184,0.031104,0.0186624,0.01119744,0.006718464,0.0040310784,0.00241864704,0.001451188224,0.0008707129344,0.00052242776064,0.000313456656384,0.00018807399383,0.000112844396298,6.77066377789e-05,4.06239826674e-05,2.43743896004e-05,1.46246337603e-05,8.77478025615e-06,5.26486815369e-06,3.15892089221e-06,1.89535253533e-06,1.1372115212e-06,6.82326912718e-07,4.09396147631e-07,2.45637688579e-07};\n}\n", "nl": "Creates the default probability density test expected values. Reference values are from R, version version 2.15.3.", "id": "7690"}
{"code": "public static Element addChildElementNSElement(Element element,String childElementName,Document document,String nameSpaceUrl){\n  Element newElement=document.createElementNS(nameSpaceUrl,childElementName);\n  element.appendChild(newElement);\n  return element;\n}\n", "nl": "Creates a child element with the given namespace supportive name and appends it to the element child node list.", "id": "40303"}
{"code": "public boolean sendTCPString(String message){\n  byte[] bytes=message.getBytes();\n  return sendTCPBytes(bytes);\n}\n", "nl": "Send string over TCP to the specified address via the specified port, including a header.", "id": "44037"}
{"code": "public void onEnterZone(ZoneInstance zoneInstance){\n}\n", "nl": "Will be called by ZoneManager when creature enters specific zone", "id": "26410"}
{"code": "protected MarketGetQueryWithExtended ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Identifier of an item owner community Note that community id in the 'owner_id' parameter should be negative number. For example 'owner_id'=-1 matches the [vk.com/apiclub|VK API] community", "id": "47311"}
{"code": "public boolean forEachKey(TShortProcedure procedure){\n  return forEach(procedure);\n}\n", "nl": "Executes <tt>procedure</tt> for each key in the map.", "id": "8286"}
{"code": "public static boolean isOrSubOf(Class<?> objectClass,Object parentObject){\n  Class<?> parentClass=parentObject.getClass();\n  return isOrSubOf(objectClass,parentClass);\n}\n", "nl": "Tests if a class is a class of or a sub-class of the parent.", "id": "54456"}
{"code": "public WallEditQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "User ID or community ID. Use a negative value to designate a community ID.", "id": "30205"}
{"code": "public SourceEditor toggleMarkdown(){\n  return setMarkdown(!markdown);\n}\n", "nl": "Toggle markdown file rendering", "id": "19774"}
{"code": "@Override public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augmentations) throws XNIException {\n}\n", "nl": "An external entity declaration.", "id": "33784"}
{"code": "public void addWorking(boolean working){\n  query.append(\" +working:\" + working);\n}\n", "nl": "Adds +working to the query", "id": "7629"}
{"code": "@Override public boolean markSupported(){\n  return false;\n}\n", "nl": "Tests whether this audio input stream supports the <code>mark</code> and <code>reset</code> methods.", "id": "2318"}
{"code": "@Override public void loadUrl(final String url,boolean clearNavigationStack){\n  webView.loadUrl(url);\n}\n", "nl": "Load the url into the webview.", "id": "43952"}
{"code": "public static ISpaceQuery create(Class<?> entryClass,ISpacePredicate predicate){\n  return new CustomSpaceQuery(entryClass,predicate);\n}\n", "nl": "Creates a space query using the specified class and predicate.", "id": "19138"}
{"code": "public boolean providesIntegrity(URL url){\n  return \"https\".equals(url.getProtocol());\n}\n", "nl": "Returns <code>true</code> if the specified URL uses the \"https\" protocol; returns <code>false</code> otherwise.", "id": "8507"}
{"code": "public String typeName(){\n  return \"utf8\";\n}\n", "nl": "Returns a String description of what kind of entry this is.", "id": "11313"}
{"code": "private Object readResolve(){\n  if (type == ERROR.type) {\n    return ERROR;\n  }\n else   if (type == WARNING.type) {\n    return WARNING;\n  }\n else   if (type == NOTICE.type) {\n    return NOTICE;\n  }\n else   if (type == NORMAL.type) {\n    return NORMAL;\n  }\n else {\n    throw new IllegalArgumentException(\"illegal type\");\n  }\n}\n", "nl": "Canonicalize so that <code>==</code> can be used.", "id": "11431"}
{"code": "public PlacesCheckinQuery placeId(Integer value){\n  return unsafeParam(\"place_id\",value);\n}\n", "nl": "Location ID.", "id": "19065"}
{"code": "public void config(Configuration config,String prefix,String name){\n  String completionsFile=config.getPrefixProperty(prefix,\"Completions.File\",\"NONE\");\n  if (completionsFile != null) {\n    completions=JarServiceProvider.readStringsMap(completionsFile);\n  }\n}\n", "nl": "The completions will for now reside on another properties style file referenced by prefix.Completions.File", "id": "49838"}
{"code": "public BigDecimal bigDecimalValue(final int roundingMode){\n  return new BigDecimal(numerator).divide(new BigDecimal(denominator),roundingMode);\n}\n", "nl": "<p> Gets the fraction as a <code>BigDecimal</code> following the passed rounding mode. This calculates the fraction as the numerator divided by denominator. </p>", "id": "34766"}
{"code": "public Builder quality(int quality){\n  if (quality < 1 || quality > 100)   throw new IllegalArgumentException(\"quality must be between 1 and 100\");\n  this.quality=quality;\n  return this;\n}\n", "nl": "Quality which we should generate the image 1-100", "id": "7395"}
{"code": "public String toString(){\n  return (id + \" @\" + when+ \" = \"+ getValue());\n}\n", "nl": "Returns a string representation of the object.", "id": "50791"}
{"code": "public static Ordering<UUID> ordering(){\n  return ORDERING;\n}\n", "nl": "Sort time UUIDs deterministically such that, as much as can be determined from the information in the UUID, UUIDs created earlier sort before UUIDs created later.", "id": "39865"}
{"code": "private void removeEntry(String key){\n  CacheHeader entry=mEntries.get(key);\n  if (entry != null) {\n    mTotalSize-=entry.size;\n    mEntries.remove(key);\n  }\n}\n", "nl": "Removes the entry identified by 'key' from the cache.", "id": "7440"}
{"code": "public Math_Vector cpy(){\n  return new Math_Vector(x,y);\n}\n", "nl": "copy the Math_Vector", "id": "23065"}
{"code": "public static void init(Context context){\n  if (cameraManager == null) {\n    cameraManager=new CameraManager(context);\n  }\n}\n", "nl": "Initializes this static object with the Context of the calling Activity.", "id": "50741"}
{"code": "@Override protected Expression generateExpression(){\n  return getFilterFactory().literal(getBooleanValue());\n}\n", "nl": "Generate expression.", "id": "37873"}
{"code": "public static List<JsonNode> listToJson(Collection<? extends IJsonable> collection){\n  List<JsonNode> jsonList=new LinkedList<>();\n  for (  IJsonable item : collection) {\n    jsonList.add(item.jsonize());\n  }\n  return jsonList;\n}\n", "nl": "Convert a collection of jsonable objects to list of json objects", "id": "11164"}
{"code": "public String title(){\n  return mTitle;\n}\n", "nl": "Returns the title to display for the app in the banner.", "id": "49083"}
{"code": "@Override public void redoAction(UndoInterface undoRedoObject){\n  if (undoRedoObject != null) {\n    if (undoRedoObject.getNewValue() instanceof TimePeriod) {\n      TimePeriod newValue=(TimePeriod)undoRedoObject.getNewValue();\n      populateDuration(start,newValue.getStart());\n      populateDuration(end,newValue.getEnd());\n    }\n  }\n}\n", "nl": "Redo action.", "id": "11809"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_IMMUNED_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201082,skilltarget,skillname);\n}\n", "nl": "[%SkillTarget] is immune to your [%SkillName].", "id": "8674"}
{"code": "public void addVector(UniqueVector v){\n  for (int i=0; i < v.size(); i++) {\n    add(v.get(i));\n  }\n}\n", "nl": "Appends all elements of a vector to this vector. Only unique elements are added.", "id": "55759"}
{"code": "@Override public long longValue(){\n  return (long)doubleValue();\n}\n", "nl": "Gets the fraction as a <tt>long</tt>. This returns the whole number part of the fraction.", "id": "29494"}
{"code": "public static SM_SYSTEM_MESSAGE STR_UI_COMBAT_NPC_RETURN(int nameId){\n  return new SM_SYSTEM_MESSAGE(1300039,calculateNameId(nameId));\n}\n", "nl": "%0 gives up the pursuit.", "id": "22967"}
{"code": "protected void writeImpl(AionConnection con){\n}\n", "nl": "Write data that this packet represents to given byte buffer.", "id": "9391"}
{"code": "public void updateDuration(){\n  if (!Double.isNaN(getXmin()) && !Double.isNaN(getXmax())) {\n    setDuration(getXmax() - getXmin());\n  }\n}\n", "nl": "recalculate and set duration based on current start and end times", "id": "39366"}
{"code": "public Boolean isDirectDictionary(){\n  return isDirectDictionary;\n}\n", "nl": "returns boolean value to identify direct dictionary", "id": "1237"}
{"code": "@Override public boolean isInterrupted(){\n  return interrupted;\n}\n", "nl": "Accessor method that returns the <code>interrupted</code> flag.", "id": "5481"}
{"code": "public short[][] production_table(){\n  return _production_table;\n}\n", "nl": "Access to production table.", "id": "13065"}
{"code": "public static SM_SYSTEM_MESSAGE STR_DUEL_REQUESTER_WITHDRAW_REQUEST(String value0){\n  return new SM_SYSTEM_MESSAGE(1300134,value0);\n}\n", "nl": "%0 has withdrawn the challenge for a duel.", "id": "38198"}
{"code": "public void screenshot(){\n  currentTest.get().screenshot();\n}\n", "nl": "Creates the screenshot image and stores the screenshot entry in the current test.", "id": "42776"}
{"code": "public static StorableTimeFence inWednesdayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(WEDNESDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n", "nl": "Creates a storable time fence which will be valid on Wednesday in the given daily time frame", "id": "46340"}
{"code": "public void paint(Graphics graphics){\n  super.paint(graphics);\n  Graphics2D gc=(Graphics2D)graphics;\n  gc.setColor(Color.WHITE);\n  gc.fill(getVisibleRect());\n  draw(gc,null);\n}\n", "nl": "draw the legend", "id": "31338"}
{"code": "public boolean hasNonUidOutputIdScheme(){\n  return outputIdScheme != null && !IdentifiableProperty.UID.equals(outputIdScheme);\n}\n", "nl": "Indicates whether this query defines an identifier scheme different from UID.", "id": "29509"}
{"code": "public static List<String> readLines(File file) throws IOException {\n  return readLines(file,Charset.defaultCharset());\n}\n", "nl": "Reads the contents of a file line by line to a List of Strings using the default encoding for the VM. The file is always closed.", "id": "2300"}
{"code": "private void deleteLegionMemberFromDB(LegionMemberEx legionMember){\n  this.allCachedLegionMembers.remove(legionMember);\n  DAOManager.getDAO(LegionMemberDAO.class).deleteLegionMember(legionMember.getObjectId());\n  Legion legion=legionMember.getLegion();\n  legion.deleteLegionMember(legionMember.getObjectId());\n  addHistory(legion,legionMember.getName(),LegionHistoryType.KICK);\n}\n", "nl": "This method will remove the legion member from cache and the database", "id": "50417"}
{"code": "public QueueReader<MethodOrMethodContext> newListener(){\n  return reachables.reader();\n}\n", "nl": "Returns a QueueReader object which will contain ONLY NEW methods which will be found to be reachable, but not those that have already been found to be reachable.", "id": "10956"}
{"code": "public XtnEntry attachToXtn(ServerTransaction txn,boolean fromReplication) throws TransactionException, RemoteException {\n  return _transactionHandler.attachToXtnGranular(txn,fromReplication);\n}\n", "nl": "Join the specified transaction, if not already joined.", "id": "48617"}
{"code": "public boolean hasFill(){\n  return SLDTreeLeafFactory.getInstance().hasFill(getSymbolizer());\n}\n", "nl": "Checks for fill.", "id": "38177"}
{"code": "protected FaveAddGroupQuery groupId(int value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "Community ID.", "id": "52586"}
{"code": "@NonNull public static History single(@NonNull Object key){\n  return emptyBuilder().push(key).build();\n}\n", "nl": "Create a history that contains a single key.", "id": "52980"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FREE_EXPERIENCE_CHARACTER_CANT_TRADE(String value0){\n  return new SM_SYSTEM_MESSAGE(1400400,value0);\n}\n", "nl": "Characters under level %0 who are playing a free trial cannot trade.", "id": "466"}
{"code": "public FriendsSearchQuery fields(UserField... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Profile fields to return.", "id": "19149"}
{"code": "public static void show(@Nullable Activity activity,CharSequence msg){\n  show(activity,msg,LENGTH_SHORT);\n}\n", "nl": "Show activity level toast.", "id": "38855"}
{"code": "public synchronized void reset(){\n}\n", "nl": "Prepares for another batch of output. Larger groups of output (such as all output associated with a single FreeTTSSpeakable) should be grouped between a reset/drain pair.", "id": "55288"}
{"code": "public IntIterator rangeSortedBy(String field,float lo,float hi,int indexType){\n  Index index=getIndex(field,float.class,true);\n  return index.rows(lo,hi,indexType);\n}\n", "nl": "Return an iterator over a range of rwos in this table, determined by a bounded range for a given data field. A new index over the data field will be created if it doesn't already exist.", "id": "19606"}
{"code": "public static ValueAnimator animateDummy(int duration){\n  ValueAnimator a=ValueAnimator.ofFloat(0,1);\n  a.setDuration(duration);\n  a.start();\n  return a;\n}\n", "nl": "Use Animator to do a \"setTimeout\"", "id": "29051"}
{"code": "@Requires(Resolved.class) @Nullable public Field lookupField(String name){\n  return fieldByName.get(name);\n}\n", "nl": "Looks up the field by its name.", "id": "3872"}
{"code": "public RevealBuilder from(@NonNull final View fromView){\n  this.mFromView=fromView;\n  return this;\n}\n", "nl": "Defines the view to translate to the view to reveal.", "id": "9624"}
{"code": "public static Date stringToDate(String date,String datePattern){\n  DateFormat format=new SimpleDateFormat(datePattern,Locale.ENGLISH);\n  try {\n    return format.parse(date);\n  }\n catch (  ParseException e) {\n    Log.e(\" \" + e.getMessage(),\" Please check if you have valid pattern! \");\n  }\n  return null;\n}\n", "nl": "Convert date from String to Date format", "id": "20362"}
{"code": "public void changeCenterButtonIcon(int icon){\n  if (fab == null) {\n    Log.e(TAG,\"You should call setCentreButtonIcon() instead, \" + \"changeCenterButtonIcon works if space navigation already set up\");\n  }\n else {\n    fab.setImageResource(icon);\n    centreButtonIcon=icon;\n  }\n}\n", "nl": "Change centre button icon if space navigation already set up", "id": "23178"}
{"code": "public void clearCustomProperty(String key){\n  clearCustomProperties(new String[]{key});\n}\n", "nl": "Clears custom property.", "id": "45999"}
{"code": "public static void showProfile(Fragment fragment,@Nullable HashMap<String,String> extras){\n  showProfile(fragment,AirMap.getUserId(),extras);\n}\n", "nl": "Display the authenticated pilot's profile", "id": "42929"}
{"code": "public void addArray(Object[] a){\n  for (int i=0; i < a.length; i++) {\n    add(a[i]);\n  }\n}\n", "nl": "Appends all elements of an array to this vector. Only unique elements are added.", "id": "45968"}
{"code": "public boolean isAssignable(){\n  for (  MatchingPart part : _parts) {\n    if (!part.isAssignable()) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Some permissions fall into one of the following categories: <ol> <li>The permission is intended for validation purposes only, such as for creating a table.</li> <li>The permission format is deprecated and no new permissions of the format are allowed.</li> </ol> This method returns true if the permission should be assignable to a user/role, false otherwise.", "id": "16946"}
{"code": "public VideoRemoveTagQuery removeTag(UserActor actor,int tagId,int videoId){\n  return new VideoRemoveTagQuery(getClient(),actor,tagId,videoId);\n}\n", "nl": "Removes a tag from a video.", "id": "22400"}
{"code": "@DataProvider public Object[][] InvalidAuthProvider(){\n  return new Object[][]{{\"user@foo.com\",\"\"},{\"\",\"user01\"},{\"user@foo.com\",\"notMyPassword\"},{\"\",\"\"}};\n}\n", "nl": "Provides invalid user credentials.", "id": "13297"}
{"code": "@Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {\n}\n", "nl": "Notifies of the presence of the DOCTYPE line in the document.", "id": "47964"}
{"code": "protected void notifyAIOnMove(){\n  MovementNotifyTask.getInstance().add(getOwner());\n}\n", "nl": "Notify everyone in knownlist about move event", "id": "57836"}
{"code": "public BookDTO toDTO(Book book){\n  return toDTO(book,1);\n}\n", "nl": "Converts the passed book to a DTO.", "id": "31788"}
{"code": "public static void bindProperties(Binder binder){\n  Properties properties=PropertyUtils.gatherProperties();\n  Names.bindProperties(binder,properties);\n  binder.bind(Properties.class).toInstance(properties);\n}\n", "nl": "This method reads property files and creates following bindings: <ul> <li>a named binding for each property, <li>a binding for Properties class; bound Property instance contains all the properties. </ul> Property file paths are retrieved from configuration.paths property. If configuration.paths is not set, bindProperties will look in default location, i.e. \"src/main/config\". Property configuration.paths can contain any number of paths. Paths in configuration.paths should be separated with semicolons.", "id": "13443"}
{"code": "final void forceFinished(boolean finished){\n  mFinished=finished;\n}\n", "nl": "Force the finished field to a particular value.", "id": "14860"}
{"code": "public double sum(){\n  double result=0;\n  for (  double[] dArr : A)   for (  double d : dArr)   result+=d;\n  return result;\n}\n", "nl": "Returns the sum of the component of the matrix.", "id": "29400"}
{"code": "@NotNull @VisibleForTesting public static ModuleResourceRepository createForTest(@NotNull AndroidFacet facet,@NotNull Collection<VirtualFile> resourceDirectories){\n  return createForTest(facet,resourceDirectories,Collections.<LocalResourceRepository>emptyList());\n}\n", "nl": "For testing: creates a project with a given set of resource roots; this allows tests to check this repository without creating a gradle project setup etc", "id": "122"}
{"code": "public static Set<String> convertArrayToSet(String[] array){\n  Set<String> resultSet=new HashSet<String>(array.length);\n  Collections.addAll(resultSet,array);\n  return resultSet;\n}\n", "nl": "Transforms array of String objects to Set", "id": "26479"}
{"code": "public static boolean checkIfDataTypeNotTimeStamp(Expression expression){\n  if (expression.getFilterExpressionType() == ExpressionType.LITERAL) {\n    if (!(((LiteralExpression)expression).getLiteralExpDataType() == DataType.TIMESTAMP)) {\n      return true;\n    }\n  }\n  for (  Expression child : expression.getChildren()) {\n    if (checkIfDataTypeNotTimeStamp(child)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "This method will check if a given literal expression is not a timestamp datatype recursively.", "id": "12496"}
{"code": "public static boolean isInteger(String s){\n  if (isEmpty(s))   return defaultEmptyOK;\n  for (int i=0; i < s.length(); i++) {\n    char c=s.charAt(i);\n    if (!isDigit(c))     return false;\n  }\n  return true;\n}\n", "nl": "Returns true if all characters in string s are numbers. Accepts non-signed integers only. Does not accept floating point, exponential notation, etc.", "id": "54977"}
{"code": "public void resetClearedState(){\n  this._cleared=false;\n}\n", "nl": "Resets the cleared fields states to false.", "id": "41189"}
{"code": "void removeAnnotations(Annotation[] annotations){\n  for (  Annotation annotation : annotations) {\n    this.annotationToAnnotationViewMap.remove(annotation);\n  }\n  this.update();\n}\n", "nl": "This removes an annotation if it exists from the map.", "id": "37678"}
{"code": "private BSPTree<Sphere1D> childAfter(BSPTree<Sphere1D> node){\n  if (isDirect(node)) {\n    return node.getPlus();\n  }\n else {\n    return node.getMinus();\n  }\n}\n", "nl": "Find the child node just after an internal node.", "id": "30761"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FIND_POS_SUBZONE_FOUND(String value0){\n  return new SM_SYSTEM_MESSAGE(1300748,value0);\n}\n", "nl": "%0 is at the position indicated on the map.", "id": "14376"}
{"code": "public String fixed_class_names(){\n  return soot.PhaseOptions.getString(options,\"fcn\");\n}\n", "nl": "FixedClassNames -- Set for the fixed class names.. Use this parameter to set some class names unchangable  even they are duplicated. \t\t\t\t\t\t\tThe fixed class name list  cannot contain duplicated class names. \t\t\t\t\t\t\tUsing '-' to split  multiple class names (e.g., fcn:a.b.c-a.b.d). \t\t\t\t\t\t", "id": "12314"}
{"code": "@Override public boolean accepts(Field field){\n  return isList(field) && AnnotationsHelper.isFindPageObjectAnnotationPresent(field) && AnnotationsHelper.isGenericTypeAnnotedWithPageObject(field);\n}\n", "nl": "PageObjectInjectorListener calls this method to check if the provider is able to handle currently injected field. <p> PageObjectListProxyProvider handles fields that are: <ul> <li>lists of PageObjects, <li>annotated with one of FindBy annotations. </ul>", "id": "53530"}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){\n  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. <p/> This should only be used on AdapterView's such as ListView as it just calls through to overScrollBy() with the scrollRange = 0. AdapterView's do not have a scroll range (i.e. getScrollY() doesn't work).", "id": "12859"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_Instant_HEAL_A_TO_SELF(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200826,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster]'s flight time increased by %num0 as it used [%SkillName].", "id": "12793"}
{"code": "@Override public void quit(){\n  if (reusable) {\n    cleanDriver();\n    sendEvent(false);\n  }\n else {\n    super.quit();\n    alive=false;\n    sendEvent(true);\n  }\n}\n", "nl": "Quits the driver and informs the listeners about driver's death.", "id": "9997"}
{"code": "@Before public void beforeTest(){\n  removeTestData();\n}\n", "nl": "Removes test values from previous tests in case clean up failed.", "id": "55381"}
{"code": "public StatusGetQuery groupId(Integer value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "Set group id", "id": "26967"}
{"code": "@Override public void close() throws IOException {\n}\n", "nl": "Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in this class can be called after the stream has been closed without generating an <tt>IOException</tt>.", "id": "22241"}
{"code": "public void handleExceptionsWith(final ExceptionHandler<? super T> exceptionHandler){\n  this.exceptionHandler=exceptionHandler;\n}\n", "nl": "<p>Specify an exception handler to be used for any future event handlers.</p> <p> <p>Note that only event handlers set up after calling this method will use the exception handler.</p>", "id": "32059"}
{"code": "public boolean isApplicable(){\n  final ChartViewer viewer=(ChartViewer)getViewer();\n  return viewer.getActiveLabelsJList() != null && viewer.getActiveLabelsJList().getSelectedIndex() != -1;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "37931"}
{"code": "private Collection<Var> migrateColumnValueAsResource(Var instance,String columnName,Object columnValue,String tableName){\n  if (columnValue == null) {\n    return Collections.emptyList();\n  }\n  return Collections.singleton(var().id(id(instance)).has(namer.resourceName(tableName,columnName),columnValue));\n}\n", "nl": "Migrate a column value as a resource", "id": "19807"}
{"code": "public Vector midpoint(Vector other){\n  x=(x + other.x) / 2;\n  y=(y + other.y) / 2;\n  z=(z + other.z) / 2;\n  return this;\n}\n", "nl": "Sets this vector to the midpoint between this vector and another.", "id": "39420"}
{"code": "public synchronized void progressStop(){\n  if (this.progressDialog != null) {\n    this.progressDialog.dismiss();\n    this.progressDialog=null;\n  }\n}\n", "nl": "Stop progress dialog.", "id": "7216"}
{"code": "public void add(String param){\n  fStrings.add(param);\n}\n", "nl": "DOM Internal: Add a <code>DOMString</code> to the list.", "id": "55253"}
{"code": "public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {\n  ByteArrayOutputStream output=new ByteArrayOutputStream();\n  copy(input,output,encoding);\n  return output.toByteArray();\n}\n", "nl": "Get the contents of a <code>Reader</code> as a <code>byte[]</code> using the specified character encoding. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedReader</code>.", "id": "1271"}
{"code": "@Override public double toDouble(){\n  throw new UnsupportedOperationException();\n}\n", "nl": "Convert Writable to double. Whether this is supported depends on the specific writable.", "id": "15238"}
{"code": "public void importASObject(ASObject asobject){\n  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,\"NOT_SUPPORTED_ERR\",null);\n  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);\n}\n", "nl": "Imports <code>ASObject</code> into ASModel.", "id": "23508"}
{"code": "public void downloadImage(String location,int index){\n  new DownloadImage(context,location,ContextCompat.getColor(context,R.color.transparent1)).execute(urls[index]);\n}\n", "nl": "Download image at specific index in a new async task. Image will be named after the location.", "id": "10603"}
{"code": "@Override public void onPause(){\n  super.onPause();\n  if (mPreview != null) {\n    mPreview.stop();\n  }\n}\n", "nl": "Stops the camera.", "id": "58513"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_COMPLETE_ROUND_IDARENA(String value0){\n  return new SM_SYSTEM_MESSAGE(1400929,value0);\n}\n", "nl": "You have eliminated all enemies in Round %0.", "id": "9109"}
{"code": "public static JSONArray toJSONArray(JSONArray names,String string) throws JSONException {\n  return toJSONArray(names,new JSONTokener(string));\n}\n", "nl": "Produce a JSONArray of JSONObjects from a comma delimited text string using a supplied JSONArray as the source of element names.", "id": "36293"}
{"code": "public void train(String corpusFileName,String pipelineModelFileName,int numFeatures){\n  JavaRDD<String> jrdd=jsc.textFile(corpusFileName);\n  train(jrdd.collect(),pipelineModelFileName,numFeatures);\n}\n", "nl": "Trains a whitespace classifier model and save the resulting pipeline model to an external file.", "id": "16010"}
{"code": "private void appendRestrictedContentType(ContentType contentType){\n  if (restrictedContentTypesMask == 0) {\n    restrictedContentTypesMask=contentType.getFlagValue();\n  }\n else {\n    restrictedContentTypesMask|=contentType.getFlagValue();\n  }\n}\n", "nl": "Appends new content type to restricted list (depending on the current restricted content types)", "id": "18178"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "39252"}
{"code": "public Set<R> rowKeySet(){\n  return dataMap.keySet();\n}\n", "nl": "get the set of all row keys. Changes to this set affect the Table and vice versa", "id": "32152"}
{"code": "public boolean isRepeated(){\n  return proto.getLabel() == FieldDescriptorProto.Label.LABEL_REPEATED;\n}\n", "nl": "Returns true if the field is repeated.", "id": "7016"}
{"code": "@Override public synchronized void invalidate(String key,boolean fullExpire){\n  Entry entry=get(key);\n  if (entry != null) {\n    entry.softTtl=0;\n    if (fullExpire) {\n      entry.ttl=0;\n    }\n    put(key,entry);\n  }\n}\n", "nl": "Invalidates an entry in the cache.", "id": "21212"}
{"code": "@SuppressWarnings(\"unused\") private void broadcastInfluencePacket(){\n  SM_INFLUENCE_RATIO pkt=new SM_INFLUENCE_RATIO();\n  Player player;\n  Iterator<Player> iter=World.getInstance().getPlayersIterator();\n  while (iter.hasNext()) {\n    player=iter.next();\n    PacketSendUtility.sendPacket(player,pkt);\n  }\n}\n", "nl": "Broadcast packet with influence update to all players. - Responsible for the message \"The Divine Fortress is now vulnerable.\"", "id": "11116"}
{"code": "public AdsGetSuggestionsQueryWithRegions country(Integer value){\n  return unsafeParam(\"country\",value);\n}\n", "nl": "ID of the country objects are searched in.", "id": "41633"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeathBlow_ME_TO_B(int num0,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200499,num0,skilltarget,skillname);\n}\n", "nl": "You inflicted %num0 damage on [%SkillTarget] by using [%SkillName].", "id": "25149"}
{"code": "public String encodeSLD(StyledLayerDescriptor sld){\n  StringWriter out=new StringWriter();\n  if (sld != null) {\n    try {\n      Ysld.encode(sld,out);\n    }\n catch (    IOException e) {\n      ConsoleManager.getInstance().exception(this,e);\n    }\n  }\n  return out.toString();\n}\n", "nl": "Encode sld to a string", "id": "7954"}
{"code": "@Override public RecordReader createReader(InputSplit split) throws IOException, InterruptedException {\n  RecordReader reader=new ListStringRecordReader();\n  reader.initialize(split);\n  return reader;\n}\n", "nl": "Creates a reader from an input split", "id": "56418"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_INTERVAL_ME_TO_SELF(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200382,num0,skillname);\n}\n", "nl": "You recovered %num0 MP due to the effect of [%SkillName].", "id": "37844"}
{"code": "public boolean isCyclic(){\n  return isCyclic;\n}\n", "nl": "Tests if wheel is cyclic. That means before the 1st item there is shown the last one", "id": "16875"}
{"code": "public boolean isDistinct(){\n  return distinct;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.users", "id": "48269"}
{"code": "private void startWaveNorthernShieldGenerator1(){\n  sp(233726,174.50981f,251.38982f,292.43088f,(byte)0,1000,\"NorthernShieldGenerator1\");\n  sp(233727,174.9973f,254.4739f,292.3325f,(byte)0,1000,\"NorthernShieldGenerator2\");\n  sp(233857,174.84029f,257.80832f,292.4389f,(byte)0,1000,\"NorthernShieldGenerator3\");\n}\n", "nl": "* Northern Shield Generator Periodic Spawn  *", "id": "32903"}
{"code": "@Override protected LocalTypeSet entryInitialFlow(){\n  LocalTypeSet ret=(LocalTypeSet)emptySet.clone();\n  return ret;\n}\n", "nl": "Returns a new, aggressive (local,type) set.", "id": "49923"}
{"code": "public static void dialNumber(Context context,String phoneNumber){\n  openDialerActivityWithAction(context,phoneNumber,Intent.ACTION_DIAL);\n}\n", "nl": "Dial a number in the phone's keypad", "id": "3279"}
{"code": "public boolean isInitialIfExistSearchActive(){\n  return _initialIfExistSearchActive;\n}\n", "nl": "is the initial if-exist search active ?", "id": "10417"}
{"code": "public AdsGetAdsQuery includeDeleted(Boolean value){\n  return unsafeParam(\"include_deleted\",value);\n}\n", "nl": "Flag that specifies whether archived ads shall be shown: false - show only active ads; true - show all ads.", "id": "4123"}
{"code": "public Relation createRelation(String name){\n  Relation relation=new Relation(name,this);\n  relations.setObject(name,relation);\n  return relation;\n}\n", "nl": "Creates a new relation with the given name and adds it to this utterance.", "id": "8499"}
{"code": "@Deprecated public Builder cacheOnDisc(){\n  return cacheOnDisk(true);\n}\n", "nl": "Loaded image will be cached on disk", "id": "31464"}
{"code": "@Override public Grammar retrieveGrammar(XMLGrammarDescription gDesc){\n  Grammar g=super.retrieveGrammar(gDesc);\n  if (g != null)   return g;\n  return fGrammarPool.retrieveGrammar(gDesc);\n}\n", "nl": "Retrieve a particular grammar. REVISIT:  does this need to be synchronized since it's just reading?", "id": "15653"}
{"code": "protected DatabaseGetCitiesQuery countryId(int value){\n  return unsafeParam(\"country_id\",value);\n}\n", "nl": "Country ID.", "id": "25531"}
{"code": "public static int red(int color){\n  return (color >> 16) & 0xFF;\n}\n", "nl": "Get the red component of the given color.", "id": "46265"}
{"code": "public int hashCode(){\n  long v=Double.doubleToLongBits(value);\n  return (int)(v ^ (v >>> 32));\n}\n", "nl": "Returns a hash code for this DoubleConstant object.", "id": "38139"}
{"code": "public final CharSequence yytext(){\n  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);\n}\n", "nl": "Returns the text matched by the current regular expression.", "id": "11759"}
{"code": "public static int[] shuffle(int[] intArray){\n  if (intArray == null) {\n    return null;\n  }\n  return shuffle(intArray,getRandom(intArray.length));\n}\n", "nl": "Shuffling algorithm, Randomly permutes the specified int array using a default source of randomness", "id": "14859"}
{"code": "public void clear(){\n  ntax=0;\n  bits.clear();\n  index2name.clear();\n  name2index.clear();\n}\n", "nl": "erase all taxa", "id": "12658"}
{"code": "public GroupsEditQuery access(GroupsEditAccess value){\n  return unsafeParam(\"access\",value);\n}\n", "nl": "Community type.", "id": "13673"}
{"code": "public void addSubEquipmentIds(final Collection<Long> subEquipmentIds){\n  for (  Long subEquipmentId : subEquipmentIds) {\n    addSubEquipmentId(subEquipmentId);\n  }\n}\n", "nl": "Adds all sub equipment id's of that list as dependency to this tag", "id": "41394"}
{"code": "public void requestPreviewFrame(Handler handler,int message){\n  if (camera != null && previewing) {\n    previewCallback.setHandler(handler,message);\n    if (useOneShotPreviewCallback) {\n      camera.setOneShotPreviewCallback(previewCallback);\n    }\n else {\n      camera.setPreviewCallback(previewCallback);\n    }\n  }\n}\n", "nl": "A single preview frame will be returned to the handler supplied. The data will arrive as byte[] in the message.obj field, with width and height encoded as message.arg1 and message.arg2, respectively.", "id": "56807"}
{"code": "public boolean equals(Object t){\n  return ((t instanceof RefType) && className.equals(((RefType)t).className));\n}\n", "nl": "2 RefTypes are considered equal if they are parametrized by the same class name String.", "id": "54330"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonSkillArea_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201149,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] uses [%SkillName].", "id": "38947"}
{"code": "public boolean isEmpty(){\n  return size() == 0;\n}\n", "nl": "True if there are no entries in the CounterMap (false does not mean totalCount > 0)", "id": "56270"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_REJECTED_INVITE_GUILD(String value0){\n  return new SM_SYSTEM_MESSAGE(1390118,value0);\n}\n", "nl": "%0 is currently rejecting Legion invitations.", "id": "42029"}
{"code": "public static Double zing(Number value){\n  if (value == null) {\n    return null;\n  }\n  return Math.max(0d,value.doubleValue());\n}\n", "nl": "Function which will return zero if the argument is a negative number.", "id": "31233"}
{"code": "public final boolean canSetLong(String field){\n  return m_table.canSetLong(field);\n}\n", "nl": "Check if the <code>setLong</code> method can safely be used for the given data field.", "id": "17801"}
{"code": "public static ProbeItemDescriptor discreteFillItem(String name,String description,ItemValueFormatter formatter){\n  return discreteOutlineItem(name,description,formatter,1d,0,MAX_VALUE_UNDEFINED,DEFAULT_LINE_WIDTH,null,DEFAULT_COLOR);\n}\n", "nl": "Creates descriptor of a discrete item created by filled segments.", "id": "12108"}
{"code": "public int size(){\n  return names.size();\n}\n", "nl": "Returns the number of members (name/value pairs) in this object.", "id": "8424"}
{"code": "public static PolygonSymbolizer createDefaultPolygonSymbolizer(){\n  Stroke stroke=styleFactory.createStroke(ff.literal(DEFAULT_LINE_COLOUR),ff.literal(2));\n  Fill fill=styleFactory.getDefaultFill();\n  PolygonSymbolizer polygonSymbolizer=styleFactory.createPolygonSymbolizer();\n  polygonSymbolizer.setStroke(stroke);\n  polygonSymbolizer.setFill(fill);\n  return polygonSymbolizer;\n}\n", "nl": "Creates the default polygon symbolizer.", "id": "15700"}
{"code": "@Override public void connect(SLDEditorFileInterface editorFile){\n  reset();\n  this.editorFileInterface=editorFile;\n  if (editorFileInterface != null) {\n    this.dataSourceProperties=editorFile.getDataSource();\n    if (this.dataSourceProperties != null) {\n      createExampleDataSource();\n      createUserLayerDataSources();\n      if (this.dataSourceProperties.isEmpty()) {\n        openWithoutDataSource();\n      }\n else {\n        openExternalDataSource();\n      }\n    }\n  }\n}\n", "nl": "Connect to data source.", "id": "29273"}
{"code": "public void delete() throws IOException {\n  close();\n  Util.deleteContents(directory);\n}\n", "nl": "Closes the cache and deletes all of its stored values. This will delete all files in the cache directory including files that weren't created by the cache.", "id": "40232"}
{"code": "public Vector3f cross(Vector3f v){\n  return cross(v,null);\n}\n", "nl": "<code>cross</code> calculates the cross product of this vector with a parameter vector v.", "id": "3669"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FORCE_INVITE_ME(String value0){\n  return new SM_SYSTEM_MESSAGE(1300967,value0);\n}\n", "nl": "You have received an alliance invitation from %0.", "id": "30972"}
{"code": "public static boolean isDigit(char ch){\n  return ('0' <= ch && ch <= '9');\n}\n", "nl": "Returns true if the given character is a digit (0-9 only).", "id": "36158"}
{"code": "public static NamedFileChannel createNewFile(Path dir,String prefix,String suffix) throws IOException {\n  return createNewFileImpl(dir,prefix,suffix,new OpenOption[]{READ,WRITE,CREATE_NEW});\n}\n", "nl": "Creates a new file and opens it for reading and writing.", "id": "3350"}
{"code": "public double[] toSplitDouble(){\n  double split[]=new double[2];\n  long mask=0xffffffffc0000000L;\n  split[0]=Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);\n  split[1]=subtract(newInstance(split[0])).toDouble();\n  return split;\n}\n", "nl": "Convert the instance into a split double.", "id": "8820"}
{"code": "private boolean isBetween(double value,double boundary1,double boundary2){\n  return (value >= boundary1 && value <= boundary2) || (value >= boundary2 && value <= boundary1);\n}\n", "nl": "Determines whether a value is between two other values.", "id": "45708"}
{"code": "protected RealMatrix computeCovarianceMatrix(RealMatrix matrix) throws MathIllegalArgumentException {\n  return computeCovarianceMatrix(matrix,true);\n}\n", "nl": "Create a covariance matrix from a matrix whose columns represent covariates. Covariances are computed using the bias-corrected formula.", "id": "26699"}
{"code": "public AdsGetSuggestionsQueryWithRegions ids(String value){\n  return unsafeParam(\"ids\",value);\n}\n", "nl": "Set ids", "id": "41791"}
{"code": "public ApplicationType createModelFor(Application appl){\n  Jvm jvm=JvmFactory.getJVMFor(appl);\n  if (jvm.isBasicInfoSupported()) {\n    String mainClass=jvm.getMainClass();\n    if (mainClass != null) {\n      return createApplicationTypeFor(appl,jvm,mainClass);\n    }\n  }\n  return null;\n}\n", "nl": "Detects well-known application.", "id": "7580"}
{"code": "public void addBodyDecl(BodyDecl node){\n  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the BodyDecl list.", "id": "54168"}
{"code": "@Override protected final void process(double[] real,double[] imag){\n  MathUtils.toPolarCoordinates(real,imag);\n  double[] r=real;\n  double[] phi=imag;\n  processPolar(r,phi);\n  MathUtils.toCartesianCoordinates(real,imag);\n}\n", "nl": "Here the actual processing of the frequency-domain frame (in cartesian coordinates) happens. This implementation converts to polar coordinates calls processPolar(), and converts the result back to cartesian coordinates.", "id": "32214"}
{"code": "void onAddMedia(RTMedia media){\n  mAddedMedia.add(media);\n}\n", "nl": "Needs to be called if a media is added to the editor. Important to be able to delete obsolete media once we're done editing.", "id": "25845"}
{"code": "public boolean isUrlBlock(){\n  return isOptionEnabled(UrlFilterRuleOption.URL_BLOCK);\n}\n", "nl": "This attribute is only for exception rules. If true - do not use url blocking rules for urls where referrer satisfies this rule.", "id": "21751"}
{"code": "public static QuerySchema put(QuerySchema schema){\n  return registry.put(schema.getSchemaName(),schema);\n}\n", "nl": "Adds the given query schema to the registry. <p> If there was an existing schema with the same name, it is replaced.", "id": "42394"}
{"code": "public boolean IsOptSet(int inOptNum){\n  if (this.optionsList == null) {\n    initialize();\n  }\n  return this.optionsList.contains((byte)inOptNum);\n}\n", "nl": "Report whether or not the input option is set.", "id": "28574"}
{"code": "public int addAdjustment(GenericValue adjustment){\n  adjustments.add(adjustment);\n  return adjustments.indexOf(adjustment);\n}\n", "nl": "Add an adjustment to the order; don't worry about setting the orderId, orderItemSeqId or orderAdjustmentId; they will be set when the order is created", "id": "26455"}
{"code": "public Observable<Object> observable(){\n  return mBusSubject;\n}\n", "nl": "Observable that will emmit everything posted to the event bus.", "id": "47069"}
{"code": "protected void addComponent(XMLComponent component){\n  if (fComponents.contains(component)) {\n    return;\n  }\n  fComponents.add(component);\n  addRecognizedParamsAndSetDefaults(component);\n}\n", "nl": "Adds a component to the parser configuration. This method will also add all of the component's recognized features and properties to the list of default recognized features and properties.", "id": "47962"}
{"code": "public static IVScanResult createIVScanResult(Pokemon pokemon,double estimatedPokemonLevel,int pokemonCP,boolean b){\n  IVScanResult res=new IVScanResult(pokemon,estimatedPokemonLevel,pokemonCP,b);\n  scanContainer.addNewScan(res);\n  return res;\n}\n", "nl": "Create a new IVScanResult and updates the scanContainer singleton.", "id": "1249"}
{"code": "public static double distance1(double[] p1,double[] p2){\n  double sum=0;\n  for (int i=0; i < p1.length; i++) {\n    sum+=Math.abs(p1[i] - p2[i]);\n  }\n  return sum;\n}\n", "nl": "Calculates the L<sub>1</sub> (sum of abs) distance between two points.", "id": "45532"}
{"code": "@Override public void start(){\n  m_line.start();\n  super.start();\n}\n", "nl": "Starts the recording. To accomplish this, (i) the line is started and (ii) the thread is started.", "id": "54287"}
{"code": "@Override public void cancel(){\n  bobcatWait.withTimeout(Timeouts.BIG).until(ExpectedConditions.visibilityOf(cancelButton));\n  bobcatWait.withTimeout(Timeouts.BIG).until(WindowActions.clickButton(cancelButton));\n}\n", "nl": "Waits for the cancel button of this dialog to be visible and clicks it.", "id": "34357"}
{"code": "public void enqueueBlocked(E o){\n  try {\n    this.execute(new TaskWrapper<E>(o,_consumerObject));\n  }\n catch (  RejectedExecutionException ree) {\n    if (_logger.isLoggable(Level.INFO)) {\n      _logger.log(Level.INFO,\"Task cannot be accepted for execution.\",ree);\n    }\n  }\n}\n", "nl": "wraps the enqueueBlocked method of the threadpool", "id": "9482"}
{"code": "public Builder cacheOnDisk(boolean cacheOnDisk){\n  this.cacheOnDisk=cacheOnDisk;\n  return this;\n}\n", "nl": "Sets whether loaded image will be cached on disk", "id": "12385"}
{"code": "public AddExpr newAddExpr(Value op1,Value op2){\n  return new JAddExpr(op1,op2);\n}\n", "nl": "Constructs a AddExpr(Immediate, Immediate) grammar chunk.", "id": "56612"}
{"code": "protected void showModel(EpoxyModel<?> model,boolean show){\n  if (model.isShown() == show) {\n    return;\n  }\n  model.show(show);\n  notifyModelChanged(model);\n}\n", "nl": "Sets the visibility of the given model, and notifies that the item changed if the new visibility is different from the previous.", "id": "40831"}
{"code": "public static int convertPxToSp(int pxSize){\n  return Math.round((float)pxSize * getDisplayDensity4Fonts());\n}\n", "nl": "Convert absolute pixels to scale dependent pixels. This scales the size by scale dependent screen density (accessibility setting) and the global display setting for message composition fields", "id": "36489"}
{"code": "public Response writeInt(int i){\n  writeShort((short)((i >> 16) & 0xFFFF));\n  writeShort((short)(i & 0xFFFF));\n  return this;\n}\n", "nl": "Write int.", "id": "8225"}
{"code": "public void addInitStmt(Stmt node){\n  List<Stmt> list=(parent == null || state == null) ? getInitStmtListNoTransform() : getInitStmtList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the InitStmt list.", "id": "6464"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "37990"}
{"code": "public void add(double d){\n  data.add((float)d);\n}\n", "nl": "Adds the given double to this column, after casting it to a float", "id": "22816"}
{"code": "@Override public void render(SpriteBatch sb){\n  for (  UIElement element : elements)   element.render(sb);\n}\n", "nl": "Draws all elements stored in the container", "id": "19783"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_DAY_CANNOT_SELL_AUCTION(String value0){\n  return new SM_SYSTEM_MESSAGE(1400945,value0);\n}\n", "nl": "You have reached the daily Broker limit of %0 Kinah, so the item cannot be listed.", "id": "3273"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARRY_ME_TO_B(String value0){\n  return new SM_SYSTEM_MESSAGE(1201085,value0);\n}\n", "nl": "%0 parried the attack.", "id": "57776"}
{"code": "public String toString(int maxKeysToPrint){\n  return asPriorityQueue().toString(maxKeysToPrint,false);\n}\n", "nl": "Returns a string representation which includes no more than the maxKeysToPrint elements with largest counts.", "id": "24240"}
{"code": "public static boolean before(GenericRecord first,GenericRecord second,String timestampFieldName){\n  return compareTimestamp(first,second,timestampFieldName) == -1;\n}\n", "nl": "Whether the first record was at a point in time before that of the second record.", "id": "16025"}
{"code": "@JsonIgnore @Override public ThetaSketchEstimatePostAggregation withFields(List<PostAggregation> fields){\n  if (fields.size() != 1) {\n    LOG.error(INVALID_NUMBER_OF_FIELDS.logFormat(fields));\n    throw new IllegalArgumentException(INVALID_NUMBER_OF_FIELDS.format(fields));\n  }\n  return withField(fields.get(0));\n}\n", "nl": "SketchEstimate converts the sketch into a number. Hence this method always should have one aggregator", "id": "50550"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_INTERVAL_ME_TO_SELF(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200372,num0,skillname);\n}\n", "nl": "You recovered %num0 HP by using [%SkillName].", "id": "3090"}
{"code": "public static boolean isMap(NewBindingKey key){\n  TypeName typeName=key.getTypeName();\n  if (!(typeName instanceof ParameterizedTypeName)) {\n    return false;\n  }\n  ParameterizedTypeName parameterizedTypeName=(ParameterizedTypeName)typeName;\n  return parameterizedTypeName.rawType.equals(ClassName.get(Map.class));\n}\n", "nl": "Returns if key is a map with type variables.", "id": "49011"}
{"code": "public static final double binomialSuccessProbability(int iNumberOfTrials,int iNumberOfSuccesses,double dSuccessChance){\n  return gr.demokritos.iit.jinsect.utils.factorial(iNumberOfTrials,iNumberOfSuccesses) * Math.pow(dSuccessChance,iNumberOfSuccesses) * Math.pow(1.0 - dSuccessChance,iNumberOfTrials - iNumberOfSuccesses);\n}\n", "nl": "Returns the probability of a given number of successful results after a given number of Bernoulli trials.", "id": "33856"}
{"code": "@Override public Filter createFilter(){\n  return new BeforeExtended();\n}\n", "nl": "Creates the filter.", "id": "3555"}
{"code": "public Constant key(){\n  return key;\n}\n", "nl": "Returns the key of the entry", "id": "8647"}
{"code": "public static ObjectName buildObjectName(String domain,String type,String name) throws MalformedObjectNameException, NullPointerException {\n  return new ObjectName(domain + ':' + TYPE_KEY+ '='+ type+ ','+ NAME_KEY+ '='+ name);\n}\n", "nl": "Build correct ObjectName for GigaSpaces JMX components.", "id": "36608"}
{"code": "@Override public void endCDATA(Augmentations augs) throws XNIException {\n}\n", "nl": "The end of a CDATA section.", "id": "10981"}
{"code": "private static boolean isAlpha(char p_char){\n  return ((p_char >= 'a' && p_char <= 'z') || (p_char >= 'A' && p_char <= 'Z'));\n}\n", "nl": "Determine whether a char is an alphabetic character: a-z or A-Z", "id": "50205"}
{"code": "public boolean isDrawTopYLabelEntryEnabled(){\n  return mDrawTopYLabelEntry;\n}\n", "nl": "returns true if drawing the top y-axis label entry is enabled", "id": "25301"}
{"code": "public static <T>Set<T> stringToSet(String val,Class<T> type){\n  String[] tokens=trim(val).split(\",\");\n  return Arrays.stream(tokens).map(null).collect(Collectors.toSet());\n}\n", "nl": "Converts comma separated string to Set", "id": "23287"}
{"code": "public CarouselOptions maxScrollingDistance(int maxScrollingDistance){\n  mMaxScrollingDistance=maxScrollingDistance;\n  return this;\n}\n", "nl": "Specifies max scrolling distance for carousel view.", "id": "9761"}
{"code": "static void checkParameterIsNotNull(final String parameterName,final Object parameterValue){\n  if (parameterValue == null) {\n    throw new IllegalArgumentException(parameterName + \" cannot be null.\");\n  }\n}\n", "nl": "Checks that a parameter is not null.", "id": "18343"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set mode=\");\n  String mode=np.getLabelRespectCase();\n  np.matchIgnoreCase(\";\");\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.setMode(Comparer.COMPARISON_MODE.valueOfIgnoreCase(mode));\n}\n", "nl": "parses the given command and executes it", "id": "2081"}
{"code": "protected boolean isCacheable(){\n  SimplifiedIntervalList missingIntervals=getPartialIntervalsWithDefault(getResponseContext());\n  SimplifiedIntervalList volatileIntervals=getVolatileIntervalsWithDefault(getResponseContext());\n  return missingIntervals.isEmpty() && volatileIntervals.isEmpty();\n}\n", "nl": "A request is cacheable if it does not refer to partial data.", "id": "51456"}
{"code": "public Expression lessThanEqual(Value v1,Value v2){\n  return new BinaryExpression(v1,v2,ExpressionType.LESS_THAN_OR_EQUAL);\n}\n", "nl": "Return an expression representing the given condition.", "id": "24317"}
{"code": "public void addBodyDecl(BodyDecl node){\n  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the BodyDecl list.", "id": "55771"}
{"code": "protected boolean atAnyOfTokens(TokenKind... kinds){\n  TokenKind current=currentToken();\n  for (  TokenKind kind : kinds) {\n    if (current == kind) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks if the current token matches any one of the expected kinds. Doesn't advance the parser.", "id": "31246"}
{"code": "public void close(){\nsynchronized (lock) {\n    if (closed) {\n      return;\n    }\n    if (cluster != null) {\n      HFactory.shutdownCluster(cluster);\n    }\n    closed=true;\n  }\n}\n", "nl": "Closes hector's connection pool.", "id": "6644"}
{"code": "public static Element addChildElement(Element element,String childElementName,Document document){\n  Element newElement=document.createElement(childElementName);\n  element.appendChild(newElement);\n  return newElement;\n}\n", "nl": "Creates a child element with the given name and appends it to the element child node list.", "id": "6372"}
{"code": "public boolean isEnum(){\n  return kind == Type.TYPE_ENUM;\n}\n", "nl": "Returns true of this is an enum type.", "id": "24818"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SOUL_BOUND_INVALID_STANCE(int value0){\n  return new SM_SYSTEM_MESSAGE(1300489,new DescriptionId(value0));\n}\n", "nl": "You cannot soul-bind an item while %0.", "id": "32219"}
{"code": "protected PhotosReorderPhotosQuery photoId(int value){\n  return unsafeParam(\"photo_id\",value);\n}\n", "nl": "Photo ID.", "id": "7239"}
{"code": "public static void debugLongInfo(String str){\n  debugLongInfo(DEFAULT_TAG,str);\n}\n", "nl": "author  hhj TODO", "id": "28852"}
{"code": "public boolean optimizeScanForSingleObject(){\n  return true;\n}\n", "nl": "return true if we can save iterator creation and get a single entry", "id": "30511"}
{"code": "public void put(String key,Object value){\n  if (key != null && value != null) {\n    urlParamsWithObjects.put(key,value);\n  }\n}\n", "nl": "Adds param with non-string value (e.g. Map, List, Set).", "id": "30759"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapPilotPermit && getId().equals(((AirMapPilotPermit)o).getId());\n}\n", "nl": "Comparison based on ID (Not Permit ID)", "id": "1701"}
{"code": "private Stream<Map.Entry<K,V>> entryStream(){\n  return Stream.concat(delegate.entrySet().stream().filter(null),super.entrySet().stream());\n}\n", "nl": "Get a stream of map entries.", "id": "7489"}
{"code": "public static JavaRDD<List<Writable>> zeromeanUnitVariance(Schema schema,JavaRDD<List<Writable>> data,List<String> skipColumns){\n  DataFrame frame=DataFrames.toDataFrame(schema,data);\n  return DataFrames.toRecords(zeromeanUnitVariance(frame,skipColumns)).getSecond();\n}\n", "nl": "Normalize by zero mean unit variance", "id": "14075"}
{"code": "private String makeSAM(String queryName,String refName,float bitScore,String line) throws IOException {\n  return String.format(\"%s\\t0\\t%s\\t0\\t255\\t*\\t*\\t0\\t0\\t*\\t*\\tAS:i:%d\\t\",queryName,refName,Math.round(bitScore)) + String.format(\"AL:Z:%s\\t\",Basic.replaceSpaces(line,' '));\n}\n", "nl": "make a SAM line", "id": "11403"}
{"code": "public Activity cancel(String action){\n  return m_actions.cancel(action);\n}\n", "nl": "Cancel the Action with the given name, if it has been scheduled.", "id": "52409"}
{"code": "@Override public double value(double z){\n  return evaluate(a,c,z);\n}\n", "nl": "Calculate the function value at the given point.", "id": "17511"}
{"code": "@Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){\n  FieldConfigWindBarbs copy=null;\n  if (fieldConfigBase != null) {\n    copy=new FieldConfigWindBarbs(fieldConfigBase.getCommonData());\n  }\n  return copy;\n}\n", "nl": "Creates a copy of the field.", "id": "46750"}
{"code": "public static void preload(Class<?> clazz){\n  getString(clazz,null);\n}\n", "nl": "Preload a resource bundle.", "id": "7837"}
{"code": "public void requestAssignReturnRoute(int nodeId,int destinationId){\n  enqueue(new AssignReturnRouteMessageClass().doRequest(nodeId,destinationId,getCallbackId()));\n}\n", "nl": "Request the controller to set the return route between two nodes", "id": "13915"}
{"code": "protected MessagesGetChatUsersQueryWithChatIdsFields chatIds(Integer... value){\n  return unsafeParam(\"chat_ids\",value);\n}\n", "nl": "Chat IDs.", "id": "13339"}
{"code": "public void reset(final Plane original){\n  originOffset=original.originOffset;\n  origin=original.origin;\n  u=original.u;\n  v=original.v;\n  w=original.w;\n}\n", "nl": "Reset the instance from another one. <p>The updated instance is completely independant of the original one. A deep reset is used none of the underlying object is shared.</p>", "id": "57200"}
{"code": "public void init$Children(){\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "7765"}
{"code": "private JobDefinition extractJobDefinitionsFromStageDefinition(StageDefinition stageDefinition,String jobDefinitionId){\n  JobDefinition result=stageDefinition.getJobDefinitions().stream().filter(null).findFirst().orElse(null);\n  return result;\n}\n", "nl": "Method return JobDefinition, accepts StageDefinition and JobDefinition Id, filters all JobDefinitions in the provided stage. Returns null if no JobDefinition with provided id is found.", "id": "7249"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PetOrderUseUltraSkill_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200694,skillcaster,skillname);\n}\n", "nl": "The spirit uses its skills because [%SkillCaster] used [%SkillName].", "id": "5501"}
{"code": "public void treeWillExpand(TreeExpansionEvent event) throws ExpandVetoException {\n  if (classificationViewer.isLocked()) {\n    throw new ExpandVetoException(event);\n  }\n  jTree.addChildren((ViewerJTree.MyJTreeNode)event.getPath().getLastPathComponent());\n}\n", "nl": "Invoked whenever a node in the tree is about to be expanded.", "id": "54401"}
{"code": "public void preclose(){\n  preclosed=true;\n}\n", "nl": "Force this element to preclosed status, meaning that an end-tag has been seen but the element cannot yet be closed for structural reasons.", "id": "50378"}
{"code": "public Criteria createCriteria(){\n  Criteria criteria=createCriteriaInternal();\n  if (oredCriteria.size() == 0) {\n    oredCriteria.add(criteria);\n  }\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.hints", "id": "13495"}
{"code": "@Override public void endExternalSubset(Augmentations augs) throws XNIException {\n  fReadingExternalDTD=false;\n}\n", "nl": "The end of the DTD external subset.", "id": "27710"}
{"code": "public void put(String key,InputStream stream,String name,String contentType){\n  if (key != null && stream != null) {\n    streamParams.put(key,new StreamWrapper(stream,name,contentType));\n  }\n}\n", "nl": "Adds an input stream to the request.", "id": "36300"}
{"code": "FieldSpec bean(){\n  return bean.get();\n}\n", "nl": "A field that holds an instance of the bean type.", "id": "44881"}
{"code": "public Builder reuseTiles(Boolean reuseTiles){\n  this.reuseTiles=reuseTiles;\n  return this;\n}\n", "nl": "If true, all the tiles that are not visible after panning are placed in a reuse queue from which they will be fetched when new tiles become visible (as opposed to dynamically creating new ones). This will in theory keep memory usage low and eliminate the need for reserving new memory whenever a new tile is needed. </br> default false", "id": "13779"}
{"code": "@Override public boolean logOut(final String tokenHeader){\n  return true;\n}\n", "nl": "Just returns true. User need to present username and password for each action that requires credential so logout does not do anything for basic authentication", "id": "55390"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeTypeBoostSkillLevel_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200846,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] is in the boost skill state because he used [%SkillName].", "id": "10379"}
{"code": "public Math_Vector sub(Math_Vector other){\n  this.x-=other.x;\n  this.y-=other.y;\n  return this;\n}\n", "nl": "sub the value to this Math_Vector", "id": "21592"}
{"code": "public static TransformResult of(Path path,DummyReference originRef) throws ValidationException, RepoException {\n  return new TransformResult(path,originRef,originRef.getAuthor(),\"test summary\\n\");\n}\n", "nl": "Creates an instance with reasonable defaults for testing.", "id": "44995"}
{"code": "public int allowed_modifier_changes(){\n  String s=soot.PhaseOptions.getString(options,\"allowed-modifier-changes\");\n  if (s.equalsIgnoreCase(\"unsafe\"))   return allowed_modifier_changes_unsafe;\n  if (s.equalsIgnoreCase(\"safe\"))   return allowed_modifier_changes_safe;\n  if (s.equalsIgnoreCase(\"none\"))   return allowed_modifier_changes_none;\n  throw new RuntimeException(\"Invalid value \" + s + \" of phase option allowed-modifier-changes\");\n}\n", "nl": "Allowed Modifier Changes -- . Specify which changes in visibility modifiers are allowed.", "id": "35284"}
{"code": "public FriendsDeleteQuery delete(UserActor actor,int userId){\n  return new FriendsDeleteQuery(getClient(),actor,userId);\n}\n", "nl": "Declines a friend request or deletes a user from the current user's friend list.", "id": "51708"}
{"code": "public FriendsGetSuggestionsQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of suggestions to return.", "id": "25179"}
{"code": "public static int levelToLevelIdx(double level){\n  return (int)((level - 1) * 2);\n}\n", "nl": "Convert a pokemon/trainer level to a <em>level index</em> (<code>levelIdx</code> in code). The mapping is invertible, but level indexes can be used to index an array (like Data.CpM), or seekbars. <p/> Pokemon levels go from 1 to trainerLevelToMaxPokeLevel(trainerLevel), in increments of 0.5. Level indexes go from 0 to trainerLevelToMaxPokeLevelIdx(trainerLevel) in increments of 1. This method adjusts a level to a <em>level index</em> (<code>levelIdx</code>), by doubling it and subtracting 2.", "id": "21498"}
{"code": "private static void pushTransactionStartStamp(Transaction t){\n  Map<Transaction,Timestamp> map=suspendedTxStartStamps.get();\n  Timestamp stamp=transactionStartStamp.get();\n  if (stamp != null) {\n    map.put(t,stamp);\n  }\n else {\n    Debug.logError(\"Error in transaction handling - no start stamp to push.\",module);\n  }\n}\n", "nl": "Put the stamp to remember later", "id": "9700"}
{"code": "public void addEntry(CatchEntry entry){\n  entries.addElement(entry);\n}\n", "nl": "add an entry to the catch table", "id": "38369"}
{"code": "public boolean hasDTD(){\n  return hasDTD;\n}\n", "nl": "Returns the boolean value to inform id DTD was found in the XML file or not", "id": "26609"}
{"code": "public static boolean verifyFileMd5(File file,String md5){\n  if (md5 == null) {\n    return false;\n  }\n  String fileMd5=getMD5(file);\n  if (fileMd5 == null) {\n    return false;\n  }\n  return md5.equals(fileMd5);\n}\n", "nl": "Returns whether the file is a valid file.", "id": "37976"}
{"code": "public void addLive(boolean live){\n  query.append(\" +live:\" + live);\n}\n", "nl": "Adds +live to the query", "id": "14323"}
{"code": "public static boolean isStateCode(String s){\n  if (isEmpty(s))   return defaultEmptyOK;\n  return ((USStateCodes.indexOf(s) != -1) && (s.indexOf(USStateCodeDelimiter) == -1));\n}\n", "nl": "Return true if s is a valid U.S. Postal Code (abbreviation for state).", "id": "19383"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_ME_TO_B(String skillcaster,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200524,skillcaster,skilltarget,skillname);\n}\n", "nl": "[%SkillCaster] converted [%SkillTarget]'s damage to healing by using [%SkillName].", "id": "42838"}
{"code": "public static boolean isSectionExpanded(WebElement section){\n  boolean isExpanded=false;\n  if (!section.getAttribute(HtmlTags.Attributes.CLASS).contains(COLLAPSED_CLASS)) {\n    isExpanded=true;\n  }\n  return isExpanded;\n}\n", "nl": "Checks if section in sidekick is expanded based on section WebElement", "id": "50446"}
{"code": "public static void deleteDirectory(File directory) throws IOException {\n  if (!directory.exists()) {\n    return;\n  }\n  if (!isSymlink(directory)) {\n    cleanDirectory(directory);\n  }\n  if (!directory.delete()) {\n    String message=\"Unable to delete directory \" + directory + \".\";\n    throw new IOException(message);\n  }\n}\n", "nl": "Deletes a directory recursively.", "id": "25893"}
{"code": "public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HE_REJECT_INVITATION(String value0){\n  return new SM_SYSTEM_MESSAGE(1300190,value0);\n}\n", "nl": "%0 has declined your invitation to join the alliance.", "id": "42822"}
{"code": "public void deliveryComplete(final IMqttDeliveryToken token){\n  logger.trace(\"Delivery complete for {}\",token.getMessageId());\n}\n", "nl": "Handles completion of message delivery.", "id": "50262"}
{"code": "public void modifyEnergyStored(int energy){\n  this.energy+=energy;\n  if (this.energy > capacity) {\n    this.energy=capacity;\n  }\n else   if (this.energy < 0) {\n    this.energy=0;\n  }\n}\n", "nl": "This function is included to allow the containing tile to directly and efficiently modify the energy contained in the EnergyStorage. Do not rely on this externally, as not all IEnergyHandlers are guaranteed to have it.", "id": "43935"}
{"code": "public int end(){\n  return start + length;\n}\n", "nl": "return the end position of the token.", "id": "51802"}
{"code": "static public void check(long got,long expected) throws IOException {\n  if (expected != got)   throw new IOException(\"RMA2 file corrupt? Expected: \" + expected + \", got: \"+ got);\n}\n", "nl": "check whether value read is the same as the value expected", "id": "40196"}
{"code": "public boolean interiorContains(S2Point p){\n  return interiorContains(new S2LatLng(p));\n}\n", "nl": "Return true if and only if the given point is contained in the interior of the region (i.e. the region excluding its boundary). The point 'p' does not need to be normalized.", "id": "17016"}
{"code": "public AudioSearchQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of audio files.", "id": "49546"}
{"code": "private void registerDefaultMacros(){\n  macros=new HashMap<>();\n  registerMacro(\"noescp\",new NoescpMacro());\n  registerMacro(\"int\",new IntMacro());\n  registerMacro(\"double\",new DoubleMacro());\n  registerMacro(\"equals\",new EqualsMacro());\n}\n", "nl": "Register the default macros that can be used by the visitor", "id": "23769"}
{"code": "protected void subAppend(LoggingEvent event){\n  if (event.getLevel().toInt() == AuditLevel.AUDIT.toInt()) {\n    currentLevel=AuditLevel.AUDIT.toInt();\n    super.subAppend(event);\n  }\n}\n", "nl": "g Call RollingFileAppender method to append the log...", "id": "12661"}
{"code": "public boolean isDrawBarShadowEnabled(){\n  return mDrawBarShadow;\n}\n", "nl": "returns true if drawing shadows (maxvalue) for each bar is enabled, false if not", "id": "24122"}
{"code": "@Override public boolean isCellEditable(int rowIndex,int columnIndex){\n  return true;\n}\n", "nl": "Checks if is cell editable.", "id": "39266"}
{"code": "@Override public List<Class<? extends ConfigAspect>> mergeDependencies(){\n  return ImmutableList.of();\n}\n", "nl": "Returns an empty list since this aspect does not depend on any other aspects.", "id": "28191"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCFPHeal_Instant_HEAL_ME_TO_B(String skilltarget,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200545,skilltarget,num0,skillname);\n}\n", "nl": "[%SkillTarget]'s flight time has increased by %num0 because you used [%SkillName].", "id": "44695"}
{"code": "public static boolean isFileNewer(File file,File reference){\n  if (reference == null) {\n    throw new IllegalArgumentException(\"No specified reference file\");\n  }\n  if (!reference.exists()) {\n    throw new IllegalArgumentException(\"The reference file '\" + reference + \"' doesn't exist\");\n  }\n  return isFileNewer(file,reference.lastModified());\n}\n", "nl": "Tests if the specified <code>File</code> is newer than the reference <code>File</code>.", "id": "58417"}
{"code": "public QRDecomposition qr(){\n  return new QRDecomposition(this);\n}\n", "nl": "QR Decomposition", "id": "45860"}
{"code": "public static String returnNull(HttpServletRequest request,HttpServletResponse response){\n  return null;\n}\n", "nl": "Return null event. Used as a place holder for events.", "id": "11977"}
{"code": "@Override public void close(){\n  try {\n    raf.close();\n    System.err.println(\"Closing file: \" + file.getName() + \" (\"+ pages+ \"/\"+ data.length+ \" pages)\");\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n  }\n}\n", "nl": "close the array", "id": "8233"}
{"code": "public int writeEncodedArray(EncodedValue encodedValue){\n  int off=data.position();\n  write(encodedValue.data);\n  return off;\n}\n", "nl": "Write EncodedValue/EncodedArray item into current section.", "id": "4331"}
{"code": "@Override public boolean ready() throws IOException {\n  try {\n    return in.ready();\n  }\n catch (  IOException e) {\n    handleIOException(e);\n    return false;\n  }\n}\n", "nl": "Invokes the delegate's <code>ready()</code> method.", "id": "13200"}
{"code": "private Vector1D finiteOrNullPoint(final double x){\n  return Double.isInfinite(x) ? null : new Vector1D(x);\n}\n", "nl": "Build a finite point.", "id": "44582"}
{"code": "public boolean print_graph(){\n  return soot.PhaseOptions.getBoolean(options,\"print-graph\");\n}\n", "nl": "Print Topological Graph -- Print topological graph of transactions. Print a topological graph of the program's transactions in the  format used by the graphviz package.", "id": "30073"}
{"code": "final public void put(String name,Object o){\n  if (context == null) {\n    context=new HashMap<String,Object>();\n  }\n  if (name == null) {\n    return;\n  }\n  if (o == null) {\n    context.remove(name);\n  }\n else {\n    context.put(name,o);\n  }\n  return;\n}\n", "nl": "Put the name=object to the model.", "id": "56626"}
{"code": "public boolean enabled(){\n  return soot.PhaseOptions.getBoolean(options,\"enabled\");\n}\n", "nl": "Enabled -- .", "id": "41370"}
{"code": "public Locale findById(Long localeId){\n  return getLocalesIdMap().get(localeId);\n}\n", "nl": "Returns the locale for the given ID. It searches in the locales map to find a correspondance.", "id": "23512"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoFly_END_A(String value0){\n  return new SM_SYSTEM_MESSAGE(1201141,value0);\n}\n", "nl": "%0 is able to fly again.", "id": "42659"}
{"code": "public INDArray asMatrix(InputStream inputStream) throws IOException {\n  if (channels == 3)   return toBgr(inputStream);\n  try {\n    BufferedImage image=ImageIO.read(inputStream);\n    return asMatrix(image);\n  }\n catch (  IOException e) {\n    throw new IOException(\"Unable to load image\",e);\n  }\n}\n", "nl": "Convert an input stream to a matrix", "id": "28232"}
{"code": "public void build(Context context,SuggestionValue suggestionValue,List<SuggestionRow> suggestionList){\n  if (nextBuilder != null) {\n    nextBuilder.build(context,suggestionValue,suggestionList);\n  }\n}\n", "nl": "Build the suggestion list based on the suggestion value", "id": "43837"}
{"code": "@Override public final Object createInstance(Reader reader){\n  throw new UnsupportedOperationException(\"createInstance\");\n}\n", "nl": "Don't use.", "id": "13505"}
{"code": "public void add(FieldIdEnum fieldId,FieldConfigBase fieldConfig){\n  Map<FieldIdEnum,FieldConfigBase> panelMap=fieldConfigMap.get(panelId);\n  if (panelMap == null) {\n    panelMap=new HashMap<FieldIdEnum,FieldConfigBase>();\n  }\n  panelMap.put(fieldId,fieldConfig);\n}\n", "nl": "Adds the field data manager to the internal structure.", "id": "2756"}
{"code": "@Override public synchronized void remove(String key){\n  boolean deleted=getFileForKey(key).delete();\n  removeEntry(key);\n  if (!deleted) {\n    VolleyLog.d(\"Could not delete cache entry for key=%s, filename=%s\",key,getFilenameForKey(key));\n  }\n}\n", "nl": "Removes the specified key from the cache if it exists.", "id": "37323"}
{"code": "public static String toHex(byte[] data){\n  return new String(Hex.encodeHex(data));\n}\n", "nl": "convert a byte array to hexadecimal", "id": "34539"}
{"code": "@Override public void addDataTag(final SourceDataTag sourceDataTag){\n  dataTagTable.put(sourceDataTag.getId(),sourceDataTag);\n}\n", "nl": "Adds a data tag to be controlled by this activator.", "id": "2137"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "26940"}
{"code": "@Override @Nullable public Object findTemplateSource(@NotNull String name) throws IOException {\n  File file=resolveName(name);\n  TemplateSource templateSource=TemplateSource.open(file);\n  pushTemplateFolder(file.getParentFile());\n  return templateSource;\n}\n", "nl": "This method is called directly from Freemarker", "id": "48429"}
{"code": "public boolean isLoading(){\n  return state.equals(LOADING);\n}\n", "nl": "Check if loading state is shown", "id": "55188"}
{"code": "public String replaceTrickyPhones(String lab){\n  String s=lab;\n  if (trickyPhones.containsKey(lab)) {\n    s=trickyPhones.get(lab);\n  }\n  return s;\n}\n", "nl": "Translation table for labels which are incompatible with HTK or shell filenames See common_routines.pl in HTS training.", "id": "37970"}
{"code": "public boolean cancel(boolean mayInterruptIfRunning){\n  return this.request != null && request.cancel(mayInterruptIfRunning);\n}\n", "nl": "Attempts to cancel this request. This attempt will fail if the request has already completed, has already been cancelled, or could not be cancelled for some other reason. If successful, and this request has not started when cancel is called, this request should never run. If the request has already started, then the mayInterruptIfRunning parameter determines whether the thread executing this request should be interrupted in an attempt to stop the request. <p>&nbsp;</p> After this method returns, subsequent calls to isDone() will always return true. Subsequent calls to isCancelled() will always return true if this method returned true.", "id": "52662"}
{"code": "@NonNull public Builder popTo(@NonNull Object state){\n  while (!isEmpty() && !peek().equals(state)) {\n    pop();\n  }\n  checkArgument(!isEmpty(),String.format(\"%s not found in history\",state));\n  return this;\n}\n", "nl": "Pops the history until the given state is at the top.", "id": "58662"}
{"code": "public void init$Children(){\n  children=new ASTNode[1];\n  setChild(new List(),0);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "36191"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_ENTER_GIVEUP(String value0){\n  return new SM_SYSTEM_MESSAGE(1400184,value0);\n}\n", "nl": "You aborted entering %0. You can try again after 10 seconds.", "id": "18289"}
{"code": "public static byte[] toByteArray(URLConnection urlConn) throws IOException {\n  InputStream inputStream=urlConn.getInputStream();\n  try {\n    return IOUtils.toByteArray(inputStream);\n  }\n  finally {\n    inputStream.close();\n  }\n}\n", "nl": "Get the contents of a <code>URLConnection</code> as a <code>byte[]</code>.", "id": "50612"}
{"code": "public static void d(String tag,String s){\n  if (LOG.DEBUG >= LOGLEVEL)   Log.d(tag,s);\n}\n", "nl": "Debug log message.", "id": "52896"}
{"code": "public boolean isBinaryObject(){\n  return myObject instanceof BinaryObject;\n}\n", "nl": "Determine if this object is a binary object.", "id": "46374"}
{"code": "public static boolean isNegativeInteger(String s){\n  if (isEmpty(s))   return defaultEmptyOK;\n  try {\n    int temp=Integer.parseInt(s);\n    if (temp < 0)     return true;\n    return false;\n  }\n catch (  Exception e) {\n    return false;\n  }\n}\n", "nl": "Returns true if string s is an integer < 0.", "id": "40160"}
{"code": "public Single<AuthResult> signInWithEmailAndPassword(final String _email,final String _password){\n  return observeSingleValue(firebaseAuth.signInWithEmailAndPassword(_email,_password));\n}\n", "nl": "Allows to _signin_ a user with a given email address and password", "id": "14623"}
{"code": "private float computeOverscrollPercent(){\n  if (mOverScrollOffset >= 0) {\n    return mOverScrollOffset / mMaxOverScroll;\n  }\n else {\n    return mOverScrollOffset / mMaxUnderScroll;\n  }\n}\n", "nl": "Determine the current amount of overscroll. If the value is 0, there is no overscroll. If the value is < 0, tabs are overscrolling towards the top or or left. If the value is > 0, tabs are overscrolling towards the bottom or right.", "id": "27322"}
{"code": "public boolean isEnabled(){\n  return enabled;\n}\n", "nl": "is enabled. Has no effect", "id": "38299"}
{"code": "public Socket connect() throws IOException {\n  Socket sock=new Socket();\n  sock.setReuseAddress(true);\n  sock.setSoTimeout(ClientGlobal.g_network_timeout);\n  sock.connect(new InetSocketAddress(this.ip_addr,this.port),ClientGlobal.g_connect_timeout);\n  return sock;\n}\n", "nl": "connect to server", "id": "45443"}
{"code": "public static Float hgToHpa(float hg){\n  return (float)(hg * 33.864);\n}\n", "nl": "Converts pressure in millimeters of mercury (Hg) to hectoPascals (hPa)", "id": "36496"}
{"code": "public boolean isAlive(){\n  if (hasSentData) {\n    if (System.currentTimeMillis() - lastSendTime < TIMEOUT)     return true;\n    return hasReceivedData && lastReceiveTime > lastSendTime;\n  }\n  return true;\n}\n", "nl": "Calculates whether this peer is alive: the peer is alive when the peer hasn't send data yet, or when data is received within the timeout after sending data.", "id": "5849"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapAircraftModel && ((AirMapAircraftModel)o).getModelId().equals(getModelId());\n}\n", "nl": "Comparison based on ID", "id": "28609"}
{"code": "public LookupExtractionFunction withReplaceMissingValueWith(String replaceMissingValueWith){\n  return new LookupExtractionFunction(lookup,retainMissingValue,replaceMissingValueWith,injective,optimize);\n}\n", "nl": "Builds a new LookupExtractionFunction with the given replaceMissingValueWith property,preserves other properties.", "id": "57078"}
{"code": "public double cond(){\n  return new SingularValueDecomposition(this).cond();\n}\n", "nl": "Matrix condition (2 norm)", "id": "57183"}
{"code": "public void onSuccess(int statusCode,JSONArray response){\n  onSuccess(response);\n}\n", "nl": "Fired when a request returns successfully and contains a json array at the base of the response string. Override to handle in your own code.", "id": "41524"}
{"code": "private static String makeGeoString(List<Coordinate> coordinates){\n  return TextUtils.join(\",\",coordinates);\n}\n", "nl": "Formats a list of Coordinates into WKT format", "id": "38358"}
{"code": "public static double distance1(Vector3D v1,Vector3D v2){\n  return v1.distance1(v2);\n}\n", "nl": "Compute the distance between two vectors according to the L<sub>1</sub> norm. <p>Calling this method is equivalent to calling: <code>v1.subtract(v2).getNorm1()</code> except that no intermediate vector is built</p>", "id": "19908"}
{"code": "public boolean isUptoDate(){\n  return true;\n}\n", "nl": "is viewer uptodate?", "id": "594"}
{"code": "public void addTypeParameter(TypeVariable node){\n  List<TypeVariable> list=(parent == null || state == null) ? getTypeParameterListNoTransform() : getTypeParameterList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the TypeParameter list.", "id": "7813"}
{"code": "protected void timeout(){\n}\n", "nl": "The flashing icon disappeared (timed-out), clear the current exception list.", "id": "52825"}
{"code": "private void addFields(SimpleFeatureTypeBuilder b,List<DataSourceFieldInterface> fieldList){\n  for (  DataSourceFieldInterface field : fieldList) {\n    if (isGeometryField(field.getFieldType())) {\n      geometryField.setGeometryFieldName(field.getName());\n    }\n else {\n      b.add(field.getName(),field.getFieldType());\n    }\n  }\n}\n", "nl": "Adds the fields.", "id": "4607"}
{"code": "private static WritableWorkbook openWorkbook(OutputStream outputStream) throws IOException {\n  WorkbookSettings ws=new WorkbookSettings();\n  ws.setEncoding(\"UTF-8\");\n  return Workbook.createWorkbook(outputStream,ws);\n}\n", "nl": "Opens a workbook with UTF-8 encoding.", "id": "24626"}
{"code": "public static List<String> readLines(File file,Charset encoding) throws IOException {\n  InputStream in=null;\n  try {\n    in=openInputStream(file);\n    return IOUtils.readLines(in,Charsets.toCharset(encoding));\n  }\n  finally {\n    IOUtils.closeQuietly(in);\n  }\n}\n", "nl": "Reads the contents of a file line by line to a List of Strings. The file is always closed.", "id": "55040"}
{"code": "public double clamp(double value){\n  return Math.min(Math.max(getMin(),value),getMax());\n}\n", "nl": "Returns the closest value to a number that is within the Range or the number itself if it already is.", "id": "43039"}
{"code": "public static void dropAllTables(SQLiteDatabase db,boolean ifExists){\n  NewFriendDao.dropTable(db,ifExists);\n}\n", "nl": "Drops underlying database table using DAOs.", "id": "54839"}
{"code": "@Override public void close() throws IOException {\n  iterator.close();\n}\n", "nl": "close associated file or database", "id": "16297"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "4748"}
{"code": "protected void stopJobAcquisitionThread(){\n  if (asyncJobAcquisitionThread != null) {\n    try {\n      asyncJobAcquisitionThread.join();\n    }\n catch (    InterruptedException e) {\n      log.warn(\"Interrupted while waiting for the async job acquisition thread to terminate\",e);\n    }\n    asyncJobAcquisitionThread=null;\n  }\n}\n", "nl": "Stops the acquisition thread", "id": "57857"}
{"code": "public static int readSingleByte(InputStream in) throws IOException {\n  byte[] buffer=new byte[1];\n  int result=in.read(buffer,0,1);\n  return (result != -1) ? buffer[0] & 0xff : -1;\n}\n", "nl": "Implements InputStream.read(int) in terms of InputStream.read(byte[], int, int). InputStream assumes that you implement InputStream.read(int) and provides default implementations of the others, but often the opposite is more efficient.", "id": "1105"}
{"code": "public void stop(){\n  mBasoStatus=BasoStatus.ERROR;\n  toggleLayout();\n}\n", "nl": "Show stopped layout", "id": "46403"}
{"code": "public static boolean isEmptyTag(String tagName){\n  return isElement(tagName,EMPTY);\n}\n", "nl": "Returns true if element is declared to be empty. HTML elements are defines as empty in the DTD, not by the document syntax.", "id": "41756"}
{"code": "private void connectToGeoServer(GeoServerConnection connection){\n  GeoServerClientInterface client=connectionMap.get(connection);\n  if (client != null) {\n    client.connect();\n    if (client.isConnected()) {\n      client.retrieveData();\n    }\n  }\n}\n", "nl": "Connect to GeoServer.", "id": "40529"}
{"code": "private static byte to_byte_(int b){\n  assert (b >= 0 && b < 256);\n  return (byte)b;\n}\n", "nl": "Create bytes from integers, since Java is cumbersome in declaring byte constants.", "id": "4875"}
{"code": "public WallEditQuery placeId(Integer value){\n  return unsafeParam(\"place_id\",value);\n}\n", "nl": "ID of the location where the user was tagged.", "id": "2493"}
{"code": "@Override public Dimension minimumLayoutSize(Container target){\n  Dimension minimum=layoutSize(target,false);\n  minimum.width-=(getHgap() + 1);\n  return minimum;\n}\n", "nl": "Returns the minimum dimensions needed to layout the <i>visible</i> components contained in the specified target container.", "id": "815"}
{"code": "private static Object maybeConvertToString(Object value){\n  if (value instanceof Doc) {\n    return ((Doc)value).prettyPrint(Integer.MAX_VALUE);\n  }\n  if (value instanceof Enum) {\n    return value.toString();\n  }\n  return value;\n}\n", "nl": "If the value is a doc or an enum, convert it to a string. Use maximal margin width for this.", "id": "58139"}
{"code": "public static MultiwayPoolBuilder<Object,Object> newBuilder(){\n  return new MultiwayPoolBuilder<Object,Object>();\n}\n", "nl": "Constructs a new builder with no automatic eviction of any kind.", "id": "52049"}
{"code": "public void enableDashedLine(float lineLength,float spaceLength,float phase){\n  mDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);\n}\n", "nl": "Enables the line to be drawn in dashed mode, e.g. like this \"- - - - - -\". THIS ONLY WORKS IF HARDWARE-ACCELERATION IS TURNED OFF. Keep in mind that hardware acceleration boosts performance.", "id": "14533"}
{"code": "private BSPTree<Sphere1D> childBefore(BSPTree<Sphere1D> node){\n  if (isDirect(node)) {\n    return node.getMinus();\n  }\n else {\n    return node.getPlus();\n  }\n}\n", "nl": "Find the child node just before an internal node.", "id": "46787"}
{"code": "public void shutdown(){\n  drivers.stream().filter(null).forEach(null);\n}\n", "nl": "Shutdown all registered drivers", "id": "12834"}
{"code": "public PhotosEditQuery placeStr(String value){\n  return unsafeParam(\"place_str\",value);\n}\n", "nl": "Set place str", "id": "32771"}
{"code": "public void rebuild(){\n  rebuild(true);\n}\n", "nl": "Recompute SSA form. <p> Note: assumes presence of Phi nodes in body that require elimination. If you *know* there are no Phi nodes present, you may prefer to use rebuild(false) in order to skip some transformations during the Phi elimination process.", "id": "36335"}
{"code": "boolean checkAnchorChanged(){\n  return mAnchorView == null && mAnchorId != View.NO_ID;\n}\n", "nl": "Returns true if the anchor id changed to another valid view id since the anchor view was resolved.", "id": "34012"}
{"code": "public Math_Vector mul(double scalar){\n  this.x*=scalar;\n  this.y*=scalar;\n  return this;\n}\n", "nl": "mul the Math_Vector using scalar", "id": "11478"}
{"code": "public static List<? extends Element> childElementList(Element element,String... childElementNames){\n  return childElementList(element,UtilMisc.toSetArray(childElementNames));\n}\n", "nl": "Return a List of Element objects that have the given name and are immediate children of the given element; if name is null, all child elements will be included.", "id": "19599"}
{"code": "public static void assertContains(Complex[] values,Complex z,double epsilon){\n  assertContains(null,values,z,epsilon);\n}\n", "nl": "Fails iff values does not contain a number within epsilon of z.", "id": "56556"}
{"code": "public TapTarget tintTarget(boolean tint){\n  this.tintTarget=tint;\n  return this;\n}\n", "nl": "Specify whether to tint the target's icon with the outer circle's color", "id": "4817"}
{"code": "public Pair<String,String> next(String firstWordInHeader){\n  while (hasNext()) {\n    Pair<String,String> pair=next();\n    if (Basic.getFirstWord(Basic.swallowLeadingGreaterSign(pair.get1())).equals(firstWordInHeader))     return pair;\n  }\n  return null;\n}\n", "nl": "gets the next fastA record for the given first word", "id": "50134"}
{"code": "private static String joinPath(String path1,String path2){\n  File file1=new File(path1);\n  File file2=new File(file1,path2);\n  return file2.getPath();\n}\n", "nl": "IO combining two paths", "id": "26436"}
{"code": "public static TapTarget forBounds(Rect bounds,CharSequence title){\n  return forBounds(bounds,title,null);\n}\n", "nl": "Return a tap target for the specified bounds", "id": "37974"}
{"code": "public TIntArrayList inverseGrep(TIntProcedure condition){\n  TIntArrayList list=new TIntArrayList();\n  for (int i=0; i < _pos; i++) {\n    if (!condition.execute(_data[i])) {\n      list.add(_data[i]);\n    }\n  }\n  return list;\n}\n", "nl": "Searches the list for values which do <b>not</b> satisfy <tt>condition</tt>.  This is akin to *nix <code>grep -v</code>.", "id": "27029"}
{"code": "boolean descendsFrom(ClassFile cf){\n  return descendsFrom(cf.toString());\n}\n", "nl": "Answers whether this class is an immediate descendant (as subclass or as an implementation of an interface) of the given class.", "id": "194"}
{"code": "public FriendsGetOnlineQueryWithMobile offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of friends.", "id": "29002"}
{"code": "public static DataFrame zeromeanUnitVariance(DataFrame frame){\n  return zeromeanUnitVariance(frame,Collections.<String>emptyList());\n}\n", "nl": "Normalize by zero mean unit variance", "id": "422"}
{"code": "private static void defineEntity(String name,char value){\n  if (_byName.get(name) == null) {\n    _byName.put(name,new Integer(value));\n    _byChar.put(new Integer(value),name);\n  }\n}\n", "nl": "Defines a new character reference. The reference's name and value are supplied. Nothing happens if the character reference is already defined. <p/> Unlike internal entities, character references are a string to single character mapping. They are used to map non-ASCII characters both on parsing and printing, primarily for HTML documents. '&lt;amp;' is an example of a character reference.", "id": "26777"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CHAT_CHANNEL_JOIN_TRADE(String value0){\n  return new SM_SYSTEM_MESSAGE(1400240,value0);\n}\n", "nl": "You have joined the %0 trade channel.", "id": "38209"}
{"code": "@Override public void revertToDefaultValue(){\n}\n", "nl": "Revert to default value.", "id": "18628"}
{"code": "public void subTask(String name){\n  if (name != null && !name.equals(\"\")) {\n    super.subTask(name);\n  }\n}\n", "nl": "Don't allow clearing of the subtask. This will stop the flickering of the subtask in the progress dialogs.", "id": "49300"}
{"code": "public PhotosSaveWallPhotoQuery longitude(Float value){\n  return unsafeParam(\"longitude\",value);\n}\n", "nl": "Geographical longitude, in degrees (from \"-180\" to \"180\").", "id": "55934"}
{"code": "public AudioAddAlbumQuery groupId(Integer value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "Community ID (if the album will be created in a community).", "id": "41130"}
{"code": "public static SM_SYSTEM_MESSAGE STR_STIGMA_CANNT_EQUIP_STONE_OUT_OF_AVAILABLE_STIGMA_POINT(String value0){\n  return new SM_SYSTEM_MESSAGE(1300406,value0);\n}\n", "nl": "You need %0 Stigma Shard(s) to equip this Stone.", "id": "54882"}
{"code": "public MarketGetCommentsQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of comments.", "id": "56235"}
{"code": "public EntireTextBuilder addBackgroundRes(@ColorRes int bgColorRes,int start,int end){\n  return addBackground(getColor(mContext,bgColorRes),start,end);\n}\n", "nl": "Add background to text from resources.", "id": "46742"}
{"code": "public static boolean isDark(@NonNull Bitmap bitmap){\n  return isDark(bitmap,bitmap.getWidth() / 2,bitmap.getHeight() / 2);\n}\n", "nl": "Determines if a given bitmap is dark. This extracts a palette inline so should not be called with a large image!! <p> Note: If palette fails then check the color of the central pixel", "id": "17013"}
{"code": "public void __setDaoSession(DaoSession daoSession){\n  this.daoSession=daoSession;\n  myDao=daoSession != null ? daoSession.getFileModelDao() : null;\n}\n", "nl": "called by internal mechanisms, do not call yourself.", "id": "54578"}
{"code": "public static <K,R>Observable<R> switchCase(Callable<? extends K> caseSelector,Map<? super K,? extends ObservableSource<? extends R>> mapOfCases,Scheduler scheduler){\n  return switchCase(caseSelector,mapOfCases,Observable.<R>empty().subscribeOn(scheduler));\n}\n", "nl": "Return a particular one of several possible Observables based on a case selector and run it on the designated scheduler. <p> <img width=\"640\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/switchCase.s.png\" alt=\"\">", "id": "1540"}
{"code": "@Override public boolean isElementContentWhitespace(){\n  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,\"Method not supported\");\n}\n", "nl": "DOM Level 3 CR", "id": "5467"}
{"code": "public void savePosition(){\n  RecordId rid1=s1.getRecordId();\n  RecordId rid2=(s2 == null) ? null : s2.getRecordId();\n  savedPosition=Arrays.asList(rid1,rid2);\n}\n", "nl": "Saves the position of the current record, so that it can be restored at a later time.", "id": "44401"}
{"code": "public static DoubleStream shiftingWindowAveragingLong(LongStream longStream,int rollingFactor){\n  Objects.requireNonNull(longStream);\n  RollingOfLongSpliterator ofLongSpliterator=RollingOfLongSpliterator.of(longStream.spliterator(),rollingFactor);\n  return StreamSupport.stream(ofLongSpliterator,longStream.isParallel()).onClose(null).mapToDouble(null);\n}\n", "nl": "<p>Generates a stream that is computed from a provided long stream by first rolling it in the same way as the <code>roll()</code> method does. The average is then computed on each substream, to form the final double stream. No boxing / unboxing is conducted in the process. <p>The resulting stream has the same number of elements as the provided stream, minus the size of the window width, to preserve consistency of each collection. </p> <p>A <code>NullPointerException</code> will be thrown if the provided stream is null.</p>", "id": "44303"}
{"code": "public static Label createLabel(String name,String value){\n  return new Label().withName(name).withValue(value);\n}\n", "nl": "Create label with given name and value.", "id": "38720"}
{"code": "public static boolean isLegalBlobId(String blobId){\n  return blobId != null && blobId.length() > 0 && blobId.length() <= 255 && BLOB_ID_ALLOWED.matchesAllOf(blobId);\n}\n", "nl": "Blob IDs must be ASCII strings. between 1 and 255 characters in length.  Whitespace, ISO control characters and certain punctuation characters that aren't generally allowed in file names are excluded.", "id": "47786"}
{"code": "@Override public synchronized boolean isProcessAliveType(){\n  return (getAliveType().equals(AliveTimer.ALIVE_TYPE_PROCESS));\n}\n", "nl": "Check whether this alive timer is related to a process alive tag.", "id": "53460"}
{"code": "public void resetInitialIfExistSearchActive(){\n  _initialIfExistSearchActive=false;\n}\n", "nl": "reset the _initialIfExistSearchActive indicator", "id": "44527"}
{"code": "public int size(){\n  return size;\n}\n", "nl": "Get the number of elements stored in the map.", "id": "30833"}
{"code": "public ResourceLazyLoadingScript parameter(String name,Object value){\n  if (parameters == null) {\n    parameters=new HashMap<String,Object>();\n  }\n  parameters.put(name,value);\n  return this;\n}\n", "nl": "Puts a parameter that can be used during script execution.", "id": "16788"}
{"code": "public static void write(File file,CharSequence data,Charset encoding) throws IOException {\n  write(file,data,encoding,false);\n}\n", "nl": "Writes a CharSequence to a file creating the file if it does not exist.", "id": "45969"}
{"code": "public void java_io_ObjectInputStream_allocateNewObject(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  throw new NativeMethodNotSupportedException(method);\n}\n", "nl": "Serialization has to be avoided by static analyses, since each object comes out of the same place. private static native java.lang.Object allocateNewObject(java.lang.Class, java.lang.Class) throws java.lang.InstantiationException,  java.lang.IllegalAccessException;", "id": "1175"}
{"code": "public boolean rerun_jb(){\n  return soot.PhaseOptions.getBoolean(options,\"rerun-jb\");\n}\n", "nl": "Reconstruct Jimple body after inlining -- . When a method with array parameters is inlined, its variables  may need to be assigned different types than they had in the  original method to produce compilable code. When this option is  set, Soot re-runs the Jimple Body pack on each method body which  has had another method inlined into it so that the typing  algorithm can reassign the types.", "id": "23137"}
{"code": "public void addAddendum(String word,String partOfSpeech,String[] phones){\n  String pos=fixPartOfSpeech(partOfSpeech);\n  if (!partsOfSpeech.contains(pos)) {\n    partsOfSpeech.add(pos);\n  }\n  addenda.put(word + pos,phones);\n}\n", "nl": "Adds a word to the addenda.", "id": "50282"}
{"code": "@NotNull public IdentificationSet identifyPersonInGroup(@NotNull String personGroupId,@NotNull String imageUrl){\n  Face singleFace=findSingleFace(imageUrl);\n  return identifyPersonInGroup(personGroupId,singleFace);\n}\n", "nl": "Identifies a person in a group.", "id": "51003"}
{"code": "public static Patterns jars(String[] includes,String[] excludes){\n  return new Patterns(includes,excludes);\n}\n", "nl": "Sets the jar patterns to scan", "id": "2658"}
{"code": "public static FifoSupport fromOld(boolean isFifo){\n  return isFifo ? FifoSupport.ALL : FifoSupport.OFF;\n}\n", "nl": "This method is used to translate from 'Old' binary fifo to new tri-state fifo. false means no fifo, true means always.", "id": "22146"}
{"code": "@Override public int hashCode(){\n  int result=1;\n  final Iterator<?> iter=iterator();\n  while (iter.hasNext())   result=31 * result + Objects.hashCode(iter.next());\n  return result;\n}\n", "nl": "List hashCode: the hashcode of a list is a function of each of its elements. The hashCode for a list is defined in the documentation of the List interface: https://docs.oracle.com/javase/7/docs/api/java/util/List.html#hashCode%28%29 Note that Lombok won't generate the correct equals() and hashCode(), as it will compare the members of the object, none of which has a defined equality and thus will never compare equal.", "id": "21027"}
{"code": "public static double meanDifference(final double[] sample1,final double[] sample2) throws MathIllegalArgumentException {\n  return sumDifference(sample1,sample2) / sample1.length;\n}\n", "nl": "Returns the mean of the (signed) differences between corresponding elements of the input arrays -- i.e., sum(sample1[i] - sample2[i]) / sample1.length.", "id": "37440"}
{"code": "@Override public void actionPerformed(ActionEvent e){\n}\n", "nl": "Method actionPerformed.", "id": "635"}
{"code": "public AemList clear(){\n  for (  AemListItem item : this) {\n    removeItem(item);\n  }\n  return this;\n}\n", "nl": "Clears the list.", "id": "8725"}
{"code": "public static char[] toCharArray(InputStream is) throws IOException {\n  return toCharArray(is,Charset.defaultCharset());\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a character array using the default character encoding of the platform. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>.", "id": "45139"}
{"code": "public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){\n  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());\n}\n", "nl": "scale image", "id": "19088"}
{"code": "public SiteAdminPage createNewPage(String title,String templateName){\n  openCreatePageWindow();\n  createPageWindow.createPage(title,templateName);\n  grid.waitForLoaderNotPresent();\n  return this;\n}\n", "nl": "Creates a new page based on the provided values. name is omitted (default one is set by AEM). During creation specified template is used in CreatePageWindow", "id": "13720"}
{"code": "public boolean isCallerValid(Context context,int authRequirements){\n  return isCallerValid(context,authRequirements,\"\");\n}\n", "nl": "Returns whether the callers of the current transaction matches the given authentication requirements.", "id": "52729"}
{"code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"show window=pagesetup;\");\n}\n", "nl": "action to be performed", "id": "1826"}
{"code": "public void onContentLoadStarted(String url){\n}\n", "nl": "Called when content started loading in the panel.", "id": "34883"}
{"code": "@Override public boolean equals(Object other){\n  boolean result=false;\n  if (other instanceof DiphoneUnit) {\n    DiphoneUnit that=(DiphoneUnit)other;\n    result=(this.left.equals(that.left) && this.right.equals(that.right));\n  }\n  return result;\n}\n", "nl": "inspired by http://www.artima.com/lejava/articles/equality.html", "id": "48139"}
{"code": "void removedAttrNode(AttrImpl attr,NodeImpl oldOwner,String name){\n}\n", "nl": "A method to be called when an attribute node has been removed", "id": "12828"}
{"code": "public int indexOf(Split split){\n  Integer index=(Integer)split2index.get(split);\n  if (index == null)   return -1;\n else   return index;\n}\n", "nl": "gets the index of the split, if present, otherwise -1", "id": "56206"}
{"code": "public static String toString(URI uri) throws IOException {\n  return toString(uri,Charset.defaultCharset());\n}\n", "nl": "Gets the contents at the given URI.", "id": "48984"}
{"code": "public static void writeLines(File file,String encoding,Collection<?> lines,boolean append) throws IOException {\n  writeLines(file,encoding,lines,null,append);\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to the specified <code>File</code> line by line, optionally appending. The specified character encoding and the default line ending will be used.", "id": "41451"}
{"code": "private void toggleMenuDrawer(){\n  if (isMenuDrawerOpen()) {\n    closeMenuDrawer();\n  }\n else {\n    openMenuDrawer();\n  }\n}\n", "nl": "Used to toggle the menu drawer", "id": "25630"}
{"code": "@Override public WebElement findElement(){\n  SearchContext context=scopeFactory instanceof ParentElementLocatorProvider && !globalCurrentScope ? ((ParentElementLocatorProvider)scopeFactory).getCurrentScope().findElement() : searchContext;\n  return context.findElement(selector);\n}\n", "nl": "Constructs a scope out of the scope factory and the parent field, then searches for field with selector in this scope.", "id": "31652"}
{"code": "public boolean pointsToSetEquals(Object other){\n  if (this == other) {\n    return true;\n  }\n  if (!(other instanceof AllocAndContextSet)) {\n    return false;\n  }\n  AllocAndContextSet otherPts=(AllocAndContextSet)other;\n  return superSetOf(otherPts,this) && superSetOf(this,otherPts);\n}\n", "nl": "Returns <code>true</code> if and only if other holds the same alloc nodes as this. Note that equals() is not overwritten on purpose. This is because Spark relies on comparison by object identity.", "id": "35256"}
{"code": "@Override public synchronized boolean isActive(){\n  return this.active;\n}\n", "nl": "Check whether this alive timer is currently active. An alive timer is considered active it has been started and has not expired yet.", "id": "10685"}
{"code": "private void changeStatusBarColor(){\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n    Window window=getWindow();\n    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\n    window.setStatusBarColor(Color.TRANSPARENT);\n  }\n}\n", "nl": "Making notification bar transparent", "id": "31055"}
{"code": "public GroupsBanUserQuery commentVisible(Boolean value){\n  return unsafeParam(\"comment_visible\",value);\n}\n", "nl": "true - text of comment will be visible to the user false - text of comment will be invisible to the user (default)", "id": "47093"}
{"code": "public NewsfeedAddBanQuery userIds(Integer... value){\n  return unsafeParam(\"user_ids\",value);\n}\n", "nl": "Set user ids", "id": "44705"}
{"code": "@Override public WebElement findElementByXPath(String xPath){\n  return ((FindsByXPath)super.getWrappedDriver()).findElementByXPath(xPath);\n}\n", "nl": "Finds element by xpath.", "id": "49647"}
{"code": "public MarketSearchQueryWithExtended offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset based on a first matching item to get a certain items subset", "id": "5413"}
{"code": "private boolean checkTombStones(int level){\nswitch (level) {\ncase 1:\n    if (getNpcs(702673).isEmpty() && getNpcs(702674).isEmpty() && getNpcs(702675).isEmpty()) {\n      return true;\n    }\n  break;\ncase 3:\nbreak;\n}\nreturn false;\n}\n", "nl": "When TombStones are Dead, first Door opens 457 = First Door in Tormet > 118 after second Boss 64 = Second Door in Terror", "id": "43281"}
{"code": "final void persistUpdatedAlarm(Alarm newAlarm,boolean showSnackbar){\n  mAlarmController.scheduleAlarm(newAlarm,showSnackbar);\n  mAlarmController.save(newAlarm);\n}\n", "nl": "Helper method that should be called each time a change is made to the underlying alarm. We should schedule a new alarm with the AlarmManager any time a change is made, even when it was not the alarm's time that changed. This is so that we cancel and update the PendingIntent's extra data with the most up-to-date Alarm's values. The effect of this is to guarantee that the Intent that will launch RingtoneActivity has the most up-to-date extra data about the updated alarm.", "id": "17060"}
{"code": "public static byte[] CPQMessage(byte message){\n  PacketWriter pw=new PacketWriter();\n  pw.writeShort(SendPacketOpcode.MONSTER_CARNIVAL_MESSAGE.getValue());\n  pw.write(message);\n  return pw.getPacket();\n}\n", "nl": "Sends a CPQ Message Possible values for <code>message</code>:<br> 1: You don't have enough CP to continue. 2: You can no longer summon the Monster. 3: You can no longer summon the being. 4: This being is already summoned. 5: This request has failed due to an unknown error.", "id": "9432"}
{"code": "public void toggleSelection(final int location){\n  this.selectItem(location,!this.selectedItems.get(location));\n}\n", "nl": "Toggle selection of item.", "id": "1451"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonTotem_A_TO_SELF(String skillcaster,String value0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200885,skillcaster,value0,skillname);\n}\n", "nl": "[%SkillCaster] summoned %0 by using [%SkillName].", "id": "14268"}
{"code": "@Override protected void flowThrough(FlowSet<N> in,N block,FlowSet<N> out){\n  in.copy(out);\n  out.add(block);\n}\n", "nl": "We compute out straightforwardly.", "id": "17221"}
{"code": "private void checkParameters(double lower,double upper,double confidence){\n  if (lower >= upper) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper);\n  }\n  if (confidence <= 0 || confidence >= 1) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_BOUNDS_CONFIDENCE_LEVEL,confidence,0,1);\n  }\n}\n", "nl": "Verifies that (lower, upper) is a valid non-empty interval and confidence is strictly between 0 and 1.", "id": "52414"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_INTERVAL_ME_TO_B(String skilltarget,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200505,skilltarget,num0,skillname);\n}\n", "nl": "[%SkillTarget]'s flight time decreased by %num0 due to the effect of [%SkillName].", "id": "57828"}
{"code": "private void initBackupComponents() throws SpaceComponentsInitializeException {\n  for (Iterator<ISpaceComponentsHandler> iterator=_componentsHandlers.iterator(); iterator.hasNext(); ) {\n    ISpaceComponentsHandler handler=iterator.next();\n    if (!handler.isRecoverySupported())     handler.initComponents(false);\n  }\n}\n", "nl": "Initialize backup component that can't be run during recovery.", "id": "11277"}
{"code": "public ViewsAnimator withEndAction(@NonNull final Runnable endAction){\n  FunctionUtils.checkParameterIsNotNull(\"endAction\",endAction);\n  this.endAction=endAction;\n  return this;\n}\n", "nl": "Defines end action callback.", "id": "13912"}
{"code": "public double secondsSinceStart(){\n  return (timeSinceStart()) / 1000.0;\n}\n", "nl": "Returns the number of seconds since the timer started", "id": "40247"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_OPTION_IT_CAN_NOT_BE_GIVEN_OPTION_MORE_TIME(String value0){\n  return new SM_SYSTEM_MESSAGE(1300461,value0);\n}\n", "nl": "%0 cannot be socketed with Manastone.", "id": "26956"}
{"code": "public void addServiceName(String name){\n  if (name != null) {\n    this.serviceNameSet.add(name);\n  }\n}\n", "nl": "Adds a service name to this context.", "id": "38957"}
{"code": "@Override protected void processPolar(double[] r,double[] phi){\n  for (int i=0; i < r.length; i++) {\n    phi[i]=MathUtils.TWOPI * Math.random();\n  }\n}\n", "nl": "Perform the random phase manipulation.", "id": "13441"}
{"code": "public static boolean isEnRoute(String cc){\n  String first4digs=cc.substring(0,4);\n  if ((cc.length() == 15) && (first4digs.equals(\"2014\") || first4digs.equals(\"2149\")))   return isCreditCard(cc);\n  return false;\n}\n", "nl": "Checks to see if the cc number is a valid EnRoute number", "id": "11753"}
{"code": "public void restart(){\n  mInit=false;\n  launchInspector(WXEnvironment.sRemoteDebugMode);\n  if (mWXBridge == null) {\n    mWXBridge=new WXBridge();\n  }\n}\n", "nl": "Model switch. For now, debug model and release model are supported", "id": "51005"}
{"code": "public void press(int mask){\n  controller.mousePress(mask);\n}\n", "nl": "Press mouse mask", "id": "30560"}
{"code": "public Builder riseOffset(Number riseOffset){\n  this.riseOffset=riseOffset;\n  return this;\n}\n", "nl": "The z-index offset used for the riseOnHover feature. </br> default 250", "id": "3217"}
{"code": "public void addBodyDecl(BodyDecl node){\n  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the BodyDecl list.", "id": "29822"}
{"code": "private void removeOptionFields(Box box,GraphicPanelFieldManager fieldConfigManager){\n  if (optionPanel != null) {\n    box.remove(optionPanel);\n    for (    FieldConfigBase field : optionFieldList) {\n      fieldConfigManager.removeField(field);\n    }\n    optionFieldList.clear();\n    optionPanel=null;\n    box.revalidate();\n  }\n}\n", "nl": "Removes the option fields from the previous selection.", "id": "35069"}
{"code": "@Strippable(side=Side.CLIENT) public GUIHandler registerGUI(String id,Function<GUIContext,GuiScreen> creator){\n  guis.put(id,creator);\n  return this;\n}\n", "nl": "Registers a GUI creator for the given ID", "id": "47145"}
{"code": "@Override public <T extends ClientRequestResult>Collection<T> sendRequest(final JsonRequest<T> jsonRequest,final String queueName,final int timeout) throws JMSException {\n  ClientRequestReportListener reportListener=null;\n  return sendRequest(jsonRequest,queueName,timeout,reportListener);\n}\n", "nl": "ActiveMQ-specific implementation since need to create topic.", "id": "45862"}
{"code": "public static <T>void writeArray(PacketBuffer buf,T[] value,BiConsumer<PacketBuffer,T> writer){\n  buf.writeInt(value.length);\n  for (  T t : value) {\n    writer.accept(buf,t);\n  }\n}\n", "nl": "Writes an array to the buffer", "id": "17602"}
{"code": "public DatabaseGetRegionsQuery q(String value){\n  return unsafeParam(\"q\",value);\n}\n", "nl": "Search query.", "id": "38280"}
{"code": "@Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){\n  FieldConfigTTF copy=null;\n  if (fieldConfigBase != null) {\n    copy=new FieldConfigTTF(fieldConfigBase.getCommonData());\n  }\n  return copy;\n}\n", "nl": "Creates a copy of the field.", "id": "40418"}
{"code": "public String decrypt(String input){\n  if (input == null || input.length() == 0) {\n    return input;\n  }\n  byte[] inputBytes=input.getBytes(UTF_8);\n  byte[] outputBytes=decrypt(inputBytes);\n  return new String(outputBytes,UTF_8);\n}\n", "nl": "Decrypts the provided string.", "id": "30389"}
{"code": "public boolean isApplicable(){\n  ImportBlastDialog importBlastDialog=(ImportBlastDialog)getParent();\n  return !importBlastDialog.getFormatCBox().getSelectedItem().toString().equalsIgnoreCase(\"daa\");\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "34228"}
{"code": "public PhotosGetMarketUploadServerQuery cropX(Integer value){\n  return unsafeParam(\"crop_x\",value);\n}\n", "nl": "X coordinate of the crop left upper corner.", "id": "25082"}
{"code": "protected boolean isEnabledForAddedResources(){\n  return true;\n}\n", "nl": "Method isEnabledForAddedResources.", "id": "35563"}
{"code": "public double cond(){\n  return new SingularValueDecomposition(this).cond();\n}\n", "nl": "Matrix condition (2 norm)", "id": "471"}
{"code": "public String aggregatedName(){\n  return \"SideEffectAttribute\";\n}\n", "nl": "Return name of the resulting aggregated tag.", "id": "57817"}
{"code": "public boolean contains(int level){\n  for (  Expand expand : warehouseExpands) {\n    if (expand.getLevel() == level) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Returns true if list contains level", "id": "34940"}
{"code": "public boolean interiorContains(S2Point p){\n  return isFull() || S2Point.sub(axis,p).norm2() < 2 * height;\n}\n", "nl": "Return true if and only if the given point is contained in the interior of the region (i.e. the region excluding its boundary). 'p' should be a unit-length vector.", "id": "36066"}
{"code": "public int size(){\n  return fDepth;\n}\n", "nl": "Returns the size of the stack.", "id": "29098"}
{"code": "public static void v(String tag,String s){\n  if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,s);\n}\n", "nl": "Verbose log message.", "id": "47149"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DashATK_A_TO_ME(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200651,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] has inflicted %num0 damage on you by using [%SkillName].", "id": "32663"}
{"code": "private static void startIntentIfPossible(Context context,Intent intent){\n  if (isActivityAvailableForIntent(context,intent)) {\n    context.startActivity(intent);\n  }\n}\n", "nl": "Starts an Activity if it is exists", "id": "12102"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_Instant_HEAL_ME_TO_B(String skilltarget,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200536,skilltarget,num0,skillname);\n}\n", "nl": "[%SkillTarget] recovered %num0 MP because you used [%SkillName].", "id": "7447"}
{"code": "public boolean addAbyssSkill(Player player,int skillId,int skillLevel){\n  return addSkill(player,skillId,skillLevel,false,false,PersistentState.NOACTION);\n}\n", "nl": "Add temporary skill which will not be saved in db", "id": "32267"}
{"code": "public void add(int[] vals){\n  add(vals,0,vals.length);\n}\n", "nl": "Adds the values in the array <tt>vals</tt> to the end of the list, in order.", "id": "35653"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CloseAerial_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200495,skilltarget,skillname);\n}\n", "nl": "You released [%SkillTarget] from the Aerial Snare by using [%SkillName].", "id": "54967"}
{"code": "@Override public boolean validateLabel(String label){\n  Objects.requireNonNull(label,\"label cannot be null\");\n  return !labels.contains(label);\n}\n", "nl": "Checks the given label can be added/removed to/from a vertex.", "id": "1487"}
{"code": "@Override public Node cloneNode(boolean deep){\n  CoreDocumentImpl newdoc=new CoreDocumentImpl();\n  callUserDataHandlers(this,newdoc,UserDataHandler.NODE_CLONED);\n  cloneNode(newdoc,deep);\n  return newdoc;\n}\n", "nl": "Deep-clone a document, including fixing ownerDoc for the cloned children. Note that this requires bypassing the WRONG_DOCUMENT_ERR protection. I've chosen to implement it by calling importNode which is DOM Level 2.", "id": "31385"}
{"code": "@Override public void attributeSelection(String field){\n}\n", "nl": "Attribute selection.", "id": "8472"}
{"code": "private void handleUpdateTimeMessage(){\n  invalidate();\n  if (shouldTimerBeRunning()) {\n    long timeMs=System.currentTimeMillis();\n    long delayMs=INTERACTIVE_UPDATE_RATE_MS - (timeMs % INTERACTIVE_UPDATE_RATE_MS);\n    mUpdateTimeHandler.sendEmptyMessageDelayed(MSG_UPDATE_TIME,delayMs);\n  }\n}\n", "nl": "Handle updating the time periodically in interactive mode.", "id": "50739"}
{"code": "public void addChangeListener(ChangeListener cl){\n  if (!m_listeners.contains(cl))   m_listeners.add(cl);\n}\n", "nl": "Add a change listener to listen to this component.", "id": "24335"}
{"code": "public static float convertDpToPixel(float dp,Context context){\n  Resources resources=context.getResources();\n  DisplayMetrics metrics=resources.getDisplayMetrics();\n  float px=dp * (metrics.densityDpi / 160f);\n  return px;\n}\n", "nl": "This method converts dp unit to equivalent pixels, depending on device density.", "id": "34598"}
{"code": "public String geom_dump_verbose(){\n  return soot.PhaseOptions.getString(options,\"geom-dump-verbose\");\n}\n", "nl": "Verbose dump file -- Filename for detailed execution log. If you want to save the geomPTA analysis information  for future analysis, please provide a file name. \t\t\t\t\t\t", "id": "43076"}
{"code": "public void onScrollToClose(){\n}\n", "nl": "Invoke when scroll percent over the threshold for the first time", "id": "27065"}
{"code": "@Override public void installUpdates(@NotNull Collection<UpdatableExternalComponent> request){\n  final List<RemotePackage> packages=Lists.newArrayList();\n  for (  UpdatableExternalComponent p : request) {\n    packages.add((RemotePackage)p.getKey());\n  }\n  new UpdateInfoDialog(true,packages).show();\n}\n", "nl": "Install the given new versions of components.", "id": "34724"}
{"code": "protected DocsSaveQuery file(String value){\n  return unsafeParam(\"file\",value);\n}\n", "nl": "This parameter is returned when the file is uploaded to the server.", "id": "32950"}
{"code": "public void rememberTransition(@NonNull final View coveringView,@NonNull final PointF touchPoint){\n  this.coveringView=coveringView;\n  this.touchPoint=touchPoint;\n}\n", "nl": "Remember transition.", "id": "19152"}
{"code": "public boolean useAuthor(String userId){\nswitch (mode) {\ncase PASS_THRU:\n    return true;\ncase USE_DEFAULT:\n  return false;\ncase WHITELIST:\nreturn whitelist.contains(userId);\ndefault :\nthrow new IllegalStateException(String.format(\"Mode '%s' not implemented.\",mode));\n}\n}\n", "nl": "Returns true if the user can be safely used.", "id": "50784"}
{"code": "@Override public void endDocument(Augmentations augs) throws XNIException {\n}\n", "nl": "The end of the document.", "id": "35858"}
{"code": "public boolean haveUnread(){\n  for (  Letter letter : mails.values()) {\n    if (letter.isUnread()) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Check whether mailbox contains empty letters", "id": "43625"}
{"code": "@Override public void characters(char ch[],int start,int length) throws SAXException {\n  return;\n}\n", "nl": "The SAX <code>characters</code> method does nothing.", "id": "40463"}
{"code": "public static char[] toCharArray(Reader input) throws IOException {\n  CharArrayWriter sw=new CharArrayWriter();\n  copy(input,sw);\n  return sw.toCharArray();\n}\n", "nl": "Get the contents of a <code>Reader</code> as a character array. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedReader</code>.", "id": "47927"}
{"code": "@Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {\n}\n", "nl": "Ignorable whitespace. For this method to be called, the document source must have some way of determining that the text containing only whitespace characters should be considered ignorable. For example, the validator can determine if a length of whitespace characters in the document are ignorable based on the element content model.", "id": "54710"}
{"code": "@Override public void reset(){\n  idx=mark;\n}\n", "nl": "Reset the reader to the last marked position (or the beginning if mark has not been called).", "id": "47487"}
{"code": "public Expression notEqual(Value v1,Value v2){\n  return new BinaryExpression(v1,v2,ExpressionType.NOT_EQUAL);\n}\n", "nl": "Return an expression representing the given condition.", "id": "6045"}
{"code": "public TypeVariable typeVariable(Type type){\n  return typeVariable(hierarchy.typeNode(type));\n}\n", "nl": "Get type variable for the given type.", "id": "56324"}
{"code": "public static void main(String[] args){\n  BowlingBall simulation=new BowlingBall();\n  simulation.run();\n}\n", "nl": "Entry point for the example application.", "id": "18411"}
{"code": "public boolean hasNext(){\n  return index < bits.length;\n}\n", "nl": "Returns true if there are more set bits in the BitVector; false otherwise.", "id": "42930"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Blind_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200430,skilltarget,skillname);\n}\n", "nl": "You blinded [%SkillTarget] by using [%SkillName].", "id": "14876"}
{"code": "public MessagesMarkAsImportantQuery messageIds(List<Integer> value){\n  return unsafeParam(\"message_ids\",value);\n}\n", "nl": "IDs of messages to mark as important.", "id": "45223"}
{"code": "public static IBaseResourceStorageFactory current(){\n  return currentFactory;\n}\n", "nl": "Returns the current factory.", "id": "990"}
{"code": "public synchronized boolean hasRef(long gen){\n  Integer rc=genRefCounts.get(gen);\n  if (rc == null) {\n    return false;\n  }\n else {\n    assert rc.intValue() > 0;\n    return true;\n  }\n}\n", "nl": "True if this generation is still referenced by at least one snapshot.", "id": "21662"}
{"code": "private void clear(){\n  stop();\n  for (  View view : mViews) {\n    removeView(view);\n  }\n  mViews.clear();\n}\n", "nl": "Remove all views and animators.", "id": "8930"}
{"code": "public static final Vertex locateVertexInGraph(UniqueVertexGraph gGraph,String sToFind){\n  return gGraph.locateVertex(new VertexImpl(sToFind));\n}\n", "nl": "Looks up a vertex, based on its label, within a given graph.", "id": "38417"}
{"code": "public static TemplateParser create(){\n  return new TemplateParser();\n}\n", "nl": "Create a template parser", "id": "2643"}
{"code": "public void updateLastLogin(){\n  this.lastLogin=new Date();\n}\n", "nl": "Sets the last login property to the current date.", "id": "34729"}
{"code": "public void clearValues(){\n  if (mDataSets != null) {\n    mDataSets.clear();\n  }\n  notifyDataChanged();\n}\n", "nl": "Clears this data object from all DataSets and removes all Entries. Don't forget to invalidate the chart after this.", "id": "14428"}
{"code": "protected void initLinkTable(){\n  m_links=createLinkTable();\n  IntIterator edges=getEdgeTable().rows();\n  while (edges.hasNext()) {\n    updateDegrees(edges.nextInt(),1);\n  }\n}\n", "nl": "Initialize the link table, which holds adjacency lists for this graph.", "id": "4963"}
{"code": "public static String bind(String id,String binding1,String binding2){\n  return bind(id,new String[]{binding1,binding2});\n}\n", "nl": "Lookup the message with the given ID in this catalog and bind its substitution locations with the given strings.", "id": "53035"}
{"code": "protected static LazyNode cValueTrue(int index){\n  return new LazyNode(VALUE_TRUE,index);\n}\n", "nl": "Convenience method to create a new token with the type set to a boolean true value and with the starting index set to the given index.", "id": "47734"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_SLAYER_UP_LEVEL(String value0){\n  return new SM_SYSTEM_MESSAGE(1400143,value0);\n}\n", "nl": "You are now in %0 state because you've killed too many lower level targets in the opposition territory.", "id": "16259"}
{"code": "public synchronized boolean hasTimedOut(){\n  return timedOut;\n}\n", "nl": "Returns true if the observed process was killed by this observer.", "id": "34615"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_WeaponStatUp_A_TO_SELF(String skillcaster,String value0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200888,skillcaster,value0,skillname);\n}\n", "nl": "[%SkillCaster] changed his %0 by using [%SkillName].", "id": "16980"}
{"code": "@Override public void onCaptureFailed(Throwable e){\n}\n", "nl": "Is called when an error was occurred during screen capturing.", "id": "44757"}
{"code": "public String createToken(String ipOfClient){\n  cleanExpiredTokens();\n  if (this.tokens.size() < CONCURRENT_TOKEN_LIMIT) {\n    Token tkn=new Token(ipOfClient);\n    String tokenuid=UUID.randomUUID().toString();\n    this.tokens.put(tokenuid,tkn);\n    return tokenuid;\n  }\n  return null;\n}\n", "nl": "Generate a token for this client ip address.", "id": "17729"}
{"code": "public final boolean containsKey(String name){\n  return mMap.containsKey(name);\n}\n", "nl": "Returns true iff a key of the given name exists in the format.", "id": "56901"}
{"code": "public static BigInteger pow(final BigInteger k,int e) throws MathIllegalArgumentException {\n  if (e < 0) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.EXPONENT,e);\n  }\n  return k.pow(e);\n}\n", "nl": "Raise a BigInteger to an int power.", "id": "21769"}
{"code": "public boolean isLoaded(MapType mapType){\n  return loadedMaps.contains(mapType);\n}\n", "nl": "is the named parsing method loaded", "id": "40175"}
{"code": "protected GroupsReorderLinkQuery groupId(int value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "Community ID.", "id": "6008"}
{"code": "private static QueryTask buildRegistryQueryByGroup(String tenantLink){\n  Query groupClause=QueryUtil.addTenantGroupAndUserClause(tenantLink);\n  return buildRegistryQuery(groupClause);\n}\n", "nl": "Create a query to return all RegistryState links within a group or global RegistryState links if the group is null/empty", "id": "42496"}
{"code": "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return AVERAGE_LOAD;\ncase 2:\n  return OLD_GC;\ncase 3:\nreturn THREAD_NUM;\ncase 4:\nreturn QUEUE_SIZE;\ncase 5:\nreturn METHOD_QPS_MAP;\ndefault :\nreturn null;\n}\n}\n", "nl": "Find the _Fields constant that matches fieldId, or null if its not found.", "id": "5899"}
{"code": "public static boolean isAnnotationPresent(Method method,Class<? extends Annotation> annotationType){\n  return org.springframework.core.annotation.AnnotationUtils.findAnnotation(method,annotationType) != null;\n}\n", "nl": "Check to see if annotation is present on a given Method, take into account class hierarchy.", "id": "13988"}
{"code": "public long maxSize(){\n  return maxSize;\n}\n", "nl": "Returns the maximum number of bytes that this cache should use to store its data.", "id": "10427"}
{"code": "public FileEntry newChildInstance(File file){\n  return new FileEntry(this,file);\n}\n", "nl": "Create a new child instance. <p> Custom implementations should override this method to return a new instance of the appropriate type.", "id": "45684"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_SLAYER_DEGRADE_LEVEL(String value0){\n  return new SM_SYSTEM_MESSAGE(1400138,value0);\n}\n", "nl": "The curse of the Empyrean Lords has been reduced to %0 level because you haven't slaughtered the lower level targets for a certain time.", "id": "4527"}
{"code": "public void save(){\n  if (file == null) {\n    throw new UnsupportedOperationException(\"Only root configs can be saved!\");\n  }\n  if (hasChanged()) {\n    try {\n      FileUtils.writeStringToFile(file,config.root().render(ConfigRenderOptions.defaults().setJson(false).setOriginComments(true).setComments(false)));\n    }\n catch (    IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n}\n", "nl": "Saves the config to disc.", "id": "47242"}
{"code": "@Override protected boolean requiresAuthentication(HttpServletRequest request,HttpServletResponse response){\n  return true;\n}\n", "nl": "Require authentication or not", "id": "7961"}
{"code": "public Builder longMathOp(String columnName,MathOp mathOp,long scalar){\n  return transform(new LongMathOpTransform(columnName,mathOp,scalar));\n}\n", "nl": "Perform a mathematical operation (add, subtract, scalar max etc) on the specified long column, with a scalar", "id": "6342"}
{"code": "public void clear(){\n  items.clear();\n  Iterator siter=springs.iterator();\n  Spring.SpringFactory f=Spring.getFactory();\n  while (siter.hasNext())   f.reclaim((Spring)siter.next());\n  springs.clear();\n}\n", "nl": "Clear this simulator, removing all ForceItem and Spring instances for the simulator.", "id": "44533"}
{"code": "public boolean isDistinct(){\n  return distinct;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.countries", "id": "50423"}
{"code": "private void saveInstantUploadVideoPathOnPreferences(){\n  SharedPreferences appPrefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\n  SharedPreferences.Editor editor=appPrefs.edit();\n  editor.putString(\"instant_video_upload_path\",mUploadVideoPath);\n  editor.commit();\n}\n", "nl": "Save the \"Instant Video Upload Path\" on preferences", "id": "10645"}
{"code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public TypeDecl lookupType(String packageName,String typeName){\n  ASTNode$State state=state();\n  TypeDecl lookupType_String_String_value=getParent().Define_TypeDecl_lookupType(this,null,packageName,typeName);\n  return lookupType_String_String_value;\n}\n", "nl": "Inherit the lookupType attribute in ResourceDeclaration.", "id": "52390"}
{"code": "protected void updateProgress(IProgressMonitor progressMonitor,Object node){\n  if (node instanceof ITypedElement) {\n    ITypedElement element=(ITypedElement)node;\n    progressMonitor.subTask(Policy.bind(\"CompareEditorInput.fileProgress\",new String[]{element.getName()}));\n    progressMonitor.worked(1);\n  }\n}\n", "nl": "Called for every leaf or node compare to update progress information.", "id": "18040"}
{"code": "protected XMLDTDScanner createDTDScanner(){\n  return new XMLDTDScannerImpl();\n}\n", "nl": "Create a DTD scanner.", "id": "49483"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(getSyntax());\n}\n", "nl": "action to be performed", "id": "31131"}
{"code": "protected XMLErrorReporter createErrorReporter(){\n  return new XMLErrorReporter();\n}\n", "nl": "Creates an error reporter.", "id": "43815"}
{"code": "protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){\n  this.fontRendererObj.drawString(I18n.format(\"container.crafting\",new Object[0]),97,8,4210752);\n}\n", "nl": "Draw the foreground layer for the GuiContainer (everything in front of the items)", "id": "44245"}
{"code": "public void shutDown(){\n  setTab(null);\n  if (mLayerTitleCache != null)   mLayerTitleCache.shutDown();\n  mCompositorView.shutDown();\n}\n", "nl": "Should be called for cleanup when the CompositorView instance is no longer used.", "id": "26448"}
{"code": "public double asDistance(){\n  double dS=getOverallSimilarity();\n  if (dS == 0)   return Double.POSITIVE_INFINITY;\n else   return 1.0 / dS;\n}\n", "nl": "Calculates an overall distance as a function of the overall similarity. This method uses the <code>getOverallSimilarity</code> method and returns its inverse if it has a non-zero value. Otherwise the return value is positive infinity.", "id": "55652"}
{"code": "public static synchronized ExamplePointInterface createExamplePoint(Object object){\n  if (examplePointImpl == null) {\n    examplePointImpl=new ExamplePointImpl();\n  }\n  return examplePointImpl;\n}\n", "nl": "Creates a new DataSource object.", "id": "27504"}
{"code": "public static void write(File file,CharSequence data,Charset encoding,boolean append) throws IOException {\n  String str=data == null ? null : data.toString();\n  writeStringToFile(file,str,encoding,append);\n}\n", "nl": "Writes a CharSequence to a file creating the file if it does not exist.", "id": "184"}
{"code": "public V put(int key,V value){\n  int index=insertionIndex(key);\n  return doPut(key,value,index);\n}\n", "nl": "Inserts a key/value pair into the map.", "id": "3508"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_GET_PCBANG_ITEM(String value0){\n  return new SM_SYSTEM_MESSAGE(1400026,value0);\n}\n", "nl": "You have obtained %0 from the Internet Cafe Event.", "id": "28195"}
{"code": "public static void putInt(String key,int value){\n  prefs.edit().putInt(key,value).commit();\n}\n", "nl": "Set an int value in the preferences editor, to be written back once", "id": "11690"}
{"code": "public void removeScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.remove(listener);\n}\n", "nl": "Removes wheel scrolling listener", "id": "28428"}
{"code": "public static InputStream toInputStream(String input){\n  return toInputStream(input,Charset.defaultCharset());\n}\n", "nl": "Convert the specified string to an input stream, encoded as bytes using the default character encoding of the platform.", "id": "35348"}
{"code": "public void end(){\n  String tag=(String)m_tagStack.remove(m_tagStack.size() - 1);\n  spacing();\n  m_out.print('<');\n  m_out.print('/');\n  m_out.print(tag);\n  m_out.print('>');\n  println();\n}\n", "nl": "Close the most recently opened tag. The tag will be followed by a newline, and the indentation level will be decreased.", "id": "24516"}
{"code": "private static boolean checkOffset(String value,int offset,char expected){\n  return (offset < value.length()) && (value.charAt(offset) == expected);\n}\n", "nl": "Check if the expected character exist at the given offset in the value.", "id": "11988"}
{"code": "public static float calculateHeight(float width,float targetAspectRatio){\n  return width / targetAspectRatio;\n}\n", "nl": "Calculates the height of a rectangle given the left and right edges and an aspect ratio.", "id": "30548"}
{"code": "protected Criteria createCriteriaInternal(){\n  Criteria criteria=new Criteria();\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.ip_logs", "id": "54667"}
{"code": "public static String topLevelTypeString(String typeStr){\n  int dollarIndex=typeStr.indexOf('$');\n  String topLevelTypeStr=dollarIndex == -1 ? typeStr : typeStr.substring(0,dollarIndex);\n  return topLevelTypeStr;\n}\n", "nl": "given the name of a class C, returns the name of the top-most enclosing class of class C. For example, given A$B$C, the method returns A", "id": "19569"}
{"code": "@NotNull private Point viewToModel(@NotNull Point p){\n  return new Point((int)(p.x / myScale),(int)(p.y / myScale));\n}\n", "nl": "Converts a point from view coordinates (possibly scaled) to model coordinates.", "id": "19644"}
{"code": "@Nullable public Interface lookupInterface(String fullName){\n  return interfaceByName.get(fullName);\n}\n", "nl": "Get the interface by its full name.", "id": "52952"}
{"code": "protected BoardEditTopicQuery title(String value){\n  return unsafeParam(\"title\",value);\n}\n", "nl": "New title of the topic.", "id": "13981"}
{"code": "public static final void removePlayer(Player player){\n  PlayerAlliance alliance=player.getPlayerAlliance2();\n  if (alliance != null) {\n    if (alliance.getTeamType().isDefence()) {\n      VortexService.getInstance().removeDefenderPlayer(player);\n    }\n    alliance.onEvent(new PlayerAllianceLeavedEvent(alliance,player));\n  }\n}\n", "nl": "Remove player from alliance (normal leave, or kick offline player)", "id": "51859"}
{"code": "public synchronized void deleteCustomPropertiesStorage(){\n  if (propertiesFile != null && propertiesFile.exists())   if (!propertiesFile.delete())   propertiesFile.deleteOnExit();\n}\n", "nl": "Deletes properties file.", "id": "22151"}
{"code": "public String toString(){\n  return \"Segmenter\";\n}\n", "nl": "Returns the simple name of this class.", "id": "35266"}
{"code": "private void updateButtons(){\n  myHostWizard.updateButtons(myGuestWizard.onLastStep().get(),myGuestWizard.canGoForward().get(),!myGuestWizard.canGoBack().get());\n}\n", "nl": "Update the buttons on the host wizard to reflect the state of the guest wizard", "id": "53866"}
{"code": "boolean checkIfDeltaIsTooLarge(Delta delta){\n  return delta.size() + _archiveDeltaSizeInMemory.getCount() >= MAX_DELTA_ARCHIVE_SIZE;\n}\n", "nl": "This only checks against the completed pending compactions that are in memory currently, but not against the pending compactions that are in progress", "id": "39242"}
{"code": "private static Entry[] attributesFor(){\n  final Entry info=new ServiceInfo(\"Transaction Manager\",\"Sun Microsystems, Inc.\",\"Sun Microsystems, Inc.\",com.sun.jini.constants.VersionConstants.SERVER_VERSION,\"\",\"\");\n  final Entry type=new com.sun.jini.lookup.entry.BasicServiceType(\"Transaction Manager\");\n  return new Entry[]{info,type};\n}\n", "nl": "Create the service owned attributes for an Mahalo server", "id": "14121"}
{"code": "public void endDocument() throws SAXException {\n  writeText4Links();\n  write('\\n');\n  super.endDocument();\n  try {\n    flush();\n  }\n catch (  IOException e) {\n    throw new SAXException(e);\n  }\n}\n", "nl": "Write a newline at the end of the document. <p> Pass the event on down the filter chain for further processing.", "id": "29250"}
{"code": "public boolean decrementNumOfUsersAndIndicateEmpty(){\n  int val=decrementAndGet();\n  return (val == 0);\n}\n", "nl": "decrement the number of users using (i.e locking + waiting + finished & not released yet) of the lock object", "id": "42895"}
{"code": "public void flattenHierarchy(ConstraintWidgetContainer root){\n  ArrayList<ConstraintWidgetContainer> containers=gatherContainers(root);\n  while (containers.size() > 0) {\n    for (    ConstraintWidgetContainer container : containers) {\n      removeContainer(container);\n    }\n    containers=gatherContainers(root);\n  }\n}\n", "nl": "Flatten the hierachy -- remove all existing containers children of the given container", "id": "46312"}
{"code": "private Cursor queryImgDB(Uri contentStore){\n  return this.cordova.getActivity().getContentResolver().query(contentStore,new String[]{MediaStore.Images.Media._ID},null,null,null);\n}\n", "nl": "Creates a cursor that can be used to determine how many images we have.", "id": "38545"}
{"code": "public void sendToFilterModuleByDynamicTimedeadbandFilterer(final SourceDataTag currentSourceDataTag,final ValueUpdate update,final SourceDataTagQuality quality,final int filterType){\n  doSendToFilterModule(currentSourceDataTag,update,quality,true,filterType);\n}\n", "nl": "Sends a message to the statistics module with Dynamic Timedeadband. Should only be used in the core.", "id": "41600"}
{"code": "public void put(int i,double real,double imag){\n  re[i]=real;\n  im[i]=imag;\n}\n", "nl": "Sets the real and imaginary parts of the ith element of a Z1.", "id": "41660"}
{"code": "public void addSymbol(EsriSymbolInterface symbolObj){\n  symbolMap.put(symbolObj.getSymbolClass(),symbolObj);\n}\n", "nl": "Adds the symbol.", "id": "21612"}
{"code": "@Override public boolean accept(File file){\n  String name=file.getName();\n  for (  String name2 : this.names) {\n    if (caseSensitivity.checkEquals(name,name2)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks to see if the filename matches.", "id": "35518"}
{"code": "private void unexpectedCommandError(String command){\n  error(\"command '@%s' is unexpected in this context\",command);\n}\n", "nl": "Emit error for an unexpected command.", "id": "19174"}
{"code": "public void parse(){\n  if (singleShot) {\n    metricImpl=metric.constructMetric(confidenceLevel,1.0);\n  }\n else {\n    metricImpl=metric.constructMetric(confidenceLevel);\n  }\n}\n", "nl": "Calculates derived parameters.", "id": "49453"}
{"code": "public void updateCurrentParsys(String parsys){\n  scenarioContext.add(ContextKeys.CURRENT_PARSYS,parsys);\n}\n", "nl": "Replaces current parsys with one given in parameter.", "id": "41748"}
{"code": "public void clearBasicAuth(){\n  this.httpClient.getCredentialsProvider().clear();\n}\n", "nl": "Removes set basic auth credentials", "id": "38278"}
{"code": "public void useTimings(boolean use){\n  useTimings=use;\n}\n", "nl": "Sets whether or not per event timing code should be used", "id": "43897"}
{"code": "public SnippetObject key(Map.Entry<Object,Object> e){\n  return new SnippetObject(longify(e.getKey()),myPath.key(),mySnippets);\n}\n", "nl": "Build a key from a map entry (this object is the map).", "id": "7786"}
{"code": "public void loadBcpFile(String bcpFilename,String delimiter,List<Attribute> attributes,String dateFormatString,IntSourceConnectionManager connectionManager,int sourceAttribute){\n  loadBcpFile(bcpFilename,delimiter,attributes,connectionManager,dateFormatString != null ? new SimpleDateFormat(dateFormatString) : null,sourceAttribute);\n}\n", "nl": "Loads the content of a delimited file into a test database.", "id": "33330"}
{"code": "public void deleteIndex(String name){\nsynchronized (indices) {\n    indexNames.remove(name);\n  }\n}\n", "nl": "Remove the specified index.", "id": "54154"}
{"code": "public static boolean controllerHasRequestUriDirect(HttpServletRequest request,String uri){\n  if (request == null) {\n    return false;\n  }\n  RequestHandler rh=RequestHandler.getRequestHandler(request.getServletContext());\n  return rh.controllerHasRequestUriDirect(uri);\n}\n", "nl": "SCIPIO: Utility method that can be used for security checks to check if controller of current webapp has the specified URI and allows direct/public access.", "id": "11210"}
{"code": "public static boolean isLegacyIdeaAndroidModule(@NotNull Module module){\n  AndroidFacet facet=AndroidFacet.getInstance(module);\n  if (facet != null && !facet.requiresAndroidModel()) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Indicates whether the given module is a legacy IDEA Android module (which is deprecated in Android Studio.)", "id": "1328"}
{"code": "public boolean wasReleased(int code){\n  MouseButton mb=this.buttons.get(code);\n  if (mb == null) {\n    return false;\n  }\n  return mb.wasReleased();\n}\n", "nl": "Returns true if the given MouseEvent code was clicked and was waiting to be released but is now released.", "id": "38700"}
{"code": "public static boolean isPossibleToReadResource(Acl acl,String userModifier,String projectName){\n  if (!acl.getOwnerUserId().equalsIgnoreCase(userModifier))   if (!acl.getEntries().stream().filter(Preconditions.hasACLPermission(projectName,AclPermissions.READ)).findFirst().isPresent())   return false;\n  return true;\n}\n", "nl": "Validate is specified acl owned by specified user or is shared to specified project but don't rise exception", "id": "31236"}
{"code": "public void recordOpenedNTP(){\n  setFirstAction(OPENED_NTP);\n}\n", "nl": "Records that the new tab page has been opened.", "id": "31027"}
{"code": "public boolean drawShadows(){\n  return drawShadows;\n}\n", "nl": "Determine whether shadows are drawn", "id": "30496"}
{"code": "public static <T>JoinObservable<T> from(Observable<T> o){\n  return new JoinObservable<T>(RxJavaPlugins.onAssembly(o));\n}\n", "nl": "Creates a JoinObservable from a regular Observable.", "id": "42048"}
{"code": "public static <T extends Bean>T load(Bson query,Bson order,T obj){\n  String collection=getCollection(obj.getClass());\n  if (collection != null) {\n    return load(collection,query,order,obj);\n  }\n  return null;\n}\n", "nl": "get the data from the collection.", "id": "25832"}
{"code": "@Override public void loadSearchImages(String searchString){\n  loadImages(repository.getSearchResults(searchString,RiffsyRepository.DEFAULT_LIMIT_COUNT));\n}\n", "nl": "Search gifs based on user input.", "id": "11377"}
{"code": "public static Tuple median(TupleSet tuples,String field){\n  return median(tuples,field,DefaultLiteralComparator.getInstance());\n}\n", "nl": "Get the Tuple with the median data field value.", "id": "39110"}
{"code": "public Builder riseOnHover(Boolean riseOnHover){\n  this.riseOnHover=riseOnHover;\n  return this;\n}\n", "nl": "If true, the marker will get on top of others when you hover the mouse over it. </br> default false", "id": "37456"}
{"code": "public static void dropTable(Database db,boolean ifExists){\n  String sql=\"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + \"\\\"USER\\\"\";\n  db.execSQL(sql);\n}\n", "nl": "Drops the underlying database table.", "id": "38686"}
{"code": "public void unFlushNew(){\n  newSet.addAll(oldSet,null);\n  oldSet=G.v().oldSetFactory.newSet(type,pag);\n}\n", "nl": "Sets all nodes to newly-added nodes.", "id": "45338"}
{"code": "public void addAll(Taxa taxa){\n  for (Iterator it=taxa.iterator(); it.hasNext(); ) {\n    String name=(String)it.next();\n    add(name);\n  }\n}\n", "nl": "add all taxa.", "id": "44587"}
{"code": "public Builder cacheInMemory(boolean cacheInMemory){\n  this.cacheInMemory=cacheInMemory;\n  return this;\n}\n", "nl": "Sets whether loaded image will be cached in memory", "id": "54184"}
{"code": "public void reset(){\n  _count=0;\n}\n", "nl": "Resets the <code>count</code> field of this byte array output stream to zero, so that all currently accumulated output in the output stream is discarded. The output stream can be used again, reusing the already allocated buffer space.", "id": "5199"}
{"code": "public FriendsDeleteAllRequestsQuery deleteAllRequests(UserActor actor){\n  return new FriendsDeleteAllRequestsQuery(getClient(),actor);\n}\n", "nl": "Marks all incoming friend requests as viewed.", "id": "57979"}
{"code": "public void clear(){\n  emptySoftQueue();\n  Entry tab[]=table;\n  for (int i=0; i < tab.length; ++i)   tab[i]=null;\n  size=0;\n  emptySoftQueue();\n}\n", "nl": "Removes all mappings from this map.", "id": "17805"}
{"code": "public static String millisecondsToString(long milliseconds){\n  return millisecondsToString(milliseconds,SIMPLE_DATE_FORMAT);\n}\n", "nl": "return date string from milliseconds", "id": "54347"}
{"code": "public static JSON from(Object object) throws IOException {\n  Assert.notNull(\"object\",object);\n  try {\n    return from(mapper.writeValueAsString(object));\n  }\n catch (  Exception e) {\n    throw new IOException(e);\n  }\n}\n", "nl": "Creates a <code>JSON</code> instance from an unknown data type.", "id": "34181"}
{"code": "public void tabSelected(long time,int id,int prevId){\n  if (findTabById(id) == null) {\n    tabCreated(time,id,prevId,true);\n  }\n else {\n    updateVisualTabOrdering();\n    mUpdateHost.requestUpdate();\n  }\n}\n", "nl": "Called when a tab get selected.", "id": "27462"}
{"code": "public Node findChild(char c){\n  for (  Node n : children) {\n    if (n.c == c)     return n;\n  }\n  return null;\n}\n", "nl": "Finds a child containing a character or <code>null</code> if  it does not exist.", "id": "54778"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeTypeBoostSkillLevel_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200693,skillcaster,skillname);\n}\n", "nl": "You received the boost skill effect because [%SkillCaster] used [%SkillName] on you.", "id": "25623"}
{"code": "public void registerShield(int worldId,SiegeShield shield){\n  List<SiegeShield> mapShields=registeredShields.get(worldId);\n  if (mapShields == null) {\n    mapShields=new ArrayList<SiegeShield>();\n    registeredShields.put(worldId,mapShields);\n  }\n  mapShields.add(shield);\n}\n", "nl": "Registers geo shield for zone lookup", "id": "2202"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcATK_Instant_ME_TO_SELF(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200390,num0,skillname);\n}\n", "nl": "You received %num0 damage due to [%SkillName].", "id": "30486"}
{"code": "public PhotosGetUserPhotosQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of photos to return. Maximum value is '100'.", "id": "35667"}
{"code": "protected void processPauseRequest(){\n  if (mState == State.PLAYING) {\n    mState=State.PAUSED;\n    mPlayer.pause();\n    releaseResources(false);\n  }\n}\n", "nl": "Processes a request to pause the current playback", "id": "33739"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CANT_EQUIP(String value0){\n  return new SM_SYSTEM_MESSAGE(1300386,value0);\n}\n", "nl": "You cannot equip %0.", "id": "566"}
{"code": "public PaginationParameters withPage(String page) throws BadPaginationException {\n  return new PaginationParameters(perPage,parseParameter(page,\"page\"));\n}\n", "nl": "Returns a new PaginationParameters object with the specified page value.", "id": "50489"}
{"code": "@Override public void beforeFirst(){\n  ss.beforeFirst();\n  moreGroups=ss.next();\n}\n", "nl": "Positions the scan before the first group. Internally, the underlying scan is always positioned at the first record of a group, which means that this method moves to the first underlying record.", "id": "8601"}
{"code": "public boolean isTransientIdentifiableProperties(){\n  return transientIdentifiableProperties;\n}\n", "nl": "Indicates whether the object represented by the implementation does not have persisted identifiable object properties.", "id": "25044"}
{"code": "public FriendsGetByPhonesQuery fields(UserField... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Profile fields to return.", "id": "58197"}
{"code": "private static String fixOcrNumsToLetters(String src){\n  return src.replace(\"1\",\"l\").replace(\"0\",\"o\").replace(\"5\",\"s\").replace(\"2\",\"z\");\n}\n", "nl": "Correct some OCR errors in argument where only letters are expected.", "id": "52209"}
{"code": "public IteratorBuilder leaseDuration(long leaseDuration){\n  this.iteratorConfig.setLeaseDuration(leaseDuration);\n  return this;\n}\n", "nl": "The requested initial lease time on the resulting match set. Defaults to <code>FOREVER</code>.", "id": "2153"}
{"code": "public static long editUnitToMilliSeconds(BigInteger eu,BigFraction unitsInSec){\n  BigFraction editUnits=new BigFraction(eu);\n  return editUnits.divide(unitsInSec).multiply(1000).longValue();\n}\n", "nl": "Converts the edit untis to milliseconds according to the given edit rate.", "id": "40765"}
{"code": "public Bindings add(String property,JTextArea textArea,String defaultValue){\n  registerPropertyChangeListener(textArea);\n  return add(new JTextComponentBinding(property,textArea,defaultValue));\n}\n", "nl": "Handles JTextArea", "id": "38795"}
{"code": "@Override public void endPrefixMapping(String prefix) throws SAXException {\n  return;\n}\n", "nl": "The SAX <code>endPrefixMapping</code> method does nothing.", "id": "786"}
{"code": "private void sendAfterTextChanged(Editable s){\n  if (mListeners != null) {\n    for (int i=0; i < mListeners.size(); i++) {\n      mListeners.get(i).afterTextChanged(s);\n    }\n  }\n}\n", "nl": "Send an after text change event to child listeners", "id": "43106"}
{"code": "protected boolean hasAttemptRemaining(){\n  return mCurrentRetryCount <= mMaxNumRetries;\n}\n", "nl": "Returns true if this policy has attempts remaining, false otherwise.", "id": "46225"}
{"code": "public void show(boolean animate){\n  show(animate,fadeIn);\n}\n", "nl": "Make the badge visible in the UI.", "id": "18308"}
{"code": "@Override public void undoAction(UndoInterface undoRedoObject){\n  String oldValueObj=(String)undoRedoObject.getOldValue();\n  filterComboBox.setSelectedItem(oldValueObj);\n}\n", "nl": "Undo action.", "id": "16403"}
{"code": "public int hashCode(){\n  return (ServerMinPrincipal.class.hashCode() + Constraint.hash(principals));\n}\n", "nl": "Returns a hash code value for this object.", "id": "12252"}
{"code": "public void requestNodeInfo(int nodeId){\n  enqueue(new RequestNodeInfoMessageClass().doRequest(nodeId));\n}\n", "nl": "Send Request Node info message to the controller.", "id": "58246"}
{"code": "public synchronized BookKeeperClientBuilder channelFactory(ClientSocketChannelFactory channelFactory){\n  this.channelFactory=channelFactory;\n  return this;\n}\n", "nl": "Build BookKeeper client using existing <i>channelFactory</i>.", "id": "43948"}
{"code": "public void dataSinkUpdate(DataSinkEvent evt){\n  if (evt instanceof EndOfStreamEvent) {\nsynchronized (waitFileSync) {\n      fileDone=true;\n      waitFileSync.notifyAll();\n    }\n  }\n else   if (evt instanceof DataSinkErrorEvent) {\nsynchronized (waitFileSync) {\n      fileDone=true;\n      fileSuccess=false;\n      waitFileSync.notifyAll();\n    }\n  }\n}\n", "nl": "Event handler for the file writer.", "id": "37092"}
{"code": "private static int computeOrderSortingValue(float indexDistance,float stackVisibility){\n  return (int)((indexDistance + 1) / (0.1f + 0.9f * stackVisibility));\n}\n", "nl": "Computes the ordering value only based on the distance of the tab to the center one. Low values have higher priority.", "id": "12022"}
{"code": "public static void clearImageView(final ImageView _imageView){\n  Glide.clear(_imageView);\n}\n", "nl": "Allows to clear a given ImageView Note: Usefull if used in RecyclerViews/ListViews and so on", "id": "56327"}
{"code": "public void removeEnvVar(int rowIndex){\n  EnvVar envVar=dataList.get(rowIndex);\n  if (this.envMgr != null) {\n    this.envMgr.removeEnvVar(envVar);\n  }\n  dataList.remove(rowIndex);\n  this.fireTableDataChanged();\n}\n", "nl": "Removes the env var.", "id": "12827"}
{"code": "public static Patterns packages(String[] includes,String[] excludes){\n  return new Patterns(includes,excludes);\n}\n", "nl": "Sets the package patterns to scan", "id": "56954"}
{"code": "protected Object newInitialFlow(){\n  return emptySet.clone();\n}\n", "nl": "All INs are initialized to the empty set.", "id": "40576"}
{"code": "public synchronized void addFrom(int from){\n  this.from|=from;\n}\n", "nl": "Sets the appropriate bit in the 'from' variable to indicate the mechanism or mechanisms through which the registrar referenced by this class was discovered (group discovery, locator discovery, or both). This method is typically called during the discovery process; and the value input should always be either FROM_GROUP or FROM_LOCATOR.", "id": "47417"}
{"code": "public V remove(Object key){\n  final int index=indexOfKey(key);\n  if (index >= 0) {\n    return removeAt(index);\n  }\n  return null;\n}\n", "nl": "Remove an existing key from the array map.", "id": "18635"}
{"code": "public static void showSoftKeyboard(Context context,View view){\n  view.setFocusable(true);\n  view.setFocusableInTouchMode(true);\n  view.requestFocus();\n  InputMethodManager inputManager=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);\n  inputManager.showSoftInput(view,0);\n}\n", "nl": "Show soft keyboard", "id": "37057"}
{"code": "public synchronized VisualTable addTable(String group,Table table,Schema schema){\n  return addTable(group,table,null,schema);\n}\n", "nl": "Adds a data table to this visualization, using the given data group name. A visual abstraction of the data will be created and registered with the visualization. An exception will be thrown if the group name is already in use.", "id": "15435"}
{"code": "static Principal[] reduce(Principal[] principals){\n  return reduce0(principals.clone());\n}\n", "nl": "Verifies that there is at least one element, and returns a new array of the elements, in arbitrary order, with duplicates removed.", "id": "46462"}
{"code": "@Override public boolean isAlreadyMatched(){\n  return false;\n}\n", "nl": "is the entry returned already matched against the searching template currently is true if the underlying scan made by CacheManager::EntriesIter", "id": "5987"}
{"code": "public static boolean isWrite(int mod){\n  return (mod & NOTIFY_WRITE) != 0;\n}\n", "nl": "Return <tt>true</tt> if the integer argument includes the <tt>NOTIFY_WRITE</tt> modifier, <tt>false</tt> otherwise.", "id": "18285"}
{"code": "@Override protected void createOrUpgradeTable(SQLiteDatabase db,boolean force){\n  mDb=db;\n  for (  TableModel tableModel : getAllTableModels()) {\n    mTableModel=tableModel;\n    mTableModelDB=getTableModelFromDB(tableModel.getTableName());\n    upgradeTable();\n  }\n}\n", "nl": "Analyzing the table model, them remove the dump columns and add new columns of a table.", "id": "48528"}
{"code": "public static String formatTimestamp(@Nullable Date date){\n  return (date != null) ? ISO8601Utils.format(date,true) : null;\n}\n", "nl": "Formats the specified timestamp as an ISO 8601 string with milliseconds and UTC timezone.", "id": "2868"}
{"code": "public static boolean isPackageInstalled(Context context,String packageName){\n  if (!TextUtils.isEmpty(packageName)) {\n    try {\n      PackageInfo packageInfo=context.getPackageManager().getPackageInfo(packageName,0);\n      return packageInfo != null;\n    }\n catch (    PackageManager.NameNotFoundException e) {\n    }\n  }\n  return false;\n}\n", "nl": "Check whether corresponding package is installed.", "id": "33068"}
{"code": "public NotesGetQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of notes.", "id": "33940"}
{"code": "private Object handleRuleWithNoInvalidTags(final Map<Long,Object> pInputParams) throws RuleEvaluationException {\n  final Object[] valueTokens=splitToTokens(pInputParams);\n  final Object result=Parser.getInstance().eval(valueTokens);\n  return result;\n}\n", "nl": "RuleExpressions that contain no INVALID tags use a different Parser for the evaluation.", "id": "38004"}
{"code": "public synchronized boolean isClosed(){\n  return journalWriter == null;\n}\n", "nl": "Returns true if this cache has been closed.", "id": "31001"}
{"code": "public boolean isSpawnedByPlayer(){\n  return x != 0 || y != 0 || z != 0;\n}\n", "nl": "Means the player has it spawned, not the game server", "id": "39491"}
{"code": "public Object jndiLookup(String name) throws NamingException {\n  return getInitialContext().lookup(name);\n}\n", "nl": "Creates a JNDI API InitialContext object if none exists yet. Then looks up the string argument and returns the associated JMS administrated object.", "id": "13086"}
{"code": "public void configureIndicator(int indicatorWidth,int indicatorHeight,int indicatorMargin){\n  configureIndicator(indicatorWidth,indicatorHeight,indicatorMargin,R.animator.scale_with_alpha,0,R.drawable.indicator_white_radius,R.drawable.indicator_white_radius);\n}\n", "nl": "Create and configure Indicator in Java code.", "id": "13356"}
{"code": "private static String createFullTableName(String table,String partition){\n  if (partition == null) {\n    return table;\n  }\n else {\n    return table + PARTITION_DELIMITER + partition;\n  }\n}\n", "nl": "Create and return a full table name from a base table name and a partition.", "id": "3070"}
{"code": "public boolean onSwipedAway(boolean toRight){\n  return false;\n}\n", "nl": "Called when dialog is swiped away to dismiss.", "id": "56023"}
{"code": "public AccountGetPushSettingsQuery deviceId(String value){\n  return unsafeParam(\"device_id\",value);\n}\n", "nl": "Set device id", "id": "8910"}
{"code": "public static Map<String,Object> returnSuccess(String successMessage){\n  return returnMessage(ModelService.RESPOND_SUCCESS,successMessage);\n}\n", "nl": "A small routine used all over to improve code efficiency, make a result map with the message and the success response code", "id": "26517"}
{"code": "public long xorOut(){\n  return xorOut;\n}\n", "nl": "Returns the value XOR'ed with the CRC register when it is read to determine the output value.", "id": "25124"}
{"code": "public String toString(){\n  return children.toString();\n}\n", "nl": "For debugging purposes only.", "id": "32408"}
{"code": "public void leftClick(int x,int y) throws InterruptedException {\n  click(InputEvent.BUTTON1_MASK,x,y);\n}\n", "nl": "Left click mouse at a point", "id": "36183"}
{"code": "boolean isVariablePrecision(){\n  return variablePrecision;\n}\n", "nl": "Check whether the specifier has a variable precision that is going to be set by an argument.", "id": "23275"}
{"code": "@Override public void onWebsocketPing(WebSocket conn,Framedata f){\n  FramedataImpl1 resp=new FramedataImpl1(f);\n  resp.setOptcode(Opcode.PONG);\n  conn.sendFrame(resp);\n}\n", "nl": "This default implementation will send a pong in response to the received ping. The pong frame will have the same payload as the ping frame.", "id": "2346"}
{"code": "public static boolean isReservedStreamName(String name){\n  return name.startsWith(\".\");\n}\n", "nl": "Is it a reserved stream name in bkdl namespace?", "id": "16668"}
{"code": "public final boolean containsKey(String name){\n  return mMap.containsKey(name);\n}\n", "nl": "Returns true iff a key of the given name exists in the format.", "id": "31886"}
{"code": "public static SM_SYSTEM_MESSAGE STR_DECOMPOSE_ITEM_IT_CAN_NOT_BE_DECOMPOSED(String value0){\n  return new SM_SYSTEM_MESSAGE(1300446,value0);\n}\n", "nl": "%0 is not an extractable item.", "id": "6760"}
{"code": "public void revertToDefaultValue(){\n  List<FieldConfigBase> fieldList=fieldConfigManager.getFields(null);\n  if (fieldList != null) {\n    for (    FieldConfigBase field : fieldList) {\n      if (field != null) {\n        field.revertToDefaultValue();\n      }\n    }\n  }\n}\n", "nl": "Revert to default value.", "id": "3412"}
{"code": "@Override public void populateExpression(Object objValue){\n  if (externalGraphicPanel != null) {\n    if (objValue instanceof String) {\n      externalGraphicPanel.populateExpression((String)objValue);\n    }\n  }\n}\n", "nl": "Populate expression.", "id": "34583"}
{"code": "public GiftsGetQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of results.", "id": "49364"}
{"code": "public void addArg(Expr node){\n  List<Expr> list=(parent == null || state == null) ? getArgListNoTransform() : getArgList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the Arg list.", "id": "7668"}
{"code": "private void addFolder(boolean descend,String name) throws FileNotFoundException {\n  Path pathPath=Paths.get(path);\n  FileTreeNode node=new FileTreeNode(pathPath,name);\n  this.add(node);\n  if (descend) {\n    node.populateDirectories(false);\n  }\n}\n", "nl": "Adds the folder.", "id": "38077"}
{"code": "public static SimpleBounds unbounded(int dim){\n  final double[] lB=new double[dim];\n  Arrays.fill(lB,Double.NEGATIVE_INFINITY);\n  final double[] uB=new double[dim];\n  Arrays.fill(uB,Double.POSITIVE_INFINITY);\n  return new SimpleBounds(lB,uB);\n}\n", "nl": "Factory method that creates instance of this class that represents unbounded ranges.", "id": "4977"}
{"code": "@Override public final void writeShort(final short i){\n  bos.writeByte((byte)(i & 0xFF));\n  bos.writeByte((byte)((i >>> 8) & 0xFF));\n}\n", "nl": "Write a short integer to the stream.", "id": "3912"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_HOSTILE_ATTACK(String value0,int num2,String value1){\n  return new SM_SYSTEM_MESSAGE(1250000,value0,num2,value1);\n}\n", "nl": "%0 inflicted %num2 damage on %1.", "id": "56232"}
{"code": "public static _Fields findByName(String name){\n  return byName.get(name);\n}\n", "nl": "Find the _Fields constant that matches name, or null if its not found.", "id": "1229"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  String input=JOptionPane.showInputDialog(getViewer().getFrame(),\"Enter label of node to scroll to\",\"None\");\n  if (input != null) {\n    input=input.trim();\n    if (input.length() > 0)     execute(\"scrollTo node='\" + input + \"';\");\n  }\n}\n", "nl": "action to be performed", "id": "29891"}
{"code": "public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {\n  writeLines(lines,lineEnding,output,Charset.defaultCharset());\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to an <code>OutputStream</code> line by line, using the default character encoding of the platform and the specified line ending.", "id": "42329"}
{"code": "public void softRestart(){\n  if (mediaPlayer != null) {\n    resetPlayer();\n    prepare();\n  }\n}\n", "nl": "Restarts player in the soft way (didn't release all resurces and callbacks)", "id": "51531"}
{"code": "protected void afterMove(){\n  getContentManager().registerLanguage(new SLCodec(),FIPANames.ContentLanguage.FIPA_SL0);\n  getContentManager().registerOntology(MobilityOntology.getInstance());\n}\n", "nl": "This method is executed as soon as the agent arrives to the new  destination. It registers the communication prerequisites.", "id": "7836"}
{"code": "public void sort(int fromIndex,int toIndex){\n  Arrays.sort(_data,fromIndex,toIndex);\n}\n", "nl": "Sort a slice of the list (ascending) using the Sun quicksort implementation.", "id": "52128"}
{"code": "protected BoardFixTopicQuery topicId(int value){\n  return unsafeParam(\"topic_id\",value);\n}\n", "nl": "Topic ID.", "id": "38119"}
{"code": "private void initializeValues(){\n  IPreferenceStore store=getPreferenceStore();\n  int iconSet=store.getInt(ISVNUIConstants.PREF_MENU_ICON_SET);\n  useTortoiseSVN.setSelection(ISVNUIConstants.MENU_ICON_SET_TORTOISESVN == iconSet);\n  useDefault.setSelection(ISVNUIConstants.MENU_ICON_SET_DEFAULT == iconSet);\n  useSubversive.setSelection(ISVNUIConstants.MENU_ICON_SET_SUBVERSIVE == iconSet);\n}\n", "nl": "Initializes states of the controls from the preference store.", "id": "54046"}
{"code": "@Override public void clear(){\n  backedSet.clear();\n}\n", "nl": "Removes all of the elements from this applyTransformToDestination (optional operation). The applyTransformToDestination will be empty after this call returns.", "id": "6284"}
{"code": "public boolean isDebugEnabled(){\n  return this.logger.isDebugEnabled();\n}\n", "nl": "Returns true if debug is enabled.", "id": "56383"}
{"code": "public Pair<SourceContextAndPath,Stmt> popTopCallStackItem(){\n  if (callStack == null || callStack.isEmpty())   return null;\n  SourceContextAndPath scap=clone();\n  return new Pair<>(scap,scap.callStack.remove(0));\n}\n", "nl": "Pops the top item off the call stack.", "id": "43266"}
{"code": "public void removeDatatransferProgressListener(OnDatatransferProgressListener listener,Account account,OCFile file){\n  if (account == null || file == null || listener == null)   return;\n  Long fileId=file.getFileId();\n  if (mBoundListeners.get(fileId) == listener) {\n    mBoundListeners.remove(fileId);\n  }\n}\n", "nl": "Removes a listener interested in the progress of the download for a concrete file.", "id": "58323"}
{"code": "public boolean standard_local_names(){\n  return soot.PhaseOptions.getBoolean(options,\"standard-local-names\");\n}\n", "nl": "Local Name Standardization -- Uses naming scheme of the Local Name Standardizer.. If enabled, the Local Name Standardizer is applied  whenever Shimple creates new locals. Normally,  Shimple will retain the original local names as far  as possible and use an underscore notation to denote  SSA subscripts. This transformation does not  otherwise affect Shimple behaviour.", "id": "46189"}
{"code": "public void init$Children(){\n  children=new ASTNode[1];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "55113"}
{"code": "public static <T extends Serializable>Task<T> task(Runnable runnable){\n  return new RunnableTaskAdapter<T>(runnable);\n}\n", "nl": "Constructs a new runnable task adapter with the runnable to <code>run</code>.", "id": "45091"}
{"code": "public void endOfSuite() throws InterruptedException {\n  if (asynchronousThread == null) {\n    throw new IllegalStateException(\"Reporting thread not yet started\");\n  }\n  this.keepRunning=false;\n  asynchronousThread.join();\n}\n", "nl": "Sets the flag to indicate that there will be no more tests. Waits for reporting thread to finish its job.", "id": "31299"}
{"code": "private static boolean overflowInParse(long current,int digit){\n  return overflowInParse(current,digit,10);\n}\n", "nl": "Returns true if (current * 10) + digit is a number too large to be represented by an unsigned long.  This is useful for detecting overflow while parsing a string representation of a number.", "id": "36432"}
{"code": "public boolean isApplicable(){\n  if (getViewer() instanceof ViewerBase)   return ((ViewerBase)getViewer()).getGraph().getNumberOfNodes() > 0;\n else   return getViewer() instanceof ClusterViewer && ((ClusterViewer)getViewer()).getGraphView() != null && ((ClusterViewer)getViewer()).getGraphView().getGraph().getNumberOfNodes() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "54093"}
{"code": "@ExceptionHandler(DataAccessException.class) @ResponseStatus(value=HttpStatus.INTERNAL_SERVER_ERROR) public @ResponseBody ErrorResponse resolveDataAccessException(DataAccessException e) throws IOException {\n  if (logger.isLoggable(Level.WARNING))   logger.log(Level.WARNING,\"received DataAccessException exception\",e);\n  return new ErrorResponse(new ExceptionMessage(e));\n}\n", "nl": "DataAcessException Handler, returns an error response to the client", "id": "8061"}
{"code": "private void stopPulling(){\n  eventDispatcher.unRegister(this);\n  asyncContext.complete();\n  if (pullingTimeoutFuture != null) {\n    pullingTimeoutFuture.cancel(false);\n  }\n}\n", "nl": "stop current pulling task", "id": "47542"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GET_EXP2(long num0){\n  return new SM_SYSTEM_MESSAGE(1370002,num0);\n}\n", "nl": "You have gained %num0 XP.", "id": "9920"}
{"code": "public SpecialInvokeExpr newSpecialInvokeExpr(Local base,SootMethodRef method,List<? extends Value> args){\n  return new JSpecialInvokeExpr(base,method,args);\n}\n", "nl": "Constructs a NewSpecialInvokeExpr(Local base, SootMethodRef method, List of Immediate) grammar chunk.", "id": "36989"}
{"code": "public static int addExact(final int a,final int b) throws MathRuntimeException {\n  final int sum=a + b;\n  if ((a ^ b) >= 0 && (sum ^ b) < 0) {\n    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_ADDITION,a,b);\n  }\n  return sum;\n}\n", "nl": "Add two numbers, detecting overflows.", "id": "12207"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPAttack_INTERVAL_TO_ME(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201211,num0,skillname);\n}\n", "nl": "Your MP decreased by %num0 due to the effect of [%SkillName].", "id": "54965"}
{"code": "protected void handleMatcherFinishedWithFileSide(){\n}\n", "nl": "this method is called when the matcher thread is finished processing the file records. Default implementation does nothing.", "id": "44471"}
{"code": "public static long indicator(final long x){\n  return (x >= 0L) ? 1L : -1L;\n}\n", "nl": "For a long value x, this method returns +1L if x >= 0 and -1L if x < 0.", "id": "45798"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Silence_END_ME_TO_B(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200448,skilltarget);\n}\n", "nl": "[%SkillTarget] is no longer silenced.", "id": "43871"}
{"code": "public long parseLong(){\n  ASTNode$State state=state();\n  try {\nswitch (getKind()) {\ncase HEXADECIMAL:\n      return parseLongHexadecimal();\ncase OCTAL:\n    return parseLongOctal();\ncase BINARY:\n  return parseLongBinary();\ncase DECIMAL:\ndefault :\nreturn parseLongDecimal();\n}\n}\n  finally {\n}\n}\n", "nl": "This is a refactored version of Literal.parseLong which supports binary literals. This version of parseLong is implemented as an attribute rather than a static method. Perhaps some slight performance boost could be gained from keeping it static, but with the loss of declarative- and ReRAGness. There exists only a parseLong, and not a parseInteger. Parsing of regular integer literals works the same, but with stricter bounds requirements on the resulting parsed value.", "id": "10314"}
{"code": "public void justSelected(){\n  setCachedExpression(generateExpression());\n  setValueFieldState();\n}\n", "nl": "Method called when the field has been selected from a combo box and may need to be initialised Will be be overridden if necessary.", "id": "32123"}
{"code": "public void onTargetDismissed(TapTargetView view,boolean userInitiated){\n}\n", "nl": "Signals that the tap target has been dismissed", "id": "40201"}
{"code": "@Override public StyledLayerDescriptor create(){\n  return DefaultSymbols.createNewPoint();\n}\n", "nl": "Creates the symbol.", "id": "17256"}
{"code": "@Deprecated public int createDeferredElement(String elementName){\n  return createDeferredElement(null,elementName);\n}\n", "nl": "Creates an element node in the table.", "id": "11428"}
{"code": "@Override public boolean isIdDeclared(String name){\n  return (fIdIdrefChecking) ? super.isIdDeclared(name) : false;\n}\n", "nl": "Checks if an ID has already been declared.", "id": "14602"}
{"code": "public static void runOnUiThread(Runnable runnable){\n  HANDLER.post(runnable);\n}\n", "nl": "Run on ui thread", "id": "16966"}
{"code": "private void write(char c) throws SAXException {\n  try {\n    output.write(c);\n  }\n catch (  IOException e) {\n    throw new SAXException(e);\n  }\n}\n", "nl": "Write a raw character.", "id": "41493"}
{"code": "public static void addEmojis(Context context,Spannable text,int emojiSize,int index,int length){\n  addEmojis(context,text,emojiSize,index,length,false);\n}\n", "nl": "Convert emoji characters of the given Spannable to the according emojicon.", "id": "18924"}
{"code": "public Builder dlConf(DistributedLogConfiguration dlConf){\n  this._dlConf=dlConf;\n  return this;\n}\n", "nl": "DistributedLog Configuration", "id": "5664"}
{"code": "@Override public boolean isStepVisible(){\n  return myFinishClicks.get() == 1 && myComponentsPath.shouldDownloadingComponentsStepBeShown();\n}\n", "nl": "The goal is not to show this step until the user completes the wizard. So this page is only shown once, after the user clicks finish for the first time.", "id": "48855"}
{"code": "int baselineFrequency(int time){\n  if (time < startTime || time > endTime) {\n    throw new RuntimeException(\"Invalid time \" + time + \"(startTime \"+ startTime+ \", endTime \"+ endTime+ \")\");\n  }\n  return baseStart + (int)(baseSlope * (time - startTime));\n}\n", "nl": "Calculate the frequency of the baseline at time <code>time</code>. This is calculated as a linear function of baseStart, baseEnd and time.", "id": "503"}
{"code": "public boolean isDistinct(){\n  return distinct;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.submissions", "id": "30662"}
{"code": "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  Constraint.verify(principals);\n}\n", "nl": "Verifies that there is at least one principal, that none of the principals is <code>null</code>, and that there are no duplicates.", "id": "43766"}
{"code": "@Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){\n  FieldConfigTimePeriod copy=null;\n  if (fieldConfigBase != null) {\n    copy=new FieldConfigTimePeriod(fieldConfigBase.getCommonData());\n  }\n  return copy;\n}\n", "nl": "Creates a copy of the field.", "id": "21468"}
{"code": "public static void deleteFile(final File file,final boolean deleteDir){\n  if (file.isDirectory()) {\n    for (    final File subFile : file.listFiles()) {\n      deleteFile(subFile,true);\n    }\n    if (deleteDir) {\n      file.delete();\n    }\n  }\n else {\n    file.delete();\n  }\n}\n", "nl": "Deletes the file, or all files in the directory. Optionally the directory itself too.", "id": "40362"}
{"code": "@Override public boolean contains(S2Cell cell){\n  throw new UnsupportedOperationException(\"'containment' is not numerically well-defined \" + \"except at the polyline vertices\");\n}\n", "nl": "If this method returns true, the region completely contains the given cell. Otherwise, either the region does not contain the cell or the containment relationship could not be determined.", "id": "45151"}
{"code": "protected MessagesGetHistoryAttachmentsQuery peerId(int value){\n  return unsafeParam(\"peer_id\",value);\n}\n", "nl": "Peer ID. <p> <p> For group chat: \"2000000000 + chat ID\" <p> For community: \"-community ID\"", "id": "57629"}
{"code": "public boolean equals(Object obj){\n  if (!(obj instanceof ConnectionRelativeTime)) {\n    return false;\n  }\n  ConnectionRelativeTime cc=(ConnectionRelativeTime)obj;\n  return time == cc.time;\n}\n", "nl": "Two instances of this class are equal if both have the same duration.", "id": "46607"}
{"code": "@Override public void replaceData(int offset,int count,String arg) throws DOMException {\n  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,\"Method not supported\");\n}\n", "nl": "Replace the characters starting at the specified 16-bit unit offset with the specified string.", "id": "8366"}
{"code": "static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {\n  return createObject(factoryId,null,fallbackClassName);\n}\n", "nl": "Finds the implementation Class object in the specified order.  The specified order is the following: <ol> <li>query the system property using <code>System.getProperty</code> <li>read <code>META-INF/services/<i>factoryId</i></code> file <li>use fallback classname </ol>", "id": "58557"}
{"code": "@Override public long addRoleModule(RoleModule roleModule){\n  return sessionTemplate.insert(NAMESPACE + \".addRoleModule\",roleModule);\n}\n", "nl": "Add new role module mapping", "id": "1059"}
{"code": "public static ZooKeeperClientBuilder newBuilder(){\n  return ZooKeeperClientBuilder.newBuilder().retryPolicy(RetryPolicyUtils.DEFAULT_INFINITE_RETRY_POLICY).connectionTimeoutMs(10000).sessionTimeoutMs(60000).zkAclId(null).statsLogger(NullStatsLogger.INSTANCE);\n}\n", "nl": "Return a zookeeper client builder for testing.", "id": "53735"}
{"code": "private boolean isOwner(NamespaceBundle nsBundle){\n  if (pulsar != null) {\n    return pulsar.getNamespaceService().getOwnershipCache().getOwnedServiceUnit(nsBundle) != null;\n  }\n  return false;\n}\n", "nl": "checks if the local broker is the owner of the namespace bundle", "id": "49567"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuffPhysical_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200817,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] removed its abnormal physical conditions by using [%SkillName].", "id": "8156"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoFly_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200310,skillname);\n}\n", "nl": "You are unable to fly because you used [%SkillName].", "id": "17995"}
{"code": "public JSONObject put(String key,long value) throws JSONException {\n  this.put(key,new Long(value));\n  return this;\n}\n", "nl": "Put a key/long pair in the JSONObject.", "id": "37479"}
{"code": "private void appendObjectHeaders(StringBuilder builder,String prefix,Set<Entry<String,List<Object>>> entries){\n  for (  Entry<String,List<Object>> e : entries) {\n    appendHeader(builder,prefix,e.getKey(),e.getValue());\n  }\n}\n", "nl": "Add the entries (assumed to be headers) to the given StringBuilder, prefixing their keys.", "id": "49147"}
{"code": "public Builder maxWidth(Number maxWidth){\n  this.maxHeight=maxWidth;\n  return this;\n}\n", "nl": "Max width of the popup.", "id": "52314"}
{"code": "public void addEvidence(DocumentNGramGraph dDoc,String sFinalCategory){\n  addEvidence(new Decision(dDoc,sFinalCategory,1.0,new HashMap(0)),sFinalCategory);\n}\n", "nl": "Updates the evidence of the determiner with new data, in order to correct erroneous decisions.", "id": "2046"}
{"code": "public int size(){\n  return 5;\n}\n", "nl": "Returns the size of this cp_info object.", "id": "11420"}
{"code": "public Value all(Value target){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return an expression representing the given condition.", "id": "36038"}
{"code": "@Override public int hashCode(){\n  return (Integer.valueOf((int)x).hashCode() >> 13) ^ (Integer.valueOf((int)y).hashCode() >> 7) ^ Integer.valueOf((int)z).hashCode();\n}\n", "nl": "Returns a hash code for this vector.", "id": "47477"}
{"code": "public static boolean isLegacyIdeaAndroidProject(@NotNull Project project){\n  ModuleManager moduleManager=ModuleManager.getInstance(project);\n  for (  Module module : moduleManager.getModules()) {\n    if (isLegacyIdeaAndroidModule(module)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Indicates whether the give project is a legacy IDEA Android project (which is deprecated in Android Studio.)", "id": "42633"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CANNOT_USE_ITEM_TOO_HIGH_LEVEL(int value0,int value1){\n  return new SM_SYSTEM_MESSAGE(1400267,value0,value1);\n}\n", "nl": "Only those at or under level %0 can use %1.", "id": "17901"}
{"code": "public void doStart(){\n  try {\n    if (space == null) {\n      initSpace();\n    }\n    super.doStart();\n  }\n catch (  Exception e) {\n    Log.warn(\"Problem initialising session ids\",e);\n    throw new IllegalStateException(e);\n  }\n}\n", "nl": "Start up the id manager.", "id": "53592"}
{"code": "public boolean removeOnItemClickListener(OnItemClickListener itemClickListener){\n  return clickListeners.remove(itemClickListener);\n}\n", "nl": "remove item click listener from this view", "id": "9293"}
{"code": "@Override public Loader<Cursor> onCreateLoader(int i,Bundle bundle){\n  return new CursorLoader(getActivity(),FeedContract.Entry.CONTENT_URI,PROJECTION,null,null,FeedContract.Entry.COLUMN_NAME_PUBLISHED + \" desc\");\n}\n", "nl": "Query the content provider for data. <p>Loaders do queries in a background thread. They also provide a ContentObserver that is triggered when data in the content provider changes. When the sync adapter updates the content provider, the ContentObserver responds by resetting the loader and then reloading it.", "id": "2630"}
{"code": "public static void dropTable(SQLiteDatabase db,boolean ifExists){\n  String sql=\"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + \"\\\"user_table\\\"\";\n  db.execSQL(sql);\n}\n", "nl": "Drops the underlying database table.", "id": "55994"}
{"code": "@Override public void deleteItem(Long id){\n  alarmMapper.deleteAlarm(id);\n}\n", "nl": "The Alarm implementation of this method also sets the JMS topic name for distribution to the client. TODO used for LASER or TIM publication?", "id": "2910"}
{"code": "public static void clearCache(Context context){\n  cleanExternalCache(context);\n  cleanInternalCache(context);\n}\n", "nl": "Clear cache", "id": "42973"}
{"code": "public void addHeader(Header header){\n  if (header == null) {\n    return;\n  }\n  headers.add(header);\n}\n", "nl": "Adds the given header to the group.  The order in which this header was added is preserved.", "id": "17024"}
{"code": "public static int parseInt(String text) throws DataParseException {\n  try {\n    return ColorLib.hex(text);\n  }\n catch (  Exception e) {\n    throw new DataParseException(e);\n  }\n}\n", "nl": "Parse an int value from a text string.", "id": "50407"}
{"code": "private void showNotification(int id,NotificationCompat.Builder builder){\n  ((NotificationManager)getContext().getSystemService(Context.NOTIFICATION_SERVICE)).notify(id,builder.build());\n}\n", "nl": "Builds and shows the notification", "id": "45271"}
{"code": "protected void notifyDataInvalidatedEvent(){\n  if (datasetObservers != null) {\n    for (    DataSetObserver observer : datasetObservers) {\n      observer.onInvalidated();\n    }\n  }\n}\n", "nl": "Notifies observers about invalidating data", "id": "45435"}
{"code": "protected PlacesSearchQuery latitude(float value){\n  return unsafeParam(\"latitude\",value);\n}\n", "nl": "Geographical latitude of the initial search point, in degrees (from \"-90\" to \"90\").", "id": "13006"}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){\n  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. <p/> This should only be used on AdapterView's such as ListView as it just calls through to overScrollBy() with the scrollRange = 0. AdapterView's do not have a scroll range (i.e. getScrollY() doesn't work).", "id": "7334"}
{"code": "protected void initLookup(){\n  m_lookup=new HashMap();\n  for (int i=0; i < m_names.length; ++i) {\n    m_lookup.put(m_names[i],new Integer(i));\n  }\n}\n", "nl": "Lazily construct the lookup table for this schema. Used to accelerate name-based lookups of schema information.", "id": "29844"}
{"code": "public Object clone(){\n  JimpleLocal local=new JimpleLocal(null,type);\n  local.name=name;\n  return local;\n}\n", "nl": "Returns a clone of the current JimpleLocal.", "id": "14980"}
{"code": "public AccountSaveProfileInfoQuery bdateVisibility(AccountSaveProfileInfoBdateVisibility value){\n  return unsafeParam(\"bdate_visibility\",value);\n}\n", "nl": "Birth date visibility.", "id": "51259"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set keep1=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.setKeep1(value);\n}\n", "nl": "parses the given command and executes it", "id": "46258"}
{"code": "@NotNull public ImageOverlayBuilder toDisk(@NotNull File file){\n  try {\n    ImageIO.write(copy(bufferedImage,BufferedImage.TYPE_INT_ARGB),\"png\",file);\n  }\n catch (  IOException e) {\n    throw new CognitiveException(\"Could not write to disk\",e);\n  }\n  return this;\n}\n", "nl": "Saves the base image to the disk.", "id": "34344"}
{"code": "public static void main(String[] args){\n  final BuildDTO buildEvent=createTestBuildEvent();\n  send(buildEvent,\"build\");\n}\n", "nl": "Java main to test creating events in elasticsearch.  Set the following ENV VARS to point to a local ES running in OpenShift PIPELINE_ELASTICSEARCH_HOST=elasticsearch.vagrant.f8 ELASTICSEARCH_SERVICE_PORT=80", "id": "28194"}
{"code": "public void apply(ProgressListener progressListener) throws CanceledException {\n  resamplingMethod.apply(progressListener);\n}\n", "nl": "apply the calculation", "id": "53568"}
{"code": "public void expand(TreePath[] paths){\n  for (  TreePath path : paths) {\n    this.expand((DefaultMutableTreeNode)path.getLastPathComponent());\n  }\n}\n", "nl": "expand an array of paths", "id": "26915"}
{"code": "public void validate(){\n  if (isEmpty()) {\n    setError(mAlertMessage);\n  }\n else {\n    if (getError() != null)     setError(null);\n  }\n}\n", "nl": "Check the text and show or hide error message if needed.", "id": "12138"}
{"code": "public static char[] toCharArray(InputStream is,String encoding) throws IOException {\n  return toCharArray(is,Charsets.toCharset(encoding));\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a character array using the specified character encoding. <p/> Character encoding names can be found at <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>.", "id": "41539"}
{"code": "public GroupsCreateQuery subtype(GroupsCreateSubType value){\n  return unsafeParam(\"subtype\",value);\n}\n", "nl": "Public page subtype", "id": "17326"}
{"code": "public boolean isGenerated(){\n  return generated;\n}\n", "nl": "Indicated whether or not the resource has been generated while deploying rather than being actual part of the deployment.", "id": "50546"}
{"code": "public static IOFileFilter fileFileFilter(){\n  return FileFileFilter.FILE;\n}\n", "nl": "Returns a filter that checks if the file is a file (and not a directory).", "id": "11121"}
{"code": "public Criteria createCriteria(){\n  Criteria criteria=createCriteriaInternal();\n  if (oredCriteria.size() == 0) {\n    oredCriteria.add(criteria);\n  }\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.countries", "id": "57260"}
{"code": "public void yypushback(int number){\n  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);\n  zzMarkedPos-=number;\n}\n", "nl": "Pushes the specified amount of characters back into the input stream. They will be read again by then next call of the scanning method", "id": "9562"}
{"code": "public MarketRestoreQuery restore(UserActor actor,int ownerId,int itemId){\n  return new MarketRestoreQuery(getClient(),actor,ownerId,itemId);\n}\n", "nl": "Restores recently deleted item", "id": "45825"}
{"code": "public void close() throws IOException {\n  if (!eof) {\n    while (read(buf,0,buf.length) != -1)     ;\n  }\n}\n", "nl": "Closes this input stream and releases any system resources associated with the stream. <p/> This method will read any unread data in the MIME part so that the next part starts an an expected place in the parent <code>InputStream</code>. Note that if the client code forgets to call this method on error, <code>MultipartParser</code> will call it automatically if you call <code>readNextPart()</code>.", "id": "48691"}
{"code": "public boolean enabled(){\n  return soot.PhaseOptions.getBoolean(options,\"enabled\");\n}\n", "nl": "Enabled -- .", "id": "4709"}
{"code": "public double percentile(double percentile){\n  return get(percentile * getEventCount() / 100);\n}\n", "nl": "Get the value at the given percentile.", "id": "11992"}
{"code": "private Stream<String> resolve(String template,Stream<File> files){\n  Stream<Json> json=files.map(null);\n  return partitionedStream(json.iterator()).map(null).map(null);\n}\n", "nl": "Convert native data format to a stream of templates", "id": "41405"}
{"code": "public boolean isSetRequestInfo(){\n  return this.requestInfo != null;\n}\n", "nl": "Returns true if field requestInfo is set (has been assigned a value) and false otherwise", "id": "32195"}
{"code": "@Override public void onPaint(ViewTransform transform,Graphics2D g){\n  for (  Animation animation : mAnimations) {\n    animation.setProgress(getProgress());\n    animation.onPaint(transform,g);\n  }\n}\n", "nl": "Play the animations in our set", "id": "49019"}
{"code": "private static InvocationConstraint[] reduce(InvocationConstraint[] constraints){\n  verify(constraints,2);\n  int n=reduce0(constraints);\n  if (n == 1) {\n    throw new IllegalArgumentException(\"reduced to less than 2 elements\");\n  }\n  return (InvocationConstraint[])Constraint.trim(constraints,n);\n}\n", "nl": "Verifies that the array has at least 2 elements, and that the elements are all non-null and not ConstraintAlternatives instances, removes duplicates, modifying the array in place, verifies that there are still at least 2 elements, and returns an array containing the remaining elements.", "id": "9871"}
{"code": "void young(){\n  mYoung=true;\n}\n", "nl": "Mark the current node is young and unconsumed.", "id": "16518"}
{"code": "public Builder integerColumnsMathOp(String newColumnName,MathOp mathOp,String... columnNames){\n  return transform(new IntegerColumnsMathOpTransform(newColumnName,mathOp,columnNames));\n}\n", "nl": "Calculate and add a new integer column by performing a mathematical operation on a number of existing columns. New column is added to the end.", "id": "28850"}
{"code": "public void addCurrency(String name,int amount) throws InvalidCurrencyException {\n  try {\n    currencies.put(Currency.valueOf(name),amount);\n  }\n catch (  Exception e) {\n    throw new InvalidCurrencyException();\n  }\n}\n", "nl": "Add currency.", "id": "9937"}
{"code": "public void registerListener(Condition condition,int cPriority,EventListener listener){\n  getListenerForCondition(condition,cPriority).registerListener(listener);\n}\n", "nl": "Registers a listener for a particular condition with a given priority for the condition listener", "id": "54885"}
{"code": "public static ValueGetterSpacePredicate<ServerEntry> propertyNull(String propertyName){\n  return property(propertyName,isNull());\n}\n", "nl": "Shortcut for property(propertyName, isNull()).", "id": "27496"}
{"code": "@Override public boolean isShowLabel(){\n  return showLabel;\n}\n", "nl": "Checks if is show label.", "id": "2407"}
{"code": "public String toString(String enc) throws UnsupportedEncodingException {\n  return new String(toByteArray(),enc);\n}\n", "nl": "Gets the curent contents of this byte stream as a string using the specified encoding.", "id": "27368"}
{"code": "public int max_inlinee_size(){\n  return soot.PhaseOptions.getInt(options,\"max-inlinee-size\");\n}\n", "nl": "Max Inlinee Size -- . Determines the maximum number of Jimple statements for an  inlinee method. If a method has more than this number of Jimple  statements, then it will not be inlined into other methods.", "id": "57884"}
{"code": "protected void clearLastReceivedHeaders(){\n  getTestFilter().clearLastReceivedHeaders();\n}\n", "nl": "Clear the last received headers.", "id": "41826"}
{"code": "public static boolean isBodyAsleepColorEnabled(){\n  return bodyAsleepColorEnabled;\n}\n", "nl": "Returns true if a different color should be used for asleep bodies.", "id": "37276"}
{"code": "public void reset(int code){\nsynchronized (this.keys) {\n    if (this.keys.containsKey(code)) {\n      this.keys.get(code).reset();\n    }\n  }\n}\n", "nl": "Resets the given input.", "id": "4320"}
{"code": "@Override public void startPrefixMapping(String prefix,String uri) throws SAXException {\n  if (saxParser != null) {\n    saxParser.startPrefixMapping(prefix,uri);\n  }\n}\n", "nl": "The SAX <code>startPrefixMapping</code> method. Does nothing.", "id": "5461"}
{"code": "public static void outString(DataOutputStream dos,String s) throws IOException {\n  dos.writeShort((short)s.length());\n  for (int i=0; i < s.length(); i++) {\n    dos.writeChar(s.charAt(i));\n  }\n}\n", "nl": "Outputs a string to the given stream.", "id": "12956"}
{"code": "protected void removeChildListeners(){\n}\n", "nl": "Remove child listeners for sub-expression updates.", "id": "31176"}
{"code": "protected void bottomUpDispatch(DominatorNode<N> node){\n  if (isFrontierKnown(node))   return;\n  for (  DominatorNode<N> child : dt.getChildrenOf(node)) {\n    if (!isFrontierKnown(child))     bottomUpDispatch(child);\n  }\n  processNode(node);\n}\n", "nl": "Make sure we visit children first.  This is reverse topological order.", "id": "27221"}
{"code": "public static byte[] readFileToByteArray(File file) throws IOException {\n  InputStream in=null;\n  try {\n    in=openInputStream(file);\n    return IOUtils.toByteArray(in,file.length());\n  }\n  finally {\n    IOUtils.closeQuietly(in);\n  }\n}\n", "nl": "Reads the contents of a file into a byte array. The file is always closed.", "id": "54879"}
{"code": "public Builder keyboard(Boolean keyboard){\n  this.keyboard=keyboard;\n  return this;\n}\n", "nl": "Whether the marker can be tabbed to with a keyboard and clicked by pressing enter. </br> default true", "id": "15795"}
{"code": "public double cond(){\n  return s[0] / s[Math.min(m,n) - 1];\n}\n", "nl": "Two norm condition number", "id": "50877"}
{"code": "private Boolean isOptional(InputDescriptionType input){\n  int minOccurs=input.getMinOccurs().intValue();\n  int maxOccurs=input.getMaxOccurs().intValue();\n  if ((minOccurs == 0) && (maxOccurs == 1)) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Checks if field is optional.", "id": "56670"}
{"code": "@Override public boolean offer(E o){\n  int allWorkingThreads=executor.getActiveCount() + super.size();\n  return allWorkingThreads < executor.getPoolSize() && super.offer(o);\n}\n", "nl": "Inserts the specified element at the tail of this queue if there is at least one available thread to run the current task. If all pool threads are actively busy, it rejects the offer.", "id": "17032"}
{"code": "public void onRemoval(K key,R resource){\n}\n", "nl": "Notifies that the resource was removed, e.g. due to eviction.", "id": "18263"}
{"code": "public String toJson() throws JsonGenerationException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.writeValueAsString(this);\n}\n", "nl": "obj --> json", "id": "44466"}
{"code": "public MessagesGetLongPollHistoryQuery previewLength(Integer value){\n  return unsafeParam(\"preview_length\",value);\n}\n", "nl": "Number of characters after which to truncate a previewed message. To preview the full message, specify \"0\". NOTE: Messages are not truncated by default. Messages are truncated by words.", "id": "40525"}
{"code": "public LogSubjects.LogSubject assertThat(){\n  return assertAbout(LogSubjects.CONSOLE_SUBJECT_FACTORY).that(this);\n}\n", "nl": "Returns a truth subject that provides fluent methods for assertions on this instance. <p>For example: testConsole.assertThat() .matchesNext(...) .equalsNext(...) .containsNoMoreMessages();", "id": "42833"}
{"code": "public static Map<String,Object> createContent(DispatchContext dctx,Map<String,? extends Object> context){\n  Map<String,Object> result=createContentMethod(dctx,context);\n  return result;\n}\n", "nl": "Create a Content service. The work is done in a separate method so that complex services that need this functionality do not need to incur the reflection performance penalty.", "id": "38943"}
{"code": "public static boolean is3G(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();\n  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_MOBILE) {\n    return true;\n  }\n  return false;\n}\n", "nl": "net is3G", "id": "30708"}
{"code": "void old(){\n  mYoung=false;\n}\n", "nl": "Mark the current node is old and consumed.", "id": "18005"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set showAminoAcids=false;\");\n}\n", "nl": "action to be performed", "id": "42825"}
{"code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{0,0.5,1};\n}\n", "nl": "Creates the default cumulative probability distribution test input values", "id": "9613"}
{"code": "@Inject(optional=true) private void injectDataCenterAnnouncer(DataCenterAnnouncer ignore){\n}\n", "nl": "DefaultDataCenters doesn't actually directly require DataCenterAnnouncer.  However, it is frequently the case that classes that depend on DefaultDataCenters will only operate correctly if the DataCenterAnnouncer has been started first.  The following false dependency forces this injection order when appropriate.", "id": "43666"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GATHER_START_4_FISHING(String value0){\n  return new SM_SYSTEM_MESSAGE(1330014,value0);\n}\n", "nl": "You are fishing %0.", "id": "51424"}
{"code": "private static boolean isAncestor(String ancestorPath,String path){\n  if (ancestorPath.equals(path)) {\n    return false;\n  }\n  return FileUtil.isAncestor(ancestorPath,path,true);\n}\n", "nl": "Returns true if 'path' is a strict child of 'ancestorPath'.", "id": "26681"}
{"code": "public static boolean areEqualOrNull(ItemStack stack1,ItemStack stack2){\n  if (stack1 == stack2) {\n    return true;\n  }\n  return (areEqual(stack1,stack2));\n}\n", "nl": "Compares two ItemStack instances if they reference the same object or are both null. If false, the method areEqual() is called to check if the two instances reference the same item.", "id": "10478"}
{"code": "public OrExpr newOrExpr(Value op1,Value op2){\n  return new JOrExpr(op1,op2);\n}\n", "nl": "Constructs a OrExpr(Immediate, Immediate) grammar chunk.", "id": "24996"}
{"code": "@Override public void createRaster(Symbolizer symbolizer){\n}\n", "nl": "Creates the raster.", "id": "2101"}
{"code": "@Override public int read() throws IOException {\n  if (eof) {\n    throw new IOException(\"Read after end of file\");\n  }\n  if (position == size) {\n    return doEndOfFile();\n  }\n  position++;\n  return processByte();\n}\n", "nl": "Read a byte.", "id": "5779"}
{"code": "public String process(Item seg) throws ProcessException {\n  return segCodaCtype(seg,\"f\");\n}\n", "nl": "Performs some processing on the given item.", "id": "24604"}
{"code": "protected void postProcessEntities(List<T> entityList,WebOptions options,Map<String,String> parameters){\n}\n", "nl": "Override to process entities after it has been retrieved from storage and before it is returned to the view. Entities is null-safe.", "id": "40741"}
{"code": "public String[] readAllLines(){\n  ArrayList<String> lines=new ArrayList<String>();\n  while (hasNextLine()) {\n    lines.add(readLine());\n  }\n  return lines.toArray(new String[0]);\n}\n", "nl": "Reads all remaining lines from this input stream and returns them as an array of strings.", "id": "20129"}
{"code": "public static int read(){\n  return KEYS;\n}\n", "nl": "returns the currently pressed keys", "id": "38463"}
{"code": "public synchronized boolean hasCustomProperties(){\n  Properties prop=getCustomProperties(false);\n  return prop != null && !prop.isEmpty();\n}\n", "nl": "Returns true if the Storage contains any custom properties, false otherwise.", "id": "27619"}
{"code": "public boolean isStacked(){\n  return mVals != null;\n}\n", "nl": "Returns true if this BarEntry is stacked (has a values array), false if not.", "id": "36588"}
{"code": "public Set<RefType> catchableSubset(ThrowableSet thrownSet){\n  Set<RefType> result=new ExceptionHashSet<RefType>(ALL_TEST_THROWABLES.size());\n  for (  RefType e : ALL_TEST_THROWABLES) {\n    if (thrownSet.catchableAs(e)) {\n      result.add(e);\n    }\n  }\n  return result;\n}\n", "nl": "Returns a Set representation of the subset of ALL_TEST_THROWABLES which are catchable by the argument <code>ThrowableSet</code> (for use in assertions about the catchable exceptions.", "id": "30175"}
{"code": "@Deprecated public boolean preferPublic(){\n  return getPreferPublic();\n}\n", "nl": "Return the current prefer public setting.", "id": "44343"}
{"code": "public static String formatPrice(double price){\n  return priceDecimalFormat.format(price);\n}\n", "nl": "Formats a double representing a price into a string", "id": "35949"}
{"code": "@Deprecated public Vector catalogFiles(){\n  return getCatalogFiles();\n}\n", "nl": "Return the current list of catalog files.", "id": "8556"}
{"code": "public WallGetQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "ID of the user or community that owns the wall. By default, current user ID. Use a negative value to designate a community ID.", "id": "37638"}
{"code": "private ABTester from(Object fromObj){\n  if (pointOfReference != null) {\n    throw new IllegalStateException(\"Can only supply one point of reference!\");\n  }\n  pointOfReference=fromObj;\n  return this;\n}\n", "nl": "Specifies an object to use as a point of reference for running an AB test. Typically you'd just pass in <b>this</b> from inside whichever class you're doing the tests in.", "id": "21162"}
{"code": "public GroupsIsMemberQueryWithUserIdsExtended isMemberExtended(UserActor actor,String groupId,Integer... userIds){\n  return new GroupsIsMemberQueryWithUserIdsExtended(getClient(),actor,groupId,userIds);\n}\n", "nl": "Returns information specifying whether a user is a member of a community.", "id": "21862"}
{"code": "public boolean isApplicable(){\n  ClassificationViewer viewer=(ClassificationViewer)((Director)getDir()).getViewerByClassName(\"KEGG\");\n  return viewer != null && viewer.hasComparableData();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "39544"}
{"code": "private List<String> dimensionNamespaces(String dimensionName){\nswitch (dimensionName) {\ncase \"SIZE\":\n    return Arrays.asList(\"SPECIES\",\"BREED\",\"GENDER\");\ncase \"SHAPE\":\n  return Arrays.asList(\"SPECIES\");\ndefault :\nreturn Collections.emptyList();\n}\n}\n", "nl": "Build the namespaces chain based on the dimension name. <p> SIZE will contain multiple namespaces SHAPE will contain single namespace other dimensions will contain empty namespace", "id": "57275"}
{"code": "public <U>Domino<T,U> dominoMap(final Domino<? super R,? extends U> domino){\n  return merge((Domino<R,U>[])new Domino[]{domino});\n}\n", "nl": "Pass the input of this Domino to another Domino and regard its output as the output of this Domino.", "id": "40641"}
{"code": "private void unloadDataStore(){\n  if (dataSourceInfo != null) {\n    dataSourceInfo.unloadDataStore();\n  }\n  if (exampleDataSourceInfo != null) {\n    exampleDataSourceInfo.unloadDataStore();\n  }\n}\n", "nl": "Unload data store.", "id": "36083"}
{"code": "public void invalidateAll(){\n  if (m_tuples == null)   return;\n  for (int i=0; i < m_tuples.length; ++i)   invalidate(i);\n}\n", "nl": "Invalidate all tuples managed by this TupleManager", "id": "31617"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostDropRate_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200301,skillname);\n}\n", "nl": "Your loot rate has increased because you used [%SkillName].", "id": "14631"}
{"code": "public void discovered(DiscoveryEvent event){\n  DiscoveryListener l=get();\n  if (l != null) {\n    l.discovered(event);\n  }\n}\n", "nl": "Delegate the notification to the listener.", "id": "11702"}
{"code": "public boolean endOfStream(){\n  return finished;\n}\n", "nl": "Find out if the end of the stream has been reached.", "id": "54566"}
{"code": "public void onUpdate(){\n}\n", "nl": "Called to update the entity's position/logic.", "id": "58501"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Recall_Instant_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201242,skilltarget,skillname);\n}\n", "nl": "You requested [%SkillTarget] to be summoned by using [%SkillName].", "id": "35364"}
{"code": "public void moveViewTo(float xValue,float yValue,AxisDependency axis){\n  float yInView=getAxisRange(axis) / mViewPortHandler.getScaleY();\n  Runnable job=MoveViewJob.getInstance(mViewPortHandler,xValue,yValue + yInView / 2f,getTransformer(axis),this);\n  addViewportJob(job);\n}\n", "nl": "This will move the left side of the current viewport to the specified x-value on the x-axis, and center the viewport to the specified y value on the y-axis. This also refreshes the chart by calling invalidate().", "id": "47103"}
{"code": "public void begin(int size){\n  outputData=new byte[size];\n  curIndex=0;\n}\n", "nl": "Starts the output of a set of data. Audio data for a single utterance should be grouped between begin/end pairs.", "id": "50757"}
{"code": "public static String toString(URI uri,String encoding) throws IOException {\n  return toString(uri,Charsets.toCharset(encoding));\n}\n", "nl": "Gets the contents at the given URI.", "id": "51637"}
{"code": "public boolean canContainKey(Object key){\n  return (key instanceof RegistrarLease && registrarID.equals(((RegistrarLease)key).getRegistrarID()));\n}\n", "nl": "Any RegistrarLease from the same server can be in the map", "id": "2226"}
{"code": "public void close(){\n  try {\n    if (textStorageReader != null)     textStorageReader.closeAllFiles();\n    if (dataIndexReader != null)     dataIndexReader.close();\n    if (classDumpReader != null)     classDumpReader.close();\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n  }\n}\n", "nl": "close associated file or database", "id": "47625"}
{"code": "public boolean isEntryMethod(SootMethod method){\n  return !tgtToEdge.containsKey(method);\n}\n", "nl": "Does this method have no incoming edge?", "id": "2309"}
{"code": "public boolean equals(Object other){\n  if (!(other instanceof TObjectShortHashMap)) {\n    return false;\n  }\n  TObjectShortHashMap that=(TObjectShortHashMap)other;\n  if (that.size() != this.size()) {\n    return false;\n  }\n  return forEachEntry(new EqProcedure(that));\n}\n", "nl": "Compares this map with another map for equality of their stored entries.", "id": "16993"}
{"code": "public void resetInternalTimer(){\n  this.frameStart=-1;\n  this.nextFrameStart=0;\n  this.totalRead=0;\n}\n", "nl": "Reset the internal time stamp to 0.", "id": "18721"}
{"code": "public void info(String message){\n  addLogEntry(new InfoEntry(message));\n}\n", "nl": "Stores the info entry.", "id": "2965"}
{"code": "@Override public ListenableFuture<MemberListResponse> listMember(){\n  return clusterStub.memberList(MemberListRequest.getDefaultInstance());\n}\n", "nl": "lists the current cluster membership", "id": "28224"}
{"code": "@VisibleForTesting public static void overrideAccountAdderForTests(AccountAdder adder){\n  sInstance=adder;\n}\n", "nl": "Overrides the singleton instance of AccountAdder with the specified instance, for use in tests.", "id": "40797"}
{"code": "public boolean shouldContinue(){\n  return !hasErrors() && !isCancelled();\n}\n", "nl": "Returns true if no errors and isn't cancelled.", "id": "5101"}
{"code": "@Override public List<String> searchRoleByUserId(String userId){\n  return sessionTemplate.selectList(NAMESPACE + \".searchRoleByUserId\",userId);\n}\n", "nl": "Search user role by user id", "id": "37671"}
{"code": "public static String[] createTags(String cName){\n  String shortTag=Classification.createShortTag(cName);\n  String longTag=cName.toLowerCase() + \"|\";\n  if (shortTag.equals(longTag))   return new String[]{shortTag};\n else   return new String[]{shortTag,longTag};\n}\n", "nl": "create tags for parsing header line", "id": "43779"}
{"code": "static AnyVal<Void> anyNone(){\n  return new AnyOptional<>(null,null);\n}\n", "nl": "Returns a new AnyVal that matches an empty Optional.", "id": "34450"}
{"code": "public static long retryInfinitelyLong(final Callable<Long> callable){\n  return longResponseRetryer.retryInfinitely(callable);\n}\n", "nl": "Long Response Retryer", "id": "51562"}
{"code": "public Future execute(CompletionCallback<Object> callback){\n  if (callback == null)   throw new IllegalArgumentException(\"Callback cannot be null\");\n  TaskManagerImpl taskManager=new TaskManagerImpl(this.executor_,this.cond_,this.task_,callback);\n  this.executor_.execute(taskManager);\n  return new Future(taskManager);\n}\n", "nl": "Execute the task with N retries, and an interval between retries.", "id": "51605"}
{"code": "public NewsfeedIgnoreItemQuery ignoreItem(UserActor actor,NewsfeedItemType type,int ownerId,int itemId){\n  return new NewsfeedIgnoreItemQuery(getClient(),actor,type,ownerId,itemId);\n}\n", "nl": "Hides an item from the newsfeed.", "id": "14380"}
{"code": "public static Navigator with(Context context) throws NavigatorException {\n  return getInstance(context);\n}\n", "nl": "Get the default Navigator object instance and begin building a request", "id": "8603"}
{"code": "protected Uri onRestoreRingtone(){\n  final String uriString=getPersistedString(null);\n  return !TextUtils.isEmpty(uriString) ? Uri.parse(uriString) : null;\n}\n", "nl": "Called when the chooser is about to be shown and the current ringtone should be marked. Can return null to not mark any ringtone. <p> By default, this restores the previous ringtone URI from the persistent storage.", "id": "17304"}
{"code": "private int calculateDepth(TemplateDruidQuery candidate){\n  int theDepth=1;\n  TemplateDruidQuery iterator=candidate.nestedQuery;\n  while (iterator != null) {\n    theDepth++;\n    iterator=iterator.getInnerQuery();\n  }\n  return theDepth;\n}\n", "nl": "Calculate the depth of the candidate TemplateDruidQuery.", "id": "58463"}
{"code": "protected void synchronizeChildren(){\n  needsSyncChildren(false);\n}\n", "nl": "Override this method in subclass to hook in efficient internal data structure.", "id": "30962"}
{"code": "@Override public Filter createFilter(){\n  return new ContainsExtended();\n}\n", "nl": "Creates the filter.", "id": "7807"}
{"code": "public Object clone(){\n  return new FakeJimpleLocal(getName(),getType(),realLocal,info);\n}\n", "nl": "Returns a clone of the current JimpleLocal.", "id": "51023"}
{"code": "public boolean contains(T obj){\n  throw new RuntimeException(\"RwlSegmentedStoredList::contains not supported\");\n}\n", "nl": "is this object contained in the SL ?", "id": "2817"}
{"code": "private void pauseAutoCycle(){\n  if (mCycling) {\n    mCycleTimer.cancel();\n    mCycleTask.cancel();\n    mCycling=false;\n  }\n else {\n    if (mResumingTimer != null && mResumingTask != null) {\n      recoverCycle();\n    }\n  }\n}\n", "nl": "pause auto cycle.", "id": "30204"}
{"code": "public static Double parseDouble(String value){\n  if (value == null || value.trim().isEmpty()) {\n    return null;\n  }\n  try {\n    return Double.parseDouble(value);\n  }\n catch (  NumberFormatException ex) {\n    return null;\n  }\n}\n", "nl": "Parses the given string and returns a double value. Returns null if the given string is null or cannot be parsed as a double.", "id": "36181"}
{"code": "public <T,Y>StaticScript broadcast(RemoteResultReducer<T,Y> reducer){\n  this.broadcast=true;\n  this.remoteResultReducer=reducer;\n  return this;\n}\n", "nl": "Broadcast the execution of this script over all active partitions. Optionally use a reducer to reduce the results.", "id": "16484"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "6304"}
{"code": "public void clear(){\n  for (int i=0; i < fMatchersCount; i++) {\n    fMatchers[i]=null;\n  }\n  fMatchersCount=0;\n  fContextStack.clear();\n}\n", "nl": "Resets the XPath matcher stack.", "id": "25205"}
{"code": "public static java.sql.Time toSqlTime(int hour,int minute,int second){\n  java.util.Date newDate=toDate(0,0,0,hour,minute,second);\n  if (newDate != null) {\n    return new java.sql.Time(newDate.getTime());\n  }\n else {\n    return null;\n  }\n}\n", "nl": "Makes a java.sql.Time from separate ints for hour, minute, and second.", "id": "33112"}
{"code": "public static SM_SYSTEM_MESSAGE STR_WAIT_TO_QUIT(String value0){\n  return new SM_SYSTEM_MESSAGE(1300698,value0);\n}\n", "nl": "Leaving Atreia.\\n\\n Please wait %0 seconds.", "id": "40915"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "3232"}
{"code": "public void close() throws BrokerServiceException {\n  subscription.removeConsumer(this);\n  cnx.removedConsumer(this);\n}\n", "nl": "Close the consumer if: a. the connection is dropped b. connection is open (graceful close) and there are no pending message acks", "id": "11634"}
{"code": "private static void rethrowAsProperlyTypedException(Throwable throwable) throws IOException, ConfigurationException {\n  if (throwable != null) {\n    Throwables.propagateIfPossible(throwable,IOException.class,ConfigurationException.class);\n    throw new IllegalStateException(throwable);\n  }\n}\n", "nl": "Recover actual type of the exception.", "id": "26385"}
{"code": "public static void applyForPermit(AirMapAvailablePermit permit,@Nullable AirMapCallback<AirMapPilotPermit> callback){\n  PermitService.applyForPermit(permit,callback);\n}\n", "nl": "Apply for a permit", "id": "40773"}
{"code": "public IEntryPacket toEntry(Object key,Object value) throws RemoteException, UnusableEntryException, UnknownTypeException {\n  if (key == null || value == null)   return null;\n  return _converter.toInternal(MapEntryFactory.create(key,value));\n}\n", "nl": "Convert key value to entry", "id": "39029"}
{"code": "public void save(@NotNull ProgressIndicator progress){\n  if (isSourcesModified()) {\n    RepositorySourceProvider userSourceProvider=getUserSourceProvider();\n    assert userSourceProvider != null;\n    userSourceProvider.save(new RepoProgressIndicatorAdapter(progress));\n    reset();\n  }\n}\n", "nl": "Save any changes the user has made.", "id": "34910"}
{"code": "public static Color hex2Rgb(String colourStr){\n  return new Color(Integer.valueOf(colourStr.substring(1,3),16),Integer.valueOf(colourStr.substring(3,5),16),Integer.valueOf(colourStr.substring(5,7),16));\n}\n", "nl": "Convert colour encoded as hex to rgb.", "id": "46517"}
{"code": "private BSPTree<Sphere1D> previousInternalNode(BSPTree<Sphere1D> node){\n  if (childBefore(node).getCut() != null) {\n    return leafBefore(node).getParent();\n  }\n  while (isBeforeParent(node)) {\n    node=node.getParent();\n  }\n  return node.getParent();\n}\n", "nl": "Get the previous internal node.", "id": "29038"}
{"code": "public VirtualInvokeExpr newVirtualInvokeExpr(Local base,SootMethodRef method,List args){\n  return new GVirtualInvokeExpr(base,method,args);\n}\n", "nl": "Constructs a VirtualInvokeExpr(Local base, SootMethodRef method, List of Expr) grammar chunk.", "id": "47863"}
{"code": "public boolean canAccessProgram(Program program){\n  for (  UserAuthorityGroup group : userAuthorityGroups) {\n    if (group.getPrograms().contains(program)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Indicates if the given program is accessible.", "id": "32604"}
{"code": "void cancelExecutingJob(){\n  mCallbackHandler.obtainMessage(MSG_CANCEL).sendToTarget();\n}\n", "nl": "Called externally when a job that was scheduled for execution should be cancelled.", "id": "53519"}
{"code": "public int size(){\n  return filledCells;\n}\n", "nl": "Return how many objects are in the container but not the capacity of the container.", "id": "10120"}
{"code": "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  serviceID=new ServiceID(in);\n}\n", "nl": "Reads the service ID, encoded as specified by the ServiceID.writeBytes method.", "id": "21502"}
{"code": "public static JSONObject toJSONObject(String string) throws JSONException {\n  return toJSONObject(new XMLTokener(string));\n}\n", "nl": "Convert a well-formed (but not necessarily valid) XML string into a JSONObject using the JsonML transform. Each XML tag is represented as a JSONObject with a \"tagName\" property. If the tag has attributes, then the attributes will be in the JSONObject as properties. If the tag contains children, the object will have a \"childNodes\" property which will be an array of strings and JsonML JSONObjects. Comments, prologs, DTDs, and <code>&lt;[ [ ]]></code> are ignored.", "id": "43208"}
{"code": "private <T>T send(String method,@Nullable Object entity){\n  try {\n    if (entity == null) {\n      builder().method(method);\n    }\n else {\n      builder().method(method,shadingSafeEntity(entity));\n    }\n    return null;\n  }\n catch (  UniformInterfaceException e) {\n    throw asEmoClientException(e);\n  }\n}\n", "nl": "Sends the optionally provided request entity using the provided method.", "id": "52536"}
{"code": "public long putIfAbsent(short key,long value){\n  int index=insertionIndex(key);\n  if (index < 0)   return _values[-index - 1];\n  return doPut(key,value,index);\n}\n", "nl": "Inserts a key/value pair into the map if the specified key is not already associated with a value.", "id": "27701"}
{"code": "public synchronized static AccessToken buildAccessToken(String accessToken){\n  if (accessToken == null || \"\".equals(accessToken)) {\n    return null;\n  }\n  try {\n    JSONObject jsonObject=new JSONObject(accessToken);\n    return new AccessToken(jsonObject);\n  }\n catch (  JSONException e) {\n    Log.d(TAG,e.getMessage());\n    return null;\n  }\n}\n", "nl": "build an accessToken from a previously retrieved value", "id": "55637"}
{"code": "public static SM_SYSTEM_MESSAGE STR_RESURRECTOTHER_DIALOG__5MIN(String value0){\n  return new SM_SYSTEM_MESSAGE(1300744,value0);\n}\n", "nl": "It will be cancelled if you do not press it in %0 minutes.", "id": "39532"}
{"code": "public VideoDeleteQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "ID of the user or community that owns the video.", "id": "11207"}
{"code": "private void fireProcessSupervisionUpdate(final SupervisionEvent supervisionEvent){\n  Set<SupervisionListener> listeners=processSupervisionListeners.get(supervisionEvent.getEntityId());\n  if (listeners != null) {\n    for (    SupervisionListener listener : listeners) {\n      listener.onSupervisionUpdate(supervisionEvent);\n    }\n  }\n}\n", "nl": "Inner method to inform all subscribed listeners of the process supervision event", "id": "30058"}
{"code": "public static JsonRootNode jsonFromString(String input){\n  try {\n    return new JdomParser().parse(input);\n  }\n catch (  InvalidSyntaxException e) {\n    return null;\n  }\n}\n", "nl": "Parse a json from a string", "id": "25381"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SwitchHPMP_Instant_A_TO_B(String skillcaster,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201040,skillcaster,skilltarget,skillname);\n}\n", "nl": "[%SkillCaster] exchanged [%SkillTarget]'s HP and MP by using [%SkillName].", "id": "7385"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_ALARM_REMAIN_PLAYTIME(String value0){\n  return new SM_SYSTEM_MESSAGE(1400049,value0);\n}\n", "nl": "The playing time will expire in %*0. If you wish to continue using the service, please make additional payments on the Billing Page of the Plaync website.", "id": "41577"}
{"code": "public Builder tileSize(Number tileSize){\n  this.tileSize=tileSize;\n  return this;\n}\n", "nl": "Tile size (width and height in pixels, assuming tiles are square). </br> default 256", "id": "9938"}
{"code": "@Override public String toString(){\n  return \" at character \" + this.myIndex + \" of \"+ this.mySource;\n}\n", "nl": "Make a printable string of this JSONTokener.", "id": "48756"}
{"code": "public static String emptyIfEqual(String string,String test){\n  return test != null && test.equals(string) ? EMPTY : string;\n}\n", "nl": "Returns the empty string if the given string is equal to the given test, the string if not.", "id": "57247"}
{"code": "public final void detach(){\n  if (isAttachedToRecycler) {\n    isAttachedToRecycler=false;\n    recyclerWantsTouch=false;\n    recyclerView.reset();\n    recyclerView=null;\n    layoutManager=null;\n  }\n}\n", "nl": "Detaches <code>RecyclerViewHeader</code> from <code>RecyclerView</code>.", "id": "42861"}
{"code": "public static Optional<String> createInputDialog(final Window owner,final String title,final String label){\n  final TextInputDialog dialog=new TextInputDialog();\n  dialog.setTitle(title);\n  dialog.setHeaderText(null);\n  dialog.setContentText(label);\n  dialog.initOwner(owner);\n  return dialog.showAndWait();\n}\n", "nl": "Asks the user for input.", "id": "17654"}
{"code": "public void stopEditing(){\n  m_editor.setVisible(false);\n  if (m_editItem != null) {\n    String txt=m_editor.getText();\n    m_editItem.set(m_editAttribute,txt);\n    m_editItem=null;\n    m_editAttribute=null;\n    m_editor.setBackground(null);\n    m_editor.setForeground(null);\n  }\n  m_editing=false;\n}\n", "nl": "Stops text editing on the display, hiding the text editing widget. If the text editor was associated with a specific VisualItem (ie one of the editText() methods which include a VisualItem as an argument was called), the item is updated with the edited text.", "id": "39900"}
{"code": "public PointsToSet reachingObjects(Context c,Local l,SootField f){\n  return reachingObjects(f);\n}\n", "nl": "Returns the set of objects pointed to by instance field f of the objects pointed to by l in context c.", "id": "57960"}
{"code": "private void initIdleStateTracking(){\n  mIdleTracker=new IdlenessTracker();\n  mIdleTracker.startTracking();\n}\n", "nl": "Idle state tracking, and messaging with the task manager when significant state changes occur", "id": "19280"}
{"code": "public Builder fillOpacity(Number fillOpacity){\n  this.fillOpacity=fillOpacity;\n  return this;\n}\n", "nl": "Fill opacity. </br> default 0.2", "id": "58507"}
{"code": "public static ZooKeeperClientBuilder newBuilder(DistributedLogConfiguration conf){\n  return ZooKeeperClientBuilder.newBuilder().retryPolicy(RetryPolicyUtils.DEFAULT_INFINITE_RETRY_POLICY).sessionTimeoutMs(conf.getZKSessionTimeoutMilliseconds()).zkAclId(conf.getZkAclId()).retryThreadCount(conf.getZKClientNumberRetryThreads()).requestRateLimit(conf.getZKRequestRateLimit()).statsLogger(NullStatsLogger.INSTANCE);\n}\n", "nl": "Create a zookeeper client builder with provided <i>conf</i> for testing.", "id": "33741"}
{"code": "public final CharSequence yytext(){\n  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);\n}\n", "nl": "Returns the text matched by the current regular expression.", "id": "15917"}
{"code": "public void reset(final Vector3D newPole){\n  this.pole=newPole.normalize();\n  this.x=newPole.orthogonal();\n  this.y=Vector3D.crossProduct(newPole,x).normalize();\n}\n", "nl": "Reset the instance as if built from a pole. <p>The circle is oriented in the trigonometric direction around pole.</p>", "id": "20587"}
{"code": "public void commit() throws IOException {\n  if (hasErrors) {\n    completeEdit(this,false);\n    remove(entry.key);\n  }\n else {\n    completeEdit(this,true);\n  }\n  committed=true;\n}\n", "nl": "Commits this edit so it is visible to readers.  This releases the edit lock so another edit may be started on the same key.", "id": "56742"}
{"code": "public JSONObject put(String key,Object value) throws JSONException {\n  if (key == null) {\n    throw new JSONException(\"Null key.\");\n  }\n  if (value != null) {\n    testValidity(value);\n    this.map.put(key,value);\n  }\n else {\n    remove(key);\n  }\n  return this;\n}\n", "nl": "Put a key/value pair in the JSONObject. If the value is null, then the key will be removed from the JSONObject if it is present.", "id": "7899"}
{"code": "public GroupsEditQuery website(String value){\n  return unsafeParam(\"website\",value);\n}\n", "nl": "Website that will be displayed in the community information field", "id": "33982"}
{"code": "@Override public final Object put(String key,Object value){\n  return set(key,value);\n}\n", "nl": "put the key-value in bean.", "id": "42855"}
{"code": "public boolean isSmoking(){\n  return isSmoking;\n}\n", "nl": "Checks if the explosion is smoking.", "id": "35566"}
{"code": "public boolean canGet(String field,Class type){\n  Column c=getColumn(field);\n  return (c == null ? false : c.canGet(type));\n}\n", "nl": "Check if the <code>get</code> method for the given data field returns values that are compatible with a given target type.", "id": "26806"}
{"code": "public void addSoundEvent(State event,int resId){\n  mSoundMap.put(event,resId);\n}\n", "nl": "Set the Sounds to be played when a Pull Event happens. You specify which sound plays for which events by calling this method multiple times for each event. <p/> If you've already set a sound for a certain event, and add another sound for that event, only the new sound will be played.", "id": "7859"}
{"code": "protected Augmentations modifyAugmentations(Augmentations augs,boolean force){\n  if (force || isTopLevelIncludedItem()) {\n    if (augs == null) {\n      augs=new AugmentationsImpl();\n    }\n    augs.putItem(XINCLUDE_INCLUDED,Boolean.TRUE);\n  }\n  return augs;\n}\n", "nl": "Modify the augmentations.  Add an [included] infoset item, if <code>force</code> is true, or if the current element is a top level included item.", "id": "9771"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_StatUp_A_TO_SELF(String skilltarget,String value0,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200877,skilltarget,value0,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] is in the boost %0 state because [%SkillCaster] used [%SkillName].", "id": "47415"}
{"code": "protected PollsGetVotersQuery answerIds(List<Integer> value){\n  return unsafeParam(\"answer_ids\",value);\n}\n", "nl": "Answer IDs.", "id": "40307"}
{"code": "private BSPTree<Sphere1D> leafBefore(BSPTree<Sphere1D> node){\n  node=childBefore(node);\n  while (node.getCut() != null) {\n    node=childAfter(node);\n  }\n  return node;\n}\n", "nl": "Find the leaf node just before an internal node.", "id": "49391"}
{"code": "public static boolean parseBooleanParam(String value){\n  if (value == null) {\n    return false;\n  }\n  if (value.equalsIgnoreCase(\"false\") || value.equals(\"0\")) {\n    return false;\n  }\n  return true;\n}\n", "nl": "Parse a boolean query parameter value Unlike Boolean.parseBoolean this will treat any value except null, false and 0 as true.", "id": "30396"}
{"code": "public MethodDecl lookupClose(ResourceDeclaration resource){\n  ASTNode$State state=state();\n  try {\n    TypeDecl resourceType=resource.getTypeAccess().type();\n    for (    MethodDecl method : (Collection<MethodDecl>)resourceType.memberMethods(\"close\")) {\n      if (method.getNumParameter() == 0) {\n        return method;\n      }\n    }\n    return null;\n  }\n  finally {\n  }\n}\n", "nl": "Lookup the close method declaration for the resource which is being used.", "id": "57683"}
{"code": "public boolean isContent(){\n  return state.equals(CONTENT);\n}\n", "nl": "Check if content is shown", "id": "36600"}
{"code": "public void addProperty(String property,Number value){\n  add(property,createJsonElement(value));\n}\n", "nl": "Convenience method to add a primitive member. The specified value is converted to a JsonPrimitive of Number.", "id": "1435"}
{"code": "@Override public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augmentations) throws XNIException {\n}\n", "nl": "An external entity declaration.", "id": "31455"}
{"code": "public static SM_SYSTEM_MESSAGE STR_ARTIFACT_INITIAL_TIME(String value0){\n  return new SM_SYSTEM_MESSAGE(1390197,value0);\n}\n", "nl": "%0 seconds remain until you can cast it again.", "id": "38387"}
{"code": "public void onFinish(){\n}\n", "nl": "Fired in all cases when the request is finished, after both success and failure, override to handle in your own code", "id": "1482"}
{"code": "public static String sanitizeAppIdentifier(String appIdentifier) throws IllegalArgumentException {\n  if (appIdentifier == null) {\n    throw new IllegalArgumentException(\"App Key must not be null.\");\n  }\n  String sAppIdentifier=appIdentifier.trim();\n  if (sAppIdentifier.length() != APP_IDENTIFIER_LENGTH) {\n    throw new IllegalArgumentException(\"App Key length must be \" + APP_IDENTIFIER_LENGTH + \" characters.\");\n  }\n  return sAppIdentifier;\n}\n", "nl": "Sanitizes an app identifier or throws an exception if it can't be sanitized.", "id": "46277"}
{"code": "public final boolean isSearch(){\n  return (this.collidable == null || this.fixture == null);\n}\n", "nl": "Returns true if the given proxy is a search proxy. <p> These should not be stored in the broad phase, but instead used to do searching.", "id": "37117"}
{"code": "public static SM_SYSTEM_MESSAGE STR_ABYSS_DOOR_BROKEN(String value1,String value0){\n  return new SM_SYSTEM_MESSAGE(1301049,value1,value0);\n}\n", "nl": "%1 of the %0 destroyed the Castle Gate.", "id": "24867"}
{"code": "public GroupsSetCallbackSettingsQuery messageNew(Boolean value){\n  return unsafeParam(\"message_new\",value);\n}\n", "nl": "New messages notifications.", "id": "7683"}
{"code": "public void sendResumeEvent(PluginResult resumeEvent){\nsynchronized (messageChannelLock) {\n    if (messageChannel != null) {\n      sendEventMessage(resumeEvent);\n    }\n else {\n      this.pendingResume=resumeEvent;\n    }\n  }\n}\n", "nl": "Used to send the resume event in the case that the Activity is destroyed by the OS", "id": "22659"}
{"code": "private boolean isIllegalIndex(int i){\n  return i < curStartIndex || i >= curEndIndex;\n}\n", "nl": "whether the index is illegal", "id": "23368"}
{"code": "public Vector2f interpolate(Vector2f finalVec,float changeAmnt){\n  this.x=(1 - changeAmnt) * this.x + changeAmnt * finalVec.x;\n  this.y=(1 - changeAmnt) * this.y + changeAmnt * finalVec.y;\n  return this;\n}\n", "nl": "Sets this vector to the interpolation by changeAmnt from this to the finalVec this=(1-changeAmnt)*this + changeAmnt * finalVec", "id": "36958"}
{"code": "private static int perturb(final int hash){\n  return hash & 0x7fffffff;\n}\n", "nl": "Perturb the hash for starting probing.", "id": "18331"}
{"code": "public void notifyLoaded(){\n  mHandler.sendEmptyMessage(MSG_DID_LOAD);\n}\n", "nl": "Notifies the loading is completed <p>When your loading task is finished, you should call it to notify ElasticListView to accordingly change the status of footer view</p>", "id": "15183"}
{"code": "public static void write(File file,CharSequence data,boolean append) throws IOException {\n  write(file,data,Charset.defaultCharset(),append);\n}\n", "nl": "Writes a CharSequence to a file creating the file if it does not exist using the default encoding for the VM.", "id": "37993"}
{"code": "public VideoSearchQuery sort(VideoSearchSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order", "id": "13797"}
{"code": "@Override public List<Integer> readSortIndex() throws IOException {\n  if (null == columnSortInfo) {\n    readColumnSortInfo();\n  }\n  return columnSortInfo.getSort_index();\n}\n", "nl": "method for reading the carbon dictionary sort index data from columns sortIndex file.", "id": "56936"}
{"code": "public void onFullScreenButtonListener(OnClickListener listener){\n  playerControlsWrapper.setOnFullScreenButtonListener(listener);\n}\n", "nl": "Set a custom behaviour to the full screen button.", "id": "55892"}
{"code": "public boolean unlike(User user){\n  boolean unlike=this.likedBy.remove(user);\n  if (unlike) {\n    this.likes--;\n  }\n  return unlike;\n}\n", "nl": "Attempts to remove the given user from the set of users liking this  interpretation. If user not already present, decrease the like count  with one.", "id": "24776"}
{"code": "@Override public synchronized void remove(String key){\n  boolean deleted=getFileForKey(key).delete();\n  removeEntry(key);\n  if (!deleted) {\n    VolleyLog.d(\"Could not delete cache entry for key=%s, filename=%s\",key,getFilenameForKey(key));\n  }\n}\n", "nl": "Removes the specified key from the cache if it exists.", "id": "45570"}
{"code": "public final boolean isValid(){\n  return qualityCode == SourceDataQuality.OK;\n}\n", "nl": "Check whether this SourceDataQuality object represents a VALID value. The method will return true if the quality code is SourceDataQuality.OK", "id": "46915"}
{"code": "public int lowerEndpoint(){\n  return lowerBound.endpoint();\n}\n", "nl": "Returns the lower endpoint of this range.", "id": "29916"}
{"code": "public static final float toJulian(Date date){\n  Calendar c=Calendar.getInstance();\n  c.setTime(date);\n  return toJulian(c);\n}\n", "nl": "Return a Julian date based on the input parameter. This is based from calculations found at <a href=\"http://quasar.as.utexas.edu/BillInfo/JulianDatesG.html\">Julian Day Calculations (Gregorian Calendar)</a>, provided by Bill Jeffrys.", "id": "26882"}
{"code": "public String optString(String key){\n  LazyNode token=getOptionalFieldToken(key);\n  if (token == null)   return null;\n  if (token.type == LazyNode.VALUE_NULL)   return null;\n  return token.getStringValue(cbuf);\n}\n", "nl": "Returns the string value stored in this object for the given key. Returns null if there is no such key.", "id": "6257"}
{"code": "public RequestHandle put(String url,ResponseHandlerInterface responseHandler){\n  return put(null,url,null,responseHandler);\n}\n", "nl": "Perform a HTTP PUT request, without any parameters.", "id": "52900"}
{"code": "public CreatePageWindow selectTemplate(String exactTemplateName){\n  WebElement template=currentWindow.findElement(By.xpath(\".//div[contains(@class, \" + \"'template-title') and text() = \\\"\" + exactTemplateName + \"\\\"]\"));\n  template.click();\n  return this;\n}\n", "nl": "Selects the template that matches exactly the provided value.", "id": "18520"}
{"code": "public DefaultHibernateSpaceDataSourceConfigurer useScrollableResultSet(boolean useScrollableResultSet){\n  this.useScrollableResultSet=useScrollableResultSet;\n  return this;\n}\n", "nl": "Controls if scrollable result sets will be used with initial load operation. Defaults to <code>true</code>.", "id": "18387"}
{"code": "public void init() throws ServletException {\n}\n", "nl": "Initialization of the servlet. <br>", "id": "52289"}
{"code": "public boolean isApplicable(){\n  return ((AlignmentViewer)getViewer()).getSelectedBlock().isSelected();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "27614"}
{"code": "public static final void shuffle(double[] a,Random r){\n  shuffle(a,0,a.length,r);\n}\n", "nl": "Randomly permute the contents of an array.", "id": "20258"}
{"code": "public boolean isOption(){\n  if (option == null) {\n    return false;\n  }\n else {\n    return option;\n  }\n}\n", "nl": "Gets the value of the option property.", "id": "39023"}
{"code": "public static Point size(URL url){\n  if (url == null)   return null;\n  try {\n    return size(url.openStream());\n  }\n catch (  Exception e) {\n    log.error(e.getMessage(),e);\n  }\n  return null;\n}\n", "nl": "get the size of image by url.", "id": "474"}
{"code": "public final boolean isInvalid(){\n  return qualityCode != SourceDataQuality.OK;\n}\n", "nl": "Check whether this SourceDataQuality object represents a VALID value. The method will return true if the quality code is anything else but  SourceDataQuality.OK", "id": "58493"}
{"code": "public void close(BaseServerPacket packet){\n  channel.write(packet).addListener(ChannelFutureListener.CLOSE);\n}\n", "nl": "Closes the channel but ensures that packet is send before close", "id": "51162"}
{"code": "public static RequestLog dump(){\n  RequestLog current=RLOG.get();\n  RequestLog copy=new RequestLog(current);\n  current.clear();\n  RLOG.remove();\n  return copy;\n}\n", "nl": "Exports a snapshot of the request log of the current thread and also resets the request log for that thread.", "id": "58553"}
{"code": "public AggregationSet maxEntry(String path){\n  return add(new MaxEntryAggregator().setPath(path));\n}\n", "nl": "Returns entry with maximum value of path of matching entries.", "id": "20781"}
{"code": "@Override public void close() throws IOException {\n}\n", "nl": "Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in this class can be called after the stream has been closed without generating an <tt>IOException</tt>.", "id": "43488"}
{"code": "protected GroupsInviteQuery groupId(int value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "Community ID.", "id": "52978"}
{"code": "public static void writeStringToFile(File file,String data) throws IOException {\n  writeStringToFile(file,data,Charset.defaultCharset(),false);\n}\n", "nl": "Writes a String to a file creating the file if it does not exist using the default encoding for the VM.", "id": "32379"}
{"code": "public java.lang.Boolean isEscaped(){\n  return escaped;\n}\n", "nl": "Gets the value of the escaped property.", "id": "22253"}
{"code": "public static void v(String c,String s){\n  if (isEnable()) {\n    if (s == null)     s=\"\\\"NULL\\\"\";\n    Log.v(c,s);\n  }\n}\n", "nl": "Log a verbose message with logy. ", "id": "20307"}
{"code": "public boolean isInSphere(Vector origin,double radius){\n  return (NumberConversions.square(origin.x - x) + NumberConversions.square(origin.y - y) + NumberConversions.square(origin.z - z)) <= NumberConversions.square(radius);\n}\n", "nl": "Returns whether this vector is within a sphere.", "id": "53284"}
{"code": "protected void asyncSetValue(final String textValue,final JTable table,final int rowIndex,final int columnIndex){\n  setText(textValue);\n  setToolTipText(textValue);\n  WindowStuffHelper.fireCellChanged(table,rowIndex,columnIndex);\n}\n", "nl": "Sets the text and tooltip when the value is resolved.", "id": "18539"}
{"code": "@Override public int hashCode(){\n  if (isNaN()) {\n    return 409;\n  }\n  return 311 * (107 * x.hashCode() + 83 * y.hashCode() + z.hashCode());\n}\n", "nl": "Get a hashCode for the 3D vector. <p> All NaN values have the same hash code.</p>", "id": "49269"}
{"code": "public SequenceBarrier newBarrier(Sequence... sequencesToTrack){\n  return sequencer.newBarrier(sequencesToTrack);\n}\n", "nl": "Create a new SequenceBarrier to be used by an EventProcessor to track which messages are available to be read from the ring buffer given a list of sequences to track.", "id": "13831"}
{"code": "private void publishResponse(Response response){\n  if (RequestLog.isStarted(RESPONSE_WORKFLOW_TIMER)) {\n    RequestLog.stopTiming(RESPONSE_WORKFLOW_TIMER);\n  }\n  asyncResponse.resume(response);\n}\n", "nl": "Publish final response to user.", "id": "47532"}
{"code": "public static Bundle addProperties(Bundle props,int pageNumber,int lastPageNumber){\n  props.putInt(THIS_PAGE_NUMBER,pageNumber);\n  return props;\n}\n", "nl": "Appends page-specific properties to the page instance bundle.", "id": "11993"}
{"code": "protected WallGetQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return \"wall\", \"profiles\", and \"groups\" fields", "id": "23008"}
{"code": "private static void resolveNewExpression(NewExpression objSubjectExpression,HashSet<String> objTypesSet){\n  ClassReference objClassRef=objSubjectExpression.getClassReference();\n  if (null == objClassRef || null == objClassRef.getFQN()) {\n    objTypesSet.add(Types.strResolvingAbortedOnPsiLevel);\n    return;\n  }\n  objTypesSet.add(objClassRef.getFQN());\n}\n", "nl": "Will resolve type of new expression", "id": "17199"}
{"code": "public static final SM_SYSTEM_MESSAGE STR_GUILD_LEVEL_UP_CHALLENGE_TASK(int currentLevel){\n  return new SM_SYSTEM_MESSAGE(904452,currentLevel);\n}\n", "nl": "You need to complete the %0 legion task to level up the legion.", "id": "5638"}
{"code": "protected final void throwObjectContractViolation(Object o1,Object o2) throws IllegalArgumentException {\n  throw new IllegalArgumentException(\"Equal objects must have equal hashcodes. \" + \"During rehashing, Trove discovered that \" + \"the following two objects claim to be \"+ \"equal (as in java.lang.Object.equals()) \"+ \"but their hashCodes (or those calculated by \"+ \"your TObjectHashingStrategy) are not equal.\"+ \"This violates the general contract of \"+ \"java.lang.Object.hashCode().  See bullet point two \"+ \"in that method's documentation. \"+ \"object #1 =\" + o1 + \"; object #2 =\"+ o2);\n}\n", "nl": "Convenience methods for subclasses to use in throwing exceptions about badly behaved user objects employed as keys.  We have to throw an IllegalArgumentException with a rather verbose message telling the user that they need to fix their object implementation to conform to the general contract for java.lang.Object.", "id": "43964"}
{"code": "public Object opt(int index){\n  return (index < 0 || index >= this.length()) ? null : this.myArrayList.get(index);\n}\n", "nl": "Get the optional object value associated with an index.", "id": "27528"}
{"code": "@Override public void reset() throws IOException {\n  fOffset=0;\n  fSurrogate=-1;\n}\n", "nl": "Reset the stream.  If the stream has been marked, then attempt to reposition it at the mark.  If the stream has not been marked, then attempt to reset it in some way appropriate to the particular stream, for example by repositioning it to its starting point.  Not all character-input streams support the reset() operation, and some support reset() without supporting mark().", "id": "21096"}
{"code": "public static void dropTable(Database db,boolean ifExists){\n  String sql=\"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + \"\\\"CHAT_MESSAGE_BEAN\\\"\";\n  db.execSQL(sql);\n}\n", "nl": "Drops the underlying database table.", "id": "42890"}
{"code": "@Override public long nodeNumber(){\n  return nodeNumber;\n}\n", "nl": "Method can be used to get the block index .This can be used when multiple thread can be used scan group of blocks in that can we can assign the some of the blocks to one thread and some to other", "id": "58244"}
{"code": "public Bindings add(String property,JComboBox combo,int defaultValue){\n  combo.addActionListener(this);\n  return add(new JComboBoxBinding(property,combo,defaultValue));\n}\n", "nl": "Handles JComboBox", "id": "12913"}
{"code": "public boolean isEmpty(){\n  return state.equals(EMPTY);\n}\n", "nl": "Check if empty state is shown", "id": "12505"}
{"code": "public void addDetailsView(DetailsView detailsView,int location){\n  DisplayArea displayArea=getDisplayArea(location);\n  if (displayArea != null) {\n    if (\"\".equals(displayArea.getCaption()))     displayArea.setCaption(detailsView.getTab().getName());\n    displayArea.addTab(detailsView.getTab());\n    revalidate();\n    repaint();\n  }\n}\n", "nl": "Adds new details view.", "id": "46389"}
{"code": "public static void log(int severity,String message,Throwable e){\n  log(new Status(severity,SVNUIPlugin.ID,0,message,e));\n}\n", "nl": "Log the given exception along with the provided message and severity indicator", "id": "20053"}
{"code": "public void init(){\n  n_var=int2var.size();\n  for (int i=0; i < n_var; ++i) {\n    varGraph.set(i,null);\n    int2var.get(i).willUpdate=false;\n  }\n}\n", "nl": "Call it before running the optimizations.", "id": "49410"}
{"code": "public Builder countUniqueColumns(String... columns){\n  return add(ReduceOp.CountUnique,columns);\n}\n", "nl": "Reduce the specified columns by counting the number of unique values", "id": "32710"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "21000"}
{"code": "private synchronized void writeObject(ObjectOutputStream s) throws IOException {\n  s.defaultWriteObject();\n}\n", "nl": "Writes the state to the stream.", "id": "38640"}
{"code": "public PhotosEditAlbumQuery privacyComment(List<String> value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n", "nl": "Set privacy comment", "id": "17665"}
{"code": "public void execute(final LoaderTask task){\n  tasks.add(task);\n  processQueue();\n}\n", "nl": "execute a loader task. Either immediately, if nothing is running, or later", "id": "41708"}
{"code": "public static void print(char x){\n  out.print(x);\n  out.flush();\n}\n", "nl": "Prints a character to standard output and flushes standard output.", "id": "34552"}
{"code": "public void close(){\n  assertOnNonUIThread();\n  trimToSizeAndCount();\n  mJournal.rebuild();\n}\n", "nl": "Close IgDiskCache and make sure the journal is updated on close. This could only be called from non-UI thread.", "id": "5613"}
{"code": "private ItemApplication findApplicationInfoLocked(String packageName,String className){\n  for (  ItemApplication info : data) {\n    final ComponentName component=info.mIntent.getComponent();\n    if (packageName.equals(component.getPackageName()) && className.equals(component.getClassName())) {\n      return info;\n    }\n  }\n  return null;\n}\n", "nl": "Find an ApplicationInfo object for the given packageName and className.", "id": "52682"}
{"code": "private int calcNumberOfLines() throws DataFallbackException {\n  int lines=0;\n  openFallbackInputStream();\n  try {\n    while (getInput().readLine() != null) {\n      lines++;\n    }\n  }\n catch (  IOException e) {\n    throw new DataFallbackException();\n  }\n finally {\n    closeFallbackInputStream();\n  }\n  return lines;\n}\n", "nl": "It checks the number of lines that the fallback log file has", "id": "58407"}
{"code": "private static boolean wasSuccessful(Future<AndroidDebugBridge> future){\n  if (!future.isDone()) {\n    return false;\n  }\n  try {\n    AndroidDebugBridge bridge=future.get();\n    return bridge != null && bridge.isConnected();\n  }\n catch (  Exception e) {\n    return false;\n  }\n}\n", "nl": "Returns whether the future has completed successfully.", "id": "40069"}
{"code": "@Override public void endValueScopeFor(IdentityConstraint identityConstraint,int initialDepth){\n  ValueStoreBase valueStore=fValueStoreCache.getValueStoreFor(identityConstraint,initialDepth);\n  valueStore.endValueScope();\n}\n", "nl": "Ends the value scope for the specified identity constraint.", "id": "46819"}
{"code": "public BoardGetTopicsQueryWithExtended preview(BoardGetTopicsPreview value){\n  return unsafeParam(\"preview\",value);\n}\n", "nl": "Set preview", "id": "27635"}
{"code": "public Builder tapTolerance(Number tapTolerance){\n  this.tapTolerance=tapTolerance;\n  return this;\n}\n", "nl": "The max number of pixels a user can shift his finger during touch for it to be considered a valid tap. default 15", "id": "10789"}
{"code": "protected void showIndeterminate(final CharSequence message){\n  dismissProgress();\n  progress=new MaterialDialog.Builder(context).content(message).progress(true,0).build();\n  progress.show();\n}\n", "nl": "Show indeterminate progress dialog with given message", "id": "9930"}
{"code": "public String process(Item item) throws ProcessException {\n  return getPhoneFeature(item,\"vrnd\");\n}\n", "nl": "Performs some processing on the given item.", "id": "6834"}
{"code": "public boolean isRemoteProtocol(){\n  return isJiniProtocol() || isRmiProtocol();\n}\n", "nl": "Returns true if the protocol is remote (JINI or RMI), false otherwise.", "id": "7213"}
{"code": "public ListIterator<E> listIterator(){\n  return this.listIterator(0);\n}\n", "nl": "a list iterator is a problem for a composite list as going back in the order of the list is an issue, as are the other methods like set() and add() (and especially, remove). Convert the internal lists to one list (if not already just one list) and return that list's list iterator. <p/> AFAIK list iterator is only commonly used in sorting.", "id": "22621"}
{"code": "public void insert(int offset,int[] values){\n  insert(offset,values,0,values.length);\n}\n", "nl": "Inserts the array of <tt>values</tt> into the list at <tt>offset</tt>.  All values including and to the right of <tt>offset</tt> are shifted to the right.", "id": "4139"}
{"code": "private void requestAudioPermissions(){\n  if (ActivityCompat.shouldShowRequestPermissionRationale(getActivity(),AUDIO_PERMS)) {\n    showPermissionRationale();\n  }\n else {\n    ActivityCompat.requestPermissions(this.getActivity(),new String[]{AUDIO_PERMS},REQUEST_AUDIO_PERMS);\n  }\n}\n", "nl": "This method creates an alert which explains the need for the audio permissions, only when the user has denied permission once in history. Otherwise, it simply requests the permission.", "id": "42805"}
{"code": "@Override public void unsubscribe(String topic,long timeout) throws AWSIotException, AWSIotTimeoutException {\n  super.unsubscribe(topic,timeout);\n}\n", "nl": "Unsubscribes to a given topic. This is a blocking call, so the calling thread is blocked until the unsubscribe operation completed, failed, or the specified timeout has elapsed.", "id": "55201"}
{"code": "public void putValue(@NotNull String key,@NotNull ObservableValue value){\n  myValues.put(key,value);\n}\n", "nl": "Put a named value into the context.", "id": "42696"}
{"code": "public String next(){\n  return nextLine();\n}\n", "nl": "Returns the next line in the wrapped <code>Reader</code>.", "id": "45543"}
{"code": "public boolean types_for_sites(){\n  return soot.PhaseOptions.getBoolean(options,\"types-for-sites\");\n}\n", "nl": "Types For Sites -- Represent objects by their actual type rather than allocation  site. When this option is set to true, types rather than allocation  sites are used as the elements of the points-to sets.", "id": "13178"}
{"code": "protected Granularity generateGranularity(String granularity,GranularityParser granularityParser) throws BadApiRequestException {\n  try {\n    return granularityParser.parseGranularity(granularity);\n  }\n catch (  GranularityParseException e) {\n    LOG.error(UNKNOWN_GRANULARITY.logFormat(granularity),granularity);\n    throw new BadApiRequestException(e.getMessage());\n  }\n}\n", "nl": "Generate a Granularity instance based on a path element.", "id": "22525"}
{"code": "public boolean removeCondition(FallbackCondition condition){\n  return this.fallbackConditions.remove(condition);\n}\n", "nl": "Removes the given condition to the list of fallback conditions and returns true if the operation was successful.", "id": "24481"}
{"code": "public static NotNullSpacePredicate isNotNull(){\n  return NOT_NULL;\n}\n", "nl": "Creates an IS NOT NULL predicate.", "id": "31792"}
{"code": "public static boolean isExtension(String filename,String extension){\n  if (filename == null) {\n    return false;\n  }\n  if (extension == null || extension.length() == 0) {\n    return indexOfExtension(filename) == -1;\n  }\n  String fileExt=getExtension(filename);\n  return fileExt.equals(extension);\n}\n", "nl": "Checks whether the extension of the filename is that specified. <p> This method obtains the extension as the textual part of the filename after the last dot. There must be no directory separator after the dot. The extension check is case-sensitive on all platforms.", "id": "3633"}
{"code": "public void putFramePathOnStack(int index){\n  if (!switchRequestComingFromFrameSwitcher) {\n    expandFramePathStack(new IndexedFrame(index));\n  }\n}\n", "nl": "Puts the IndexedFrame descriptor on the frame stack, without performing switching. TargetLocator uses this method when Bobcat user does switching using webDriver directly. Don't call this method manually.", "id": "23679"}
{"code": "public PhotosGetAllQueryWithExtended ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "ID of a user or community that owns the photos. Use a negative value to designate a community ID.", "id": "39241"}
{"code": "public Value abs(Value num){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return a value representing the absolute value of the given one.", "id": "29369"}
{"code": "@Override public int countMissing(){\n  int count=0;\n  for (int i=0; i < size(); i++) {\n    if (getByte(i) == MISSING_VALUE) {\n      count++;\n    }\n  }\n  return count;\n}\n", "nl": "Returns the count of missing values in this column", "id": "44936"}
{"code": "public OrExpr newOrExpr(Value op1,Value op2){\n  return new GOrExpr(op1,op2);\n}\n", "nl": "Constructs a OrExpr(Expr, Expr) grammar chunk.", "id": "38290"}
{"code": "public LtExpr newLtExpr(Value op1,Value op2){\n  return new JLtExpr(op1,op2);\n}\n", "nl": "Constructs a LtExpr(Immediate, Immediate) grammar chunk.", "id": "21561"}
{"code": "public int CalcBonusAbyssReward(boolean isWin,boolean isBossKilled){\n  int BossKilled=1993;\n  int Win=3163;\n  int Loss=1031;\n  if (isBossKilled) {\n    return isWin ? (Win + BossKilled) : (Loss + BossKilled);\n  }\n else {\n    return isWin ? Win : Loss;\n  }\n}\n", "nl": "Calculates the Abyss Bonus Reward for Winner and Looser Team individually. 5156(Win+BossKilled)   :  3163(Win) 3024(Loss+BossKilled)  :  1031(Loss)", "id": "49097"}
{"code": "public boolean hasStroke(Symbolizer symbolizer){\n  boolean result=false;\n  if (symbolizer != null) {\n    SLDTreeLeafInterface obj=map.get(symbolizer.getClass());\n    if (obj != null) {\n      result=obj.hasStroke(symbolizer);\n    }\n  }\n  return result;\n}\n", "nl": "Checks for stroke.", "id": "15910"}
{"code": "public void write(byte[] bytes,int offset,int length) throws IOException {\n  outs.write(bytes,offset,length);\n  position+=length;\n}\n", "nl": "write bytes", "id": "3176"}
{"code": "public static void writeSwappedFloat(byte[] data,int offset,float value){\n  writeSwappedInteger(data,offset,Float.floatToIntBits(value));\n}\n", "nl": "Writes a \"float\" value to a byte array at a given offset. The value is converted to the opposed endian system while writing.", "id": "4506"}
{"code": "public Value coalesceExpression(Value[] val){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return a coalesce expression", "id": "55795"}
{"code": "public void clear(){\n  oredCriteria.clear();\n  orderByClause=null;\n  distinct=false;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.rules", "id": "24520"}
{"code": "@Override public void dispose(){\n}\n", "nl": "Dispose of resources used by this plugin. The engines context calls this method upon plugin unloading.", "id": "53043"}
{"code": "private void stopStateTag(final Long stateTagId,final Timestamp pTimestamp,final String message){\n  controlTagFacade.updateAndValidate(stateTagId,SupervisionStatus.DOWN.toString(),message,pTimestamp);\n}\n", "nl": "Stops the state tag (for Process disconnection).", "id": "10463"}
{"code": "public boolean removeDataSet(int index){\n  if (index >= mDataSets.size() || index < 0)   return false;\n  T set=mDataSets.get(index);\n  return removeDataSet(set);\n}\n", "nl": "Removes the DataSet at the given index in the DataSet array from the data object. Also recalculates all minimum and maximum values. Returns true if a DataSet was removed, false if no DataSet could be removed.", "id": "57795"}
{"code": "protected GroupsGetBannedQuery groupId(int value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "Community ID.", "id": "41080"}
{"code": "public void createMaterialZoneTemplate(Spatial geometry,int regionId,int worldId,int materialId){\n  geometry.setName(geometry.getName() + \"_\" + regionId);\n  createMaterialZoneTemplate(geometry,worldId,materialId,false);\n}\n", "nl": "Method for dynamic zone template creation for geometries; could be saved later in XML", "id": "53609"}
{"code": "public String toString(){\n  return \"CMUTimeVoice\";\n}\n", "nl": "Converts this object to a string", "id": "11053"}
{"code": "private boolean isZeroToThree(final char ch){\n  return ch >= '0' && ch <= '3';\n}\n", "nl": "Checks if the given char is the character representation of one of the digit from 0 to 3.", "id": "32015"}
{"code": "public static synchronized void indexDocument(CodeIndexDocument codeIndexDocument) throws IOException {\n  Queue<CodeIndexDocument> queue=new ConcurrentLinkedQueue<>();\n  queue.add(codeIndexDocument);\n  indexDocuments(queue);\n  queue=null;\n}\n", "nl": "Possibly better in ultra low memory environments? Reuses the above method by creating a queue with one element and passes it in.", "id": "22335"}
{"code": "@Override public void end(){\n  currentTest.get().end();\n}\n", "nl": "Marks the current test as finished.", "id": "3772"}
{"code": "public Criteria or(){\n  Criteria criteria=createCriteriaInternal();\n  oredCriteria.add(criteria);\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.passreset", "id": "57625"}
{"code": "public void shutdown(){\n  try {\n    shutdown(-1,TimeUnit.MILLISECONDS);\n  }\n catch (  final TimeoutException e) {\n    exceptionHandler.handleOnShutdownException(e);\n  }\n}\n", "nl": "Waits until all events currently in the disruptor have been processed by all event processors and then halts the processors.  It is critical that publishing to the ring buffer has stopped before calling this method, otherwise it may never return. <p> <p>This method will not shutdown the executor, nor will it await the final termination of the processor threads.</p>", "id": "11450"}
{"code": "public int lastIndexOf(Object e,int index){\n  Object[] elements=getArray();\n  return lastIndexOf(e,elements,index);\n}\n", "nl": "Returns the index of the last occurrence of the specified element in this list, searching backwards from <tt>index</tt>, or returns -1 if the element is not found. More formally, returns the highest index <tt>i</tt> such that <tt>(i&nbsp;&lt;=&nbsp;index&nbsp;&amp;&amp;&nbsp;(e==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;e.equals(get(i))))</tt>, or -1 if there is no such index.", "id": "18419"}
{"code": "public static boolean is3G(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();\n  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_MOBILE) {\n    return true;\n  }\n  return false;\n}\n", "nl": "check is3G", "id": "48258"}
{"code": "public static String checkEmpty(String string1,String string2,String string3){\n  if (UtilValidate.isNotEmpty(string1))   return string1;\n else   if (UtilValidate.isNotEmpty(string2))   return string2;\n else   if (UtilValidate.isNotEmpty(string3))   return string3;\n else   return \"\";\n}\n", "nl": "Returns the first passed String if not empty, otherwise the second if not empty, otherwise the third if not empty, otherwise an empty but non-null String.", "id": "42305"}
{"code": "public int writeAnnotationSet(AnnotationSet annotationSet){\n  int off=data.position();\n  writeInt(annotationSet.annotationOffsets.length);\n  for (  int annotationOffset : annotationSet.annotationOffsets) {\n    writeInt(annotationOffset);\n  }\n  return off;\n}\n", "nl": "Write AnnotationSet item into current section.", "id": "23570"}
{"code": "private void removeEntry(){\n  filterModel.removeEntries(filterTable.getSelectionModel().getMinSelectionIndex(),filterTable.getSelectionModel().getMaxSelectionIndex());\n  extentModel.populate(null);\n  removeFTCButton.setEnabled(false);\n  addExtentButton.setEnabled(false);\n  removeExtentButton.setEnabled(false);\n}\n", "nl": "Removes the selected feature type constraint entries.", "id": "6953"}
{"code": "protected AdsGetDemographicsQuery dateTo(String value){\n  return unsafeParam(\"date_to\",value);\n}\n", "nl": "Date to show statistics to. For different value of \"period\" different date format is used: 'day': 'YYYY-MM-DD', example: 2011-09-27 - September 27, 2011 '0' - current day; 'month': 'YYYY-MM', example: 2011-09 - September 2011 '0' - current month; 'overall': 0.", "id": "45185"}
{"code": "private static void populate(){\n  String className=FileSystemExtension.class.getName();\n  try {\n    ExtensionInterface extension=(ExtensionInterface)Class.forName(className).newInstance();\n    extensionList.add(extension);\n  }\n catch (  InstantiationException|IllegalAccessException|ClassNotFoundException e) {\n    ConsoleManager.getInstance().exception(ExtensionFactory.class,e);\n  }\n}\n", "nl": "Populate extension list.", "id": "28891"}
{"code": "public MessagesSendQuery attachment(List<String> value){\n  return unsafeParam(\"attachment\",value);\n}\n", "nl": "Required if \"message\" is not set. List of objects attached to the message, separated by commas, in the following format: \"type\"\"owner_id\"_\"media_id\" If the attached object belonging to another owner should be added access_key, in the following format: \"type\"\"owner_id\"_\"media_id\"_\"access_key\" \"\"type\"\" - Type of media attachment: \"photo\" - photo \"video\" - video \"audio\" - audio \"doc\" - document \"wall\" - wall post \"owner_id\" - ID of the media attachment owner. \"media_id\" - media attachment ID. \"access_key\" - object access key. Example: photo100172_166443618", "id": "25376"}
{"code": "public float length(){\n  return (float)waveHeader.getSubChunk2Size() / waveHeader.getByteRate();\n}\n", "nl": "Length of the wave in second", "id": "5973"}
{"code": "public MessagesSendQuery chatId(Integer value){\n  return unsafeParam(\"chat_id\",value);\n}\n", "nl": "ID of conversation the message will relate to.", "id": "12885"}
{"code": "public synchronized BookKeeperClientBuilder name(String name){\n  this.name=name;\n  return this;\n}\n", "nl": "Set client name.", "id": "54697"}
{"code": "public static TypeStack v(){\n  TypeStack typeStack=new TypeStack();\n  typeStack.types=new Type[0];\n  return typeStack;\n}\n", "nl": "Returns an empty stack.", "id": "43444"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysDodge_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200632,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] has boosted your evasion by using [%SkillName].", "id": "54761"}
{"code": "public final String readAsciiString(final int n){\n  final char ret[]=new char[n];\n  for (int x=0; x < n; x++) {\n    ret[x]=(char)readByte();\n  }\n  return new String(ret);\n}\n", "nl": "Reads an ASCII string from the stream with length <code>n</code>.", "id": "33553"}
{"code": "public MessagesGetChatUsersQuery chatId(Integer value){\n  return unsafeParam(\"chat_id\",value);\n}\n", "nl": "Chat ID.", "id": "25507"}
{"code": "protected AdsGetBudgetQuery accountId(int value){\n  return unsafeParam(\"account_id\",value);\n}\n", "nl": "Advertising account ID.", "id": "53872"}
{"code": "public MessagesGetChatUsersQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname", "id": "4525"}
{"code": "public int nextInt(int least,int bound){\n  if (least >= bound)   throw new IllegalArgumentException();\n  return nextInt(bound - least) + least;\n}\n", "nl": "Returns a pseudorandom, uniformly distributed value between the given least value (inclusive) and bound (exclusive).", "id": "44249"}
{"code": "@Override public void updateValue(String key,int count,String value){\n  String updatedKey=String.format(\"%s%s%d\",key,DELIMETER,count);\n  updateValue(updatedKey,value);\n}\n", "nl": "Update value. (Multiple)", "id": "9788"}
{"code": "@Override public XSModel toXSModel(){\n  return new XSModelImpl(new SchemaGrammar[]{this});\n}\n", "nl": "Return an <code>XSModel</code> that represents components in this schema grammar.", "id": "41257"}
{"code": "@Override public XMLInputSource resolveEntity(XMLResourceIdentifier resourceIdentifier) throws XNIException, IOException {\n  String resolvedId=resolveIdentifier(resourceIdentifier);\n  if (resolvedId != null) {\n    return new XMLInputSource(resourceIdentifier.getPublicId(),resolvedId,resourceIdentifier.getBaseSystemId());\n  }\n  return null;\n}\n", "nl": "<p>Resolves an external entity. If the entity cannot be resolved, this method should return <code>null</code>. This method only calls <code>resolveIdentifier</code> and returns an input source if an entry was found in the catalog. It should be overridden if other behaviour is required.</p>", "id": "38623"}
{"code": "protected String objectKey(Object id){\n  return RedisKeys.format(CLASSNAMES,id.toString());\n}\n", "nl": "Default use id as unique key", "id": "12032"}
{"code": "@Override public void update(Protos.TaskStatus status){\nsynchronized (planLock) {\n    getPlan().update(status);\n    updatePlan();\n    notifyObservers();\n  }\n}\n", "nl": "Updates the recovery plan if necessary. 1. Updates existing blocks. 2. If the needs recovery and doesn't yet have a block in the plan, removes any COMPLETED blocks for this task (at most one block for a given task can exist) and creates a new PENDING block.", "id": "48356"}
{"code": "public List<ProcessFunctionParameterValue> extractParameters(){\n  if (builtInSelected) {\n    return builtIn.extractParameters(builtInProcessFunction,selectedProcessFunctionData);\n  }\n else {\n    return custom.extractParameters(selectedCustomFunction);\n  }\n}\n", "nl": "Extract parameters.", "id": "45267"}
{"code": "public void verifyIsDisplayed(){\n  conditions.verify(visibilityOf(toolbar));\n}\n", "nl": "Method verifies if the component toolbar is visible.", "id": "6986"}
{"code": "public TypeDecl type(){\n  ASTNode$State state=state();\n  try {\n    ArrayList<TypeDecl> list=new ArrayList<TypeDecl>();\n    for (int i=0; i < getNumTypeAccess(); i++)     list.add(getTypeAccess(i).type());\n    return lookupLUBType(list).lub();\n  }\n  finally {\n  }\n}\n", "nl": "A catch parameter declared with a disjunction type has the effective type lub(t1, t2, ...)", "id": "26242"}
{"code": "public boolean containsKey(String key){\n  return context.containsKey(key);\n}\n", "nl": "Method for checking if scenarioContext map contains a mapping for the specified key.", "id": "51331"}
{"code": "public void write(short u0,short u1){\n  write(u0);\n  write(u1);\n}\n", "nl": "Writes two code units.", "id": "58052"}
{"code": "private static void expandBelow7DigitNumber(String numberString,WordRelation wordRelation,Item tokenItem){\n  expandLargeNumber(numberString,\"thousand\",3,wordRelation,tokenItem);\n}\n", "nl": "Expands a string that is a 4 to 6 digits number into a list of English words. For example, \"333000\" into \"three hundred and thirty-three thousand\".", "id": "17279"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCMPHeal_Instant_HEAL_ME_TO_B(String skilltarget,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200547,skilltarget,num0,skillname);\n}\n", "nl": "[%SkillTarget] recovered MP by %num0 due to the effect of [%SkillName].", "id": "37443"}
{"code": "public PagesGetQuery needHtml(Boolean value){\n  return unsafeParam(\"need_html\",value);\n}\n", "nl": "Return the page as HTML", "id": "12109"}
{"code": "public final Observable<T> readNullable(){\n  return Observable.defer(null).onErrorResumeNext(null);\n}\n", "nl": "Read from cache and return null if no data is available.", "id": "9147"}
{"code": "public synchronized void pauseCollecting(){\n  paused=true;\n}\n", "nl": "Pause collecting.", "id": "25937"}
{"code": "public final Observable.Transformer<T,T> replace(final Object group){\n  return null;\n}\n", "nl": "Replace the cached data by group based on the element emitted from the observable.", "id": "55751"}
{"code": "public void resetCache(){\n  Cache.clear();\n  ElementAccessTime.clear();\n  CacheAccess.clear();\n  TimeCnt=Long.MIN_VALUE;\n}\n", "nl": "Clears the cache.", "id": "23072"}
{"code": "public void stopWatching(String fileName){\nsynchronized (mObservedChildren) {\n    mObservedChildren.remove(fileName);\n    if (mObservedChildren.isEmpty()) {\n      stopWatching();\n      Log_OC.d(TAG,\"Stopped watching parent folder \" + mPath + \"/\");\n    }\n  }\n}\n", "nl": "Removes a child file from the list of files observed by the folder observer.", "id": "32502"}
{"code": "public void clear(){\n  this.normal=null;\n  this.distance=0;\n  this.point1=null;\n  this.point2=null;\n}\n", "nl": "Clears the separation information.", "id": "28849"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GATHER_FAIL_1_BASIC(String value0){\n  return new SM_SYSTEM_MESSAGE(1330021,value0);\n}\n", "nl": "You have failed to gather %0.", "id": "11287"}
{"code": "public Builder noWrap(Boolean noWrap){\n  this.noWrap=noWrap;\n  return this;\n}\n", "nl": "If set to true, the tiles just won't load outside the world width (-180 to 180 longitude) instead of repeating. default false", "id": "35425"}
{"code": "public static final void emoteStartFollowing(Npc owner){\n  owner.unsetState(CreatureState.WALKING);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.START_EMOTE2,0,0));\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.NEUTRALMODE,0,0));\n}\n", "nl": "Npc starts following other creature", "id": "17812"}
{"code": "public static char highSurrogate(int c){\n  return (char)(((c - 0x00010000) >> 10) + 0xD800);\n}\n", "nl": "Returns the high surrogate of a supplemental character", "id": "55374"}
{"code": "@Override public void processingInstruction(String target,String data) throws SAXException {\n  if (saxParser != null) {\n    saxParser.processingInstruction(target,data);\n  }\n}\n", "nl": "The SAX <code>processingInstruction</code> method. Does nothing.", "id": "29735"}
{"code": "public void resetAxisMaxValue(){\n  mCustomAxisMax=false;\n}\n", "nl": "By calling this method, any custom maximum value that has been previously set is reseted, and the calculation is done automatically.", "id": "53881"}
{"code": "public void close(){\n  this.open=false;\n}\n", "nl": "Closes the inventory display", "id": "46899"}
{"code": "private static boolean isAndroidManifestXmlFile(@NotNull PsiFile file){\n  return file.getName().equalsIgnoreCase(SdkConstants.FN_ANDROID_MANIFEST_XML);\n}\n", "nl": "If the psi file is AndroidManifest.xml.", "id": "21671"}
{"code": "static double[][] loadLnMant(){\n  return LN_MANT.clone();\n}\n", "nl": "Load \"LN_MANT\".", "id": "14697"}
{"code": "static void cancelActivity(Activity a){\n  getInstance()._cancelActivity(a);\n}\n", "nl": "Cancels an Activity and removes it from this manager, called by an Activity when the activity needs to be cancelled.", "id": "37203"}
{"code": "public static Sort of(String name,SortType type){\n  return new Sort(name,type);\n}\n", "nl": "Creates a bew Sort instance to be used in a NoSQL query.", "id": "41739"}
{"code": "public LeastSquaresBuilder model(final MultivariateVectorFunction value,final MultivariateMatrixFunction jacobian){\n  return model(LeastSquaresFactory.model(value,jacobian));\n}\n", "nl": "Configure the model function.", "id": "50990"}
{"code": "@Override public void updateUndoRedoState(boolean undoAllowed,boolean redoAllowed){\n  menuItemUndo.setEnabled(undoAllowed);\n  menuItemRedo.setEnabled(redoAllowed);\n}\n", "nl": "Update undo redo state.", "id": "42320"}
{"code": "private static int convert(ConstraintWidget.DimensionBehaviour behaviour){\nswitch (behaviour) {\ncase FIXED:\n    return SingleWidgetView.FIXED;\ncase WRAP_CONTENT:\n  return SingleWidgetView.WRAP_CONTENT;\ncase ANY:\nreturn SingleWidgetView.ANY;\n}\nreturn SingleWidgetView.FIXED;\n}\n", "nl": "Convert Any to SingleWidgetView flags", "id": "37078"}
{"code": "public void fireInitializationEvent(final IterationEvent e){\n  for (  IterationListener l : listeners) {\n    l.initializationPerformed(e);\n  }\n}\n", "nl": "Informs all registered listeners that the initial phase (prior to the main iteration loop) has been completed.", "id": "9101"}
{"code": "public GroupsEditQuery events(Boolean value){\n  return unsafeParam(\"events\",value);\n}\n", "nl": "Events settings (for public pages only). <p> Possible values: false - disabled; true - enabled", "id": "22628"}
{"code": "public void bind(Activity activity){\n  List<IBinding> bindings=getViewBinder(activity).bind(activity);\n  Set<IBinding> _bindings=getBindings(activity.getClass());\n  _bindings.addAll(bindings);\n}\n", "nl": "Api Methods", "id": "22580"}
{"code": "public static String urlEncodeArgs(Map<String,? extends Object> args){\n  return urlEncodeArgs(args,true);\n}\n", "nl": "URL Encodes a Map of arguements", "id": "12455"}
{"code": "private void showPopup(MouseEvent event){\n  if (event.isPopupTrigger()) {\n    this.copyMenu.show(this.txtFile,event.getX(),event.getY());\n  }\n}\n", "nl": "Shows the popup menu wherever the user clicked if the user clicked the popup trigger mouse key.", "id": "11107"}
{"code": "public static void dropTable(SQLiteDatabase db,boolean ifExists){\n  String sql=\"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + \"'VIDEO_BEAN'\";\n  db.execSQL(sql);\n}\n", "nl": "Drops the underlying database table.", "id": "22710"}
{"code": "public void updateView(){\n  dir.execute(\"update reinduce=true;select nodes=previous;\",dir.getMainViewer().getCommandManager());\n}\n", "nl": "something has been changed or selected, rescan view", "id": "9854"}
{"code": "public String post(String url,RequestParams params) throws HttpException {\n  return post(null,url,params);\n}\n", "nl": "Perform a HTTP POST request with parameters.", "id": "31017"}
{"code": "protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){\n  this.fontRendererObj.drawString(this.archive.getDisplayName().getUnformattedText(),8,6,4210752);\n  this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(),8,this.ySize - 96 + 2,4210752);\n}\n", "nl": "Draw the foreground layer for the GuiContainer (everything in front of the items)", "id": "6572"}
{"code": "public void clear(){\n  length=0;\n}\n", "nl": "Clear the string to empty.", "id": "17650"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_HOSTILE_BLOCK(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1250217,value0,value1);\n}\n", "nl": "%0 blocked %1's attack.", "id": "15255"}
{"code": "public void onButtonClick(View v){\n  if (mBound) {\n    int num=mService.getRandomNumber();\n    Toast.makeText(this,\"number: \" + num,Toast.LENGTH_SHORT).show();\n  }\n}\n", "nl": "Called when a button is clicked (the button in the layout file attaches to this method with the android:onClick attribute)", "id": "24906"}
{"code": "T cycle(){\n  if (_prioritize != null) {\n    return _prioritize;\n  }\n  if (!_queue.isEmpty()) {\n    T first=_queue.keySet().iterator().next();\n    _queue.get(first);\n    return first;\n  }\n  return null;\n}\n", "nl": "Returns the head of the queue, then cycles it to the back of the queue.", "id": "28239"}
{"code": "public boolean pre_jimplify(){\n  return soot.PhaseOptions.getBoolean(options,\"pre-jimplify\");\n}\n", "nl": "Pre Jimplify -- Jimplify all methods before starting Paddle. When this option is set to true, Paddle converts all available  methods to Jimple before starting the points-to analysis. This  allows the Jimplification time to be separated from the  points-to time. However, it increases the total time and memory  requirement, because all methods are Jimplified, rather than  only those deemed reachable by the points-to analysis.", "id": "15982"}
{"code": "public boolean isNavBarTintEnabled(){\n  return mNavBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system navigation bar?", "id": "33021"}
{"code": "public boolean dump_pag(){\n  return soot.PhaseOptions.getBoolean(options,\"dump-pag\");\n}\n", "nl": "Dump PAG -- Dump pointer assignment graph for other solvers. When this option is set to true, a representation of the  pointer assignment graph suitable for processing with other  solvers (such as the BDD-based solver) is output before the  analysis begins.", "id": "54736"}
{"code": "public boolean equals(Object obj){\n  return (this == obj || (obj instanceof DiscoveryPermission && getName().equals(((DiscoveryPermission)obj).getName())));\n}\n", "nl": "Two instances are equal if they have the same name.", "id": "15182"}
{"code": "public GroupsAddLinkQuery addLink(UserActor actor,int groupId,String link){\n  return new GroupsAddLinkQuery(getClient(),actor,groupId,link);\n}\n", "nl": "Allows to add a link to the community.", "id": "37402"}
{"code": "@Override public boolean isCellEditable(int rowIndex,int columnIndex){\n  return true;\n}\n", "nl": "Checks if cell editable.", "id": "7341"}
{"code": "@BeforeClass public static void init() throws Exception {\n  testBrokerService.createAndStartBroker();\n}\n", "nl": "Starts in-memory broker.", "id": "37406"}
{"code": "protected AudioEditQuery audioId(int value){\n  return unsafeParam(\"audio_id\",value);\n}\n", "nl": "Audio file ID.", "id": "49395"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200560,skilltarget,skillname);\n}\n", "nl": "[%SkillTarget] received the defense shield effect as you used [%SkillName].", "id": "51034"}
{"code": "void canLoadMore(String loadMoreMsg){\n  state=FooterState.STATE_LOAD_MORE;\n  loadMoreView(loadMoreMsg);\n}\n", "nl": "tell tha adapter there will be more data ,so the progress will show,and the load more callback will be invoked.", "id": "34890"}
{"code": "public static char[] toCharArray(Reader input) throws IOException {\n  CharArrayWriter sw=new CharArrayWriter();\n  copy(input,sw);\n  return sw.toCharArray();\n}\n", "nl": "Get the contents of a <code>Reader</code> as a character array. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedReader</code>.", "id": "9631"}
{"code": "private int dataPos(long index){\n  return (int)(index & BIT_MASK);\n}\n", "nl": "get position in current array", "id": "26879"}
{"code": "@NotNull public ActionButtonFixture findRunApplicationButton(){\n  return findActionButtonByActionId(\"Run\");\n}\n", "nl": "Finds the Run button in the IDE interface.", "id": "58527"}
{"code": "public GraphSimilarity compareMeaningsOf(Vertex vNode1,Vertex vNode2){\n  GraphSimilarity isRes=new GraphSimilarity();\n  return isRes;\n}\n", "nl": "TODO: Implement  Determines the similarity between two nodes of this graph.", "id": "15368"}
{"code": "public Map<String,Object> asJson(){\n  return ImmutableMap.<String,Object>of(Intrinsic.TABLE,_table,Intrinsic.ID,_id);\n}\n", "nl": "Returns a Json map with two entries, one for \"~table\" and one for \"~id\", similar to all System of Record objects.", "id": "41157"}
{"code": "public static float convertDpToPixel(float dp){\n  if (mMetrics == null) {\n    Log.e(\"MPChartLib-Utils\",\"Utils NOT INITIALIZED. You need to call Utils.init(...) at least once before\" + \" calling Utils.convertDpToPixel(...). Otherwise conversion does not \" + \"take place.\");\n    return dp;\n  }\n  DisplayMetrics metrics=mMetrics;\n  return dp * (metrics.densityDpi / 160f);\n}\n", "nl": "This method converts dp unit to equivalent pixels, depending on device density. NEEDS UTILS TO BE INITIALIZED BEFORE USAGE.", "id": "34597"}
{"code": "public void toString(StringBuffer sb){\n  sb.append(\"catch (\");\n  getParameter().toString(sb);\n  sb.append(\") \");\n  getBlock().toString(sb);\n}\n", "nl": "Pretty printing of multi-catch clause.", "id": "48274"}
{"code": "private static boolean containsOrExtends(@NotNull Set<PsiClass> resolvedClasses,@NotNull PsiClass relatedActivity){\n  if (resolvedClasses.contains(relatedActivity)) {\n    return true;\n  }\n  for (  PsiClass resolvedClass : resolvedClasses) {\n    if (relatedActivity.isInheritor(resolvedClass,false)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Returns true if the given associated activity class is either found in the given set of classes, or (less likely) extends any of the classes in that set", "id": "39048"}
{"code": "public void onTransactionSynchronization(TransactionData transactionData){\n}\n", "nl": "Triggered on synchronization of a transaction.", "id": "28001"}
{"code": "private Complex cdiv(final double xr,final double xi,final double yr,final double yi){\n  return new Complex(xr,xi).divide(new Complex(yr,yi));\n}\n", "nl": "Performs a division of two complex numbers.", "id": "55380"}
{"code": "@ObjectiveCName(\"removeEntry:\") public List removeEntry(String entry){\n  Collection entries=this.getEntries();\n  while (entries.contains(entry))   entries.remove(entry);\n  this.updateList(entries);\n  return this;\n}\n", "nl": "Removes the first occurrence of an entry from the list", "id": "28611"}
{"code": "public static long microsec2ticks(long us,double tempoMPQ,int resolution){\n  return (long)((((double)us) * resolution) / tempoMPQ);\n}\n", "nl": "convert tempo to microsecond with given tempo Does not take tempo changes into account. Does not work for SMPTE timing!", "id": "50118"}
{"code": "private int measureWidth(int measureSpec){\n  return MeasureSpec.getSize(measureSpec);\n}\n", "nl": "Determines the width of this view", "id": "4996"}
{"code": "private void cleanupCache(){\n  Iterator<Entry<SocketAddress,Long>> it=this.failedDelayCache.entrySet().iterator();\n  while (it.hasNext()) {\n    Entry<SocketAddress,Long> e=it.next();\n    Long lastFailTime=e.getValue();\n    if (retryDelayHasPassedBy(lastFailTime)) {\n      it.remove();\n    }\n  }\n}\n", "nl": "Cleanup the entries from the cache that are no longer unresponsive.", "id": "15771"}
{"code": "public static void error(Object message){\n  Gdx.app.error(TAG,String.valueOf(message));\n}\n", "nl": "Logs an error message to the console or logcat", "id": "38555"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "36537"}
{"code": "private void addOptionalSpringLibs(StringBuilder classpath){\n  addLibs(classpath,gsLibOptional + \"spring\");\n}\n", "nl": "add all jars under lib/optional/spring", "id": "31354"}
{"code": "public boolean isMassExplicit(){\n  return this.massExplicit;\n}\n", "nl": "Returns true if the mass of this body has been explicitly set.", "id": "57646"}
{"code": "public static boolean isGoDown(KeyEvent event){\n  return isActionDown(event) && (event.getKeyCode() == KeyEvent.KEYCODE_DPAD_DOWN || (!event.isNumLockOn() && event.getKeyCode() == KeyEvent.KEYCODE_NUMPAD_2));\n}\n", "nl": "Checks whether the given event is any of DPAD down or NUMPAD down.", "id": "44920"}
{"code": "@Override public DataRefNode findLastDataBlock(DataRefNode dataRefBlock,IndexKey searchKey){\n  BTreeNode rootNode=(BTreeNode)dataRefBlock;\n  while (!rootNode.isLeafNode()) {\n    rootNode=findLastLeafNode(searchKey,rootNode);\n  }\n  return rootNode;\n}\n", "nl": "Below method will be used to get the last data tentative block based on search key", "id": "36681"}
{"code": "private void useSkill(int skillId,VisibleObject target){\n  SkillEngine.getInstance().getSkill(getOwner(),skillId,65,target).useSkill();\n}\n", "nl": "Destroyer Kunax Skill's AI", "id": "21447"}
{"code": "public String voice2sampa(String voicePhoneme){\n  if (voice2sampaMap != null && voice2sampaMap.containsKey(voicePhoneme))   return voice2sampaMap.get(voicePhoneme);\n else   return voicePhoneme;\n}\n", "nl": "Converts a single phonetic symbol in the voice phonetic alphabet representation representation into its equivalent in MARY sampa representation.", "id": "50212"}
{"code": "public UsersGetSubscriptionsQueryWithExtended offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of subscriptions.", "id": "29301"}
{"code": "void cancelDisplayTaskFor(ImageAware imageAware){\n  cacheKeysForImageAwares.remove(imageAware.getId());\n}\n", "nl": "Cancels the task of loading and displaying image for incoming <b>imageAware</b>.", "id": "15777"}
{"code": "public void populateFontField(FieldIdEnum fieldId,Font font){\n  if (fieldConfigManager == null) {\n    return;\n  }\n  FieldConfigBase fieldConfig=fieldConfigManager.get(fieldId);\n  if (fieldConfig != null) {\n    fieldConfig.populateField(font);\n  }\n}\n", "nl": "Populate font field.", "id": "32066"}
{"code": "public static boolean removeFromCache(String imageUri,DiskCache diskCache){\n  File image=diskCache.get(imageUri);\n  return image != null && image.exists() && image.delete();\n}\n", "nl": "Removed cached image file from disk cache (if image was cached in disk cache before)", "id": "32028"}
{"code": "@Commit public void build(){\n  for (  EquipmentConfiguration configuration : equipmentConfigurationList) {\n    equipmentConfigurations.put(configuration.getId(),configuration);\n  }\n}\n", "nl": "This function is called by SimpleXML after deserialisation in order to recreate the map of equipment cofngiurations from the list.", "id": "47747"}
{"code": "public synchronized VisualTable addTable(String group,Table table){\n  return addTable(group,table,(Predicate)null);\n}\n", "nl": "Adds a data table to this visualization, using the given data group name. A visual abstraction of the data will be created and registered with the visualization. An exception will be thrown if the group name is already in use.", "id": "54932"}
{"code": "public Object jjtAccept(MithraQLVisitor visitor,Object data){\n  return visitor.visit(this,data);\n}\n", "nl": "Accept the visitor.", "id": "38405"}
{"code": "@Override public boolean onTouchEvent(MotionEvent event){\n  if (mIsEnabled) {\n    return mGestureDetector.onTouchEvent(event);\n  }\n  return false;\n}\n", "nl": "Notifies controller of the received touch event.", "id": "11685"}
{"code": "@Override public Writer append(char value){\n  builder.append(value);\n  return this;\n}\n", "nl": "Append a single character to this Writer.", "id": "19329"}
{"code": "public static int readSwappedUnsignedShort(InputStream input) throws IOException {\n  int value1=read(input);\n  int value2=read(input);\n  return (((value1 & 0xff) << 0) + ((value2 & 0xff) << 8));\n}\n", "nl": "Reads a unsigned short (16-bit) from an InputStream. The value is converted to the opposed endian system while reading.", "id": "3686"}
{"code": "public AdsCreateTargetGroupQuery createTargetGroup(UserActor actor,int accountId,String name){\n  return new AdsCreateTargetGroupQuery(getClient(),actor,accountId,name);\n}\n", "nl": "Creates a group to re-target ads for users who visited advertiser's site (viewed information about the product, registered, etc.).", "id": "12697"}
{"code": "public static Object decodeToObject(String encodedObject) throws java.io.IOException, ClassNotFoundException {\n  return decodeToObject(encodedObject,NO_OPTIONS,null);\n}\n", "nl": "Attempts to decode Base64 data and deserialize a Java Object within. Returns <tt>null</tt> if there was an error.", "id": "32035"}
{"code": "public double[] skipTo(final int index) throws MathIllegalArgumentException {\n  count=index;\n  return nextVector();\n}\n", "nl": "Skip to the i-th point in the Halton sequence. <p> This operation can be performed in O(1).", "id": "30630"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillToggleCost_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200640,skillcaster,skillname);\n}\n", "nl": "Your mantra skill MP consumption has changed because [%SkillCaster] used [%SkillName].", "id": "6576"}
{"code": "public static int cleanup(long uid){\n  return Helper.delete(W.create(\"uid\",uid),Lock.class);\n}\n", "nl": "delete all user lock info for the user id", "id": "11671"}
{"code": "@Override public int available() throws IOException {\n  throw exception;\n}\n", "nl": "Throws the configured exception.", "id": "56250"}
{"code": "protected boolean hasAttemptRemaining(){\n  return mCurrentRetryCount <= mMaxNumRetries;\n}\n", "nl": "Returns true if this policy has attempts remaining, false otherwise.", "id": "44697"}
{"code": "public void showContent(List<Integer> skipIds){\n  switchState(CONTENT,null,null,null,null,skipIds);\n}\n", "nl": "Hide all other states and show content", "id": "47171"}
{"code": "public static InputStream toInputStream(CharSequence input,Charset encoding){\n  return toInputStream(input.toString(),encoding);\n}\n", "nl": "Convert the specified CharSequence to an input stream, encoded as bytes using the specified character encoding.", "id": "45716"}
{"code": "public void indicatorColor(@ColorInt int color){\n  indicatorPaint.setColor(color);\n  invalidate();\n}\n", "nl": "Set indicator color.", "id": "49333"}
{"code": "public static ProbeItemDescriptor continuousLineItem(String name,String description,ItemValueFormatter formatter){\n  return continuousItem(name,description,formatter,1d,0,MAX_VALUE_UNDEFINED,DEFAULT_LINE_WIDTH,DEFAULT_COLOR,null);\n}\n", "nl": "Creates descriptor for a continuous item created by line segments.", "id": "23756"}
{"code": "public boolean contains(T dataSet){\n  for (int i=0; i < mDataSets.size(); i++) {\n    T set=mDataSets.get(i);\n    if (set.equals(dataSet)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks if this data object contains the specified DataSet. Returns true if so, false if not.", "id": "28944"}
{"code": "public void add(ItemApplication info){\n  if (findActivity(data,info.mComponentName)) {\n    return;\n  }\n  data.add(info);\n  added.add(info);\n}\n", "nl": "Add the supplied ApplicationInfo objects to the list, and enqueue it into the list to broadcast when notify() is called. <p/> If the app is already in the list, doesn't add it.", "id": "31230"}
{"code": "@Override protected void sendRequest(final SuccessCallback success,final HttpErrorCallback error,final FailureCallback failure,final BoundRequestBuilder requestBuilder,final String timerName,final AtomicLong outstanding){\n  this.request=requestBuilder.build();\n}\n", "nl": "Capture arguments to test for expected values.", "id": "14025"}
{"code": "public String process(Item word) throws ProcessException {\n  return wordPunc(word);\n}\n", "nl": "Performs some processing on the given item.", "id": "23910"}
{"code": "public boolean isConcrete(){\n  return !isPhantom() && !isAbstract() && !isNative();\n}\n", "nl": "Returns true if this method is not phantom, abstract or native, i.e. this method can have a body.", "id": "51367"}
{"code": "private void startPeerSync(String peer,int port){\n  boolean isDone=false;\n  localRedisConnect();\n  while (!isDone) {\n    try {\n      isDone=(this.localJedis.slaveof(peer,port) != null);\n      sleeper.sleepQuietly(1000);\n    }\n catch (    Exception e) {\n      localRedisConnect();\n    }\n  }\n}\n", "nl": "Connect to the peer with the same token, in order to start the warm up process", "id": "26665"}
{"code": "@Override public void mark(int readAheadLimit) throws IOException {\n  throw new IOException(fFormatter.formatMessage(fLocale,\"OperationNotSupported\",new Object[]{\"mark()\",\"UTF-16\"}));\n}\n", "nl": "Mark the present position in the stream.  Subsequent calls to reset() will attempt to reposition the stream to this point.  Not all character-input streams support the mark() operation.", "id": "35873"}
{"code": "public DivExpr newDivExpr(Value op1,Value op2){\n  return new GDivExpr(op1,op2);\n}\n", "nl": "Constructs a DivExpr(Expr, Expr) grammar chunk.", "id": "49054"}
{"code": "public static String mrpa2sampa(String voicePhoneme){\n  if (mrpa2sampa.containsKey(voicePhoneme))   return mrpa2sampa.get(voicePhoneme);\n else   return voicePhoneme;\n}\n", "nl": "Converts a single phonetic symbol in MRPA representation representation into its equivalent in MARY sampa representation.", "id": "36190"}
{"code": "public final void info(final Object o,final Throwable t){\n  log(Level.INFO,o,t);\n}\n", "nl": "This method logs the INFO message", "id": "16391"}
{"code": "public void refreshSelectLast(){\n  final int TIME_DELAY_REFRESH_SELECT_LAST=100;\n  handler.removeMessages(HANDLER_MESSAGE_REFRESH_LIST);\n  handler.removeMessages(HANDLER_MESSAGE_SELECT_LAST);\n  handler.sendEmptyMessageDelayed(HANDLER_MESSAGE_REFRESH_LIST,TIME_DELAY_REFRESH_SELECT_LAST);\n  handler.sendEmptyMessageDelayed(HANDLER_MESSAGE_SELECT_LAST,TIME_DELAY_REFRESH_SELECT_LAST);\n}\n", "nl": "refresh and select the last", "id": "40002"}
{"code": "public final TestSubscriber<T> configureValuesTimeout(Duration timeout){\n  this.valuesTimeout=timeout;\n  return this;\n}\n", "nl": "Configure the timeout in seconds for waiting next values to be received (3 seconds by default).", "id": "52519"}
{"code": "public void resizeFrames(int numberOfFrames){\n  times=new int[numberOfFrames];\n  frames=new short[numberOfFrames][];\n  sizes=new int[numberOfFrames];\n  this.numberOfFrames=numberOfFrames;\n}\n", "nl": "Resets the number of frames in this LPCResult.", "id": "40847"}
{"code": "@Override public void deleteNodes(NodeInterface nodeToTransfer,List<SLDDataInterface> sldDataList){\n}\n", "nl": "Delete nodes.", "id": "58375"}
{"code": "public boolean isRight(){\n  return !isLeft;\n}\n", "nl": "Returns whether or not this Either represents a Right value.", "id": "15412"}
{"code": "public static int charFromName(String name){\n  Object value;\n  initialize();\n  value=_byName.get(name);\n  if (value != null && value instanceof Integer) {\n    return ((Integer)value).intValue();\n  }\n  return -1;\n}\n", "nl": "Returns the value of an HTML character reference by its name. If the reference is not found or was not defined as a character reference, returns EOF (-1).", "id": "54047"}
{"code": "public static boolean isContiguousStateCode(String s){\n  if (isEmpty(s))   return defaultEmptyOK;\n  return ((ContiguousUSStateCodes.indexOf(s) != -1) && (s.indexOf(USStateCodeDelimiter) == -1));\n}\n", "nl": "Return true if s is a valid contiguous U.S. Postal Code (abbreviation for state).", "id": "6919"}
{"code": "public boolean hasDimensionConstraints(){\n  Set<DimensionalObject> constraints=getDimensionConstraints();\n  return constraints != null && !constraints.isEmpty();\n}\n", "nl": "Indicates whether this user credentials has dimension constraints.", "id": "46546"}
{"code": "void changeBackgroundColor(int backgroundColor){\n  this.backgroundColor=backgroundColor;\n  invalidate();\n}\n", "nl": "Change bezier view background color", "id": "58352"}
{"code": "@Override public void clear(){\n  decrementAccessCount();\n}\n", "nl": "This method will release the objects and set default value for primitive types", "id": "47044"}
{"code": "@Override protected void invalidateQuietly(final T dataTag,final TagQualityStatus statusToAdd,final String description,final Timestamp timestamp){\n  dataTagCacheObjectFacade.addQualityFlag(dataTag,statusToAdd,description);\n  dataTagCacheObjectFacade.setTimestamps(dataTag,null,null,timestamp);\n}\n", "nl": "To be called internally only within a dataTag synchronized block (if object in cache). Does not notify listeners. Only cache timestamp is set (others are null). Should not be made public.", "id": "55713"}
{"code": "public boolean isPublished(long sequence){\n  return sequencer.isAvailable(sequence);\n}\n", "nl": "Determines if a particular entry has been published.", "id": "52134"}
{"code": "public static Map<String,Object> sendOrderBackorderNotification(DispatchContext ctx,Map<String,? extends Object> context){\n  return sendOrderNotificationScreen(ctx,context,\"PRDS_ODR_BACKORDER\");\n}\n", "nl": "Service to email a customer with order changes", "id": "48728"}
{"code": "List<ConfigItem> fetchConfigs(Set<String> names){\n  Map<String,Object> params=Maps.newHashMapWithExpectedSize(1);\n  params.put(\"names\",Joiners.COMMA.join(names));\n  return doGet(ClientUris.CONFIG_FETCHES,headers,params,JsonUtil.LIST_CONFIG_ITEM_TYPE);\n}\n", "nl": "Fetch config from server", "id": "20812"}
{"code": "public int addSplit(Split split){\n  nsplits++;\n  index2split.put(nsplits,split);\n  split2index.put(split,nsplits);\n  return nsplits;\n}\n", "nl": "add a split", "id": "38980"}
{"code": "public void stopPreview(){\n  if (camera != null && previewing) {\n    if (!useOneShotPreviewCallback) {\n      camera.setPreviewCallback(null);\n    }\n    camera.stopPreview();\n    previewCallback.setHandler(null,0);\n    autoFocusCallback.setHandler(null,0);\n    previewing=false;\n  }\n}\n", "nl": "Tells the camera to stop drawing preview frames.", "id": "15869"}
{"code": "public static void init(Context context){\n  if (sInstance == null) {\n    final ExecutorService service=Executors.newSingleThreadExecutor();\n    sTrainingTaskFuture=service.submit(new TrainingTask(context));\n  }\n else {\n    throw new IllegalStateException(\"Attempt to train code classifier twice.\\n\" + \"It should be initialized once at start to make train asynchronously.\");\n  }\n}\n", "nl": "Start point for apps that use code classifying. Called ones at app start. It creates training task for code classifier.", "id": "48706"}
{"code": "public static boolean nullEquals(String s1,String s2){\n  return (s1 == null ? s2 == null : s1.equals(s2));\n}\n", "nl": "equals() with two strings where either could be null", "id": "3338"}
{"code": "@NotNull public List<Emotion> findEmotionFaces(@NotNull String image){\n  return emotionBuilder.emotionRecognition(image).withResult();\n}\n", "nl": "Find a faces within a local image", "id": "21327"}
{"code": "public static boolean isTrue(boolean expression,String message){\n  if (!expression)   throw new AssertionFailedException(\"assertion failed: \" + message);\n  return expression;\n}\n", "nl": "Asserts that the given boolean is <code>true</code>. If this is not the case, some kind of unchecked exception is thrown. The given message is included in that exception, to aid debugging.", "id": "24810"}
{"code": "public RequestHandle head(String url,RequestParams params,ResponseHandlerInterface responseHandler){\n  return head(null,url,params,responseHandler);\n}\n", "nl": "Perform a HTTP HEAD request with parameters.", "id": "29082"}
{"code": "public static final double metersToFeet(double meters){\n  return meters * METER_TO_FOOT;\n}\n", "nl": "Converts meters to feet.", "id": "51469"}
{"code": "@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n}\n", "nl": "Called when the activity is first created.", "id": "18644"}
{"code": "public static void showInformation(String message){\n  showNotification(title,message,Mode.information,Pos.BOTTOM_LEFT,10000);\n}\n", "nl": "show an information notation", "id": "32493"}
{"code": "public static SearchShareesFragment newInstance(OCFile fileToShare,Account account){\n  SearchShareesFragment fragment=new SearchShareesFragment();\n  Bundle args=new Bundle();\n  args.putParcelable(ARG_FILE,fileToShare);\n  args.putParcelable(ARG_ACCOUNT,account);\n  fragment.setArguments(args);\n  return fragment;\n}\n", "nl": "Public factory method to create new SearchShareesFragment instances.", "id": "56118"}
{"code": "private static short convertToPrimitiveKind(short valueType){\n  if (valueType <= XSConstants.NOTATION_DT) {\n    return valueType;\n  }\n  if (valueType <= XSConstants.ENTITY_DT) {\n    return XSConstants.STRING_DT;\n  }\n  if (valueType <= XSConstants.POSITIVEINTEGER_DT) {\n    return XSConstants.DECIMAL_DT;\n  }\n  return valueType;\n}\n", "nl": "Returns the primitive type of the given type.", "id": "8539"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_RESISTED_MAGIC_PARTY_ENEMY(String skilltarget,String skillcaster){\n  return new SM_SYSTEM_MESSAGE(1230221,skilltarget,skillcaster);\n}\n", "nl": "[%SkillTarget] resisted [%SkillCaster]'s magic.", "id": "14074"}
{"code": "public static int unsignedLeb128Size(int value){\n  int remaining=value >>> 7;\n  int count=0;\n  while (remaining != 0) {\n    remaining>>>=7;\n    count++;\n  }\n  return count + 1;\n}\n", "nl": "Gets the number of bytes in the unsigned LEB128 encoding of the given value.", "id": "2372"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_FRIENDLY_CRITICAL(String value0,int num2,String value1){\n  return new SM_SYSTEM_MESSAGE(1240001,value0,num2,value1);\n}\n", "nl": "Critical Hit! %0 inflicted %num2 critical damage on %1.", "id": "48101"}
{"code": "public INDArray asRowVector(File f) throws IOException {\n  return asRowVector(ImageIO.read(f));\n}\n", "nl": "Convert a file to a row vector", "id": "10102"}
{"code": "public boolean hasPermissionsByInternalId(String internalId,String... permissions){\n  List<Permission> resolvedPermissions=Lists.newArrayListWithCapacity(permissions.length);\n  for (  String permission : permissions) {\n    resolvedPermissions.add(getPermissionResolver().resolvePermission(permission));\n  }\n  return hasPermissionsByInternalId(internalId,resolvedPermissions);\n}\n", "nl": "Test for whether an API key has specific permissions using its internal ID.", "id": "16242"}
{"code": "public static void pickImage(Activity activity){\n  String chooserTitle=activity.getString(R.string.pick_image_intent_text);\n  pickImage(activity,chooserTitle);\n}\n", "nl": "Launch a dialog to pick an image from camera/gallery apps.", "id": "29926"}
{"code": "@Override public boolean equals(Object obj){\n  return getClass().equals(obj.getClass());\n}\n", "nl": "To avoid accidentally multiple times activated restrictions.", "id": "57959"}
{"code": "@Override public void write(int b){\n  int newcount=ensureCapacity(1);\n  buf[count]=(byte)b;\n  count=newcount;\n}\n", "nl": "Writes the specified byte to this byte array output stream.", "id": "11142"}
{"code": "public static SM_SYSTEM_MESSAGE STR_COMBINE_SUCCESS(String value0){\n  return new SM_SYSTEM_MESSAGE(1330049,value0);\n}\n", "nl": "You have crafted %0.", "id": "36940"}
{"code": "public long timeSinceLast(){\n  long currentTime=System.currentTimeMillis();\n  return currentTime - lastMessageTime;\n}\n", "nl": "Returns the number of milliseconds since the last time timerString was called", "id": "2912"}
{"code": "public static void e(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_ERROR) {\n    return;\n  }\n  Log.e(tag,msg,throwable);\n}\n", "nl": "Send an ERROR log message", "id": "38595"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_MAINTAIN_SKILL_TURNED_OFF(String value0){\n  return new SM_SYSTEM_MESSAGE(1300053,value0);\n}\n", "nl": "You stopped using %0 skill.", "id": "22862"}
{"code": "private Object writeReplace(){\n  return new DataTransferObject(getKey(),getValue());\n}\n", "nl": "Replace the instance with a data transfer object for serialization.", "id": "49718"}
{"code": "@Override public boolean hasPassword(){\n  return propertyMap.containsKey(PASSWORD_KEY);\n}\n", "nl": "Checks for password.", "id": "53208"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "6161"}
{"code": "@Override public String toString(){\n  return String.format(\"%s,%s,%s,%s,%d,%s,%s,%s\",cname,mname,shorty,prototype,opcount,mhash_tight,mhash_loose,caller);\n}\n", "nl": "Override toString", "id": "15414"}
{"code": "public static boolean isInstantRunCapableDeviceVersion(@NotNull AndroidVersion version){\n  return version.getApiLevel() >= 15;\n}\n", "nl": "Returns true if the device is capable of running Instant Run", "id": "6546"}
{"code": "@SuppressWarnings(\"unchecked\") public static <T>T fromXml(Class<T> clazz,String xml){\n  T object=(T)CLASS_2_XSTREAM_INSTANCE.get(clazz).fromXML(xml);\n  return object;\n}\n", "nl": "xml -> pojo", "id": "52772"}
{"code": "static <T extends REAL,REAL>AnyVal<T> typeAlias(TypeAliasType<REAL,T> typeAliasType){\n  return new AnyAlias<>(typeAliasType);\n}\n", "nl": "Return a new AnyVal that matches any alias and will hold its value.", "id": "39147"}
{"code": "public boolean isLeaf(){\n  return this.left == null;\n}\n", "nl": "Returns true if this node is a leaf node.", "id": "33333"}
{"code": "public boolean remove(Object o){\n  throw new UnsupportedOperationException();\n}\n", "nl": "Always throws UnsupportedOperationException.", "id": "28673"}
{"code": "public void fireSyncToViewer(){\n  syncListener.syncList2Viewer(getEnabledLabels());\n}\n", "nl": "syncs the selection in this list to the viewer", "id": "49833"}
{"code": "public static String separatorsToWindows(String path){\n  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {\n    return path;\n  }\n  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);\n}\n", "nl": "Converts all separators to the Windows separator of backslash.", "id": "30028"}
{"code": "private void moveToNextBlock(){\n  blk=new BlockId(blk.fileName(),blk.number() - 1);\n  pg.read(blk);\n  currentRec=(Integer)pg.getVal(LogMgr.LAST_POS,INTEGER).asJavaVal();\n}\n", "nl": "Moves to the next log block in reverse order, and positions it after the last record in that block.", "id": "32688"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "55400"}
{"code": "public boolean enabled(){\n  return soot.PhaseOptions.getBoolean(options,\"enabled\");\n}\n", "nl": "Enabled -- .", "id": "21311"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "4004"}
{"code": "private AudioOption createOption6(ChannelType... channels){\n  AudioOption option=new AudioOption();\n  option.add(createTrack(new Channel(FL.name(),channels[0]),new Channel(FR.name(),channels[1])));\n  return option;\n}\n", "nl": "Creates Option6 option.", "id": "7747"}
{"code": "protected void qualityValue(boolean quality){\n}\n", "nl": "Callback procedure that subclasses can override to execute custom quality control measures.", "id": "54785"}
{"code": "public static String dateToStringWithTime(Date date){\n  return dateToString(date,DATETIME_PATTERN);\n}\n", "nl": "yyyy-MM-dd hh:mm:ss", "id": "37112"}
{"code": "public void stopRecording(){\n  m_line.stop();\n  m_line.close();\n}\n", "nl": "Stops the recording. <p/> Note that stopping the thread explicitely is not necessary. Once no more data can be read from the TargetDataLine, no more data be read from our AudioInputStream. And if there is no more data from the AudioInputStream, the method 'AudioSystem.write()' (called in 'run()' returns. Returning from 'AudioSystem.write()' is followed by returning from 'run()', and thus, the thread is terminated automatically. <p/> It's not a good idea to call this method just 'stop()' because stop() is a (deprecated) method of the class 'Thread'. And we don't want to override this method.", "id": "22142"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n  setChild(new List(),1);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "3715"}
{"code": "public static boolean propertyValueEqualsIgnoreCase(String resource,String name,String compareString){\n  String value=getPropertyValue(resource,name);\n  if (value == null)   return false;\n  return value.trim().equalsIgnoreCase(compareString);\n}\n", "nl": "Compares Ignoring Case the specified property to the compareString, returns true if they are the same, false otherwise", "id": "44966"}
{"code": "public LeastSquaresBuilder maxEvaluations(final int newMaxEvaluations){\n  this.maxEvaluations=newMaxEvaluations;\n  return this;\n}\n", "nl": "Configure the max evaluations.", "id": "33280"}
{"code": "public static String stringToBase64(final String data){\n  return Base64.encodeBase64String(ConversionUtils.stringToArray(data));\n}\n", "nl": "Converts plain string into Base64 string.", "id": "28807"}
{"code": "public static LedgerAllocator createLedgerAllocatorPool(String poolPath,int corePoolSize,DistributedLogConfiguration conf,ZooKeeperClient zkc,BookKeeperClient bkc,ScheduledExecutorService scheduledExecutorService) throws IOException {\n  return new LedgerAllocatorPool(poolPath,corePoolSize,conf,zkc,bkc,scheduledExecutorService);\n}\n", "nl": "Create ledger allocator pool.", "id": "39881"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "54945"}
{"code": "public void lockUserInput(){\n  locked=true;\n  statusbar.setText1(\"\");\n  statusbar.setText2(\"Busy...\");\n  frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n  getCommandManager().setEnableCritical(false);\n  searchManager.getFindDialogAsToolBar().setEnableCritical(false);\n  samplesSpreadSheet.lockUserInput();\n}\n", "nl": "ask view to prevent user input", "id": "10292"}
{"code": "private void sendJson(Json json){\n  try {\n    session.getRemote().sendString(json.toString());\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}\n", "nl": "Send the given JSON to the client", "id": "52776"}
{"code": "public void stopRecording(){\n  m_line.stop();\n  m_line.close();\n}\n", "nl": "Stops the recording. <p/> Note that stopping the thread explicitely is not necessary. Once no more data can be read from the TargetDataLine, no more data be read from our AudioInputStream. And if there is no more data from the AudioInputStream, the method 'AudioSystem.write()' (called in 'run()' returns. Returning from 'AudioSystem.write()' is followed by returning from 'run()', and thus, the thread is terminated automatically. <p/> It's not a good idea to call this method just 'stop()' because stop() is a (deprecated) method of the class 'Thread'. And we don't want to override this method.", "id": "20410"}
{"code": "public static Style purple(){\n  final Style style=new Style();\n  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_PURPLE);\n  return style;\n}\n", "nl": "Default material purple transparent style for SuperToasts.", "id": "39948"}
{"code": "public void addResourcesDirectory(@NotNull String path){\n  File directory=myFileStructure.createProjectDir(path);\n  myResourcesDirectories.add(directory);\n}\n", "nl": "Adds the given path to the list of 'resources' directories. It also creates the directory in the file system.", "id": "32381"}
{"code": "protected AdsDeleteAdsQuery ids(String value){\n  return unsafeParam(\"ids\",value);\n}\n", "nl": "Serialized JSON array with ad IDs.", "id": "28263"}
{"code": "@Override public void softAssertion(SoftAssertionFailedEntry softAssertionFailedEntry){\n  throw new UnsupportedOperationException();\n}\n", "nl": "Unsupported, because HtmlReporter doesn't participate in Visitor implementation. You should call \"generateReport\".", "id": "37238"}
{"code": "public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){\n  MediaFormat format=new MediaFormat();\n  format.setString(KEY_MIME,mime);\n  format.setInteger(KEY_SAMPLE_RATE,sampleRate);\n  format.setInteger(KEY_CHANNEL_COUNT,channelCount);\n  return format;\n}\n", "nl": "Creates a minimal audio format.", "id": "21633"}
{"code": "public UsersSearchQuery university(Integer value){\n  return unsafeParam(\"university\",value);\n}\n", "nl": "ID of the institution of higher education.", "id": "40462"}
{"code": "public synchronized boolean addMacro(int macroPosition,String macroXML){\n  if (macrosses.containsKey(macroPosition)) {\n    macrosses.remove(macroPosition);\n    macrosses.put(macroPosition,macroXML);\n    return false;\n  }\n  macrosses.put(macroPosition,macroXML);\n  return true;\n}\n", "nl": "Add macro to the collection.", "id": "58782"}
{"code": "@Override public boolean contains(String identifier){\n  return blacklist.contains(identifier);\n}\n", "nl": "Checks if an identifier is contained in this strategy.", "id": "54799"}
{"code": "public static boolean exists(String name){\n  return channels.containsKey(name);\n}\n", "nl": "Checks if a channel with the given name is already registered", "id": "38414"}
{"code": "public MessagesGetLongPollHistoryQuery onlines(Boolean value){\n  return unsafeParam(\"onlines\",value);\n}\n", "nl": "Return user onlines", "id": "47217"}
{"code": "public void closeDriver(){\n  if (camera != null) {\n    camera.release();\n    camera=null;\n    framingRect=null;\n    framingRectInPreview=null;\n  }\n}\n", "nl": "Closes the camera driver if still in use.", "id": "37457"}
{"code": "public void renderCenter(GL2 gl){\n  Vector2 c=this.mass.getCenter();\n  gl.glColor4fv(Preferences.getBodyCenterColor(),0);\n  RenderUtilities.drawPoint(gl,c);\n}\n", "nl": "Renders the center of mass of this body.", "id": "18745"}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){\n  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. This version of the call is used for Views that need to specify a Scroll Range but scroll back to it's edge correctly.", "id": "20808"}
{"code": "@BeforeClass public void retrieveOAuthToken(){\n  given().auth().preemptive().basic(\"oauth\",\"gimmeatoken\").when().get(\"/v1/oauth2/token\").then().log().body();\n}\n", "nl": "Request an authentication token API and write the response to the console. Use preemptive Basic authentication: username = oauth password = gimmeatoken Use /v1/oauth2/token", "id": "41026"}
{"code": "public DateTimeUnit toUtc(){\n  return DateTimeUnit.fromJodaDateTime(toJodaDateTime().toDateTime(DateTimeZone.UTC),true);\n}\n", "nl": "Return current instance with timeZone set to UTC", "id": "17504"}
{"code": "public void addWatch(FileWatcherUpdateInterface parent,Path path){\n  if (path != null) {\n    try {\n      WatchKey key=path.register(watchService,StandardWatchEventKinds.ENTRY_CREATE,StandardWatchEventKinds.ENTRY_DELETE,StandardWatchEventKinds.ENTRY_MODIFY);\n      watcherMap.put(key,parent);\n    }\n catch (    IOException e) {\n    }\n  }\n}\n", "nl": "Instantiates a new file system watcher.", "id": "40380"}
{"code": "public synchronized void writeUnlock(){\n  activeWriter=false;\n  notifyAll();\n}\n", "nl": "Release a (regular or priority) write lock.", "id": "54332"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysNoResist_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200940,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] is in the no elemental defense state because [%SkillCaster] used [%SkillName].", "id": "15319"}
{"code": "public void clearDiscCache(){\n  checkConfiguration();\n  configuration.discCache.clear();\n}\n", "nl": "Clears disc cache.", "id": "24137"}
{"code": "public static void w(String tag,String msg,Object... args){\n  if (sLevel > LEVEL_WARNING) {\n    return;\n  }\n  if (args.length > 0) {\n    msg=String.format(msg,args);\n  }\n  Log.w(tag,msg);\n}\n", "nl": "Send a WARNING log message", "id": "44201"}
{"code": "public BoolValueProperty hiddenFromStructureDialog(){\n  return myHiddenFromStructureDialog;\n}\n", "nl": "TODO: This is a temporary measure as we update the Project Structure dialog and consider better integrating the PSD and the Assistant toolbar. Either we need to reconcile the two features (e.g. PSD delegates responsibility to the Assistant toolbar), or if we find out there are valid cases for a service to appear in one and not the other, at least we should architect the code more cleanly than by branching on a boolean property like this.", "id": "41814"}
{"code": "public PointsToSet reachingObjects(Context c,Local l,SootField f){\n  return reachingObjects(reachingObjects(c,l),f);\n}\n", "nl": "Returns the set of objects pointed to by instance field f of the objects pointed to by l in context c.", "id": "53470"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_PVP_PT(int num0){\n  return new SM_SYSTEM_MESSAGE(1300584,num0);\n}\n", "nl": "You can only receive this quest when your PVP point is %num0 or more.", "id": "17875"}
{"code": "public boolean hasFinally(){\n  return getFinallyOpt().getNumChild() != 0;\n}\n", "nl": "Check whether the optional Finally child exists.", "id": "26599"}
{"code": "public boolean isDashedLineEnabled(){\n  return mDashPathEffect == null ? false : true;\n}\n", "nl": "Returns true if the dashed-line effect is enabled, false if not. Default: disabled", "id": "41900"}
{"code": "public static void showNodeInTree(URL url,boolean allowFiles){\n  getTreePath(url,allowFiles,true);\n}\n", "nl": "Show node in tree.", "id": "28661"}
{"code": "public Single<Void> writeTaskInDatabase(final Task _task){\n  final String key=this.getChildReference().push().getKey();\n  _task.setId(key);\n  return observeSingleValue(getChildReference().child(key).setValue(_task));\n}\n", "nl": "Allows to create/write a task in the database", "id": "55917"}
{"code": "public boolean isChecked(){\n  return mChecked;\n}\n", "nl": "Returns the checked state.", "id": "25088"}
{"code": "public static boolean isEmpty(String string){\n  if (null == string)   return true;\n  return string.equals(EMPTY);\n}\n", "nl": "Check if the given string is empty or null", "id": "52030"}
{"code": "protected void addCommonComponent(XMLComponent component){\n  if (fCommonComponents.contains(component)) {\n    return;\n  }\n  fCommonComponents.add(component);\n  addRecognizedParamsAndSetDefaults(component);\n}\n", "nl": "Adds common component to the parser configuration. This method will also add all of the component's recognized features and properties to the list of default recognized features and properties.", "id": "6831"}
{"code": "protected String millisecondsToYearMonthDay(long millis){\n  return getSimpleDateFormatForMilliseconds(\"yyyy-MM-dd\",millis);\n}\n", "nl": "Milliseconds since Epoch time to YYYY-MM-DD.", "id": "31735"}
{"code": "public StatelessHibernateSpaceDataSourceConfigurer augmentInitialLoadEntries(boolean augmentInitialLoadEntries){\n  this.augmentInitialLoadEntries=augmentInitialLoadEntries;\n  return this;\n}\n", "nl": "Feature switch for initial load entries augmentation (creation of partition-specific query for entries)", "id": "9142"}
{"code": "private boolean firstParamIsSelf(TypeElement classElement,SkylarkModule skyModule,DeclaredType objectType){\n  return !skyModule.namespace() && objectType.toString().equals(classElement.toString());\n}\n", "nl": "Detect if the first parameter is 'self' object.", "id": "440"}
{"code": "public static boolean checkComplexDerivationOk(XSComplexTypeDecl derived,XSTypeDefinition base,short block){\n  if (derived == SchemaGrammar.fAnyType)   return derived == base;\n  return checkComplexDerivation(derived,base,block);\n}\n", "nl": "check whether complex type derived is valid derived from base, given a subset of {restriction, extension}.", "id": "14732"}
{"code": "private void notify_2(){\n  bleManager.notifyDevice(UUID_SERVICE,UUID_NOTIFY_2,notifyCallback_2);\n}\n", "nl": "listen notify2", "id": "12440"}
{"code": "@Override public int read(){\n  return -1;\n}\n", "nl": "Returns -1 to indicate that the stream is closed.", "id": "7480"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_COMPLETE_QUEST(String value0){\n  return new SM_SYSTEM_MESSAGE(1300616,value0);\n}\n", "nl": "Quest complete: %0", "id": "54763"}
{"code": "String normalize(String s){\n  return null;\n}\n", "nl": "Normalizes tokens of a string s. This function converts all  dates to \"DATE\", numbers to \"NUMBER\", etc.", "id": "21322"}
{"code": "public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding) throws IOException {\n  writeLines(file,encoding,lines,lineEnding,false);\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to the specified <code>File</code> line by line. The specified character encoding and the line ending will be used. <p/> NOTE: As from v1.3, the parent directories of the file will be created if they do not exist.", "id": "16619"}
{"code": "public static void addFailure(SoftAssertionError softAssertionError){\n  getFailures().add(softAssertionError);\n}\n", "nl": "Notifies the aspect that a failure occurred.", "id": "32800"}
{"code": "public void collapse(TreePath[] paths){\n  for (  TreePath path : paths) {\n    this.collapse((DefaultMutableTreeNode)path.getLastPathComponent());\n  }\n}\n", "nl": "collapse an array of paths", "id": "22596"}
{"code": "public static boolean isXML11NameStart(int c){\n  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME_START) != 0) || (0x10000 <= c && c < 0xF0000);\n}\n", "nl": "Returns true if the specified character is a valid name start character as defined by production [4] in the XML 1.1 specification.", "id": "58107"}
{"code": "public static boolean isControl(long flags){\n  return ((flags & LOGRECORD_FLAGS_CONTROL_MESSAGE) != 0);\n}\n", "nl": "Check flags to see if it indicates a control record.", "id": "5757"}
{"code": "public void populate(ColorMap value){\n  ValueComboBoxData selectedValue=typeComboBox.getSelectedValue();\n  if (selectedValue != null) {\n    ColourRampPanelInterface selectedPanel=this.colourRampMapCache.get(selectedValue.getKey());\n    if (selectedPanel != null) {\n      selectedPanel.populate(value);\n    }\n  }\n}\n", "nl": "Populate the configuration fields.", "id": "3747"}
{"code": "public Builder renameColumns(List<String> oldNames,List<String> newNames){\n  return transform(new RenameColumnsTransform(oldNames,newNames));\n}\n", "nl": "Rename multiple columns", "id": "51269"}
{"code": "public boolean isSuppressedDiag(Diag diag,Element elem){\n  return diagSuppressor.isSuppressedWarning(diag,elem);\n}\n", "nl": "Checks whether the given diagnosis is suppressed for the given element. This checks the suppression pattern for this element and all elements, inserting the model for global suppressions as a virtual parent.", "id": "31117"}
{"code": "public int length(){\n  return nameValuePairs.size();\n}\n", "nl": "Returns the number of name/value mappings in this object.", "id": "37163"}
{"code": "public Builder reduceSequenceByWindow(IReducer reducer,WindowFunction windowFunction){\n  actionList.add(new DataAction(new ReduceSequenceByWindowTransform(reducer,windowFunction)));\n  return this;\n}\n", "nl": "Reduce (i.e., aggregate/combine) a set of sequence examples - for each sequence individually - using a window function. For example, take all records/examples in each 24-hour period (i.e., using window function), and convert them into a singe value (using the reducer). In this example, the output is a sequence, with time period of 24 hours.", "id": "40782"}
{"code": "protected boolean isEnabledForUnmanagedResources(){\n  return false;\n}\n", "nl": "Method isEnabledForUnmanagedResources.", "id": "49448"}
{"code": "@Override public void accept(IQueryExecutor executor,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {\n  executor.execute(this,space,txn,readModifier,max);\n}\n", "nl": "Accept the query executor", "id": "47157"}
{"code": "public boolean containsKey(Object key){\n  int hash=hash(key.hashCode());\n  return segmentFor(hash).containsKey(key,hash);\n}\n", "nl": "Tests if the specified object is a key in this table.", "id": "30429"}
{"code": "@NotNull public static ResizePolicy scaled(){\n  return ourScaled;\n}\n", "nl": "Returns a resize policy allowing scaled / aspect-ratio preserving resizing only", "id": "22530"}
{"code": "@Override public void createRaster(Symbolizer symbolizer){\n}\n", "nl": "Creates the raster.", "id": "28620"}
{"code": "@Override public boolean endContentModel(int[] currentState){\n  boolean isFinal=false;\n  int state=currentState[0];\n  return state >= 0;\n}\n", "nl": "The method indicates the end of list of children", "id": "19195"}
{"code": "final boolean indexesDeletedNode(){\n  return node.value == null;\n}\n", "nl": "Returns true if the node this indexes has been deleted.", "id": "45034"}
{"code": "public TemplateDruidQuery withInnerQuery(TemplateDruidQuery newNestedQuery){\n  return new TemplateDruidQuery(aggregations,postAggregations,newNestedQuery,timeGrain);\n}\n", "nl": "Makes a copy of the template query, changing nested query. <p> Everything is a shallow copy.", "id": "29758"}
{"code": "public boolean isDurableWriteEnabled(){\n  return getBoolean(BKDL_IS_DURABLE_WRITE_ENABLED,defaultConfig.getBoolean(BKDL_IS_DURABLE_WRITE_ENABLED,BKDL_IS_DURABLE_WRITE_ENABLED_DEFAULT));\n}\n", "nl": "Check whether the durable write is enabled.", "id": "37505"}
{"code": "public void showMetrics(){\n  timer.show(\"JavaStreamingAudioPlayer\");\n}\n", "nl": "Shows metrics for this audio player", "id": "27718"}
{"code": "private void initBroadcastReciever(){\n  IntentFilter intentFilter=new IntentFilter();\n  intentFilter.addAction(ACTION_STOP_SELF);\n  registerReceiver(mBroadcastReciever,intentFilter);\n}\n", "nl": "This sets up the broadcast reciever.", "id": "8843"}
{"code": "public static float convertDpToPixel(float dp,Context context){\n  Resources resources=context.getResources();\n  DisplayMetrics metrics=resources.getDisplayMetrics();\n  float px=dp * (metrics.densityDpi / 160f);\n  return px;\n}\n", "nl": "This method converts dp unit to equivalent pixels, depending on device density.", "id": "34640"}
{"code": "private static String toPrometheusString_(List<String> s){\n  return String.join(\"_\",s.stream().map(null).collect(Collectors.toList()));\n}\n", "nl": "This gets passed a list and concatenate them together making sure that there is no forbidden characters and remove the if necessary.", "id": "3287"}
{"code": "@Nullable protected Path findConfigRootHeuristic(Path configPath){\n  Path parent=configPath.getParent();\n  while (parent != null) {\n    if (Files.isDirectory(parent.resolve(\".git\"))) {\n      return parent;\n    }\n    parent=parent.getParent();\n  }\n  return null;\n}\n", "nl": "Find the root path for resolving configuration file paths and resources. This method assumes that the .git containing directory is the root path. <p>This could be extended to other kind of source control systems.", "id": "39087"}
{"code": "@Override public double[] makeInverseCumulativeTestPoints(){\n  return new double[]{0,0.001d,0.01d,0.025d,0.05d,0.1d,0.999d,0.990d,0.975d,0.950d,0.900d,1};\n}\n", "nl": "Creates the default inverse cumulative probability test input values", "id": "26837"}
{"code": "public static void enableJM(boolean enable){\n  ServiceDispatcher.enableJM=enable;\n}\n", "nl": "Enables/Disables the Job Manager/Scheduler globally (this will not effect any dispatchers already running)", "id": "56629"}
{"code": "@Override public Message toMessage(Object object,Session session) throws JMSException, MessageConversionException {\n  String xmlString=this.xmlConverter.toXml(object);\n  return session.createTextMessage(xmlString);\n}\n", "nl": "Convert a Java object to a JMS Message using the supplied session to create the message object.", "id": "22096"}
{"code": "private <T,S extends ParseTree>T parseQueryFragment(Function<GraqlParser,S> parseRule,BiFunction<QueryVisitor,S,T> visit,TokenStream tokens){\n  GraqlErrorListener errorListener=new GraqlErrorListener(tokens.getText());\n  return parseQueryFragment(parseRule,visit,errorListener,tokens);\n}\n", "nl": "Parse any part of a Graql query", "id": "46529"}
{"code": "public static void debug(@Nullable Class<?> caller,String message,Object... args){\n  android.util.Log.d(tag(caller),String.format(Locale.ENGLISH,message,args));\n}\n", "nl": "Logs with debug level", "id": "8932"}
{"code": "private static int clampY(int y,ConstraintWidget base){\n  if (y < base.getY()) {\n    y=base.getY();\n  }\n else   if (y > base.getBottom()) {\n    y=base.getBottom();\n  }\n  return y;\n}\n", "nl": "Clamp to the bounds of the base panel", "id": "4971"}
{"code": "public boolean isDistinct(){\n  return distinct;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.teams", "id": "2445"}
{"code": "public static void writeByteArrayToFile(File file,byte[] data) throws IOException {\n  writeByteArrayToFile(file,data,false);\n}\n", "nl": "Writes a byte array to a file creating the file if it does not exist. <p> NOTE: As from v1.3, the parent directories of the file will be created if they do not exist.", "id": "28816"}
{"code": "public void removeAttribute(String attribute){\n  if (table.columnKeySet().contains(attribute)) {\n    attributeOrder.remove(attribute);\n    attribute2type.keySet().remove(attribute);\n    table.removeColumn(attribute);\n  }\n}\n", "nl": "remove an attribute", "id": "51723"}
{"code": "private void saveAllHTMLToFolder(File destinationFolder){\n  if (!destinationFolder.exists()) {\n    destinationFolder.mkdirs();\n  }\n  String filename=INDEX_HTML;\n  Color backgroundColour=PrefManager.getInstance().getPrefData().getBackgroundColour();\n  ExportHTML.save(destinationFolder,filename,sldDataList,backgroundColour);\n}\n", "nl": "Save all html to folder.", "id": "2203"}
{"code": "@Override public void write(byte[] value) throws IOException {\n  if (isFirstTime) {\n    init();\n    isFirstTime=false;\n  }\n  checkAndWriteDictionaryChunkToFile();\n  oneDictionaryChunkList.add(ByteBuffer.wrap(value));\n  totalRecordCount++;\n}\n", "nl": "This method will write the data in thrift format to disk. This method will be guided by parameter dictionary_one_chunk_size and data will be divided into chunks based on this parameter", "id": "1228"}
{"code": "public void appendTier(PraatTier tier){\n  this.tiers.add(tier);\n}\n", "nl": "add a new tier at the end of the TextGrid's tiers", "id": "2412"}
{"code": "public void uploadFile(TRSHttpRequest request,TRSFileUploadHttpCallback callback){\n  mProvider.uploadFile(request,callback);\n}\n", "nl": "Post File to Server", "id": "9371"}
{"code": "public boolean isReifiable(){\n  ASTNode$State state=state();\n  try {\n    if (isRawType())     return true;\n    for (int i=0; i < getNumArgument(); ++i) {\n      if (!getArgument(i).type().isWildcard())       return false;\n    }\n    return true;\n  }\n  finally {\n  }\n}\n", "nl": "A type is reifiable if it either refers to a non-parameterized type, is a raw type, is a parameterized type with only unbound wildcard parameters or is an array type with a reifiable type parameter.", "id": "53202"}
{"code": "public GroupsSetCallbackSettingsQuery audioNew(Boolean value){\n  return unsafeParam(\"audio_new\",value);\n}\n", "nl": "New audios notifications.", "id": "38680"}
{"code": "public double overflow(){\n  return m_overflow;\n}\n", "nl": "Get the height of the overflow bin. Any value passed to the fill method which falls above the range of the histogram will be counted in the overflow bin.", "id": "24458"}
{"code": "@Override public Tab createFrozenTab(TabState state,int id,int index){\n  return Tab.createFrozenTabFromState(id,null,state.isIncognito(),null,Tab.INVALID_TAB_ID,state);\n}\n", "nl": "Creates a frozen Tab.  This Tab is not meant to be used or unfrozen -- it is only used as a placeholder until the real Tab can be created. The index is ignored in DocumentMode because Android handles the ordering of Tabs.", "id": "44549"}
{"code": "public void showOverlapGraph(Director dir,ProgressListener progress) throws CanceledException {\n  final OverlapGraphViewer overlapGraphViewer=new OverlapGraphViewer(dir,overlapGraph,node2readName,paths);\n  overlapGraphViewer.apply(progress);\n}\n", "nl": "show the overlap graph", "id": "42390"}
{"code": "public static float min(float a,float b){\n  return (a <= b) ? a : b;\n}\n", "nl": "Returns the smaller of two <code>float</code> values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. Does none of the special checks for NaN or -0.0f that <code>Math.max</code> does.", "id": "33055"}
{"code": "protected BoardRestoreCommentQuery commentId(int value){\n  return unsafeParam(\"comment_id\",value);\n}\n", "nl": "Comment ID.", "id": "45790"}
{"code": "public GroupsEditQuery links(Boolean value){\n  return unsafeParam(\"links\",value);\n}\n", "nl": "Links settings (for public pages only). <p> Possible values: false - disabled; true - enabled", "id": "5828"}
{"code": "public boolean canZoomOutMoreX(){\n  return (mScaleX > mMinScaleX);\n}\n", "nl": "Returns true if the chart is not yet fully zoomed out on the x-axis", "id": "33735"}
{"code": "public boolean toggleNeverTranslateLanguageState(boolean value){\n  if (mOptions[ALWAYS_LANGUAGE] && value) {\n    return false;\n  }\n  return toggleState(NEVER_LANGUAGE,value);\n}\n", "nl": "Sets the new state of never translate language.", "id": "28237"}
{"code": "@Override public String toString(){\n  if (val.getType().isNumeric())   return val.toString();\n else   return \"'\" + val.toString() + \"'\";\n}\n", "nl": "Return constant value as a string. If the constant type is varchar, the output string will be surrounded by single quotation marks.", "id": "13194"}
{"code": "private void syntaxError(String message){\n  hasSynErrors=true;\n  int at=matched ? matcher.start(EXPR_TOKEN_GROUP) : expr.length();\n  error(\"%s%n  %s%n  %s\",message.trim(),expr,Strings.padStart(\"^\",at + 1,' '));\n}\n", "nl": "Report an error.", "id": "18534"}
{"code": "public void clearAllQueryCaches(){\n  this.configManager.clearAllQueryCaches();\n}\n", "nl": "Clears all query caches. Note: During a transaction, Mithra allocates a special query cache, which will NOT be cleared by this method.", "id": "33762"}
{"code": "public void remove(final int position){\n  data.remove(position);\n  notifyItemRemoved(position);\n}\n", "nl": "Remove an item at adapter position.", "id": "4959"}
{"code": "@NotNull static String formatMessage(@NotNull String format,@NotNull String msg){\n  if (format.isEmpty()) {\n    return msg;\n  }\n  LogCatMessage message=parseMessage(msg);\n  return formatMessage(format,message.getHeader(),message.getMessage());\n}\n", "nl": "Helper method useful for previewing what final output will look like given a custom formatter.", "id": "33443"}
{"code": "public NumericHaving withValue(Number value){\n  return new NumericHaving(getType(),getAggregation(),value);\n}\n", "nl": "Get a new instance of this having with the given value.", "id": "16823"}
{"code": "public AudioAddQuery albumId(Integer value){\n  return unsafeParam(\"album_id\",value);\n}\n", "nl": "Set album id", "id": "16733"}
{"code": "public static boolean hasBuiltinBinding(NewBindingKey key){\n  return hasBuiltinBinding(key.getTypeName());\n}\n", "nl": "Returns if the key has built-in binding.", "id": "8468"}
{"code": "@Override public void unparsedEntityDecl(String name,XMLResourceIdentifier identifier,String notation,Augmentations augmentations) throws XNIException {\n}\n", "nl": "An unparsed entity declaration.", "id": "2247"}
{"code": "public static int copy(Reader input,Writer output) throws IOException {\n  long count=copyLarge(input,output);\n  if (count > Integer.MAX_VALUE) {\n    return -1;\n  }\n  return (int)count;\n}\n", "nl": "Copy chars from a <code>Reader</code> to a <code>Writer</code>. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedReader</code>. <p/> Large streams (over 2GB) will return a chars copied value of <code>-1</code> after the copy has completed since the correct number of chars cannot be returned as an int. For large streams use the <code>copyLarge(Reader, Writer)</code> method.", "id": "48901"}
{"code": "@Override public void printStackTrace(PrintWriter pw){\n  super.printStackTrace(pw);\n  if (nested != null) {\n    nested.printStackTrace(pw);\n  }\n}\n", "nl": "Prints the composite message and the embedded stack trace to the specified print writer pw.", "id": "48744"}
{"code": "public String name(){\n  return theName;\n}\n", "nl": "Returns the name of this element type.", "id": "45965"}
{"code": "public void init$Children(){\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "51900"}
{"code": "@Deprecated public Builder cacheOnDisc(){\n  return cacheOnDisk(true);\n}\n", "nl": "Loaded image will be cached on disk", "id": "54638"}
{"code": "public static GenericEntity createGenericEntity(GenericEntity value){\n  if (value == null) {\n    throw new IllegalArgumentException(\"Cannot create a GenericEntity with a null value parameter\");\n  }\n  GenericEntity newEntity=new GenericEntity();\n  newEntity.init(value);\n  return newEntity;\n}\n", "nl": "Copy Factory Method: Creates new GenericEntity from existing GenericEntity", "id": "29882"}
{"code": "protected MarketGetCommentsQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Identifier of an item owner community Note that community id in the 'owner_id' parameter should be negative number. For example 'owner_id'=-1 matches the [vk.com/apiclub|VK API] community", "id": "14170"}
{"code": "public void init$Children(){\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "45669"}
{"code": "@Override public void parse(String systemId) throws IOException, SAXException {\n  setupParse(systemId);\n  try {\n    parser.parse(systemId);\n  }\n catch (  InternalError ie) {\n    explain(systemId);\n    throw ie;\n  }\n}\n", "nl": "SAX Parser API.", "id": "5417"}
{"code": "private boolean isDirect(Proxy proxy){\n  return Proxy.NO_PROXY.equals(proxy);\n}\n", "nl": "Checks if the given proxy is representing a direct connection.", "id": "28451"}
{"code": "@Override public Fraction reciprocal(){\n  return new Fraction(denominator,numerator);\n}\n", "nl": "Return the multiplicative inverse of this fraction.", "id": "48"}
{"code": "public static boolean isFile(String fileName){\n  File f=new File(fileName);\n  return f.isFile();\n}\n", "nl": "Check if the specified <code>fileName</code> exists and is a file (not a directory) If the specified file doesn't exist or is a directory <code>FALSE</code> returns.", "id": "9586"}
{"code": "public static RestMethod create(Method method,RestKind kind,String collectionName,String customMethodName){\n  return new RestMethod(method,kind,collectionName,customMethodName);\n}\n", "nl": "Create a new REST method.", "id": "2529"}
{"code": "public static MLReader<CMMModel> read(){\n  return new CMMModelReader();\n}\n", "nl": "This functions is used in the reflection framework of Spark ML.", "id": "42227"}
{"code": "public static float parseFloat(char[] chars,int start,int length) throws NumberFormatException {\n  return (float)parseDouble(chars,start,length);\n}\n", "nl": "Parses the specified char[] slice as a <code>float</code>.", "id": "42521"}
{"code": "@Override public void log(final DataTagCacheObject dataTagCacheObject){\n  tagCache.acquireReadLockOnKey(dataTagCacheObject.getId());\n  try {\n    TAGLOG.info(dataTagCacheObject.toString());\n  }\n  finally {\n    tagCache.releaseReadLockOnKey(dataTagCacheObject.getId());\n  }\n}\n", "nl": "Log the cache object to the log file.", "id": "17111"}
{"code": "@Override public boolean isComplexItem(){\n  return (this.fieldName != null);\n}\n", "nl": "Returns true if the DIP publication is a structure. In this case, the DIPHardwareAddress object refers to a given field within the structure.", "id": "11533"}
{"code": "@Deprecated public static void track(File file,Object marker,FileDeleteStrategy deleteStrategy){\n  theInstance.track(file,marker,deleteStrategy);\n}\n", "nl": "Track the specified file, using the provided marker, deleting the file when the marker instance is garbage collected. The speified deletion strategy is used.", "id": "12129"}
{"code": "@PostConstruct public void init(){\n  LOGGER.info(\"Initializing Alarm cache...\");\n  commonInit();\n  LOGGER.info(\"... Alarm cache initialization complete.\");\n}\n", "nl": "Runs on start up.", "id": "47081"}
{"code": "public static int calcTextHeight(Paint paint,String demoText){\n  Rect r=new Rect();\n  paint.getTextBounds(demoText,0,demoText.length(),r);\n  return r.height();\n}\n", "nl": "calculates the approximate height of a text, depending on a demo text avoid repeated calls (e.g. inside drawing methods)", "id": "58039"}
{"code": "public boolean isDirty(){\n  return isTextDirty() || isPropDirty();\n}\n", "nl": "resource is considered dirty if properties are dirty or text is dirty", "id": "276"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_WIN_CASTLE(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1400298,value0,value1);\n}\n", "nl": "%0 succeeded in conquering %1.", "id": "26127"}
{"code": "boolean relative(){\n  return rel;\n}\n", "nl": "Returns true if any of the constraints are relative, false otherwise.", "id": "58111"}
{"code": "public static void increaseTime(Clock clock){\n  Calendar c=Calendar.getInstance();\n  c.setTime(clock.getCurrentTime());\n  c.add(Calendar.SECOND,1);\n  clock.setCurrentTime(c.getTime());\n}\n", "nl": "increase clockUtils time Simulation operates in milliseconds. Sometime could happen (especially during automated tests) that 2 recorded events have the same time. In that case it is not possible to recognize order.", "id": "39111"}
{"code": "protected boolean isValidFragment(String fragment){\n  if (fragment == null) {\n    return true;\n  }\n  return isOff(NO_FRAGMENTS);\n}\n", "nl": "Returns true if the given fragment is null or fragments are allowed.", "id": "12814"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_GET_ITEM_PARTYNOTICE_DICE(String value0,String value3,String value1,String value2){\n  return new SM_SYSTEM_MESSAGE(1390266,value0,value3,value1,value2);\n}\n", "nl": "%0 rolled the highest (%0 rolled %1, while you rolled %2).", "id": "9529"}
{"code": "public static List<String> transformToDBStyle(CriteriaMap<?> criteriaMap,List<String> chartFields){\n  if (chartFields == null)   return new ArrayList<>();\n  return chartFields.stream().map(null).collect(toList());\n}\n", "nl": "Transform chart data fields names to database known names using criteria holder.", "id": "45162"}
{"code": "public JsonElement remove(int index){\n  return elements.remove(index);\n}\n", "nl": "Removes the element at the specified position in this array. Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the array.", "id": "21901"}
{"code": "public boolean isPredefined(){\n  return predefined;\n}\n", "nl": "Returns the is predefined flag.", "id": "32775"}
{"code": "public static SM_SYSTEM_MESSAGE STR_INGAME_BLOCK_IN_NO_SHOP(String value0){\n  return new SM_SYSTEM_MESSAGE(1300815,value0);\n}\n", "nl": "You are currently unable to open a private store. There are %0 minute(s) left on your ban.", "id": "17516"}
{"code": "public static void mainMe(String args1,String arg2,String arg3) throws IOException {\n  IncrementalVisitor.main(new String[]{args1,arg2,arg3},VISITOR_BUILDER);\n}\n", "nl": "Command line invocation entry point. Expects 2 parameters, first is the source directory with .class files as produced by the Java compiler, second is the output directory where to store the bytecode enhanced version.", "id": "42045"}
{"code": "public void onDrawerOpened(View drawerView){\n  super.onDrawerOpened(drawerView);\n  try {\n    if (pokemonGo != null && pokemonGo.getPlayerProfile() != null) {\n      renderProfile(pokemonGo.getPlayerProfile());\n    }\n  }\n catch (  Exception e) {\n  }\n  getSupportActionBar().setTitle(R.string.profile);\n}\n", "nl": "Called when a drawer has settled in a completely open state.", "id": "11494"}
{"code": "private void addNewModelForAssociatedModel(Collection<DataSupport> associatedModelCollection,DataSupport baseObj){\n  if (!associatedModelCollection.contains(baseObj)) {\n    associatedModelCollection.add(baseObj);\n  }\n}\n", "nl": "Force to build bidirectional associations for the associated model. If it has already built, ignoring the rest process.", "id": "2532"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_PROTECT_A_to_B(String skilltarget,String skillcaster){\n  return new SM_SYSTEM_MESSAGE(1201175,skilltarget,skillcaster);\n}\n", "nl": "[%SkillTarget] blocked [%SkillCaster]'s attack with the protective shield effect.", "id": "33308"}
{"code": "protected AudioSaveQuery server(int value){\n  return unsafeParam(\"server\",value);\n}\n", "nl": "This parameter is returned when the audio file is uploaded to the server.", "id": "55407"}
{"code": "private void error(String message,Object... args){\n  if (input == null) {\n    errors.add(Issue.create(Location.TOP_LEVEL,message,args));\n  }\n else {\n    errors.add(Issue.create(input.location(),message,args));\n  }\n}\n", "nl": "Emit error.", "id": "58745"}
{"code": "@Override protected FlowSet<N> newInitialFlow(){\n  return (FlowSet<N>)fullSet.clone();\n}\n", "nl": "All OUTs are initialized to the full set of definitions OUT(Start) is tweaked in customizeInitialFlowGraph.", "id": "5121"}
{"code": "public LeastSquaresBuilder lazyEvaluation(final boolean newValue){\n  lazyEvaluation=newValue;\n  return this;\n}\n", "nl": "Configure whether evaluation will be lazy or not.", "id": "21650"}
{"code": "public void closeDriver(){\n  if (camera != null) {\n    FlashlightManager.disableFlashlight();\n    camera.release();\n    camera=null;\n  }\n}\n", "nl": "Closes the camera driver if still in use.", "id": "14911"}
{"code": "public Listener capture(){\n  capture(null);\n  return getListener();\n}\n", "nl": "Capture the current screen.", "id": "23949"}
{"code": "public Builder addColumn(ColumnMetaData metaData){\n  columnMetaData.add(metaData);\n  return this;\n}\n", "nl": "Add a column", "id": "42677"}
{"code": "public static final String toString(String str){\n  if (str == null)   return \"null\";\n  ByteArrayOutputStream buffer=new ByteArrayOutputStream();\n  toByteArray(buffer,str);\n  return buffer.toString();\n}\n", "nl": "Provides a Java string literal representing the parameter string. This includes surrounding double quotes, and quoted special characters, including UTF escape sequences when necessary. <p> This function works only for ASCII character encoding, and assumes this is the default encoding.", "id": "57666"}
{"code": "public void beforeStop(){\n}\n", "nl": "Call back before ICEREST stop", "id": "8085"}
{"code": "public int toContentSettingsType(){\n  return mContentSettingsType;\n}\n", "nl": "Returns the content settings type for this category, or -1 if no such type exists.", "id": "8442"}
{"code": "protected void assertNoCurrentVariantSet(String errorMessage,List<Long> localeIds,Long tmTextUnitId){\n  for (  Long localeId : localeIds) {\n    TMTextUnitCurrentVariant currentVariant=tmTextUnitCurrentVariantRepository.findByLocale_IdAndTmTextUnit_Id(localeId,tmTextUnitId);\n    assertNull(errorMessage,currentVariant);\n  }\n}\n", "nl": "Asserts that there is a current variant associated to the given tmTextUnit and locales", "id": "57162"}
{"code": "public boolean isEnabled(){\n  return false;\n}\n", "nl": "Flag to test if this Authenticator is enabled", "id": "42075"}
{"code": "public static BigDecimal availableToCapture(GenericValue billingAccount) throws GenericEntityException {\n  BigDecimal netBalance=getBillingAccountNetBalance(billingAccount.getDelegator(),billingAccount.getString(\"billingAccountId\"));\n  BigDecimal accountLimit=billingAccount.getBigDecimal(\"accountLimit\");\n  return accountLimit.subtract(netBalance).setScale(decimals,rounding);\n}\n", "nl": "Returns the amount of the billing account which could be captured, which is BillingAccount.accountLimit - net balance", "id": "14003"}
{"code": "public void removeWord(String sWord){\n  removeWord(sWord,RemoveSubStrings);\n}\n", "nl": "Removes word sWord without removing substrings.", "id": "48682"}
{"code": "private boolean isRequestingSensorEventData(String nodeId){\n  SensorDataRequest request=sensorDataRequests.get(nodeId);\n  if (request == null) {\n    return false;\n  }\n  return request.getEndTimestamp() == DataRequest.TIMESTAMP_NOT_SET;\n}\n", "nl": "Returns true if the app is requesting sensor data from the device with the specified node id", "id": "58583"}
{"code": "@Override public void onFailure(IMqttToken asyncActionToken,Throwable exception){\n  exception.printStackTrace();\n  Log.e(\"TrafficService\",\"Error connecting: \" + exception.getMessage());\n  onDisconnect(false);\n}\n", "nl": "Called when there was an error connecting", "id": "21914"}
{"code": "public int hours(){\n  return this.hours;\n}\n", "nl": "Returns the hours in this time duration.", "id": "27604"}
{"code": "public void __setDaoSession(DaoSession daoSession){\n  this.daoSession=daoSession;\n  myDao=daoSession != null ? daoSession.getUserInfoDao() : null;\n}\n", "nl": "called by internal mechanisms, do not call yourself.", "id": "11953"}
{"code": "public static GlobalPreferences sharedInstance(){\n  return INSTANCE;\n}\n", "nl": "Returns singleton instance of GlobalPreferences.", "id": "45134"}
{"code": "public boolean filterOut(final SAMRecord record){\n  if (include) {\n    if (record.getMateNegativeStrandFlag()) {\n      return false;\n    }\n  }\n else {\n    if (!record.getMateNegativeStrandFlag()) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Determines whether a SAMRecord matches this filter", "id": "54827"}
{"code": "public void checkDayTimeChange(){\n  DayTime oldDayTime=this.dayTime;\n  calculateDayTime();\n  onHourChange();\n  if (oldDayTime != this.dayTime) {\n    onDayTimeChange();\n  }\n}\n", "nl": "Calculate new day time and send events on change", "id": "2189"}
{"code": "public void writeShort(short value) throws JMSException {\n  initializeWriting();\n  try {\n    this.dataOut.writeShort(value);\n  }\n catch (  IOException ioe) {\n    JMSException jmsEx=new JMSException(\"Could not write data:\" + ioe.toString());\n    jmsEx.setLinkedException(ioe);\n    throw jmsEx;\n  }\n}\n", "nl": "Writes a <code>short</code> to the bytes message stream as two bytes, high byte first.", "id": "56727"}
{"code": "public void putObject(String key,Object obj){\n  putObject(key,obj,new Gson());\n}\n", "nl": "Put ObJect any type into SharedPrefrences with 'key' and save", "id": "5483"}
{"code": "public static String formatSpelledOutAmount(double amount,Locale locale){\n  com.ibm.icu.text.NumberFormat nf=new com.ibm.icu.text.RuleBasedNumberFormat(locale,com.ibm.icu.text.RuleBasedNumberFormat.SPELLOUT);\n  return nf.format(amount);\n}\n", "nl": "Formats a double into a properly spelled out number string based on Locale", "id": "49688"}
{"code": "public boolean hideRequested(){\n  return hideRequested;\n}\n", "nl": "Returns the status of the hideRequested flag.", "id": "46005"}
{"code": "public static void removeAllServices() throws RpcException {\n  try {\n    ServicePublisher.removeAllServices();\n  }\n catch (  RegistryException e) {\n    throw new RpcException(\"error while removing all services\",e);\n  }\n}\n", "nl": "remove all pigeon services, including unregister these services from registry", "id": "2450"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUMMON_COOLDOWN(String value0){\n  return new SM_SYSTEM_MESSAGE(1200012,value0);\n}\n", "nl": "You summon %0 Spirit. Cooldown time begins when it is unsummoned, and takes longer when the spirit is killed by an enemy.", "id": "38254"}
{"code": "@Override public void connect(long timeout) throws AWSIotException, AWSIotTimeoutException {\n  super.connect(timeout);\n}\n", "nl": "Connect the client to the server. This is a blocking call, so the calling thread will be blocked until the operation succeeded, failed, or timed out.", "id": "50266"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_ME_TO_B(String skillcaster,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200534,skillcaster,skilltarget,skillname);\n}\n", "nl": "[%SkillCaster] has boosted [%SkillTarget]'s MP by using [%SkillName].", "id": "17049"}
{"code": "public void init$Children(){\n  children=new ASTNode[1];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "14133"}
{"code": "public synchronized final void reschedule(long period){\n  _period=period;\n  wakeUp();\n}\n", "nl": "Reschedules this Runnable execution for a new specified duration immediately. Much like scheduling with a no delay for a renewal period. If the Runnable target is currently awake, it will fall asleep only after its execution. Otherwise, it will wakeup, run, and fall asleep for the new duration.", "id": "32109"}
{"code": "public double pace(double f){\n  return (f == 0.0 || f == 1.0 ? f : sigmoid(f));\n}\n", "nl": "Pacing function providing slow-in, slow-out animation", "id": "47334"}
{"code": "public boolean isNonEscapingElement(String tagName){\n  int i;\n  if (_nonEscapingElements == null) {\n    return false;\n  }\n  for (i=0; i < _nonEscapingElements.length; ++i)   if (_nonEscapingElements[i].equals(tagName))   return true;\n  return false;\n}\n", "nl": "Returns true if the text node children of the given elements should be output unescaped.", "id": "997"}
{"code": "private boolean cancelDiscardScrollingAnimation(){\n  if (mOverviewAnimationType == OverviewAnimationType.DISCARD || mOverviewAnimationType == OverviewAnimationType.UNDISCARD || mOverviewAnimationType == OverviewAnimationType.DISCARD_ALL) {\n    mTabAnimations.cancel(null,StackTab.Property.SCROLL_OFFSET);\n    return true;\n  }\n  return false;\n}\n", "nl": "Cancel scrolling animation which is a part of discarding animation.", "id": "33461"}
{"code": "public void logout(){\n  if (mSessionManager != null)   mSessionManager.clearSession();\n}\n", "nl": "Log out from linked in. Clear the linked in session.", "id": "21386"}
{"code": "public static ExisitingJiniTransactionHolder unbindExistingTransactionIfPossible(){\n  return (ExisitingJiniTransactionHolder)TransactionSynchronizationManager.unbindResourceIfPossible(CONTEXT);\n}\n", "nl": "Unbinds the current on going bounded transaction from the thread context if possible.", "id": "19720"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Hide_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200375,skillname);\n}\n", "nl": "You hid yourself by using [%SkillName].", "id": "5961"}
{"code": "@Override public void close() throws IOException {\n  try {\n    out.close();\n  }\n  finally {\n    lockFile.delete();\n  }\n}\n", "nl": "Closes the file writer and deletes the lockfile (if possible).", "id": "5231"}
{"code": "private boolean initIfNecessary(){\n  if (ourDeviceManager == null) {\n    if (mySdkPath == null) {\n      IJ_LOG.error(\"No installed SDK found!\");\n      return false;\n    }\n    ourDeviceManager=DeviceManager.createInstance(mySdkPath,SDK_LOG);\n  }\n  return true;\n}\n", "nl": "Setup our static instances if required. If the instance already exists, then this is a no-op.", "id": "43773"}
{"code": "public void onBrowserEvent(Widget widget,Event event){\n}\n", "nl": "Process an event on a target cell.", "id": "56577"}
{"code": "public void addImplements(Access node){\n  List<Access> list=(parent == null || state == null) ? getImplementsListNoTransform() : getImplementsList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the Implements list.", "id": "46916"}
{"code": "public AudioMoveToAlbumQuery groupId(Integer value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "ID of the community where the audio files are located. By default, current user ID.", "id": "204"}
{"code": "public JSONArray put(int index,double value) throws JSONException {\n  put(index,new Double(value));\n  return this;\n}\n", "nl": "Put or replace a double value. If the index is greater than the length of the JSONArray, then null elements will be added as necessary to pad it out.", "id": "15901"}
{"code": "private Cursor queryImgDB(Uri contentStore){\n  return this.cordova.getActivity().getContentResolver().query(contentStore,new String[]{MediaStore.Images.Media._ID},null,null,null);\n}\n", "nl": "Creates a cursor that can be used to determine how many images we have.", "id": "58700"}
{"code": "private File findSettingsFile(File settingsFile){\n  Logger.log(getClass(),LogLevel.TRACE,\"Searching Kde settings in {0}\",settingsFile);\n  if (!settingsFile.exists()) {\n    Logger.log(getClass(),LogLevel.DEBUG,\"Settings not found\");\n    return null;\n  }\n  Logger.log(getClass(),LogLevel.TRACE,\"Settings found\");\n  return settingsFile;\n}\n", "nl": "Internal method to test if the settings file is at the given place.", "id": "53863"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_ACCUSE_INFO_3_LEVEL(String value0){\n  return new SM_SYSTEM_MESSAGE(1400073,value0);\n}\n", "nl": "You are currently in Phase 3 Restriction State and will be downgraded to Phase 2 in %0 minutes. You cannot acquire any loot, and you now receive less XP, Kinah and Abyss Points, and the chance of successful gathering and extraction has been significantly decreased. You are banned from joining a Group or Alliance. You will face greater restrictions if reports continue to accumulate.", "id": "3484"}
{"code": "@Override public void nextBytes(byte[] bytes){\n  randomGenerator.nextBytes(bytes);\n}\n", "nl": "Generates random bytes and places them into a user-supplied byte array.  The number of random bytes produced is equal to the length of the byte array.", "id": "27738"}
{"code": "private final void putIdentifier0(String idName,Element element){\n  if (DEBUG_IDS) {\n    System.out.println(\"putIdentifier0(\" + idName + \", \"+ element+ ')');\n  }\n  if (identifiers == null) {\n    identifiers=new java.util.Hashtable();\n  }\n  identifiers.put(idName,element);\n}\n", "nl": "This version of putIdentifier is needed to avoid fluffing all of the paths to ID attributes when a node object is created that contains an ID attribute.", "id": "7139"}
{"code": "@Override public void attributeDecl(String elementName,String attributeName,String type,String[] enumeration,String defaultType,XMLString defaultValue,XMLString nonNormalizedDefaultValue,Augmentations augmentations) throws XNIException {\n}\n", "nl": "An attribute declaration.", "id": "5866"}
{"code": "public boolean popDirname(){\n  mDirectories.remove(mDirectories.getItem(0));\n  return !mDirectories.isEmpty();\n}\n", "nl": "Pops a directory name from the drop down list", "id": "5106"}
{"code": "public static void createAllTables(Database db,boolean ifNotExists){\n  NewsDao.createTable(db,ifNotExists);\n  ThemeListDao.createTable(db,ifNotExists);\n}\n", "nl": "Creates underlying database table using DAOs.", "id": "32614"}
{"code": "public Builder compressionCodec(CompressionCodec.Type codec){\n  this._codec=codec;\n  return this;\n}\n", "nl": "Set compression codec.", "id": "56093"}
{"code": "public void verifyIsHidden(){\n  conditions.verifyPostAjax(invisibilityOfElementLocated(By.cssSelector(CSS)));\n}\n", "nl": "Method can be used to verify if this element is hidden.", "id": "11134"}
{"code": "public VideoSearchQueryWithExtended count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of videos to return.", "id": "14441"}
{"code": "public static GenericPK create(GenericPK value){\n  GenericPK newPK=new GenericPK();\n  newPK.init(value);\n  return newPK;\n}\n", "nl": "Creates new GenericPK from existing GenericPK", "id": "35306"}
{"code": "public boolean only_regular_locals(){\n  return soot.PhaseOptions.getBoolean(options,\"only-regular-locals\");\n}\n", "nl": "Only Regular Locals -- . Only propagate copies through ``regular'' locals, that is,  those declared in the source bytecode.", "id": "34994"}
{"code": "public boolean hasSuperClassAccess(){\n  return getSuperClassAccessOpt().getNumChild() != 0;\n}\n", "nl": "Check whether the optional SuperClassAccess child exists.", "id": "7607"}
{"code": "public FaveAddUserQuery addUser(UserActor actor,int userId){\n  return new FaveAddUserQuery(getClient(),actor,userId);\n}\n", "nl": "Adds a profile to user faves.", "id": "19491"}
{"code": "public GroupsEditQuery marketCity(Integer... value){\n  return unsafeParam(\"market_city\",value);\n}\n", "nl": "Market delivery cities (if only one country is specified)", "id": "53179"}
{"code": "public Race race(Task... tasks){\n  return new Race(this.executor_,tasks);\n}\n", "nl": "Create a Race control flow strategy.", "id": "25370"}
{"code": "private void failOnElapsedTimeout(long now){\n  if (_timestamp > 0 && (now - _timestamp > RESOURCE_TIMEOUT)) {\n    throw new ResourceTimeoutException(\"Resource of type: \" + this.getClass().getName() + \" has exceeded its timeout of \"+ RESOURCE_TIMEOUT+ \" ms\"+ \" by \"+ (now - _timestamp)+ \" ms\",_stackTrace);\n  }\n}\n", "nl": "Checks that this resource hasn't been held longer than the specified timeout limit.", "id": "5577"}
{"code": "boolean onSplitWork(int bytesMoved){\n  if (_splitTargetRemaining <= 0) {\n    _splitTargetRemaining=_splitTargetSize - bytesMoved;\n    return true;\n  }\n else {\n    _splitTargetRemaining-=bytesMoved;\n    return false;\n  }\n}\n", "nl": "Tracks the # of bytes that have been moved.  Returns true if the splitter should create a new destination segment.", "id": "6309"}
{"code": "public void init$Children(){\n  children=new ASTNode[3];\n  setChild(new Opt(),1);\n  setChild(new List(),2);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "46966"}
{"code": "public static char[] toCharArray(InputStream is) throws IOException {\n  return toCharArray(is,Charset.defaultCharset());\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a character array using the default character encoding of the platform. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>.", "id": "380"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_BUY_ITEM(String value0){\n  return new SM_SYSTEM_MESSAGE(1300784,value0);\n}\n", "nl": "You have purchased %0.", "id": "58395"}
{"code": "public JComboBox createComboBox(){\n  return new JComboBox(m_model);\n}\n", "nl": "Create a new drop-down combo box for interacting with the query.", "id": "15782"}
{"code": "public boolean isEmptyViewShown(){\n  return emptyView != null && emptyView.getVisibility() == VISIBLE;\n}\n", "nl": "Checks whether the RecyclerView is showing empty view.", "id": "5496"}
{"code": "public static boolean readBoolean(){\n  String s=readString();\n  if (s.equalsIgnoreCase(\"true\"))   return true;\n  if (s.equalsIgnoreCase(\"false\"))   return false;\n  if (s.equals(\"1\"))   return true;\n  if (s.equals(\"0\"))   return false;\n  throw new InputMismatchException();\n}\n", "nl": "Reads the next token from standard input, parses it as a boolean, and returns the boolean.", "id": "36104"}
{"code": "public int findAll(String regularExpression){\n  return findAndUncollapseNext(regularExpression,false,true);\n}\n", "nl": "Selects all occurrences of text in document, subject to options and constraints of document type", "id": "11386"}
{"code": "public boolean hasUserAuthorityGroups(){\n  return userAuthorityGroups != null && !userAuthorityGroups.isEmpty();\n}\n", "nl": "Indicates whether this user credentials has user authority groups.", "id": "48417"}
{"code": "public void removeAllLimitLines(){\n  mLimitLines.clear();\n}\n", "nl": "Removes all LimitLines from the axis.", "id": "41068"}
{"code": "@CalledByNative public static boolean isAccessibilityEnabled(Context context){\n  AccessibilityManager manager=(AccessibilityManager)context.getSystemService(Context.ACCESSIBILITY_SERVICE);\n  return manager != null && manager.isEnabled() && manager.isTouchExplorationEnabled();\n}\n", "nl": "Checks to see that this device has accessibility and touch exploration enabled.", "id": "2005"}
{"code": "public void addSink(Set<SourceSinkDefinition> sinks){\n  for (  SourceSinkDefinition am : sinks)   this.sinkMethods.put(am.getMethod().getSignature(),am);\n}\n", "nl": "Adds a list of methods as sinks", "id": "8192"}
{"code": "public ImageFixture withThumbnailSize(int size){\n  myThumbnailSize=size;\n  return this;\n}\n", "nl": "Sets the maximum dimension for thumbnails", "id": "24992"}
{"code": "public JSONArray put(Map<String,Object> value){\n  this.put(new JSONObject(value));\n  return this;\n}\n", "nl": "Put a value in the JSONArray, where the value will be a JSONObject which is produced from a Map.", "id": "49347"}
{"code": "public void removeSwipeListener(SwipeListener listener){\n  if (mListeners == null) {\n    return;\n  }\n  mListeners.remove(listener);\n}\n", "nl": "Removes a listener from the set of listeners", "id": "12216"}
{"code": "public BoardGetTopicsQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of topics to return.", "id": "32918"}
{"code": "@Override public boolean isEnemyFrom(Creature creature){\n  if (creature instanceof SiegeNpc && this.getSiegeRace() != ((SiegeNpc)creature).getSiegeRace()) {\n    return true;\n  }\n else {\n    return super.isEnemyFrom(creature);\n  }\n}\n", "nl": "Siege Npcs of different SiegeRaces are always hostile", "id": "8050"}
{"code": "SnippetSet result(){\n  return snippetSet;\n}\n", "nl": "Returns the parsing result as a snippet set.", "id": "49734"}
{"code": "public StaticFieldRef newStaticFieldRef(SootFieldRef f){\n  return new StaticFieldRef(f);\n}\n", "nl": "Constructs a StaticFieldRef(SootFieldRef) grammar chunk.", "id": "40727"}
{"code": "public final int yystate(){\n  return zzLexicalState;\n}\n", "nl": "Returns the current lexical state.", "id": "33104"}
{"code": "private void onPermissionsNotGranted(){\n  Toast.makeText(this,R.string.toast_permissions_not_granted,Toast.LENGTH_SHORT).show();\n  finish();\n}\n", "nl": "Permissions not granted. Quit.", "id": "37511"}
{"code": "public void anonymize(){\n  for (int i=theAtts.getLength() - 1; i >= 0; i--) {\n    if (theAtts.getType(i).equals(\"ID\") || theAtts.getQName(i).equals(\"name\")) {\n      theAtts.removeAttribute(i);\n    }\n  }\n}\n", "nl": "Make this element anonymous. Remove any <tt>id</tt> or <tt>name</tt> attribute present in the element's attributes.", "id": "13538"}
{"code": "public static void attach(@NotNull Module module,@NotNull OSProcessHandler processHandler,@NotNull String processTitle){\n  final ConsoleView console=getConsole(module);\n  console.attachToProcess(processHandler);\n  show(module,console,processTitle);\n}\n", "nl": "Attach the flutter console to the process managed by the given processHandler.", "id": "25985"}
{"code": "public GitRepository withWorkTree(Path newWorkTree){\n  return new GitRepository(this.gitDir,newWorkTree,this.verbose,this.environment);\n}\n", "nl": "Returns an instance equivalent to this one but with a different work tree. This does not initialize or alter the given work tree.", "id": "13498"}
{"code": "private static boolean isPaymentTypeRecurse(GenericValue paymentType,String inputTypeId) throws GenericEntityException {\n  String parentTypeId=paymentType.getString(\"parentTypeId\");\n  if (parentTypeId == null) {\n    return false;\n  }\n  if (parentTypeId.equals(inputTypeId)) {\n    return true;\n  }\n  return isPaymentTypeRecurse(paymentType.getRelatedOne(\"ParentPaymentType\",false),inputTypeId);\n}\n", "nl": "Recurses up payment type tree via parentTypeId to see if input payment type ID is in tree.", "id": "27906"}
{"code": "public Application createJmxApplicationInteractive(String connectionString,String displayName,String username,String password){\n  return createJmxApplicationInteractive(connectionString,displayName,username,password,false,false);\n}\n", "nl": "Creates new Application defined by JMX connection and adds it to the Applications tree. The application won't be restored on another VisualVM sessions. Displays progress during application creation and opens an error dialog if creating the application failed. Throws a JmxApplicationException if the application cannot be created. Note that even though the created application won't be restored for another VisualVM sessions, the host created for this application will be restored.", "id": "34243"}
{"code": "public DatabaseGetUniversitiesQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of universities to return.", "id": "48234"}
{"code": "public static SM_SYSTEM_MESSAGE STR_RESURRECT_DIALOG__30MIN(String value0){\n  return new SM_SYSTEM_MESSAGE(1300746,value0);\n}\n", "nl": "You will be resurrected at the registered bind point if you do not press it in %0 minutes.", "id": "45828"}
{"code": "public void start(Context context,Fragment fragment){\n  start(context,fragment,REQUEST_CROP);\n}\n", "nl": "Send the crop Intent from a Fragment", "id": "2600"}
{"code": "public static Properties convertXML(InputStream is) throws SAXException, ParserConfigurationException, IOException {\n  return convertXML(is,true,null);\n}\n", "nl": "Convert XML file to <code>Properties</code> object.", "id": "42185"}
{"code": "public static Date unmodifiableDate(Date date){\n  if (date instanceof ImmutableDate) {\n    return date;\n  }\n  return new ImmutableDate(date.getTime());\n}\n", "nl": "Returns a copy of <code>date</code> that cannot be modified. Attempts to modify the returned date will result in an <tt>UnsupportedOperationException</tt>.", "id": "51971"}
{"code": "private static void unknownPacket(State state,int id){\n  log.warn(String.format(\"Unknown packet recived from Game Server: 0x%02X state=%s\",id,state.toString()));\n}\n", "nl": "Logs unknown packet.", "id": "28221"}
{"code": "public Bundler putBooleanArray(String key,boolean[] value){\n  bundle.putBooleanArray(key,value);\n  return this;\n}\n", "nl": "Inserts a boolean array value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.", "id": "45037"}
{"code": "public void createOutFile(String filePath) throws IOException {\n  this.outFile=new ExifInterface(filePath);\n}\n", "nl": "The file after it has been compressed", "id": "13668"}
{"code": "public AppsGetQuery fields(List<UserField> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Profile fields to return.", "id": "35057"}
{"code": "public boolean isDragEnabled(){\n  return mDragEnabled;\n}\n", "nl": "Returns true if dragging is enabled for the chart, false if not.", "id": "54754"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bleed_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200461,skilltarget,skillname);\n}\n", "nl": "You caused [%SkillTarget] to bleed by using [%SkillName].", "id": "40217"}
{"code": "private void afterSave(DataSupport baseObj,List<Field> supportedFields,long id){\n  throwIfSaveFailed(id);\n  assignIdValue(baseObj,getIdField(supportedFields),id);\n  if (!ignoreAssociations) {\n    updateAssociatedTableWithFK(baseObj);\n    insertIntermediateJoinTableValue(baseObj,false);\n  }\n}\n", "nl": "After the model is saved, do the extra work that need to do.", "id": "22834"}
{"code": "public boolean isSelectionFindable(){\n  return selected.size() > 0;\n}\n", "nl": "is a selection find possible", "id": "24418"}
{"code": "private boolean removeLeaseInRenew(Entry e){\n  int index=leaseInRenew.indexOf(e);\n  if (index < 0)   return false;\n  leaseInRenew.remove(index);\n  return true;\n}\n", "nl": "Remove from leaseInRenew, return true if removed", "id": "12753"}
{"code": "public boolean contains(String voiceName){\n  return (getVoice(voiceName) != null);\n}\n", "nl": "Check if there is a voice provides with the given name.", "id": "27510"}
{"code": "@Override public Node cloneNode(boolean deep){\n  HTMLTableRowElementImpl clonedNode=(HTMLTableRowElementImpl)super.cloneNode(deep);\n  clonedNode._cells=null;\n  return clonedNode;\n}\n", "nl": "Explicit implementation of cloneNode() to ensure that cache used for getCells() gets cleared.", "id": "56348"}
{"code": "@Override public boolean isFingerprintAuthSupported(){\n  return impl.isFingerprintAuthSupported();\n}\n", "nl": "Returns <code>true</code> when fingerprint authentication is available and supported", "id": "25449"}
{"code": "protected void validateNamespaceOwnership(String property,String cluster,String namespace){\n  validateNamespaceOwnership(property,cluster,namespace,false,false);\n}\n", "nl": "Checks whether the broker is the owner of the namespace. Otherwise it will raise an exception to redirect the client to the appropriate broker. If no broker owns the namespace yet, this function will try to acquire the ownership by default.", "id": "48457"}
{"code": "private static void copyColumn(final RealMatrix m1,int col1,RealMatrix m2,int col2){\n  for (int i=0; i < m1.getRowDimension(); i++) {\n    m2.setEntry(i,col2,m1.getEntry(i,col1));\n  }\n}\n", "nl": "Copies a column from m1 to m2.", "id": "45902"}
{"code": "protected GroupsReorderLinkQuery linkId(int value){\n  return unsafeParam(\"link_id\",value);\n}\n", "nl": "Link ID.", "id": "22410"}
{"code": "synchronized public Remote export(Remote impl,boolean allowCache) throws ExportException {\n  return export(impl,_config,allowCache);\n}\n", "nl": "Exports the specified remote object and returns a proxy that can be used to invoke remote methods on the exported remote object. This method must only be invoked once on a given <code>Exporter</code> instance. <p>The returned proxy implements an implementation-specific set of remote interfaces of the remote object and may also implement additional implementation-specific interfaces. <p>A remote interface is an interface that extends the interface <code>java.rmi.Remote</code> and whose methods each declare at least one exception whose type is <code>java.rmi.RemoteException</code> or one of its superclasses. <p>If the <code>impl</code> object already exported, returns the same proxy instance representing this <code>impl</code>", "id": "26298"}
{"code": "public static SectionSeparator createSectionSeparator(String caption){\n  return new SectionSeparator(caption);\n}\n", "nl": "Creates preformated instance of SectionSeparator to be used in Options dialog.", "id": "26937"}
{"code": "public Response writeLong(long l){\n  writeInt((int)((l >> 32) & 0xFFFFFFFF));\n  writeInt((int)(l & 0xFFFFFFFF));\n  return this;\n}\n", "nl": "Write long.", "id": "46914"}
{"code": "private int computeKey(int row,int column){\n  return row * columns + column;\n}\n", "nl": "Compute the key to access a matrix element.", "id": "38822"}
{"code": "public void handleDecode(Result rawResult){\n  inactivityTimer.onActivity();\n  beepManager.playBeepSoundAndVibrate();\n  handleDecodeExternally(rawResult);\n}\n", "nl": "A valid barcode has been found, so give an indication of success and show the results.", "id": "1988"}
{"code": "public void initialize(){\n  for (  TabModel model : mTabModelSelector.getModels())   model.addObserver(mTabModelObserver);\n  mTabModelSelector.addObserver(mTabModelSelectorObserver);\n}\n", "nl": "Initialize the wrapper to listen for the proper notifications.", "id": "58162"}
{"code": "protected GroupsIsMemberQueryWithUserIdsExtended groupId(String value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "ID or screen name of the community.", "id": "48466"}
{"code": "public double illumination(){\n  return illumination;\n}\n", "nl": "Get the illumination.", "id": "53687"}
{"code": "private void fireOnUnsubscribeEvent(final Set<Long> tagIds){\n  listenersLock.readLock().lock();\n  try {\n    Set<Long> copyList=new HashSet<Long>(tagIds);\n    for (    TagSubscriptionListener listener : tagSubscriptionListeners) {\n      listener.onUnsubscribe(copyList);\n    }\n  }\n  finally {\n    listenersLock.readLock().unlock();\n  }\n}\n", "nl": "Fires an <code>onUnsubscribe()</code> event to all registered <code>TagSubscriptionListener</code> listeners.", "id": "31774"}
{"code": "public int rank(){\n  return new SingularValueDecomposition(this).rank();\n}\n", "nl": "Matrix rank", "id": "14116"}
{"code": "public String removeContactMech(String contactMechPurposeTypeId){\n  return contactMechIdsMap.remove(contactMechPurposeTypeId);\n}\n", "nl": "Remove the contactMechId from this cart given the contactMechPurposeTypeId", "id": "14305"}
{"code": "private void transferToSpecificBuilderAndReset(){\n  if (currentTag == Tag.VERSION) {\n    dataBuilder.setVersion(buffer.toString());\n  }\n  addToRobotBuilder();\n  addToBrowserBuilder();\n  addToOperatingSystemBuilder();\n  addToBrowserPatternBuilder();\n  addToBrowserTypeBuilder();\n  addToBrowserOsMappingBuilder();\n  addToOperatingSystemPatternBuilder();\n  addToDeviceBuilder();\n  addToDevicePatternBuilder();\n  buffer=new StringBuilder();\n}\n", "nl": "Transfers all characters of a specific tag to the corresponding builder and resets the string buffer.", "id": "361"}
{"code": "public boolean isSetCallType(){\n  return __isset_bit_vector.get(__CALLTYPE_ISSET_ID);\n}\n", "nl": "Returns true if field callType is set (has been assigned a value) and false otherwise", "id": "2710"}
{"code": "public final void trace(final Object o,final Throwable t){\n  log(Level.TRACE,o,t);\n}\n", "nl": "This method logs the TRACE message", "id": "18623"}
{"code": "public long remainingCapacity(){\n  return sequencer.remainingCapacity();\n}\n", "nl": "Get the remaining capacity for this ringBuffer.", "id": "57953"}
{"code": "public void actionPerformed(ActionEvent ev){\n  Color color=ChooseColorDialog.showChooseColorDialog(getViewer().getFrame(),\"Choose color\",null);\n  if (color != null)   execute(\"set color=\" + color.getRed() + \" \"+ color.getGreen()+ \" \"+ color.getBlue()+ \";\");\n}\n", "nl": "action to be performed", "id": "31985"}
{"code": "public static boolean handle(EntityPlayer player,BlockPos pos){\n  SleepCheck event=new SleepCheck(player,pos,player.worldObj.getBlockState(pos).getBlock() == Blocks.BED);\n  OpenModLoader.getEventBus().post(event);\n  return event.result;\n}\n", "nl": "Convenience method for checking if the given player can sleep at the given position", "id": "15791"}
{"code": "public boolean isUnderFear(){\n  return isAbnormalSet(AbnormalState.FEAR);\n}\n", "nl": "return true if creature is under Fear effect", "id": "47191"}
{"code": "public static <T extends DataSupport>void markAsDeleted(Collection<T> collection){\n  for (  T t : collection) {\n    t.clearSavedState();\n  }\n}\n", "nl": "Provide a way to mark all models in collection as deleted. This means these models' save state is no longer exist anymore. If save them again, they will be treated as inserting new data instead of updating the exist one.", "id": "32917"}
{"code": "public void sendNoMsgToTarget(Object target){\n  sendToTargetOrType(target.getClass(),null);\n}\n", "nl": "send to recipient directly with has not any message", "id": "32856"}
{"code": "public CastExpr newCastExpr(Value op1,Type t){\n  return new GCastExpr(op1,t);\n}\n", "nl": "Constructs a CastExpr(Expr, Type) grammar chunk.", "id": "40937"}
{"code": "public void prune(double dMinCoexistenceImportance){\n  Graph.prune(dMinCoexistenceImportance);\n}\n", "nl": "Prunes the n-gram representation, given a minimum co-existence importance.", "id": "8479"}
{"code": "public void stop(){\n  getTimer(SELF).stop(verbose);\n}\n", "nl": "Stops the bulk timer.", "id": "23208"}
{"code": "@Override public Dfp multiply(final int x){\n  if (x >= 0 && x < RADIX) {\n    return multiplyFast(x);\n  }\n else {\n    return multiply(newInstance(x));\n  }\n}\n", "nl": "Multiply this by a single digit x.", "id": "26100"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "36510"}
{"code": "public void store(File file,Storable obj) throws IOException {\n  try (FileOutputStream fos=new FileOutputStream(file)){\n    serializer.write(fos,obj);\n  }\n }\n", "nl": "Stores the given object at the given file location. The object is serialized using the configured serializer.", "id": "4855"}
{"code": "public boolean isEmpty(){\n  return size() == 0;\n}\n", "nl": "Returns <tt>true</tt> if this list contains no elements.", "id": "17557"}
{"code": "public int insertFromScan(Scan s){\n  if (!super.insertIntoNextEmptySlot()) {\n    return 0;\n  }\n  for (  String fldName : sch.fields()) {\n    Constant val=s.getVal(fldName);\n    this.setVal(fldName,val);\n  }\n  if (s.next())   return 1;\n else   return -1;\n}\n", "nl": "Insert records to TempRecordFile for sorting, at most one block long", "id": "40361"}
{"code": "public void addCategoriesListener(SnapshotCategoriesListener listener){\n  listeners.add(listener);\n}\n", "nl": "Adds a listener for changes of registered snapshot categories.", "id": "33424"}
{"code": "public int months(){\n  return this.months;\n}\n", "nl": "Returns the months in this time duration.", "id": "8957"}
{"code": "private void abortLoading(){\n  if (thread == null)   return;\n  if (thread.isAlive()) {\n    thread.interrupt();\n    try {\n      thread.join();\n    }\n catch (    InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n}\n", "nl": "Stop loading data task", "id": "27932"}
{"code": "public void teardown(){\n  logger.info(\"Tearing down...\");\n  jssc.stop();\n  logger.info(\"Tear down complete\");\n}\n", "nl": "Method to tear down necessary elements when app is complete", "id": "3679"}
{"code": "public void pathValueToPixel(Path path){\n  path.transform(mMatrixValueToPx);\n  path.transform(mViewPortHandler.getMatrixTouch());\n  path.transform(mMatrixOffset);\n}\n", "nl": "transform a path with all the given matrices VERY IMPORTANT: keep order to value-touch-offset", "id": "10146"}
{"code": "protected GroupsIsMemberQueryWithExtended groupId(String value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "ID or screen name of the community.", "id": "27501"}
{"code": "public SiteAdminPage createNewPage(String title,String name,String templateName){\n  openCreatePageWindow();\n  createPageWindow.createPage(title,name,templateName);\n  grid.waitForLoaderNotPresent();\n  return this;\n}\n", "nl": "Creates a new page based on provided the values. During creation specified template is used in CreatePageWindow.", "id": "30964"}
{"code": "static void removeTextChangedListener(TextView textView,TextWatcher watcher){\n  textView.removeTextChangedListener(watcher);\n}\n", "nl": "Default modifier for removing text change listener", "id": "58057"}
{"code": "private boolean isDebuggable(Level level){\n  if (level.intValue() < debugLevel.intValue() || debugLevel == Level.OFF) {\n    return false;\n  }\n  return true;\n}\n", "nl": "Check if the debug-level allows a message to be logged at the specified level.", "id": "12743"}
{"code": "public static boolean exists(W q){\n  try {\n    return Helper.exists(q,User.class);\n  }\n catch (  Exception e1) {\n    log.error(e1.getMessage(),e1);\n  }\n  return false;\n}\n", "nl": "test the user exists for the query.", "id": "9630"}
{"code": "public long optLong(String key){\n  LazyNode token=getOptionalFieldToken(key);\n  if (token == null)   return 0l;\n  if (token.type == LazyNode.VALUE_NULL)   return 0l;\n  return token.getLongValue(cbuf);\n}\n", "nl": "Returns the long value stored in this object for the given key. Returns 0 if there is no such key.", "id": "39422"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CAHT_ROOM_JOIN_SUCCESS(String value1,String value0){\n  return new SM_SYSTEM_MESSAGE(1300850,value1,value0);\n}\n", "nl": "You have joined the private channel %1 at Channel %0. Confirm if you selected the channel in the chatting tab option.", "id": "27377"}
{"code": "@Override public boolean contains(String identifier){\n  return whitelist.contains(identifier);\n}\n", "nl": "Checks if an identifier is contained in this strategy.", "id": "47395"}
{"code": "public boolean ignore_types(){\n  return soot.PhaseOptions.getBoolean(options,\"ignore-types\");\n}\n", "nl": "Ignore Types Entirely -- Make Spark completely ignore declared types of variables. When this option is set to true, all parts of Spark completely  ignore declared types of variables and casts.", "id": "14900"}
{"code": "public static <T>List<T> toList(T... items){\n  if (items == null)   return null;\n  List<T> list=new ArrayList<T>(items.length);\n  for (  T item : items)   list.add(item);\n  return list;\n}\n", "nl": "Converts the supplied array into a List.", "id": "11092"}
{"code": "public boolean hasNavigtionBar(){\n  return mHasNavigationBar;\n}\n", "nl": "Does this device have a system navigation bar?", "id": "38877"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysResist_A_TO_SELF(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200789,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] is in the elemental maximum defense state because [%SkillCaster] used [%SkillName].", "id": "26744"}
{"code": "private boolean isLeafEdge(Edge f,PhyloGraph graph){\n  return graph.getDegree(graph.getSource(f)) == 1 || graph.getDegree(graph.getTarget(f)) == 1;\n}\n", "nl": "does this edge lead to a leaf?", "id": "7663"}
{"code": "public NotesGetCommentsQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of comments.", "id": "9668"}
{"code": "public static void delete(long uid,String sid){\n  delete(W.create(\"uid\",uid).and(\"sid\",sid));\n}\n", "nl": "delete all the token by the uid and sid", "id": "39074"}
{"code": "public boolean increment(K key){\n  return adjustValue(key,(long)1);\n}\n", "nl": "Increments the primitive value mapped to key by 1", "id": "19738"}
{"code": "protected void verifyInterpolation(UnivariateFunction f,double x[],double y[]){\n  for (int i=0; i < x.length; i++) {\n    Assert.assertEquals(f.value(x[i]),y[i],knotTolerance);\n  }\n}\n", "nl": "verifies that f(x[i]) = y[i] for i = 0..n-1 where n is common length.", "id": "47160"}
{"code": "private static void fixPrng(){\n  if (!prngFixed.get()) {\nsynchronized (PrngFixes.class) {\n      if (!prngFixed.get()) {\n        PrngFixes.apply();\n        prngFixed.set(true);\n      }\n    }\n  }\n}\n", "nl": "Ensures that the PRNG is fixed. Should be used before generating any keys. Will only run once, and every subsequent call should return immediately.", "id": "12785"}
{"code": "public static String exactly(long l){\n  return new HumanTime(l).getExactly();\n}\n", "nl": "Formats the given time delta, preserving all data. <p/> Equivalent to <code>new HumanTime(in).getExactly()</code>", "id": "25680"}
{"code": "public static CommandResult execCommand(List<String> commands,boolean isRoot,String path){\n  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true,path);\n}\n", "nl": "execute shell commands, default return result msg", "id": "35914"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set pc1=1 pc2=2 pc3=3;\");\n}\n", "nl": "action to be performed", "id": "19792"}
{"code": "public static int sign(final int x){\n  return (x == 0) ? 0 : (x > 0) ? 1 : -1;\n}\n", "nl": "Returns the <a href=\"http://mathworld.wolfram.com/Sign.html\"> sign</a> for int value <code>x</code>. <p> For an int value x, this method returns +1 if x > 0, 0 if x = 0, and -1 if x < 0.</p>", "id": "49109"}
{"code": "public static final SM_SYSTEM_MESSAGE STR_MSG_HOUSING_BID_SUCCESS(int address){\n  return new SM_SYSTEM_MESSAGE(1401265,address);\n}\n", "nl": "You made a bid for %addr0.", "id": "22570"}
{"code": "public String toString(){\n  return \"ConstrainableLookupLocator[[\" + super.toString() + \"], [\"+ constraints+ \"]]\";\n}\n", "nl": "Returns a string representation of this object.", "id": "49746"}
{"code": "private static void drainStream(InputStream is) throws IOException {\n  BufferedInputStream reader=new BufferedInputStream(is);\n  while (reader.read() != -1) {\n  }\n}\n", "nl": "Reads and discards all data from a given input stream.", "id": "25267"}
{"code": "public NotesRestoreCommentQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Note owner ID.", "id": "6658"}
{"code": "protected void updateCache(){\n  int needed=argPairs.size();\n  predToPair=new HashMap<Unit,ValueUnitPair>(needed << 1,1.0F);\n  for (  ValueUnitPair vup : argPairs) {\n    predToPair.put(vup.getUnit(),vup);\n  }\n}\n", "nl": "Update predToPair cache map which could be out-of-sync due to external setUnit or clone operations on the UnitBoxes.", "id": "4166"}
{"code": "public void dropCache(){\n  FileUtil.delete(getPreviewCacheDir());\n}\n", "nl": "Drop the preview cache for this configuration.", "id": "32215"}
{"code": "public boolean isEmpty(){\n  return lo() - hi() == 2 * S2.M_PI;\n}\n", "nl": "Return true if the interval is empty, i.e. it contains no points.", "id": "30975"}
{"code": "public void readSizePrefixedBytes(ByteInputBuffer buffer) throws IOException {\n  buffer.setSize(readInt());\n  read(buffer.getBytes(),0,buffer.size());\n  buffer.rewind();\n}\n", "nl": "reads size-prefixed bytes", "id": "3896"}
{"code": "public int validSamplesInFrame(){\n  return validSamplesInFrame;\n}\n", "nl": "This tells how many valid samples have been read into the current frame (before applying the optional data processor!).", "id": "386"}
{"code": "protected static int bandwidth2kernelLength(double normalisedTransitionBandwidth){\n  int l=(int)(4 / normalisedTransitionBandwidth);\n  if (l % 2 == 0)   l++;\n  return l;\n}\n", "nl": "Convert from normalisedTransitionBandwidth to filter kernel length, using the approximate formula l = 4/bw.", "id": "17282"}
{"code": "@Override public boolean isDataPresent(){\n  return true;\n}\n", "nl": "Checks if is data present.", "id": "8135"}
{"code": "@Override public Pair<Aggregation,Aggregation> nest(){\n  String nestingName=this.getName();\n  Aggregation outer=this.getAggregation().withFieldName(nestingName);\n  return new ImmutablePair<>(outer,this);\n}\n", "nl": "Splits an Aggregation for 2-pass aggregation into an inner filtered aggregation &amp; outer aggregation. The outer aggregation is obtained by unwrapping the inner filtered aggregation and getting just the aggregation. The outer aggregation fieldName will reference the inner aggregation name. The inner aggregation is unmodified.", "id": "27805"}
{"code": "public boolean isEnabled(){\n  return enabled;\n}\n", "nl": "Gets the value of the enabled property.", "id": "53714"}
{"code": "private void do_pts_interval_merge(){\n  for (  HeapInsIntervalManager him : new_pts.values()) {\n    him.mergeFigures(Parameters.max_pts_budget);\n  }\n}\n", "nl": "Merge the context sensitive tuples, and make a single insensitive tuple", "id": "41544"}
{"code": "private static boolean isLessThanOneWeek(Date date){\n  Calendar calendar=Calendar.getInstance();\n  calendar.add(Calendar.DAY_OF_MONTH,-6);\n  return date.after(calendar.getTime());\n}\n", "nl": "Check if the date is less than 7 days from now", "id": "24506"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonHoming_A_TO_SELF(String skillcaster,String value0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200883,skillcaster,value0,skillname);\n}\n", "nl": "[%SkillCaster] summoned %0 by using [%SkillName].", "id": "30301"}
{"code": "@Override protected void initToolbar(Bundle savedInstanceState){\n}\n", "nl": "Initialize the toolbar in the layout", "id": "35683"}
{"code": "public static UByte valueOf(String value) throws NumberFormatException {\n  return valueOfUnchecked(rangeCheck(Short.parseShort(value)));\n}\n", "nl": "Get an instance of an <code>unsigned byte</code>", "id": "2151"}
{"code": "public final void addIDConstraintDecl(XSElementDecl elmDecl,IdentityConstraint decl){\n  elmDecl.addIDConstraint(decl);\n  fGlobalIDConstraintDecls.put(decl.getIdentityConstraintName(),decl);\n}\n", "nl": "register one identity constraint", "id": "39335"}
{"code": "public void callHandler(String handlerName,String data,CallBackFunction callBack){\n  doSend(handlerName,data,callBack);\n}\n", "nl": "call javascript registered handler", "id": "29450"}
{"code": "@Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {\n  return decode(image,null);\n}\n", "nl": "Locates and decodes a MaxiCode in an image.", "id": "51976"}
{"code": "public static List<Writable> toRecord(INDArray array){\n  List<Writable> writables=new ArrayList<>();\n  writables.add(new NDArrayWritable(array));\n  return writables;\n}\n", "nl": "Convert an ndarray to a record", "id": "17185"}
{"code": "public static <T>T createService(final Class<T> clazz,final String baseUrl){\n  Retrofit retrofit=new Retrofit.Builder().baseUrl(baseUrl).addConverterFactory(GsonConverterFactory.create()).build();\n  return retrofit.create(clazz);\n}\n", "nl": "Creates a retrofit service from an arbitrary class (clazz)", "id": "21595"}
{"code": "private ColorMapEntry createColourMapEntry(ColourMapData data){\n  ColorMapEntry entry=new ColorMapEntryImpl();\n  entry.setColor(data.getColourExpression());\n  entry.setOpacity(data.getOpacity());\n  entry.setQuantity(data.getQuantity());\n  entry.setLabel(data.getLabel());\n  return entry;\n}\n", "nl": "Creates the colour map entry.", "id": "1116"}
{"code": "public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  String subSignature=method.getSubSignature();\n{\n    defaultMethod(method,thisVar,returnVar,params);\n    return;\n  }\n}\n", "nl": "Implements the abstract method simulateMethod. It distributes the request to the corresponding methods  by signatures.", "id": "20703"}
{"code": "protected void handleDirectoryEnd(File directory,int depth,Collection<T> results) throws IOException {\n}\n", "nl": "Overridable callback method invoked at the end of processing each directory. <p> This implementation does nothing.", "id": "33878"}
{"code": "public static PartnerBookmarksProviderIterator createIfAvailable(ContentResolver contentResolver){\n  Cursor cursor=contentResolver.query(BOOKMARKS_CONTENT_URI,BOOKMARKS_PROJECTION,null,null,BOOKMARKS_SORT_ORDER);\n  if (cursor == null)   return null;\n  return new PartnerBookmarksProviderIterator(cursor);\n}\n", "nl": "Creates the bookmarks iterator if possible.", "id": "13383"}
{"code": "protected int[] createPalette(int size){\nswitch (m_type) {\ncase Constants.NOMINAL:\n    return ColorLib.getCategoryPalette(size);\ncase Constants.NUMERICAL:\ncase Constants.ORDINAL:\ndefault :\n  return ColorLib.getGrayscalePalette(size);\n}\n}\n", "nl": "Create a color palette of the requested type and size.", "id": "18201"}
{"code": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\",\"checkstyle:javadocstyle\",\"checkstyle:javadocmethod\"}) public Object parseText(String text){\n  if (text == null || text.length() == 0) {\n    throw new IllegalArgumentException(\"The JSON input text should neither be null nor empty.\");\n  }\n  return parse(new LineColumnReader(new StringReader(text)));\n}\n", "nl": "Parse a text representation of a JSON data structure.", "id": "30212"}
{"code": "public void registerObserver(SpinnerNotifyInterface observer){\n  observers.add(observer);\n}\n", "nl": "Register observer.", "id": "52616"}
{"code": "protected AccountSetNameInMenuQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "User ID.", "id": "20833"}
{"code": "public boolean isDocumentLevel(){\n  loadRuleProperties();\n  return documentLevelRule;\n}\n", "nl": "Returns true if this rule can be applied to DOCUMENT only. Examples: $popup, $elemhide and such. Such rules have higher priority than common rules.", "id": "27017"}
{"code": "public void type(int... keys) throws InterruptedException {\n  for (  int key : keys) {\n    type(key);\n  }\n}\n", "nl": "Type a series of keys on the keyboard", "id": "50"}
{"code": "public boolean isDown(){\n  if (mLocalPath != null && mLocalPath.length() > 0) {\n    File file=new File(mLocalPath);\n    return (file.exists());\n  }\n  return false;\n}\n", "nl": "Use this to check if this file is available locally", "id": "48179"}
{"code": "public void clearSticky(){\n  int size=headComponentStack.size();\n  while (size > 0 && headerViewStack.size() == size) {\n    WXCell headComponent=headComponentStack.pop();\n    View headerView=headerViewStack.pop();\n    ((ViewGroup)getParent()).removeView(headerView);\n    headComponent.recoverySticky();\n  }\n}\n", "nl": "Clear All Sticky of stack", "id": "41500"}
{"code": "protected AdsDeleteAdsQuery accountId(int value){\n  return unsafeParam(\"account_id\",value);\n}\n", "nl": "Advertising account ID.", "id": "1583"}
{"code": "public void clear(){\n  int n=mSize;\n  Object[] values=mValues;\n  for (int i=0; i < n; i++) {\n    values[i]=null;\n  }\n  mSize=0;\n  mGarbage=false;\n}\n", "nl": "Removes all key-value mappings from this SparseArray.", "id": "21135"}
{"code": "public PhotosDeleteQuery delete(UserActor actor,int photoId){\n  return new PhotosDeleteQuery(getClient(),actor,photoId);\n}\n", "nl": "Deletes a photo.", "id": "58428"}
{"code": "public boolean checkAllophoneSyntax(String allophoneString){\n  try {\n    splitIntoAllophoneList(allophoneString,false);\n    return true;\n  }\n catch (  IllegalArgumentException e) {\n    return false;\n  }\n}\n", "nl": "Check whether the given allophone string has a correct syntax according to this allophone set.", "id": "40363"}
{"code": "@Override public void dataChanged(FieldIdEnum changedField){\n  updateSymbol();\n}\n", "nl": "Data changed.", "id": "35678"}
{"code": "private void beforeName() throws IOException {\n  int context=peek();\n  if (context == NONEMPTY_OBJECT) {\n    out.write(',');\n  }\n else   if (context != EMPTY_OBJECT) {\n    throw new IllegalStateException(\"Nesting problem.\");\n  }\n  newline();\n  replaceTop(DANGLING_NAME);\n}\n", "nl": "Inserts any necessary separators and whitespace before a name. Also adjusts the stack to expect the name's value.", "id": "41738"}
{"code": "@Override public void undoAction(UndoInterface undoRedoObject){\n  if ((checkBox != null) && (undoRedoObject != null)) {\n    if (undoRedoObject.getOldValue() instanceof Boolean) {\n      Boolean oldValue=(Boolean)undoRedoObject.getOldValue();\n      checkBox.setSelected(oldValue.booleanValue());\n    }\n  }\n}\n", "nl": "Undo action.", "id": "23564"}
{"code": "public boolean has(String key){\n  return a.containsKey(key);\n}\n", "nl": "Checks for.", "id": "44641"}
{"code": "public JSONWriter array() throws JSONException {\n  if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {\n    this.push(null);\n    this.append(\"[\");\n    this.comma=false;\n    return this;\n  }\n  throw new JSONException(\"Misplaced array.\");\n}\n", "nl": "Begin appending a new array. All values until the balancing <code>endArray</code> will be appended to this array. The <code>endArray</code> method must be called to mark the array's end.", "id": "10375"}
{"code": "public InstanceOfExpr newInstanceOfExpr(Value op1,Type t){\n  return new JInstanceOfExpr(op1,t);\n}\n", "nl": "Constructs a InstanceOfExpr(Immediate, Type) grammar chunk.", "id": "41883"}
{"code": "public static IOFileFilter nameFileFilter(String name,IOCase caseSensitivity){\n  return new NameFileFilter(name,caseSensitivity);\n}\n", "nl": "Returns a filter that returns true if the filename matches the specified text.", "id": "11197"}
{"code": "int onUpdateAll(String tableName,ContentValues values,String... conditions){\n  return doUpdateAllAction(tableName,values,conditions);\n}\n", "nl": "The open interface for other classes in CRUD package to update multiple rows. Using tableName to decide which table to update, and conditions representing the WHERE part of an SQL statement. The value that need to update is stored in ContentValues.", "id": "55246"}
{"code": "public static <T>T make(Class<T> shieldClass,RxJava1Hub rxJava1Hub){\n  return inst.make(shieldClass,rxJava1Hub,RxJava1Hub.class);\n}\n", "nl": "Helper static method to generate Shield Instances", "id": "7611"}
{"code": "public boolean insert_redundant_casts(){\n  return soot.PhaseOptions.getBoolean(options,\"insert-redundant-casts\");\n}\n", "nl": "Insert Redundant Casts -- . Insert extra casts for the Java bytecode verifier. If the  target method uses its this parameter, a reference to the  receiver object must be passed to the static copy of the target  method. The verifier may complain if the declared type of the  receiver parameter does not match the type implementing the  target method. Say, for example, that Singer is an interface  declaring the sing() method and that the call graph shows all  receiver objects at a particular call site, singer.sing() (with  singer declared as a Singer) are in fact Bird objects (Bird  being a class that implements Singer). The virtual call  singer.sing() is effectively replaced with the static call  Bird.staticsing(singer). Bird.staticsing() may perform  operations on its parameter which are only allowed on Birds,  rather than Singers. The Insert Redundant Casts option inserts  a cast of singer to the Bird type, to prevent complaints from  the verifier.", "id": "40355"}
{"code": "public E claimAndGetPreallocated(long sequence){\n  sequencer.claim(sequence);\n  return get(sequence);\n}\n", "nl": "Sets the cursor to a specific sequence and returns the preallocated entry that is stored there.  This can cause a data race and should only be done in controlled circumstances, e.g. during initialisation.", "id": "54499"}
{"code": "static boolean isSystemWindows(){\n  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;\n}\n", "nl": "Determines if Windows file system is in use.", "id": "16633"}
{"code": "public BoardDeleteCommentQuery deleteComment(UserActor actor,int groupId,int topicId,int commentId){\n  return new BoardDeleteCommentQuery(getClient(),actor,groupId,topicId,commentId);\n}\n", "nl": "Deletes a comment on a topic on a community's discussion board.", "id": "50867"}
{"code": "public static CommandResult execCommand(List<String> commands,boolean isRoot){\n  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);\n}\n", "nl": "execute shell commands, default return result msg", "id": "28080"}
{"code": "public String toString(){\n  final IOutputWriter w=new OutputWriterHumanReadable(new StringWriter());\n  try {\n    write(w,null);\n  }\n catch (  IOException e) {\n  }\n  return w.toString();\n}\n", "nl": "human readable representation", "id": "4707"}
{"code": "public static void resetPlugins(){\n  getInstance().reset();\n}\n", "nl": "This method is used to forward the call to the protected reset() method We create this class in the same package rx.plugins so we can access the protected method", "id": "1413"}
{"code": "private float parseFloat(String par1Str){\n  return par1Str.equals(\"true\") ? 1.0F : (par1Str.equals(\"false\") ? 0.0F : Float.parseFloat(par1Str));\n}\n", "nl": "Parses a string into a float.", "id": "4015"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_WARNING_SCROLLGET(String value0){\n  return new SM_SYSTEM_MESSAGE(1400833,value0);\n}\n", "nl": "%0 Premium Seal Breaking Scrolls have arrived. They will vanish in 60 minutes or if you log out.", "id": "12777"}
{"code": "public void processUtterance(Utterance utterance) throws ProcessException {\n  if (utterance.getRelation(Relation.SEGMENT) == null) {\n    throw new IllegalStateException(\"DiphoneUnitSelector: Segment relation does not exist\");\n  }\n  utterance.setObject(SampleInfo.UTT_NAME,diphoneDatabase.getSampleInfo());\n  createUnitRelation(utterance);\n}\n", "nl": "Generates the Unit Relation from the Segment Relation.", "id": "44685"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.setVisible(false);\n}\n", "nl": "parses the given command and executes it", "id": "50004"}
{"code": "@Override public void remove(){\n  throw new UnsupportedOperationException();\n}\n", "nl": "Not supported.", "id": "34944"}
{"code": "public DatabaseGetSchoolClassesQuery countryId(Integer value){\n  return unsafeParam(\"country_id\",value);\n}\n", "nl": "Country ID.", "id": "29047"}
{"code": "public VideoGetCommentsQueryWithExtended startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n", "nl": "Set start comment id", "id": "39443"}
{"code": "public SecureSetCounterQuery counters(String... value){\n  return unsafeParam(\"counters\",value);\n}\n", "nl": "Set counters", "id": "36889"}
{"code": "public static StorableActivityFence starting(@ActivityType int... activityTypes){\n  return new StorableActivityFence(activityTypes,START_TYPE);\n}\n", "nl": "Creates an storable activity fence which will be valid when the user starts one of the given activity", "id": "2554"}
{"code": "public boolean isDistinct(){\n  return distinct;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.files", "id": "33897"}
{"code": "@Override public void flush(){\n}\n", "nl": "Flushing this writer has no effect.", "id": "51641"}
{"code": "protected AppsGetCatalogQuery count(int value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of apps to return.", "id": "22941"}
{"code": "public String toString(cp_info constant_pool[]){\n  cp_info bsm=constant_pool[bootstrap_method_index];\n  cp_info nat=constant_pool[name_and_type_index];\n  return nat.toString(constant_pool) + \" - \" + bsm.toString(constant_pool);\n}\n", "nl": "Returns a String representation of this entry.", "id": "58132"}
{"code": "@NonNull public static Observable<Integer> task1(@NonNull List<String> list){\n  return Observable.just(0);\n}\n", "nl": "TODO : implement this method <p> This method takes list of strings and creates an observable of integers, that represents length of strings which contains letter 'r' (or 'R') <p> Example: Input list: (\"Vasya\", \"Dima\", \"Artur\", \"Petya\", \"Roma\") Result stream: (5, 4)", "id": "39703"}
{"code": "public static final boolean isSameApp(int uid1,int uid2){\n  return getAppId(uid1) == getAppId(uid2);\n}\n", "nl": "Checks to see if both uids are referring to the same app id, ignoring the user id part of the uids.", "id": "32741"}
{"code": "public double expectedWeightedValue(){\n  return this.weightedMean;\n}\n", "nl": "Expected value for the testArray defined in UnivariateStatisticAbstractTest", "id": "17784"}
{"code": "@Override public void processingInstruction(String target,XMLString data,Augmentations augs) throws XNIException {\n}\n", "nl": "A processing instruction. Processing instructions consist of a target name and, optionally, text data. The data is only meaningful to the application. <p/> Typically, a processing instruction's data will contain a series of pseudo-attributes. These pseudo-attributes follow the form of element attributes but are <strong>not</strong> parsed or presented to the application as anything other than text. The application is responsible for parsing the data.", "id": "7759"}
{"code": "public void apply() throws CanceledException, IOException, ParserConfigurationException, SAXException {\n  if (saxParserFactory == null)   saxParserFactory=SAXParserFactory.newInstance();\n  SAXParser saxParser=saxParserFactory.newSAXParser();\n  saxParser.parse(Basic.getInputStreamPossiblyZIPorGZIP(blastFile.getPath()),this);\n}\n", "nl": "apply the parser", "id": "56343"}
{"code": "@Override public void undoAction(UndoInterface undoRedoObject){\n  String oldValueObj=(String)undoRedoObject.getOldValue();\n  functionComboBox.setSelectedItem(oldValueObj);\n}\n", "nl": "Undo action.", "id": "24844"}
{"code": "public static String exactly(CharSequence in){\n  return eval(in).getExactly();\n}\n", "nl": "Parses and formats the given char sequence, preserving all data. <p/> Equivalent to <code>eval(in).getExactly()</code>", "id": "11056"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Root_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200894,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] is unable to fly because [%SkillCaster] used [%SkillName].", "id": "27825"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_DICE_CUSTOM_OTHER(String value0,int num1,int num2){\n  return new SM_SYSTEM_MESSAGE(1400127,value0,num1,num2);\n}\n", "nl": "%0 rolled the dice and got a %num1 (max. %num2).", "id": "24619"}
{"code": "@Override public void endDTD(Augmentations augmentations) throws XNIException {\n}\n", "nl": "The end of the DTD.", "id": "22419"}
{"code": "public static FieldSelector of(){\n  return new FieldSelector(ImmutableList.<Field>of());\n}\n", "nl": "Construct an empty field selector.", "id": "12503"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "47211"}
{"code": "public AuthSignupQuery sex(AppsSignupSex value){\n  return unsafeParam(\"sex\",value);\n}\n", "nl": "Set sex", "id": "28463"}
{"code": "public int createTexture(){\n  return GlUtil.createTexture(mFilter.getTextureTarget());\n}\n", "nl": "Creates a texture object suitable for use with drawFrame().", "id": "14863"}
{"code": "private void openThriftWriter(String dictionaryFile) throws IOException {\n  dictionaryThriftWriter=new ThriftWriter(dictionaryFile,true);\n  dictionaryThriftWriter.open();\n}\n", "nl": "open thrift writer for writing dictionary chunk/meta object", "id": "36440"}
{"code": "void clearWeight(NlComponent n){\n  if (mClearWeights == null) {\n    mClearWeights=new ArrayList<NlComponent>();\n  }\n  mClearWeights.add(n);\n}\n", "nl": "Marks that the given node should be cleared when applying the new size", "id": "33361"}
{"code": "public String toJson(Message message){\n  if (message == null)   throw new IllegalArgumentException(\"Message can not be null\");\n  return gson.toJson(message);\n}\n", "nl": "Converts a message to a JSON string.", "id": "23955"}
{"code": "public Bindings add(String property,JRadioButton[] cs){\n  registerPropertyChangeListener(cs);\n  return add(new JRadioButtonBinding(property,cs,0));\n}\n", "nl": "Handles JRadioButton", "id": "58099"}
{"code": "@Deprecated public static void write(StringBuffer data,Writer output) throws IOException {\n  if (data != null) {\n    output.write(data.toString());\n  }\n}\n", "nl": "Writes chars from a <code>StringBuffer</code> to a <code>Writer</code>.", "id": "24693"}
{"code": "@NotNull public ObjectProperty<GraphicGenerator.Shape> shape(){\n  return myShape;\n}\n", "nl": "A shape which will be used as the icon's backdrop.", "id": "20663"}
{"code": "public boolean match(String text){\n  return match(text,0,text.length());\n}\n", "nl": "match the given <code>text</code> with the pattern", "id": "3480"}
{"code": "public boolean isSelfBalancing(){\n  return this.selfBalancing;\n}\n", "nl": "Returns true if this tree is self balancing.", "id": "31002"}
{"code": "public static short swapShort(short value){\n  return (short)((((value >> 0) & 0xff) << 8) + (((value >> 8) & 0xff) << 0));\n}\n", "nl": "Converts a \"short\" value between endian systems.", "id": "1562"}
{"code": "private static Scope buildScope(){\n  return Scope.build(Scope.R_BASICPROFILE,Scope.R_EMAILADDRESS);\n}\n", "nl": "Build the list of member permissions our LinkedIn session requires", "id": "1646"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_LOOT_PAUSE_END_OTHER(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1390191,value0,value1);\n}\n", "nl": "%0 unpauses %1.", "id": "17031"}
{"code": "private List<View> addView(View view,List<View> cache){\n  if (cache == null) {\n    cache=new LinkedList<View>();\n  }\n  cache.add(view);\n  return cache;\n}\n", "nl": "Adds view to specified cache. Creates a cache list if it is null.", "id": "13116"}
{"code": "protected void addToken(Tokens tokens,int token) throws XNIException {\n  tokens.addToken(token);\n}\n", "nl": "This method adds the specified token to the token list. By default, this method allows all tokens. However, subclasses of the XPathExprScanner can override this method in order to disallow certain tokens from being used in the scanned XPath expression. This is a convenient way of allowing only a subset of XPath.", "id": "31888"}
{"code": "@Override public void onReceivedTitle(WebView view,String title){\n  i(null,\"--> onReceivedTitle() title = \" + title);\n  super.onReceivedTitle(view,title);\n  configReceivedTitle(view,title);\n}\n", "nl": "Notify the host application of a change in the document title.", "id": "1030"}
{"code": "public static GreaterEqualsSpacePredicate greaterEqual(Comparable<?> value){\n  return new GreaterEqualsSpacePredicate(value);\n}\n", "nl": "Creates a GREATER-EQUALS predicate using the specified expected value.", "id": "31121"}
{"code": "private void addCallbackMethod(String layoutClass,AndroidMethod callbackMethod){\n  Set<SootMethodAndClass> methods=this.callbackMethods.get(layoutClass);\n  if (methods == null) {\n    methods=new HashSet<SootMethodAndClass>();\n    this.callbackMethods.put(layoutClass,methods);\n  }\n  methods.add(new AndroidMethod(callbackMethod));\n}\n", "nl": "Adds a method to the set of callback method", "id": "28717"}
{"code": "public static final Vertex locateVertexInGraph(UniqueVertexGraph gGraph,Vertex vToFind){\n  return gGraph.locateVertex(vToFind);\n}\n", "nl": "Looks up a vertex in a given graph.", "id": "21520"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Spin_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200285,skillname);\n}\n", "nl": "You are spinning after using [%SkillName].", "id": "40832"}
{"code": "public Builder zoomOutTitle(String zoomOutTitle){\n  this.zoomOutTitle=zoomOutTitle;\n  return this;\n}\n", "nl": "The title set on the zoom out button. </br> default \"Zoom out\"", "id": "14029"}
{"code": "protected GroupsUnbanUserQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "User ID.", "id": "27056"}
{"code": "public static void writeStringToFile(File file,String data) throws IOException {\n  writeStringToFile(file,data,Charset.defaultCharset(),false);\n}\n", "nl": "Writes a String to a file creating the file if it does not exist using the default encoding for the VM.", "id": "4205"}
{"code": "public FeatureFlag forName(String name) throws BadApiRequestException {\n  FeatureFlag flag=NAMES_TO_VALUES.get(name.toUpperCase(Locale.ENGLISH));\n  return flag != null ? flag : Utils.<FeatureFlag>insteadThrowRuntime(new BadApiRequestException(\"Invalid feature flag: \" + name));\n}\n", "nl": "Get a registered FeatureFlag by name.", "id": "6433"}
{"code": "public static boolean putFloat(Context context,String key,float value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putFloat(key,value);\n  return editor.commit();\n}\n", "nl": "put float preferences", "id": "39769"}
{"code": "public void onMenuDismissed(){\n  mReloadMenuItem=null;\n}\n", "nl": "Notify the delegate that menu was dismissed.", "id": "28681"}
{"code": "private static void write(GigaSpace space,Phrase phrase){\n  LeaseContext<Phrase> context=space.write(phrase);\n  if (context.getVersion() == 1) {\n    System.out.println(\"write - \" + phrase);\n  }\n else {\n    System.out.println(\"update - \" + phrase);\n  }\n}\n", "nl": "Write (or update) an entity in the data-grid", "id": "52531"}
{"code": "public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_CAN_NOT_INVITE_HIM_HE_IS_NOT_PARTY_LEADER(String value0){\n  return new SM_SYSTEM_MESSAGE(1300194,value0);\n}\n", "nl": "You cannot invite %0 to the alliance as he or she is not a group leader.", "id": "8746"}
{"code": "@Override public int next(){\n  next=daa2QuerySAMIterator.next();\n  return countNewLines(next.get2());\n}\n", "nl": "gets the next matches", "id": "15158"}
{"code": "@Override public StyledLayerDescriptor readSLDFile(File file){\n  return SLDUtils.readSLDFile(file);\n}\n", "nl": "Read sld file.", "id": "12610"}
{"code": "public Activity runAt(String key,long time){\n  Activity a=get(key);\n  if (a != null)   ActivityManager.scheduleAt(a,time);\n  return a;\n}\n", "nl": "Runs the Activity corresponding to the given key with the ActivityManager to begin at the specified time.", "id": "20621"}
{"code": "public MessagesMarkAsReadQuery peerId(String value){\n  return unsafeParam(\"peer_id\",value);\n}\n", "nl": "Set peer id", "id": "23931"}
{"code": "private boolean isDirect(final BSPTree<Sphere1D> node){\n  return ((LimitAngle)node.getCut().getHyperplane()).isDirect();\n}\n", "nl": "Check if an internal node has a direct limit angle.", "id": "22276"}
{"code": "public SiteAdminActionBar clickOnButton(SiteAdminButtons button){\n  getButton(button).click();\n  return this;\n}\n", "nl": "Clicks on one of the Action Bar's buttons.", "id": "34407"}
{"code": "public static boolean interfaceOf(Class<?> objectClass,Class<?> interfaceClass){\n  while (objectClass != null) {\n    Class<?>[] ifaces=objectClass.getInterfaces();\n    for (    Class<?> iface : ifaces) {\n      if (iface == interfaceClass)       return true;\n    }\n    objectClass=objectClass.getSuperclass();\n  }\n  return false;\n}\n", "nl": "Tests if a class properly implements the specified interface.", "id": "7040"}
{"code": "public Map.Entry<K,V> ceilingEntry(K key){\n  return getNear(key,GT | EQ);\n}\n", "nl": "Returns a key-value mapping associated with the least key greater than or equal to the given key, or <tt>null</tt> if there is no such entry. The returned entry does <em>not</em> support the <tt>Entry.setValue</tt> method.", "id": "11573"}
{"code": "public boolean ignore_types_for_sccs(){\n  return soot.PhaseOptions.getBoolean(options,\"ignore-types-for-sccs\");\n}\n", "nl": "Ignore Types For SCCs -- Ignore declared types when determining node equivalence for SCCs. When this option is set to true, when collapsing  strongly-connected components, nodes forming SCCs are collapsed  regardless of their declared type. The collapsed SCC is given  the most general type of all the nodes in the component. When  this option is set to false, only edges connecting nodes of the  same type are considered when detecting SCCs. This option has  no effect unless simplify-sccs is true.", "id": "30598"}
{"code": "public String read(){\n  switchToTextArea();\n  try {\n    return webDriver.findElement(By.xpath(\".//body\")).getText();\n  }\n  finally {\n    frameSwitcher.switchTo(\"/$cq\");\n  }\n}\n", "nl": "Reads whole text from the text area and returns it.", "id": "33161"}
{"code": "public long generateNewPingId(){\n  PreferenceStore prefs=getPreferenceStore();\n  Random rnd=new Random();\n  long id=rnd.nextLong();\nsynchronized (DdmsPreferenceStore.class) {\n    prefs.setValue(PING_ID,id);\n    try {\n      prefs.save();\n    }\n catch (    IOException e) {\n    }\n  }\n  return id;\n}\n", "nl": "Generates a new random ping ID and saves it in the preference store.", "id": "2286"}
{"code": "public void put0(int i,Z val){\n  re[i]=val.re;\n  im[i]=val.im;\n}\n", "nl": "Writes the <tt>i</tt>th diagonal element  of a Zdiagmat (0-based).", "id": "39521"}
{"code": "public boolean isDurationDate(){\n  return isDurationDate;\n}\n", "nl": "Checks if is duration date.", "id": "20715"}
{"code": "public static SM_SYSTEM_MESSAGE STR_BREAK_ITEM(String value0){\n  return new SM_SYSTEM_MESSAGE(1300424,value0);\n}\n", "nl": "%0 has been destroyed.", "id": "18895"}
{"code": "public void stopMoving(){\n  Creature owner=getOwner();\n  World.getInstance().updatePosition(owner,owner.getX(),owner.getY(),owner.getZ(),owner.getHeading());\n  PacketSendUtility.broadcastPacket(owner,new SM_MOVE(owner));\n}\n", "nl": "Stops movements", "id": "37682"}
{"code": "public void update(Vector2 mousePosition){\nsynchronized (this.mousePosition) {\n    if (this.mousePosition.distanceSquared(mousePosition) <= Epsilon.E)     return;\n    this.mousePosition=mousePosition.copy();\n    if (!this.updateRequired) {\n      this.updateRequired=true;\n      this.updateEDT();\n    }\n  }\n}\n", "nl": "Updates the mouse position.", "id": "35854"}
{"code": "@Override public void powerOnSelfTest() throws Error {\n}\n", "nl": "Perform a power-on self test by processing some example input data. This module is actually tested as part of the MbrolaSynthesizer test, for which reason this method does nothing.", "id": "43754"}
{"code": "public boolean evaluateWord(String sWord){\n  return Dictionary.contains(sWord);\n}\n", "nl": "Performs evaluation of a word, using the dictionary of the category. Words that have not appeared in the category, return a false value.", "id": "20339"}
{"code": "public String toString(){\n  return image;\n}\n", "nl": "Returns the image.", "id": "49511"}
{"code": "public boolean showStorageSites(){\n  return CATEGORY_USE_STORAGE.equals(mCategory);\n}\n", "nl": "Returns whether this category is the Storage category.", "id": "55671"}
{"code": "public void removeModule(@NotNull Module module){\n  checkInitialized();\n  String moduleGradlePath=getModuleGradlePath(module);\n  if (moduleGradlePath != null) {\n    removeModule(moduleGradlePath);\n  }\n}\n", "nl": "Removes the reference to the module from the settings file, if present. Must be run inside a write action.", "id": "42706"}
{"code": "public void connect(){\n  connection.connect();\n  this.folder=connection.getFolder();\n}\n", "nl": "Connects with mailbox.", "id": "29484"}
{"code": "public GroupsGetCatalogQuery categoryId(Integer value){\n  return unsafeParam(\"category_id\",value);\n}\n", "nl": "Category id received from groups.getCatalogInfo.", "id": "33750"}
{"code": "public static CarbonDimension findDimension(List<CarbonDimension> dimensions,String carbonDim){\n  CarbonDimension findDim=null;\n  for (  CarbonDimension dimension : dimensions) {\n    if (dimension.getColName().equalsIgnoreCase(carbonDim)) {\n      findDim=dimension;\n      break;\n    }\n  }\n  return findDim;\n}\n", "nl": "Find the dimension from metadata by using unique name. As of now we are taking level name as unique name. But user needs to give one unique name for each level,that level he needs to mention in query.", "id": "42278"}
{"code": "public void remove(Legion legion){\n  legionsById.remove(legion.getLegionId());\n  legionsByName.remove(legion.getLegionName().toLowerCase());\n}\n", "nl": "Remove Legion from this Container.", "id": "24683"}
{"code": "public void releaseReadLock(int segmentId){\n  _readLocks[segmentId].unlock();\n}\n", "nl": "Releases a read lock on the specified segment.", "id": "31531"}
{"code": "public static EntityQuery use(Delegator delegator){\n  return new EntityQuery(delegator);\n}\n", "nl": "Construct an EntityQuery object for use against the specified Delegator", "id": "9073"}
{"code": "@Override @PostConstruct public void init() throws IDBPersistenceException {\n  super.init();\n}\n", "nl": "Wait for the connection with ElasticSearch to be alive.", "id": "13163"}
{"code": "public static boolean certificateNeedsRenewal(List<String> domains,Secret secret){\n  val isExpiring=certificateIsExpiring(secret);\n  val domainsChanged=haveDomainsChanged(domains,secret);\n  return (isExpiring || domainsChanged);\n}\n", "nl": "Checks whether a certificate needs renewal. Renewal can be caused either by certificate expiry or if the list of domains requested for a SAN certificate changes.", "id": "41114"}
{"code": "public void remove(Predicate filter){\n  for (IntIterator ii=rows(filter); ii.hasNext(); )   removeRow(ii.nextInt());\n}\n", "nl": "Removes all table rows that meet the input predicate filter.", "id": "15455"}
{"code": "public List<DependencyGraph> dependencyTreebankTraining(){\nswitch (language) {\ncase ENGLISH:\n    return DependencyGraphReader.read(\"/export/dat/udt/en/en-ud-train.conllu\",'u');\ncase VIETNAMESE:\n  return DependencyGraphReader.read(\"/export/dat/udt/vi/01-training.conll\",'x');\n}\nreturn null;\n}\n", "nl": "Gets training dependency treebank.", "id": "45663"}
{"code": "private static ExternalSystem resetNTLMFields(ExternalSystem input){\n  input.setUsername(null);\n  input.setPassword(null);\n  input.setDomain(null);\n  return input;\n}\n", "nl": "Reset NTLM authentication fields for external system entity<br> <b>TFS specific</b>", "id": "11786"}
{"code": "public static boolean kingLike(Item tokenItem){\n  String kingName=((String)tokenItem.findFeature(\"p.name\")).toLowerCase();\n  if (inKingSectionLikeHash(kingName,KING_NAMES)) {\n    return true;\n  }\n else {\n    String kingTitle=((String)tokenItem.findFeature(\"p.p.name\")).toLowerCase();\n    return inKingSectionLikeHash(kingTitle,KING_TITLES);\n  }\n}\n", "nl": "Returns true if the given token item contains a token that is in a king-like context, e.g., \"King\" or \"Louis\".", "id": "7700"}
{"code": "public JSONObject put(String key,Map value) throws JSONException {\n  put(key,new JSONObject(value));\n  return this;\n}\n", "nl": "Put a key/value pair in the JSONObject, where the value will be a JSONObject which is produced from a Map.", "id": "3889"}
{"code": "public boolean containsKey(Object key){\n  return backedMap.containsKey(key);\n}\n", "nl": "Returns <tt>true</tt> if this map contains a mapping for the specified key.  More formally, returns <tt>true</tt> if and only if this map contains a mapping for a key <tt>k</tt> such that <tt>(key==null ? k==null : key.equals(k))</tt>.  (There can be at most one such mapping.)", "id": "35066"}
{"code": "public boolean needsOffset(){\n  return (isEnabled() && isDrawLabelsEnabled() && getLabelPosition() == YAxisLabelPosition.OUTSIDE_CHART);\n}\n", "nl": "Returns true if this axis needs horizontal offset, false if no offset is needed.", "id": "38745"}
{"code": "public int size(){\n  return map.size();\n}\n", "nl": "Returns the number of elements in this set (its cardinality).", "id": "11220"}
{"code": "public boolean showNotificationsSites(){\n  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_NOTIFICATIONS;\n}\n", "nl": "Returns whether this category is the Notifications category.", "id": "41832"}
{"code": "public boolean isLoaded(){\n  return size() > 0;\n}\n", "nl": "has the table been loaded", "id": "56042"}
{"code": "public double tTest(final double mu,final StatisticalSummary sampleStats) throws MathIllegalArgumentException, NullArgumentException, MathIllegalStateException {\n  checkSampleData(sampleStats);\n  return tTest(sampleStats.getMean(),mu,sampleStats.getVariance(),sampleStats.getN());\n}\n", "nl": "Returns the <i>observed significance level</i>, or <i>p-value</i>, associated with a one-sample, two-tailed t-test comparing the mean of the dataset described by <code>sampleStats</code> with the constant <code>mu</code>. <p> The number returned is the smallest significance level at which one can reject the null hypothesis that the mean equals <code>mu</code> in favor of the two-sided alternative that the mean is different from <code>mu</code>. For a one-sided test, divide the returned value by 2.</p> <p> <strong>Usage Note:</strong><br> The validity of the test depends on the assumptions of the parametric t-test procedure, as discussed <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\"> here</a></p> <p> <strong>Preconditions</strong>: <ul> <li>The sample must contain at least 2 observations. </li></ul></p>", "id": "727"}
{"code": "public DistributedLogNamespaceBuilder clientId(String clientId){\n  this._clientId=clientId;\n  return this;\n}\n", "nl": "Client Id used for accessing the namespace", "id": "29124"}
{"code": "public FileOutputStream createOutputFile(String file_name) throws FileNotFoundException {\n  return new FileOutputStream(new File(dump_dir,file_name));\n}\n", "nl": "Create all output files under the uniform location.", "id": "15648"}
{"code": "public static boolean isFrictionImpulseEnabled(){\n  return frictionImpulseEnabled;\n}\n", "nl": "Returns true if friction impulses should be rendered.", "id": "7285"}
{"code": "public static void copy(Reader input,OutputStream output) throws IOException {\n  OutputStreamWriter out=new OutputStreamWriter(output);\n  copy(input,out);\n  out.flush();\n}\n", "nl": "Serialize chars from a <code>Reader</code> to bytes on an <code>OutputStream</code>, and flush the <code>OutputStream</code>.", "id": "3559"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "45048"}
{"code": "public void addBrowserInfo(){\n  Capabilities caps=((HasCapabilities)webDriver).getCapabilities();\n  browserInfoEntry=new BrowserInfoEntry(caps);\n}\n", "nl": "Retrieves capabilities info from webDriver and stores the BrowserInfoEntry.", "id": "31518"}
{"code": "public static UShort ushort(int value) throws NumberFormatException {\n  return UShort.valueOf(value);\n}\n", "nl": "Create an <code>unsigned short</code>", "id": "4284"}
{"code": "@Override public Object asJavaVal(){\n  return val;\n}\n", "nl": "Unwraps the Integer and returns it.", "id": "51139"}
{"code": "public boolean textToSpeech(String text){\n  return voice.speak(text);\n}\n", "nl": "Converts the given text to speech based using processing options currently set in FreeTTS.", "id": "6500"}
{"code": "public ResourceLazyLoadingScript script(String resourceLocation){\n  this.resourceLocation=resourceLocation;\n  return this;\n}\n", "nl": "Sets the actual script source.", "id": "18611"}
{"code": "public void addObserver(FindToolbarObserver observer){\n  mObservers.addObserver(observer);\n}\n", "nl": "Add an observer for find in page changes.", "id": "5895"}
{"code": "public void or(Criteria criteria){\n  oredCriteria.add(criteria);\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.hints", "id": "1694"}
{"code": "static void writeShort(final byte[] b,final int index,final int s){\n  b[index]=(byte)(s >>> 8);\n  b[index + 1]=(byte)s;\n}\n", "nl": "Writes a short value in the given byte array.", "id": "24397"}
{"code": "public StaticInvokeExpr newStaticInvokeExpr(SootMethodRef method,List<? extends Value> args){\n  return new JStaticInvokeExpr(method,args);\n}\n", "nl": "Constructs a NewStaticInvokeExpr(ArrayType, List of Immediate) grammar chunk.", "id": "8606"}
{"code": "public final void onAttack(Creature creature,int skillId,final int damage,boolean notifyAttack){\n  this.onAttack(creature,skillId,TYPE.REGULAR,damage,notifyAttack,LOG.REGULAR);\n}\n", "nl": "Perform tasks when Creature was attacked", "id": "5221"}
{"code": "private boolean addCallbackMethods(SootClass currentClass){\n  return addCallbackMethods(currentClass,null,\"\");\n}\n", "nl": "Generates invocation statements for all callback methods which need to be invoked during the given class' run cycle.", "id": "43300"}
{"code": "protected void initFileLocation(){\n  PathService pathService=CarbonCommonFactory.getPathService();\n  CarbonTablePath carbonTablePath=pathService.getCarbonTablePath(columnIdentifier,this.hdfsStorePath,carbonTableIdentifier);\n  this.columnDictionaryMetadataFilePath=carbonTablePath.getDictionaryMetaFilePath(columnIdentifier.getColumnId());\n}\n", "nl": "This method will form the path for dictionary metadata file for a given column", "id": "7243"}
{"code": "public int equivHashCode(){\n  return 1729;\n}\n", "nl": "Returns a hash code for this object, consistent with structural equality.", "id": "30317"}
{"code": "@Override TaskDomino<T,R,U> newThread(){\n  return new TaskDomino<T,R,U>(super.newThread());\n}\n", "nl": "For unit test only.", "id": "26290"}
{"code": "public NewsfeedDeleteBanQuery userIds(List<Integer> value){\n  return unsafeParam(\"user_ids\",value);\n}\n", "nl": "Set user ids", "id": "12880"}
{"code": "public void loadData(Table t,String query,String keyField){\n  loadData(t,query,keyField,null,null);\n}\n", "nl": "Asynchronously executes a query and stores the results in the given  table instance. All data processing is done in a separate thread of execution.", "id": "42079"}
{"code": "@Override public String toString(){\n  return displayString;\n}\n", "nl": "To string.", "id": "49984"}
{"code": "public Record decode(byte[] input){\n  return null;\n}\n", "nl": "Takes a byte[] and decodes it into a Record. This method assumes that the input byte[] represents a record that corresponds to this schema.", "id": "14474"}
{"code": "public Builder tms(Boolean tms){\n  this.tms=tms;\n  return this;\n}\n", "nl": "If true, inverses Y axis numbering for tiles (turn this on for TMS services). </br> default true", "id": "40134"}
{"code": "@Override public void populateField(String value){\n  if (ttfPanel != null) {\n    ttfPanel.populateExpression(value);\n  }\n}\n", "nl": "Populate field.", "id": "45606"}
{"code": "@SuppressWarnings(\"UnusedParameters\") void onStart(@Nullable Module module,@Nullable VirtualFile workingDir,@NotNull String... args){\n}\n", "nl": "Invoked on command start (before process spawning).", "id": "25054"}
{"code": "private void buildRowsPerPagePanel(){\n  rowsPerPagePanel.setInitialClasses(TableCssName.ROWS_PER_PAGE_PANEL);\n  rowsPerPagePanel.setGrid(\"s12 m4 l3\");\n  rowsPerPagePanel.add(listRowsPerPage);\n  rowsPerPagePanel.add(rowsPerPageLabel);\n  add(rowsPerPagePanel);\n}\n", "nl": "Build the rows per page panel - where you can set the range of row count into listbox", "id": "7928"}
{"code": "public Bitmap onTakePhotoResult(){\n  Uri takenPhotoUri=getPhotoFileUri(this.thePhotoName,this.anotherPhotoName,this.activity);\n  if (takenPhotoUri != null) {\n    Bitmap takenImage=BitmapFactory.decodeFile(takenPhotoUri.getPath());\n    takenImage=resizePhoto(takenImage,this.resizePhoto,true);\n    return takenImage;\n  }\n else {\n    return null;\n  }\n}\n", "nl": "Save the photo in memory bitmap, resize and return the photo", "id": "40173"}
{"code": "@Override public void close() throws CannotCloseContainerException {\n  if (applicationContext instanceof DisposableBean) {\n    try {\n      ((DisposableBean)applicationContext).destroy();\n    }\n catch (    Exception e) {\n      throw new CannotCloseContainerException(\"Failed to close container with application context [\" + applicationContext + \"]\",e);\n    }\n  }\n  super.close();\n}\n", "nl": "Closes the processing unit container by destroying the Spring application context.", "id": "50305"}
{"code": "@Deprecated public static String removeIANA2JavaMapping(String ianaEncoding){\n  return (String)fIANA2JavaMap.remove(ianaEncoding);\n}\n", "nl": "Removes an IANA to Java encoding name mapping.", "id": "19723"}
{"code": "public static String slurpURLNoExceptions(URL u){\n  try {\n    return slurpURL(u);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    return null;\n  }\n}\n", "nl": "Returns all the text at the given URL.", "id": "31446"}
{"code": "protected void clearError(){\nsynchronized (lock) {\n    mIoError=false;\n  }\n}\n", "nl": "Sets the error state of the stream to false.", "id": "7046"}
{"code": "public static boolean isUSPhoneMainNumber(String s){\n  if (isEmpty(s))   return defaultEmptyOK;\n  String normalizedPhone=stripCharsInBag(s,phoneNumberDelimiters);\n  return (isInteger(normalizedPhone) && normalizedPhone.length() == digitsInUSPhoneMainNumber);\n}\n", "nl": "isUSPhoneMainNumber returns true if string s is a valid U.S. Phone Main Number.  Must be 7 digits.", "id": "56483"}
{"code": "private void scheduleFixedTasks(){\n  scheduler.scheduleTask(FileResourceCleanUpTask.KEY_TASK,fileResourceCleanUpTask,Scheduler.CRON_DAILY_2AM);\n  scheduler.scheduleTask(DataStatisticsTask.KEY_TASK,dataStatisticsTask,Scheduler.CRON_DAILY_2AM);\n}\n", "nl": "Schedules fixed tasks, i.e. tasks which are required for various system functions to work.", "id": "16915"}
{"code": "public Object cheese(String body,@Header(\"name\") String name){\n  return \"Hello \" + name + \". I got payload `\"+ body+ \"` and I am on host: \"+ System.getenv(\"HOSTNAME\");\n}\n", "nl": "The method used as funktion", "id": "7815"}
{"code": "@SuppressWarnings(\"rawtypes\") private boolean sameType(Object flowSet){\n  return (flowSet instanceof ArrayPackedSet && ((ArrayPackedSet)flowSet).map == map);\n}\n", "nl": "Returns true if flowSet is the same type of flow set as this.", "id": "29039"}
{"code": "public JSONWriter value(boolean b) throws JSONException {\n  return this.append(b ? \"true\" : \"false\");\n}\n", "nl": "Append either the value <code>true</code> or the value <code>false</code>.", "id": "39529"}
{"code": "public Boolean isLogBeforeScripts(){\n  return logBeforeScripts;\n}\n", "nl": "Gets the value of the logBeforeScripts property.", "id": "17587"}
{"code": "public static boolean supportsEnvelopedEntries(int version){\n  return version >= LogSegmentMetadataVersion.VERSION_V4_ENVELOPED_ENTRIES.value;\n}\n", "nl": "Whether the provided version supports enveloping entries before writing to bookkeeper.", "id": "46643"}
{"code": "private static int resolveGravity(int gravity){\n  return gravity == Gravity.NO_GRAVITY ? GravityCompat.START | Gravity.TOP : gravity;\n}\n", "nl": "Return the given gravity value or the default if the passed value is NO_GRAVITY. This should be used for children that are not anchored to another view or a keyline.", "id": "58476"}
{"code": "@Override public boolean isConstant(){\n  return false;\n}\n", "nl": "Returns false.", "id": "23340"}
{"code": "protected static float complexToFloat(int complex){\n  return (complex & (COMPLEX_MANTISSA_MASK << COMPLEX_MANTISSA_SHIFT)) * RADIX_MULTS[(complex >> COMPLEX_RADIX_SHIFT) & COMPLEX_RADIX_MASK];\n}\n", "nl": "Taken from https://github.com/menethil/ApkTool/blob/master/src/android/util/TypedValue.java", "id": "3769"}
{"code": "public void requestNodeRoutingInfo(int nodeId){\n  this.enqueue(new GetRoutingInfoMessageClass().doRequest(nodeId));\n}\n", "nl": "Request the node routing information.", "id": "11519"}
{"code": "public static Style deepPurple(){\n  final Style style=new Style();\n  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_DEEP_PURPLE);\n  return style;\n}\n", "nl": "Default material deep purple transparent style for SuperToasts.", "id": "7513"}
{"code": "public void normal(){\n  mHintView.setVisibility(View.VISIBLE);\n  mProgressBar.setVisibility(View.GONE);\n}\n", "nl": "normal status", "id": "9996"}
{"code": "public static TableMetadata readTableMetadata(String fileName) throws IOException {\n  byte[] encoded=Files.readAllBytes(Paths.get(fileName));\n  return TableMetadata.fromJson(new String(encoded,StandardCharsets.UTF_8));\n}\n", "nl": "Reads in a json-formatted file and creates a TableMetadata instance from it. Files are expected to be in the format provided by TableMetadata}", "id": "2419"}
{"code": "public ResourceLoader addExcludePackages(String... packages){\n  Collections.addAll(excludeResourcePackages,packages);\n  return this;\n}\n", "nl": "exclude scan packages  eg. com.cybermkd.resource", "id": "44021"}
{"code": "public void addAll(final Iterable<BSPTree<S>> iterator){\n  for (  final BSPTree<S> node : iterator) {\n    add(node);\n  }\n}\n", "nl": "Add nodes if they are not already known.", "id": "54396"}
{"code": "public void resetResendCount(){\n  resendCount=0;\n  if (nodeInitStageAdvancer.isInitializationComplete() && isDead() == false) {\n    nodeInitStageAdvancer.startInitialisation(ZWaveNodeInitStage.DONE);\n  }\n}\n", "nl": "Resets the resend counter and possibly resets the node stage to DONE when previous initialization was complete. Note that if the node is DEAD, then the nodeStage stays DEAD", "id": "49178"}
{"code": "public void loadDataStringFromFile(String sFilename){\n  try {\n    Histogram.loadDataStringFromFile(sFilename);\n  }\n catch (  IOException ioe) {\n    ioe.printStackTrace();\n    Histogram.setDataString(\"\");\n    Graph.setDataString(\"\");\n  }\n}\n", "nl": "Uses the given file to load the initial text to represent. Ignores the document graph.", "id": "27493"}
{"code": "@Override public boolean isAcceptable(JsonPath jsonPath,String requestType){\n  return jsonPath.isCollection() && jsonPath instanceof ResourcePath && HttpMethod.GET.name().equals(requestType);\n}\n", "nl": "Check if it is a GET request for a collection of resources.", "id": "1430"}
{"code": "public ConsoleWriter erasePreviouslyPrintedLines(){\n  if (consoleWriterConfig.isAnsiCodeEnabled()) {\n    for (int i=0; i < numberOfNewLinesInLastPrintedString; i++) {\n      ansi.cursorUp(1);\n      ansi.eraseLine();\n    }\n  }\n  return this;\n}\n", "nl": "Erases the previous printed lines from the console.", "id": "58145"}
{"code": "public VideoGetCommentsQuery startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n", "nl": "Set start comment id", "id": "27877"}
{"code": "public String name(){\n  return theType.name();\n}\n", "nl": "Return the name of the element's type. Convenience method.", "id": "31967"}
{"code": "public void cancel(OCUpload storedUpload){\n  cancel(storedUpload.getAccountName(),storedUpload.getRemotePath());\n}\n", "nl": "Cancels a pending or current upload that was persisted.", "id": "32007"}
{"code": "public final void yybegin(int newState){\n  zzLexicalState=newState;\n}\n", "nl": "Enters a new lexical state", "id": "37353"}
{"code": "public void deleteLegionMember(int playerObjId){\n  legionMembers.remove(new Integer(playerObjId));\n}\n", "nl": "Delete a legionMember from the legionMembers list", "id": "46934"}
{"code": "public Value newFunction(String functionName,Class<?> resultType,Value... args){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return a value representing the given datastore function with the given arguments.", "id": "7069"}
{"code": "public PhotosCreateAlbumQuery commentsDisabled(Boolean value){\n  return unsafeParam(\"comments_disabled\",value);\n}\n", "nl": "Set comments disabled", "id": "26386"}
{"code": "public void or(Criteria criteria){\n  oredCriteria.add(criteria);\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.hints", "id": "40430"}
{"code": "public ResourcesPoet addId(String id){\n  Element bool=document.createElement(\"item\");\n  bool.setAttribute(\"name\",id);\n  bool.setAttribute(\"type\",\"id\");\n  resourceElement.appendChild(bool);\n  return this;\n}\n", "nl": "Add an id to the config", "id": "56934"}
{"code": "public static BigInteger factorial(int value){\n  if (value == 1)   return BigInteger.valueOf(1);\n else   return BigInteger.valueOf(value).multiply(factorial(value - 1));\n}\n", "nl": "Calculates factorial of given value.", "id": "29347"}
{"code": "public void reset(){\n  resetStatus();\n}\n", "nl": "call it when you want to reset all;", "id": "55569"}
{"code": "@Override protected int sizeOf(String key,BitmapDrawable value){\n  final int bitmapSize=getBitmapSize(value) / 1024;\n  return bitmapSize == 0 ? 1 : bitmapSize;\n}\n", "nl": "Measure item size in kilobytes rather than units which is more practical for a bitmap cache", "id": "12808"}
{"code": "public SpecialInvokeExpr newSpecialInvokeExpr(Local base,SootMethodRef method,Value... args){\n  return newSpecialInvokeExpr(base,method,Arrays.asList(args));\n}\n", "nl": "Constructs a NewSpecialInvokeExpr(Local base, SootMethodRef method, List of Immediate) grammar chunk.", "id": "1155"}
{"code": "@Override public void startAttlist(String elementName,Augmentations augs) throws XNIException {\n}\n", "nl": "The start of an attribute list.", "id": "24743"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonTrap_A_TO_B(String skillcaster,String value0,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201039,skillcaster,value0,skilltarget,skillname);\n}\n", "nl": "[%SkillCaster] has summoned %0 to [%SkillTarget] by using [%SkillName].", "id": "39085"}
{"code": "public static Histogram projectHistogram(Histogram hist,Set<String> fldNames){\n  Histogram pjtHist=new Histogram(fldNames);\n  for (  String fld : fldNames)   pjtHist.setBuckets(fld,hist.buckets(fld));\n  return pjtHist;\n}\n", "nl": "Returns a histogram that approximates the join frequency distribution of the projected values from the specified histograms onto the specified fields.", "id": "24028"}
{"code": "public ChangeModifiers add(ChangeModifiers modifiers){\n  return createIfNeeded(super.add(modifiers));\n}\n", "nl": "Creates a new modifiers instance which is a union of the specified modifiers and this instance.", "id": "49118"}
{"code": "public void end(){\n  if (!hasStarted)   throw new RuntimeException(\"timer \" + name + \" has not been started!\");\n  hasStarted=false;\n  duration+=nanoTime() - startTime;\n  if (!G.v().Timer_isGarbageCollecting) {\n    G.v().Timer_outstandingTimers.remove(this);\n  }\n}\n", "nl": "Stops the current timer.", "id": "25066"}
{"code": "public void addTypeArgument(Access node){\n  List<Access> list=(parent == null || state == null) ? getTypeArgumentListNoTransform() : getTypeArgumentList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the TypeArgument list.", "id": "28246"}
{"code": "static <T>ForNext forComp(AnyVal<T> any,LongStream stream){\n  return new ForImpl(any,null);\n}\n", "nl": "Start a For comprehension for the given collection. Each iterated item will be stored in the given any value", "id": "28346"}
{"code": "public static float readFloat(DataInputStream dis,boolean isBigEndian) throws IOException {\n  float val;\n  if (!isBigEndian) {\n    val=readLittleEndianFloat(dis);\n  }\n else {\n    val=dis.readFloat();\n  }\n  return val;\n}\n", "nl": "Read a float from the input stream, byte-swapping as necessary", "id": "25996"}
{"code": "public Bundler putSerializable(String key,Serializable value){\n  bundle.putSerializable(key,value);\n  return this;\n}\n", "nl": "Inserts a Serializable value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.", "id": "18677"}
{"code": "public boolean moveStream(final String streamName){\n  try {\n    doMoveStream(streamName);\n    return true;\n  }\n catch (  Exception e) {\n    return false;\n  }\n}\n", "nl": "Move given stream <i>streamName</i>", "id": "20058"}
{"code": "@Override public void undo(Transaction tx){\n}\n", "nl": "Does nothing, because a start record contains no undo information.", "id": "10242"}
{"code": "public void removeOption(int inOptNum){\n  if (this.optionsList == null) {\n    initialize();\n  }\n  this.optionsList.removeOption((byte)inOptNum);\n}\n", "nl": "Removes the specified DHCP option that matches the input code.", "id": "55579"}
{"code": "@Override public void onMapLongClick(@NonNull LatLng point){\n  AirMap.createFlight(this,REQUEST_FLIGHT,getCoordinateFromLatLng(point),null);\n}\n", "nl": "Called when the map is long clicked", "id": "25876"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonSkillArea_ME_TO_B(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201148,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] uses [%SkillName].", "id": "26096"}
{"code": "public static <T>PollableFutureTask<T> create(final PollableTask pollableTask,final ProceedingJoinPoint pjp){\n  PollableCallable pollableCallable=new PollableCallable(pollableTask,pjp);\n  PollableFutureTask pollableFutureTask=new PollableFutureTask(pollableCallable,pollableTask);\n  pollableCallable.setPollableFutureTask(pollableFutureTask);\n  return pollableFutureTask;\n}\n", "nl": "Creates an instance.", "id": "36507"}
{"code": "public static String readFileToString(File file) throws IOException {\n  return readFileToString(file,Charset.defaultCharset());\n}\n", "nl": "Reads the contents of a file into a String using the default encoding for the VM. The file is always closed.", "id": "16606"}
{"code": "public boolean toggleAlwaysTranslateLanguageState(boolean value){\n  if (mOptions[NEVER_LANGUAGE] && value) {\n    return false;\n  }\n  return toggleState(ALWAYS_LANGUAGE,value);\n}\n", "nl": "Sets the new state of never translate a language pair.", "id": "20955"}
{"code": "private final float mapF0(float val,float mean,float stddev){\n  return ((((val - modelMean) / modelStddev) * stddev) + mean);\n}\n", "nl": "Maps the given value to the curve.", "id": "43191"}
{"code": "@Override public ResultSet map(ResultSet resultSet){\n  Pagination<Result> pages=new AllPagesPagination<>(resultSet,paginationParameters);\n  AbstractResponse.addLinks(pages,uriBuilder,responseProcessor);\n  return new ResultSet(pages.getPageOfData(),map(resultSet.getSchema()));\n}\n", "nl": "Cuts the result set down to just the page requested.", "id": "30370"}
{"code": "public void firstPage(){\n  goToPage(getRowCount(),1);\n}\n", "nl": "Go to the first page.", "id": "30775"}
{"code": "public static Map<String,Object> findOrdersInternal(DispatchContext dctx,Map<String,? extends Object> context){\n  return findOrders(dctx,context,false);\n}\n", "nl": "SCIPIO: stock findOrders service with additions for internal calls.", "id": "885"}
{"code": "public Builder addColumnFloat(String name){\n  return addColumn(new FloatMetaData(name));\n}\n", "nl": "Add a Double column with no restrictions on the allowable values, except for no NaN/infinite values allowed", "id": "29786"}
{"code": "public MyDialog outInterpolator(Interpolator interpolator){\n  mOutInterpolator=interpolator;\n  return this;\n}\n", "nl": "Set the interpolator of out animation.", "id": "19386"}
{"code": "public FriendsGetQueryWithFields userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "User ID. By default, the current user ID.", "id": "26008"}
{"code": "public ResourceId parseResourceId(int resourceId){\n  return new ResourceId((resourceId & 0xFF000000) >> 24,(resourceId & 0x00FF0000) >> 16,resourceId & 0x0000FFFF);\n}\n", "nl": "Parses an Android resource ID into its components", "id": "46220"}
{"code": "protected boolean isValidLine(String line){\n  return true;\n}\n", "nl": "Overridable method to validate each line that is returned. This implementation always returns true.", "id": "43662"}
{"code": "public boolean isEncrypted(){\n  return _isEncrypted;\n}\n", "nl": "Check is encrypted.", "id": "14776"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set show-reference=\" + !isSelected() + \";\");\n}\n", "nl": "action to be performed", "id": "3387"}
{"code": "public static int gray(int v){\n  return rgba(v,v,v,255);\n}\n", "nl": "Get the color code for the given grayscale value.", "id": "43458"}
{"code": "public RequestHandle put(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){\n  return put(context,url,paramsToEntity(params,responseHandler),null,responseHandler);\n}\n", "nl": "Perform a HTTP PUT request and track the Android Context which initiated the request.", "id": "57007"}
{"code": "public static void d(String tag,String msg){\n  if (sLevel > LEVEL_DEBUG) {\n    return;\n  }\n  Log.d(tag,msg);\n}\n", "nl": "Send a DEBUG log message", "id": "19352"}
{"code": "private void deleteEntry(final SQLiteDatabase database,final String stringId){\n  database.delete(SongPlayCountColumns.NAME,WHERE_ID_EQUALS,new String[]{stringId});\n}\n", "nl": "Deletes the entry", "id": "17531"}
{"code": "private int klattRule8(Element segment){\n  Element syllable=getSyllable(segment);\n  if (hasAccent(syllable)) {\n    if (isInNucleus(segment)) {\n      return getPropertyAsInteger(\"rule8.accent\");\n    }\n  }\n  return 100;\n}\n", "nl": "Klatt Rule 8: Lengthening for emphasis", "id": "24070"}
{"code": "public MessagesMarkAsReadQuery startMessageId(Integer value){\n  return unsafeParam(\"start_message_id\",value);\n}\n", "nl": "Set start message id", "id": "33117"}
{"code": "public static Bitmap drawableToBitmap(Drawable drawable){\n  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();\n}\n", "nl": "convert Drawable to Bitmap", "id": "35605"}
{"code": "@Override public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {\n  return;\n}\n", "nl": "The SAX <code>ignorableWhitespace</code> method does nothing.", "id": "47236"}
{"code": "public static Tuple max(TupleSet tuples,String field){\n  return max(tuples,field,DefaultLiteralComparator.getInstance());\n}\n", "nl": "Get the Tuple with the maximum data field value.", "id": "37141"}
{"code": "public static <E>E justNot(E v,E not){\n  return v;\n}\n", "nl": "Just returns the first value. The intended usage is for temporarily using the first value, with the second value being what should be used on release.", "id": "43586"}
{"code": "protected void scheduleEdgeProcessing(PathEdge<N,D> edge){\n  if (executor.isTerminating())   return;\n  executor.execute(new PathEdgeProcessingTask(edge));\n  propagationCount++;\n}\n", "nl": "Dispatch the processing of a given edge. It may be executed in a different thread.", "id": "7482"}
{"code": "@Override public SketchSetOperationPostAggregation withFields(List<PostAggregation> fields){\n  return new SketchSetOperationPostAggregation(getName(),getFunc(),fields,getSize());\n}\n", "nl": "Get a new instance of this PostAggregation with the given fields.", "id": "2656"}
{"code": "public void exception(Throwable t){\n  fail();\n  addLogEntry(new ExceptionEntry(t));\n  addLogEntry(browserLogEntryCollector.getBrowserLogEntries());\n}\n", "nl": "Adds an exception entry and marks the test as failed.", "id": "18233"}
{"code": "public static PrivateKey loadPrivateKeyFromPemFile(final String keyFile) throws IOException, InvalidKeySpecException, NoSuchAlgorithmException {\n  final PKCS8EncodedKeySpec privateKeySpec=new PKCS8EncodedKeySpec(loadPemFileAsBytes(keyFile));\n  final PrivateKey privateKey=KeyFactory.getInstance(ALGORITHM).generatePrivate(privateKeySpec);\n  return privateKey;\n}\n", "nl": "Loads a private key from the specified location.", "id": "31540"}
{"code": "public static Element firstChildElement(Element element,String... childElementNames){\n  return firstChildElement(element,UtilMisc.toSetArray(childElementNames));\n}\n", "nl": "Return the first child Element returns the first element.", "id": "39522"}
{"code": "public void inc(Collection<KeyType> container,long delta){\n  for (  KeyType key : container) {\n    inc(key,delta);\n  }\n}\n", "nl": "Increase delta for each element in container.", "id": "25412"}
{"code": "public static List<DimensionalItemObject> asList(Collection<? extends DimensionalItemObject> collection){\n  List<DimensionalItemObject> list=new ArrayList<>();\n  list.addAll(collection);\n  return list;\n}\n", "nl": "Returns a list with erasure DimensionalItemObject based on the given collection.", "id": "39951"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MoveBehindATK_ME_TO_SELF(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200379,num0,skillname);\n}\n", "nl": "You received %num0 damage due to [%SkillName].", "id": "9340"}
{"code": "public boolean rightAllowed(){\n  return (myFlags & RIGHT_EDGE) != 0;\n}\n", "nl": "Returns true if this policy allows resizing the right edge", "id": "40803"}
{"code": "public VideoReportQuery comment(String value){\n  return unsafeParam(\"comment\",value);\n}\n", "nl": "Comment describing the complaint.", "id": "15451"}
{"code": "public void flush() throws Exception {\n  if (filterInfo == null)   return;\n  filterInfo.usersInfo=m_userPrincipal.values().toArray(new GenericPrincipal[m_userPrincipal.size()]);\n  filterInfo.userDefinedRoles=m_userDefinedRoles.values().toArray(new UserDefinedRole[m_userDefinedRoles.size()]);\n  flush(filterInfo);\n}\n", "nl": "Creates an encrypted data file, that used by <code>com.j_spaces.core.filters.MemoryRealm</code>, it contains space user details and user defined roles.", "id": "57824"}
{"code": "public void selectToken(ClipboardToken token){\n  selectedToken=token;\n  updateClipboardDescription();\n}\n", "nl": "Select a token to show its description.", "id": "21660"}
{"code": "public ReplicateLaterWindow fillTime(String time){\n  timeField.sendKeys(time);\n  return this;\n}\n", "nl": "Puts time in time field", "id": "11523"}
{"code": "public static byte[] toByteArray(URI uri) throws IOException {\n  return IOUtils.toByteArray(uri.toURL());\n}\n", "nl": "Get the contents of a <code>URI</code> as a <code>byte[]</code>.", "id": "25110"}
{"code": "public String delVar(String variable){\n  return delVar(namespace,variable);\n}\n", "nl": "Delete the value for a variable in the current namespace.", "id": "7913"}
{"code": "public boolean canSet(Class type){\n  if (type == null)   return false;\n  if (Number.class.isAssignableFrom(type) || String.class.isAssignableFrom(type)) {\n    return true;\n  }\n else {\n    return m_columnType.isAssignableFrom(type);\n  }\n}\n", "nl": "Indicates if the set method can be called without an exception being thrown for the given type.", "id": "55877"}
{"code": "public static boolean isBackgroundAttribute(String text){\n  return BACKGROUND_ATTRIBUTES.contains(text);\n}\n", "nl": "Indicates whether the attribute represents a background color The attribute needs to be in the contrast map", "id": "12862"}
{"code": "public static int myUserId(){\n  return getUserId(VClientImpl.getClient().getVUid());\n}\n", "nl": "Returns the user id of the current process", "id": "47268"}
{"code": "public FieldVector3D<T> subtract(final double factor,final FieldVector3D<T> v){\n  return new FieldVector3D<T>(1.0,this,-factor,v);\n}\n", "nl": "Subtract a scaled vector from the instance.", "id": "45040"}
{"code": "public static final String repeatString(String sStr,int iTimes){\n  StringBuffer sb=new StringBuffer();\n  for (int iCnt=0; iCnt < iTimes; iCnt++)   sb.append(sStr);\n  return sb.toString();\n}\n", "nl": "Repeats a given string a specified number of times.", "id": "8860"}
{"code": "public boolean DeleteNode(int nodeId){\nsynchronized (stream) {\n    File file=new File(this.folderName,String.format(\"node%d.xml\",nodeId));\n    return file.delete();\n  }\n}\n", "nl": "Deletes the persistence store for the specified node.", "id": "58340"}
{"code": "public HumanTime d(){\n  return d(1);\n}\n", "nl": "Adds one day to the time delta.", "id": "53214"}
{"code": "public boolean isApplicable(){\n  try {\n    return getViewer().isPCoATab() && getViewer().getPcoaTab().getPCoA().getEigenValues() != null;\n  }\n catch (  Exception ex) {\n    return false;\n  }\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "42908"}
{"code": "protected MetricsFilterSetBuilder initializeMetricsFilterSetBuilder(){\n  return new FilteredSketchMetricsHelper();\n}\n", "nl": "Initialize the FilteredMetricsHelper. By default it is FilteredSketchMetricsHelper", "id": "48127"}
{"code": "@Nullable public WorkspacePath workspacePathForSafe(File absoluteFile){\n  if (isInWorkspace(absoluteFile)) {\n    return workspacePathFor(absoluteFile);\n  }\n  return null;\n}\n", "nl": "Returns the WorkspacePath for the given absolute file, if it's a child of this WorkspaceRoot. Otherwise returns null.", "id": "41925"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_SUMMON_CANT_ORDER_BY_INVALID_STANCE(String value0){\n  return new SM_SYSTEM_MESSAGE(1400087,value0);\n}\n", "nl": "You cannot issue commands in %0.", "id": "21743"}
{"code": "public boolean isValidMethod(SootMethod sm){\n  if (validMethods != null) {\n    String sig=sm.toString();\n    if (!validMethods.containsKey(sig))     return false;\n    validMethods.put(sig,Boolean.TRUE);\n  }\n  return true;\n}\n", "nl": "Telling if the given method is in the file given by the option \"cg.spark geom-verify-name\".", "id": "28567"}
{"code": "final public void redirect(String url){\n  resp.setHeader(\"Location\",url);\n  setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);\n}\n", "nl": "response and redirect to the url", "id": "10805"}
{"code": "public boolean isLocalConfiguration(){\n  return localConfiguration;\n}\n", "nl": "Returns if this process configuration is local or retrieved from the server.", "id": "20161"}
{"code": "public static String imageToString(Image image,String format){\n  byte[] imageBytes=imageToBytes(image,format);\n  return imageBytes != null ? Base64.byteArrayToBase64(imageBytes) : null;\n}\n", "nl": "Encodes given image to String using the Base64 encoding. This is primarily intended to store small images (icons) in text (properties) files, no compression algorithms are used.", "id": "37041"}
{"code": "public void applyInlineRightHalf(double[] data,int off,int len){\n  Window w=Window.get(windowType,2 * len,prescale);\n  w.apply(data,off,data,off,len,len);\n}\n", "nl": "apply the right half of a window of the specified type to the data. The right half will be as long as the given len.", "id": "52081"}
{"code": "public Author withDefaults(){\n  setCivility(Civility.MR);\n  return this;\n}\n", "nl": "Apply the default values.", "id": "41869"}
{"code": "public void resetAxisMinValue(){\n  mCustomAxisMin=false;\n}\n", "nl": "By calling this method, any custom minimum value that has been previously set is reseted, and the calculation is done automatically.", "id": "51179"}
{"code": "public void java_lang_Runtime_execInternal(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  helper.assignObjectTo(returnVar,Environment.v().getProcessObject());\n}\n", "nl": "execInternal is called by all exec method. It return a Process object. NOTE: creates a Process object. private native  java.lang.Process execInternal(java.lang.String[],  java.lang.String[],  java.lang.String)  throws java.io.IOException;", "id": "11881"}
{"code": "public boolean isGameRunning(){\n  return isGameRunning;\n}\n", "nl": "get the state about game Running Boolean", "id": "40202"}
{"code": "public static void main(String[] args){\n  Distribution dDist=new Distribution();\n  dDist.setValue(1,0.9);\n  dDist.setValue(2,0.1);\n  System.out.println(\"Entropy: \" + entropy(dDist));\n}\n", "nl": "Test function. Not to be used.", "id": "38025"}
{"code": "@Override public int hashCode(){\n  return this.getColumnSchema().getColumnUniqueId().hashCode();\n}\n", "nl": "hash code", "id": "52959"}
{"code": "public MarketRemoveFromAlbumQuery removeFromAlbum(UserActor actor,int ownerId,int itemId,int... albumIds){\n  return new MarketRemoveFromAlbumQuery(getClient(),actor,ownerId,itemId,albumIds);\n}\n", "nl": "Removes an item from one or multiple collections", "id": "9638"}
{"code": "static public int encode_vX_vY(float vx,float vy){\n  float[] arc_mag=getArc(vx,vy);\n  int argb=encode_vA_vM(arc_mag[0],arc_mag[1]);\n  return argb;\n}\n", "nl": "encodes an unnormalized 2D-vector as an unsigned 32 bit integer.<br> <br> 0xMMMMAAAA (16 bit arc, 16 bit magnitude<br>", "id": "45683"}
{"code": "public DatabaseGetUniversitiesQuery cityId(Integer value){\n  return unsafeParam(\"city_id\",value);\n}\n", "nl": "City ID.", "id": "50418"}
{"code": "private void updateRingColor(float interpolatedTime,Ring ring){\n  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {\n    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));\n  }\n}\n", "nl": "Update the ring color if this is within the last 25% of the animation. The new ring color will be a translation from the starting ring color to the next color.", "id": "26516"}
{"code": "public static ProbeItemDescriptor discreteLineItem(String name,String description,ItemValueFormatter formatter){\n  return discreteOutlineItem(name,description,formatter,1d,0,MAX_VALUE_UNDEFINED,DEFAULT_LINE_WIDTH,DEFAULT_COLOR,null);\n}\n", "nl": "Creates descriptor for a discrete item created by line segments representing the outline.", "id": "22079"}
{"code": "public Builder withShowErrors(boolean showErrors){\n  myShowErrors=showErrors;\n  return this;\n}\n", "nl": "Display user errors found. And in a dry run display warnings. Default: false", "id": "52921"}
{"code": "public FactorialLog withCache(final int cacheSize){\n  return new FactorialLog(cacheSize,LOG_FACTORIALS);\n}\n", "nl": "Creates an instance with the specified cache size.", "id": "37495"}
{"code": "public static Bitmap normalize(Context context,Uri selectedImage,int maxWidth,int maxHeight){\n  Bitmap bm;\n  bm=getImageResized(context,selectedImage,maxWidth,maxHeight);\n  bm=getImageRotatedByMetadata(context,bm,selectedImage);\n  return bm;\n}\n", "nl": "Normalize a bitmap to specific size", "id": "55337"}
{"code": "public Builder maxZoom(Number maxZoom){\n  this.maxZoom=maxZoom;\n  return this;\n}\n", "nl": "The maximum zoom for automatic view setting when using `setView` option. </br> default infinity", "id": "40220"}
{"code": "@Override public MapStack<K> standAloneChildStack(){\n  MapStack<K> standAloneChild=MapStack.create(this);\n  standAloneChild.push();\n  return standAloneChild;\n}\n", "nl": "Creates a MapStack object that has the same Map objects on its stack, but with a new Map pushed on the top; meant to be used to enable a situation where a parent and child context are operating simultaneously using two different MapStack objects, but sharing the Maps in common", "id": "16385"}
{"code": "@Override public boolean accept(File file){\n  if (file.isDirectory()) {\n    return false;\n  }\n  for (  String wildcard : wildcards) {\n    if (FilenameUtils.wildcardMatch(file.getName(),wildcard)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks to see if the filename matches one of the wildcards.", "id": "31520"}
{"code": "public static void v(String tag,String msg){\n  if (LOG_ENABLE) {\n    Log.v(tag,buildMsg(msg));\n  }\n}\n", "nl": "verbose log", "id": "1999"}
{"code": "public boolean prev(){\n  return seek(MDB_PREV);\n}\n", "nl": "Position at previous data item.", "id": "53583"}
{"code": "private void handleSelection(String selection,SelectionType type){\n  mShouldHandleSelectionModification=true;\n  mHandler.handleSelection(selection,isValidSelection(selection),type,mX,mY);\n}\n", "nl": "Re-enables selection modification handling and invokes ContextualSearchSelectionHandler.handleSelection().", "id": "45444"}
{"code": "static void scheduleAfter(Activity before,Activity after){\n  getInstance()._scheduleAfter(before,after);\n}\n", "nl": "Schedules an Activity to start immediately after another Activity. The second Activity will be scheduled to start immediately after the first one finishes, overwriting any previously set startTime. If the first Activity is cancelled, the second one will not run. This functionality is provided by using an ActivityListener to monitor the first Activity. The listener is removed upon completion or cancellation of the first Activity. This method does not effect the scheduling of the first Activity.", "id": "27249"}
{"code": "public boolean isUploading(Account account,OCFile file){\n  if (account == null || file == null)   return false;\n  return (mPendingUploads.contains(account.name,file.getRemotePath()));\n}\n", "nl": "Returns True when the file described by 'file' is being uploaded to the ownCloud account 'account' or waiting for it If 'file' is a directory, returns 'true' if some of its descendant files is uploading or waiting to upload. Warning: If remote file exists and !forceOverwrite the original file is being returned here. That is, it seems as if the original file is being updated when actually a new file is being uploaded.", "id": "27287"}
{"code": "private static AsyncHttpClient initializeWebClient(int requestTimeout){\n  LOG.debug(\"Druid request timeout: {}ms\",requestTimeout);\n  AsyncHttpClientConfig config=new DefaultAsyncHttpClientConfig.Builder().setRequestTimeout(requestTimeout).setConnectionTtl(requestTimeout).setPooledConnectionIdleTimeout(requestTimeout).build();\n  return new DefaultAsyncHttpClient(config);\n}\n", "nl": "Initialize the client config.", "id": "6712"}
{"code": "public Matrix refresh(Matrix newMatrix,View chart,boolean invalidate){\n  mMatrixTouch.set(newMatrix);\n  limitTransAndScale(mMatrixTouch,mContentRect);\n  if (invalidate)   chart.invalidate();\n  newMatrix.set(mMatrixTouch);\n  return newMatrix;\n}\n", "nl": "call this method to refresh the graph with a given matrix", "id": "16090"}
{"code": "@Override public boolean autoAddZero(){\n  return false;\n}\n", "nl": "performance improvement: since we start directly at the sources, we do not  need to generate additional taints unconditionally", "id": "39597"}
{"code": "public AggregationSet minEntry(String path){\n  return add(new MinEntryAggregator().setPath(path));\n}\n", "nl": "Returns entry with minimum value of path of matching entries.", "id": "50288"}
{"code": "@Override public int increaseFp(TYPE type,int value){\n  return this.increaseFp(type,value,0,LOG.REGULAR);\n}\n", "nl": "This method is called whenever caller wants to restore creatures's FP", "id": "3984"}
{"code": "public boolean isIdColumn(){\n  return \"_id\".equalsIgnoreCase(columnName) || \"id\".equalsIgnoreCase(columnName);\n}\n", "nl": "Judge current ColumnModel is id column or not.", "id": "34891"}
{"code": "public void storeOriginals(){\n  mStartingStartTrim=mStartTrim;\n  mStartingEndTrim=mEndTrim;\n  mStartingRotation=mRotation;\n}\n", "nl": "If the start / end trim are offset to begin with, store them so that animation starts from that offset.", "id": "3016"}
{"code": "public void cleanResult(){\n  consG.clear();\n  pointers.clear();\n  allocations.clear();\n  constraints.clear();\n  func2int.clear();\n  int2func.clear();\n  edgeMapping.clear();\n  hasTransformed=false;\n  hasExecuted=false;\n  System.gc();\n  System.gc();\n  System.gc();\n  System.gc();\n}\n", "nl": "We thoroughly delete the geometric points-to result for space saving. Some applications such as those needing the call graph only may want to clean the points-to result.", "id": "1342"}
{"code": "public static IntellijLintClient forBatch(@NotNull Project project,@NotNull Map<Issue,Map<File,List<ProblemData>>> problemMap,@NotNull AnalysisScope scope,@NotNull List<Issue> issues){\n  return new BatchLintClient(project,problemMap,scope,issues);\n}\n", "nl": "Creates a lint client for batch inspections", "id": "36326"}
{"code": "@Deprecated public void clearDiscCache(){\n  clearDiskCache();\n}\n", "nl": "Clears disk cache.", "id": "18465"}
{"code": "public Long generate(Class<?> clazz){\n  String idGeneratorKey=RedisKeys.keyOfIdGenerator(clazz);\n  return redis.opsForValue().increment(idGeneratorKey,1);\n}\n", "nl": "Generate id of the class", "id": "15054"}
{"code": "private void doPostConfigurationOfEquipmentControlTags(){\n  for (  Long key : getKeys()) {\n    doPostDbLoading(get(key));\n  }\n}\n", "nl": "Ensures that the Alive-, Status- and CommFault Tags have the Equipment id set.", "id": "45365"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_ABSORBED_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201086,skillcaster,skillname);\n}\n", "nl": "You absorbed [%SkillCaster]'s [%SkillName].", "id": "24140"}
{"code": "@Override public final void writePos(final Point s){\n  writeShort(s.x);\n  writeShort(s.y);\n}\n", "nl": "Writes a 2D 4 byte position information", "id": "51776"}
{"code": "public float computeAlignmentBitScore(int rawScore){\n  return (float)((lambda * rawScore - lnK) / LN_2);\n}\n", "nl": "compute the bit score from a raw score", "id": "51626"}
{"code": "public static void showCreateAircraft(Fragment fragment,int requestCode){\n  Intent intent=new Intent(fragment.getActivity(),CreateEditAircraftActivity.class);\n  fragment.startActivityForResult(intent,requestCode);\n}\n", "nl": "Display UI to create an aircraft. Use this if you want the the result of the activity", "id": "27378"}
{"code": "public boolean isRunning(){\n  return running;\n}\n", "nl": "Checks if the Alive Timer is actually running and sending.", "id": "20911"}
{"code": "public static boolean isConnectedMobile(Context context){\n  NetworkInfo info=Connectivity.getNetworkInfo(context);\n  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_MOBILE);\n}\n", "nl": "Check if there is any connectivity to a mobile network", "id": "31908"}
{"code": "@Deprecated public ShapelessRecipe removeIngredient(Material ingredient,int rawdata){\n  return removeIngredient(1,ingredient,rawdata);\n}\n", "nl": "Removes an ingredient from the list. If the ingredient occurs multiple times, only one instance of it is removed. If the data value is -1, only ingredients with a -1 data value will be removed.", "id": "18189"}
{"code": "public static Builder builder(){\n  return new Builder();\n}\n", "nl": "The simplest way to create a ScanRangeSplits is by starting here with a builder.", "id": "12694"}
{"code": "public String print(String aClassName,String aFieldOrMtdSignature,Tag aTag){\n  return aTag.toString();\n}\n", "nl": "Prints out the given tag.", "id": "32767"}
{"code": "public static Boolean isDictionaryFile(CarbonFile carbonFile){\n  return (!carbonFile.isDirectory()) && (carbonFile.getName().endsWith(DICTIONARY_EXT));\n}\n", "nl": "whether carbonFile is dictionary file or not", "id": "11879"}
{"code": "private void ExitBtnActionPerformed(java.awt.event.ActionEvent evt){\n  if (JOptionPane.showConfirmDialog(this,\"Do you wish to end the application?\",\"Confirm\",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {\n    if (taskInProgress())     removeTask(getActiveTask());\n    this.setVisible(false);\n    this.dispose();\n  }\n}\n", "nl": "Terminates the application, stopping any running tasks.", "id": "313"}
{"code": "private boolean hasLeaked(LeakKey<N> leakKey){\n  return leakedSources.contains(leakKey);\n}\n", "nl": "Returns <code>true</code> if this solver has tried to leak an edge originating from the given source to its caller.", "id": "33853"}
{"code": "public void removeListener(CacheListener<K,V> listener){\n  listeners.remove(listener);\n}\n", "nl": "Removes an event listener for key removals", "id": "53465"}
{"code": "public void invalidate(){\n  if (conductorSet == null) {\n    return;\n  }\n  remove();\n}\n", "nl": "Call this function when the IChargeConductor is invalidated.", "id": "3288"}
{"code": "public static String defaultExtension(){\n  return ImageFileExtensionUtils.png;\n}\n", "nl": "Default extension.", "id": "54245"}
{"code": "public double averageArea(){\n  return averageArea(level);\n}\n", "nl": "Return the average area of cells at this level. This is accurate to within a factor of 1.7 (for S2_QUADRATIC_PROJECTION) and is extremely cheap to compute.", "id": "43312"}
{"code": "private boolean addViewItem(int index,boolean first){\n  View view=getItemView(index);\n  if (view != null) {\n    if (first) {\n      itemsLayout.addView(view,0);\n    }\n else {\n      itemsLayout.addView(view);\n    }\n    return true;\n  }\n  return false;\n}\n", "nl": "Adds view for item to items layout", "id": "43620"}
{"code": "public boolean hasColumn(String columnName){\n  Integer idx=columnNamesIndex.get(columnName);\n  return idx != null;\n}\n", "nl": "Determine if the schema has a column with the specified name", "id": "41694"}
{"code": "private boolean sendNotification(OMAInfo omaInfo,DownloadInfo downloadInfo,String statusMessage){\n  if (omaInfo == null)   return false;\n  if (omaInfo.isValueEmpty(OMA_INSTALL_NOTIFY_URI))   return false;\n  PostStatusTask task=new PostStatusTask(omaInfo,downloadInfo,statusMessage);\n  task.execute();\n  return true;\n}\n", "nl": "Sends the install notification to the server.", "id": "4840"}
{"code": "public AudioGetQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "ID of the user or community that owns the audio file. Use a negative value to designate a community ID.", "id": "23074"}
{"code": "public MessagesMarkAsReadQuery messageIds(List<Integer> value){\n  return unsafeParam(\"message_ids\",value);\n}\n", "nl": "IDs of messages to mark as read.", "id": "31979"}
{"code": "public void failPicture(String err){\n  this.callbackContext.error(err);\n}\n", "nl": "Send error message to JavaScript.", "id": "30093"}
{"code": "public static <X,Y>boolean containsSubclass(Set<? extends Class<? extends Y>> classes,X superclassInstance){\n  for (  Class<? extends Y> classs : classes)   if (classs.isInstance(superclassInstance))   return true;\n  return false;\n}\n", "nl": "Returns true if given set contains at least one subclass of provided instance.", "id": "18501"}
{"code": "public static Bundler of(Bundle b){\n  return new Bundler(b);\n}\n", "nl": "Constructs a Bundle containing a copy of the mappings from the given Bundle.", "id": "11657"}
{"code": "public JSONObject optJSONObject(String key){\n  Object object=this.opt(key);\n  return object instanceof JSONObject ? (JSONObject)object : null;\n}\n", "nl": "Get an optional JSONObject associated with a key. It returns null if there is no such key, or if its value is not a JSONObject.", "id": "28803"}
{"code": "public static RoutingService.Builder buildRoutingService(RoutingService routingService){\n  return new RoutingServiceProvider(routingService);\n}\n", "nl": "Build routing service builder of a routing service <code>routingService</code>.", "id": "26021"}
{"code": "public String name(){\n  return theName;\n}\n", "nl": "Returns the name of this element type.", "id": "22795"}
{"code": "@Override public void populateField(String value){\n  StyleBuilder styleBuilder=new StyleBuilder();\n  Font font=styleBuilder.createFont(defaultValue,DEFAULT_FONT_SIZE);\n  populateField(font);\n}\n", "nl": "Populate string field, overridden if necessary.", "id": "43472"}
{"code": "public int cardinality(){\n  int c=0;\n  for (  long v : bits) {\n    while (v != 0) {\n      v&=v - 1;\n      ++c;\n    }\n  }\n  return c;\n}\n", "nl": "Count the number of ones in the bitvector.", "id": "10593"}
{"code": "public void expressionChanged(Expression expr){\n  fireExpressionChange();\n}\n", "nl": "Relay an expression change event.", "id": "10365"}
{"code": "private void moveItemUp(){\n  moveItem(true);\n}\n", "nl": "Move item up.", "id": "9831"}
{"code": "private void inflateConnectedTextColor(){\n  if (mConnectedTextColor != R.color.connectivity_color) {\n    connectivityText.setTextColor(ColorUtil.getColorWrapper(mContext,mConnectedTextColor));\n  }\n}\n", "nl": "Set the connectivity text color when phone is connected", "id": "24155"}
{"code": "public final void ensureValid(JobTrigger trigger){\n  ensureNoErrors(validate(trigger));\n}\n", "nl": "Throws a RuntimeException if the provided JobTrigger is invalid.", "id": "34824"}
{"code": "public JSONWriter value(double d) throws JSONException {\n  return this.value(new Double(d));\n}\n", "nl": "Append a double value.", "id": "15781"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_INTERVAL_TO_ME(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201055,num0,skillname);\n}\n", "nl": "Your flight time decreased by %num0 due to the effect of [%SkillName].", "id": "30450"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_LIMIT_SALE_EPIC_SHOP_MATERIAL_DESC01(String value0){\n  return new SM_SYSTEM_MESSAGE(1400441,value0);\n}\n", "nl": "%0 is selling special materials for Master Crafting.", "id": "36346"}
{"code": "public void seek(long pos){\n}\n", "nl": "seek, not supported", "id": "1007"}
{"code": "@Override public void startExternalSubset(XMLResourceIdentifier identifier,Augmentations augmentations) throws XNIException {\n}\n", "nl": "The start of the external subset.", "id": "11435"}
{"code": "public void scroll(int itemsToScroll,int time){\n  int distance=itemsToScroll * getItemHeight() - scrollingOffset;\n  scroller.scroll(distance,time);\n}\n", "nl": "Scroll the wheel", "id": "57096"}
{"code": "private void finishLaunch(){\n  mCurrentRunnable=null;\n  if (mQueue.size() != 0) {\n    mCurrentRunnable=mQueue.remove(0);\n    mCurrentRunnable.launch();\n  }\n}\n", "nl": "Start up the next tab.", "id": "10937"}
{"code": "public ModelKeyMap findKeyMapByRelated(String relFieldName){\n  for (  ModelKeyMap keyMap : keyMaps) {\n    if (keyMap.getRelFieldName().equals(relFieldName))     return keyMap;\n  }\n  return null;\n}\n", "nl": "Find a KeyMap with the specified relFieldName", "id": "46439"}
{"code": "public final boolean equals(Object obj){\n  return super.equals(obj);\n}\n", "nl": "Finalizes the equals method", "id": "50146"}
{"code": "public void wipe(){\n  byte[] zeros=new byte[Page.pageSize];\n  this.writeBytes(0,Page.pageSize,zeros);\n}\n", "nl": "Completely wipe (zero out) the page.", "id": "51057"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_DODGED_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201102,skilltarget,skillname);\n}\n", "nl": "[%SkillTarget] evaded [%SkillName].", "id": "3884"}
{"code": "public static Response makeJobMetadataResponse(String jobMetadata){\n  return Response.status(Response.Status.ACCEPTED).entity(jobMetadata).header(HttpHeaders.CONTENT_TYPE,MediaType.APPLICATION_JSON + \"; charset=utf-8\").build();\n}\n", "nl": "Given a String containing the metadata of an asynchronous job, returns a Response with that metadata as payload.", "id": "49015"}
{"code": "public static float ceil(float fValue){\n  return (float)Math.ceil(fValue);\n}\n", "nl": "Rounds a fValue up. A call to Math.ceil", "id": "55984"}
{"code": "public boolean enabled(){\n  return soot.PhaseOptions.getBoolean(options,\"enabled\");\n}\n", "nl": "Enabled -- .", "id": "42377"}
{"code": "public static void closeQuietly(LineIterator iterator){\n  if (iterator != null) {\n    iterator.close();\n  }\n}\n", "nl": "Closes the iterator, handling null and ignoring exceptions.", "id": "42350"}
{"code": "private Response buildJSONResponse(Object o) throws JsonProcessingException {\n  return newFixedLengthResponse(MAPPER.writeValueAsString(o));\n}\n", "nl": "Helper method to serialize a POJO into JSON", "id": "21314"}
{"code": "public static int addEntryType(String name,int numArgs){\n  entryTypes.put(name,new Integer(nextEntry));\n  entryArgs.add(nextEntry,new Integer(numArgs));\n  nextEntry++;\n  return nextEntry - 1;\n}\n", "nl": "Adds a new catalog entry type.", "id": "56707"}
{"code": "public boolean acceptsParent(@NotNull NlComponent layout,@NotNull NlComponent newChild){\n  return true;\n}\n", "nl": "Returns whether the given component accepts the given parent layout as a potential container", "id": "58809"}
{"code": "@Override protected void onSaveState(Bundle outState){\n  super.onSaveState(outState);\n}\n", "nl": "Save Fragment's State here", "id": "11103"}
{"code": "public void onCameraClosed(CameraView cameraView){\n}\n", "nl": "Called when camera is closed.", "id": "36394"}
{"code": "public V put(K key,V value){\n  if (value == null)   throw new NullPointerException();\n  return doPut(key,value,false);\n}\n", "nl": "Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.", "id": "52376"}
{"code": "private void tryScrollBackToTopAbortRefresh(){\n  tryScrollBackToTop();\n}\n", "nl": "just make easier to understand", "id": "52769"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostHate_A_TO_SELF(String skillcaster,String value0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200796,skillcaster,value0,skillname);\n}\n", "nl": "[%SkillCaster] is in the enmity %0 state as it used [%SkillName].", "id": "10416"}
{"code": "public boolean isPersistent(){\n  return m_persist;\n}\n", "nl": "Indicates if the tooltip will stay persistent on the screen to support interaction within the tooltip component.", "id": "4495"}
{"code": "@Override public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {\n  allowXMLCatalogPI=false;\n  if (dtdHandler != null) {\n    dtdHandler.unparsedEntityDecl(name,publicId,systemId,notationName);\n  }\n}\n", "nl": "SAX DTDHandler API.", "id": "99"}
{"code": "public S2LatLng sub(final S2LatLng o){\n  return new S2LatLng(latRadians - o.latRadians,lngRadians - o.lngRadians);\n}\n", "nl": "Subtracts the given point from this point. Note that there is no guarantee that the new point will be <em>valid</em>.", "id": "28377"}
{"code": "public boolean taxApplies(){\n  GenericValue product=getProduct();\n  if (product != null) {\n    return ProductWorker.taxApplies(product);\n  }\n else {\n    return true;\n  }\n}\n", "nl": "Returns true if tax charges apply to this item.", "id": "26662"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATK_INTERVAL_TO_ME(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201153,num0,skillname);\n}\n", "nl": "You receive %num0 damage due to [%SkillName].", "id": "10068"}
{"code": "public static String encodeBytes(byte[] source){\n  String encoded=null;\n  try {\n    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);\n  }\n catch (  java.io.IOException ex) {\n    assert false : ex.getMessage();\n  }\n  assert encoded != null;\n  return encoded;\n}\n", "nl": "Encodes a byte array into Base64 notation. Does not GZip-compress data.", "id": "12142"}
{"code": "public Z Minus(Z a){\n  re=-a.re;\n  im=-a.im;\n  return this;\n}\n", "nl": "Computes unary minus of a Z.", "id": "40732"}
{"code": "public boolean isLog(){\n  return type == Type.LOG;\n}\n", "nl": "Returns <code>true</code> if the log entry is an actual log \"line\".", "id": "39759"}
{"code": "private void closeStreams(Closeable... streams){\n  if (null != streams) {\n    for (    Closeable stream : streams) {\n      if (null != stream) {\n        try {\n          stream.close();\n        }\n catch (        IOException e) {\n          LOG.error(\"Error while closing stream\" + stream);\n        }\n      }\n    }\n  }\n}\n", "nl": "This method closes the streams", "id": "58725"}
{"code": "public static void logResultsSeen(boolean wasPanelSeen,boolean wasTap){\n  RecordHistogram.recordEnumeratedHistogram(\"Search.ContextualSearchResultsSeen\",wasPanelSeen ? RESULTS_SEEN : RESULTS_NOT_SEEN,RESULTS_SEEN_BOUNDARY);\n  logHistogramByGesture(wasPanelSeen,wasTap,\"Search.ContextualSearchResultsSeenByGesture\");\n}\n", "nl": "Logs whether search results were seen. Logs multiple histograms; with and without the original triggering gesture.", "id": "57502"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapAvailablePermitQuestion && ((AirMapAvailablePermitQuestion)o).getId().equals(getId());\n}\n", "nl": "Comparison based on ID", "id": "30153"}
{"code": "public PhotosEditAlbumQuery editAlbum(UserActor actor,int albumId){\n  return new PhotosEditAlbumQuery(getClient(),actor,albumId);\n}\n", "nl": "Edits information about a photo album.", "id": "50525"}
{"code": "private static boolean isHex(char p_char){\n  return (p_char <= 'f' && (fgLookupTable[p_char] & ASCII_HEX_CHARACTERS) != 0);\n}\n", "nl": "Determine whether a character is a hexadecimal character.", "id": "39247"}
{"code": "public void reset(){\n  removeAllNotifications();\n  setWakeupTime(sleepTime);\n}\n", "nl": "Resets timer to start counting down from original time.", "id": "36710"}
{"code": "public String readString(){\n  int s=readInt();\n  if (s == 0) {\n    return null;\n  }\n  byte[] b=new byte[s];\n  System.arraycopy(data,offset,b,0,s);\n  offset+=s;\n  return new String(b);\n}\n", "nl": "Read string.", "id": "37754"}
{"code": "public static String removeNonNumeric(String str){\n  return removeRegex(str,\"[\\\\D]\");\n}\n", "nl": "Removes all non-numbers from str", "id": "12336"}
{"code": "public static ByteBuffer encode(String string) throws CharacterCodingException {\n  return encode(string,true);\n}\n", "nl": "Converts the provided String to bytes using the UTF-8 encoding. If the input is malformed, invalid chars are replaced by a default value.", "id": "29121"}
{"code": "@NonNull static String createUniqueFilename(String prefix){\n  String randomId=Long.toString(System.currentTimeMillis());\n  return String.format(Locale.US,FILE_NAME_TEMPLATE,prefix,randomId);\n}\n", "nl": "Create a unique file name starting with the prefix.", "id": "948"}
{"code": "public boolean delete(){\n  return deleteStrategy.deleteQuietly(new File(path));\n}\n", "nl": "Deletes the file associated with this tracker instance.", "id": "46429"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_INTERVAL_A_TO_ME(int num0,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200675,num0,skillcaster,skillname);\n}\n", "nl": "You recovered %num0 HP because [%SkillCaster] used [%SkillName] on you.", "id": "55805"}
{"code": "public boolean supportsDelete(){\n  return true;\n}\n", "nl": "Returns true if the snapshot can be deleted by the user from UI, false otherwise.", "id": "57428"}
{"code": "public static String nullToBlank(final String string){\n  return string == null ? BLANK : string;\n}\n", "nl": "when string is null return blank string", "id": "34760"}
{"code": "@Override public void fatalError(String domain,String key,XMLParseException ex) throws XNIException {\n  printError(\"Fatal Error\",ex);\n  throw ex;\n}\n", "nl": "Fatal error.", "id": "49198"}
{"code": "int distinctAdds(){\n  return (int)Math.min(_adds,_distinctAdds.cardinality());\n}\n", "nl": "Returns the estimated # of distinct records ever written to this segment.", "id": "34233"}
{"code": "private static int calculateTotalBytes(ByteBuffer[] byteBufferArr){\n  int total=0;\n  for (int index=0; index < byteBufferArr.length; index++) {\n    total+=byteBufferArr[index].capacity();\n  }\n  return total;\n}\n", "nl": "To calculate the total bytes in byte Buffer[].", "id": "11800"}
{"code": "public boolean canSet(String field,Class type){\n  Column c=getColumn(field);\n  return (c == null ? false : c.canSet(type));\n}\n", "nl": "Check if the <code>set</code> method for the given data field can accept values of a given target type.", "id": "55571"}
{"code": "private static byte[] bitmapToByte(Bitmap b){\n  if (b == null) {\n    return null;\n  }\n  ByteArrayOutputStream o=new ByteArrayOutputStream();\n  b.compress(Bitmap.CompressFormat.PNG,100,o);\n  return o.toByteArray();\n}\n", "nl": "convert Bitmap to byte array", "id": "7012"}
{"code": "public static <T>OperatorSemaphore<T> semaphoreLatest(Observable<Boolean> go){\n  return new OperatorSemaphore<>(go,true);\n}\n", "nl": "Returns an operator that delays onNext, onComplete and onError emissions until a True value received from a given observable. When the given observable emits False, the operator starts delaying emissions again. <p/> This variant drops older not emitted value if a new value has been received.", "id": "52911"}
{"code": "@Override public boolean isEmpty(){\n  return false;\n}\n", "nl": "Checks if is empty.", "id": "49031"}
{"code": "public static boolean isYear(String s){\n  if (isEmpty(s))   return defaultEmptyOK;\n  if (!isNonnegativeInteger(s))   return false;\n  return ((s.length() == 2) || (s.length() == 4));\n}\n", "nl": "isYear returns true if string s is a valid Year number.  Must be 2 or 4 digits only. For Year 2000 compliance, you are advised to use 4-digit year numbers everywhere.", "id": "30020"}
{"code": "public final boolean isEmpty(){\n  return s.isEmpty();\n}\n", "nl": "Returns true if this set contains no run-time objects.", "id": "15647"}
{"code": "@Override public void write(byte b[],int off,int len){\n  if (len == 0)   return;\n  ensureCapacity(len);\n  System.arraycopy(b,off,_buffer,_count,len);\n  _count+=len;\n}\n", "nl": "Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this byte array output stream.", "id": "4619"}
{"code": "public static DataStoreClientFactory forClusterAndHttpClient(String clusterName,Client client){\n  return new DataStoreClientFactory(clusterName,client);\n}\n", "nl": "Connects to the System of Record using the specified Jersey client.  If you're using Dropwizard, use this factory method and pass the Dropwizard-constructed Jersey client.", "id": "25744"}
{"code": "public void put(int b) throws IOException {\n  buffer.write(b);\n}\n", "nl": "Writes the specified byte to this buffered output stream.", "id": "4081"}
{"code": "public ParameterRef newParameterRef(Type paramType,int number){\n  return Jimple.v().newParameterRef(paramType,number);\n}\n", "nl": "Constructs a ParameterRef(SootMethod, int) grammar chunk.", "id": "52180"}
{"code": "protected AuthConfirmQuery clientId(int value){\n  return unsafeParam(\"client_id\",value);\n}\n", "nl": "Set client id", "id": "28049"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeboostHealAmount_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200347,skillname);\n}\n", "nl": "Your recovery amount changed after using [%SkillName].", "id": "2973"}
{"code": "public String toString(){\n  return (mbrolaVoice.toString() + \"Validator\");\n}\n", "nl": "Returns the name of this validator.", "id": "8919"}
{"code": "public static String readKeyValueLocalMachine(String keyPath,String valueName){\n  return readKeyValue(HKEY_LOCAL_MACHINE,keyPath,valueName);\n}\n", "nl": "Opens the specified key path and reads the specified value from the local machine settings.", "id": "8684"}
{"code": "boolean isDefaultIn(int configVersion){\n  return defaultVersionRange.contains(configVersion);\n}\n", "nl": "Returns true if the feature is enabled by default in the given config version.", "id": "36068"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().isShowBiPlot();\n}\n", "nl": "this is currently selected?", "id": "7659"}
{"code": "protected final Object clone(){\n  return this;\n}\n", "nl": "There is only intended to be a single instance of the NULL object, so the clone method returns itself.", "id": "53553"}
{"code": "public static void send(Activity activity,int requestCode,String... permissions){\n  with(activity).requestCode(requestCode).permission(permissions).send();\n}\n", "nl": "Request permissions in the activity.", "id": "49384"}
{"code": "public Speaker update(final Speaker speaker){\n  if (!this.speakers.keySet().contains(speaker.getId()))   throw new IllegalArgumentException(\"Speaker not found \" + speaker.getId());\n  return this.speakers.put(speaker.getId(),speaker);\n}\n", "nl": "Update a speaker if found", "id": "16407"}
{"code": "public static float reduceSinAngle(float radians){\n  radians%=TWO_PI;\n  if (Math.abs(radians) > PI) {\n    radians=radians - (TWO_PI);\n  }\n  if (Math.abs(radians) > HALF_PI) {\n    radians=PI - radians;\n  }\n  return radians;\n}\n", "nl": "Fast Trig functions for x86. This forces the trig functiosn to stay within the safe area on the x86 processor (-45 degrees to +45 degrees) The results may be very slightly off from what the Math and StrictMath trig functions give due to rounding in the angle reduction but it will be very very close. <p/> note: code from wiki posting on java.net by jeffpk", "id": "30707"}
{"code": "public void takeThreadDump(CoreDump coreDump,boolean openView){\n  threadDumpProvider.createThreadDump(coreDump,openView);\n}\n", "nl": "Takes thread dump from CoreDump.", "id": "10010"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "47489"}
{"code": "public String name(){\n  return theType.name();\n}\n", "nl": "Return the name of the element's type. Convenience method.", "id": "55173"}
{"code": "@Override protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  Mysplash.getInstance().addActivity(this);\n  setTheme();\n  LanguageUtils.setLanguage(this);\n  DisplayUtils.setWindowTop(this);\n  setContentView(R.layout.activity_photo);\n}\n", "nl": "<br> life cycle.", "id": "30760"}
{"code": "public JSONObject optJSONObject(int index){\n  Object o=this.opt(index);\n  return o instanceof JSONObject ? (JSONObject)o : null;\n}\n", "nl": "Get the optional JSONObject associated with an index. Null is returned if the key is not found, or null if the index has no value, or if the value is not a JSONObject.", "id": "12720"}
{"code": "@Override public void accept(TestValueVisitor visitor,FieldIdEnum fieldId){\n  visitor.setTestValue(fieldId,this.value);\n}\n", "nl": "Method to part of the visitor pattern.", "id": "42325"}
{"code": "public static boolean shouldShowRequestPermissionRationale(Activity activity,String... permissions){\n  for (  String permission : permissions) {\n    if (ActivityCompat.shouldShowRequestPermissionRationale(activity,permission)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks given permissions are needed to show rationale.", "id": "32617"}
{"code": "public boolean isRefreshing(){\n  return STATUS.isRefreshing(mStatus);\n}\n", "nl": "is current status refreshing", "id": "54008"}
{"code": "public static boolean unbookmark(String id){\n  if (isBookmarked(id)) {\n    Inquiry.get().deleteFrom(Constants.DATABASE_NAME,BookmarksDB.class).where(\"_id = ?\",id).run();\n    return true;\n  }\n else   bookmark(id);\n  return false;\n}\n", "nl": "Returns true if the item was unfavorited successfully.", "id": "21853"}
{"code": "public BpmResult login(final LoginData loginData){\nswitch (loginData.getLoginType()) {\ncase GOOGLE_AUTH:\n    if (loginData.isValidGoogleLogin()) {\n      return logOnGoogleAuth(loginData);\n    }\n  break;\ncase PTC:\nif (loginData.isValidPtcLogin()) {\n  return logOnPtc(loginData);\n}\nbreak;\ndefault :\n}\nreturn new BpmResult(\"Invalid Login Type\");\n}\n", "nl": "Login to Pokemon Go with the login data.", "id": "44361"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_NPC_CRITICAL(String value0,int num2,String value1){\n  return new SM_SYSTEM_MESSAGE(1260001,value0,num2,value1);\n}\n", "nl": "Critical Hit! %0 inflicted %num2 critical damage on %1.", "id": "18222"}
{"code": "public JsonObject add(String name,JsonValue value){\n  if (name == null) {\n    throw new NullPointerException(\"name is null\");\n  }\n  if (value == null) {\n    throw new NullPointerException(\"value is null\");\n  }\n  table.add(name,names.size());\n  names.add(name);\n  values.add(value);\n  return this;\n}\n", "nl": "Appends a new member to the end of this object, with the specified name and the specified JSON value. <p> This method <strong>does not prevent duplicate names</strong>. Calling this method with a name that already exists in the object will append another member with the same name. In order to replace existing members, use the method <code>set(name, value)</code> instead. However, <strong> <em>add</em> is much faster than <em>set</em></strong> (because it does not need to search for existing members). Therefore <em>add</em> should be preferred when constructing new objects. </p>", "id": "1567"}
{"code": "public String toString(){\n  return new String(b,0,i_end);\n}\n", "nl": "After a word has been stemmed, it can be retrieved by toString(), or a reference to the internal buffer can be retrieved by getResultBuffer and getResultLength (which is generally more efficient.)", "id": "50132"}
{"code": "public ClickHouseDataSource withConnectionsCleaning(int rate,TimeUnit timeUnit){\n  driver.scheduleConnectionsCleaning(rate,timeUnit);\n  return this;\n}\n", "nl": "Schedules connections cleaning at a rate. Turned off by default. See https://hc.apache.org/httpcomponents-client-4.5.x/tutorial/html/connmgmt.html#d5e418", "id": "26669"}
{"code": "public boolean hasOption(String option){\n  return commandLine.hasOption(option);\n}\n", "nl": "Determine if an option was provided by the user via the CLI", "id": "36330"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stun_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200900,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] became stunned because [%SkillCaster] used [%SkillName].", "id": "40974"}
{"code": "public static boolean isValidApiVersion(String apiVersion){\n  return SEMANTIC_VERSION_REGEX_PATTERN.matcher(apiVersion).matches();\n}\n", "nl": "Return true if apiVersion is a valid semantic version (http://semver.org). Otherwise, false.", "id": "21393"}
{"code": "@Override public void detach(AWSIotDevice device) throws AWSIotException {\n  super.detach(device);\n}\n", "nl": "Detach the given device from the client. Device and shadow synchronization will be stopped after the device is detached from the client.", "id": "11032"}
{"code": "public static boolean checkRootPermission(){\n  return execCommand(\"echo root\",true,false).result == 0;\n}\n", "nl": "check whether has root permission", "id": "58467"}
{"code": "public void init$Children(){\n  children=new ASTNode[3];\n  setChild(new List(),1);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "38764"}
{"code": "public double R2(){\n  return R2;\n}\n", "nl": "Returns the coefficient of determination <em>R</em><sup>2</sup>.", "id": "15338"}
{"code": "public void init$Children(){\n  children=new ASTNode[4];\n  setChild(new List(),1);\n  setChild(new List(),2);\n  setChild(new List(),3);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "15851"}
{"code": "public void cancel(){\n  if (mAnimator != null && mAnimator.isRunning()) {\n    mAnimator.cancel();\n  }\n  if (mTimer != null) {\n    mTimer.cancel();\n    mTimer.purge();\n    cleanupAnimation();\n  }\n}\n", "nl": "Cancels the particle system and all the animations. To stop emitting but animate until the end, use stopEmitting instead.", "id": "15892"}
{"code": "public static Style pink(){\n  final Style style=new Style();\n  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_PINK);\n  return style;\n}\n", "nl": "Default material pink transparent style for SuperToasts.", "id": "23979"}
{"code": "public ResourcesPoet addInteger(String name,String value){\n  Element bool=document.createElement(\"integer\");\n  bool.setAttribute(\"name\",name);\n  bool.appendChild(document.createTextNode(String.valueOf(value)));\n  resourceElement.appendChild(bool);\n  return this;\n}\n", "nl": "Add an integer to the config", "id": "44941"}
{"code": "public void clear(){\n  map.clear();\n}\n", "nl": "Removes all of the elements from this set.", "id": "46633"}
{"code": "public Builder delayBeforeLoading(int delayInMillis){\n  this.delayBeforeLoading=delayInMillis;\n  return this;\n}\n", "nl": "Sets delay time before starting loading task. Default - no delay.", "id": "58738"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_JOIN_NOTIFY_SELF(String value1,String value0){\n  return new SM_SYSTEM_MESSAGE(1300857,value1,value0);\n}\n", "nl": "You have joined the private channel %1 at Channel %0. Confirm if you selected the channel in the chatting tab option.", "id": "40420"}
{"code": "protected PsiFile createPsiFile(String filePath){\n  return getPsiFile(testFixture.getTempDirFixture().createFile(filePath));\n}\n", "nl": "Creates a file with the specified contents and file path in the test project", "id": "55990"}
{"code": "public Builder stringToCategorical(String columnName,List<String> stateNames){\n  return transform(new StringToCategoricalTransform(columnName,stateNames));\n}\n", "nl": "Convert the specified String column to a categorical column. The state names must be provided.", "id": "12706"}
{"code": "public static int green(int color){\n  return (color >> 8) & 0xFF;\n}\n", "nl": "Get the green component of the given color.", "id": "47778"}
{"code": "public boolean isEntryFromPartition(IEntryHolder entryHolder){\n  final Object routingValue=entryHolder.getRoutingValue();\n  if (routingValue == null)   return false;\n  if (!_clusterInfo.isPartitioned())   return true;\n  final int partitionId=PartitionedClusterUtils.getPartitionId(routingValue,_clusterInfo.getNumberOfPartitions());\n  return partitionId == _partitionId;\n}\n", "nl": "return true if entry belongs to the partition of the space, false if entry is not from space partition", "id": "43241"}
{"code": "private LogSeqNum currentLSN(){\n  return new LogSeqNum(currentBlk.number(),currentPos);\n}\n", "nl": "Returns the LSN of the most recent log record. As implemented, the LSN is the block number and the offset in the block where the record is stored.", "id": "43521"}
{"code": "public boolean isUniqueContentOnly(){\n  return uniqueContentOnly;\n}\n", "nl": "Sets the flag.", "id": "6019"}
{"code": "@Override public synchronized void publish(LogRecord record){\n  if (corruptedOutputStream) {\n    return;\n  }\n  if (sizeRollingPolicy.hasReachedLimit() || timeRollingPolicy.needsRollover()) {\n    configureOutputStream();\n  }\n  super.publish(record);\n  super.flush();\n}\n", "nl": "Applies the policies before writing to the stream; re-configures the stream if policy is triggered.", "id": "30343"}
{"code": "private void addCachedLegionMemberEx(LegionMemberEx legionMemberEx){\n  this.allCachedLegionMembers.addMemberEx(legionMemberEx);\n}\n", "nl": "This method will add a new legion member to the cache", "id": "38821"}
{"code": "public void addOverlappingView(View view,int index,ViewGroup.LayoutParams params){\n  mFrameLayoutOverlappingViewContainer.addView(view,index,params);\n  mOverlappingViewsMap.put(view.getId(),view);\n}\n", "nl": "Add overlapping view and place it into overlapping container", "id": "51427"}
{"code": "public GroupsSearchQuery search(UserActor actor,String q){\n  return new GroupsSearchQuery(getClient(),actor,q);\n}\n", "nl": "Searches for communities by substring.", "id": "52548"}
{"code": "public void removeOperationListener(OnRemoteOperationListener listener){\nsynchronized (mBoundListeners) {\n    mBoundListeners.remove(listener);\n  }\n}\n", "nl": "Removes a listener from the list of objects interested in the being reported about the end of operations.", "id": "38762"}
{"code": "private Transaction createTransaction() throws LeaseDeniedException, RemoteException, TransactionException {\n  ITransactionManagerProvider transactionManagerProvider=getTransactionManagerProvider();\n  return (TransactionFactory.create(transactionManagerProvider.getTransactionManager(),_config.getTransactionTimeout())).transaction;\n}\n", "nl": "Create new transaction using the local transaction manager", "id": "31057"}
{"code": "public Builder inertia(Boolean inertia){\n  this.inertia=inertia;\n  return this;\n}\n", "nl": "If enabled, panning of the map will have an inertia effect where the map builds momentum while dragging and continues moving in the same direction for some time. Feels especially nice on touch devices. default true", "id": "9941"}
{"code": "public void flip(int x,int y){\n  int offset=y * rowSize + (x / 32);\n  bits[offset]^=1 << (x & 0x1f);\n}\n", "nl": "<p>Flips the given bit.</p>", "id": "20947"}
{"code": "public static PictureAttributes createPictureAttributes(){\n  return new PictureAttributes();\n}\n", "nl": "Create picture attributes", "id": "24676"}
{"code": "public T walkInOptimizedOrder(final FieldVectorPreservingVisitor<T> visitor){\n  return walkInDefaultOrder(visitor);\n}\n", "nl": "Visits (but does not alter) all entries of this vector in optimized order. The order in which the entries are visited is selected so as to lead to the most efficient implementation; it might depend on the concrete implementation of this abstract class.", "id": "56387"}
{"code": "public synchronized void startPreview(){\n  Camera theCamera=camera;\n  if (theCamera != null && !previewing) {\n    theCamera.startPreview();\n    previewing=true;\n    autoFocusManager=new AutoFocusManager(context,camera);\n  }\n}\n", "nl": "Asks the camera hardware to begin drawing preview frames to the screen.", "id": "12120"}
{"code": "public boolean isAnnotated(){\n  return isSource || isSink || isNeitherNor;\n}\n", "nl": "Gets whether this method has been annotated as a source, sink or neither nor.", "id": "4421"}
{"code": "protected void handleEnd(Collection<T> results) throws IOException {\n}\n", "nl": "Overridable callback method invoked at the end of processing. <p> This implementation does nothing.", "id": "17369"}
{"code": "public void requestPreviewFrame(Handler handler,int message){\n  if (camera != null && previewing) {\n    previewCallback.setHandler(handler,message);\n    if (useOneShotPreviewCallback) {\n      camera.setOneShotPreviewCallback(previewCallback);\n    }\n else {\n      camera.setPreviewCallback(previewCallback);\n    }\n  }\n}\n", "nl": "A single preview frame will be returned to the handler supplied. The data will arrive as byte[] in the message.obj field, with width and height encoded as message.arg1 and message.arg2, respectively.", "id": "40854"}
{"code": "public boolean canOpenDataSource(DataSource dataSource){\n  return DataSourceViewsManager.sharedInstance().hasViewsFor(dataSource);\n}\n", "nl": "Returns true if there is at least one provider providing at least one view for given DataSource, false otherwise.", "id": "47861"}
{"code": "@Override public WebDriver window(String nameOrHandle){\n  return targetLocator.window(nameOrHandle);\n}\n", "nl": "See parent.", "id": "50688"}
{"code": "public synchronized void createTable(Schema s,String tableName) throws DatabaseException {\n  if (this.tableLookup.containsKey(tableName)) {\n    throw new DatabaseException(\"Table name already exists\");\n  }\n  this.tableLookup.put(tableName,new Table(s,tableName,this.fileDir));\n}\n", "nl": "Create a new table in this database.", "id": "9968"}
{"code": "public S2Cap complement(){\n  double cHeight=isFull() ? -1 : 2 - Math.max(height,0.0);\n  return S2Cap.fromAxisHeight(S2Point.neg(axis),cHeight);\n}\n", "nl": "Return the complement of the interior of the cap. A cap and its complement have the same boundary but do not share any interior points. The complement operator is not a bijection, since the complement of a singleton cap (containing a single point) is the same as the complement of an empty cap.", "id": "6724"}
{"code": "public List<List<Writable>> executeSequence(List<List<Writable>> inputSequence){\n  throw new UnsupportedOperationException(\"Not yet implemented\");\n}\n", "nl": "Execute the full sequence of transformations for a single time series (sequence). May return null if example is filtered", "id": "54672"}
{"code": "@Override public int hashCode(){\n  return 17 + (isZero() ? 0 : (sign << 8)) + (nans << 16)+ exp+ Arrays.hashCode(mant);\n}\n", "nl": "Gets a hashCode for the instance.", "id": "15064"}
{"code": "public void clearBasicAuth(){\n  this.httpClient.getCredentialsProvider().clear();\n}\n", "nl": "Removes set basic auth credentials", "id": "22646"}
{"code": "public static void clearCache(){\n  colorMap.clear();\n}\n", "nl": "Clear the Color object cache.", "id": "44119"}
{"code": "private static QueryTask buildAllRegistriesQuery(){\n  return buildRegistryQuery(null);\n}\n", "nl": "Create a query to return all RegistryState links", "id": "5068"}
{"code": "@Override public Group apply(String name){\n  return new Group(name,plugin);\n}\n", "nl": "Makes a new group object", "id": "37159"}
{"code": "public static void main(String[] args){\n  final ApprovalEventDTO approval=createTestApprovalEvent();\n  send(approval,ElasticsearchClient.APPROVE);\n}\n", "nl": "Java main to test creating events in elasticsearch.  Set the following ENV VARS to point to a local ES running in OpenShift PIPELINE_ELASTICSEARCH_HOST=elasticsearch.vagrant.f8 ELASTICSEARCH_SERVICE_PORT=80", "id": "54664"}
{"code": "protected void onEntityEvent(ActivitiEvent event){\n}\n", "nl": "Called when an event is received, which is not a create, an update or delete.", "id": "53369"}
{"code": "public static List<String> readLines(File file,String encoding) throws IOException {\n  return readLines(file,Charsets.toCharset(encoding));\n}\n", "nl": "Reads the contents of a file line by line to a List of Strings. The file is always closed.", "id": "8943"}
{"code": "public byte[] hash(){\n  return md5.Final();\n}\n", "nl": "Returns array of bytes representing hash of the stream as finalized for the current state.", "id": "39102"}
{"code": "private static void sendNotModified(ChannelHandlerContext ctx){\n  FullHttpResponse response=new DefaultFullHttpResponse(HTTP_1_1,NOT_MODIFIED);\n  setDateHeader(response);\n  ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n}\n", "nl": "When file timestamp is the same as what the browser is sending up, send a \"304 Not Modified\"", "id": "22895"}
{"code": "public void cleanPatch(){\n  if (patchDirectory == null) {\n    return;\n  }\n  if (isTinkerLoaded()) {\n    TinkerLog.e(TAG,\"it is not safety to clean patch when tinker is loaded, you should kill all your process after clean!\");\n  }\n  SharePatchFileUtil.deleteDir(patchDirectory);\n}\n", "nl": "clean all patch files", "id": "46095"}
{"code": "public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){\n  FriendDao.createTable(db,ifNotExists);\n  GroupsDao.createTable(db,ifNotExists);\n  BlackListDao.createTable(db,ifNotExists);\n  GroupMemberDao.createTable(db,ifNotExists);\n}\n", "nl": "Creates underlying database table using DAOs.", "id": "32848"}
{"code": "public void resetCircleColors(){\n  mCircleColors=new ArrayList<Integer>();\n}\n", "nl": "resets the circle-colors array and creates a new one", "id": "53130"}
{"code": "public static Aggregate<Map<String,Concept>,Number> sum(String varName){\n  return Aggregates.sum(varName);\n}\n", "nl": "Create an aggregate that will sum the values of a variable.", "id": "18983"}
{"code": "public void flushNew(){\n  oldSet.addAll(newSet,null);\n  newSet=G.v().newSetFactory.newSet(type,pag);\n}\n", "nl": "Sets all newly-added nodes to old nodes.", "id": "6667"}
{"code": "void removeConnection(GSConnectionImpl connection){\n  connectionsHash.remove(connection.connFacParent.getSpaceURL().getURL());\n}\n", "nl": "Remove the specified connection from the list of managed connections by this connection factory. If it doesn't exist then fail silently", "id": "28636"}
{"code": "public static NameValue create(String name,String value){\n  NameValue h=new NameValue();\n  h.name=name;\n  h.value=value;\n  return h;\n}\n", "nl": "Creates the.", "id": "40740"}
{"code": "public static ULong ulong(String value) throws NumberFormatException {\n  return value == null ? null : ULong.valueOf(value);\n}\n", "nl": "Create an <code>unsigned long</code>", "id": "40817"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200827,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] is in the continuous healing state because he used [%SkillName].", "id": "50716"}
{"code": "public static PedanticThrowAnalysis v(){\n  return G.v().soot_toolkits_exceptions_PedanticThrowAnalysis();\n}\n", "nl": "Returns the single instance of <code>PedanticThrowAnalysis</code>.", "id": "12592"}
{"code": "public WallGetQueryWithExtended filter(WallGetFilter value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Set filter", "id": "8209"}
{"code": "public static List split(String s){\n  return (split(s,\"\\\\s+\"));\n}\n", "nl": "Splits on whitespace (\\\\s+).", "id": "32286"}
{"code": "public static void splashInit(){\n  splashScreenObj=SplashScreen.getSplashScreen();\n  if (splashScreenObj != null) {\n    createTextArea();\n    splashGraphics=splashScreenObj.createGraphics();\n    splashGraphics.setFont(font);\n    splashText(getVersionString());\n  }\n}\n", "nl": "Splash initialise.", "id": "20980"}
{"code": "public TextPartsBuilder addTextPart(@NonNull CharSequence textPart){\n  Pair<CharSequence,BackgroundHolder> pair=Pair.create(textPart,null);\n  mTextParts.add(pair);\n  return this;\n}\n", "nl": "Add text part without background.", "id": "38694"}
{"code": "public PhotosEditQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "ID of the user or community that owns the photo.", "id": "51510"}
{"code": "@Override public Text splitText(int offset) throws DOMException {\n  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,\"Method not supported\");\n}\n", "nl": "Breaks this node into two nodes at the specified <code>offset</code>, keeping both in the tree as siblings. After being split, this node will contain all the content up to the <code>offset</code> point. A new node of the same type, which contains all the content at and after the <code>offset</code> point, is returned. If the original node had a parent node, the new node is inserted as the next sibling of the original node. When the <code>offset</code> is equal to the length of this node, the new node has no data.", "id": "5335"}
{"code": "public MessagesSearchDialogsQuery q(String value){\n  return unsafeParam(\"q\",value);\n}\n", "nl": "Search query string.", "id": "58023"}
{"code": "public DocsSearchQuery search(UserActor actor,String q){\n  return new DocsSearchQuery(getClient(),actor,q);\n}\n", "nl": "Returns a list of documents matching the search criteria.", "id": "55481"}
{"code": "public static void addRequest(AbstractAI ai2,Player player,int requestId,int senderId,final AI2Request request,Object... requestParams){\n  addRequest(ai2,player,requestId,senderId,0,request,requestParams);\n}\n", "nl": "Add RequestResponseHandler to player", "id": "1438"}
{"code": "@Deprecated public Builder cacheInMemory(){\n  cacheInMemory=true;\n  return this;\n}\n", "nl": "Loaded image will be cached in memory", "id": "25244"}
{"code": "private static boolean matches(Type from,Type to,Map<String,Type> typeMap){\n  return to.equals(from) || (from instanceof TypeVariable && to.equals(typeMap.get(((TypeVariable<?>)from).getName())));\n}\n", "nl": "Checks if two types are the same or are equivalent under a variable mapping given in the type map that was provided.", "id": "30040"}
{"code": "public static boolean isHasSdcard(){\n  String status=Environment.getExternalStorageState();\n  if (status.equals(Environment.MEDIA_MOUNTED)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n", "nl": "sdcard check", "id": "46022"}
{"code": "public List<Pet> findAll(){\n  log.debug(\"Request to get all Pets\");\n  List<Pet> result=petRepository.findAll();\n  return result;\n}\n", "nl": "Get all the pets.", "id": "17348"}
{"code": "public int length(){\n  return Histogram.length() + Graph.length();\n}\n", "nl": "Returns the size of the full Document Object, by summing the Graph and Histogram sizes of the document.", "id": "8177"}
{"code": "public boolean isError(){\n  return state.equals(ERROR);\n}\n", "nl": "Check if error state is shown", "id": "30453"}
{"code": "public boolean oneofScoped(){\n  return oneof != null;\n}\n", "nl": "Returns true if field is oneof-scoped.", "id": "921"}
{"code": "public static void write(File file,CharSequence data,boolean append) throws IOException {\n  write(file,data,Charset.defaultCharset(),append);\n}\n", "nl": "Writes a CharSequence to a file creating the file if it does not exist using the default encoding for the VM.", "id": "33734"}
{"code": "public SecureSetUserLevelQuery levels(String... value){\n  return unsafeParam(\"levels\",value);\n}\n", "nl": "Set levels", "id": "1758"}
{"code": "public static <K,V>boolean putMapNotNullKeyAndValue(Map<K,V> map,K key,V value){\n  if (map == null || key == null || value == null) {\n    return false;\n  }\n  map.put(key,value);\n  return true;\n}\n", "nl": "add key-value pair to map, both key and value need not null", "id": "45125"}
{"code": "public VideoEditCommentQuery attachments(String... value){\n  return unsafeParam(\"attachments\",value);\n}\n", "nl": "List of objects attached to the comment, in the following format: \"type\"\"owner_id\"_\"media_id\" \"\"type\"\" - Type of media attachment: \"photo\" - photo \"video\" - video \"audio\" - audio \"doc\" - document \"\"owner_id\"\" - ID of the media attachment owner. \"\"media_id\"\" - Media attachment ID. <p> Example: photo100172_166443618,photo66748_265827614", "id": "41530"}
{"code": "private boolean hasNext(){\n  return this.fileCounter > 0;\n}\n", "nl": "This method will be used to check whether any more element is present or not", "id": "1566"}
{"code": "@Override public void updateList(Set<GeoServerConnection> keySet){\n  int count=1;\n  for (  GeoServerConnection connection : keySet) {\n    PropertyManagerFactory.getInstance().updateValue(GEOSERVER_CONNECTION_FIELD,count,connection.encodeAsString());\n  }\n}\n", "nl": "Update connection list.", "id": "24827"}
{"code": "public boolean write(byte[] audioData){\n  return write(audioData,0,audioData.length);\n}\n", "nl": "Writes the given bytes to the audio stream", "id": "22670"}
{"code": "public static boolean isSameDomainName(String url1,String url2) throws MalformedURLException {\n  return isSameDomainName(new URL(url1),new URL(url2));\n}\n", "nl": "Returns whether the given urls have the same domain name. As an example, <br> <code> isSameDomain(\"http://lucene.apache.org\" ,\"http://people.apache.org/\") <br> will return true. </code>", "id": "55601"}
{"code": "protected void notifyChangingListeners(int oldValue,int newValue){\n  for (  OnWheelChangedListener listener : changingListeners) {\n    listener.onChanged(this,oldValue,newValue);\n  }\n}\n", "nl": "Notifies changing listeners", "id": "496"}
{"code": "public static byte[] decodeWebSafe(String s) throws Base64DecoderException {\n  byte[] bytes=s.getBytes();\n  return decodeWebSafe(bytes,0,bytes.length);\n}\n", "nl": "Decodes data from web safe Base64 notation. Web safe encoding uses '-' instead of '+', '_' instead of '/'", "id": "12224"}
{"code": "public void java_lang_Class_getName(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  helper.assignObjectTo(returnVar,Environment.v().getStringObject());\n}\n", "nl": "Returns the class name. public native java.lang.String getName();", "id": "45221"}
{"code": "public boolean hasBlock(){\n  return getBlockOpt().getNumChild() != 0;\n}\n", "nl": "Check whether the optional Block child exists.", "id": "40137"}
{"code": "private void initialize(String roots) throws BindException {\n  initialize(roots,null);\n}\n", "nl": "Initialize Webster", "id": "5398"}
{"code": "@Override public Document createDefaultDocument(){\n  return new SyntaxDocument(lexer);\n}\n", "nl": "This is called by Swing to create a Document for the JEditorPane document This may be called before you actually get a reference to the control. We use it here to create a proper lexer and pass it to the  SyntaxDcument we return.", "id": "33695"}
{"code": "protected AdsCreateAdsQuery data(String value){\n  return unsafeParam(\"data\",value);\n}\n", "nl": "Serialized JSON array of objects that describe created ads. Description of \"ad_specification\" objects see below.", "id": "47704"}
{"code": "protected BoardUnfixTopicQuery topicId(int value){\n  return unsafeParam(\"topic_id\",value);\n}\n", "nl": "Topic ID.", "id": "56081"}
{"code": "public FieldRotation<T> revert(){\n  return new FieldRotation<T>(q0.negate(),q1,q2,q3,false);\n}\n", "nl": "Revert a rotation. Build a rotation which reverse the effect of another rotation. This means that if r(u) = v, then r.revert(v) = u. The instance is not changed.", "id": "117"}
{"code": "public void addInsn(Insn insn){\n  insns.addElement(insn);\n}\n", "nl": "Append a new Insn to this code. Insn's are sequentially stored, in the order in which this method is called. You can't reorder code fragments after you've added it here.", "id": "35286"}
{"code": "public synchronized void startPreview(){\n  Camera theCamera=camera;\n  if (theCamera != null && !previewing) {\n    theCamera.startPreview();\n    previewing=true;\n    autoFocusManager=new AutoFocusManager(context,camera);\n  }\n}\n", "nl": "Asks the camera hardware to begin drawing preview frames to the screen.", "id": "49876"}
{"code": "public static void checkConstraints(InvocationConstraints constraints) throws UnsupportedConstraintException {\n  if (constraints == null) {\n    return;\n  }\n  for (Iterator i=constraints.requirements().iterator(); i.hasNext(); ) {\n    InvocationConstraint c=(InvocationConstraint)i.next();\n    if (!supported(c)) {\n      throw new UnsupportedConstraintException(\"unsupported constraint: \" + c);\n    }\n  }\n}\n", "nl": "Returns normally if the given constraints can be satisfied by a plaintext-based format/protocol (such as net.jini.discovery.plaintext, or version 1 of the discovery protocols); otherwise, throws an UnsupportedConstraintException .  Null constraints are considered equivalent to empty constraints.", "id": "50139"}
{"code": "public static ContextConfigAspect create(Model model){\n  return new ContextConfigAspect(model);\n}\n", "nl": "Creates new context config aspect.", "id": "32986"}
{"code": "@Override public void connect(){\n}\n", "nl": "Not necessary for the Spring managed sender.", "id": "10313"}
{"code": "private int indexOf(int tabId){\n  return mTabIdList.indexOf(tabId);\n}\n", "nl": "Finds the index of the given Tab ID.", "id": "2032"}
{"code": "public VideoGetCommentsQuery needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n", "nl": "Return an additional \"likes\" field", "id": "36433"}
{"code": "public void add(Predicate p,int shape){\n  super.add(p,new Integer(shape));\n}\n", "nl": "Add a shape mapping rule to this ShapeAction. VisualItems that match the provided predicate will be assigned the given shape value (assuming they do not match an earlier rule).", "id": "19303"}
{"code": "public static File toFile(URL url){\n  if (url == null || !\"file\".equalsIgnoreCase(url.getProtocol())) {\n    return null;\n  }\n else {\n    String filename=url.getFile().replace('/',File.separatorChar);\n    filename=decodeUrl(filename);\n    return new File(filename);\n  }\n}\n", "nl": "Convert from a <code>URL</code> to a <code>File</code>. <p/> From version 1.1 this method will decode the URL. Syntax such as <code>file:///my%20docs/file.txt</code> will be correctly decoded to <code>/my docs/file.txt</code>. Starting with version 1.5, this method uses UTF-8 to decode percent-encoded octets to characters. Additionally, malformed percent-encoded octets are handled leniently by passing them through literally.", "id": "25695"}
{"code": "public WallGetQuery domain(String value){\n  return unsafeParam(\"domain\",value);\n}\n", "nl": "User or community short address.", "id": "16117"}
{"code": "public void update(double deltaTime){\n  Move();\n  position.add(velocity.x * deltaTime,velocity.y * deltaTime);\n}\n", "nl": "update enemy", "id": "12261"}
{"code": "public static Configuration createCommandTag(){\n  Configuration configuration=new Configuration();\n  CommandTag commandTag=CommandTag.create(\"CommandTag\",Integer.class,new SimpleHardwareAddressImpl(\"testAddress\"),30000,6000,200,2,\"RBAC class\",\"RBAC device\",\"RBAC property\").id(500L).equipmentId(15L).build();\n  configuration.addEntity(commandTag);\n  return configuration;\n}\n", "nl": "CommandTag id: 500 equipmentId: 15", "id": "5816"}
{"code": "public final boolean isVisible(){\n  return visible;\n}\n", "nl": "Returns true if the DataSource is visible, false otherwise.", "id": "13998"}
{"code": "public AemParsys removeNthComponentOfType(Class<?> componentClass,int n){\n  WebElement webElement=getComponentScope(componentClass,n);\n  clickDeleteInContextMenu(webElement);\n  wait.withTimeout(Timeouts.SMALL).until(ExpectedConditions.stalenessOf(webElement));\n  return this;\n}\n", "nl": "Remove the n-th occurrence of componentClass. Indexing starts at 0.", "id": "38950"}
{"code": "public boolean isValidCountryCodeTld(String ccTld){\n  ccTld=unicodeToASCII(ccTld);\n  return Arrays.binarySearch(COUNTRY_CODE_TLDS,chompLeadingDot(ccTld.toLowerCase(Locale.ENGLISH))) >= 0;\n}\n", "nl": "Returns true if the specified <code>String</code> matches any IANA-defined country code top-level domain. Leading dots are ignored if present. The search is case-insensitive.", "id": "24387"}
{"code": "public ASBSetCursor queryASBSets(){\n  return mHelper.queryASBSets();\n}\n", "nl": "ARMOR SET BUILDER QUERIES", "id": "48514"}
{"code": "public void endPrefixMapping(String prefix,Augmentations augs) throws XNIException {\n}\n", "nl": "The end of a namespace prefix mapping. This method will only be called when namespace processing is enabled.", "id": "21911"}
{"code": "private void initSpringSecurity(ServletContext servletContext,EnumSet<DispatcherType> disps){\n  log.debug(\"Registering Spring Security Filter\");\n  FilterRegistration.Dynamic springSecurityFilter=servletContext.addFilter(\"springSecurityFilterChain\",new DelegatingFilterProxy());\n  springSecurityFilter.addMappingForUrlPatterns(disps,false,\"/*\");\n}\n", "nl": "Initializes Spring Security.", "id": "29290"}
{"code": "public SiteAdminPage waitForPageNotExists(String title){\n  bobcatWait.withTimeout(Timeouts.BIG).until(not(pageExists(title)),Timeouts.SMALL);\n  return this;\n}\n", "nl": "Wait's for page not exists in site admin grid.", "id": "43074"}
{"code": "public Map<String,Object> mapFields(Map<String,Object> fields,boolean eval){\n  Map<String,Object> result=new HashMap<>();\n  fields.forEach(null);\n  return result;\n}\n", "nl": "Maps fields to dynamic schema", "id": "31563"}
{"code": "@Override public void close(){\n  try {\n    reader.close();\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n  }\n}\n", "nl": "closes the accessor", "id": "2293"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_END_A_TO_SELF(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200775,skilltarget);\n}\n", "nl": "[%SkillTarget] is no longer bound", "id": "32213"}
{"code": "public void run(){\n  try {\n    Thread.sleep(timeout);\n    thread.interrupt();\n  }\n catch (  InterruptedException e) {\n  }\n}\n", "nl": "Sleep until the specified timout amount and then interrupt the thread being monitored.", "id": "43970"}
{"code": "protected String resolveExternalSystem(String systemId,String resolver) throws IOException {\n  Resolver r=queryResolver(resolver,\"i2l\",systemId,null);\n  if (r != null) {\n    return r.resolveSystem(systemId);\n  }\n else {\n    return null;\n  }\n}\n", "nl": "Query an external RFC2483 resolver for a system identifier.", "id": "44168"}
{"code": "public static boolean interfaceOf(Object obj,Class<?> interfaceClass){\n  Class<?> objectClass=obj.getClass();\n  return interfaceOf(objectClass,interfaceClass);\n}\n", "nl": "Tests if an object properly implements the specified interface.", "id": "40902"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "9675"}
{"code": "public static void displayContextClassLoaderTree(){\n  Thread curThread=Thread.currentThread();\n  ClassLoader curClassLoader=curThread.getContextClassLoader();\n  displayClassLoaderTree(curClassLoader);\n}\n", "nl": "Utility method that displays the class loader delegation tree for the current context class loader. For each class loader in the tree, this method displays the locations from which that class loader will retrieve and load requested classes. <p> This method can be useful when debugging problems related to the receipt of exceptions such as <code>ClassNotFoundException</code>.", "id": "52625"}
{"code": "public long remove(short key){\n  long prev=(long)0;\n  int index=index(key);\n  if (index >= 0) {\n    prev=_values[index];\n    removeAt(index);\n  }\n  return prev;\n}\n", "nl": "Deletes a key/value pair from the map.", "id": "48555"}
{"code": "@Override public String toString(){\n  return Vector2DFormat.getInstance().format(this);\n}\n", "nl": "Get a string representation of this vector.", "id": "51158"}
{"code": "private void changeToFragment(@NonNull Fragment fragment){\n  getSupportFragmentManager().beginTransaction().setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).replace(R.id.shaky_fragment_container,fragment).addToBackStack(null).commit();\n}\n", "nl": "Attaches this intent's extras to the fragment and transitions to the next fragment.", "id": "22615"}
{"code": "public static byte[] bitmapToByte(Bitmap b){\n  ByteArrayOutputStream o=new ByteArrayOutputStream();\n  b.compress(Bitmap.CompressFormat.PNG,100,o);\n  return o.toByteArray();\n}\n", "nl": "convert Bitmap to byte array", "id": "47318"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "22778"}
{"code": "public ImageSize scale(float scale){\n  return new ImageSize((int)(width * scale),(int)(height * scale));\n}\n", "nl": "Scales dimensions according to incoming scale. Returns new object.", "id": "15192"}
{"code": "public static void showLogin(Fragment fragment,int requestCode){\n  Intent intent=new Intent(fragment.getActivity(),LoginActivity.class);\n  fragment.startActivityForResult(intent,requestCode);\n}\n", "nl": "Show the login screen", "id": "16562"}
{"code": "void endStatement(){\n  tx.endStatement();\n}\n", "nl": "Finish the current statement.", "id": "16944"}
{"code": "private Metrics createMetricsByDimension(ObjectName objectName){\n  Map<String,String> dimensionMap=Maps.newHashMap();\n  dimensionMap.put(\"MBean\",objectName.toString());\n  return Metrics.create(dimensionMap);\n}\n", "nl": "Creates a MBean dimension key for metrics", "id": "45653"}
{"code": "private void validateRoleType(RoleTypeImpl roleType){\n  if (!ValidateGlobalRules.validateHasSingleIncomingHasRoleEdge(roleType))   errorsFound.add(ErrorMessage.VALIDATION_ROLE_TYPE.getMessage(roleType.getId()));\n}\n", "nl": "Validation rules exclusive to role types", "id": "26751"}
{"code": "public static void startClock(){\n  if (clockStarted) {\n    throw new IllegalStateException(\"Clock is already started\");\n  }\n  updater=new GameTimeUpdater(getGameTime());\n  ThreadPoolManager.getInstance().scheduleAtFixedRate(updater,0,5000);\n  clockStarted=true;\n}\n", "nl": "Starts the counter that increases the clock every tick", "id": "44796"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Curse_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200768,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] is cursed because it used [%SkillName].", "id": "57900"}
{"code": "public static void error(Object message,Throwable exception){\n  Gdx.app.error(TAG,String.valueOf(message),exception);\n}\n", "nl": "Logs an error message to the console or logcat", "id": "22771"}
{"code": "protected PhotosGetMarketAlbumUploadServerQuery groupId(int value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "Community ID.", "id": "53505"}
{"code": "public static void enableConsoleLogging(){\n  consoleLoggingEnabled=true;\n}\n", "nl": "Turn on console logging.  It should always be on and just turned off temporarily when needed.  Usually this is when running a command that you expect to fail, such as checking if something exists, and you do not want to bug the user with expected errors.", "id": "30436"}
{"code": "@Override public void flush(){\n}\n", "nl": "Flushing this writer has no effect.", "id": "45581"}
{"code": "public static void clearCookie(){\n  prefs.edit().putString(\"cookie\",\"\").commit();\n}\n", "nl": "clear the cookie in the SharedPreferences", "id": "11586"}
{"code": "public void init(){\n  this.sEnteredRoom=\" \";\n  this.gameStartSet=false;\n  this.playToken=false;\n}\n", "nl": "init the client information", "id": "56993"}
{"code": "protected void destroyOverlayPanelContent(){\n  if (mContent != null) {\n    mContent.destroy();\n    mContent=null;\n  }\n}\n", "nl": "Destroy the native components of the OverlayPanelContent.", "id": "44426"}
{"code": "private void checkMatrixDimensions(Matrix B){\n  if (B.m != m || B.n != n) {\n    throw new IllegalArgumentException(\"Matrix dimensions must agree.\");\n  }\n}\n", "nl": "Check if size(A) == size(B)", "id": "35075"}
{"code": "private static boolean isDebugEnabled(){\n  try {\n    String val=SecuritySupport.getSystemProperty(\"xerces.debug\");\n    return (val != null && (!\"false\".equals(val)));\n  }\n catch (  SecurityException se) {\n  }\n  return false;\n}\n", "nl": "Returns true if debug has been enabled.", "id": "47674"}
{"code": "public void pageLoadingStarted(){\n  mLoadTracker.pageLoadingStarted();\n}\n", "nl": "Called when this tab has started loading.", "id": "42067"}
{"code": "public String loadFile(String sID){\n  return getDocumentText(sID,true);\n}\n", "nl": "Loads the text of a given file, given its filename.", "id": "22538"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATK_Instant_A_TO_SELF(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200869,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] received %num0 damage as it used [%SkillName].", "id": "934"}
{"code": "@Override public void attributeSelection(String field){\n}\n", "nl": "Attribute selection.", "id": "37390"}
{"code": "@Override public double toDouble(){\n  return 0;\n}\n", "nl": "Convert Writable to double. Whether this is supported depends on the specific writable.", "id": "55464"}
{"code": "public boolean forEach(TShortProcedure procedure){\n  for (int i=0; i < _pos; i++) {\n    if (!procedure.execute(_data[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Applies the procedure to each value in the list in ascending (front to back) order.", "id": "35298"}
{"code": "private void handleStaticInitializerBlocks(soot.SootMethod sootMethod){\n  ArrayList<Block> staticInitializerBlocks=((soot.javaToJimple.PolyglotMethodSource)sootMethod.getSource()).getStaticInitializerBlocks();\n  if (staticInitializerBlocks != null) {\n    Iterator<Block> staticInitBlocksIt=staticInitializerBlocks.iterator();\n    while (staticInitBlocksIt.hasNext()) {\n      createBlock(staticInitBlocksIt.next());\n    }\n  }\n}\n", "nl": "static init blocks get created in clinit methods in Jimple", "id": "3050"}
{"code": "public void close(){\n  try {\n    connection.close();\n  }\n catch (  Exception e) {\n    ;\n  }\n}\n", "nl": "Closes the channel.", "id": "19960"}
{"code": "public static Class<?> loadClass(String className,boolean fastPath) throws ClassNotFoundException {\n  if (_classProvider == null) {\nsynchronized (AdditionalClassProviderFactory.class) {\n      if (_classProvider == null)       throw new ClassNotFoundException(\"no class provider present\");\n    }\n  }\n  return _classProvider.loadClass(className,fastPath);\n}\n", "nl": "loads a class", "id": "1153"}
{"code": "public static String toString(URI uri,Charset encoding) throws IOException {\n  return toString(uri.toURL(),Charsets.toCharset(encoding));\n}\n", "nl": "Gets the contents at the given URI.", "id": "41433"}
{"code": "@Override public void onReset(){\n  if (this.status == AccelListener.RUNNING) {\n    this.stop();\n  }\n}\n", "nl": "Called when the view navigates.", "id": "20990"}
{"code": "public static String toInternalName(String className){\n  return className.replace('.','/');\n}\n", "nl": "Converts a class name from the Java language naming convention (foo.bar.baz) to the JVM internal naming convention (foo/bar/baz).", "id": "26818"}
{"code": "public void takeHeapDump(Application application,boolean openView){\n  heapDumpProvider.createHeapDump(application,openView);\n}\n", "nl": "Takes heap dump from Application.", "id": "29052"}
{"code": "private static boolean isInHorizontalTargetZone(float x,float y,float handleXStart,float handleXEnd,float handleY,float targetRadius){\n  return x > handleXStart && x < handleXEnd && Math.abs(y - handleY) <= targetRadius;\n}\n", "nl": "Determines if the specified coordinate is in the target touch zone for a horizontal bar handle.", "id": "44005"}
{"code": "public int[][] readImage() throws IOException {\n  if (images == null) {\n    throw new IllegalStateException(\"Images file not initialized.\");\n  }\n  return images.readImage();\n}\n", "nl": "Reads the current image.", "id": "43688"}
{"code": "public int provideBlockThreshold(){\n  return 1000;\n}\n", "nl": "Config block threshold (in millis), dispatch over this duration is regarded as a BLOCK. You may set it from performance of device.", "id": "21652"}
{"code": "public void fail(String message){\n  screenshot();\n  this.testResult=new Fail(message);\n}\n", "nl": "Makes a screenshot and marks the test as failed. Stores the failure message.", "id": "3391"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuffMental_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1201247,skillname);\n}\n", "nl": "You removed abnormal mental conditions by using [%SkillName].", "id": "50991"}
{"code": "public boolean enabled(){\n  return soot.PhaseOptions.getBoolean(options,\"enabled\");\n}\n", "nl": "Enabled -- .", "id": "11534"}
{"code": "@Override public String next(){\n  return nextLine();\n}\n", "nl": "Returns the next line in the wrapped <code>Reader</code>.", "id": "20865"}
{"code": "public void quit(){\n  mQuit=true;\n  interrupt();\n}\n", "nl": "Forces this dispatcher to quit immediately.  If any requests are still in the queue, they are not guaranteed to be processed.", "id": "12213"}
{"code": "public void write(String fileName) throws IOException {\n  write(new File(fileName));\n}\n", "nl": "Write the basenameList to a file, identified by its name.", "id": "20622"}
{"code": "public boolean removeByObject(T obj){\n  throw new RuntimeException(\"RwlSegmentedStoredList::removeByObject not supported\");\n}\n", "nl": "given an object scan the list, find it and remove it, returns true if found", "id": "4255"}
{"code": "@Override public boolean isDataSource(){\n  return false;\n}\n", "nl": "Returns if files selected are a data source, e.g. raster or vector.", "id": "20130"}
{"code": "@Override public IScanListIterator<IEntryCacheInfo> establishScan(K startPos,short relation,K endPos,boolean endPosInclusive){\n  return establishScan(startPos,relation,endPos,endPosInclusive,false);\n}\n", "nl": "establish a scan according to the relation given and startPos : the start-scan object ,  null means scan all values. The relation is from com.j_spaces.client.TemplateMatchCodes: LT, LE, GT, GE (other codes are not relevant) endPos- key up to (or null if no limit in  index) endPosInclusive : is the endPos up to (or down to) and including ? returns an ExtendedIndexIterator object which enables scanning the ordered index, Null if no relevant elements to scan", "id": "31252"}
{"code": "private void addAnnotationOnSource(ITextUnit textUnit,Issue issue){\n  TextContainer sourceContainer=textUnit.getSource();\n  addAnnotation(sourceContainer,issue);\n}\n", "nl": "Adds an issue annotation on the source of the given text unit", "id": "15168"}
{"code": "protected void notifyScrollingListenersAboutEnd(){\n  for (  OnWheelScrollListener listener : scrollingListeners) {\n    listener.onScrollingFinished(this);\n  }\n}\n", "nl": "Notifies listeners about ending scrolling", "id": "8573"}
{"code": "public void init(){\n  try {\n    this.parser=new SimpleXMLParser();\n  }\n catch (  ParserConfigurationException e) {\n    throw new RuntimeException(\"Error creating instance of SimpleXMLParser:\",e);\n  }\n}\n", "nl": "Init method run on bean instantiation. Initializes XML parser.", "id": "33492"}
{"code": "public static String createRGBString(Color c){\n  return \"rgb(\" + (c.getRed() * 255) + \",\"+ (c.getGreen() * 255)+ \",\"+ (c.getBlue() * 255)+ \");\";\n}\n", "nl": "Creates CSS RGB string from the given color.", "id": "5797"}
{"code": "public boolean isApplicable(){\n  return getViewer().getSelectedComponent() == getViewer().getPcoaTab();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "1469"}
{"code": "public static void showToast(Context context,int resourceId){\n  Toast.makeText(context,context.getString(resourceId),Toast.LENGTH_LONG).show();\n}\n", "nl": "Shows a (long) toast.", "id": "51713"}
{"code": "public void removeLineAt(int pos) throws BadLocationException {\n  Element e=getParagraphElement(pos);\n  remove(e.getStartOffset(),getElementLength(e));\n}\n", "nl": "Deletes the line at given position", "id": "43547"}
{"code": "public void recordLatency(double latencySec){\n  if (!this.serverHandledLatencySeconds.isPresent()) {\n    return;\n  }\n  addLabels(this.serverHandledLatencySeconds.get()).observe(latencySec);\n}\n", "nl": "Only has any effect if monitoring is configured to include latency histograms. Otherwise, this does nothing.", "id": "55529"}
{"code": "public static SM_SYSTEM_MESSAGE STR_COMPOUND_ERROR_NOT_ENOUGH_MONEY(int i,int j){\n  return new SM_SYSTEM_MESSAGE(1400337,new DescriptionId(i),new DescriptionId(j));\n}\n", "nl": "You do not have enough Kinah to combine %0 and %1.", "id": "48840"}
{"code": "public static <T>void notEmpty(String argumentName,T[] argumentObject){\n  notNull(argumentName,argumentObject);\n  if (argumentObject.length == 0) {\n    throw new IllegalArgumentException(argumentName + \" cannot be empty\");\n  }\n}\n", "nl": "Tests if an argument is not null and is not empty. <p><code>Assert.notEmpty(\"foo\", foo);</code></p>", "id": "13067"}
{"code": "public static <R>Observable<R> ifThen(BooleanSupplier condition,ObservableSource<? extends R> then,Scheduler scheduler){\n  return ifThen(condition,then,Observable.<R>empty().subscribeOn(scheduler));\n}\n", "nl": "Return an Observable that emits the emissions from a specified Observable if a condition evaluates to true, otherwise return an empty Observable that runs on a specified Scheduler. <p> <img width=\"640\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ifThen.s.png\" alt=\"\">", "id": "41684"}
{"code": "@Override public final void confirmEquipmentStateIncorrect(){\n  confirmEquipmentStateIncorrect(null);\n}\n", "nl": "Sends a note to the business layer, to confirm that the equipment is not properly configured, or connected to its data source", "id": "41512"}
{"code": "@Override public void populateExpression(Object objValue){\n  if (objValue instanceof String) {\n    String sValue=(String)objValue;\n    populateField(sValue);\n  }\n}\n", "nl": "Populate expression.", "id": "21231"}
{"code": "public float distanceSquared(Vector2f v){\n  double dx=x - v.x;\n  double dy=y - v.y;\n  return (float)(dx * dx + dy * dy);\n}\n", "nl": "<code>distanceSquared</code> calculates the distance squared between this vector and vector v.", "id": "29310"}
{"code": "public static boolean isProjectStyle(@NotNull String styleResourceUrl){\n  return !styleResourceUrl.startsWith(ANDROID_STYLE_RESOURCE_PREFIX);\n}\n", "nl": "Returns true if the given style represents a project theme", "id": "18971"}
{"code": "protected PhotosDeleteQuery photoId(int value){\n  return unsafeParam(\"photo_id\",value);\n}\n", "nl": "Photo ID.", "id": "38723"}
{"code": "public static final String replaceUnsafeSvgText(String svg){\n  if (svg == null) {\n    return null;\n  }\n  svg=replaceText(svg);\n  svg=replaceInvalidPatterns(svg);\n  return svg;\n}\n", "nl": "Escapes the String encoded SVG.", "id": "28203"}
{"code": "@Override public IAssignmentAlgorithm createAssignmentAlgorithm(){\n  return assignmentUsingBestHit;\n}\n", "nl": "creates an assignment algorithm", "id": "53475"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.EUCLIDEAN_NORMALIZED);\n}\n", "nl": "this is currently selected?", "id": "6318"}
{"code": "private boolean isNanpaNumberWithNationalPrefix(){\n  return (currentMetadata.getCountryCode() == 1) && (nationalNumber.charAt(0) == '1') && (nationalNumber.charAt(1) != '0')&& (nationalNumber.charAt(1) != '1');\n}\n", "nl": "Returns true if the current country is a NANPA country and the national number begins with the national prefix.", "id": "43676"}
{"code": "public boolean isLocalEchoEnabled(){\n  return localEchoEnabled;\n}\n", "nl": "Gets the status of local echo for this conversation. If local echo is enabled, any text submitted to a conversation gets echoed back into the submitter's chat window.", "id": "11058"}
{"code": "private void storeOriginalData(FieldConfigValuePopulateInterface field){\n  valueMap.put(field,field.getStringValue());\n}\n", "nl": "Store original data.", "id": "13248"}
{"code": "public static boolean interfaceOf(Class<?> objectClass,Object interfaceObject){\n  Class<?> interfaceClass=interfaceObject.getClass();\n  return interfaceOf(objectClass,interfaceClass);\n}\n", "nl": "Tests if a class properly implements the specified interface.", "id": "23695"}
{"code": "public void onNewItemsAdded(int size){\n  if (size < mPageSize) {\n    setAllItemsLoaded(true);\n    hideBottomProgress();\n  }\n}\n", "nl": "Compute mAllItemsLoaded, if size < mPageSize then hide bottom progress and no more show it.", "id": "20829"}
{"code": "public boolean isEmpty(){\n  return (mLayout == R.layout.file_details_empty || getFile() == null || mAccount == null);\n}\n", "nl": "Check if the fragment was created with an empty layout. An empty fragment can't show file details, must be replaced.", "id": "48978"}
{"code": "@Override public void drop_duplicates(){\n  for (Iterator<AllocNode> it=pt_objs.keySet().iterator(); it.hasNext(); ) {\n    PtInsIntervalManager im=pt_objs.get(it.next());\n    im.removeUselessSegments();\n  }\n}\n", "nl": "Discard all context sensitive tuples which are covered by insensitive ones", "id": "56291"}
{"code": "protected void syncTo(Set<TokenKind> terminatingTokens){\n  while (!atAnyOfTokens(terminatingTokens)) {\n    builder.advanceLexer();\n  }\n}\n", "nl": "Consume tokens until we reach the first token that has a kind that is in the set of terminatingTokens.", "id": "11818"}
{"code": "public void endEntity(String name,Augmentations augs) throws XNIException {\n  fEntityDepth--;\n}\n", "nl": "This method notifies the end of an entity. The document entity has the pseudo-name of \"[xml]\" the DTD has the pseudo-name of \"[dtd]\" parameter entity names start with '%'; and general entities are just specified by their name.", "id": "54227"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelBuffCounterATK_A_TO_SELF(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200814,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] suffered %num0 damage and dispelled some of its magical buffs by using [%SkillName].", "id": "45397"}
{"code": "public void resetDocumentLocator(String publicid,String systemid){\n  thePublicid=publicid;\n  theSystemid=systemid;\n  theLastLine=theLastColumn=theCurrentLine=theCurrentColumn=0;\n}\n", "nl": "Reset document locator, supplying systemid and publicid.", "id": "30280"}
{"code": "public boolean isDead(){\n  if (nodeState == ZWaveNodeState.DEAD || nodeState == ZWaveNodeState.FAILED) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Gets whether the node is dead.", "id": "35003"}
{"code": "protected AppsGetLeaderboardQuery type(AppsGetLeaderboardType value){\n  return unsafeParam(\"type\",value);\n}\n", "nl": "Leaderboard type.", "id": "32830"}
{"code": "public void delFriend(int friendOid){\n  Iterator<Friend> it=iterator();\n  while (it.hasNext()) {\n    if (it.next().getOid() == friendOid) {\n      it.remove();\n    }\n  }\n}\n", "nl": "Deletes given friend from this friends list<br /> <ul> <li>Note: This will only affect this player, not the friend.</li> <li>Note: Sends the packet to update the client automatically</li> <li>Note: You should use requestDel to delete from both lists</li> </ul>", "id": "3696"}
{"code": "public NewsfeedSearchQuery startFrom(String value){\n  return unsafeParam(\"start_from\",value);\n}\n", "nl": "Set start from", "id": "48334"}
{"code": "@Override public void populateExpression(Object objValue){\n  if (objValue instanceof ReferencedEnvelope) {\n    populateField((ReferencedEnvelope)objValue);\n    valueUpdated();\n  }\n}\n", "nl": "Populate expression.", "id": "31622"}
{"code": "public Stream<String> preOrderRightToLeftTraversal(String nodeName) throws SystemConfigException {\n  if (!moduleConfigurations.containsKey(nodeName)) {\n    LOG.error(NO_SUCH_MODULE.logFormat(nodeName));\n    throw new SystemConfigException(NO_SUCH_MODULE.format(nodeName));\n  }\n  return preOrderRightToLeftTraversal(nodeName,new ArrayList<>());\n}\n", "nl": "Find the prioritized stream of configurations for a given module (inclusive of the module itself).", "id": "3220"}
{"code": "public boolean isComponentNotPresent(Class<?> componentClass){\n  final String cssClassName=new AemComponentHandler(componentClass).getCssClassName();\n  return isComponentNotPresent(cssClassName);\n}\n", "nl": "Simply check if any component with a specific type is NOT in parsys. Do not use it with negation, because of performance issues. In such cases use {#link isComponentPresent}.", "id": "54222"}
{"code": "public static void xml(String xml){\n  Logger.xml(xml);\n}\n", "nl": "Formats the json content and print it", "id": "50028"}
{"code": "public void addListener(AttributeButtonSelectionInterface listener){\n  if (!selectedListeners.contains(listener)) {\n    selectedListeners.add(listener);\n  }\n}\n", "nl": "Adds the listener.", "id": "13448"}
{"code": "protected AppsGetScoreQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id", "id": "21106"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_PARTY_SIZE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300567,value0);\n}\n", "nl": "You can only receive this quest when your group has %0 or more members.", "id": "9910"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelBuff_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200660,skillcaster,skillname);\n}\n", "nl": "Your magical buffs were dispelled because [%SkillCaster] used [%SkillName] on you.", "id": "5291"}
{"code": "public SnippetObject elem(Map.Entry<Object,Object> e){\n  return new SnippetObject(e.getValue(),myPath.elem(),mySnippets);\n}\n", "nl": "Build an element from a map entry (this object is the map).", "id": "25802"}
{"code": "public static final double kilogramsToSlugs(double kilograms){\n  return kilograms * KILOGRAM_TO_SLUG;\n}\n", "nl": "Converts kilograms to slugs.", "id": "35236"}
{"code": "public void pixelsToValue(float[] pixels){\n  Matrix tmp=new Matrix();\n  mMatrixOffset.invert(tmp);\n  tmp.mapPoints(pixels);\n  mViewPortHandler.getMatrixTouch().invert(tmp);\n  tmp.mapPoints(pixels);\n  mMatrixValueToPx.invert(tmp);\n  tmp.mapPoints(pixels);\n}\n", "nl": "Transforms the given array of touch positions (pixels) (x, y, x, y, ...) into values on the chart.", "id": "49552"}
{"code": "public Object jjtAccept(MithraQLVisitor visitor,Object data){\n  return visitor.visit(this,data);\n}\n", "nl": "Accept the visitor.", "id": "25846"}
{"code": "public static final SandboxRay show(Window owner,SandboxRay ray){\n  EditRayDialog ard=new EditRayDialog(owner,ray);\n  ard.setLocationRelativeTo(owner);\n  ard.setVisible(true);\n  if (!ard.canceled) {\n    return ard.rayPanel.getRay();\n  }\n  return ray;\n}\n", "nl": "Shows a dialog used to accept input for editing a ray. <p> Returns null if the dialog is closed or canceled.", "id": "52275"}
{"code": "@Override public boolean markSupported(){\n  return fInputStream.markSupported();\n}\n", "nl": "Tell whether this stream supports the mark() operation.", "id": "57995"}
{"code": "private boolean hasPermission(String permission){\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n    return (checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED);\n  }\n  return true;\n}\n", "nl": "method that will return whether the permission is accepted. By default it is true if the user is using a device below version 23", "id": "54717"}
{"code": "public String rawString(){\n  return rawString;\n}\n", "nl": "Returns the raw string matched as a phone number in the searched text.", "id": "34317"}
{"code": "public void applyUpdate(Object update) throws Exception {\n  throw new UnsupportedOperationException(\"JoinStateManager:Updating log\" + \", this should not happen\");\n}\n", "nl": "This method always throws <code>UnsupportedOperationException</code> since <code>FileJoinAdminState</code> should never update a log.", "id": "32333"}
{"code": "@Override public void onPrepared(MediaPlayer mp){\n  player.start();\n}\n", "nl": "Called when the media file is ready for playback.", "id": "42084"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcDPHeal_Instant_HEAL_ME_TO_SELF(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201234,num0,skillname);\n}\n", "nl": "You recovered %num0 DP by using [%SkillName].", "id": "45760"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PetOrderUnSummon_A_TO_ME(String skillname,String skillcaster){\n  return new SM_SYSTEM_MESSAGE(1201205,skillname,skillcaster);\n}\n", "nl": "Your spirit was unsummoned by the effect of [%SkillName] used by [%SkillCaster].", "id": "8744"}
{"code": "public MarketCreateCommentQuery message(String value){\n  return unsafeParam(\"message\",value);\n}\n", "nl": "Comment text (required if \"attachments\" parameter is not specified)", "id": "37729"}
{"code": "private final boolean eq(Object o1,Object o2){\n  return o1 == o2 || ((o1 != null) && o1.equals(o2));\n}\n", "nl": "Compare two objects for equality.", "id": "44683"}
{"code": "public void dispose(){\n  if (serverSocket != null) {\n    try {\n      serverSocket.close();\n    }\n catch (    IOException e) {\n      ;\n    }\n  }\n}\n", "nl": "Disposes the server and interrupts every operating stream.", "id": "35186"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200824,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] is in the flight time recovery state because he used [%SkillName].", "id": "18555"}
{"code": "public void execute(String command){\n  dir.execute(command,getCommandManager());\n}\n", "nl": "execute a command", "id": "50627"}
{"code": "private void createRGBFormat(){\n  videoFormat=new RGBFormat(new Dimension(mip.getMWidth(),mip.getMHeight()),width * height,int[].class,mip.getFPS(),32,0x00ff0000,0x0000ff00,0x000000ff,1,width,Format.FALSE,RGBFormat.BIG_ENDIAN);\n}\n", "nl": "Creates an rgb format", "id": "45592"}
{"code": "public static <E>Stream<E> validate(Stream<E> stream,Predicate<? super E> validator,UnaryOperator<E> transformingIfNotValid){\n  return validate(stream,validator,Function.identity(),transformingIfNotValid);\n}\n", "nl": "<p>Generates a stream by validating the elements of an input stream one by one using the provided predicate. </p> <p>An element of the input stream is said to be valid if the provided predicate returns true for this element.</p> <p>A valid element is transmitted to the returned stream without any transformation. A non-valid element is replaced by the application of the provided unary operator. </p> <p>This function calls the general version of <code>validate()</code> with special parameters.</p> <p>A <code>NullPointerException</code> will be thrown if one of the provided elements is null. </p>", "id": "23783"}
{"code": "public boolean add(E o){\n  return innerChain.add(o);\n}\n", "nl": "Adds the given object to this Chain.", "id": "54625"}
{"code": "public static void updatePilot(AirMapPilot pilot,@Nullable AirMapCallback<AirMapPilot> callback){\n  PilotService.updatePilot(pilot,callback);\n}\n", "nl": "Update a pilot", "id": "13808"}
{"code": "public static boolean isBanned(String ip){\n  for (  BannedIP ipBan : banList) {\n    if (ipBan.isActive() && NetworkUtils.checkIPMatching(ipBan.getMask(),ip)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks if ip (or mask) is banned", "id": "37853"}
{"code": "public void addColumnListener(ColumnListener listener){\n  m_listeners.add(listener);\n}\n", "nl": "Adds a listener to be notified when this column changes", "id": "7458"}
{"code": "protected GroupsDeleteLinkQuery linkId(int value){\n  return unsafeParam(\"link_id\",value);\n}\n", "nl": "LInk ID.", "id": "12606"}
{"code": "protected void writeString(String s) throws IOException {\n  for (int i=0; i < s.length(); i++) {\n    out.write((byte)s.charAt(i));\n  }\n}\n", "nl": "Writes string to output stream", "id": "23532"}
{"code": "public boolean isMinified(List<String> codeLines){\n  OptionalDouble average=codeLines.stream().map(null).mapToInt(null).average();\n  if (average.isPresent() && average.getAsDouble() > this.MINIFIEDLENGTH) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Determine if a List<String> which is used to represent a code file contains a code file that is suspected to be minified. This is for the purposes of excluding it from the index.", "id": "57879"}
{"code": "public boolean isFile(){\n  return true;\n}\n", "nl": "Returns <code>true</code> to indicate this part is a file.", "id": "39955"}
{"code": "public static void d(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_DEBUG) {\n    return;\n  }\n  Log.d(tag,msg,throwable);\n}\n", "nl": "Send a DEBUG log message", "id": "35773"}
{"code": "public ShrExpr newShrExpr(Value op1,Value op2){\n  return new JShrExpr(op1,op2);\n}\n", "nl": "Constructs a ShrExpr(Immediate, Immediate) grammar chunk.", "id": "48415"}
{"code": "public boolean constFolding(){\n  return constFolding;\n}\n", "nl": "Returns the const folding mode.", "id": "45334"}
{"code": "public void endAddingQueries() throws IOException {\n  getFooterSectionRMA6().setEndReadsSection(readerWriter.getPosition());\n  getFooterSectionRMA6().setNumberOfReads(totalNumberOfReads);\n  getFooterSectionRMA6().setNumberOfMatches(totalNumberOfMatches);\n}\n", "nl": "finish creating the file. Assumes that the footer section has been set appropriately", "id": "16879"}
{"code": "public PhotosReorderPhotosQuery before(Integer value){\n  return unsafeParam(\"before\",value);\n}\n", "nl": "ID of the photo before which the photo in question shall be placed.", "id": "23906"}
{"code": "@Override public ExpressionResult evaluate(RowIntf value) throws FilterUnsupportedException, FilterIllegalMemberException {\n  return new ExpressionResult(DataType.BOOLEAN,false);\n}\n", "nl": "This method will always return false, mainly used in the filter expressions which are illogical. eg: columnName NOT IN('Java',NULL)", "id": "25299"}
{"code": "public VideoGetCommentsQueryWithExtended offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of comments.", "id": "8042"}
{"code": "private String emailToString(String subject,String msg,String... to){\n  return \"[\" + msg + \"] to \"+ Arrays.asList(to)+ \" with subject [\"+ subject+ \"]\";\n}\n", "nl": "Just a helper method which makes the logging of an email easier.", "id": "53059"}
{"code": "private void registerTaskInstances(){\n  for (  TaskFromDBTrigger trigger : tasksList) {\n    if (trigger.isValid()) {\n      trigger.initTrigger();\n    }\n else {\n      log.error(\"Cannot load task from db with ID: \" + trigger.getTaskId());\n    }\n  }\n}\n", "nl": "Launching & checking task process", "id": "37396"}
{"code": "protected int processChar(){\n  return 0;\n}\n", "nl": "Return a character value for the  <code>read()</code> method. <p> This implementation returns zero.", "id": "46025"}
{"code": "public String toString(){\n  return new String(cbuf,root.startIndex,root.endIndex - root.startIndex);\n}\n", "nl": "Returns a raw string extracted from the source string that covers the start and end index of this object.", "id": "13037"}
{"code": "@Override public void close(){\n  if (rf != null)   rf.close();\n}\n", "nl": "Closes the index by closing the current table scan.", "id": "47200"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Slow_END_A_TO_SELF(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200782,skilltarget);\n}\n", "nl": "[%SkillTarget] restored its attack speed.", "id": "26984"}
{"code": "public void clear(){\n  super.clear();\n  location=null;\n}\n", "nl": "erase the block", "id": "2659"}
{"code": "public Builder trackResize(Boolean trackResize){\n  this.trackResize=trackResize;\n  return this;\n}\n", "nl": "Whether the map automatically handles browser window resize to update itself. default true", "id": "58021"}
{"code": "public String tableName(){\n  return tblName;\n}\n", "nl": "Returns the name of the affected table.", "id": "27841"}
{"code": "private void checkConfiguration(){\n  if (configuration == null) {\n    throw new IllegalStateException(ERROR_NOT_INIT);\n  }\n}\n", "nl": "Checks if ImageLoader's configuration was initialized", "id": "26658"}
{"code": "private void checkDifferState(){\n  differObserver.operationCount=0;\n  testAdapter.registerAdapterDataObserver(differObserver);\n  testAdapter.notifyModelsChanged();\n  testAdapter.unregisterAdapterDataObserver(differObserver);\n  Assert.assertEquals(\"Should not have any operations\",0,differObserver.operationCount);\n}\n", "nl": "Make sure that the differ is in a correct state, and then running it produces no changes.", "id": "3311"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_NONE_REPEATABLE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300599,value0);\n}\n", "nl": "You can do the %0 quest only once.", "id": "27980"}
{"code": "public int size(){\n  return summonTemplates.size();\n}\n", "nl": "Size of summon templates", "id": "1336"}
{"code": "public String tableName(){\n  return tblName;\n}\n", "nl": "Returns the name of the new table.", "id": "31609"}
{"code": "public static void debugLongInfo(String str){\n  debugLongInfo(DEFAULT_TAG,str);\n}\n", "nl": "author  hhj TODO", "id": "45793"}
{"code": "public void removeClassLoaderStateListener(Long classLoaderKey,IClassLoaderCacheStateListener listener){\n  ClassLoaderContext classLoaderContext=_classLoaders.get(classLoaderKey);\n  if (classLoaderContext == null)   return;\n  classLoaderContext.removeListener(listener);\n}\n", "nl": "Remove a specific listener from a specific class listener", "id": "41649"}
{"code": "protected void drawYAxis(Graphics2D gc,Dimension size){\n}\n", "nl": "draw the y-axis", "id": "12669"}
{"code": "public static String generateKey(String imageUri,ImageSize targetSize){\n  return new StringBuilder(imageUri).append(URI_AND_SIZE_SEPARATOR).append(targetSize.getWidth()).append(WIDTH_AND_HEIGHT_SEPARATOR).append(targetSize.getHeight()).toString();\n}\n", "nl": "Generates key for memory cache for incoming image (URI + size).<br /> Pattern for cache key - <b>[imageUri]_[width]x[height]</b>.", "id": "49778"}
{"code": "public static final MediaFormat createSubtitleFormat(String title,String language){\n  MediaFormat format=new MediaFormat();\n  format.setString(KEY_TITLE,title);\n  format.setString(KEY_LANGUAGE,language);\n  return format;\n}\n", "nl": "Creates a minimal subtitle format.", "id": "41836"}
{"code": "protected FriendsDeleteListQuery listId(int value){\n  return unsafeParam(\"list_id\",value);\n}\n", "nl": "ID of the friend list to delete.", "id": "39176"}
{"code": "@Before public void beforeTest(){\n  removeTestData();\n}\n", "nl": "Removes test values from previous tests in case clean up failed.", "id": "44212"}
{"code": "public static String removeExtraSpaces(String text){\n  text=text.replace(ChineseLanguageConstants.SPACE[0],ChineseLanguageConstants.SPACE[1]);\n  text=text.replaceAll(\"[ \\t\\u000B\\u000C\\u00A0\\uE5F1]+\",\" \");\n  text=text.replaceAll(\"(^ +)|( +$)\",\"\");\n  return text;\n}\n", "nl": "Remove extra spaces, which means more than one continuous spaces will be reduced to one space. Space here is not limited to the %32 white space character, it also includes TAB, space in Chinese full width letter and other special characters which appear as a white space. Spaces in the begin or end of a line are all removed.", "id": "28606"}
{"code": "public static void decorate(IDecoration decoration,IDecoratorComponent[][] format,Map bindings){\n  String[] prefixSuffix=decorate(format,bindings);\n  decoration.addPrefix(prefixSuffix[0]);\n  decoration.addSuffix(prefixSuffix[1]);\n}\n", "nl": "add a prefix and a suffix depending on format string and the bindings", "id": "6807"}
{"code": "public void init$Children(){\n  children=new ASTNode[5];\n  setChild(new Opt(),1);\n  setChild(new List(),2);\n  setChild(new List(),3);\n  setChild(new List(),4);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "56769"}
{"code": "private void recordUserActionDuringTabRestore(int action){\n  assert action >= 0 && action < USER_ACTION_DURING_RESTORE_MAX;\n  RecordHistogram.recordEnumeratedHistogram(\"Tab.RestoreUserPersistence\",action,USER_ACTION_DURING_RESTORE_MAX);\n}\n", "nl": "Logs action to a UMA histogram.", "id": "11504"}
{"code": "public VideoGetQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of videos.", "id": "40708"}
{"code": "@Override public void emptyElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {\n  if (fNamespaces) {\n    handleStartElement(element,attributes,augs,true);\n    handleEndElement(element,augs,true);\n  }\n else   if (fDocumentHandler != null) {\n    fDocumentHandler.emptyElement(element,attributes,augs);\n  }\n}\n", "nl": "An empty element.", "id": "32072"}
{"code": "public boolean simple_edges_bidirectional(){\n  return soot.PhaseOptions.getBoolean(options,\"simple-edges-bidirectional\");\n}\n", "nl": "Simple Edges Bidirectional -- Equality-based analysis between variable nodes. When this option is set to true, all edges connecting variable  (Green) nodes are made bidirectional, as in Steensgaard's  analysis.", "id": "56688"}
{"code": "public static long nowInMillis(){\n  return System.currentTimeMillis();\n}\n", "nl": "Current time from some fixed base time - so useful for cross machine comparison", "id": "43914"}
{"code": "public boolean canGetString(){\n  return true;\n}\n", "nl": "Indicates if convenience get method can be called without an exception being thrown for the String type.", "id": "21710"}
{"code": "protected void removeAt(int index){\n  _values[index]=null;\n  super.removeAt(index);\n}\n", "nl": "removes the mapping at <tt>index</tt> from the map.", "id": "10878"}
{"code": "@Nullable public DragHandler createDragHandler(@NotNull ViewEditor editor,@NotNull NlComponent layout,@NotNull List<NlComponent> components,@NotNull DragType type){\n  return null;\n}\n", "nl": "Creates a new drag handler for this view, if the view accepts children or allows them to be reconfigured.", "id": "28127"}
{"code": "@Override public Object asJavaVal(){\n  return val;\n}\n", "nl": "Unwraps the string and returns it.", "id": "23656"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPAttack_INTERVAL_TO_B(String skilltarget,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201210,skilltarget,num0,skillname);\n}\n", "nl": "[%SkillTarget]'s MP decreased by %num0 due to the effect of [%SkillName].", "id": "14761"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostHealEffect_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200331,skillname);\n}\n", "nl": "You boosted your recovery by using [%SkillName].", "id": "15962"}
{"code": "protected boolean isValidLine(String line){\n  return true;\n}\n", "nl": "Overridable method to validate each line that is returned. This implementation always returns true.", "id": "57003"}
{"code": "public boolean isFullyZoomedOut(){\n  return (isFullyZoomedOutX() && isFullyZoomedOutY());\n}\n", "nl": "if the chart is fully zoomed out, return true", "id": "46895"}
{"code": "@Override public void onRequestInitiated(int code){\n  if (code == ConnectAPI.COUPON_CODE) {\n    progressDialog.setMessage(\"Loading coupons...\");\n    progressDialog.show();\n  }\n}\n", "nl": "Show progress dialog when request is made to the server.", "id": "2992"}
{"code": "public BoardAddTopicQuery addTopic(UserActor actor,int groupId,String title){\n  return new BoardAddTopicQuery(getClient(),actor,groupId,title);\n}\n", "nl": "Creates a new topic on a community's discussion board.", "id": "35055"}
{"code": "public FaveAddLinkQuery addLink(UserActor actor,String link){\n  return new FaveAddLinkQuery(getClient(),actor,link);\n}\n", "nl": "Adds a link to user faves.", "id": "47559"}
{"code": "public int elementAt(int depth){\n  return fData[depth];\n}\n", "nl": "Returns the element at the specified depth in the stack.", "id": "41920"}
{"code": "void clear(){\n  mTopSection.clear();\n  mMiddleSection.clear();\n  mBottomSection.clear();\n}\n", "nl": "Clear everything so that it doesn't have any entry.", "id": "57680"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "2358"}
{"code": "public boolean removeNode(Node n){\n  nodeCheck(n,true);\n  return removeNode(n.getRow());\n}\n", "nl": "Remove a node from the graph, also removing all incident edges.", "id": "15058"}
{"code": "public void removeAt(int index){\n  System.arraycopy(mKeys,index + 1,mKeys,index,mSize - (index + 1));\n  System.arraycopy(mValues,index + 1,mValues,index,mSize - (index + 1));\n  --mSize;\n}\n", "nl": "Removes the mapping at the given index.", "id": "47101"}
{"code": "public static void w(String tag,String msg){\n  if (LOG_ENABLE) {\n    Log.w(tag,buildMsg(msg));\n  }\n}\n", "nl": "warning log", "id": "56205"}
{"code": "public static void initWithBuilder(@NonNull Builder builder){\n  if (builder == null) {\n    throw new IllegalArgumentException(\"Builder must not be null.\");\n  }\n  init(builder.build());\n}\n", "nl": "Initialize Selfie with specified Builder.", "id": "51990"}
{"code": "public synchronized void stop(){\n  if (mStreaming) {\n    if (mMode == MODE_MEDIACODEC_API) {\n      Log.d(TAG,\"Interrupting threads...\");\n      mThread.interrupt();\n      mAudioRecord.stop();\n      mAudioRecord.release();\n      mAudioRecord=null;\n    }\n    super.stop();\n  }\n}\n", "nl": "Stops the stream.", "id": "19414"}
{"code": "public boolean isModified(){\n  return myOriginalEnabled != mySource.isEnabled() || !Objects.equal(myOriginalName,mySource.getDisplayName());\n}\n", "nl": "Determine whether this source has been modified (and we should show apply/reset).", "id": "23080"}
{"code": "private static String[] toSuffixes(String[] extensions){\n  String[] suffixes=new String[extensions.length];\n  for (int i=0; i < extensions.length; i++) {\n    suffixes[i]=\".\" + extensions[i];\n  }\n  return suffixes;\n}\n", "nl": "Converts an array of file extensions to suffixes for use with IOFileFilters.", "id": "46383"}
{"code": "protected void handleFile(File file,int depth,Collection<T> results) throws IOException {\n}\n", "nl": "Overridable callback method invoked for each (non-directory) file. <p> This implementation does nothing.", "id": "9244"}
{"code": "public synchronized boolean wasDoubleClicked(){\n  return this.value == 2;\n}\n", "nl": "Returns true if this mouse button was double clicked. <p> Returns false if the button was single/triple/etc clicked or is currently waiting to be released.", "id": "41409"}
{"code": "public boolean isDeletedByOwnTxn(){\n  return m_DeletedByOwnTxn;\n}\n", "nl": "Check if deleted in the same transaction.", "id": "58770"}
{"code": "@Override public void justSelected(){\n  setCachedExpression(generateExpression());\n  checkSymbolIsValid();\n}\n", "nl": "Method called when the field has been selected from a combo box and may need to be initialised", "id": "22068"}
{"code": "public void unregister(Object recipient){\n  unregisterFromLists(recipient,recipientsOfSubclassesAction);\n  unregisterFromLists(recipient,recipientsStrictAction);\n  cleanup();\n}\n", "nl": "Unregister the receiver such as: Messenger.getDefault().unregister(this)\" in onDestroy in the Activity is required avoid to memory leak!", "id": "38038"}
{"code": "public static <T>Observable<T> whileDo(ObservableSource<? extends T> source,BooleanSupplier preCondition){\n  ObjectHelper.requireNonNull(source,\"source is null\");\n  ObjectHelper.requireNonNull(preCondition,\"preCondition is null\");\n  return RxJavaPlugins.onAssembly(new ObservableWhileDoWhile<T>(source,preCondition,preCondition));\n}\n", "nl": "Return an Observable that re-emits the emissions from the source Observable as long as the condition is true before the first or subsequent subscribe() calls. <p> <img width=\"640\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/whileDo.png\" alt=\"\">", "id": "733"}
{"code": "public boolean isDimensional(){\n  return !getDataElements().isEmpty() && (columnDimensions.contains(CATEGORYOPTIONCOMBO_DIM_ID) || rowDimensions.contains(CATEGORYOPTIONCOMBO_DIM_ID));\n}\n", "nl": "Indicates whether this ReportTable is multi-dimensional.", "id": "37595"}
{"code": "public boolean isReady(){\n  return this.record.isReady();\n}\n", "nl": "Return whether the list data has been loaded from the server", "id": "55557"}
{"code": "public ByteVector putByte(final int b){\n  int length=this.length;\n  if (length + 1 > data.length) {\n    enlarge(1);\n  }\n  data[length++]=(byte)b;\n  this.length=length;\n  return this;\n}\n", "nl": "Puts a byte into this byte vector. The byte vector is automatically enlarged if necessary.", "id": "39882"}
{"code": "@Override public int read() throws IOException {\n  if (this.remaining == 0) {\n    return -1;\n  }\n else {\n    int var1=this.in.read();\n    if (var1 >= 0) {\n      --this.remaining;\n    }\n    return var1;\n  }\n}\n", "nl": "Below method will be used to read the data from file", "id": "27035"}
{"code": "protected VideoRestoreQuery videoId(int value){\n  return unsafeParam(\"video_id\",value);\n}\n", "nl": "Video ID.", "id": "9764"}
{"code": "public void normal(){\n}\n", "nl": "normal status", "id": "39775"}
{"code": "public static void close(URLConnection conn){\n  if (conn instanceof HttpURLConnection) {\n    ((HttpURLConnection)conn).disconnect();\n  }\n}\n", "nl": "Closes a URLConnection.", "id": "38193"}
{"code": "public static Field createAsExtension(MessageType parent,Extension extension,String path,String name){\n  Field field=new Field(parent,extension.getProto(),path,null,name);\n  field.getFile().addExtension(extension,field);\n  return field;\n}\n", "nl": "Creates a field that represents an extension.", "id": "42497"}
{"code": "@Override public void populateExpression(Object objValue){\n  if (windBarbsPanel != null) {\n    if (objValue instanceof String) {\n      windBarbsPanel.populateExpression((String)objValue);\n    }\n  }\n}\n", "nl": "Populate expression.", "id": "33229"}
{"code": "void remask(){\n  if (parsedFormatInfo == null) {\n    return;\n  }\n  DataMask dataMask=DataMask.forReference(parsedFormatInfo.getDataMask());\n  int dimension=bitMatrix.getHeight();\n  dataMask.unmaskBitMatrix(bitMatrix,dimension);\n}\n", "nl": "Revert the mask removal done while reading the code words. The bit matrix should revert to its original state.", "id": "31778"}
{"code": "public static void main(final String[] args){\n  final java.util.List<String> medals=new java.util.ArrayList<>();\n  medals.add(\"gold\");\n  medals.add(\"silver\");\n  medals.add(\"bronze\");\n  medals.forEach(null);\n}\n", "nl": "main method.", "id": "39129"}
{"code": "@Override public boolean equals(Object dataTag){\n  if (dataTag instanceof AbstractTagCacheObject) {\n    return this.id.equals(((AbstractTagCacheObject)dataTag).getId());\n  }\n else {\n    return false;\n  }\n}\n", "nl": "only compare ids so far", "id": "58668"}
{"code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0,0.0282475249,0.1129900996,0.252815347855,0.420605645761,0.584201186219,0.721621440204,0.824686630693,0.895359904171,0.940414116013,0.967446643119,0.982855183569,0.991259841996};\n}\n", "nl": "Creates the default cumulative probability density test expected values", "id": "49507"}
{"code": "public static boolean isChinese(int codePoint){\n  return codePoint >= ChineseLanguageConstants.CHINESE_START && codePoint <= ChineseLanguageConstants.CHINESE_END;\n}\n", "nl": "Use code point of a character to decide if it is a Chinese character", "id": "1218"}
{"code": "public void clearLineConfigs(){\n  mLinesConfig.clear();\n}\n", "nl": "Removes all existing lines in the line chart.", "id": "5740"}
{"code": "public static final Vector2 show(Window owner){\n  ApplyForceDialog afd=new ApplyForceDialog(owner);\n  afd.setLocationRelativeTo(owner);\n  afd.setVisible(true);\n  if (!afd.canceled) {\n    return afd.forcePanel.getForce();\n  }\n  return null;\n}\n", "nl": "Shows a dialog used to accept input for applying a force to a body. <p> Returns null if the dialog is closed or canceled.", "id": "34252"}
{"code": "public long value(){\n  return _map._values[_index];\n}\n", "nl": "Provides access to the value of the mapping at the iterator's position. Note that you must <tt>advance()</tt> the iterator at least once before invoking this method.", "id": "42843"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_ABSORBED_OTHER_NPC(String skilltarget,String skillcaster){\n  return new SM_SYSTEM_MESSAGE(1260222,skilltarget,skillcaster);\n}\n", "nl": "[%SkillTarget] absorbed [%SkillCaster]'s magic.", "id": "36879"}
{"code": "public boolean contains(Object o){\n  if (o == null)   return false;\n  return map.containsKey(o);\n}\n", "nl": "Returns <tt>true</tt> if this set contains the specified element.", "id": "30181"}
{"code": "public static Module load(int id){\n  return modules.get(id);\n}\n", "nl": "load the module by id", "id": "45208"}
{"code": "public void onSuccess(int statusCode,Header[] headers,JSONArray response){\n  onSuccess(statusCode,response);\n}\n", "nl": "Fired when a request returns successfully and contains a json array at the base of the response string. Override to handle in your own code.", "id": "10484"}
{"code": "public boolean this_edges(){\n  return soot.PhaseOptions.getBoolean(options,\"this-edges\");\n}\n", "nl": "this Pointer Assignment Edge -- Use pointer assignment edges to model this parameters. When constructing a call graph on-the-fly during points-to  analysis, Paddle normally propagates only those receivers that  cause a method to be invoked to the this pointer of the method.  When this option is set to true, however, Paddle instead models  flow of receivers as an assignnment edge from the receiver at  the call site to the this pointer of the method, reducing  precision.", "id": "7995"}
{"code": "public void leftTrim(double second){\n  trim(second,0);\n}\n", "nl": "Trim the wave data from beginning", "id": "24751"}
{"code": "public boolean isFinal(){\n  return Modifier.isFinal(this.getModifiers());\n}\n", "nl": "Convenience method returning true if this class is final.", "id": "38576"}
{"code": "public synchronized void activityStop(){\n  if (this.spinnerDialog != null) {\n    this.spinnerDialog.dismiss();\n    this.spinnerDialog=null;\n  }\n}\n", "nl": "Stop spinner.", "id": "51798"}
{"code": "public static Predicate<ItemStack> matcherOf(ItemStack value){\n  return matcherOf(value,false);\n}\n", "nl": "Creates an NBT-insensitive item stack matcher.", "id": "9525"}
{"code": "public boolean implies(Permission perm){\n  if (!(perm instanceof AuthenticationPermission)) {\n    return false;\n  }\n  AuthenticationPermission ap=(AuthenticationPermission)perm;\n  return (mask & ap.mask) == ap.mask && implies0(ap);\n}\n", "nl": "Returns <code>true</code> if the specified permission is an instance of <code>AuthenticationPermission</code>, and every action included in the specified permission is included as an action of this permission, and every principal that matches the local principals of the specified permission also matches the local principals of this permission, and (if the specified permission has any action besides <code>listen</code>) every principal that matches the peer principals of this permission also matches the peer principals of the specified permission; returns <code>false</code> otherwise.", "id": "3849"}
{"code": "public boolean contains(String key){\n  return preferences.contains(key);\n}\n", "nl": "Remove SharedPreferences item with 'key'", "id": "32628"}
{"code": "public Stream<T> asStream(){\n  final Spliterator<T> spliter=Spliterators.spliteratorUnknownSize(asIterator(),NONNULL | IMMUTABLE | ORDERED);\n  return StreamSupport.stream(spliter,false);\n}\n", "nl": "Adapt the IterQueue as a blocking stream.", "id": "31937"}
{"code": "private void wait_(){\n  final WakeupListener w=new WakeupListener(null);\n  BufferedIterator.this.setWakeup(null);\n  while (!w.isReleasable()) {\n    try {\n      ForkJoinPool.managedBlock(w);\n    }\n catch (    InterruptedException ex) {\n      LOG.log(Level.WARNING,\"interrupted wait\",ex);\n    }\n  }\n}\n", "nl": "Wait for a new element to become available. May be interrupted, in which case it will return before the wakeup arrives.", "id": "29615"}
{"code": "public static ResponseProperties createNotAuthorizedResponse(String statusMessage){\n  return new ResponseProperties(HttpServletResponse.SC_UNAUTHORIZED,statusMessage);\n}\n", "nl": "Create an HTTP Unauthorized response. The calendar converter will use this response when a user is not logged in, and basic CRUD permissions are needed to perform an action. Returning an Unauthorized status will force the client to authenticate the user, then try the operation again.", "id": "38523"}
{"code": "public void addAll(Collection<FeatureFlag> featureFlags){\n  featureFlags.stream().forEach(null);\n}\n", "nl": "Register all of the feature flags.", "id": "44002"}
{"code": "private void extractProtocolFilter(){\n  int protocolIndex=this.matchTo.indexOf(PROTOCOL_ENDING);\n  if (protocolIndex != -1) {\n    this.protocolFilter=this.matchTo.substring(0,protocolIndex);\n    this.matchTo=this.matchTo.substring(protocolIndex + PROTOCOL_ENDING.length());\n  }\n}\n", "nl": "Extracts the protocol if one is given to initialize the protocol matcher.", "id": "52694"}
{"code": "private void addIdentifierOrKeyword(){\n  int oldPos=pos - 1;\n  String id=scanIdentifier();\n  TokenKind kind=getTokenKindForIdentfier(id);\n  addToken(kind,oldPos,pos,(kind == TokenKind.IDENTIFIER) ? id : null);\n}\n", "nl": "Scans an identifier or keyword. <p>ON ENTRY: 'pos' is 1 + the index of the first char in the identifier. ON EXIT: 'pos' is 1 + the index of the last char in the identifier.", "id": "44150"}
{"code": "@Override public DerivativeStructure log10(){\n  final DerivativeStructure result=new DerivativeStructure(compiler);\n  compiler.log10(data,0,result.data,0);\n  return result;\n}\n", "nl": "Base 10 logarithm.", "id": "52779"}
{"code": "@Override public Pair<Aggregation,Aggregation> nest(){\n  throw new UnsupportedOperationException(\"Cardinality aggregators cannot support dynamic nesting.\");\n}\n", "nl": "Cardinality aggregators cannot be safely nested due to correctness constraints which Bard does not currently support.", "id": "42924"}
{"code": "@NotNull public static ResizePolicy vertical(){\n  return ourVertical;\n}\n", "nl": "Returns a resize policy allowing vertical resizing only", "id": "38354"}
{"code": "public <RES>MatcherNext<RES,ARG> as(Class<RES> dummy){\n  return new MatcherNext<>(arg);\n}\n", "nl": "Shim to set the result type of the extraction. This is useful if you want to return a super class where expressions generate subclasses.", "id": "46306"}
{"code": "protected void registerForSymbolUpdates(List<FieldConfigBase> fieldList,UpdateSymbolInterface obj){\n  for (  FieldConfigBase fieldConfig : fieldList) {\n    if (fieldConfig != null) {\n      fieldConfig.addDataChangedListener(obj);\n    }\n  }\n}\n", "nl": "Set up listener to this class is aware when user changes the expression so the symbol can be redrawn.", "id": "42755"}
{"code": "public GroupsSetCallbackSettingsQuery boardPostNew(Boolean value){\n  return unsafeParam(\"board_post_new\",value);\n}\n", "nl": "New board posts notifications.", "id": "332"}
{"code": "public void listAlphabeticWords(){\n  for (  Node n : root.children)   n.listAlphabeticWords(new LinkedList<Character>());\n}\n", "nl": "Lists all the words of the lexicon in alphabetic order.", "id": "32510"}
{"code": "Landlord landlord(){\n  return landlord;\n}\n", "nl": "Return the landlord.", "id": "53508"}
{"code": "@SuppressWarnings(\"unchecked\") void updateBoxes(){\n  Value val=stackOrValue();\n  if (boxes instanceof List) {\n    for (    ValueBox vb : (List<ValueBox>)boxes)     vb.setValue(val);\n  }\n else   if (boxes instanceof ValueBox) {\n    ((ValueBox)boxes).setValue(val);\n  }\n}\n", "nl": "Updates all value boxes registered to this operand.", "id": "8118"}
{"code": "public void put(final CharSequence key,final Object value){\n  this.additionalData.put(key,value);\n}\n", "nl": "Attach a new metadata to the feedback", "id": "33506"}
{"code": "public void abort() throws IOException {\n  completeEdit(this,false);\n}\n", "nl": "Aborts this edit. This releases the edit lock so another edit may be started on the same key.", "id": "55826"}
{"code": "private void applyWindowFunction(double[] data){\n  if (windowFunctionType != WND_NONE) {\n    for (int i=0; i < data.length; i++)     data[i]*=windowFunction[i];\n  }\n}\n", "nl": "Applies a window function to an array of data, storing the result in the data array. Performs a dot product of the data and window arrays.", "id": "56779"}
{"code": "public static StorableTimeFence inSundayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(SUNDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n", "nl": "Creates a storable time fence which will be valid on Sunday in the given daily time frame", "id": "52021"}
{"code": "@Override public void abort() throws IOException {\n  super.abort();\n}\n", "nl": "Close the stream without necessarily flushing immediately. This may be called if the stream is in error such as after a previous write or close threw an exception.", "id": "4961"}
{"code": "public static double pow(double d,int e){\n  return pow(d,(long)e);\n}\n", "nl": "Raise a double to an int power.", "id": "45752"}
{"code": "public static String separatorsToUnix(String path){\n  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {\n    return path;\n  }\n  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);\n}\n", "nl": "Converts all separators to the Unix separator of forward slash.", "id": "29623"}
{"code": "public static boolean canRun(){\n  if (ourInitialCheck == null) {\n    ourInitialCheck=checkHaxmInstallation();\n  }\nswitch (ourInitialCheck) {\ncase NO_EMULATOR_INSTALLED:\ncase UNKNOWN_ERROR:\n    return SystemInfo.isMac || SystemInfo.isWindows;\ncase NOT_ENOUGH_MEMORY:\ncase ALREADY_INSTALLED:\n  return false;\ndefault :\nswitch (ourInitialCheck.getSolution()) {\ncase INSTALL_HAXM:\ncase REINSTALL_HAXM:\n  return true;\ndefault :\nreturn false;\n}\n}\n}\n", "nl": "Return true if it is possible to install Haxm on the current machine without any other configuration changes.", "id": "21057"}
{"code": "public SiteAdminPage createNewPageReusingDialog(String title,String templateName){\n  createPageWindow.createPage(title,templateName);\n  grid.waitForLoaderNotPresent();\n  return this;\n}\n", "nl": "Assumes that the \"Create Page\" dialog has been already opened and creates a new page based on provided the values. During creation specified template is used in CreatePageWindow.", "id": "41420"}
{"code": "public boolean isEmpty(){\n  return size() == 0;\n}\n", "nl": "Returns true if the list is empty", "id": "35310"}
{"code": "public boolean isUptoDate(){\n  return this.uptodate;\n}\n", "nl": "is viewer uptodate?", "id": "31036"}
{"code": "public static SharePasswordDialogFragment newInstance(OCFile file,boolean createShare){\n  SharePasswordDialogFragment frag=new SharePasswordDialogFragment();\n  Bundle args=new Bundle();\n  args.putParcelable(ARG_FILE,file);\n  args.putBoolean(ARG_CREATE_SHARE,createShare);\n  frag.setArguments(args);\n  return frag;\n}\n", "nl": "Public factory method to create new SharePasswordDialogFragment instances.", "id": "8155"}
{"code": "@Override public void any(Augmentations augs) throws XNIException {\n  if (fDTDGrammar != null)   fDTDGrammar.any(augs);\n  if (fDTDContentModelHandler != null) {\n    fDTDContentModelHandler.any(augs);\n  }\n}\n", "nl": "A content model of ANY.", "id": "47161"}
{"code": "private void recordSimpleResourceEdit(){\nsynchronized (myLock) {\n    mySeenLocalResourceChanges=true;\n  }\n}\n", "nl": "Called when we've noticed an edit of a resource file that is in an app module", "id": "7288"}
{"code": "private void openDownloadsPage(Context context){\n  Intent pageView=new Intent(DownloadManager.ACTION_VIEW_DOWNLOADS);\n  pageView.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n  try {\n    context.startActivity(pageView);\n  }\n catch (  ActivityNotFoundException e) {\n    Log.e(TAG,\"Cannot find Downloads app\",e);\n  }\n}\n", "nl": "Open the Activity which shows a list of all downloads.", "id": "9912"}
{"code": "@Override public double[] makeInverseCumulativeTestPoints(){\n  double[] points=makeCumulativeTestValues();\n  double[] points2=new double[points.length - 2];\n  System.arraycopy(points,1,points2,0,points2.length);\n  return points2;\n}\n", "nl": "Creates the default inverse cumulative probability distribution test input values.", "id": "25254"}
{"code": "public void reset(){\n  this.normalizedValue=null;\n  this.actualValue=null;\n  this.actualValueType=XSConstants.UNAVAILABLE_DT;\n  this.actualType=null;\n  this.memberType=null;\n  this.memberTypes=null;\n  this.itemValueTypes=null;\n}\n", "nl": "reset the state of this object", "id": "5881"}
{"code": "public GroupsBanUserQuery endDate(Integer value){\n  return unsafeParam(\"end_date\",value);\n}\n", "nl": "Date (in Unix time) when the user will be removed from the blacklist.", "id": "15191"}
{"code": "@Override public void unindent(){\n  _nextIndent-=_format.getIndent();\n  if (_nextIndent < 0)   _nextIndent=0;\n  if ((_line.length() + _spaces + _text.length()) == 0)   _thisIndent=_nextIndent;\n}\n", "nl": "Decrement the indentation for the next line.", "id": "14381"}
{"code": "public static void v(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_VERBOSE) {\n    return;\n  }\n  Log.v(tag,msg,throwable);\n}\n", "nl": "Send a VERBOSE log message.", "id": "13834"}
{"code": "boolean doesProfileMatch(Experiment experiment,SegmentationProfile segmentationProfile,HttpHeaders headers,Context context){\n  return doesProfileMatch(experiment,segmentationProfile,headers,context,false);\n}\n", "nl": "This method is called to check if the current user is selected by this experiment's segmentation rule by checking if the user's segmentation profile values cause the rule to evaluate to true. The headers and context are passed because they can be used in the rule automatically. NOTE: This version will check the parsed version of the rule that is cached in memory on this system, if available.", "id": "118"}
{"code": "public boolean remove(int val){\n  int index=index(val);\n  if (index >= 0) {\n    removeAt(index);\n    return true;\n  }\n  return false;\n}\n", "nl": "Removes <tt>val</tt> from the set.", "id": "48423"}
{"code": "@Override public void populateField(String value){\n  StyleBuilder styleBuilder=new StyleBuilder();\n  Font font=styleBuilder.createFont(defaultValue,DEFAULT_FONT_SIZE);\n  populateField(font);\n}\n", "nl": "Populate string field, overridden if necessary.", "id": "6427"}
{"code": "public Builder popupAnchor(Point popupAnchor){\n  this.popupAnchor=popupAnchor;\n  return this;\n}\n", "nl": "The coordinates of the point from which popups will \"open\", relative to the icon anchor.", "id": "65"}
{"code": "public boolean enabled(){\n  return soot.PhaseOptions.getBoolean(options,\"enabled\");\n}\n", "nl": "Enabled -- .", "id": "56482"}
{"code": "public Builder withFindOnlyReferences(boolean findOnlyReferences){\n  myFindOnlyReferences=findOnlyReferences;\n  return this;\n}\n", "nl": "With this option the template rendering will not create files but only gather references. Default: false", "id": "31025"}
{"code": "public Activity runAfter(String beforeKey,String afterKey){\n  Activity before=get(beforeKey);\n  Activity after=get(afterKey);\n  if (before != null && after != null)   ActivityManager.scheduleAfter(before,after);\n  return after;\n}\n", "nl": "Schedules the Activity corresponding to the afterKey to be run immediately after the completion of the Activity corresponding to  the beforeKey. This method has no scheduling effect on the Activity corresponding to the before key.", "id": "2558"}
{"code": "public WindowInsetsCompat onApplyWindowInsets(CoordinatorLayout coordinatorLayout,V child,WindowInsetsCompat insets){\n  return insets;\n}\n", "nl": "Called when the window insets have changed. <p>Any Behavior associated with the direct child of the CoordinatorLayout may elect to handle the window inset change on behalf of it's associated view. </p>", "id": "36832"}
{"code": "public static CompressionCodec.Type stringToType(String compressionString){\n  if (compressionString.equals(LZ4)) {\n    return CompressionCodec.Type.LZ4;\n  }\n else   if (compressionString.equals(NONE)) {\n    return CompressionCodec.Type.NONE;\n  }\n else {\n    return CompressionCodec.Type.UNKNOWN;\n  }\n}\n", "nl": "Compression type value from string.", "id": "8976"}
{"code": "public void stopRecording(){\n  if (this.recorder != null) {\n    try {\n      if (this.state == STATE.MEDIA_RUNNING) {\n        this.recorder.stop();\n        this.setState(STATE.MEDIA_STOPPED);\n      }\n      this.recorder.reset();\n      this.moveFile(this.audioFile);\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n", "nl": "Stop recording and save to the file specified when recording started.", "id": "14600"}
{"code": "public final boolean isOverridingTarget(){\n  return (myOverride & CFG_TARGET) != 0;\n}\n", "nl": "Returns true if the target is overridden", "id": "54316"}
{"code": "private void createUI(){\n  readConfigFile(null,this,\"NamedLayer.xml\");\n}\n", "nl": "Creates the ui.", "id": "6744"}
{"code": "protected static int bandwidth2kernelLength(double normalisedTransitionBandwidth){\n  int l=(int)(4 / normalisedTransitionBandwidth);\n  if (l % 2 == 0)   l++;\n  return l;\n}\n", "nl": "Convert from normalisedTransitionBandwidth to filter kernel length, using the approximate formula l = 4/bw.", "id": "40925"}
{"code": "public <R>Plan<R> then(Function<? super T,? extends R> selector){\n  return JoinPatterns.then(o,selector);\n}\n", "nl": "Matches when the Observable has an available item and projects the item by invoking the selector function. <p> <img width=\"640\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/and_then_when.png\" alt=\"\">", "id": "29789"}
{"code": "public static String toString(String[] stringArray){\n  return toString(stringArray,0);\n}\n", "nl": "Combine the elements of the given string array into a single string, containing one array element per line.", "id": "22330"}
{"code": "private static String timeOfDay(int hour,int min){\n  int hh=hour;\n  if (min > 58)   hh++;\n  if (hh == 24) {\n    return \"\";\n  }\n else   if (hh > 17) {\n    return \"in the evening\";\n  }\n else   if (hh > 11) {\n    return \"in the afternoon\";\n  }\n else {\n    return \"in the morning\";\n  }\n}\n", "nl": "Returns a phrase that conveys the time of day.", "id": "18090"}
{"code": "@Override public boolean isDataSource(){\n  return false;\n}\n", "nl": "Returns if files selected are a data source, e.g. raster or vector.", "id": "57021"}
{"code": "private static Throwable extractException(Exception ex){\n  if (ex instanceof UnableToTakeScreenshotException) {\n    return ex.getCause();\n  }\n  return ex;\n}\n", "nl": "Method to avoid multiple wrapping. If there is already our exception, just wrap the cause again", "id": "632"}
{"code": "public boolean vta(){\n  return soot.PhaseOptions.getBoolean(options,\"vta\");\n}\n", "nl": "VTA -- Emulate Variable Type Analysis. Setting VTA to true has the effect of setting field-based,  types-for-sites, and simplify-sccs to true, and on-fly-cg to  false, to simulate Variable Type Analysis, described in our  OOPSLA 2000 paper. Note that the algorithm differs from the  original VTA in that it handles array elements more precisely.", "id": "23054"}
{"code": "public IntIterator outEdgeRows(int node){\n  return edgeRows(node,OUTEDGES);\n}\n", "nl": "Get an iterator over all edges that have the given node as a source. That is, edges that link out from the given source node.", "id": "48821"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_A_TO_SELF(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200873,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] absorbed %num0 HP by using [%SkillName].", "id": "30293"}
{"code": "private void processXMLForClass(SootClass c){\n  final int format=Options.v().output_format();\n  String fileName=SourceLocator.v().getFileNameFor(c,format);\n  XMLAttributesPrinter xap=new XMLAttributesPrinter(fileName,SourceLocator.v().getOutputDir());\n  xap.printAttrs(c);\n}\n", "nl": "assumption: only called when <code>Options.v().output_format() == Options.output_format_jimple</code>", "id": "49404"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcDPHeal_Instant_HEAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201238,skilltarget,num0,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] recovered %num0 DP because [%SkillCaster] used [%SkillName].", "id": "12434"}
{"code": "@Override public String substringData(int offset,int count) throws DOMException {\n  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,\"Method not supported\");\n}\n", "nl": "Extracts a range of data from the node.", "id": "36476"}
{"code": "public void sort(){\n  Arrays.sort(_data,0,_pos);\n}\n", "nl": "Sort the values in the list (ascending) using the Sun quicksort implementation.", "id": "16093"}
{"code": "public Future<ProcessResult> startDetached() throws RabbitMqCommandException {\n  return execute(\"-detached\");\n}\n", "nl": "Start the RabbitMq Server in a detached state. <p> This means the process will exit immediately and no PID file will be written to file.", "id": "39331"}
{"code": "@Nullable public static Color resolveColor(@NotNull RenderResources resources,@Nullable ResourceValue colorValue,@NotNull Project project){\n  return resolveColor(resources,colorValue,project,0);\n}\n", "nl": "Tries to resolve the given resource value to an actual RGB color. For state lists it will pick the simplest/fallback color.", "id": "23358"}
{"code": "private void checkAndWriteDictionaryChunkToFile() throws IOException {\n  if (oneDictionaryChunkList.size() >= dictionary_one_chunk_size) {\n    writeDictionaryFile();\n    createChunkList();\n  }\n}\n", "nl": "check if the threshold has been reached for the number of values that can kept in memory and then flush the data to file", "id": "27845"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_EQUIP_ITEM(DescriptionId descriptionId){\n  return new SM_SYSTEM_MESSAGE(1300593,descriptionId);\n}\n", "nl": "You can only receive this quest when you are equipped with %0.", "id": "45488"}
{"code": "public void checkWarnings(){\n}\n", "nl": "Checking of the SafeVarargs annotation is only needed for method declarations.", "id": "34926"}
{"code": "@Deprecated public boolean isReverseOrder(){\n  return mIsReversed;\n}\n", "nl": "Check the ordering for the orderer.", "id": "19163"}
{"code": "public boolean simulate_natives(){\n  return soot.PhaseOptions.getBoolean(options,\"simulate-natives\");\n}\n", "nl": "Simulate Natives -- Simulate effects of native methods in standard class library. When this option is set to true, the effects of native methods  in the standard Java class library are simulated.", "id": "56657"}
{"code": "public GroupsInviteQuery invite(UserActor actor,int groupId,int userId){\n  return new GroupsInviteQuery(getClient(),actor,groupId,userId);\n}\n", "nl": "Allows to invite friends to the community.", "id": "36122"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fear_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200586,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] has made you afraid by using [%SkillName].", "id": "22881"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "19708"}
{"code": "public void insertBefore(E toInsert,E point){\n  point.redirectJumpsToThisTo(toInsert);\n  innerChain.insertBefore(toInsert,point);\n}\n", "nl": "Inserts <code>toInsert</code> in the Chain before <code>point</code>.", "id": "9822"}
{"code": "@Override protected void readImpl(){\n  macroPosition=readC();\n}\n", "nl": "Reading macro id", "id": "31281"}
{"code": "public void init$Children(){\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "47771"}
{"code": "public boolean resourceInitializationException(TypeDecl catchType){\n  ASTNode$State state=state();\n  try {\n    for (    ResourceDeclaration resource : getResourceList()) {\n      if (resource.reachedException(catchType))       return true;\n    }\n    return false;\n  }\n  finally {\n  }\n}\n", "nl": "True if the resource initialization of this try-with-resources statement may throw an exception of type catchType.", "id": "18079"}
{"code": "@Override public boolean equals(Object o){\n  if (o instanceof RepoResult == false) {\n    return false;\n  }\n  RepoResult rr=(RepoResult)o;\n  if (this.getName().equals(rr.getName())) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Required becuse we use this in the UniqueRepoQueue and in a few other places to ensure we don't add multiples of the same repo", "id": "30797"}
{"code": "public SecureSetCounterQuery counters(List<String> value){\n  return unsafeParam(\"counters\",value);\n}\n", "nl": "Set counters", "id": "40651"}
{"code": "public static void drawCenteredString(Graphics2D g,Rectangle rect,String str,boolean horzCentered,boolean vertCentered){\n  UIUtil.drawCenteredString(g,rect,str,horzCentered,vertCentered);\n}\n", "nl": "Draws a centered string in the passed rectangle.", "id": "14691"}
{"code": "public boolean rotateImageBy(int degrees){\n  int newDegrees=(getDegreesRotated() + degrees) % 360;\n  setExifRotation(newDegrees);\n  setDegreesRotated(newDegrees);\n  return true;\n}\n", "nl": "Save the rotated image by updating the Exif \"Orientation\" tag.", "id": "57534"}
{"code": "public boolean isSetTraceId(){\n  return this.traceId != null;\n}\n", "nl": "Returns true if field traceId is set (has been assigned a value) and false otherwise", "id": "20539"}
{"code": "protected static float distance(float eventX,float startX,float eventY,float startY){\n  float dx=eventX - startX;\n  float dy=eventY - startY;\n  return (float)Math.sqrt(dx * dx + dy * dy);\n}\n", "nl": "returns the distance between two points", "id": "30179"}
{"code": "public void reset(){\n  fromIndex=0;\n  toIndex=0;\n}\n", "nl": "Sets the current page position to the first page.", "id": "25868"}
{"code": "private static void expandBelow7DigitNumber(String numberString,WordRelation wordRelation){\n  expandLargeNumber(numberString,\"thousand\",3,wordRelation);\n}\n", "nl": "Expands a string that is a 4 to 6 digits number into a list of English words. For example, \"333000\" into \"three hundred and thirty-three thousand\".", "id": "54020"}
{"code": "public int hashCode(){\n  if (A.nextSetBit(0) < B.nextSetBit(0))   return A.hashCode() + 37 * B.hashCode();\n else   return B.hashCode() + 37 * A.hashCode();\n}\n", "nl": "gets the hash code", "id": "5260"}
{"code": "protected AdsDeleteClientsQuery accountId(int value){\n  return unsafeParam(\"account_id\",value);\n}\n", "nl": "Advertising account ID.", "id": "38602"}
{"code": "@Override public void onDestroy(){\n}\n", "nl": "you should override this method in your code and clean all unused objects, like RxJava's subscriptions etc.", "id": "17117"}
{"code": "public static void clearAllMemory(){\n  ImageLoader.getInstance().getConfig().cache.clearMemory();\n  ImageLoader.getInstance().getConfig().cache.clearDiskMemory();\n}\n", "nl": "clear all memory", "id": "57539"}
{"code": "protected NewsfeedDeleteListQuery listId(int value){\n  return unsafeParam(\"list_id\",value);\n}\n", "nl": "Set list id", "id": "14344"}
{"code": "private static void deleteDirectoryOnExit(File directory) throws IOException {\n  if (!directory.exists()) {\n    return;\n  }\n  directory.deleteOnExit();\n  if (!isSymlink(directory)) {\n    cleanDirectoryOnExit(directory);\n  }\n}\n", "nl": "Schedules a directory recursively for deletion on JVM exit.", "id": "43582"}
{"code": "protected TabDelegate createTabDelegate(boolean incognito){\n  return new TabDelegate(incognito);\n}\n", "nl": "Creates TabDelegates for opening new Tabs.", "id": "55908"}
{"code": "protected GroupsBanUserQuery groupId(int value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "Community ID.", "id": "56894"}
{"code": "private void renameColumn(){\n  tableColumn.setHeaderValue(columnTextField.getText());\n  renamePopup.setVisible(false);\n  columnHeader.repaint();\n}\n", "nl": "Rename column.", "id": "14596"}
{"code": "public static <T extends Comparable<? super T>>List<T> sort(List<T> list){\n  Collections.sort(list);\n  return list;\n}\n", "nl": "Sorts the given list according to its natural sort order and returns it.", "id": "44214"}
{"code": "public void addColour(Color colour){\n  colourList.add(colour);\n}\n", "nl": "Adds the colour.", "id": "31903"}
{"code": "public int updateScrollOffset(int scrollOffset){\n  return mTicklableLayoutManager != null ? mTicklableLayoutManager.updateScrollOffset(scrollOffset) : scrollOffset;\n}\n", "nl": "Update offset to scroll. This will calculate the delta of previous offset and new offset, then apply it to scroll.", "id": "27911"}
{"code": "public void remove(){\n  throw new UnsupportedOperationException();\n}\n", "nl": "Not supported.", "id": "25652"}
{"code": "public int read() throws EOFException {\n  try {\n    int value=array[cursor()];\n    advance(1);\n    return value & 0xffff;\n  }\n catch (  ArrayIndexOutOfBoundsException ex) {\n    throw new EOFException();\n  }\n}\n", "nl": "Reads a code unit.", "id": "46696"}
{"code": "private void triggerExpiredEvent(){\n  if (_listener != null)   _listener.onExpired(this);\n}\n", "nl": "Triggers the source expired event", "id": "6417"}
{"code": "public Map.Entry<K,V> pollLastEntry(){\n  return doRemoveLastEntry();\n}\n", "nl": "Removes and returns a key-value mapping associated with the greatest key in this map, or <tt>null</tt> if the map is empty. The returned entry does <em>not</em> support the <tt>Entry.setValue</tt> method.", "id": "45184"}
{"code": "private EmoResponse toEmoResponse(ClientResponse clientResponse){\n  return new JerseyEmoResponse(clientResponse);\n}\n", "nl": "Returns a thin EmoResponse wrapper around the Jersey response.", "id": "58751"}
{"code": "public synchronized void resetTime(){\n}\n", "nl": "Resets the audio clock", "id": "40168"}
{"code": "public static StorableTimeFence inSaturdayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(SATURDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n", "nl": "Creates a storable time fence which will be valid on Saturday in the given daily time frame", "id": "5358"}
{"code": "private void attachReaderToCatalog(Catalog catalog){\n  SAXParserFactory spf=new SAXParserFactoryImpl();\n  spf.setNamespaceAware(true);\n  spf.setValidating(false);\n  SAXCatalogReader saxReader=new SAXCatalogReader(spf);\n  saxReader.setCatalogParser(OASISXMLCatalogReader.namespaceName,\"catalog\",\"org.apache.xml.resolver.readers.OASISXMLCatalogReader\");\n  catalog.addReader(\"application/xml\",saxReader);\n}\n", "nl": "Attaches the reader to the catalog.", "id": "45335"}
{"code": "public static void main(String[] args){\n  Distribution dDist=new Distribution();\n  dDist.setValue(1,0.9);\n  dDist.setValue(2,0.1);\n  System.out.println(\"Entropy: \" + entropy(dDist));\n}\n", "nl": "Test function. Not to be used.", "id": "9396"}
{"code": "private boolean quietSleep(long ms){\n  try {\n    Thread.sleep(ms);\n  }\n catch (  InterruptedException e) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Wrapper around Thread.sleep() without that annoying InterruptedException.", "id": "44100"}
{"code": "public boolean useRecentDeletes(){\n  return isEvictableCachePolicy() && !_isMemorySA && (!_readOnlySA || _engine.hasMirror());\n}\n", "nl": "returns true if recentDeletes hash in engine need to be used.", "id": "28037"}
{"code": "public static String toString(URL url) throws IOException {\n  return toString(url,Charset.defaultCharset());\n}\n", "nl": "Gets the contents at the given URL.", "id": "25977"}
{"code": "public RequestHandle put(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){\n  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPut(url),entity),contentType,responseHandler,context);\n}\n", "nl": "Perform a HTTP PUT request and track the Android Context which initiated the request. And set one-time headers for the request", "id": "45422"}
{"code": "private static void resync(){\n  setScanner(new Scanner(new java.io.BufferedInputStream(System.in),CHARSET_NAME));\n}\n", "nl": "If StdIn changes, use this to reinitialize the scanner.", "id": "55566"}
{"code": "public boolean isEmpty(){\n  return this.results == null || this.results.isEmpty();\n}\n", "nl": "Gets whether this result object is empty, i.e. contains no information flows", "id": "26460"}
{"code": "private String next(){\n  String current=matcher.group(EXPR_TOKEN_GROUP);\n  matched=matcher.find();\n  return current;\n}\n", "nl": "Get the next token from the stream.", "id": "47319"}
{"code": "public void writeFloat(float value) throws JMSException {\n  initializeWriting();\n  try {\n    this.dataOut.writeFloat(value);\n  }\n catch (  IOException ioe) {\n    JMSException jmsEx=new JMSException(\"Could not write data:\" + ioe.toString());\n    jmsEx.setLinkedException(ioe);\n    throw jmsEx;\n  }\n}\n", "nl": "Converts the <code>float</code> argument to an <code>int</code> using the <code>floatToIntBits</code> method in class <code>Float</code>, and then writes that <code>int</code> value to the bytes message stream as a 4-byte quantity, high byte first.", "id": "6959"}
{"code": "public GroupsGetMembersQueryWithFilter groupId(String value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "ID or screen name of the community.", "id": "57645"}
{"code": "private void showColorSelectDialog(){\n  new ColorSelectDialog.Builder(getContext()).setColors(ColorPalettes.loadMaterialDesignColors500(getContext(),false)).setTitle(R.string.selectiondialogs_color_dialog_title).setSortColorsByName(true).setOnColorSelectedListener(this).build().show(getFragmentManager(),TAG_SELECT_COLOR_DIALOG);\n}\n", "nl": "Shows color selection dialog with default Material Design icons.", "id": "53720"}
{"code": "public static QueueClientFactory forClusterAndHttpClient(String clusterName,Client client){\n  return new QueueClientFactory(clusterName,client);\n}\n", "nl": "Connects to the System of Record using the specified Jersey client.  If you're using Dropwizard, use this factory method and pass the Dropwizard-constructed Jersey client.", "id": "24349"}
{"code": "@Override public String toString(){\n  StringTable stringTable=StringTable.getCurrent();\n  if (stringTable != null) {\n    Node node=stringTable.get(myIdentifier);\n    if (node != null) {\n      return node.getString(myArguments);\n    }\n  }\n  return myIdentifier + \" \" + myArguments;\n}\n", "nl": "Returns the message as a string without any rich-formatting.", "id": "56061"}
{"code": "public Builder errorMessageTextColor(int errorMessageTextColor){\n  this.errorMessageTextColor=errorMessageTextColor;\n  return this;\n}\n", "nl": "Set the error message color", "id": "34019"}
{"code": "private boolean jumpToPage(int position,boolean smooth){\n  if (mShowWelcomePage && !didAcceptTermsOfService()) {\n    return position == 0;\n  }\n  if (position >= mPagerAdapter.getCount()) {\n    completeFirstRunExperience();\n    return false;\n  }\n  mPager.setCurrentItem(position,smooth);\n  return true;\n}\n", "nl": "Transitions to a given page.", "id": "27872"}
{"code": "public boolean canPowerUp(boolean considerMaxCPLimitForPlayerLevel) throws NoSuchItemException {\n  return considerMaxCPLimitForPlayerLevel ? this.canPowerUp() && (this.getCp() < this.getMaxCpForPlayer()) : canPowerUp();\n}\n", "nl": "Check if can powers up this pokemon, you can choose whether or not to consider the max cp limit for current player level passing true to consider and false to not consider.", "id": "57771"}
{"code": "protected MarketEditAlbumQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Collection owner identifier Note that community id in the 'owner_id' parameter should be negative number. For example 'owner_id'=-1 matches the [vk.com/apiclub|VK API] community", "id": "55684"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "50331"}
{"code": "public Builder withRange(ByteString endKey){\n  this.endKey=Optional.fromNullable(endKey);\n  return this;\n}\n", "nl": "Set the end key of the delete request. If it is set, the delete request will delete the keys from <i>key</i> to <i>endKey</i> (exclusive). <p>If end key is '\\0', the range is all keys >= key. <p>If the end key is one bit larger than the given key, then it deletes all keys with the prefix (the given key). <p>If both key and end key are '\\0', it deletes all keys.", "id": "1033"}
{"code": "public int error_sym(){\n  return 1;\n}\n", "nl": "<code>error</code> Symbol index.", "id": "48710"}
{"code": "public GroupsGetMembersQuery sort(GroupsGetMembersSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order", "id": "577"}
{"code": "public void init(FMLInitializationEvent event){\n  initBusses();\n  this.stateMachine=new ServerStateMachine(ServerState.WAITING_FOR_MOD_READY);\n}\n", "nl": "Called when creating a dedicated server", "id": "53469"}
{"code": "private Boolean specialLessThan(PlatformLogicalVersion otherVersion){\n  return null;\n}\n", "nl": "Handle special cases of version, by default return null to mark a non special case", "id": "57338"}
{"code": "public static Object objectFromByteBuffer(byte[] buffer) throws Exception {\n  if (buffer == null)   return null;\n  ByteArrayInputStream inStream=new ByteArrayInputStream(buffer);\n  ObjectInputStream in=new ObjectInputStreamExt(inStream);\n  Object retval=in.readObject();\n  in.close();\n  return retval;\n}\n", "nl": "Creates an object from a byte buffer.", "id": "27286"}
{"code": "public static void destroyInstance(){\n  instance=null;\n}\n", "nl": "Destroy singleton instance.", "id": "34591"}
{"code": "@Override public void close() throws IOException {\n  try {\n    in.close();\n  }\n catch (  IOException e) {\n    handleIOException(e);\n  }\n}\n", "nl": "Invokes the delegate's <code>close()</code> method.", "id": "14564"}
{"code": "static <T>AnyVal<Object> headTail(T head,ConsList<T> tail){\n  return new AnyConsImpl(head,null,tail,null);\n}\n", "nl": "Return a new AnyVal that matches the given head of a list and the given tail of a list", "id": "31679"}
{"code": "public boolean equals(Object obj){\n  return (obj instanceof ClientMaxPrincipalType && Constraint.equal(classes,((ClientMaxPrincipalType)obj).classes));\n}\n", "nl": "Two instances of this class are equal if they have the same classes (ignoring order).", "id": "2470"}
{"code": "public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){\n  if (reference == null) {\n    throw new NullPointerException(String.valueOf(errorMessage));\n  }\n  return reference;\n}\n", "nl": "Ensures that an object reference passed as a parameter to the calling method is not null.", "id": "37688"}
{"code": "public void addNewConnectionNode(GeoServerConnection connection,GeoServerNode node){\n  nodeMap.put(connection,node);\n  populateStateMap.put(connection,new PopulateState());\n}\n", "nl": "Adds the new connection node.", "id": "54536"}
{"code": "public static JsonObject createSymbol(ISymbol symbol){\n  if (instance != null) {\n    return instance.internal_createSymbol(symbol);\n  }\n  return null;\n}\n", "nl": "Creates the symbol.", "id": "30119"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n}\n", "nl": "action to be performed", "id": "52406"}
{"code": "public static ArrayList<Integer> convertStringArrayToIntegerArray(List<String> arrayList){\n  ArrayList<Integer> integers=new ArrayList<>();\n  for (  String str : arrayList) {\n    integers.add(Integer.valueOf(str));\n  }\n  return integers;\n}\n", "nl": "Create a Integer arrayList from String arrayList", "id": "18350"}
{"code": "public NewArrayExpr newNewArrayExpr(Type type,Value size){\n  return new GNewArrayExpr(type,size);\n}\n", "nl": "Constructs a NewArrayExpr(Type, Expr) grammar chunk.", "id": "53906"}
{"code": "public boolean isEmpty(){\n  return names.isEmpty();\n}\n", "nl": "Returns <code>true</code> if this object contains no members.", "id": "10602"}
{"code": "public PhotosGetAllCommentsQuery needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n", "nl": "Return an additional \"likes\" field", "id": "6971"}
{"code": "public boolean end(){\n  outputList.add(new ByteArrayInputStream(outputData));\n  totBytes+=outputData.length;\n  return true;\n}\n", "nl": "Marks the end of a set of data. Audio data for a single utterance should be groupd between begin/end pairs.", "id": "2145"}
{"code": "public static boolean isEmpty(CharSequence str){\n  if (str == null || str.toString() == null || str.toString().trim().length() == 0 || str.length() == 0 || \"null\".equalsIgnoreCase(str.toString())) {\n    return true;\n  }\n else {\n  }\n  return false;\n}\n", "nl": "Returns true if the string is null or 0-length.", "id": "54193"}
{"code": "public AudioGetBroadcastListQuery filter(AudioGetBroadcastListFilter value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Types of objects to return", "id": "16167"}
{"code": "public GroupsDeleteLinkQuery deleteLink(UserActor actor,int groupId,int linkId){\n  return new GroupsDeleteLinkQuery(getClient(),actor,groupId,linkId);\n}\n", "nl": "Allows to delete a link from the community.", "id": "8979"}
{"code": "public static boolean addOrUpdateBan(BannedIP ipBan){\n  if (ipBan.getId() == null) {\n    if (getDAO().insert(ipBan)) {\n      banList.add(ipBan);\n      return true;\n    }\n    return false;\n  }\n  return getDAO().update(ipBan);\n}\n", "nl": "Adds or updates ip ban. Changes are reflected in DB", "id": "34932"}
{"code": "public static String toString(InputStream input,Charset encoding) throws IOException {\n  StringBuilderWriter sw=new StringBuilderWriter();\n  copy(input,sw,encoding);\n  return sw.toString();\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a String using the specified character encoding. <p> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>. </p>", "id": "30932"}
{"code": "@Override public Type[] supportedTypes(Metadata<Optional> metadata){\n  Type[] typeParam={metadata.getType()};\n  return typeParam;\n}\n", "nl": "Support any type, or for that matter, the type of the associated param.", "id": "53021"}
{"code": "public static int copy(InputStream input,OutputStream output) throws IOException {\n  long count=copyLarge(input,output);\n  if (count > Integer.MAX_VALUE) {\n    return -1;\n  }\n  return (int)count;\n}\n", "nl": "Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>. <p/> Large streams (over 2GB) will return a bytes copied value of <code>-1</code> after the copy has completed since the correct number of bytes cannot be returned as an int. For large streams use the <code>copyLarge(InputStream, OutputStream)</code> method.", "id": "49349"}
{"code": "@Nullable public String doc(){\n  String s=this.optionalDocComment;\n  this.optionalDocComment=null;\n  return s;\n}\n", "nl": "Gets the text of the doc comment (a.k.a. \"JAVADOC comment\") preceeding the next token.", "id": "38777"}
{"code": "public void addMember(InternalMapObject member){\n  this.members.add(member);\n}\n", "nl": "Adds a map object to this interval category.", "id": "27375"}
{"code": "public boolean hasSet(String name){\n  return m_map.containsKey(name);\n}\n", "nl": "Indicates if this composite contains a TupleSet with the given name.", "id": "167"}
{"code": "public void onDestroy(){\n}\n", "nl": "The final call you receive before your activity is destroyed.", "id": "1337"}
{"code": "public float[] toFloatArray(){\n  float[] faRes=new float[3];\n  faRes[0]=(float)ValueSimilarity;\n  faRes[1]=(float)ContainmentSimilarity;\n  faRes[2]=(float)SizeSimilarity;\n  return faRes;\n}\n", "nl": "Returns a 3-element float array corresponding to the aspects of GraphSimilarity.", "id": "30533"}
{"code": "public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){\n  NewFriendDao.createTable(db,ifNotExists);\n}\n", "nl": "Creates underlying database table using DAOs.", "id": "52285"}
{"code": "public WallGetQueryWithExtended domain(String value){\n  return unsafeParam(\"domain\",value);\n}\n", "nl": "User or community short address.", "id": "12742"}
{"code": "public static Column max(DataFrame dataFrame,String columnName){\n  return dataFrame.groupBy(columnName).agg(functions.max(columnName)).col(columnName);\n}\n", "nl": "Max for a column", "id": "28329"}
{"code": "@Override public Object nextElement(){\n  if (index < array.length) {\n    return array[index++];\n  }\n  throw new NoSuchElementException();\n}\n", "nl": "Returns the next element of this enumeration.", "id": "54928"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200349,skillname);\n}\n", "nl": "You decreased your own flight time by using [%SkillName].", "id": "58605"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof ViewerBase && ((ViewerBase)getViewer()).getGraph().getNumberOfNodes() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "55712"}
{"code": "public void clickSubmenu(MenuOption menuOption){\n  toolbar.findElement(By.xpath(String.format(\"//span[text()=%s]\",XpathUtils.quote(menuOption.getLabel())))).click();\n}\n", "nl": "Clicks the selected submenu item.", "id": "35467"}
{"code": "@Deprecated public static boolean hasParentType(Delegator delegator,String entityName,String primaryKey,String childType,String parentTypeField,String parentType){\n  return EntityTypeUtil.hasParentType(delegator,entityName,primaryKey,childType,parentTypeField,parentType);\n}\n", "nl": "A generic method to be used on Type enities, e.g. ProductType.  Recurse to the root level in the type hierarchy and checks if the specified type childType has parentType as its parent somewhere in the hierarchy.", "id": "2022"}
{"code": "public void startRTM(String slackToken){\n  RTM rtm=slackDao.startRTM(slackToken);\n  currentUser=rtm.getUser();\n  dmChannels=rtm.getDmChannels();\n  webSocketUrl=rtm.getWebSocketUrl();\n}\n", "nl": "Start a RTM connection. Fetch the web socket url to connect to, current user details and list of channel ids where the current user has had conversation.", "id": "38115"}
{"code": "public double optDouble(int index){\n  return this.optDouble(index,Double.NaN);\n}\n", "nl": "Get the optional double value associated with an index. NaN is returned if there is no value for the index, or if the value is not a number and cannot be converted to a number.", "id": "40715"}
{"code": "public Builder maximumAge(Number maximumAge){\n  this.maximumAge=maximumAge;\n  return this;\n}\n", "nl": "Maximum age of detected location. If less than this amount of milliseconds passed since last geolocation response, locate will return a cached location. </br> default 0", "id": "23083"}
{"code": "public void startFirstSampleTimer(){\n}\n", "nl": "Starts the first sample timer", "id": "12772"}
{"code": "@DataProvider public Object[][] ValidAuthProvider(){\n  String userName=appProperties.getProperty(\"user-name\");\n  String password=appProperties.getProperty(\"password\");\n  return new Object[][]{{userName,password}};\n}\n", "nl": "Provides supplied user credentials.", "id": "42217"}
{"code": "public double norm2(){\n  return s[0];\n}\n", "nl": "Two norm", "id": "7749"}
{"code": "@Override public void xmlDecl(String version,String encoding,String standalone,Augmentations augs) throws XNIException {\n  fGrammarBucket.setStandalone(standalone != null && standalone.equals(\"yes\"));\n  if (fDocumentHandler != null) {\n    fDocumentHandler.xmlDecl(version,encoding,standalone,augs);\n  }\n}\n", "nl": "Notifies of the presence of an XMLDecl line in the document. If present, this method will be called immediately following the startDocument call.", "id": "20519"}
{"code": "public static int incrementExact(final int n) throws MathRuntimeException {\n  if (n == Integer.MAX_VALUE) {\n    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_ADDITION,n,1);\n  }\n  return n + 1;\n}\n", "nl": "Increment a number, detecting overflows.", "id": "6722"}
{"code": "void submit(ProcessAndDisplayImageTask task){\n  initExecutorsIfNeed();\n  taskExecutorForCachedImages.execute(task);\n}\n", "nl": "Submits task to execution pool", "id": "16975"}
{"code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set showAxes=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed", "id": "55299"}
{"code": "public static DmnEngineInfo retry(String resourceUrl){\n  log.debug(\"retying initializing of resource {}\",resourceUrl);\n  try {\n    return initDmnEngineFromResource(new URL(resourceUrl));\n  }\n catch (  MalformedURLException e) {\n    throw new ActivitiDmnException(\"invalid url: \" + resourceUrl,e);\n  }\n}\n", "nl": "retries to initialize a dmn engine that previously failed.", "id": "10566"}
{"code": "public static SM_SYSTEM_MESSAGE STR_DUEL_YOU_WIN(String value0){\n  return new SM_SYSTEM_MESSAGE(1300098,value0);\n}\n", "nl": "You won the duel against %0.", "id": "25713"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "12365"}
{"code": "public DynamicTemplateParameterContext addParameter(String paramName,String paramValue){\n  return addParameter(paramName,paramValue,ContextInfo.EMPTY);\n}\n", "nl": "Adds a dynamic parameter value. <ul> <li>It doesn't expect any template parameters within the parameter value.</li> <li>The parameter value replaces the previous parameter value.</li> <li>A file defined by the parameter will not be deleted on exit.</li> </ul>", "id": "9945"}
{"code": "public void addException(Access node){\n  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the Exception list.", "id": "46329"}
{"code": "@Override public boolean accept(File file,String name){\n  for (  String suffix : this.suffixes) {\n    if (caseSensitivity.checkEndsWith(name,suffix)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks to see if the filename ends with the suffix.", "id": "56979"}
{"code": "@Deprecated public static void putIANA2JavaMapping(String ianaEncoding,String javaEncoding){\n  fIANA2JavaMap.put(ianaEncoding,javaEncoding);\n}\n", "nl": "Adds an IANA to Java encoding name mapping.", "id": "19588"}
{"code": "public MessagesSendQuery lat(Float value){\n  return unsafeParam(\"lat\",value);\n}\n", "nl": "Geographical latitude of a check-in, in degrees (from -90 to 90).", "id": "18725"}
{"code": "public void notify(RemoteEvent event) throws UnknownEventException, RemoteException {\n  RemoteEventListener l=get();\n  if (l != null) {\n    l.notify(event);\n  }\n}\n", "nl": "Delegate the notification to the listener.", "id": "34130"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n}\n", "nl": "action to be performed", "id": "40456"}
{"code": "public void printEntrypoints(){\n  if (this.entrypoints == null)   System.out.println(\"Entry points not initialized\");\n else {\n    System.out.println(\"Classes containing entry points:\");\n    for (    String className : entrypoints)     System.out.println(\"\\t\" + className);\n    System.out.println(\"End of Entrypoints\");\n  }\n}\n", "nl": "Prints list of classes containing entry points to stdout", "id": "37596"}
{"code": "public void enableDashedHighlightLine(float lineLength,float spaceLength,float phase){\n  mHighlightDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);\n}\n", "nl": "Enables the highlight-line to be drawn in dashed mode, e.g. like this \"- - - - - -\"", "id": "27417"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_INTERVAL_TO_ME(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201233,num0,skillname);\n}\n", "nl": "You recovered %num0 MP due to the effect of [%SkillName].", "id": "39773"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_DICE_GIVEUP_OTHER(String value0){\n  return new SM_SYSTEM_MESSAGE(1390165,value0);\n}\n", "nl": "%0 gave up rolling the dice.", "id": "44406"}
{"code": "public static List<String> readLines(File file,Charset encoding) throws IOException {\n  InputStream in=null;\n  try {\n    in=openInputStream(file);\n    return IOUtils.readLines(in,Charsets.toCharset(encoding));\n  }\n  finally {\n    IOUtils.closeQuietly(in);\n  }\n}\n", "nl": "Reads the contents of a file line by line to a List of Strings. The file is always closed.", "id": "46508"}
{"code": "public static SM_SYSTEM_MESSAGE STR_EXTEND_ACCOUNT_WAREHOUSE_SIZE_EXTENDED(String value0){\n  return new SM_SYSTEM_MESSAGE(1300435,value0);\n}\n", "nl": "%0 spaces have been added to your account warehouse.", "id": "38345"}
{"code": "@Override public void populateExpression(Object objValue){\n  if (objValue != null) {\n    if (objValue instanceof Boolean) {\n      populateField((Boolean)objValue);\n      valueUpdated();\n    }\n  }\n}\n", "nl": "Populate expression.", "id": "51239"}
{"code": "public void initialiseDoubleValues(int size){\n  if (size < 1) {\n    throw new IllegalArgumentException(\"Invalid array size\");\n  }\n  doubleValues=new double[size];\n}\n", "nl": "Method to initialise double array", "id": "22563"}
{"code": "public boolean hasMoreRecords() throws IOException {\n  row=parser.parseNext();\n  if (row == null && blockCounter + 1 >= this.csvParserVo.getBlockDetailsList().size()) {\n    close();\n    return false;\n  }\n  if (row == null) {\n    initialize();\n    row=parser.parseNext();\n  }\n  return true;\n}\n", "nl": "Below method will be used to check whether any more records is present or not", "id": "15011"}
{"code": "public boolean isItemViewSwipeEnabled(){\n  return this.mDefaultItemTouchHelperCallback.isItemViewSwipeEnabled();\n}\n", "nl": "Get can long press swipe.", "id": "25422"}
{"code": "public void exitFullScreen(){\n  View decorView=mContext.getWindow().getDecorView();\n  showSystemUI(decorView);\n  for (  View view : views) {\n    view.setVisibility(View.VISIBLE);\n    view.invalidate();\n  }\n}\n", "nl": "call this method to exit full screen", "id": "23157"}
{"code": "public Object jjtAccept(MithraQLVisitor visitor,Object data){\n  return visitor.visit(this,data);\n}\n", "nl": "Accept the visitor.", "id": "10738"}
{"code": "private boolean matchValue(Collection<?> collection,int tokenIndex,ServerEntry entry){\n  if (tokenIndex == _tokens.length)   return matchOnRoot(collection,entry);\n else   throw new RuntimeException(\"invalid root path: \" + _rootPath + \" - should end with a collection\");\n}\n", "nl": "Perform matching on the provided collection or collection items nested properties.", "id": "21877"}
{"code": "public static Integer[] transformIntArray(int[] source){\n  Integer[] destin=new Integer[source.length];\n  for (int i=0; i < source.length; i++) {\n    destin[i]=source[i];\n  }\n  return destin;\n}\n", "nl": "convert int array to Integer array", "id": "41321"}
{"code": "public void disposeAll(){\n  for (Iterator it=cache.values().iterator(); it.hasNext(); ) {\n    Image image=(Image)it.next();\n    image.dispose();\n  }\n  cache.clear();\n}\n", "nl": "Disposes of all images in the cache.", "id": "51670"}
{"code": "public synchronized void close() throws IOException {\n  if (journalWriter == null) {\n    return;\n  }\n  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {\n    if (entry.currentEditor != null) {\n      entry.currentEditor.abort();\n    }\n  }\n  trimToSize();\n  journalWriter.close();\n  journalWriter=null;\n}\n", "nl": "Closes this cache. Stored values will remain on the filesystem.", "id": "32313"}
{"code": "public static void dropTable(SQLiteDatabase db,boolean ifExists){\n  String sql=\"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + \"\\\"book_table\\\"\";\n  db.execSQL(sql);\n}\n", "nl": "Drops the underlying database table.", "id": "32942"}
{"code": "public ArenaQuestCursor queryArenaQuests(){\n  return mHelper.queryArenaQuests();\n}\n", "nl": "ARENA QUESTS QUERIES", "id": "22703"}
{"code": "public static boolean isFileOlder(File file,File reference){\n  if (reference == null) {\n    throw new IllegalArgumentException(\"No specified reference file\");\n  }\n  if (!reference.exists()) {\n    throw new IllegalArgumentException(\"The reference file '\" + reference + \"' doesn't exist\");\n  }\n  return isFileOlder(file,reference.lastModified());\n}\n", "nl": "Tests if the specified <code>File</code> is older than the reference <code>File</code>.", "id": "29834"}
{"code": "public boolean isEmpty(){\n  return map.isEmpty();\n}\n", "nl": "Returns <tt>true</tt> if this set contains no elements.", "id": "35433"}
{"code": "public Value concat(Value str,Value args){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return a value representing the concatenation of the given target with the given args.", "id": "39856"}
{"code": "public void repositoryModified(ISVNRepositoryLocation repository){\n  for (  ISVNListener listener : repositoryListeners) {\n    listener.repositoryModified(repository);\n  }\n}\n", "nl": "signals all listener that we have removed a repository", "id": "30194"}
{"code": "public VideoSaveQuery description(String value){\n  return unsafeParam(\"description\",value);\n}\n", "nl": "Description of the video.", "id": "43188"}
{"code": "@Nullable public String doc(){\n  String s=this.optionalDocComment;\n  this.optionalDocComment=null;\n  return s;\n}\n", "nl": "Gets the text of the doc comment (a.k.a. \"JAVADOC comment\") preceeding the next token.", "id": "11292"}
{"code": "public ItemToSkillTreeCursor queryItemToSkillTreeItem(long id){\n  return mHelper.queryItemToSkillTreeItem(id);\n}\n", "nl": "ITEM TO SKILL TREE QUERIES", "id": "14531"}
{"code": "public void updateAllSteps(){\n  Runnable batch=myBatchQueue.poll();\n  while (batch != null) {\n    batch.run();\n    batch=myBatchQueue.poll();\n  }\n}\n", "nl": "Runs a number of batches of callbacks until the invocation queue is depleted", "id": "33051"}
{"code": "public int size(){\n  return cartLines.size();\n}\n", "nl": "Returns the number of items in the cart object.", "id": "49157"}
{"code": "public static boolean isUpdate(int mod){\n  return Modifiers.contains(mod,UpdateModifiers.UPDATE_ONLY | UpdateModifiers.PARTIAL_UPDATE | UpdateModifiers.UPDATE_OR_WRITE);\n}\n", "nl": "Return <tt>true</tt> if the integer argument includes the <tt>UPDATE_ONLY</tt> modifier or <tt>PARTIAL_UPDATE</tt> modifier  or <tt>UPDATE_OR_WRITE</tt> modifier, <tt>false</tt> otherwise.", "id": "3114"}
{"code": "public final boolean decrypt(ByteBuffer buf){\n  if (!isEnabled) {\n    log.debug(\"if encryption wasn't enabled, then maybe it's client reconnection, so skip packet\");\n    return true;\n  }\n  return packetKey.decrypt(buf);\n}\n", "nl": "Decrypt client packet from this ByteBuffer.", "id": "38310"}
{"code": "private static boolean isLayoutLibSupported(IAndroidTarget target){\n  if (target instanceof PlatformTarget) {\n    int layoutlibVersion=((PlatformTarget)target).getLayoutlibApi();\n    return layoutlibVersion <= Bridge.API_CURRENT;\n  }\n  return false;\n}\n", "nl": "Returns if the LayoutLib API (not to be confused with Platform API) level is supported.", "id": "17994"}
{"code": "public void addBottomResourceBundle(InternalRbmWrapper topInternalRbmWrapper){\n  this.rbmwStack.addToBottom(topInternalRbmWrapper);\n}\n", "nl": "Puts InternalRbmWrapper on the BOTTOM of the stack (bottom meaning will be overriden by higher layers on the stack, ie everything else already there)", "id": "32760"}
{"code": "public void inverseTranslateVect(float[] vec){\n  if (vec.length != 3) {\n    throw new IllegalArgumentException(\"vec must be of size 3.\");\n  }\n  vec[0]=vec[0] - m03;\n  vec[1]=vec[1] - m13;\n  vec[2]=vec[2] - m23;\n}\n", "nl": "<code>inverseTranslateVect</code> translates a given Vector3f by the translation part of this matrix.", "id": "25226"}
{"code": "public static SM_SYSTEM_MESSAGE STR_UNION_BAN_ME(String value0){\n  return new SM_SYSTEM_MESSAGE(1400576,value0);\n}\n", "nl": "%0 has expelled your alliance from the Alliance League.", "id": "55761"}
{"code": "public void addEmojiconGroup(EaseEmojiconGroupEntity groupEntity){\n  emojiconGroupList.add(groupEntity);\n  pagerView.addEmojiconGroup(groupEntity,true);\n  tabBar.addTab(groupEntity.getIcon());\n}\n", "nl": "add emojicon group", "id": "45386"}
{"code": "@Override public void attributeSelection(String field){\n}\n", "nl": "Attribute selection.", "id": "46808"}
{"code": "private double computeReferenceAngle(){\n  double r1=((SandboxBody)this.cmbBody1.getSelectedItem()).getTransform().getRotation();\n  double r2=((SandboxBody)this.cmbBody2.getSelectedItem()).getTransform().getRotation();\n  return r1 - r2;\n}\n", "nl": "Returns the computed reference angle between the two bodies.", "id": "21764"}
{"code": "@Provides @Singleton @AdHocThrottleMapStore MapStore<AdHocThrottle> provideAdHocThrottleMapStore(@Global CuratorFramework curator,LifeCycleRegistry lifeCycle){\n  CuratorFramework webCurator=withComponentNamespace(curator,\"web\");\n  return lifeCycle.manage(new ZkMapStore<>(webCurator,\"/adhoc-throttles\",new ZkAdHocThrottleSerializer()));\n}\n", "nl": "Provides a ZooKeeper-based set of ad-hoc endpoint throttles.", "id": "17817"}
{"code": "public void addTypeArgument(Access node){\n  List<Access> list=(parent == null || state == null) ? getTypeArgumentListNoTransform() : getTypeArgumentList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the TypeArgument list.", "id": "24343"}
{"code": "public void addDatatransferProgressListener(OnDatatransferProgressListener listener,Account account,OCFile file){\n  if (account == null || file == null || listener == null)   return;\n  mBoundListeners.put(file.getFileId(),listener);\n}\n", "nl": "Adds a listener interested in the progress of the download for a concrete file.", "id": "14796"}
{"code": "@NotNull public DeletePersonFaceAction deletePersonFace(@NotNull String personGroupId,String personId,String persistedFaceId){\n  Validation.validate(personGroupId,\"^[a-z0-9_-]{1,64}$\",new ParameterValidationException(\"personGroupId\",\"Person group ID is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters.\"));\n  return new DeletePersonFaceAction(cognitiveContext,personGroupId,personId,persistedFaceId);\n}\n", "nl": "Delete a face from a person. Relative image for the persisted face will also be deleted.", "id": "25653"}
{"code": "public static String ifNotEmpty(String base,String pre,String post){\n  if (UtilValidate.isNotEmpty(base))   return pre + base + post;\n else   return \"\";\n}\n", "nl": "Returns <code>pre + base + post</code> if base String is not null or empty, otherwise an empty but non-null String.", "id": "52446"}
{"code": "public boolean canSet(T value){\n  return isSettable ? internalCanSet(value) : matches(value);\n}\n", "nl": "Return true if the given value can safely/correctly be set/loaded into this AnyVal", "id": "38267"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OpenAerial_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200311,skillname);\n}\n", "nl": "You are snared in mid-air after using [%SkillName].", "id": "18405"}
{"code": "public static void main(String[] args){\n  System.out.println(\"20 Jacobsthal numbers (starting with index 10):\\n\" + new Jacobsthal(10,20).stream().collect(Collectors.toList()));\n}\n", "nl": "Prints some Jacobsthal numbers.", "id": "26790"}
{"code": "public int geom_frac_base(){\n  return soot.PhaseOptions.getInt(options,\"geom-frac-base\");\n}\n", "nl": "Fractional parameter -- Fractional parameter for precision/performance trade-off. This option specifies the fractional parameter, which  manually balances the precision and the performance. Smaller  value means better performance and worse precision. \t\t\t\t\t\t", "id": "38027"}
{"code": "public ShimpleBody newBody(Body b){\n  Map<String,String> options=PhaseOptions.v().getPhaseOptions(PHASE);\n  return new ShimpleBody(b,options);\n}\n", "nl": "Returns a ShimpleBody constructed from b, using default phase options.", "id": "51285"}
{"code": "public void addBodyDecl(BodyDecl node){\n  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the BodyDecl list.", "id": "4085"}
{"code": "public static char[] fix83600(char[] signature){\n  if (signature == null || signature.length < 2)   return signature;\n  return Signature.removeCapture(signature);\n}\n", "nl": "TODO this is a temporary workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=83600 and https://bugs.eclipse.org/bugs/show_bug.cgi?id=85293", "id": "24227"}
{"code": "private boolean isFieldPackagePrivate(Element attribute){\n  Set<Modifier> modifiers=attribute.getModifiers();\n  return !modifiers.contains(PUBLIC) && !modifiers.contains(PROTECTED) && !modifiers.contains(PRIVATE);\n}\n", "nl": "Checks if the given field has package-private visibility", "id": "40419"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoFly_END_A_TO_B(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200931,skilltarget);\n}\n", "nl": "[%SkillTarget] is able to fly again.", "id": "14142"}
{"code": "public static SM_SYSTEM_MESSAGE STR_BUY_SELL_HE_DOES_NOT_SELL_ITEM(String value0){\n  return new SM_SYSTEM_MESSAGE(1300336,value0);\n}\n", "nl": "%0 does not sell items.", "id": "8522"}
{"code": "public static ConfigAspectBase create(Model model){\n  return new MixinConfigAspect(model);\n}\n", "nl": "Creates mixin config aspect.", "id": "54303"}
{"code": "public VideoRestoreQuery restore(UserActor actor,int videoId){\n  return new VideoRestoreQuery(getClient(),actor,videoId);\n}\n", "nl": "Restores a previously deleted video.", "id": "37310"}
{"code": "public static String decodeFilename(Map<String,String> map){\n  if (map != null) {\n    return map.get(DataSourceConnectorInterface.FILE_MAP_KEY);\n  }\n  return null;\n}\n", "nl": "Decode filename.", "id": "31658"}
{"code": "@Nullable E tryReceive(){\n  int start=startIndex();\n  E e=scanAndMatch(start);\n  return (e == null) ? awaitMatch(start) : e;\n}\n", "nl": "Attempts to receive an element from a waiting provider.", "id": "6578"}
{"code": "public void putDefaultFramePathOnStack(){\n  if (!switchRequestComingFromFrameSwitcher) {\n    localDeque.push(new FramePath());\n  }\n}\n", "nl": "Puts the DefaultFrame descriptor on the frame stack, without performing switching. TargetLocator uses this method when Bobcat user does switching using webDriver directly. Don't call this method manually.", "id": "34694"}
{"code": "private static void bindPreferenceSummaryToValue(Preference preference){\n  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);\n  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),\"\"));\n}\n", "nl": "Binds a preference's summary to its value. More specifically, when the preference's value is changed, its summary (line of text below the preference title) is updated to reflect the value. The summary is also immediately updated upon calling this method. The exact display format is dependent on the type of preference.", "id": "22211"}
{"code": "public static final Ellipse scale(Ellipse ellipse,double scale){\n  if (ellipse == null)   throw new NullPointerException(Messages.getString(\"geometry.nullShape\"));\n  if (scale <= 0)   throw new IllegalArgumentException(Messages.getString(\"geometry.invalidScale\"));\n  return new Ellipse(ellipse.getWidth() * scale,ellipse.getHeight() * scale);\n}\n", "nl": "Returns a scaled version of the given ellipse.", "id": "7941"}
{"code": "public Tags filter(Set<String> tag_names){\n  return Tags.valueOf(tags_.entrySet().stream().filter(null));\n}\n", "nl": "Reduce the list of tags, to only those specified in the argument set.", "id": "39944"}
{"code": "public void acceptConfirmationWindow(){\n  clickButton(YES_BUTTON_TEXT);\n}\n", "nl": "Finds the \"yes\" button in the confirmation window, clicks it and waits until the confirmation window disappears.", "id": "8723"}
{"code": "public JimpleBody newBody(SootMethod m){\n  return new JimpleBody(m);\n}\n", "nl": "Returns an empty JimpleBody associated with method m.", "id": "44218"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostSkillCritical_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200386,skillname);\n}\n", "nl": "You boosted your critical hit skill by using [%SkillName].", "id": "19458"}
{"code": "public double logProb(String a){\n  Tuple2<Double,Double> t=ugrams.get(a);\n  if (t == null)   return ugrams.get(\"<unk>\")._1().doubleValue();\n else   return t._1().doubleValue();\n}\n", "nl": "Computes log(P(a)) in base 10.", "id": "7463"}
{"code": "private static Random initRandom(long seed){\n  System.out.printf(\"%s using random seed: %d%n\",PersistentSortedQueueTest.class.getSimpleName(),seed);\n  Random random=new Random(seed);\n  PersistentSortedQueue.RANDOM=random;\n  PersistentSortedQueueTest.RANDOM=random;\n  return random;\n}\n", "nl": "If a test fails, take the seed printed below and add \"initRandom(seed)\" at the top of the test case.", "id": "37855"}
{"code": "public static FileDescriptorSet generate(Service normalizedService){\n  DescriptorGenerator generator=new DescriptorGenerator();\n  generator.analyzeService(normalizedService);\n  return generator.generate();\n}\n", "nl": "Generates a FileDescriptorSet for the specified normalized service config.", "id": "28274"}
{"code": "public MyDialog inInterpolator(Interpolator interpolator){\n  mInInterpolator=interpolator;\n  return this;\n}\n", "nl": "Set the interpolator of in animation.", "id": "16455"}
{"code": "public Object proxy(){\n  return proxyObject;\n}\n", "nl": "Return the object that contains the JSpaceProxyWrapper. If the object stored as MarshalledObject, so returns the unMarshalling object. get", "id": "42206"}
{"code": "private void requestInputMethod(Dialog dialog){\n  Window window=dialog.getWindow();\n  window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);\n}\n", "nl": "Copied from DialogPreference.java", "id": "38873"}
{"code": "public void shutdown() throws DataSourceException {\n  if (createdSessionFactory) {\n    if (sessionFactory != null && !sessionFactory.isClosed()) {\n      try {\n        sessionFactory.close();\n      }\n  finally {\n        sessionFactory=null;\n      }\n    }\n  }\n}\n", "nl": "Shuts down the data source. If the session factory was created by this data source, will close it.", "id": "54616"}
{"code": "public String toStringMultiLine(){\n  return toStringMultiLine(false);\n}\n", "nl": "Returns the entire non-interpolated configuration as a multiline representation.", "id": "4574"}
{"code": "@TargetApi(VERSION_CODES.GINGERBREAD) public static boolean isExternalStorageRemovable(){\n  if (Utils.hasGingerbread()) {\n    return Environment.isExternalStorageRemovable();\n  }\n  return true;\n}\n", "nl": "Check if external storage is built-in or removable.", "id": "50207"}
{"code": "public Builder withCountOnly(boolean countOnly){\n  this.countOnly=countOnly;\n  return this;\n}\n", "nl": "Set the get request to only return count of the keys", "id": "35477"}
{"code": "public TypeVariable typeVariable(SootClass sootClass){\n  return typeVariable(hierarchy.typeNode(sootClass.getType()));\n}\n", "nl": "Get type variable for the given soot class.", "id": "41564"}
{"code": "public static Histogram add(Histogram x,double y){\n  return x.modifyEventCounters(null);\n}\n", "nl": "Add scalar to histogram.", "id": "8970"}
{"code": "public static void clear(EntityPlayer player){\n  SimpleCoord at=new SimpleCoord(player.worldObj,new BlockPos(player));\n  NotifyImplementation.instance.doSend(player,at,player.worldObj,EnumSet.of(Style.CLEAR),null,\"\",emptyStringArray);\n}\n", "nl": "Erases all Notifications a player has.", "id": "39376"}
{"code": "protected WallReportCommentQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "ID of the user or community that owns the wall.", "id": "26597"}
{"code": "public void clear(){\n  for (int i=0; i < this.counters.length; i++) {\n    this.cachedCounters[i]=this.counters[i];\n    this.counters[i]=0;\n  }\n  this.cachedContacts.clear();\n  this.cachedContacts.addAll(this.contacts);\n  this.contacts.clear();\n}\n", "nl": "Clears the state of the contact counter.", "id": "12966"}
{"code": "public ComponentConfigBuilder add(String itemType,String label,String value){\n  config.add(new ConfigurationEntry(currentTab,itemType,label,value));\n  return this;\n}\n", "nl": "Adds field entry, equivalent of: | tab_name | field type | label | value |", "id": "13910"}
{"code": "public void reset(){\n  mGestureDetector.reset();\n  mPreviousTransform.reset();\n  mActiveTransform.reset();\n}\n", "nl": "Rests the controller.", "id": "595"}
{"code": "public boolean canGetInt(){\n  return canGet(int.class);\n}\n", "nl": "Indicates if convenience get method can be called without an exception being thrown for the int type.", "id": "41583"}
{"code": "protected AdsGetFloodStatsQuery accountId(int value){\n  return unsafeParam(\"account_id\",value);\n}\n", "nl": "Advertising account ID.", "id": "2914"}
{"code": "protected VideoRestoreCommentQuery commentId(int value){\n  return unsafeParam(\"comment_id\",value);\n}\n", "nl": "ID of the deleted comment.", "id": "15841"}
{"code": "public AemFieldset fold(){\n  if (!isFolded()) {\n    foldButton.click();\n  }\n  bobcatWait.withTimeout(Timeouts.BIG).until(null,Timeouts.MINIMAL);\n  return this;\n}\n", "nl": "Folds the fieldset if not folded already.", "id": "19058"}
{"code": "public static Builder wrap(@NonNull Context context,@NonNull PagerAdapter innerAdapter){\n  return new Builder(context,innerAdapter);\n}\n", "nl": "Wrap existing page adapter and return a wrapper.", "id": "18699"}
{"code": "public static void write(char[] data,Writer output) throws IOException {\n  if (data != null) {\n    output.write(data);\n  }\n}\n", "nl": "Writes chars from a <code>char[]</code> to a <code>Writer</code> using the default character encoding of the platform.", "id": "48293"}
{"code": "void autocomplete(Json json){\n  queryExecutor.submit(null);\n}\n", "nl": "Find autocomplete results and send them to the client", "id": "23820"}
{"code": "public void dismissImmediately(){\n  super.dismiss();\n  if (mAnimation != null)   mAnimation.cancel();\n  if (mHandler != null)   mHandler.removeCallbacks(mDismissAction);\n}\n", "nl": "Dismiss Dialog immediately without showing out animation.", "id": "13510"}
{"code": "@Override public void close(){\n}\n", "nl": "close the array", "id": "9503"}
{"code": "protected void paintBufferToScreen(Graphics g){\nsynchronized (this) {\n    g.drawImage(m_offscreen,0,0,null);\n  }\n}\n", "nl": "Paints the offscreen buffer to the provided graphics context.", "id": "58234"}
{"code": "private MatchQuery reasonMatchQuery(MatchQuery query){\n  if (!reasoner.getRules().isEmpty()) {\n    return reasoner.resolveToQuery(query);\n  }\n else {\n    return query;\n  }\n}\n", "nl": "Apply reasoner to match query", "id": "38888"}
{"code": "public void saveEntity(final ProxyEntity proxyEntity){\n  final Session session=this.sessionFactory.openSession();\n  final Transaction transaction=session.beginTransaction();\n  session.saveOrUpdate(proxyEntity);\n  transaction.commit();\n  session.close();\n}\n", "nl": "Save the details of a submitted proxy entity", "id": "10760"}
{"code": "public <T>List<T> listItems(SectionKey<T,ListSection<T>> key){\n  List<T> result=Lists.newArrayList();\n  for (  ListSection<T> section : getSections(key)) {\n    result.addAll(section.items());\n  }\n  return result;\n}\n", "nl": "Returns all values from all list sections in the project views, in order", "id": "36693"}
{"code": "public Builder buttonPressedBackgroundColor(int buttonPressedBackgroundColor){\n  this.buttonPressedBackgroundColor=buttonPressedBackgroundColor;\n  return this;\n}\n", "nl": "Set the background color of the buttons when clicked", "id": "16232"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUMMON_UNSUMMONED(int value0){\n  return new SM_SYSTEM_MESSAGE(1200006,calculateNameId(value0));\n}\n", "nl": "%0 has been dismissed.", "id": "26115"}
{"code": "public VideoCreateCommentQuery fromGroup(Boolean value){\n  return unsafeParam(\"from_group\",value);\n}\n", "nl": "Post the comment from a community name (only if \"owner_id\" less than 0)", "id": "49622"}
{"code": "private static String resolveMapConflicts(String left,String right){\n  if (!left.equals(right)) {\n    LOG.error(\"Two different casing's detect for parameter: '{}' ('{}' and '{}' found).\\n\" + \"    All casing for identical query parameters must be identical. Cannot proceed.\",left.toLowerCase(Locale.ENGLISH),left,right);\n    throw new RuntimeException(\"Found different parameter casing-styles for parameter: \" + left);\n  }\n  return left;\n}\n", "nl": "Merge function for combining stream elements to a map. If two or more strings map and are not identical, then log a warning and throw an exception.", "id": "44969"}
{"code": "public BoardGetTopicsQueryWithExtended count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of topics to return.", "id": "9962"}
{"code": "public void removeAllUpdateListeners(){\n  listeners.clear();\n}\n", "nl": "Removes all previously registered <code>DataTagUpdateListener</code>", "id": "10744"}
{"code": "private void releaseUselessResources(){\n  offlineProcessor.destroy();\n  offlineProcessor=null;\n  IFigureManager.cleanCache();\n  System.gc();\n}\n", "nl": "Stuff that is useless for querying is released.", "id": "24589"}
{"code": "public static double ud(){\n  return R.nextDouble();\n}\n", "nl": "Generates a random uniform double.", "id": "54378"}
{"code": "public View detachCurrentView(){\n  assert getChildCount() > 1;\n  View view=getChildAt(CONTENT_INDEX);\n  removeView(view);\n  return view;\n}\n", "nl": "Detaches the View currently being shown and returns it for reparenting.", "id": "38200"}
{"code": "public NewsfeedGetSuggestedSourcesQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Amount of communities or users to return.", "id": "28713"}
{"code": "public static boolean isCategoryTop(ServletRequest request,String productCategoryId){\n  return isCategoryTop((Delegator)request.getAttribute(\"delegator\"),(LocalDispatcher)request.getAttribute(\"dispatcher\"),productCategoryId);\n}\n", "nl": "SCIPIO: Returns true only if the category ID is a top category. <p> NOTE: is caching", "id": "26155"}
{"code": "protected double adjust(double v){\nswitch (m_scale) {\ncase Constants.LOG_SCALE:\n    return Math.pow(10,v);\ncase Constants.SQRT_SCALE:\n  return v * v;\ncase Constants.LINEAR_SCALE:\ndefault :\nreturn v;\n}\n}\n", "nl": "Adjust a value according to the current scale type.", "id": "6051"}
{"code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "16866"}
{"code": "public static double readDouble(byte[] bytes,int start){\n  return Double.longBitsToDouble(readLong(bytes,start));\n}\n", "nl": "Parse a double from a byte array.", "id": "16661"}
{"code": "public void updateScreen(){\n  if (this.mc.playerController.isInCreativeMode()) {\n    this.mc.displayGuiScreen(new GuiContainerCreative(this.mc.thePlayer));\n  }\n}\n", "nl": "Called from the main game loop to update the screen.", "id": "41531"}
{"code": "public void addClassPath(PathPart pathPart){\n  classPath.add(pathPart);\n  pathPart.program=this;\n}\n", "nl": "Add a path part to the library class path.", "id": "33044"}
{"code": "public MessagesGetLongPollHistoryQuery eventsLimit(Integer value){\n  return unsafeParam(\"events_limit\",value);\n}\n", "nl": "Set events limit", "id": "13752"}
{"code": "public static void updateVersion(int newVersion){\n  SharedPreferences.Editor sEditor=LitePalApplication.getContext().getSharedPreferences(LITEPAL_PREPS,Context.MODE_PRIVATE).edit();\n  sEditor.putInt(VERSION,newVersion);\n  sEditor.commit();\n}\n", "nl": "Each time database upgrade, the version of database stored in shared preference will update.", "id": "23596"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FORCE_CHECK_REQUEST(String value0){\n  return new SM_SYSTEM_MESSAGE(1300990,value0);\n}\n", "nl": "%0 has requested to check the combat readiness.", "id": "12901"}
{"code": "protected void handleStart(File startDirectory,Collection<T> results) throws IOException {\n}\n", "nl": "Overridable callback method invoked at the start of processing. <p> This implementation does nothing.", "id": "35535"}
{"code": "private void layout(int width,int height){\n  int itemsWidth=width - 2 * PADDING;\n  itemsLayout.layout(0,0,itemsWidth,height);\n}\n", "nl": "Sets layouts width and height", "id": "6707"}
{"code": "public boolean isString(){\n  return value instanceof String;\n}\n", "nl": "Check whether this primitive contains a String value.", "id": "17067"}
{"code": "boolean canOptimizeTimeSeries(DataApiRequest apiRequest,TemplateDruidQuery templateDruidQuery){\n  return apiRequest.getDimensions().isEmpty() && !templateDruidQuery.isNested() && apiRequest.getSorts().isEmpty()&& !apiRequest.getCount().isPresent()&& apiRequest.getHaving() == null;\n}\n", "nl": "Determine if the optimization to a Timeseries query can be done.", "id": "49533"}
{"code": "public void previous(){\n  goToPage(getRowCount(),getCurrentPage() - 1);\n}\n", "nl": "Move the starting row back by 'pageSize' rows.", "id": "31378"}
{"code": "protected AdsCreateCampaignsQuery data(String value){\n  return unsafeParam(\"data\",value);\n}\n", "nl": "Serialized JSON array of objects that describe created campaigns. Description of \"campaign_specification\" objects see below.", "id": "49459"}
{"code": "private void showDialog(JTextComponent target){\n  if (dlg == null) {\n    dlg=new ReplaceDialog(target,FindReplaceActions.this);\n  }\n  dlg.setVisible(true);\n}\n", "nl": "Show the dialog", "id": "54632"}
{"code": "public static void log(Object message){\n  Gdx.app.log(TAG,String.valueOf(message));\n}\n", "nl": "Logs a message to the console or logcat", "id": "48708"}
{"code": "public static boolean isSignedFloat(String s){\n  if (isEmpty(s))   return defaultEmptyOK;\n  try {\n    Float.parseFloat(s);\n    return true;\n  }\n catch (  Exception e) {\n    return false;\n  }\n}\n", "nl": "True if string s is a signed or unsigned floating point (real) number. First character is allowed to be + or -. Also returns true for unsigned integers. If you wish to distinguish between integers and floating point numbers, first call isSignedInteger, then call isSignedFloat.", "id": "27646"}
{"code": "public Resource find(String type,String id){\n  try {\n    return _doc.find(type,id);\n  }\n catch (  ResourceNotFoundException e) {\n    return null;\n  }\n}\n", "nl": "Find resource in document.", "id": "42410"}
{"code": "public NewsfeedGetQuery returnBanned(Boolean value){\n  return unsafeParam(\"return_banned\",value);\n}\n", "nl": "Return news items from banned sources", "id": "6394"}
{"code": "public FieldVector3D<T> subtract(final T factor,final FieldVector3D<T> v){\n  return new FieldVector3D<T>(x.getField().getOne(),this,factor.negate(),v);\n}\n", "nl": "Subtract a scaled vector from the instance.", "id": "53158"}
{"code": "protected AdsUpdateAdsQuery accountId(int value){\n  return unsafeParam(\"account_id\",value);\n}\n", "nl": "Advertising account ID.", "id": "30056"}
{"code": "protected boolean hasColumn(String name){\n  return getColumnNumber(name) != -1;\n}\n", "nl": "Internal method indicating if the given data field is included as a data column.", "id": "53173"}
{"code": "@Override public void startStreamingConsumption(long timeout){\n  jssc.start();\n  if (timeout < 0)   jssc.awaitTermination();\n else   jssc.awaitTermination(timeout);\n}\n", "nl": "Starts the streaming consumption", "id": "23078"}
{"code": "public void dataSourceLoaded(DataSourceInterface dataSource){\n  dataSourceAttributePanel.dataSourceLoaded(dataSource);\n}\n", "nl": "Data source loaded.", "id": "34310"}
{"code": "public static boolean checkIfLeftExpressionRequireEvaluation(Expression expression){\n  if (expression.getFilterExpressionType() == ExpressionType.UNKNOWN || !(expression instanceof ColumnExpression)) {\n    return true;\n  }\n  for (  Expression child : expression.getChildren()) {\n    if (checkIfLeftExpressionRequireEvaluation(child)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "This method will check if a given expression contains a column expression recursively.", "id": "35927"}
{"code": "public void validateSortingColumnName(Class<?> type,String sortingColumnName){\n  BusinessRule.expect(criteriaMapFactory.getCriteriaMap(type).getCriteriaHolderUnchecked(sortingColumnName).isPresent(),Predicates.equalTo(Boolean.TRUE)).verify(ErrorType.BAD_SAVE_USER_FILTER_REQUEST,Suppliers.formattedSupplier(\"Column for sorting with name '{}' is unknown.\",sortingColumnName));\n}\n", "nl": "Check is sorting column name known to ws.", "id": "36418"}
{"code": "public static <T extends RealFieldElement<T>>T distance(final FieldVector3D<T> v1,final FieldVector3D<T> v2){\n  return v1.distance(v2);\n}\n", "nl": "Compute the distance between two vectors according to the L<sub>2</sub> norm. <p>Calling this method is equivalent to calling: <code>v1.subtract(v2).getNorm()</code> except that no intermediate vector is built</p>", "id": "583"}
{"code": "public boolean isSynchronized(){\n  return Modifier.isSynchronized(this.getModifiers());\n}\n", "nl": "Convenience method returning true if this method is synchronized.", "id": "24890"}
{"code": "public PermissionCollection newPermissionCollection(){\n  return new AuthenticationPermissionCollection();\n}\n", "nl": "Returns an empty <code>PermissionCollection</code> for storing <code>AuthenticationPermission</code> instances.", "id": "16572"}
{"code": "public boolean findPrevious(String regularExpression){\n  return findAndUncollapseNext(regularExpression,true,false) > 0;\n}\n", "nl": "Find previous instance", "id": "7650"}
{"code": "public PollsCreateQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "If a poll will be added to a community it is required to send a negative group identifier. Current user by default.", "id": "16767"}
{"code": "public boolean isNavBarTintEnabled(){\n  return mNavBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system navigation bar?", "id": "26594"}
{"code": "private CountingThreadPoolExecutor createExecutor(int numThreads){\n  return new CountingThreadPoolExecutor(numThreads,Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());\n}\n", "nl": "Creates a new executor object for spawning worker threads", "id": "55453"}
{"code": "public boolean hasOption(String option){\n  return commandLine.hasOption(option);\n}\n", "nl": "Determine if an option was provided by the user via the CLI", "id": "15352"}
{"code": "public void populateExpression(String wellKnownName){\n  if (wellKnownName != null) {\n    fieldConfigVisitor.populateTextField(FieldIdEnum.EXTERNAL_GRAPHIC,wellKnownName);\n  }\n}\n", "nl": "Populate expression.", "id": "18653"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_PvPZONE_MY_DEATH_TO_B(String value0){\n  return new SM_SYSTEM_MESSAGE(1340001,value0);\n}\n", "nl": "You were killed by %0's attack.", "id": "48926"}
{"code": "public boolean isDrawSlicesUnderHoleEnabled(){\n  return mDrawSlicesUnderHole;\n}\n", "nl": "Returns true if the inner tips of the slices are visible behind the hole, false if not.", "id": "16178"}
{"code": "public synchronized long size(){\n  return size;\n}\n", "nl": "Returns the number of bytes currently being used to store the values in this cache. This may be greater than the max size if a background deletion is pending.", "id": "29669"}
{"code": "protected List<ResultSetMapper> buildResultSetMapperList(DataApiRequest apiRequest){\n  return apiRequest.getLogicalMetrics().stream().map(null).filter(null).collect(Collectors.toList());\n}\n", "nl": "Extract all ResultSetMappers from the api request.", "id": "13259"}
{"code": "public static ISpaceQuery create(Class<?> entryClass,ISpacePredicate... predicates){\n  return new CustomSpaceQuery(entryClass,new AllSpacePredicate(predicates));\n}\n", "nl": "Creates a space query using the specified class and predicates. The predicates are concatenated in an All predicate.", "id": "32966"}
{"code": "@Override public IntegerDistribution makeDistribution(){\n  return new PoissonDistribution(DEFAULT_TEST_POISSON_PARAMETER);\n}\n", "nl": "Creates the default discrete distribution instance to use in tests.", "id": "3575"}
{"code": "public boolean isAsynchronous(){\n  return m_asynch;\n}\n", "nl": "Indicates if this ImageFactory loads images asynchronously (true by default)", "id": "47119"}
{"code": "private static void buildIntervalSet(List<String> entries,Interval interval,Map<String,Set<Interval>> container){\n  entries.stream().map(null).forEach(null);\n}\n", "nl": "Build the set of intervals for the entries.", "id": "52262"}
{"code": "@NotNull public BoolProperty dogEared(){\n  return myDogEared;\n}\n", "nl": "If true and the backdrop shape supports it, add a fold to the top-right corner of the backdrop shape.", "id": "47761"}
{"code": "public static List<List<List<Writable>>> sampleSequence(int count,JavaRDD<List<List<Writable>>> data){\n  return data.takeSample(false,count);\n}\n", "nl": "Randomly sample a number of sequences from the data", "id": "15242"}
{"code": "public void start(){\n  try {\n    new StartHarness().startHarness();\n  }\n catch (  Exception e) {\n    throw (e instanceof IllegalStateException) ? (IllegalStateException)e : new IllegalStateException(e);\n  }\n}\n", "nl": "Start the test harness.", "id": "20467"}
{"code": "public static byte[] toByteArray(URL url) throws IOException {\n  URLConnection conn=url.openConnection();\n  try {\n    return IOUtils.toByteArray(conn);\n  }\n  finally {\n    close(conn);\n  }\n}\n", "nl": "Get the contents of a <code>URL</code> as a <code>byte[]</code>.", "id": "18502"}
{"code": "public static SecurityManagerBuilder create(){\n  return new SecurityManagerBuilder();\n}\n", "nl": "Starts a new configuration builder.", "id": "42894"}
{"code": "public IObjectInfo<T> add(T subject){\n  return store_impl(subject);\n}\n", "nl": "store an element", "id": "24768"}
{"code": "public Location subtract(Vector vec){\n  this.x-=vec.getX();\n  this.y-=vec.getY();\n  this.z-=vec.getZ();\n  return this;\n}\n", "nl": "Subtracts the location by a vector.", "id": "31082"}
{"code": "private void updateRingColor(float interpolatedTime,Ring ring){\n  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {\n    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));\n  }\n}\n", "nl": "Update the ring color if this is within the last 25% of the animation. The new ring color will be a translation from the starting ring color to the next color.", "id": "34951"}
{"code": "@Override public boolean containsSymbol(char[] buffer,int offset,int length){\nsynchronized (fSymbolTable) {\n    return fSymbolTable.containsSymbol(buffer,offset,length);\n  }\n}\n", "nl": "Returns true if the symbol table already contains the specified symbol.", "id": "8329"}
{"code": "protected void shareByEmail(){\n  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_EMAIL,getShareData(ShareConstant.SHARE_CHANNEL_EMAIL),ShareConstant.REQUEST_CODE);\n}\n", "nl": "share email", "id": "43385"}
{"code": "public boolean insert(E comparable){\n  if (comparable == null)   return false;\n  BinarySearchTreeNode<E> node=new BinarySearchTreeNode<E>(comparable);\n  return this.insert(node);\n}\n", "nl": "Inserts the given comparable into this binary tree. <p> Returns false if the given comparable is null.", "id": "7454"}
{"code": "List<Issue> errors(){\n  return errors;\n}\n", "nl": "Returns accumulated parsing errors.", "id": "51404"}
{"code": "protected LeadsStartQuery leadId(int value){\n  return unsafeParam(\"lead_id\",value);\n}\n", "nl": "Lead ID.", "id": "13690"}
{"code": "@Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {\n  return decode(image,null);\n}\n", "nl": "Locates and decodes a Data Matrix code in an image.", "id": "49881"}
{"code": "public boolean isFifoClass(){\n  return serverFifoMode;\n}\n", "nl": "Returns <code>true</code> if this class defined as FIFO, otherwise <code>false</code>.", "id": "22791"}
{"code": "public static MultiTextEdit flatten(TextEdit edit){\n  MultiTextEdit result=new MultiTextEdit();\n  flatten(edit,result);\n  return result;\n}\n", "nl": "Degenerates the given edit tree into a list.<br> All nodes of the result are leafs.<br> <strong>The given edit is modified and can no longer be used.</strong>", "id": "43397"}
{"code": "public PhotosConfirmTagQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "ID of the user or community that owns the photo.", "id": "18883"}
{"code": "public static String toString(URL url,Charset encoding) throws IOException {\n  InputStream inputStream=url.openStream();\n  try {\n    return toString(inputStream,encoding);\n  }\n  finally {\n    inputStream.close();\n  }\n}\n", "nl": "Gets the contents at the given URL.", "id": "3140"}
{"code": "public CsClientPacket handle(ByteBuffer data,ChatServerConnection client){\n  State state=client.getState();\n  int id=data.get() & 0xff;\n  return getPacket(state,id,data,client);\n}\n", "nl": "Reads one packet from given ByteBuffer", "id": "47440"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "53419"}
{"code": "public ContentletQuery addHost(String hostIdentifier){\n  query.append(\" +conhost:\" + hostIdentifier);\n  return this;\n}\n", "nl": "Adds a host limit to the query", "id": "7169"}
{"code": "public boolean hasLastUpdated(){\n  return lastUpdated != null;\n}\n", "nl": "Indicates whether this params specifies last updated.", "id": "8878"}
{"code": "@Override public void splitNode(){\n  return;\n}\n", "nl": "Splits this node and copies up the middle key. Note that we split this node immediately after it becomes full rather than when trying to insert an entry into a full node. Thus a full leaf node of 2d entries will be split into a left node with d entries and a right node with d entries, with the leftmost key of the right node copied up.", "id": "42634"}
{"code": "@Nullable public Boolean isFramed(){\n  if (myScaledImage == null) {\n    return null;\n  }\n  return myThumbnailHasFrame;\n}\n", "nl": "Does the current image have a device frame around it? Returns true, false, or null if no image computed yet", "id": "49580"}
{"code": "public boolean hasSuperClassAccess(){\n  return getSuperClassAccessOpt().getNumChild() != 0;\n}\n", "nl": "Check whether the optional SuperClassAccess child exists.", "id": "1753"}
{"code": "public boolean removeHandler(String columnName){\n  if (m_overrides == null)   return false;\n else   return m_overrides.remove(columnName) != null;\n}\n", "nl": "Remove a custom data handler for a given column name. Subsequent to this method, the column will use the default handler.", "id": "16694"}
{"code": "public static Bitmap rotateImage(Bitmap source,float angle){\n  Bitmap retVal;\n  Matrix matrix=new Matrix();\n  matrix.postRotate(angle);\n  retVal=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),matrix,true);\n  return retVal;\n}\n", "nl": "Rotate the bitmap if the image is in landscape camera", "id": "51062"}
{"code": "@CalledByNative public static boolean isIconLargeEnoughForLauncher(Context context,int width,int height){\n  ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);\n  final int minimalSize=am.getLauncherLargeIconSize() / 2;\n  return width >= minimalSize && height >= minimalSize;\n}\n", "nl": "Returns whether the given icon matches the size requirements to be used on the home screen.", "id": "8248"}
{"code": "public Vector2f divideLocal(float scalar){\n  x/=scalar;\n  y/=scalar;\n  return this;\n}\n", "nl": "<code>divideLocal</code> divides this vector by a scalar internally, and returns a handle to this vector for easy chaining of calls. Dividing by zero will result in an exception.", "id": "33418"}
{"code": "@Deprecated public static void write(StringBuffer data,Writer output) throws IOException {\n  if (data != null) {\n    output.write(data.toString());\n  }\n}\n", "nl": "Writes chars from a <code>StringBuffer</code> to a <code>Writer</code>.", "id": "53751"}
{"code": "public static void writeStringToFile(File file,String data) throws IOException {\n  writeStringToFile(file,data,Charset.defaultCharset(),false);\n}\n", "nl": "Writes a String to a file creating the file if it does not exist using the default encoding for the VM.", "id": "76"}
{"code": "public AppsGetFriendsListQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Additional profile fields, see description.", "id": "47233"}
{"code": "public void clearExpressions(){\n  this.leftSide=null;\n  this.rightSide=null;\n}\n", "nl": "Clears the left-side and right-side expressions. This can be useful, for example, before changing the validation rule period type, because the data elements allowed in the expressions depend on the period type.", "id": "49242"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCBuff_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201253,skillcaster,skillname);\n}\n", "nl": "Your magical buffs were dispelled because [%SkillCaster] used [%SkillName] on you.", "id": "50507"}
{"code": "public int addSeries(Color color){\n  int i=this.series.size();\n  this.series.add(new Series(color));\n  return i;\n}\n", "nl": "Adds a new series to the list of series.", "id": "374"}
{"code": "public VideoGetCommentsQueryWithExtended needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n", "nl": "Return an additional \"likes\" field", "id": "37047"}
{"code": "@Override public Filter createFilter(){\n  return new BeyondExtended();\n}\n", "nl": "Creates the filter.", "id": "2681"}
{"code": "public Channel intercept(Channel channel){\n  return ClientInterceptors.intercept(channel,this);\n}\n", "nl": "Use this intercepter to trace all requests made by this client channel.", "id": "2260"}
{"code": "public PhotosGetCommentsQueryWithExtended accessKey(String value){\n  return unsafeParam(\"access_key\",value);\n}\n", "nl": "Set access key", "id": "55279"}
{"code": "T toResponse(ResponseBody body) throws IOException {\n  return responseConverter.convert(body);\n}\n", "nl": "Builds a method return value from an HTTP response body.", "id": "37531"}
{"code": "public static int byteToUInt(byte b){\n  return b & 0xFF;\n}\n", "nl": "Returns the unsigned value of a byte", "id": "55410"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CMD_WHISHPER_INPUT(String value1,String value0){\n  return new SM_SYSTEM_MESSAGE(1400008,value1,value0);\n}\n", "nl": "You Whisper to %1: %0", "id": "41761"}
{"code": "public boolean contains(ChangeModifiers modifiers){\n  return super.contains(modifiers);\n}\n", "nl": "Checks if the specified modifier is set.", "id": "58810"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stumble_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200593,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] has knocked you down by using [%SkillName].", "id": "48912"}
{"code": "public UnrevealBuilder withCurvedTranslation(final PointF curveControlPoint){\n  this.mCurveControlPoint=curveControlPoint;\n  return this.withCurvedTranslation();\n}\n", "nl": "Defines that translation must be curved.", "id": "29134"}
{"code": "public String toString(){\n  return \"PostLexicalAnalyzer\";\n}\n", "nl": "Returns the string representation of the object", "id": "56151"}
{"code": "@Override public void onTmpFilesCopied(ResultCode result){\n  dismissLoadingDialog();\n  finish();\n}\n", "nl": "Process the result of CopyAndUploadContentUrisTask", "id": "31570"}
{"code": "public void startClassificationSection(String name) throws IOException {\n  currentName=name;\n  dumpStart=io.getPosition();\n  classificationIndexTmpFileWriter=new OutputWriter(rma2File.getClassificationIndexTmpFile());\n  numberOfClasses=0;\n}\n", "nl": "start a new classification", "id": "16886"}
{"code": "static double[] loadExpIntA(){\n  return EXP_INT_A.clone();\n}\n", "nl": "Load \"EXP_INT_A\".", "id": "14633"}
{"code": "public void close() throws IOException {\n  dis.close();\n  dis.close();\n  fis.close();\n}\n", "nl": "Close all the output streams.", "id": "31554"}
{"code": "public static ContextSet fromEntries(Iterable<Map.Entry<String,String>> iterable){\n  if (iterable == null) {\n    throw new NullPointerException(\"iterable\");\n  }\n  MutableContextSet set=new MutableContextSet();\n  set.addAll(iterable);\n  return set.immutableCopy();\n}\n", "nl": "Creates a ContextSet from an existing iterable of Map Entries", "id": "15371"}
{"code": "public void addTableBlockInfoList(String task,List<TableBlockInfo> tableBlockInfoList){\n  taskBlockInfoMapping.put(task,tableBlockInfoList);\n}\n", "nl": "maps TableBlockInfoList to respective task", "id": "51185"}
{"code": "public Crop withMaxSize(int width,int height){\n  cropIntent.putExtra(Extra.MAX_X,width);\n  cropIntent.putExtra(Extra.MAX_Y,height);\n  return this;\n}\n", "nl": "Set maximum crop size", "id": "55828"}
{"code": "void finishStartElement(){\n  fInStartElement=false;\n  fElementAugs=null;\n  fAttributes=null;\n}\n", "nl": "Cleanup at the end of start element.", "id": "36136"}
{"code": "public QueueReader<E> reader(){\n  return new QueueReader<E>((E[])q,index);\n}\n", "nl": "Create reader which will read objects from the queue.", "id": "29639"}
{"code": "public void add(Predicate p,double size){\n  super.add(p,new Double(size));\n}\n", "nl": "Add a size mapping rule to this SizeAction. VisualItems that match the provided predicate will be assigned the given size value (assuming they do not match an earlier rule).", "id": "26054"}
{"code": "public boolean hasNoDragOffset(){\n  return mTransOffsetX <= 0 && mTransOffsetY <= 0;\n}\n", "nl": "Returns true if both drag offsets (x and y) are zero or smaller.", "id": "11118"}
{"code": "public static FilterResolverIntf resolveFilter(Expression filterExpression,AbsoluteTableIdentifier absoluteTableIdentifier){\n  try {\n    FilterExpressionProcessor filterExpressionProcessor=new FilterExpressionProcessor();\n    return filterExpressionProcessor.getFilterResolver(filterExpression,absoluteTableIdentifier);\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Error while resolving filter expression\",e);\n  }\n}\n", "nl": "Resolve the filter expression.", "id": "43692"}
{"code": "public Element generateSimpleElement(final Document document,final Object pojo,final List<String> attributes) throws ParserConfigurationException, IllegalAccessException, InstantiationException {\n  return generateSimpleElement(document,pojo.getClass().getSimpleName(),pojo,attributes);\n}\n", "nl": "Generates an xml element from this pojo. Translating the fields like described in the class description.", "id": "33168"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_protect_PROTECT_SKILL_HEAL_ME_to_B(String protector,int num0,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201178,protector,num0,skilltarget,skillname);\n}\n", "nl": "[%Protector] received the %num0 damage inflicted on [%SkillTarget] by a [%SkillName], because of the protection effect cast on it.", "id": "9100"}
{"code": "public void addParameter(ParameterDeclaration node){\n  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the Parameter list.", "id": "44322"}
{"code": "protected PollsEditQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Poll owner id", "id": "24537"}
{"code": "@Override public boolean equals(Object object){\n  if (this == object) {\n    return true;\n  }\n  if (object == null) {\n    return false;\n  }\n  if (getClass() != object.getClass()) {\n    return false;\n  }\n  JsonArray other=(JsonArray)object;\n  return values.equals(other.values);\n}\n", "nl": "Indicates whether a given object is \"equal to\" this JsonArray. An object is considered equal if it is also a <code>JsonArray</code> and both arrays contain the same list of values. <p> If two JsonArrays are equal, they will also produce the same JSON output. </p>", "id": "47208"}
{"code": "public int read(byte b[],int off,int len) throws IOException, LogException {\n  if (length < len)   badRead(len);\n  len=in.read(b,off,len);\n  length-=len;\n  return len;\n}\n", "nl": "Reads data into an array of bytes. This method blocks until some input is available.", "id": "57004"}
{"code": "private byte[] SHA256hash(byte[] tobeHashed){\n  SHA256Digest digester=new SHA256Digest();\n  byte[] retValue=new byte[digester.getDigestSize()];\n  digester.update(tobeHashed,0,tobeHashed.length);\n  digester.doFinal(retValue,0);\n  return retValue;\n}\n", "nl": "This is the SHA-256 hashing function that is performed on the public key", "id": "9110"}
{"code": "public void highlightValue(float x,int dataSetIndex,int stackIndex){\n  highlightValue(new Highlight(x,dataSetIndex,stackIndex),false);\n}\n", "nl": "Highlights the value at the given x-position in the given DataSet. Provide -1 as the  dataSetIndex to undo all highlighting.", "id": "23068"}
{"code": "@Override public void close() throws IOException {\n  try {\n    out.close();\n  }\n catch (  IOException e) {\n    handleIOException(e);\n  }\n}\n", "nl": "Invokes the delegate's <code>close()</code> method.", "id": "5809"}
{"code": "public ISpaceSynchronizeReplicaState recoverFromOtherSpace() throws Exception {\n  boolean transientOnly=!_space.getEngine().isColdStart();\n  return _recoveryGroup.recover(transientOnly,transientOnly);\n}\n", "nl": "Recover data for primary space. 1. try to recover in replication group . 2. try to recover notify templates in LB group", "id": "44241"}
{"code": "public boolean isApplicable(){\n  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "35726"}
{"code": "public boolean hasMoreTokens(){\n  int nextChar=currentChar;\n  return (nextChar != EOF);\n}\n", "nl": "Returns <code>true</code> if there are more tokens, <code>false</code> otherwise.", "id": "54172"}
{"code": "public AdsGetAdsTargetingQuery adIds(String value){\n  return unsafeParam(\"ad_ids\",value);\n}\n", "nl": "Filter by ads. Serialized JSON array with ad IDs. If the parameter is 'null', all ads will be shown.", "id": "37022"}
{"code": "public int findFirstCompletelyVisibleItemPosition(){\n  final View child=findOneVisibleChild(0,getChildCount(),true);\n  return child == null ? NO_POSITION : getPosition(child);\n}\n", "nl": "Returns the adapter position of the first fully visible view. <p> Note that bounds check is only performed in the current orientation. That means, if LayoutManager is horizontal, it will only check the view's left and right edges.", "id": "33444"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SUBMIT_PETITION_FAILED_NOT_SERVICE_TIME(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1300545,value0,value1);\n}\n", "nl": "The Support service cannot be used in the hours between %0 and %1 o' clock. Please use the Return skill if you are locked in an impassable area.", "id": "57080"}
{"code": "public AudioGetQuery albumId(Integer value){\n  return unsafeParam(\"album_id\",value);\n}\n", "nl": "Audio album ID.", "id": "23765"}
{"code": "public void deleteFaceList(@NotNull String faceListId){\n  faceListBuilder.deleteFaceList(faceListId).withNoResult();\n}\n", "nl": "Deletes a faceList", "id": "33434"}
{"code": "public String dnsResolve(String host){\n  try {\n    InetAddress ina=InetAddress.getByName(host);\n    return ina.getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    Logger.log(JavaxPacScriptParser.class,LogLevel.DEBUG,\"DNS name not resolvable {0}.\",host);\n  }\n  return \"\";\n}\n", "nl": "Resolves the given DNS host name into an IP address, and returns it in the dot separated format as a string.", "id": "1804"}
{"code": "public void typeCheck(){\n  if (constant().error)   error(\"The integer literal \\\"\" + getLITERAL() + \"\\\" is too large for type int.\");\n}\n", "nl": "Check for and report literal-out-of-bounds error. If the constant is error-marked, there exists a literal out of bounds error.", "id": "33456"}
{"code": "@Override public void ignoredCharacters(XMLString text,Augmentations augs) throws XNIException {\n}\n", "nl": "Characters within an IGNORE conditional section.", "id": "56099"}
{"code": "public void clear(){\n  IntIterator rows=rows(true);\n  while (rows.hasNext()) {\n    removeRow(rows.nextInt());\n  }\n}\n", "nl": "Clear this table, removing all rows.", "id": "12627"}
{"code": "final public void disable_tracing(){\n}\n", "nl": "Disable tracing.", "id": "58666"}
{"code": "@VisibleForTesting void resetCounters(){\n  updateCountersForOpen();\n  mPreferenceManager.setContextualSearchPromoOpenCount(0);\n  mDidResetCounters=true;\n}\n", "nl": "Resets all policy counters.", "id": "8275"}
{"code": "public void addResource(URL url){\n  addResourceObject(url);\n}\n", "nl": "Add a configuration resource. The properties of this resource will override properties of previously added resources, unless they were marked <a href=\"#Final\">final</a>.", "id": "5788"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_USER_KICKED_BY_TIMEOUT(String durationtime0){\n  return new SM_SYSTEM_MESSAGE(1400261,durationtime0);\n}\n", "nl": "Connection will time out in %DURATIONTIME0. Please take a break.", "id": "45937"}
{"code": "public void performSignIn(Fragment fragment){\n  LoginManager.getInstance().logInWithReadPermissions(fragment,Arrays.asList(\"public_profile\",\"user_friends\",\"email\"));\n}\n", "nl": "Perform facebook login. This method should be called when you are signing in from fragment.<p> This method should generally call when user clicks on \"Sign in with Facebook\" button.", "id": "15709"}
{"code": "public void resetPropertyValue(Object property){\n}\n", "nl": "Reset the specified property's value to its default value. Do nothing because properties are read only.", "id": "5595"}
{"code": "public EqExpr newEqExpr(Value op1,Value op2){\n  return new GEqExpr(op1,op2);\n}\n", "nl": "Constructs a EqExpr(Expr, Expr) grammar chunk.", "id": "17437"}
{"code": "public byte[] decodeAuto(String s){\n  int nRemain=s.length() % 4;\n  if (nRemain == 0) {\n    return this.decode(s);\n  }\n else {\n    return this.decode(s + new String(this.charToPad,0,4 - nRemain));\n  }\n}\n", "nl": "decode a well-formed complete Base64 string back into an array of bytes. It must have an even multiple of 4 data characters (not counting \\n), padded out with = as needed.", "id": "50269"}
{"code": "public static SpawnTemplate addNewSingleTimeSpawn(int worldId,int npcId,float x,float y,float z,byte heading){\n  return addNewSpawn(worldId,npcId,x,y,z,heading,0);\n}\n", "nl": "Create non-permanent spawn template with no respawn", "id": "16753"}
{"code": "public boolean total_context_counts(){\n  return soot.PhaseOptions.getBoolean(options,\"total-context-counts\");\n}\n", "nl": "Print Context Counts (Totals only) -- Print total number of contexts. Causes Paddle to print the number of contexts and number of  context equivalence classes.", "id": "13207"}
{"code": "@Provides @Singleton @CassandraClusters Collection<String> provideCassandraClusterNames(BlobStoreConfiguration configuration){\n  Set<String> clusters=Sets.newLinkedHashSet();\n  for (  CassandraConfiguration config : configuration.getCassandraClusters().values()) {\n    clusters.add(config.getCluster());\n  }\n  return clusters;\n}\n", "nl": "Required for HintsPollerManager", "id": "7843"}
{"code": "public boolean shouldBypassFilter(SecurityContext securityContext){\n  return (isTrusted(securityContext.getUserDetails()) || trustInterceptor.verifyTrust(securityContext));\n}\n", "nl": "If security context should not be passed to the filter or audit.", "id": "5220"}
{"code": "protected FriendsDeleteQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "ID of the user whose friend request is to be declined or who is to be deleted from the current user's friend list.", "id": "51231"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "31906"}
{"code": "public int dpToPx(@AndroidDpCoordinate int dp){\n  return (int)(0.5f + dp * myDpiFactor);\n}\n", "nl": "Transform android Dp into android pixels", "id": "53195"}
{"code": "public void start(){\n  this.documentUpdateTimeMicros=0;\n  verifySubscriptionTargetExists(null);\n}\n", "nl": "Start the active subscription notifications of this trust manager and load the initial state of ssl trust certificates.", "id": "17724"}
{"code": "private void consoleSetup(){\n  logController=new LogController();\n  ConsolePrintStream.setup(logController);\n}\n", "nl": "Setup of console.", "id": "12357"}
{"code": "public Builder bitmapTransformerFactory(@Nullable BitmapTransformer.Factory bitmapTransformerFactory){\n  this.bitmapTransformerFactory=bitmapTransformerFactory;\n  return this;\n}\n", "nl": "Set factory that produces bitmap transformers.", "id": "16845"}
{"code": "public DecorationCursor queryDecorationsSearch(String filter){\n  filter=(filter == null) ? \"\" : filter.trim();\n  if (filter.equals(\"\"))   return mHelper.queryDecorations();\n  return mHelper.queryDecorationsSearch(filter);\n}\n", "nl": "Gets a cursor that has a list of decorations that pass the filter. Having a null or empty filter is the same as calling without a filter", "id": "455"}
{"code": "public void with(@NotNull Runnable onAnyInvalidated){\n  myOnAnyInvalidated=onAnyInvalidated;\n}\n", "nl": "Specify the callback which will be triggered whenever any of the values we are listening to changes.", "id": "58315"}
{"code": "public final void dropDocumentReferences(){\n  fDocument=null;\n  fDocumentImpl=null;\n  fDeferredDocumentImpl=null;\n  fDocumentType=null;\n  fCurrentNode=null;\n  fCurrentCDATASection=null;\n  fCurrentEntityDecl=null;\n  fRoot=null;\n}\n", "nl": "Drops all references to the last DOM which was built by this parser.", "id": "4118"}
{"code": "public Builder className(String className){\n  this.className=className;\n  return this;\n}\n", "nl": "Custom class name set on an element. </br> default empty string", "id": "53584"}
{"code": "public static final MediaFormat createVideoFormat(String mime,int width,int height){\n  MediaFormat format=new MediaFormat();\n  format.setString(KEY_MIME,mime);\n  format.setInteger(KEY_WIDTH,width);\n  format.setInteger(KEY_HEIGHT,height);\n  return format;\n}\n", "nl": "Creates a minimal video format.", "id": "4283"}
{"code": "@Override public void populateExpression(Object objValue){\n}\n", "nl": "Populate expression.", "id": "56323"}
{"code": "private void timeout(){\n  if (this.status == AccelListener.STARTING) {\n    this.timestamp=System.currentTimeMillis();\n    this.win();\n  }\n}\n", "nl": "Returns latest cached position if the sensor hasn't returned newer value. Called two seconds after starting the listener.", "id": "37462"}
{"code": "@Deprecated public Builder enablePermissive(){\n  return this;\n}\n", "nl": "permissive mode is enabled by default", "id": "27103"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_ENEMY_PARRY(String value0){\n  return new SM_SYSTEM_MESSAGE(1210225,value0);\n}\n", "nl": "%0 parried your attack.", "id": "46068"}
{"code": "public void addException(Access node){\n  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the Exception list.", "id": "992"}
{"code": "public AccountSetSilenceModeQuery peerId(Integer value){\n  return unsafeParam(\"peer_id\",value);\n}\n", "nl": "Set peer id", "id": "37268"}
{"code": "public Vector rotateInRadian(double radians){\n  final double length=length();\n  double angle=angleInRadian();\n  angle+=radians;\n  final Vector result=new Vector(Math.cos(angle),Math.sin(angle));\n  return result.multiply(length);\n}\n", "nl": "Return a new instance of vector rotated from the given number of radians.", "id": "15008"}
{"code": "private AudioOption createOption5(ChannelType... channels){\n  AudioOption option=new AudioOption();\n  Stream.of(createTrack(new Channel(FL.name(),channels[0])),createTrack(new Channel(FR.name(),channels[1]))).forEach(null);\n  return option;\n}\n", "nl": "Creates Option5 option.", "id": "24016"}
{"code": "protected Expression generateExpression(){\n  Expression expression=null;\n  if (attributeComboBox != null) {\n    String value=getStringValue();\n    if (value != null) {\n      expression=getFilterFactory().property(value);\n    }\n  }\n  return expression;\n}\n", "nl": "Generate expression.", "id": "35617"}
{"code": "public static SM_SYSTEM_MESSAGE STR_USER_BANNED(String value0){\n  return new SM_SYSTEM_MESSAGE(1300623,value0);\n}\n", "nl": "%0 has been banned.", "id": "3584"}
{"code": "@Override public double[] makeInverseCumulativeTestValues(){\n  double[] points=makeCumulativeTestPoints();\n  double[] points2=new double[points.length - 4];\n  System.arraycopy(points,4,points2,0,points2.length - 4);\n  return points2;\n}\n", "nl": "Creates the default inverse cumulative probability test expected values.", "id": "52251"}
{"code": "public void addTypeParameter(TypeVariable node){\n  List<TypeVariable> list=(parent == null || state == null) ? getTypeParameterListNoTransform() : getTypeParameterList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the TypeParameter list.", "id": "26515"}
{"code": "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  try {\n    check();\n  }\n catch (  RuntimeException e) {\n    rethrow(e);\n  }\n}\n", "nl": "Verifies legal descriptor ordering.", "id": "42616"}
{"code": "private static String dayToString(int day,int dayOfWeekLength){\n  return DateUtils.getDayOfWeekString(dayToUtilDay(day),dayOfWeekLength);\n}\n", "nl": "Converts day of week to a String.", "id": "1031"}
{"code": "public void onMove(){\n  notifyAIOnMove();\n  updateZone();\n}\n", "nl": "Perform tasks on Creature move in progress", "id": "26765"}
{"code": "protected LikesDeleteQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n", "nl": "Object ID.", "id": "8195"}
{"code": "public int logout(){\n  return Helper.update(getId(),V.create(\"sid\",X.EMPTY).set(\"updated\",System.currentTimeMillis()),User.class);\n}\n", "nl": "record the logout info in database for the user.", "id": "7794"}
{"code": "public JSONObject optJSONObject(String key){\n  Object o=opt(key);\n  return o instanceof JSONObject ? (JSONObject)o : null;\n}\n", "nl": "Get an optional JSONObject associated with a key. It returns null if there is no such key, or if its value is not a JSONObject.", "id": "102"}
{"code": "public static char[] toCharArray(InputStream is,Charset encoding) throws IOException {\n  CharArrayWriter output=new CharArrayWriter();\n  copy(is,output,encoding);\n  return output.toCharArray();\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a character array using the specified character encoding. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>.", "id": "47472"}
{"code": "public Builder maxZoom(Number maxZoom){\n  this.maxZoom=maxZoom;\n  return this;\n}\n", "nl": "The maximum possible zoom to use. </br> default null", "id": "7820"}
{"code": "private static boolean focusCenter(){\n  return (!CropOverlayView.showGuidelines());\n}\n", "nl": "Determines if the cropper should focus on the center handle or the side handles. If it is a small image, focus on the center handle so the user can move it. If it is a large image, focus on the side handles so user can grab them. Corresponds to the appearance of the RuleOfThirdsGuidelines.", "id": "34216"}
{"code": "public void displaySearchContext(String selection,String end){\n  cancelSearchTermResolutionAnimation();\n  getSearchBarControl().setSearchContext(selection,end);\n  resetSearchBarContextOpacity();\n}\n", "nl": "Shows the search context in the SearchBar.", "id": "38480"}
{"code": "public void addGatingSequences(Sequence... gatingSequences){\n  sequencer.addGatingSequences(gatingSequences);\n}\n", "nl": "Add the specified gating sequences to this instance of the Disruptor.  They will safely and atomically added to the list of gating sequences.", "id": "696"}
{"code": "private void readObjectNoData() throws ObjectStreamException {\n  throw new InvalidObjectException(\"no data\");\n}\n", "nl": "Throws InvalidObjectException, since data for this class is required.", "id": "13041"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_Instant_HEAL_ME_TO_SELF(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200367,num0,skillname);\n}\n", "nl": "You increased the flight time by %num0 by using [%SkillName].", "id": "31656"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CloseAerial_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200342,skillname);\n}\n", "nl": "You are released from the Aerial Snare by using [%SkillName].", "id": "57262"}
{"code": "@Override public void write(LogRecord record) throws IOException {\n  getLedgerWriter(record.getTransactionId(),false).write(record);\n}\n", "nl": "Write log records to the stream.", "id": "41032"}
{"code": "public boolean isTargetSpecificLayout(){\n  return myEditedConfig.getVersionQualifier() != null;\n}\n", "nl": "Returns true if the current layout is target-specific", "id": "4928"}
{"code": "@Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){\n  FieldConfigString copy=null;\n  if (fieldConfigBase != null) {\n    copy=new FieldConfigString(fieldConfigBase.getCommonData(),this.buttonText);\n  }\n  return copy;\n}\n", "nl": "Creates a copy of the field.", "id": "20421"}
{"code": "public void disconnect(){\n  if (mService == null)   return;\n  mContext.unbindService(mConnection);\n  mContext=null;\n  mService=null;\n}\n", "nl": "Disconnects from the service and resets the client's state.", "id": "20284"}
{"code": "private List<ValueComboBoxDataGroup> populateSymbolList(Class<?> panelDetails){\n  List<ValueComboBoxDataGroup> combinedSymbolList=new ArrayList<ValueComboBoxDataGroup>();\n  for (  FieldState panel : symbolTypeFieldList) {\n    panel.populateSymbolList(panelDetails,combinedSymbolList);\n  }\n  return combinedSymbolList;\n}\n", "nl": "Populate symbol type list. Given a panel details class iterate over all the field panels asking them to populate the symbol type list. <p> The returned the list contains all possible symbol types.", "id": "53815"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_MENTOR_END_BANISH_PARTYMSG(String value0,String worldname1){\n  return new SM_SYSTEM_MESSAGE(1400768,value0,worldname1);\n}\n", "nl": "%0 was forced to leave %WORLDNAME1 because he or she stopped Mentoring.", "id": "54504"}
{"code": "public void addRoot(ProtoElement root){\n  roots.add(root);\n}\n", "nl": "Add a root element to the model. Root elements are collected during merging and used to compute the transitively reachable set of referenced elements.", "id": "19084"}
{"code": "protected BuildFile createBuildFile(String filePath,String... contentLines){\n  PsiFile file=createPsiFile(filePath,contentLines);\n  assertThat(file).isInstanceOf(BuildFile.class);\n  return (BuildFile)file;\n}\n", "nl": "Creates a file with the specified contents and file path in the test project, and asserts that it's parsed as a BuildFile", "id": "4460"}
{"code": "public void erasePurchase(String sku){\n  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);\n}\n", "nl": "Erase a purchase (locally) from the inventory, given its product ID. This just modifies the Inventory object locally and has no effect on the server! This is useful when you have an existing Inventory object which you know to be up to date, and you have just consumed an item successfully, which means that erasing its purchase data from the Inventory you already have is quicker than querying for a new Inventory.", "id": "24191"}
{"code": "private FlatServoRail expand(){\n  if (isDynamic())   return this;\n  FlatServoRail ret=new FlatServoRail();\n  ret.component=this.component;\n  ret.color=this.color;\n  return ret;\n}\n", "nl": "Convert a static instance into a dynamic one", "id": "13347"}
{"code": "public static boolean isRematchedUpdate(int mod){\n  return (mod & NOTIFY_REMATCHED_UPDATE) != 0;\n}\n", "nl": "Return <tt>true</tt> if the integer argument includes the <tt>NOTIFY_REMATCHED_UPDATE</tt> modifier, <tt>false</tt> otherwise.", "id": "14888"}
{"code": "public boolean isVisible(){\n  return !isDismissed && visible;\n}\n", "nl": "Returns whether this view is visible or not", "id": "34412"}
{"code": "public boolean didTouchContent(){\n  return mHasContentBeenTouched;\n}\n", "nl": "Gets whether a touch on the content view has been done yet or not.", "id": "27888"}
{"code": "public SingularValueDecomposition svd(){\n  return new SingularValueDecomposition(this);\n}\n", "nl": "Singular Value Decomposition", "id": "18404"}
{"code": "public FitBoundsOptions build(){\n  FitBoundsOptions options=new FitBoundsOptions();\n  options.paddingTopLeft=this.paddingTopLeft;\n  options.paddingBottomRight=this.paddingBottomRight;\n  options.padding=this.padding;\n  options.maxZoom=this.maxZoom;\n  return options;\n}\n", "nl": "Builds the FitBoundsOptions new instance", "id": "18696"}
{"code": "@Deprecated public void onFailure(int statusCode,Throwable error,String content){\n  onFailure(error,content);\n}\n", "nl": "Fired when a request fails to complete, override to handle in your own code", "id": "18120"}
{"code": "public void removeDiscoveryListener(DiscoveryListener listener){\n  listeners.remove(listener);\n}\n", "nl": "Removes a listener from the set of objects listening for discovery events. If the listener object input to this method does not exist in the set of listeners, then this method will take no action.", "id": "2521"}
{"code": "@Override public boolean hasChildNodes(){\n  if (needsSyncChildren()) {\n    synchronizeChildren();\n  }\n  return value != null;\n}\n", "nl": "Test whether this node has any children. Convenience shorthand for (Node.getFirstChild()!=null)", "id": "53197"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"move dir=down;\");\n}\n", "nl": "action to be performed", "id": "33065"}
{"code": "public static boolean updateGradleExperimentalPluginVersionAndNotifyFailure(@NotNull Project project,@NotNull String pluginVersion,@Nullable String gradleVersion,boolean invalidateSyncOnFailure){\n  return updateGradlePluginVersionAndNotifyFailure(project,pluginVersion,gradleVersion,true,invalidateSyncOnFailure);\n}\n", "nl": "Updates the Android Gradle 'experimental' plugin version, and optionally the Gradle version of a given project. This method notifies the user if the version update failed.", "id": "35997"}
{"code": "public void sendToAll(){\n  sendTo(null);\n}\n", "nl": "Sends the Notice to everyone in the world.", "id": "3385"}
{"code": "private static Entry findLeaseFromIterator(Iterator<Entry> iter,Lease lease){\n  while (iter.hasNext()) {\n    Entry e=iter.next();\n    if (e.lease.equals(lease))     return e;\n  }\n  return null;\n}\n", "nl": "Find a lease entry, or null", "id": "49681"}
{"code": "public static String formatTimestamp(long millis){\n  return ISO8601Utils.format(new Date(millis),true);\n}\n", "nl": "Formats the specified timestamp as an ISO 8601 string with milliseconds and UTC timezone.", "id": "35020"}
{"code": "public boolean isXPath(){\n  return false;\n}\n", "nl": "Return true if this value is an XML Path.", "id": "6111"}
{"code": "private Map<String,String> mapJobRowsToJobViews(JobRow jobRow){\n  try {\n    return jobPayloadBuilder.buildPayload(jobRow,uriInfo);\n  }\n catch (  JobRequestFailedException ignored) {\n    String msg=ErrorMessageFormat.JOBS_RETREIVAL_FAILED.format(jobRow.getId());\n    LOG.error(msg);\n    throw new JobRequestFailedException(msg);\n  }\n}\n", "nl": "Given a JobRow, map it to the Job payload to be returned to the user. If the JobRow cannot be successfully mapped to a Job View, JobRequestFailedException is thrown.", "id": "1858"}
{"code": "private Optional<Data<Input,Output>> match_(Input input){\n  return Optional.ofNullable(recent_.get()).filter(null);\n}\n", "nl": "Try to match an input against the most recent calculation.", "id": "24198"}
{"code": "public static JsonArray array(float... values){\n  if (values == null) {\n    throw new NullPointerException(\"values is null\");\n  }\n  JsonArray array=new JsonArray();\n  for (  float value : values) {\n    array.add(value);\n  }\n  return array;\n}\n", "nl": "Creates a new JsonArray that contains the JSON representations of the given <code>float</code> values.", "id": "25973"}
{"code": "public static void storeEvent(){\n  if (event == null) {\n    return;\n  }\n  StaticsAgent.storeObject(event);\n}\n", "nl": "storeEvent Activity destory call", "id": "56541"}
{"code": "public void release(){\n  Log.i(TAG,\"deleting program \" + programHandle);\n  GLES20.glDeleteProgram(programHandle);\n  programHandle=-1;\n}\n", "nl": "Releases the program. <p/> The appropriate EGL context must be current (i.e. the one that was used to create the program).", "id": "48339"}
{"code": "public CommandBuilder withArguments(String... arguments){\n  this.arguments.addAll(Arrays.asList(arguments));\n  return this;\n}\n", "nl": "Add arguments", "id": "58271"}
{"code": "protected void onUnregisterObserver(){\n}\n", "nl": "Called whenever it's time to stop monitoring changes on the loaders data source", "id": "30213"}
{"code": "public static MetricColumn addNewMetricColumn(Schema schema,String name){\n  MetricColumn col=new MetricColumn(name);\n  schema.addColumn(col);\n  return col;\n}\n", "nl": "Method to create a MetricColumn tied to a schema.", "id": "6011"}
{"code": "public static ServiceConfiguration create(String configFile) throws IOException, IllegalArgumentException {\n  checkNotNull(configFile);\n  return create(new FileInputStream(configFile));\n}\n", "nl": "Creates ServiceConfiguration and loads it with populated attribute values loaded from provided property file.", "id": "42915"}
{"code": "public boolean useSkill(){\n  return useSkill(true,true);\n}\n", "nl": "Skill entry point", "id": "33485"}
{"code": "public int size(){\n  return v.length;\n}\n", "nl": "get dimension", "id": "14172"}
{"code": "public void removeCycles(){\n  if (myHorizontalCycle != null) {\n    removeCycles(myHorizontalDeps);\n  }\n  if (myVerticalCycle != null) {\n    removeCycles(myVerticalDeps);\n  }\n}\n", "nl": "Breaks any cycles detected by the handler", "id": "23905"}
{"code": "public static FSize calcTextSize(Paint paint,String demoText){\n  FSize result=FSize.getInstance(0,0);\n  calcTextSize(paint,demoText,result);\n  return result;\n}\n", "nl": "Returns a recyclable FSize instance. calculates the approximate size of a text, depending on a demo text avoid repeated calls (e.g. inside drawing methods)", "id": "25388"}
{"code": "public static ValueGetterSpacePredicate<ServerEntry> pathAny(String path,ISpacePredicate... predicates){\n  return path(path,any(predicates));\n}\n", "nl": "Shortcut for path(path, any(predicates)).", "id": "557"}
{"code": "public <E extends Element>void registerLintRule(LintRule<E> rule){\n  lintRules.put(rule.getElementClass(),rule);\n  registerLintRuleName(rule.getName());\n}\n", "nl": "Registers a linting rule with this aspect. The type of the rule can be either a proto element or, for top-level scoped issues, the model itself. All registered rules are run automatically by this class.", "id": "36337"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ChangeHateOnAttacked_ME_TO_B(String skillcaster,String value0d,String skilltarget,String value0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200494,skillcaster,value0d,skilltarget,value0,skillname);\n}\n", "nl": "[%SkillCaster] %0d [%SkillTarget]'s enmity %0 by using [%SkillName].", "id": "18110"}
{"code": "public FriendsGetQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of friends.", "id": "22234"}
{"code": "public AdsGetSuggestionsQueryWithSchools q(String value){\n  return unsafeParam(\"q\",value);\n}\n", "nl": "Filter-line of the request (for 'countries, regions, cities, streets, schools, interests, positions').", "id": "42140"}
{"code": "protected void seekTo(int newPosition){\n  if (mPlaybackService != null) {\n    mPlaybackService.seekTo(newPosition);\n  }\n}\n", "nl": "Called whenever the user presses fast-forward/rewind or when the user keeps the corresponding action pressed.", "id": "43160"}
{"code": "public static void logPromoOpenCount(int count){\n  RecordHistogram.recordCountHistogram(\"Search.ContextualSearchPromoOpenCount\",count);\n}\n", "nl": "Records the total count of times the promo panel has *ever* been opened.  This should only be called when the user is still undecided.", "id": "17315"}
{"code": "private Object invokeLRMIProxy(final IMethod method,Object[] args) throws Exception {\n  return method.invoke(this,args);\n}\n", "nl": "perform special handling of ILRMIProxy method", "id": "738"}
{"code": "public boolean canLoot(boolean ignoreDistance){\n  boolean active=cooldownCompleteTimestampMs < api.currentTimeMillis();\n  if (!ignoreDistance) {\n    return active && inRange();\n  }\n  return active;\n}\n", "nl": "Can loot boolean.", "id": "7430"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  if (inspectorWindow.getDataTree().getSelectionCount() == 0)   inspectorWindow.clear();\n else   inspectorWindow.deleteSelectedNodes();\n}\n", "nl": "parses the given command and executes it", "id": "21705"}
{"code": "public void addGroupPropertiesListener(GroupPropertiesListener groupPropertiesListener){\n  groupPropertiesListeners.add(groupPropertiesListener);\n}\n", "nl": "Adds a group properties listener.", "id": "38518"}
{"code": "public static String[] readStrings(){\n  return readAllStrings();\n}\n", "nl": "Reads all remaining tokens and returns them as an array of strings.", "id": "47560"}
{"code": "@Override public final Object createInstance(Reader reader){\n  throw new UnsupportedOperationException(\"createInstance\");\n}\n", "nl": "Don't use.", "id": "34678"}
{"code": "@Override public void attributeDecl(String elementName,String attributeName,String type,String[] enumeration,String defaultType,XMLString defaultValue,XMLString nonNormalizedDefaultValue,Augmentations augmentations) throws XNIException {\n}\n", "nl": "An attribute declaration.", "id": "25618"}
{"code": "public MarketSearchQuery priceTo(Integer value){\n  return unsafeParam(\"price_to\",value);\n}\n", "nl": "Maximum item price value. For example \"14100\"", "id": "10626"}
{"code": "public boolean isFullRank(){\n  for (int j=0; j < n; j++) {\n    if (Rdiag[j] == 0)     return false;\n  }\n  return true;\n}\n", "nl": "Is the matrix full rank?", "id": "12991"}
{"code": "public void timeToSpeech(String time){\n  String theTime=timeToString(time);\n  if (theTime != null) {\n    textToSpeech(theTime);\n  }\n else {\n    throw new IllegalArgumentException(\"Bad time format\");\n  }\n}\n", "nl": "Speaks the given time. Time should be in the exact form HH:MM where HH is the hour 00 to 23, and MM is the minute 00 to 59.", "id": "33200"}
{"code": "public static Metrics create(Map<String,String> dimensionMap){\n  Map<String,String> map=Maps.newTreeMap();\n  map.putAll(dimensionMap);\n  return new Metrics(Collections.unmodifiableMap(map));\n}\n", "nl": "Creates a metrics object with the dimensions map immutable", "id": "49699"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_Instant_HEAL_ME_TO_B(String skilltarget,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201223,skilltarget,num0,skillname);\n}\n", "nl": "[%SkillTarget] recovered %num0 DP because you used [%SkillName].", "id": "36975"}
{"code": "public static EquivalentValue equiVal(Value val){\n  if (val == null)   return null;\n  return new EquivalentValue(val);\n}\n", "nl": "wraps a value into a EquivalentValue. returns <code>null</code> if <code>val</code> is null.", "id": "58551"}
{"code": "@Override public void undoAction(UndoInterface undoRedoObject){\n  String oldValueObj=(String)undoRedoObject.getOldValue();\n  envVarComboBox.setSelectedItem(oldValueObj);\n}\n", "nl": "Undo action.", "id": "34983"}
{"code": "public static String toString(byte[] input,String encoding) throws IOException {\n  return new String(input,encoding);\n}\n", "nl": "Get the contents of a <code>byte[]</code> as a String using the specified character encoding. <p/> Character encoding names can be found at <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.", "id": "36745"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_POLISH_SUCCEED(int nameId){\n  return new SM_SYSTEM_MESSAGE(1401650,new DescriptionId(nameId));\n}\n", "nl": "%0's Idian is fully charged.", "id": "12437"}
{"code": "public static void writeByteArrayToFile(File file,byte[] data,boolean append) throws IOException {\n  OutputStream out=null;\n  try {\n    out=openOutputStream(file,append);\n    out.write(data);\n    out.close();\n  }\n  finally {\n    IOUtils.closeQuietly(out);\n  }\n}\n", "nl": "Writes a byte array to a file creating the file if it does not exist.", "id": "18668"}
{"code": "public static SM_SYSTEM_MESSAGE STR_PARTY_ITEM_DICE_CUSTOM_ME(int num0,int num1){\n  return new SM_SYSTEM_MESSAGE(1400125,num0,num1);\n}\n", "nl": "You rolled the dice and got a %num0 (max. %num1).", "id": "14752"}
{"code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  final String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && (firstLine.contains(\" vs \") || firstLine.contains(\"NO HIT\"));\n}\n", "nl": "is file acceptable?", "id": "35405"}
{"code": "public void add(Player player){\n  if (playersById.put(player.getObjectId(),player) != null) {\n    throw new DuplicateAionObjectException();\n  }\n  if (playersByName.put(player.getName(),player) != null) {\n    throw new DuplicateAionObjectException();\n  }\n}\n", "nl": "Add Player to this Container.", "id": "56714"}
{"code": "public static byte[] writeObject(Object object) throws IOException {\n  ByteArrayOutputStream buffer=new ByteArrayOutputStream();\n  ObjectOutputStream out=new ObjectOutputStream(buffer);\n  out.writeObject(object);\n  out.close();\n  return buffer.toByteArray();\n}\n", "nl": "Serialize an Object to a ByteArray", "id": "19714"}
{"code": "public DocsSaveQuery tags(String value){\n  return unsafeParam(\"tags\",value);\n}\n", "nl": "Document tags.", "id": "29996"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it", "id": "39430"}
{"code": "protected AdsGetStatisticsQuery period(AdsGetStatisticsPeriod value){\n  return unsafeParam(\"period\",value);\n}\n", "nl": "Data grouping by dates. \"date_from\" and \"date_to\" parameters set temporary limits.", "id": "14999"}
{"code": "public boolean isLastExpanded(){\n  return lastExpanded;\n}\n", "nl": "Gets last expanded.", "id": "45153"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof MainViewer && getDir().getDocument().getNumberOfSamples() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "1484"}
{"code": "public boolean isMember(int playerObjId){\n  return legionMembers.contains(playerObjId);\n}\n", "nl": "This function checks if object id is in list", "id": "40235"}
{"code": "private boolean isValidAnnouncement(String name){\n  return LegionConfig.ANNOUNCEMENT_PATTERN.matcher(name.replaceAll(\"\\\\r\\\\n\",\"\")).matches();\n}\n", "nl": "Checks if a announcement is valid. It should contain only english letters", "id": "27913"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "8174"}
{"code": "public Boolean isRetained(){\n  return retained;\n}\n", "nl": "Gets the value of the retained property.", "id": "9676"}
{"code": "public SidekickGridRow selectGridCheckbox(){\n  if (!isGridRowCheckboxSelected()) {\n    bobcatWait.withTimeout(Timeouts.BIG).until(null,5);\n  }\n  return this;\n}\n", "nl": "Selects checbox in AemSidekick grid based", "id": "11631"}
{"code": "protected MessagesGetChatUsersQueryWithFields fields(UserField... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Profile fields to return.", "id": "24939"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FORCE_ALREADY_OTHER_FORCE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300974,value0);\n}\n", "nl": "%0 is already a member of another alliance.", "id": "43695"}
{"code": "public void clear(){\n  currentAverage=-1;\n  usedFields=0;\n}\n", "nl": "Clears all content out of the list.", "id": "49247"}
{"code": "public void loadData(Table t,String query){\n  loadData(t,query,null,null,null);\n}\n", "nl": "Asynchronously executes a query and stores the results in the given  table instance. All data processing is done in a separate thread of execution.", "id": "4754"}
{"code": "public void resume(){\n}\n", "nl": "Resumes audio output", "id": "45554"}
{"code": "public final boolean canSetFloat(String field){\n  return m_table.canSetFloat(field);\n}\n", "nl": "Check if the <code>setFloat</code> method can safely be used for the given data field.", "id": "4386"}
{"code": "public long readLong() throws IOException {\n  return dis.readLong();\n}\n", "nl": "Read a long from the input stream.", "id": "58334"}
{"code": "public static GenericValue create(Delegator delegator,ModelEntity modelEntity,Object singlePkValue){\n  GenericValue newValue=new GenericValue();\n  newValue.init(delegator,modelEntity,singlePkValue);\n  return newValue;\n}\n", "nl": "Creates new GenericValue from existing Map", "id": "42382"}
{"code": "public static void remove(String sid){\n  String id=\"//captcha/\" + sid;\n  Cache.remove(id);\n}\n", "nl": "remove the captcha code for sid", "id": "52058"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200963,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] received the Delayed Blast effect because [%SkillCaster] used [%SkillName].", "id": "1508"}
{"code": "public static Date min(Date date1,Date date2){\n  if (date1 == null) {\n    return date2;\n  }\n  return date2 != null ? (date1.before(date2) ? date1 : date2) : date1;\n}\n", "nl": "Returns the earliest of the two given dates.", "id": "23519"}
{"code": "public static InputStream find(String filename,ZipFile zip) throws IOException {\n  ZipEntry e=zip.getEntry(filename);\n  if (e != null) {\n    return zip.getInputStream(e);\n  }\n  return null;\n}\n", "nl": "find the filename in zip file.", "id": "54974"}
{"code": "public WallGetCommentsQuery startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n", "nl": "Set start comment id", "id": "24716"}
{"code": "public void addBodyDecl(BodyDecl node){\n  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the BodyDecl list.", "id": "12366"}
{"code": "protected PhotosGetCommentsQueryWithExtended photoId(int value){\n  return unsafeParam(\"photo_id\",value);\n}\n", "nl": "Photo ID.", "id": "27525"}
{"code": "public static boolean isFileOlder(File file,long timeMillis){\n  if (file == null) {\n    throw new IllegalArgumentException(\"No specified file\");\n  }\n  if (!file.exists()) {\n    return false;\n  }\n  return file.lastModified() < timeMillis;\n}\n", "nl": "Tests if the specified <code>File</code> is older than the specified time reference.", "id": "36124"}
{"code": "public ClassSource find(String className){\n  String fileName=className + \".jimple\";\n  SourceLocator.FoundFile file=SourceLocator.v().lookupInClassPath(fileName);\n  if (file == null)   return null;\n  return new JimpleClassSource(className,file.inputStream());\n}\n", "nl": "Look for the specified class. Return a ClassSource for it if found, or null if it was not found.", "id": "27117"}
{"code": "public static void addEmojis(Context context,Spannable text,int emojiSize,boolean useSystemDefault){\n  addEmojis(context,text,emojiSize,0,-1,useSystemDefault);\n}\n", "nl": "Convert emoji characters of the given Spannable to the according emojicon.", "id": "34454"}
{"code": "private void addNewScan(IVScanResult res){\n  prevScan=currScan;\n  currScan=res;\n}\n", "nl": "Pushes the 3 scan ago out of memory, and remembers the two latest scans.", "id": "58582"}
{"code": "public static void removeCallbacks(Runnable r){\n  sMainHandler.removeCallbacks(r);\n}\n", "nl": "<p>Removes the specified Runnable from the <b>MAIN</b> message queue.</p>", "id": "1331"}
{"code": "public <T>T toObject(Class<T> targetClass) throws IOException {\n  Assert.notNull(\"targetClass\",targetClass);\n  try {\n    return mapper.readValue(jsonString,targetClass);\n  }\n catch (  IOException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new IOException(e);\n  }\n}\n", "nl": "Converts this <code>JSON</code> object to the specified type.", "id": "12093"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SwitchHostile_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200762,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] exchanged its enmity with the spirit's by using [%SkillName].", "id": "18227"}
{"code": "public void begin(){\n  m_out.print(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n  println();\n}\n", "nl": "Begin the XML document. This must be called before any other formatting methods. This method prints an XML header into the top of the output stream.", "id": "47854"}
{"code": "public StorageSetQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id", "id": "54620"}
{"code": "public static boolean isXML11NameHighSurrogate(int c){\n  return (0xD800 <= c && c <= 0xDB7F);\n}\n", "nl": "Returns whether the given character is a valid high surrogate for a name character. This includes all high surrogates for characters [0x10000-0xEFFFF]. In other words everything excluding planes 15 and 16.", "id": "6674"}
{"code": "private void validateUser(String username) throws UserNotFoundException {\n  if (!usersRepository.findByUsername(username).isPresent()) {\n    throw new UserNotFoundException(username);\n  }\n}\n", "nl": "A method to check if a user exists.", "id": "45835"}
{"code": "public Editor edit() throws IOException {\n  return DiskLruCache.this.edit(key,sequenceNumber);\n}\n", "nl": "Returns an editor for this snapshot's entry, or null if either the entry has changed since this snapshot was created or if another edit is in progress.", "id": "3495"}
{"code": "public static void main(String[] args){\n}\n", "nl": "<p>Title:main</p> <p>Description:<p>", "id": "47025"}
{"code": "public void removeDataSource(DataSource removed){\n  unregisterDataSource(removed);\n}\n", "nl": "Removes a DataSource from the container.", "id": "31515"}
{"code": "public void onStackAnimationStarted(){\n  if (mStackAnimationCount == 0)   super.onAnimationStarted();\n  mStackAnimationCount++;\n}\n", "nl": "Called by the stacks whenever they start an animation.", "id": "57356"}
{"code": "@Override public byte[] asBytes(int rowNumber){\n  return ByteBuffer.allocate(8).putLong(get(rowNumber)).array();\n}\n", "nl": "Returns the contents of the cell at rowNumber as a byte[]", "id": "45438"}
{"code": "private void refresh(){\n  isLoadingData=true;\n  isLoadingMoreData=true;\n  mOnRefreshListener.onRefresh();\n}\n", "nl": "refresh not allow refresh and loadmore together", "id": "29024"}
{"code": "public synchronized void forceUpdate(){\n  computeRuleResult();\n  fireUpdateReceivedEvent();\n}\n", "nl": "Forces an evaluation of the ClientRuleTag and informs then all registered listeners.", "id": "18122"}
{"code": "public MessagesGetHistoryQuery startMessageId(Integer value){\n  return unsafeParam(\"start_message_id\",value);\n}\n", "nl": "Starting message ID from which to return history.", "id": "8120"}
{"code": "private static boolean equalAsInts(Vec2d a,Vec2d b){\n  return ((int)a.x) == ((int)b.x) && ((int)a.y) == ((int)b.y);\n}\n", "nl": "Return true if the values of the two vectors are equal when cast as ints.", "id": "49689"}
{"code": "public void loadSavedApi(){\n  String savedApiLevel=PropertiesComponent.getInstance().getValue(FormFactorUtils.getPropertiesComponentMinSdkKey(myFormFactor),Integer.toString(myFormFactor.defaultApi));\n  setSelectedApiLevel(savedApiLevel);\n  if (getSelectedIndex() < 0 && getItemCount() > 0) {\n    setSelectedIndex(0);\n  }\n}\n", "nl": "Load the saved value for this ComboBox", "id": "81"}
{"code": "public boolean simplify_sccs(){\n  return soot.PhaseOptions.getBoolean(options,\"simplify-sccs\");\n}\n", "nl": "Simplify SCCs -- Collapse strongly-connected components of the PAG. When this option is set to true, variable (Green) nodes which  form strongly-connected components (so they must have the same  points-to set) are merged before propagation begins.", "id": "57362"}
{"code": "public void dump(){\n  diphone.dump();\n}\n", "nl": "Dumps this unit.", "id": "41533"}
{"code": "public boolean canFindAll(){\n  return true;\n}\n", "nl": "does this searcher support find all?", "id": "11405"}
{"code": "public byte[] decryptViaKek(byte[] content){\n  return cryptoViaKek(content,Cipher.DECRYPT_MODE);\n}\n", "nl": "Ue the KEK to decrypt a value", "id": "20881"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "14507"}
{"code": "private void addSelectorForProtocol(Properties settings,String protocol,ProtocolDispatchSelector ps){\n  String proxy=settings.getProperty(protocol);\n  if (proxy != null) {\n    FixedProxySelector protocolSelector=ProxyUtil.parseProxySettings(proxy);\n    ps.setSelector(protocol,protocolSelector);\n  }\n}\n", "nl": "Creates a selector for a given protocol. The proxy will be taken from the settings and installed on the dispatch selector.", "id": "20277"}
{"code": "private LinkedHashSet<MetricColumn> generateApiMetricColumns(Set<String> apiMetricColumnNames){\n  Map<String,MetricColumn> metricColumnMap=resultSet.getSchema().getColumns(MetricColumn.class).stream().collect(StreamUtils.toLinkedDictionary(null));\n  return apiMetricColumnNames.stream().map(null).collect(Collectors.toCollection(null));\n}\n", "nl": "Builds a set of only those metric columns which correspond to the metrics requested in the API.", "id": "40051"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "18670"}
{"code": "public void addTypeAccess(Access node){\n  List<Access> list=(parent == null || state == null) ? getTypeAccessListNoTransform() : getTypeAccessList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the TypeAccess list.", "id": "4321"}
{"code": "private void updateButtonState(GeometryTypeEnum geometryType){\n  boolean applyTransformEnabled=false;\nswitch (geometryType) {\ncase POINT:\ncase LINE:\ncase POLYGON:\n    applyTransformEnabled=true;\n  break;\ncase RASTER:\nbreak;\ndefault :\nbreak;\n}\nif (applyTransformationCheckBox != null) {\napplyTransformationCheckBox.setEnabled(applyTransformEnabled);\n}\n}\n", "nl": "Update button state according to the selected symbol type.", "id": "31959"}
{"code": "@Override public void onCompletion(MediaPlayer mp){\n  mVideoPlayer.seekTo(0);\n}\n", "nl": "Called when the file is finished playing. Rewinds the video", "id": "46605"}
{"code": "private String versionName(String name){\n  return versionName(name,version);\n}\n", "nl": "Generates a version filename prepended with the stable storage directory path with the current version number as a suffix.", "id": "14280"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_REMAIN_TIME(String durationtime0){\n  return new SM_SYSTEM_MESSAGE(1400220,durationtime0);\n}\n", "nl": "%DURATIONTIME0 remaining.", "id": "54062"}
{"code": "public WallRestoreQuery postId(Integer value){\n  return unsafeParam(\"post_id\",value);\n}\n", "nl": "ID of the post to be restored.", "id": "8079"}
{"code": "public static void createFlight(AirMapFlight flight,@Nullable AirMapCallback<AirMapFlight> callback){\n  FlightService.createFlight(flight,callback);\n}\n", "nl": "Create a flight for the pilot", "id": "52338"}
{"code": "public static ViewsFinder from(@NonNull final ViewGroup... rootViews){\n  return new ViewsFinder(rootViews);\n}\n", "nl": "Helps to find child views.", "id": "20321"}
{"code": "@Override public final float readFloat(){\n  return Float.intBitsToFloat(readInt());\n}\n", "nl": "Reads a floating point integer from the stream.", "id": "25160"}
{"code": "public static <T>List<T> toList(T[] array){\n  return Arrays.asList(array);\n}\n", "nl": "To list list.", "id": "52545"}
{"code": "public GroupsEditQuery edit(UserActor actor,int groupId){\n  return new GroupsEditQuery(getClient(),actor,groupId);\n}\n", "nl": "Edits a community", "id": "28887"}
{"code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{-2.226325228634938,-1.156887023657177,-0.643949578356075,-0.2027950777320613,0.305827808237559,+6.42632522863494,5.35688702365718,4.843949578356074,4.40279507773206,3.89417219176244};\n}\n", "nl": "Creates the default cumulative probability distribution test input values", "id": "9182"}
{"code": "public float convert(){\n  return Float.intBitsToFloat((int)bytes);\n}\n", "nl": "Converts the internal representation to an actual float.", "id": "12641"}
{"code": "public void addActivity(Activity activity){\n  if (activityStack == null) {\n    activityStack=new Stack<Activity>();\n  }\n  activityStack.add(activity);\n}\n", "nl": "add Activity to Stack", "id": "1817"}
{"code": "public boolean isDrawAxisLineEnabled(){\n  return mDrawAxisLine;\n}\n", "nl": "Returns true if the line alongside the axis should be drawn.", "id": "44564"}
{"code": "public void putSampleLabel(String sampleName,String label){\n  put(sampleName,SampleAttributeTable.HiddenAttribute.Label,label);\n}\n", "nl": "put the label to be used for the sample", "id": "45383"}
{"code": "public final void removeDescription(final Object pValue){\n  if (pValue != null) {\n    this.descriptions.remove(pValue);\n  }\n}\n", "nl": "Remove the preconfigured description for a certain value. If the dictionary doesn't hold a description for the specified value, the call to this method will have no effect. Null parameters are also ignored.", "id": "41734"}
{"code": "public void add(ResourceQuota quota){\n  this.msgRateIn+=quota.msgRateIn;\n  this.msgRateOut+=quota.msgRateOut;\n  this.bandwidthIn+=quota.bandwidthIn;\n  this.bandwidthOut+=quota.bandwidthOut;\n  this.memory+=quota.memory;\n}\n", "nl": "Add quota.", "id": "7753"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BackDashATK_ME_TO_B(int num0,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200489,num0,skilltarget,skillname);\n}\n", "nl": "You inflicted %num0 damage on [%SkillTarget] by using [%SkillName].", "id": "16510"}
{"code": "@Override public boolean isPopulating(){\n  return populating;\n}\n", "nl": "Checks if is populating.", "id": "22642"}
{"code": "public final int yystate(){\n  return zzLexicalState;\n}\n", "nl": "Returns the current lexical state.", "id": "58784"}
{"code": "public static void writeLines(File file,Collection<?> lines) throws IOException {\n  writeLines(file,null,lines,null,false);\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to the specified <code>File</code> line by line. The default VM encoding and the default line ending will be used.", "id": "15836"}
{"code": "public Region<S> xor(final Region<S> region1,final Region<S> region2){\n  final BSPTree<S> tree=region1.getTree(false).merge(region2.getTree(false),new XorMerger());\n  tree.visit(nodeCleaner);\n  return region1.buildNew(tree);\n}\n", "nl": "Compute the symmetric difference (exclusive or) of two regions.", "id": "32075"}
{"code": "public static synchronized boolean remove(){\n  return removed;\n}\n", "nl": "Attempt to remove cryptography restrictions.", "id": "13649"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"move dir=up;\");\n}\n", "nl": "action to be performed", "id": "9086"}
{"code": "public static boolean showGuidelines(){\n  if ((Math.abs(Edge.LEFT.getCoordinate() - Edge.RIGHT.getCoordinate()) < DEFAULT_SHOW_GUIDELINES_LIMIT) || (Math.abs(Edge.TOP.getCoordinate() - Edge.BOTTOM.getCoordinate()) < DEFAULT_SHOW_GUIDELINES_LIMIT))   return false;\n else   return true;\n}\n", "nl": "Indicates whether the crop window is small enough that the guidelines should be shown. Public because this function is also used to determine if the center handle should be focused.", "id": "35912"}
{"code": "public void addTypeArgument(Access node){\n  List<Access> list=(parent == null || state == null) ? getTypeArgumentListNoTransform() : getTypeArgumentList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the TypeArgument list.", "id": "49944"}
{"code": "public static void remove(String name){\n  Helper.delete(W.create(\"name\",name),Jar.class);\n}\n", "nl": "Removes the.", "id": "2734"}
{"code": "public void installAemPackage(String packageName) throws IOException {\n  String packagePath=String.format(\"/etc/packages/%s.zip\",packageName);\n  HttpPost request=builder.createInstallRequest(packagePath);\n  sender.sendCrxRequest(request);\n}\n", "nl": "This method requests AEM to install a package. Package is identified by the package's name, provided as the method's parameter. installAemPackage sends the request as a POST request and checks the response. If the response is NOK, then installAemPackage throws an IOException. <br> The package is installed in the AEM instance indicated by the author.ip property.", "id": "34870"}
{"code": "public boolean isAscending(int i){\n  return m_ascend[i];\n}\n", "nl": "Returns the ascending modifier as the given index.", "id": "37680"}
{"code": "public BoardFixTopicQuery fixTopic(UserActor actor,int groupId,int topicId){\n  return new BoardFixTopicQuery(getClient(),actor,groupId,topicId);\n}\n", "nl": "Pins a topic (fixes its place) to the top of a community's discussion board.", "id": "1685"}
{"code": "public void removeRepositoryListener(ISVNListener listener){\n  repositoryListeners.remove(listener);\n}\n", "nl": "De-register a listener", "id": "18480"}
{"code": "@OnClick(R.id.tvSeeAllPossibilities) public void displayAllPossibilities(){\n  resultsBox.setVisibility(View.GONE);\n  allPossibilitiesBox.setVisibility(View.VISIBLE);\n}\n", "nl": "Displays the all possibilities dialog.", "id": "52068"}
{"code": "public <T4>Pattern4<T1,T2,T3,T4> and(Observable<T4> other){\n  if (other == null) {\n    throw new NullPointerException();\n  }\n  return new Pattern4<T1,T2,T3,T4>(o1,o2,o3,other);\n}\n", "nl": "Creates a pattern that matches when all three observable sequences have an available element.", "id": "28586"}
{"code": "public void componentMoved(ComponentEvent ev){\n}\n", "nl": "component moved", "id": "593"}
{"code": "public void startSubreport(String subreport){\n  currentTest.get().startSubreport(subreport);\n}\n", "nl": "Marks a beginning of a subreport in the current test.", "id": "58675"}
{"code": "public void onReady(Runnable runnable){\n  runnable.run();\n}\n", "nl": "In case your target needs time to be ready (laid out in your view, not created, etc), the runnable passed here will be invoked when the target is ready.", "id": "22416"}
{"code": "public void put(String key,T value){\n  internalMap.put(key,value);\n}\n", "nl": "Set the value for the supplied key", "id": "30050"}
{"code": "@Override public String toString(){\n  return length > 0 ? new String(ch,offset,length) : \"\";\n}\n", "nl": "Returns a string representation of this object.", "id": "41850"}
{"code": "public String toString(){\n  return \"QueueBrowser for the session:\" + m_session.toString();\n}\n", "nl": "Returns a string view of this browser.", "id": "41327"}
{"code": "public void destroy() throws Exception {\n}\n", "nl": "Final processing.", "id": "42032"}
{"code": "public int model(){\n  return theModel;\n}\n", "nl": "Returns the content models of this element type.", "id": "12962"}
{"code": "@Override public void startContentModel(String elementName,Augmentations augs) throws XNIException {\n  XMLElementDecl elementDecl=(XMLElementDecl)this.fElementDeclTab.get(elementName);\n  if (elementDecl != null) {\n    fElementDecl=elementDecl;\n  }\n  fDepth=0;\n  initializeContentModelStack();\n}\n", "nl": "The start of a content model. Depending on the type of the content model, specific methods may be called between the call to the startContentModel method and the call to the endContentModel method.", "id": "58590"}
{"code": "public UsersSearchQuery interests(String value){\n  return unsafeParam(\"interests\",value);\n}\n", "nl": "Users' interests.", "id": "20664"}
{"code": "public void uncollapseAll(){\n  getCollapsedIds().clear();\n  updateTree();\n}\n", "nl": "completely uncollapse all nodes", "id": "21510"}
{"code": "public static void distributeKinah(Player player,long kinah){\n  PlayerGroup group=player.getPlayerGroup2();\n  if (group != null) {\n    group.onEvent(new TeamKinahDistributionEvent<PlayerGroup>(group,player,kinah));\n  }\n}\n", "nl": "Share specific amount of kinah between group members", "id": "3671"}
{"code": "public boolean addChild(DominatorNode<N> child){\n  if (children.contains(child)) {\n    return false;\n  }\n else {\n    children.add(child);\n    return true;\n  }\n}\n", "nl": "Adds a child to the internal list of children of this node in tree.  Usually called internally.", "id": "58086"}
{"code": "public static long checksumCRC32(File file) throws IOException {\n  CRC32 crc=new CRC32();\n  checksum(file,crc);\n  return crc.getValue();\n}\n", "nl": "Computes the checksum of a file using the CRC32 checksum routine. The value of the checksum is returned.", "id": "13887"}
{"code": "public void removeHeader(String header){\n  clientHeaderMap.remove(header);\n}\n", "nl": "Remove header from all requests this client makes (before sending).", "id": "12971"}
{"code": "public DocsSaveQuery title(String value){\n  return unsafeParam(\"title\",value);\n}\n", "nl": "Document title.", "id": "2944"}
{"code": "public int error_sym(){\n  return 1;\n}\n", "nl": "<code>error</code> Symbol index.", "id": "17972"}
{"code": "public MessagesDenyMessagesFromCommunityQuery denyMessagesFromCommunity(UserActor actor,int groupId){\n  return new MessagesDenyMessagesFromCommunityQuery(getClient(),actor,groupId);\n}\n", "nl": "Deny messages from community.", "id": "50112"}
{"code": "public MarketGetQueryWithExtended offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset based on a first matching item to get a certain items subset", "id": "482"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "19408"}
{"code": "public void updateScreen(){\n  super.updateScreen();\n  ++this.field_146444_f;\n}\n", "nl": "Called from the main game loop to update the screen.", "id": "53490"}
{"code": "private void addExplicitLocationField(ConfigSource.Builder builder,FieldDescriptor field,Node value){\n  builder.addLocation(field,null,helper.getLocation(value));\n}\n", "nl": "This is mainly to add location for container fields like repeated or message fields.", "id": "11505"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Curse_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200921,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] is cursed because [%SkillCaster] used [%SkillName].", "id": "23254"}
{"code": "public JimpleBody toJimpleBody(){\n  ShimpleBody sBody=(ShimpleBody)this.clone();\n  sBody.eliminateNodes();\n  JimpleBody jBody=Jimple.v().newBody(sBody.getMethod());\n  jBody.importBodyContentsFrom(sBody);\n  return jBody;\n}\n", "nl": "Returns an equivalent unbacked JimpleBody of the current Body by eliminating the Phi nodes. <p> Currently available option is \"naive-phi-elimination\", typically specified in the \"shimple\" phase (eg, -p shimple naive-phi-elimination) which skips the dead code elimination and register allocation phase before eliminating Phi nodes. This can be useful for understanding the effect of analyses. <p> Remember to setActiveBody() if necessary in your SootMethod.", "id": "42193"}
{"code": "public Criteria or(){\n  Criteria criteria=createCriteriaInternal();\n  oredCriteria.add(criteria);\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.rules", "id": "50497"}
{"code": "public static void validateUTF8(byte[] utf8) throws MalformedInputException {\n  validateUTF8(utf8,0,utf8.length);\n}\n", "nl": "Check if a byte array contains valid utf-8", "id": "20779"}
{"code": "public long optLong(int index){\n  LazyNode token=getOptionalValueToken(index);\n  if (token == null)   return 0l;\n  if (token.type == LazyNode.VALUE_NULL)   return 0l;\n  return token.getLongValue(cbuf);\n}\n", "nl": "Returns the long value stored at the given index or 0 if there was no such value.", "id": "9645"}
{"code": "public static int readUnsignedShort(ByteBuffer bb) throws BufferUnderflowException {\n  int ch1=bb.get() & 0xFF;\n  int ch2=bb.get() & 0xFF;\n  return (ch1 << 8) + (ch2 << 0);\n}\n", "nl": "See the general contract of the <code>readUnsignedShort</code> method of <code>DataInput</code>. <p/> Bytes for this operation are read from the given byte buffer", "id": "10544"}
{"code": "public MyDialog inDuration(int duration){\n  mInDuration=duration;\n  return this;\n}\n", "nl": "Set the duration of in animation.", "id": "25853"}
{"code": "public void count() throws QueryPlanException {\n  this.hasCount=true;\n}\n", "nl": "Add a count aggregate to this query. Only can specify count(*).", "id": "58336"}
{"code": "public void trimToSize(){\n  int newCapacity=nextPrime((int)(1 + 1.2 * size()));\n  if (table.length > newCapacity) {\n    rehash(newCapacity);\n  }\n}\n", "nl": "Trims the capacity of the receiver to be the receiver's current  size. Releases any superfluous internal memory. An application can use this operation to minimize the  storage of the receiver.", "id": "47544"}
{"code": "private void requestAddNodesStop(){\n  enqueue(new AddNodeMessageClass().doRequestStop());\n  logger.debug(\"ZWave controller end inclusion\");\n}\n", "nl": "Terminates the inclusion mode", "id": "41343"}
{"code": "public static SM_SYSTEM_MESSAGE STR_USE_CASH_TYPE_ITEM1(String value0){\n  return new SM_SYSTEM_MESSAGE(1400333,value0);\n}\n", "nl": "You used %0.", "id": "12635"}
{"code": "public void init$Children(){\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "712"}
{"code": "public void trimToSize(){\n  if (_data.length > size()) {\n    int[] tmp=new int[size()];\n    toNativeArray(tmp,0,tmp.length);\n    _data=tmp;\n  }\n}\n", "nl": "Sheds any excess capacity above and beyond the current size of the list.", "id": "37367"}
{"code": "public boolean exists(String key){\n  return exists(key,false);\n}\n", "nl": "Check existence of config section element", "id": "35671"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ResurrectPositional_ME_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200557,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] is in the resurrection state because [%SkillCaster] used [%SkillName].", "id": "32087"}
{"code": "public Builder trustSource(TrustSource trustSource){\n  this.trustSource=trustSource;\n  return this;\n}\n", "nl": "The TrustSource that supplies the trusted root CAs used to validate upstream servers' certificates.", "id": "2621"}
{"code": "public static SM_SYSTEM_MESSAGE STR_DUEL_PARTNER_INVALID(String value0){\n  return new SM_SYSTEM_MESSAGE(1300091,value0);\n}\n", "nl": "You cannot duel with %0.", "id": "47043"}
{"code": "protected void dismissProgress(){\n  if (progress != null) {\n    progress.dismiss();\n    progress=null;\n  }\n}\n", "nl": "Dismiss and clear progress dialog field", "id": "33344"}
{"code": "public TapTarget id(int id){\n  this.id=id;\n  return this;\n}\n", "nl": "Specify a unique identifier for this target.", "id": "56915"}
{"code": "public void acceptVisit(ExpressionVisitor visitor){\n  visitor.enter(this);\n  _expressions.filter.acceptVisit(visitor);\n  visitor.exit(this);\n}\n", "nl": "Accept a visit from a tree visitor.", "id": "17339"}
{"code": "public double maxValue(){\n  Iterator iIter=asTreeMap().values().iterator();\n  Double dMax=Double.NEGATIVE_INFINITY;\n  while (iIter.hasNext()) {\n    Double dVal=(Double)iIter.next();\n    dMax=(dVal > dMax) ? dVal : dMax;\n  }\n  return dMax;\n}\n", "nl": "Looks up the maximum value appearing in the distribution.", "id": "6101"}
{"code": "public WallSearchQuery ownersOnly(Boolean value){\n  return unsafeParam(\"owners_only\",value);\n}\n", "nl": "Returns only page owner's posts.", "id": "10656"}
{"code": "public static double log(double base,double x){\n  return Math.log(x) / Math.log(base);\n}\n", "nl": "<p>Returns the <a href=\"http://mathworld.wolfram.com/Logarithm.html\">logarithm</a> for base <code>b</code> of <code>x</code>. </p> <p>Returns <code>NaN<code> if either argument is negative.  If <code>base</code> is 0 and <code>x</code> is positive, 0 is returned. If <code>base</code> is positive and <code>x</code> is 0, <code>Double.NEGATIVE_INFINITY</code> is returned.  If both arguments are 0, the result is <code>NaN</code>.</p>", "id": "41191"}
{"code": "final public void enable_tracing(){\n}\n", "nl": "Enable tracing.", "id": "2288"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200766,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] used [%SkillName] and became bound.", "id": "13789"}
{"code": "@Override public void mark(int readAheadLimit) throws IOException {\n  fInputStream.mark(readAheadLimit);\n}\n", "nl": "Mark the present position in the stream.  Subsequent calls to reset() will attempt to reposition the stream to this point.  Not all character-input streams support the mark() operation.", "id": "56176"}
{"code": "public boolean hasMoved(){\n  return this.moved;\n}\n", "nl": "Returns true if the mouse has moved.", "id": "38604"}
{"code": "public Set<K> keySet(){\n  return counterMap.keySet();\n}\n", "nl": "Returns the keys that have been inserted into this CounterMap.", "id": "42555"}
{"code": "private void onSaveAuthChkbxChanged(final ActionEvent actionEvent){\n  final boolean saveCredentials=((CheckBox)actionEvent.getSource()).isSelected();\n  accountManager.setSaveLogin(saveCredentials);\n  toggleFields(saveCredentials);\n}\n", "nl": "Event handler for saveAuthChkbx.", "id": "20418"}
{"code": "public boolean wasDoubleClicked(int code){\n  MouseButton mb=this.buttons.get(code);\n  if (mb == null) {\n    return false;\n  }\n  return mb.wasDoubleClicked();\n}\n", "nl": "Returns true if the given MouseEvent code was double clicked.", "id": "58552"}
{"code": "private boolean isViewWasReused(){\n  String currentCacheKey=engine.getLoadingUriForView(imageAware);\n  return !memoryCacheKey.equals(currentCacheKey);\n}\n", "nl": "Checks whether memory cache key (image URI) for current ImageAware is actual", "id": "53313"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_SELL_ITEM_MULTI(String value1,String value0s){\n  return new SM_SYSTEM_MESSAGE(1300787,value1,value0s);\n}\n", "nl": "You have sold %1 %0s.", "id": "38386"}
{"code": "public String toString(final int decimals){\n  final DecimalFormat decimalFormat=new DecimalFormat(\"#.\" + StringUtils.repeat(\"#\",decimals));\n  return decimalFormat.format(latitude).replace(',','.') + StringLiterals.CONCAT_SEPARATOR + decimalFormat.format(longitude).replace(',','.');\n}\n", "nl": "Formats the long and lat rounded to given decimal places.", "id": "5905"}
{"code": "@VisibleForTesting void registerNewRequest(long currentTimestamp){\n  mCurrentRequest=createRequestData(currentTimestamp,null);\n  getBackoffScheduler().resetFailedAttempts();\n  mTimestampForNextPostAttempt=currentTimestamp;\n  mTimestampForNewRequest=currentTimestamp + MS_BETWEEN_REQUESTS;\n  scheduleRepeatingAlarm();\n  saveState();\n}\n", "nl": "Registers a new request with the current timestamp.  Internal timestamps are reset to start fresh.", "id": "15314"}
{"code": "public int provideDumpInterval(){\n  return provideBlockThreshold();\n}\n", "nl": "Thread stack dump interval, use when block happens, BlockCanary will dump on main thread stack according to current sample cycle. <p> Because the implementation mechanism of Looper, real dump interval would be longer than the period specified here (especially when cpu is busier). </p>", "id": "6268"}
{"code": "public void java_lang_Throwable_fillInStackTrace(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  helper.assign(returnVar,thisVar);\n}\n", "nl": "NOTE: this method just fills in the stack state in this throwable  object content. public native java.lang.Throwable fillInStackTrace();", "id": "36220"}
{"code": "public PhotosSearchQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of photos to return.", "id": "52296"}
{"code": "private boolean checkImplicit(DAbruptStmt ab){\n  SETNodeLabel label=ab.getLabel();\n  if (label == null)   return true;\n  if (label.toString() == null)   return true;\n  return false;\n}\n", "nl": "Checks whether the input stmt is an implicit break/continue A abrupt stmt is implicit if the SETLabelNode is null or the label.toString results in null", "id": "5608"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  SearchManager searchManager=((IViewerWithFindToolBar)getViewer()).getSearchManager();\n  if (searchManager != null)   searchManager.applyFindNext();\n}\n", "nl": "action to be performed", "id": "22848"}
{"code": "public SpaceTypeDescriptorBuilder supportsDynamicProperties(boolean supportsDynamicProperties){\n  this._supportsDynamicProperties=supportsDynamicProperties;\n  return this;\n}\n", "nl": "Sets whether or not this type supports dynamic properties.", "id": "5489"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Rebirth_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200706,skillcaster,skillname);\n}\n", "nl": "You entered the reserved resurrection state because [%SkillCaster] used [%SkillName] on you.", "id": "21227"}
{"code": "public AudioMoveToAlbumQuery albumId(Integer value){\n  return unsafeParam(\"album_id\",value);\n}\n", "nl": "ID of the album to which the audio files will be moved.", "id": "19157"}
{"code": "public static boolean isGenericTypeAnnotedWithPageObject(Field field){\n  Class<?> genericType=PageObjectProviderHelper.getGenericType(field);\n  return genericType != null && genericType.isAnnotationPresent(PageObject.class);\n}\n", "nl": "Checks if Generic Type of field is annoted with PageObject Annotation", "id": "41607"}
{"code": "public ErrorHandler skipDefaults(){\n  if (localContext != null) {\n    localContext.get().skipDefaults=true;\n  }\n  return this;\n}\n", "nl": "Skip the default matching actions if any", "id": "31852"}
{"code": "@Override public void comment(XMLString text,Augmentations augs) throws XNIException {\n}\n", "nl": "A comment.", "id": "22240"}
{"code": "@Override public void populateField(String value){\n  if (textField != null) {\n    textField.setText(value);\n    UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,value));\n    oldValueObj=value;\n    valueUpdated();\n  }\n}\n", "nl": "Populate field.", "id": "56658"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "2014"}
{"code": "public static boolean updateGradlePluginVersion(@NotNull Project project,@NotNull String pluginVersion,@Nullable String gradleVersion){\n  return updateGradlePluginVersion(project,pluginVersion,gradleVersion,false);\n}\n", "nl": "Updates the Android Gradle plugin version, and optionally the Gradle version of a given project.", "id": "33011"}
{"code": "public boolean with_rectarray(){\n  return soot.PhaseOptions.getBoolean(options,\"with-rectarray\");\n}\n", "nl": "With Rectangular Array -- . This option is used together with wjap.ra to make Soot run the  whole-program analysis for rectangular array objects. This  analysis is based on the call graph, and it usually takes a long  time. If the application uses rectangular arrays, these options  can improve the analysis result.", "id": "9536"}
{"code": "default boolean hasDataFromHttp(){\n  return false;\n}\n", "nl": "Check if data from HTTP are available.", "id": "15233"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FORCE_HE_ENTERED_FORCE(String value0){\n  return new SM_SYSTEM_MESSAGE(1400013,value0);\n}\n", "nl": "%0 has joined the alliance.", "id": "5266"}
{"code": "static String byteArrayToAltBase64(byte[] a){\n  return byteArrayToBase64(a,true);\n}\n", "nl": "Translates the specified byte array into an \"alternate representation\" Base64 string.  This non-standard variant uses an alphabet that does not contain the uppercase alphabetic characters, which makes it suitable for use in situations where case-folding occurs.", "id": "1839"}
{"code": "public void createInFile(String filePath) throws IOException {\n  this.inFile=new ExifInterface(filePath);\n}\n", "nl": "The file before it is compressed", "id": "30636"}
{"code": "public static <V,V1 extends V,V2 extends V>Map<String,V> toMap(String name1,V1 value1,String name2,V2 value2){\n  return populateMap(new HashMap<String,V>(),name1,value1,name2,value2);\n}\n", "nl": "Create a map from passed nameX, valueX parameters", "id": "50555"}
{"code": "public void clearResources(){\n  objectCache.clear();\n}\n", "nl": "Clears the resource cache", "id": "12820"}
{"code": "public static long lowestOnBitForLevel(int level){\n  return 1L << (2 * (MAX_LEVEL - level));\n}\n", "nl": "Return the lowest-numbered bit that is on for this cell id, which is equal to (uint64(1) &lt;&lt; (2 * (MAX_LEVEL - level))). So for example, a.lsb() &lt;= b.lsb() if and only if a.level() &gt;= b.level(), but the first test is more efficient.", "id": "19215"}
{"code": "public void shutdown() throws TeamException {\n  commentsManager.saveCommentHistory();\n  commentsManager.saveCommentTemplates();\n  keyFilesManager.saveKeyFilesHistory();\n}\n", "nl": "Called when plugin is stopped", "id": "44294"}
{"code": "public static void stopBroker() throws Exception {\n  broker.stop();\n}\n", "nl": "Stops the test broker.", "id": "10801"}
{"code": "public static ProbeItemDescriptor discreteLineItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue){\n  return discreteOutlineItem(name,description,formatter,dataFactor,minValue,maxValue,DEFAULT_LINE_WIDTH,DEFAULT_COLOR,null);\n}\n", "nl": "Creates descriptor for a discrete item created by line segments representing the outline with custom dataFactor ad min/max values.", "id": "49953"}
{"code": "public boolean isArrayElement(String element){\n  return arrayElements.contains(element);\n}\n", "nl": "Returns true if the given element name is an array type. <p> The method returns <code>false</code> if the element is not an array type or the schema does not define an element of this type.", "id": "51004"}
{"code": "public Object clone(){\n  return this.copy();\n}\n", "nl": "Clone the Matrix object.", "id": "45093"}
{"code": "public void addColumn(String name,Expression expr){\n  throw new UnsupportedOperationException();\n}\n", "nl": "Unsupported by default.", "id": "57908"}
{"code": "@Override public boolean exclude(String identifier){\n  return blacklist.contains(identifier);\n}\n", "nl": "Checks if the given identifier should be excluded.", "id": "10718"}
{"code": "public static void show(@Nullable Activity activity,CharSequence msg,int duration){\n  show(activity,msg,duration,DEFAULT_GRAVITY);\n}\n", "nl": "Show activity level toast.", "id": "35688"}
{"code": "public boolean tryWriteLockOnKey(K id,Long timeout){\n  try {\n    return cache.tryWriteLockOnKey(id,timeout);\n  }\n catch (  InterruptedException e) {\n    LOGGER.debug(\"Thread interrupted for id=\" + String.valueOf(id) + \" (\"+ this.getClass()+ \")\");\n    return false;\n  }\n}\n", "nl": "Try to get a write lock on a given key. If can't get it in timeout millis then return a boolean telling that it didn't get the lock", "id": "42688"}
{"code": "private List<View> addView(View view,List<View> cache){\n  if (cache == null) {\n    cache=new LinkedList<View>();\n  }\n  cache.add(view);\n  return cache;\n}\n", "nl": "Adds view to specified cache. Creates a cache list if it is null.", "id": "27947"}
{"code": "public static void isAssignableTo(String argumentName,Object argumentObject,Class<?> targetClass){\n  notNull(argumentName,argumentObject);\n  if (!targetClass.isAssignableFrom(argumentObject.getClass())) {\n    throw new IllegalArgumentException(argumentName + \" cannot be assigned to \" + targetClass.getName());\n  }\n}\n", "nl": "Tests if an argument is not null and can be cast to a specified class. <p><code>Assert.isAssignableTo(\"foo\", foo, Foo.class);</code></p>", "id": "36921"}
{"code": "public void init$Children(){\n  children=new ASTNode[1];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "510"}
{"code": "public Boolean shouldOpenExternalUrl(String url){\n  return null;\n}\n", "nl": "Hook for blocking the launching of Intents by the Cordova application. This will be called when the WebView will not navigate to a page, but could launch an intent to handle the URL. Return false to block this: if any plugin returns false, Cordova will block the navigation. If all plugins return null, the default policy will be enforced. If at least one plugin returns true, and no plugins return false, then the URL will be opened.", "id": "3313"}
{"code": "public static String booleanToString(Boolean value){\n  return value.toString();\n}\n", "nl": "Converts Boolean to String.", "id": "7637"}
{"code": "@Override public void emptyElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {\n  startElement(element,attributes,augs);\n  endElement(element,augs);\n}\n", "nl": "An empty element.", "id": "2579"}
{"code": "@Override public boolean hasFixedPropertiesArray(){\n  return false;\n}\n", "nl": "true if the entry packet has an array of fixed properties", "id": "33289"}
{"code": "@Override public void stop(boolean force){\n  try {\n    if (force) {\n      getProcessAdmin().killVM();\n    }\n  }\n catch (  RemoteException ex) {\n    ProcessLogger.log(\"Exception caught while killing VM\",ex);\n  }\n  super.stop(force);\n}\n", "nl": "force killing forkable VM by direct remote call on remote JVM", "id": "39935"}
{"code": "public static void wtf(int level,String msg,Throwable throwable){\n  log(Log.ERROR,0,null,new ThrowableFormatter(),null,msg,throwable);\n}\n", "nl": "What a Terrible Failure: Report an exception that should never happen.", "id": "55564"}
{"code": "public void init$Children(){\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "8862"}
{"code": "protected void handleDirectoryStart(File directory,int depth,Collection<T> results) throws IOException {\n}\n", "nl": "Overridable callback method invoked at the start of processing each directory. <p> This implementation does nothing.", "id": "42091"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CHAT_PASSWORD_TOO_LONG(String value0){\n  return new SM_SYSTEM_MESSAGE(1300867,value0);\n}\n", "nl": "The maximum password length is %0 characters.", "id": "36430"}
{"code": "private void internalCreateLabel(int xPos,String label){\n  JLabel lblLabel=new JLabel(label);\n  lblLabel.setBounds(xPos + 5,0,BasePanel.LABEL_WIDTH,BasePanel.WIDGET_HEIGHT);\n  lblLabel.setHorizontalAlignment(SwingConstants.TRAILING);\n  add(lblLabel);\n}\n", "nl": "Internal create label.", "id": "27853"}
{"code": "public void error(String message,Object... args){\n  currentTest.get().error(String.format(message,args));\n}\n", "nl": "Stores the error entry in the current test.", "id": "49189"}
{"code": "public FieldVector3D<T> add(final double factor,final FieldVector3D<T> v){\n  return new FieldVector3D<T>(1.0,this,factor,v);\n}\n", "nl": "Add a scaled vector to the instance.", "id": "49840"}
{"code": "public static boolean isBeforeToday(Calendar _calendar){\n  return _calendar.before(Calendar.getInstance());\n}\n", "nl": "Allows to know if a given calendar instance is set before today", "id": "9580"}
{"code": "public InputStream newInputStream(int index) throws IOException {\nsynchronized (DiskLruCache.this) {\n    if (entry.currentEditor != this) {\n      throw new IllegalStateException();\n    }\n    if (!entry.readable) {\n      return null;\n    }\n    try {\n      return new FileInputStream(entry.getCleanFile(index));\n    }\n catch (    FileNotFoundException e) {\n      return null;\n    }\n  }\n}\n", "nl": "Returns an unbuffered input stream to read the last committed value, or null if no value has been committed.", "id": "40597"}
{"code": "private Collection<Map<String,Object>> batchParse(Collection<Json> batch){\n  return batch.stream().map(null).collect(toList());\n}\n", "nl": "Call parse of a collection of input data", "id": "20371"}
{"code": "protected void removeAt(int index){\n  _values[index]=null;\n  super.removeAt(index);\n}\n", "nl": "removes the mapping at <tt>index</tt> from the map.", "id": "34579"}
{"code": "public AccountLookupContactsQuery returnAll(Boolean value){\n  return unsafeParam(\"return_all\",value);\n}\n", "nl": "Set returnAll param <p> true - also return contacts found using this service before, false - return only contacts found using \"contacts\" field.", "id": "51980"}
{"code": "@Deprecated public void onSuccess(int statusCode,String content){\n  onSuccess(content);\n}\n", "nl": "Fired when a request returns successfully, override to handle in your own code", "id": "1242"}
{"code": "@Override public void endDocument() throws SAXException {\n  return;\n}\n", "nl": "The SAX <code>endDocument</code> method does nothing.", "id": "17606"}
{"code": "@Override @CallSuper public void onResume(){\n  running=true;\n}\n", "nl": "Called when this ViewModel was binded to a view and the view is visible.", "id": "20045"}
{"code": "public DatabaseGetCountriesQuery needAll(Boolean value){\n  return unsafeParam(\"need_all\",value);\n}\n", "nl": "Return a full list of all countries", "id": "14488"}
{"code": "public static final int find(int[] a,int key,int begin,int end){\n  for (int i=begin; i < end; i++) {\n    if (a[i] == key) {\n      return i;\n    }\n  }\n  return -1;\n}\n", "nl": "Linearly search an array range for a given key value.", "id": "26059"}
{"code": "protected void notifyClickListenersAboutClick(int item){\n  for (  OnWheelClickedListener listener : clickingListeners) {\n    listener.onItemClicked(this,item);\n  }\n}\n", "nl": "Notifies listeners about clicking", "id": "19053"}
{"code": "public void increaseDpi(){\n  if (this.currentDpiPos < (this.dpiSizes.length - 1)) {\n    ++this.currentDpiPos;\n  }\n}\n", "nl": "Increase the image size (dpi).", "id": "10941"}
{"code": "public static Pair<Schema,JavaRDD<List<Writable>>> toRecords(DataFrame dataFrame){\n  Schema schema=fromStructType(dataFrame.schema());\n  return new Pair<>(schema,dataFrame.javaRDD().map(new ToRecord(schema)));\n}\n", "nl": "Create a compatible schema and rdd for datavec", "id": "15837"}
{"code": "protected IViewFinder createViewFinderView(Context context){\n  return new ViewFinderView(context);\n}\n", "nl": "<p>Method that creates view that represents visual appearance of a barcode scanner</p> <p>Override it to provide your own view for visual appearance of a barcode scanner</p>", "id": "28876"}
{"code": "public boolean insert_null_checks(){\n  return soot.PhaseOptions.getBoolean(options,\"insert-null-checks\");\n}\n", "nl": "Insert Null Checks -- . Insert a check that, before invoking the static copy of the  target method, throws a NullPointerException if the receiver  object is null. This ensures that static method binding does  not eliminate exceptions which would have occurred in its  absence.", "id": "12938"}
{"code": "public final boolean isLocalApplication(){\n  return Host.LOCALHOST.equals(getHost());\n}\n", "nl": "Returns true if the application is running on Host.LOCALHOST, false otherwise.", "id": "54933"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_Recall_Reject_EFFECT(String value0){\n  return new SM_SYSTEM_MESSAGE(1400099,value0);\n}\n", "nl": "You declined %0's summoning.", "id": "37067"}
{"code": "public UsersGetSubscriptionsQueryWithExtended fields(List<UserField> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields", "id": "24194"}
{"code": "public void showError(Drawable errorImageDrawable,String errorTextTitle,String errorTextContent,String errorButtonText,OnClickListener onClickListener,List<Integer> skipIds){\n  switchState(ERROR,errorImageDrawable,errorTextTitle,errorTextContent,errorButtonText,onClickListener,skipIds);\n}\n", "nl": "Show error view with a button when something goes wrong and prompting the user to try again", "id": "22581"}
{"code": "public static double uniform(Random rng,double min,double max){\n  return rng.nextDouble() * (max - min) + min;\n}\n", "nl": "Generate a uniform random number from the given rng", "id": "28223"}
{"code": "public synchronized void doneAppending(){\n  doneAppending=true;\n  notifyAll();\n}\n", "nl": "Inform this audio input stream not to expect any further calls to append(), and report end-of-stream when all data has been read.", "id": "9374"}
{"code": "public XorExpr newXorExpr(Value op1,Value op2){\n  return new GXorExpr(op1,op2);\n}\n", "nl": "Constructs a XorExpr(Expr, Expr) grammar chunk.", "id": "58388"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeathBlow_ME_TO_SELF(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200346,num0,skillname);\n}\n", "nl": "You inflicted %num0 damage on yourself by using [%SkillName].", "id": "42447"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_DUNGEON_WITH_DIFFICULTY_OPENED_INFO(String worldname1,String value2,int num0){\n  return new SM_SYSTEM_MESSAGE(1400359,worldname1,value2,num0);\n}\n", "nl": "%WORLDNAME1 (difficulty: %2) with a %num0 player limit is currently open.", "id": "15723"}
{"code": "private void zzDoEOF(){\n  if (!zzEOFDone) {\n    zzEOFDone=true;\n  }\n}\n", "nl": "Contains user EOF-code, which will be executed exactly once, when the end of file is reached", "id": "34043"}
{"code": "public static String trimEnd(String value,int length){\n  if (value == null || length > value.length()) {\n    return EMPTY;\n  }\n  return value.substring(0,value.length() - length);\n}\n", "nl": "Trims the given string from the end.", "id": "8100"}
{"code": "public static boolean banIp(String ip){\n  return banIp(ip,null);\n}\n", "nl": "Bans ip or mask for infinite period of time", "id": "35211"}
{"code": "@Nullable public static String extractMajorVersionFromSemanticVersion(String semanticVersion){\n  Matcher matcher=SEMANTIC_VERSION_REGEX_PATTERN.matcher(semanticVersion);\n  if (matcher.find()) {\n    return matcher.group(1);\n  }\n else {\n    return null;\n  }\n}\n", "nl": "Return major version of the given semantic version. For example, `v2` is returned from `v2.10`. Return null if major version cannot be extracted.", "id": "7241"}
{"code": "public static void createAircraft(AirMapAircraft aircraft,AirMapCallback<AirMapAircraft> listener){\n  String url=String.format(pilotAircraftUrl,AirMap.getUserId());\n  AirMap.getClient().post(url,aircraft.getAsParamsPost(),new GenericOkHttpCallback(listener,AirMapAircraft.class));\n}\n", "nl": "Create an aircraft for the authenticated user", "id": "26787"}
{"code": "public void clearNeighbors(){\n  nodeNeighbors.clear();\n}\n", "nl": "Clear the neighbor list", "id": "34010"}
{"code": "public static void assertEquals(double expected[],double observed[],double tolerance){\n  assertEquals(\"Array comparison failure\",expected,observed,tolerance);\n}\n", "nl": "Verifies that two double arrays have equal entries, up to tolerance", "id": "43999"}
{"code": "public WallUnpinQuery unpin(UserActor actor,int postId){\n  return new WallUnpinQuery(getClient(),actor,postId);\n}\n", "nl": "Unpins the post on wall.", "id": "11930"}
{"code": "public boolean isSmoothScrollbarEnabled(){\n  return mSmoothScrollbarEnabled;\n}\n", "nl": "Returns the current state of the smooth scrollbar feature. It is enabled by default.", "id": "34242"}
{"code": "public void broadCastEffectsImp(){\n  List<Effect> effects=getAbnormalEffects();\n  PacketSendUtility.broadcastPacket(getOwner(),new SM_ABNORMAL_EFFECT(getOwner(),abnormals,effects));\n}\n", "nl": "Broadcasts current effects to all visible objects", "id": "39002"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_HEAL_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1201227,skillname);\n}\n", "nl": "You recovered some DP by using [%SkillName].", "id": "21551"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapAircraftManufacturer && ((AirMapAircraftManufacturer)o).getId().equals(getId());\n}\n", "nl": "Comparison based on ID", "id": "38188"}
{"code": "private static boolean relative(InvocationConstraint c){\n  return (c instanceof RelativeTimeConstraint && (!(c instanceof ConstraintAlternatives) || ((ConstraintAlternatives)c).relative()));\n}\n", "nl": "Returns true if the specified constraint either implements RelativeTimeConstraint or is an instance of ConstraintAlternatives with elements that implement RelativeTimeConstraint, and false otherwise.", "id": "47155"}
{"code": "public static boolean hasJellyBean(){\n  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;\n}\n", "nl": ">= 4.1 16", "id": "7002"}
{"code": "public boolean hasSuperClassAccess(){\n  return getSuperClassAccessOpt().getNumChild() != 0;\n}\n", "nl": "Check whether the optional SuperClassAccess child exists.", "id": "45510"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "55670"}
{"code": "private BSPTree<Sphere1D> leafAfter(BSPTree<Sphere1D> node){\n  node=childAfter(node);\n  while (node.getCut() != null) {\n    node=childBefore(node);\n  }\n  return node;\n}\n", "nl": "Find the leaf node just after an internal node.", "id": "30113"}
{"code": "@Override public int compareTo(Storage o){\n  return ComparisonChain.start().compareTrueFirst(isConsistent(),o.isConsistent()).compareTrueFirst(_masterPrimary,o._masterPrimary).compare(o.getPromotionId(),getPromotionId(),TimeUUIDs.ordering().nullsLast()).compare(_uuid,o._uuid).result();\n}\n", "nl": "Storage objects sort such that primaries sort first, mirrors after.", "id": "18431"}
{"code": "protected boolean handleEnterKeyPress(){\n  return false;\n}\n", "nl": "Allows the extending class to special case the enter key press handling.", "id": "48600"}
{"code": "protected void addLanguageVariables(BundleContext context){\n  Language defaultLanguage=APILocator.getLanguageAPI().getLanguage(\"en\",\"US\");\n  addLanguageVariables(context,defaultLanguage);\n}\n", "nl": "Registers the language variables that are saved in the conf/language-ext.properties file in the English (en_US) Language", "id": "4134"}
{"code": "public void target(Quaternion rot,double power){\n  target(rot,power,Interpolation.SMOOTH);\n}\n", "nl": "Orders this limb to move to a target rotation. The rotation time is dependent on the rotational distance, the limb size, and power.", "id": "18473"}
{"code": "private void addPaths(){\n  addPath(new ConfigureAndroidProjectPath(getDisposable()));\n  for (  NewFormFactorModulePath path : NewFormFactorModulePath.getAvailableFormFactorModulePaths(getDisposable())) {\n    addPath(path);\n  }\n  addPath(new ConfigureCppSupportPath(getDisposable()));\n}\n", "nl": "Add the steps for this wizard", "id": "52832"}
{"code": "protected void onMouseClick(){\n  if (onMouseClick != null) {\n    onMouseClick.run();\n  }\n}\n", "nl": "User clicked the flashing icon, display the exception window.", "id": "32596"}
{"code": "public void validate(){\n  Preconditions.checkArgument(getBKClientReadTimeout() * 1000 > getReadLACLongPollTimeout(),\"Invalid timeout configuration : bkcReadTimeoutSeconds (\" + getBKClientReadTimeout() + \") should be longer than readLACLongPollTimeout (\"+ getReadLACLongPollTimeout()+ \")\");\n}\n", "nl": "Validate the configuration", "id": "14134"}
{"code": "public String process(Item seg) throws ProcessException {\n  return segCodaCtype(seg,\"n\");\n}\n", "nl": "Performs some processing on the given item.", "id": "48262"}
{"code": "@Override public ListenableFuture<MemberAddResponse> addMember(List<String> endpoints){\n  MemberAddRequest memberAddRequest=MemberAddRequest.newBuilder().addAllPeerURLs(endpoints).build();\n  return clusterStub.memberAdd(memberAddRequest);\n}\n", "nl": "add a new member into the cluster", "id": "11941"}
{"code": "public DerivativeStructure compose(final double... f) throws MathIllegalArgumentException {\n  MathUtils.checkDimension(f.length,getOrder() + 1);\n  final DerivativeStructure result=new DerivativeStructure(compiler);\n  compiler.compose(data,0,f,result.data,0);\n  return result;\n}\n", "nl": "Compute composition of the instance by a univariate function.", "id": "39642"}
{"code": "public void onProgressBarUpdated(int progress){\n}\n", "nl": "Called when progress has updated.", "id": "31203"}
{"code": "public boolean apply(){\n  setVisible(true);\n  return !isCanceled();\n}\n", "nl": "show the dialog", "id": "21253"}
{"code": "public Bundler putAll(Bundle bundle){\n  this.bundle.putAll(bundle);\n  return this;\n}\n", "nl": "Inserts all mappings from the given Bundle into this Bundle.", "id": "7648"}
{"code": "public static SM_SYSTEM_MESSAGE STR_UI_COMBAT_NPC_FLEE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300038,value0);\n}\n", "nl": "%0 is running away.", "id": "3806"}
{"code": "protected long doRenew(long duration) throws UnknownLeaseException, RemoteException {\n  return server.renewEventLease(eventID,leaseID,duration);\n}\n", "nl": "Renews the event lease associated with an instance of this class. Each instance of this class corresponds to a lease on an event registration for a particular client. This method renews that lease on behalf of the client.", "id": "30404"}
{"code": "public void post(Object event){\n  mBusSubject.onNext(event);\n}\n", "nl": "Posts an object (usually an Event) to the bus", "id": "10454"}
{"code": "public static String toString(byte[] input,String encoding) throws IOException {\n  return new String(input,Charsets.toCharset(encoding));\n}\n", "nl": "Get the contents of a <code>byte[]</code> as a String using the specified character encoding. <p/> Character encoding names can be found at <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.", "id": "21489"}
{"code": "private final boolean peekReportEntity(){\n  return fPEReport[fPEDepth - 1];\n}\n", "nl": "look at the top of the stack", "id": "56173"}
{"code": "public void fileLoaded(){\n  reset();\n}\n", "nl": "File loaded.", "id": "15275"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CANT_CHANGE_SAME_ITEM_SKIN(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1400371,value0,value1);\n}\n", "nl": "This modification cannot be completed as %0 and %1 have the same appearance.", "id": "3283"}
{"code": "public void registerExtraGeneratedSourceFolder(@NotNull File folderPath){\n  myExtraGeneratedSourceFolders.add(folderPath);\n}\n", "nl": "Registers the path of a source folder that has been incorrectly generated outside of the default location (${buildDir}/generated.)", "id": "36529"}
{"code": "public static Map<String,List<Distributable>> nodeBlockMapping(List<Distributable> blockInfos){\n  return nodeBlockMapping(blockInfos,-1);\n}\n", "nl": "This method will divide the blocks among the nodes as per the data locality", "id": "12689"}
{"code": "public Value sum(Value num){\n  return new AggregationFunction(num,AggregationType.SUM);\n}\n", "nl": "Return the max of the given value for all matches.", "id": "13442"}
{"code": "public static <E>RingBuffer<E> createSingleProducer(EventFactory<E> factory,int bufferSize,WaitStrategy waitStrategy){\n  SingleProducerSequencer sequencer=new SingleProducerSequencer(bufferSize,waitStrategy);\n  return new RingBuffer<E>(factory,sequencer);\n}\n", "nl": "Create a new single producer RingBuffer with the specified wait strategy.", "id": "56882"}
{"code": "public static boolean equals(@NonNull final Class first,@NonNull final Class second){\n  return first.getCanonicalName().equals(second.getCanonicalName());\n}\n", "nl": "Compares two classes by canonical name.", "id": "42641"}
{"code": "public boolean isValueOnly(){\n  return valueOnly;\n}\n", "nl": "Checks if is value only.", "id": "45450"}
{"code": "@Override public void changePresenter(@NonNull final CoreContract.Presenter presenter){\n  this.presenter=requireNonNull(presenter);\n  delegate.setPresenter(presenter);\n}\n", "nl": "For change presenter by someone", "id": "807"}
{"code": "public static String execute(String command){\n  return execute(command,null);\n}\n", "nl": "Execute a command in the runtime environment", "id": "58569"}
{"code": "public boolean isPacked(){\n  return proto.getOptions().getPacked();\n}\n", "nl": "Returns true if the field is packed.", "id": "39855"}
{"code": "public void stop(){\n}\n", "nl": "Stop the feature provider.", "id": "21617"}
{"code": "private long calcExpiration(long preferredDuration,long now){\n  long expiration=now + preferredDuration;\n  if (expiration < 0) {\n    return Long.MAX_VALUE;\n  }\n  return expiration;\n}\n", "nl": "Calculates an expiration based on the passed time and a requested duration. Will clip the expiration to the end of the epoch", "id": "19529"}
{"code": "public static void checkNotNull(@Nullable Object o){\n  if (o == null) {\n    throw new NullPointerException(\"Object must not be null\");\n  }\n}\n", "nl": "Asserts that the object is not null. Throws a null pointer exception if it is null.", "id": "28951"}
{"code": "public void remove(final String id){\n  this.speakers.remove(id);\n}\n", "nl": "Remove the Speaker for the given ID. Fails silently if the ID is not found.", "id": "5767"}
{"code": "private void notifyUpdates(){\n  for (  EnvVarUpdateInterface listener : listenerList) {\n    listener.envVarsUpdated(this.envVarList);\n  }\n}\n", "nl": "Notify rest of application of env var updates.", "id": "4329"}
{"code": "public static void hideToast(){\n  if (null != toast) {\n    toast.cancel();\n  }\n}\n", "nl": "hide the toast", "id": "15803"}
{"code": "@Override protected void merge(FlowSet in1,FlowSet in2,FlowSet out){\n  in1.intersection(in2,out);\n}\n", "nl": "This method performs the actual joining of successor nodes (i.e. doAnalysis calls this method for each successor, if there are more than one, of the current node). Since very busy expressions is a <u>must</u> analysis we join by intersecting.", "id": "53274"}
{"code": "public void addSource(final DOMImplementationSource s){\n  if (s == null) {\n    throw new NullPointerException();\n  }\n  if (!sources.contains(s)) {\n    sources.addElement(s);\n  }\n}\n", "nl": "Register an implementation.", "id": "6206"}
{"code": "public IStoredListIterator<T> next(IStoredListIterator<T> slh){\n  IStoredListIterator<T> slnext=nextPos((SegmentedListIterator<T>)slh);\n  if (slnext == null)   slh.release();\n  return slnext;\n}\n", "nl": "get the next element in scan order", "id": "12080"}
{"code": "public Plane.Side whichSide(Plane plane){\n  float distance=plane.pseudoDistance(center);\n  if (distance <= -radius) {\n    return Plane.Side.Negative;\n  }\n else   if (distance >= radius) {\n    return Plane.Side.Positive;\n  }\n else {\n    return Plane.Side.None;\n  }\n}\n", "nl": "<code>whichSide</code> takes a plane (typically provided by a view frustum) to determine which side this bound is on.", "id": "18453"}
{"code": "public void startFirstSampleTimer(){\n  timer.start(\"firstAudio\");\n  firstSample=true;\n  if (audioMetrics) {\n    timer.start(\"firstPlay\");\n    firstPlay=true;\n  }\n}\n", "nl": "Starts the first sample timer", "id": "50671"}
{"code": "private static String buildMessage(final Locale locale,final Localizable specifier,final Object... parts){\n  return (specifier == null) ? \"\" : new MessageFormat(specifier.getLocalizedString(locale),locale).format(parts);\n}\n", "nl": "Builds a message string by from a pattern and its arguments.", "id": "20623"}
{"code": "public static SpaceIndex createPathIndex(String path,SpaceIndexType indexType,boolean unique){\n  return createPathIndex_Impl(path,indexType,unique);\n}\n", "nl": "Creates a space index for the specified path with the specified index type.", "id": "22294"}
{"code": "@Override public void releaseScan() throws SAException {\n  try {\n    if (iterator != null)     iterator.close();\n  }\n catch (  Exception ex) {\n    throw new SAException(ex);\n  }\n}\n", "nl": "release SLHolder for this scan", "id": "54515"}
{"code": "@Override public void redoAction(UndoInterface undoRedoObject){\n  if ((spinner != null) && (undoRedoObject != null)) {\n    if (undoRedoObject.getNewValue() instanceof Double) {\n      Double newValue=(Double)undoRedoObject.getNewValue();\n      internalSetValue(newValue);\n    }\n  }\n}\n", "nl": "Redo action.", "id": "6527"}
{"code": "public static void createTable(Database db,boolean ifNotExists){\n  String constraint=ifNotExists ? \"IF NOT EXISTS \" : \"\";\n  db.execSQL(\"CREATE TABLE \" + constraint + \"\\\"THEME_LIST\\\" (\"+ \"\\\"JSON_STRING\\\" TEXT,\"+ \"\\\"CREATED_TIME\\\" INTEGER);\");\n}\n", "nl": "Creates the underlying database table.", "id": "24549"}
{"code": "public static void writeByteArrayToFile(File file,byte[] data) throws IOException {\n  writeByteArrayToFile(file,data,false);\n}\n", "nl": "Writes a byte array to a file creating the file if it does not exist. <p/> NOTE: As from v1.3, the parent directories of the file will be created if they do not exist.", "id": "20956"}
{"code": "public synchronized void update(Vector2 mousePosition){\n  this.beginPosition=mousePosition;\n}\n", "nl": "Updates the action with the new begin position in world coordinates. <p> This is used if the action is carried out over a time period in which the user would like visual feedback.", "id": "57025"}
{"code": "protected int addCascadedRow(int prow){\n  int r=m_rows.addRow();\n  ((CascadedRowManager)m_rows).put(r,prow);\n  updateRowCount();\n  fireTableEvent(r,r,TableModelEvent.ALL_COLUMNS,TableModelEvent.INSERT);\n  return r;\n}\n", "nl": "Internal method for adding a new cascaded row backed by the given parent row.", "id": "12995"}
{"code": "public void begin(){\n  if (currentPrompt == null) {\n    abandoned=false;\n    currentPrompt=firstPrompt;\n    context.getForWhom().beginConversation(this);\n  }\n}\n", "nl": "Displays the first prompt of this conversation and begins redirecting the user's chat responses.", "id": "50386"}
{"code": "public static String formatQuantity(int quantity){\n  return formatQuantity((double)quantity);\n}\n", "nl": "Formats an int representing a quantity into a string", "id": "22595"}
{"code": "public Iterator visibleItems(){\n  return items(VisiblePredicate.TRUE);\n}\n", "nl": "Get an iterator over all visible items.", "id": "35962"}
{"code": "@Override public boolean equals(Object o){\n  if (!(o instanceof ExpandedRow)) {\n    return false;\n  }\n  ExpandedRow that=(ExpandedRow)o;\n  return this.pairs.equals(that.getPairs()) && wasReversed == that.wasReversed;\n}\n", "nl": "Two rows are equal if they contain the same pairs in the same order.", "id": "21152"}
{"code": "public static boolean isPrimitiveWrapperArray(Class clazz){\n  Assert.notNull(clazz,\"Class must not be null\");\n  return (clazz.isArray() && isPrimitiveWrapper(clazz.getComponentType()));\n}\n", "nl": "Check if the given class represents an array of primitive wrappers, i.e. Boolean, Byte, Character, Short, Integer, Long, Float, or Double.", "id": "48389"}
{"code": "@Override public void write(char[] chr,int st,int end) throws IOException {\n  out.write(chr,st,end);\n}\n", "nl": "Write the specified characters from an array.", "id": "56459"}
{"code": "public boolean isUseCookies(){\n  return cookies;\n}\n", "nl": "SCIPIO: Necessary accessor method for external code.", "id": "12106"}
{"code": "@Override public void saveIssue(Issue issue){\n  final Session session=this.sessionFactory.openSession();\n  final Transaction transaction=session.beginTransaction();\n  session.saveOrUpdate(issue);\n  transaction.commit();\n  session.close();\n}\n", "nl": "Save an issue", "id": "25598"}
{"code": "@Override public LSInput createLSInput(){\n  return new DOMInputImpl();\n}\n", "nl": "DOM Level 3 LS CR - Experimental. Create a new empty input source.", "id": "39527"}
{"code": "public Location add(double x,double y,double z){\n  this.x+=x;\n  this.y+=y;\n  this.z+=z;\n  return this;\n}\n", "nl": "Adds the location by another. Not world-aware.", "id": "13919"}
{"code": "public AemSidekick clickComponentGroupToggle(String groupName){\n  final Map<String,WebElement> groupByNames=getGroupsByNames();\n  if (groupByNames.containsKey(groupName)) {\n    groupByNames.get(groupName).findElement(By.cssSelector(SECTION_TOGGLE_CSS)).click();\n  }\n  return this;\n}\n", "nl": "This method expands/collapses specified component group", "id": "50687"}
{"code": "@Override @ScheduleResult public int schedule(@NonNull Job job){\n  mContext.sendBroadcast(createScheduleRequest(job));\n  return FirebaseJobDispatcher.SCHEDULE_RESULT_SUCCESS;\n}\n", "nl": "Schedules the provided Job.", "id": "42795"}
{"code": "public void despawn(VisibleObject object){\n  despawn(object,true);\n}\n", "nl": "Despawn VisibleObject, object will become invisible and object position will become invalid. All others objects will be noticed that this object is no longer visible.", "id": "27282"}
{"code": "public String toString(cp_info constant_pool[]){\n  return convert();\n}\n", "nl": "Returns a String representation of this entry.", "id": "6264"}
{"code": "void ack(){\n  this.ackTimeoutRegistry.clear(Topic.RPC,Actions.REQUEST,this.uid);\n}\n", "nl": "Called once an ack message is received from the server.<br/>", "id": "24905"}
{"code": "public synchronized void read(BlockId blk){\n  fileMgr.read(blk,contents);\n}\n", "nl": "Populates the page with the contents of the specified disk block.", "id": "20918"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysParry_ME_TO_SELF(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200329,skillname);\n}\n", "nl": "You boosted your parry by using [%SkillName].", "id": "48247"}
{"code": "@Override public void dataChanged(FieldIdEnum changedField){\n  updateSymbol();\n}\n", "nl": "Data changed.", "id": "14378"}
{"code": "private void scan(){\n  for (  Field field : target.getClass().getDeclaredFields()) {\n    for (    AbstractAnnotationManager manager : managers)     if (manager.canManage(field))     manager.scanned(field);\n  }\n}\n", "nl": "Scan the target to populate the managers", "id": "3373"}
{"code": "public okhttp3.Response raw(){\n  return rawResponse;\n}\n", "nl": "The raw response from the HTTP client.", "id": "8232"}
{"code": "public void removeArguments(String label){\n  List<PBArgument> remove=new ArrayList<>();\n  for (  PBArgument arg : l_arguments) {\n    if (arg.isLabel(label))     remove.add(arg);\n  }\n  l_arguments.removeAll(remove);\n}\n", "nl": "Removes all argument with the specific label.", "id": "22197"}
{"code": "public static String decompressToStringForZlib(byte[] bytesToDecompress){\n  byte[] bytesDecompressed=decompressForZlib(bytesToDecompress);\n  String returnValue=null;\n  try {\n    returnValue=new String(bytesDecompressed,0,bytesDecompressed.length,\"UTF-8\");\n  }\n catch (  UnsupportedEncodingException uee) {\n    uee.printStackTrace();\n  }\n  return returnValue;\n}\n", "nl": "zlib decompress 2 String", "id": "38467"}
{"code": "static public int encode_vX_vY(float vx,float vy){\n  float[] arc_mag=getArc(vx,vy);\n  int argb=encode_vA_vM(arc_mag[0],arc_mag[1]);\n  return argb;\n}\n", "nl": "encodes an unnormalized 2D-vector as an unsigned 32 bit integer.<br> <br> 0xMMMMAAAA (16 bit arc, 16 bit magnitude<br>", "id": "55975"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200466,skilltarget,skillname);\n}\n", "nl": "You poisoned [%SkillTarget] by using [%SkillName].", "id": "3000"}
{"code": "public static synchronized boolean isAntiAliasingEnabled(){\n  return antiAliasingEnabled;\n}\n", "nl": "Returns true if anti-aliasing should be used.", "id": "19758"}
{"code": "public boolean hasNext(){\n  return next >= 0;\n}\n", "nl": "Check if there is a next element in the map.", "id": "18417"}
{"code": "public void addPaging(Integer pageSize,Integer pageIndex){\n  ParamValidationUtil.validateParamNotNull(pageSize,\"pageSize\");\n  ParamValidationUtil.validateParamNotNull(pageIndex,\"pageIndex\");\n  int offset=pageIndex * pageSize;\n  this.offset=offset;\n  this.limit=pageSize;\n  this.usePaging=true;\n}\n", "nl": "Adds paging to the query", "id": "24863"}
{"code": "public static String toString(InputStream input) throws IOException {\n  return toString(input,Charset.defaultCharset());\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a String using the default character encoding of the platform. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>.", "id": "51258"}
{"code": "protected void writeLSD() throws IOException {\n  writeShort(width);\n  writeShort(height);\n  out.write((0x80 | 0x70 | 0x00| palSize));\n  out.write(0);\n  out.write(0);\n}\n", "nl": "Writes Logical Screen Descriptor", "id": "24691"}
{"code": "@Override public IBinder onBind(Intent arg){\n  return mBinder;\n}\n", "nl": "Provides a binder object that clients can use to perform operations on the MediaPlayer managed by the MediaService.", "id": "38519"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_WRONG_EXCHANGE_TARGET(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1400554,value0,value1);\n}\n", "nl": "%0 is not a target you can trade %1 with.", "id": "16083"}
{"code": "public String[] upload_appender_file(String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String group_name=null;\n  return this.upload_appender_file(group_name,local_filename,file_ext_name,meta_list);\n}\n", "nl": "upload appender file to storage server (by file name)", "id": "47018"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Deform_A_TO_B(String skilltarget,String value0,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200960,skilltarget,value0,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] has transformed into %0 because [%SkillCaster] used [%SkillName].", "id": "6411"}
{"code": "private void distributeValue(final SourceDataTagValue sourceDataTagValue) throws JMSException {\n  for (  JmsSender jmsSender : jmsSenders) {\n    try {\n      jmsSender.processValue(sourceDataTagValue);\n    }\n catch (    Exception e) {\n      LOGGER.error(\"Unhandled exception caught while sending a source value (tag id \" + sourceDataTagValue.getId() + \") - the value update will be lost.\",e);\n    }\n  }\n  sourceDataTagValue.log();\n}\n", "nl": "Forwards the value to all the JMS senders.", "id": "57890"}
{"code": "protected MarketCreateCommentQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n", "nl": "Item id", "id": "39609"}
{"code": "public GroupsGetQuery fields(List<GroupField> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Profile fields to return.", "id": "49534"}
{"code": "public static SM_SYSTEM_MESSAGE STR_BUDDY_REQUEST_TO_ADD(String value0){\n  return new SM_SYSTEM_MESSAGE(1300911,value0);\n}\n", "nl": "%0 has sent you a friend request.", "id": "32863"}
{"code": "public CartPaymentInfo addPayment(String id){\n  return this.addPaymentAmount(id,null,false);\n}\n", "nl": "adds a payment method/payment method type", "id": "18250"}
{"code": "public void releaseScan() throws SAException {\n  if (_curValueList != null) {\n    _curValueList.releaseScan();\n    _curValueList=null;\n  }\n}\n", "nl": "release SLHolder for this scan", "id": "24620"}
{"code": "void registerAsIdle(){\n  if (timeToIdlePolicy.isPresent()) {\n    timeToIdlePolicy.get().add(resourceKey);\n    if (resourceKey.getStatus() != Status.IDLE) {\n      timeToIdlePolicy.get().invalidate(resourceKey);\n    }\n  }\n}\n", "nl": "Add the resource to the idle cache if present. If the resource was removed for any other reason while being added, it must then be discarded afterwards", "id": "28993"}
{"code": "static public void add(float[] array1,float[] array2){\n  int i, size=array1.length;\n  for (i=0; i < size; i++)   array1[i]+=array2[i];\n}\n", "nl": "array1 += array2.", "id": "56341"}
{"code": "public VideoReorderVideosQuery afterVideoId(Integer value){\n  return unsafeParam(\"after_video_id\",value);\n}\n", "nl": "ID of the video after which the photo in question shall be placed.", "id": "4697"}
{"code": "public static String removeLastOr(String string){\n  string=StringUtils.stripEnd(string,\" \");\n  return StringUtils.removeEndIgnoreCase(string,\"or\");\n}\n", "nl": "Removes the last occurrence of the word \"or\" from the given string, including potential trailing spaces, case-insensitive.", "id": "21275"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BackDashATK_ME_TO_SELF(int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200336,num0,skillname);\n}\n", "nl": "You inflicted %num0 damage on yourself by using [%SkillName].", "id": "8249"}
{"code": "public boolean isPrivateService(){\n  return isPrivateService(getServiceConfig().getName());\n}\n", "nl": "Returns true if the service is a private API, corp API, or on sandbox.googles.com non production environent.", "id": "30312"}
{"code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n", "nl": "is there more data?", "id": "56649"}
{"code": "public Iterator iterator(IntIterator rows){\n  return new TupleManagerIterator(this,rows);\n}\n", "nl": "Return an iterator over the tuples in this manager.", "id": "18527"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Aura_END_ME_TO_B(String skillname){\n  return new SM_SYSTEM_MESSAGE(1200459,skillname);\n}\n", "nl": "You stop using [%SkillName].", "id": "9"}
{"code": "protected Criteria createCriteriaInternal(){\n  Criteria criteria=new Criteria();\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.operatelog", "id": "11463"}
{"code": "private void forgetObjects(){\n  for (  VisibleObject object : knownObjects.values()) {\n    if (!checkObjectInRange(object) && !object.getKnownList().checkReversedObjectInRange(owner)) {\n      del(object,true);\n      object.getKnownList().del(owner,true);\n    }\n  }\n}\n", "nl": "forget out of distance objects.", "id": "21197"}
{"code": "public void add(Predicate p,StrokeAction f){\n  super.add(p,f);\n}\n", "nl": "Add a mapping rule to this StrokeAction. VisualItems that match the provided predicate will be assigned the BasicStroke value returned by the given StrokeAction's getStroke() method.", "id": "10751"}
{"code": "public boolean leftAllowed(){\n  return (myFlags & LEFT_EDGE) != 0;\n}\n", "nl": "Returns true if this policy allows resizing the left edge", "id": "8784"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FORCE_REJECT_HIM(String value0){\n  return new SM_SYSTEM_MESSAGE(1300972,value0);\n}\n", "nl": "%0 has declined your invitation to join the alliance.", "id": "37320"}
{"code": "protected T clientSecret(String value){\n  return unsafeParam(\"client_secret\",value);\n}\n", "nl": "Set \"client secret\"", "id": "43589"}
{"code": "public static boolean propertyValueEquals(String resource,String name,String compareString){\n  String value=getPropertyValue(resource,name);\n  if (value == null)   return false;\n  return value.trim().equals(compareString);\n}\n", "nl": "Compares the specified property to the compareString, returns true if they are the same, false otherwise", "id": "35116"}
{"code": "public byte[] unsafeGetArray(){\n  return bytes;\n}\n", "nl": "Unsafe get of the internal byte array. Use this with extreme care and only if you are sure that the content will not be modified as that would lead to hard to locate bugs by shared mutable data. The only reason this method exists is that the code uses lots of Hashes avoiding unnecesary copy of their content significantly reduces memory footprint and increases performance. There is a risk tradoff however.", "id": "43806"}
{"code": "public void clearShapes(){\n  sample2shape.clear();\n}\n", "nl": "erase shapes", "id": "25966"}
{"code": "@Override public boolean next() throws RemoteException {\n  try {\n    return s.next();\n  }\n catch (  RuntimeException e) {\n    rconn.rollback();\n    throw e;\n  }\n}\n", "nl": "Moves to the next record in the result set, by moving to the next record in the saved scan.", "id": "41912"}
{"code": "public DocsGetQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset needed to return a specific subset of documents.", "id": "56842"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "21880"}
{"code": "public boolean isFifo(){\n  return fifo;\n}\n", "nl": "Checks if the order that is in use with this config is fifo.", "id": "32543"}
{"code": "public StatelessHibernateSpaceDataSourceConfigurer performOrderById(boolean performOrderById){\n  this.performOrderById=performOrderById;\n  return this;\n}\n", "nl": "When performing initial load, this flag indicates if the generated query will order to results by the id. By default set to <code>true</code> as it most times results in better initial load performance.", "id": "21946"}
{"code": "public double[] toArray(){\n  return new double[]{x,y};\n}\n", "nl": "Get the vector coordinates as a dimension 2 array.", "id": "37021"}
{"code": "public static String locale2xmllang(Locale locale){\n  if (locale == null)   throw new IllegalArgumentException(\"Locale must not be null\");\n  String country=locale.getCountry();\n  if (!\"\".equals(country))   return locale.getLanguage() + \"-\" + country;\n  return locale.getLanguage();\n}\n", "nl": "Convert a locale into a string that is conform with XML's xml:lang attribute. Basically it is language-COUNTRY, e.g. en-US.", "id": "37459"}
{"code": "public boolean precise_newinstance(){\n  return soot.PhaseOptions.getBoolean(options,\"precise-newinstance\");\n}\n", "nl": "Precise newInstance -- Make newInstance only allocate objects of dynamic classes. Normally, newInstance() calls are treated as if they may  return an object of any type. Setting this option to true  causes them to be treated as if they return only objects of  the type of some dynamic class.", "id": "49350"}
{"code": "protected DocsAddQuery docId(int value){\n  return unsafeParam(\"doc_id\",value);\n}\n", "nl": "Document ID.", "id": "35317"}
{"code": "public static <T extends Enum<T>>T readEnum(DataInput in,Class<T> enumType) throws IOException {\n  return T.valueOf(enumType,Text.readString(in));\n}\n", "nl": "Read an Enum value from DataInput, Enums are read and written using String values.", "id": "5001"}
{"code": "public void writeMapping(Writer w) throws IOException {\n  w.write(\"# Mapping file, generated \" + (new Date()) + \"\\n\");\n  for (  Integer key : id2name.keySet()) {\n    w.write(key + \"\\t\" + id2name.get(key)+ \"\\n\");\n  }\n}\n", "nl": "write the new mapping", "id": "5440"}
{"code": "static void verify(Class c){\n  if (c == null) {\n    throw new NullPointerException(\"elements cannot be null\");\n  }\n  if (c.isArray() || c.isPrimitive() || (Modifier.isFinal(c.getModifiers()) && !Principal.class.isAssignableFrom(c))) {\n    throw new IllegalArgumentException(\"invalid class\");\n  }\n}\n", "nl": "Verifies that the class is not a primitive or array class, and either isn't final or is assignable to Principal.", "id": "1312"}
{"code": "public boolean enabled(){\n  return soot.PhaseOptions.getBoolean(options,\"enabled\");\n}\n", "nl": "Enabled -- .", "id": "44074"}
{"code": "public void close(){\n  this.pw.flush();\n}\n", "nl": "Flushes all generated code.", "id": "37842"}
{"code": "public void reset(){\n  localDeque.clear();\n  localDeque.push(new FramePath());\n}\n", "nl": "Resetting the stack frame means clearing it and putting there the default frame", "id": "56456"}
{"code": "@NonNull public static StorableFence or(@NonNull StorableFence... fences){\n  return StorableFence.or(Arrays.asList(fences));\n}\n", "nl": "Creates a meta storable fence which is a logical 'or' of all the given fences", "id": "187"}
{"code": "public void put(final T key,final T val){\n  try (Txn<T> txn=env.txnWrite()){\n    put(txn,key,val);\n    txn.commit();\n  }\n }\n", "nl": "Starts a new read-write transaction and puts the key/data pair.", "id": "55273"}
{"code": "public static MonsterStatusFragment newInstance(long monsterId){\n  Bundle args=new Bundle();\n  args.putLong(ARG_MONSTER_ID,monsterId);\n  MonsterStatusFragment f=new MonsterStatusFragment();\n  f.setArguments(args);\n  return f;\n}\n", "nl": "Create a new instance of the fragment for a monster", "id": "15303"}
{"code": "public DatabaseGetCitiesQuery needAll(Boolean value){\n  return unsafeParam(\"need_all\",value);\n}\n", "nl": "Return all cities in the country", "id": "31085"}
{"code": "@Override public void attributeSelection(String field){\n  if (this.spinner != null) {\n    this.spinner.setEnabled(field == null);\n  }\n}\n", "nl": "Attribute selection.", "id": "56699"}
{"code": "public static DatabusClientFactory forClusterAndHttpClient(String clusterName,Client client){\n  return new DatabusClientFactory(clusterName,client);\n}\n", "nl": "Connects to the System of Record using the specified Jersey client.  If you're using Dropwizard, use this factory method and pass the Dropwizard-constructed Jersey client.", "id": "9913"}
{"code": "public static JSONArray toJSONArray(String string) throws JSONException {\n  return toJSONArray(new JSONTokener(string));\n}\n", "nl": "Produce a JSONArray of JSONObjects from a comma delimited text string, using the first row as a source of names.", "id": "42529"}
{"code": "public static String[][] ISO8859_1_ESCAPE(){\n  return ISO8859_1_ESCAPE.clone();\n}\n", "nl": "Mapping to escape <a href=\"https://secure.wikimedia.org/wikipedia/en/wiki/ISO/IEC_8859-1\">ISO-8859-1</a> characters to their named HTML 3.x equivalents.", "id": "3025"}
{"code": "public void putImplementationEquipmentConfigurationChanger(final long equipmentId,final IEquipmentConfigurationChanger equipmentConfigurationChanger){\n  equipmentChangers.put(equipmentId,equipmentConfigurationChanger);\n}\n", "nl": "Puts an implementation equipment configuration changer to this controller. There can only be one per equipment.", "id": "17187"}
{"code": "public void toggle(Animation animIn,Animation animOut){\n  toggle(true,animIn,animOut);\n}\n", "nl": "Toggle the badge visibility in the UI.", "id": "7"}
{"code": "public void addVendorOption(Class<?> symbolizerClass,List<ValueComboBoxData> symbolList,Map<Class<?>,List<SymbolTypeConfig>> fieldEnableMap,Class<?> panelId){\n  for (  VOMarkerSymbolInterface obj : list) {\n    obj.addVendorOption(symbolizerClass,symbolList,fieldEnableMap,panelId);\n  }\n}\n", "nl": "Adds the vendor option.", "id": "56077"}
{"code": "public boolean isAbnormalState(AbnormalState id){\n  int state=abnormals & id.getId();\n  return state > 0 && state <= id.getId();\n}\n", "nl": "Used for compound abnormal state checks", "id": "44975"}
{"code": "@Override public Iterator iterator(){\n  return new EntryIterator(set.iterator());\n}\n", "nl": "Wrap so we can do type checking on Map.Entry.setValue.", "id": "16652"}
{"code": "public void leave(DelegateExecution execution){\n  bpmnActivityBehavior.performDefaultOutgoingBehavior((ExecutionEntity)execution);\n}\n", "nl": "Default way of leaving a BPMN 2.0 activity: evaluate the conditions on the outgoing sequence flow and take those that evaluate to true.", "id": "14811"}
{"code": "@Override public boolean isDeprecated(){\n  return proto.getOptions().getDeprecated();\n}\n", "nl": "Returns true if this object represents something that is configured as deprecated.", "id": "17497"}
{"code": "private void populatePrefixMap(SelectedTreeItemEnum item,SelectedTreeItemEnum parentItem,Map<SelectedTreeItemEnum,String> initialPrefixMap){\n  prefixMap.put(item,prefixMap.get(parentItem) + initialPrefixMap.get(item));\n}\n", "nl": "Populate prefix map.", "id": "55325"}
{"code": "private String pitchLabels2RelativeValues(String pitchAttribute){\n  if (pitchAttribute.equals(\"x-low\")) {\n    return \"-50%\";\n  }\n else   if (pitchAttribute.equals(\"low\")) {\n    return \"-25%\";\n  }\n else   if (pitchAttribute.equals(\"medium\")) {\n    return \"+0%\";\n  }\n else   if (pitchAttribute.equals(\"high\")) {\n    return \"+100%\";\n  }\n else   if (pitchAttribute.equals(\"x-high\")) {\n    return \"+200%\";\n  }\n  return \"+0%\";\n}\n", "nl": "a look-up for pitch labels to relative changes", "id": "17664"}
{"code": "public Builder fill(Boolean fill){\n  this.fill=fill;\n  return this;\n}\n", "nl": "Whether to fill the path with color. Set it to false to disable filling on polygons or circles. </br> default true", "id": "42765"}
{"code": "final public void println(Object o){\n  print(o + \"<br>\");\n}\n", "nl": "println the object to end-user", "id": "37051"}
{"code": "public void accept(IQueryExecutor executor,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {\n  executor.execute(this,space,txn,readModifier,max);\n}\n", "nl": "Accept the query executor", "id": "55503"}
{"code": "public void write(OutputWriter outs) throws IOException {\n  for (long index=0; index < maxIndex; index++) {\n    outs.writeInt(get(index));\n  }\n}\n", "nl": "write to stream in binary", "id": "25233"}
{"code": "public boolean execute(String action,String rawArgs,CallbackContext callbackContext) throws JSONException {\n  JSONArray args=new JSONArray(rawArgs);\n  return execute(action,args,callbackContext);\n}\n", "nl": "Executes the request. This method is called from the WebView thread. To do a non-trivial amount of work, use: cordova.getThreadPool().execute(runnable); To run on the UI thread, use: cordova.getActivity().runOnUiThread(runnable);", "id": "36197"}
{"code": "@Override public void occurrence(short occurrence,Augmentations augmentations) throws XNIException {\n}\n", "nl": "The occurrence count for a child in a children content model or for the mixed content model group.", "id": "56396"}
{"code": "public static void debugInfo(String msg){\n  debugInfo(DEFAULT_TAG,msg);\n}\n", "nl": "author  hhj TODO", "id": "17731"}
{"code": "public boolean isEmptyTemplate(){\n  return getServerTypeDesc().isRootType();\n}\n", "nl": "returns true if this template represents an empty template. i.e. this template's type is Object.", "id": "34622"}
{"code": "public double minValue(){\n  Iterator iIter=asTreeMap().values().iterator();\n  Double dMin=Double.POSITIVE_INFINITY;\n  while (iIter.hasNext()) {\n    Double dVal=(Double)iIter.next();\n    dMin=(dVal < dMin) ? dVal : dMin;\n  }\n  return dMin;\n}\n", "nl": "Looks up the minimum value appearing in the distribution.", "id": "578"}
{"code": "public GroupsApproveRequestQuery approveRequest(UserActor actor,int groupId,int userId){\n  return new GroupsApproveRequestQuery(getClient(),actor,groupId,userId);\n}\n", "nl": "Allows to approve join request to the community.", "id": "57644"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set show-insertions=\");\n  boolean show=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.setShowInsertions(show);\n}\n", "nl": "parses the given command and executes it", "id": "27101"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "30650"}
{"code": "public void addContactMech(String contactMechPurposeTypeId,String contactMechId){\n  if (contactMechPurposeTypeId == null)   throw new IllegalArgumentException(\"You must specify a contactMechPurposeTypeId to add a ContactMech\");\n  contactMechIdsMap.put(contactMechPurposeTypeId,contactMechId);\n}\n", "nl": "Add a contact mech to this purpose; the contactMechPurposeTypeId is required", "id": "31690"}
{"code": "@Override public boolean isWorkspaceRoot(File file){\n  return FileAttributeProvider.getInstance().isFile(new File(file,\"WORKSPACE\"));\n}\n", "nl": "Checks for the existence of a WORKSPACE file in the given directory.", "id": "56015"}
{"code": "public static double log2(double a){\n  if (a == 0)   return 0.0;\n  return Math.log(a) / log2;\n}\n", "nl": "Returns the logarithm of a for base 2.", "id": "55999"}
{"code": "public WallRepostQuery markAsAds(Boolean value){\n  return unsafeParam(\"mark_as_ads\",value);\n}\n", "nl": "Set mark as ads", "id": "53990"}
{"code": "public static void decorate(View hostView,View decorView,int gravity){\n  decorate(hostView,decorView,gravity,0,0,0,0);\n}\n", "nl": "Decorate a decor view on corresponding host view.", "id": "56791"}
{"code": "public static Map<String,Object> conditionFalseService(DispatchContext dctx,Map<String,?> context){\n  Map<String,Object> result=ServiceUtil.returnSuccess();\n  result.put(\"conditionReply\",Boolean.FALSE);\n  return result;\n}\n", "nl": "Return FALSE Service; ECA Condition Service", "id": "24287"}
{"code": "public static void updatePhoneNumber(String phoneNumber,@Nullable AirMapCallback<Void> callback){\n  PilotService.updatePhoneNumber(phoneNumber,callback);\n}\n", "nl": "Update the authenticated pilot's phone number", "id": "36173"}
{"code": "public boolean isFailed(){\n  return !pokemonHP.isPresent() && !pokemonCP.isPresent();\n}\n", "nl": "Test whether this ScanResult represents a failed scan.", "id": "48480"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_DODGE(String value0){\n  return new SM_SYSTEM_MESSAGE(1210002,value0);\n}\n", "nl": "You evaded %0's attack.", "id": "44484"}
{"code": "protected SoftReference<List<Row>> softlyReferenced(List<Row> rows){\n  return new SoftReference<>(rows);\n}\n", "nl": "Simple method to create a soft reference to the given row list.  Performed in a method to allow unit-tests to override for controlled testing.", "id": "56736"}
{"code": "public boolean simulate_natives(){\n  return soot.PhaseOptions.getBoolean(options,\"simulate-natives\");\n}\n", "nl": "Simulate Natives -- Simulate effects of native methods in standard class library. When this option is set to true, the effects of native methods  in the standard Java class library are simulated.", "id": "19014"}
{"code": "public VideoRemoveTagQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "ID of the user or community that owns the video.", "id": "7647"}
{"code": "public <T>T inject(Class<T> clazz,FramePath framePath){\n  final ElementLocatorFactory elementLocatorFactory=new DefaultElementLocatorFactory(webDriver);\n  stack.push(new PageObjectContext(elementLocatorFactory,framePath));\n  try {\n    return injector.getInstance(clazz);\n  }\n  finally {\n    stack.pop();\n  }\n}\n", "nl": "This method creates the object of type clazz within context defined by the top web element and the frame path provided as the parameter.", "id": "11751"}
{"code": "protected MessagesGetChatQueryWithChatIdsFields chatIds(Integer... value){\n  return unsafeParam(\"chat_ids\",value);\n}\n", "nl": "Chat IDs.", "id": "30587"}
{"code": "private void initLoadMoreData(){\n  for (int i=0; i < 2; i++) {\n    List<String> url=new ArrayList<>();\n    url.add(\"http://qq1234.org/uploads/allimg/140404/3_140404114555_5.jpg\");\n    url.add(\"http://qq1234.org/uploads/allimg/140404/3_140404114555_4.jpg\");\n    mLists.add(url);\n  }\n}\n", "nl": "init Load More Data", "id": "10032"}
{"code": "public static CommandResult execCommand(String command,boolean isRoot,String path){\n  return execCommand(new String[]{command},isRoot,true,path);\n}\n", "nl": "execute shell command, default return result msg", "id": "51759"}
{"code": "public static JScrollPane newTableScrollPane(JComponent comp){\n  return new TableScrollPane(comp);\n}\n", "nl": "A slightly modified border for JScrollPane to be used with a JTable inside a JTabbedPane. It has only top part and the rest is clipped to make the overall border less thick. The top border helps differentiating the containing table from its container.", "id": "27551"}
{"code": "public AdsDeleteClientsQuery deleteClients(UserActor actor,int accountId,String ids){\n  return new AdsDeleteClientsQuery(getClient(),actor,accountId,ids);\n}\n", "nl": "Archives clients of an advertising agency.", "id": "57643"}
{"code": "protected GroupsGetQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "\"1\" - to return complete information about a user's communities \"0\" - to return a list of community IDs without any additional fields (default)", "id": "50062"}
{"code": "public boolean isPlaying(){\n  return isPlaying;\n}\n", "nl": "This method return true if animation is playing.", "id": "32040"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GUILD_CHANGE_MEMBER_RANK_DONE_2_GUILD_OFFICER(String value0){\n  return new SM_SYSTEM_MESSAGE(1300267,value0);\n}\n", "nl": "%0 has become a Legion Centurion.", "id": "53224"}
{"code": "public DesiredExpirationListener desiredExpirationListener(){\n  if (listener == null)   return null;\n  if (listener instanceof DesiredExpirationListener)   return (DesiredExpirationListener)listener;\n  return null;\n}\n", "nl": "Return the DesiredExpirationListener associated with this lease, or null if there is none.", "id": "32033"}
{"code": "public static void recordMainEntryPointTime(){\n  sApplicationStartWallClockMs=System.currentTimeMillis();\n}\n", "nl": "Record the time at which the activity started. This should be called asap after the start of the activity's onCreate function.", "id": "25631"}
{"code": "@Override public void endExternalSubset(Augmentations augmentations) throws XNIException {\n}\n", "nl": "The end of the DTD external subset.", "id": "44576"}
{"code": "public static IOFileFilter or(IOFileFilter... filters){\n  return new OrFileFilter(toList(filters));\n}\n", "nl": "Returns a filter that ORs the specified filters.", "id": "36773"}
{"code": "public static final int encodeOpcodec(int op){\n  return (op + 0xD0) ^ 0xD1;\n}\n", "nl": "Server packet opcodec obfuscation.", "id": "9948"}
{"code": "private static byte charToByte(char c){\n  return (byte)\"0123456789ABCDEF\".indexOf(c);\n}\n", "nl": "Convert char to byte ", "id": "35088"}
{"code": "public float distance(Vector2f v){\n  return FastMath.sqrt(distanceSquared(v));\n}\n", "nl": "<code>distance</code> calculates the distance between this vector and vector v.", "id": "55085"}
{"code": "public static List<Integer> createColors(int[] colors){\n  List<Integer> result=new ArrayList<Integer>();\n  for (  int i : colors) {\n    result.add(i);\n  }\n  return result;\n}\n", "nl": "Turns an array of colors (integer color values) into an ArrayList of colors.", "id": "30534"}
{"code": "@Override public void onShadowUpdate(String jsonState){\n  super.onShadowUpdate(jsonState);\n}\n", "nl": "This function handles update messages received from the shadow. By default, it invokes the setter methods provided for the annotated device attributes. When there are multiple attribute changes received in one shadow update, the order of invoking the setter methods are not defined. One can override this function to provide their own implementation for updating the device. The shadow update containing the delta (between the 'desired' state and the 'reported' state) is passed in as an input argument.", "id": "33147"}
{"code": "public int calculateDeltaSize(int vmfullclonesize,int vmrefreshrate){\n  final int i=(vmfullclonesize * vmrefreshrate) / 100;\n  return i;\n}\n", "nl": "Calculate size of delta size", "id": "47788"}
{"code": "@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){\n  LOG.d(TAG,\"Incoming Result. Request code = \" + requestCode);\n  super.onActivityResult(requestCode,resultCode,intent);\n  cordovaInterface.onActivityResult(requestCode,resultCode,intent);\n}\n", "nl": "Called when an activity you launched exits, giving you the requestCode you started it with, the resultCode it returned, and any additional data from it.", "id": "27609"}
{"code": "@Override public void onStreamReceived(Session session,Stream stream){\n  if (mSubscriber == null) {\n    startSubscribing(stream);\n    sendEvent(Events.EVENT_SUBSCRIBE_START,Arguments.createMap());\n  }\n}\n", "nl": "Session listener", "id": "46358"}
{"code": "@Override public boolean isCellEditable(int rowIndex,int columnIndex){\n  ProcessFunctionParameterValue value=valueList.get(rowIndex);\nswitch (columnIndex) {\ncase COL_OPTIONAL:\n    return value.optional;\ncase COL_VALUE:\n  if (value.optional) {\n    return value.included;\n  }\n else {\n    return true;\n  }\ncase COL_PARAMETER:\ncase COL_TYPE:\ndefault :\nreturn false;\n}\n}\n", "nl": "Checks if is cell editable.", "id": "48265"}
{"code": "public String guards(){\n  return soot.PhaseOptions.getString(options,\"guards\");\n}\n", "nl": "Guarding strategy -- Describes how to guard the program from unsound assumptions.. Using a reflection log is only sound for method executions that  were logged. Executing the program differently may be unsound.  Soot can insert guards at program points for which the  reflection log contains no information. When these points are  reached (because the program is executed differently) then the  follwing will happen, depending on the value of this flag.  ignore: no guard is inserted, the program executes normally but  under unsound assumptions. print: the program prints a stack  trace when reaching a porgram location that was not traced but  continues to run. throw (default): the program throws an Error  instead.", "id": "9686"}
{"code": "public static TimeStamp create(){\n  return new TimeStamp();\n}\n", "nl": "Creates the.", "id": "42735"}
{"code": "protected void prepareGraphics(Graphics2D g){\n  if (m_transform != null)   g.transform(m_transform);\n  setRenderingHints(g);\n}\n", "nl": "Sets the transform of the provided Graphics context to be the transform of this Display and sets the desired rendering hints.", "id": "28413"}
{"code": "public void ResetAttack(){\n  loop=0;\n}\n", "nl": "init enemy attack", "id": "32722"}
{"code": "public void assertTextPresent(String expected,String actual){\n  if ((actual == null) || (!actual.contains(expected))) {\n    throw new AssertionFailedError(\"expected presence of [\" + expected + \"], but was [\"+ actual+ \"]\");\n  }\n}\n", "nl": "Asserts if the provided text is part of some text.", "id": "17515"}
{"code": "private static boolean isNullValue(String value,String valueMeaning){\n  if (value == null) {\n    LOGGER.warning(\"Setting null \" + valueMeaning + \"!\");\n    return true;\n  }\n  return false;\n}\n", "nl": "Simply check if the value is null or not and log a warning message if it is null.", "id": "19147"}
{"code": "public void createScriptRunner(final IKBus eventBus,final Executor executor){\n  if (scriptRunner == null) {\n    this.scriptRunner=new ScriptRunner(eventBus,this,executor);\n  }\n}\n", "nl": "Creates a script runner for the script if it doesn't exist yet.", "id": "44972"}
{"code": "public void addTreeUpdate(SLDTreeUpdatedInterface sldTree){\n  treeUpdateList.add(sldTree);\n}\n", "nl": "Adds the tree update.", "id": "30033"}
{"code": "public boolean unregisterTask(UserDefinedAction action){\n  for (  KeyChain k : action.getActivation().getHotkeys()) {\n    unregisterKey(k);\n  }\n  mouseGestureManager.unRegisterAction(action);\n  return true;\n}\n", "nl": "Remove all bindings to the task's activation.", "id": "52375"}
{"code": "public String expandString(String original){\n  return FlexibleStringExpander.expandString(original,getBindings());\n}\n", "nl": "Expands environment variables delimited with ${}", "id": "49114"}
{"code": "public static double swapDouble(double value){\n  return Double.longBitsToDouble(swapLong(Double.doubleToLongBits(value)));\n}\n", "nl": "Converts a \"double\" value between endian systems.", "id": "38091"}
{"code": "@Override public int compareTo(StyleWrapper o){\n  String s1=this.workspace + this.style;\n  String s2=o.workspace + o.style;\n  return s1.compareTo(s2);\n}\n", "nl": "Compare to.", "id": "23454"}
{"code": "public String viewName(){\n  return viewName;\n}\n", "nl": "Returns the name of the new view.", "id": "38731"}
{"code": "public void nextGroup() throws SAException {\n  _curValueListHolder=null;\n  if (_curValueList != null) {\n    _curValueList.releaseScan();\n    _curValueList=null;\n  }\n}\n", "nl": "move to next group-value", "id": "13452"}
{"code": "protected void prepareTableView(){\n  if (fAttributeTableView == null) {\n    fAttributeTableView=new Attribute[fTableViewBuckets];\n    fAttributeTableViewChainState=new int[fTableViewBuckets];\n  }\n else {\n    cleanTableView();\n  }\n}\n", "nl": "Prepares the table view of the attributes list for use.", "id": "39115"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CaseHeal_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200799,skillcaster,num0,skillname);\n}\n", "nl": "[%SkillCaster] recovered %num0 HP because he used [%SkillName].", "id": "57779"}
{"code": "public boolean removeCursor(MapCursor cursor){\n  return cursors.remove(cursor);\n}\n", "nl": "Remove a cursor from the collection.", "id": "36475"}
{"code": "public GroupsSearchQuery sort(GroupsSearchSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order", "id": "26912"}
{"code": "public void showLoading(List<Integer> skipIds){\n  switchState(LOADING,null,null,null,null,null,skipIds);\n}\n", "nl": "Hide content and show the progress bar", "id": "30291"}
{"code": "public int store(GenericValue value) throws GenericEntityException {\n  if (value == null) {\n    return 0;\n  }\n  return genericDAO.update(value);\n}\n", "nl": "Store the Entity from the GenericValue to the persistent store", "id": "26890"}
{"code": "public Value min(Value num){\n  return new AggregationFunction(num,AggregationType.MINIMUM);\n}\n", "nl": "Return the max of the given value for all matches.", "id": "21819"}
{"code": "private void configureRootLogger(String filename){\n  String file=getLogFile(filename);\n  RollingFileAppender appender=getRollingFileAppender(file);\n  Logger.getRootLogger().addAppender(appender);\n  log.info(\"Added root logger using file: \" + file);\n}\n", "nl": "Configures a root file logger.", "id": "51813"}
{"code": "private void startLoadingData(){\n  Random random=new Random();\n  mHandler.postDelayed(null,1000 + random.nextInt(2000));\n}\n", "nl": "start splash animation", "id": "9213"}
{"code": "public void invalidateWheel(boolean clearCaches){\n  if (clearCaches) {\n    recycle.clearAll();\n    if (itemsLayout != null) {\n      itemsLayout.removeAllViews();\n    }\n    scrollingOffset=0;\n  }\n else   if (itemsLayout != null) {\n    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());\n  }\n  invalidate();\n}\n", "nl": "Invalidates wheel", "id": "11385"}
{"code": "@Override public boolean isEnabled(){\n  if (inlineGML != null) {\n    return inlineGML.isEnabled();\n  }\n  return false;\n}\n", "nl": "Checks if is enabled.", "id": "57403"}
{"code": "public Builder columns(int columns){\n  this.columns=columns;\n  return this;\n}\n", "nl": "Set number of columns to split image. Default value: 8.", "id": "35506"}
{"code": "@Override public void write(int b) throws IOException {\n  write(new byte[]{(byte)b},0,1);\n}\n", "nl": "Write a single byte to the stream.", "id": "21471"}
{"code": "protected void prepareDataSet(){\n  dataSet1=Arrays.asList(new String[]{\"a\",\"b\",\"c\"});\n  dataSet2=Arrays.asList(new String[]{\"d\",\"e\",\"f\"});\n  dataSet3=Arrays.asList(new String[]{\"b\",\"c\",\"a\",\"d\"});\n}\n", "nl": "prepare the dataset required for running test cases", "id": "30874"}
{"code": "synchronized public Remote export(Remote impl) throws ExportException {\n  return export(impl,_config,true);\n}\n", "nl": "Exports the specified remote object and returns a proxy that can be used to invoke remote methods on the exported remote object. This method must only be invoked once on a given <code>Exporter</code> instance. <p>The returned proxy implements an implementation-specific set of remote interfaces of the remote object and may also implement additional implementation-specific interfaces. <p>A remote interface is an interface that extends the interface <code>java.rmi.Remote</code> and whose methods each declare at least one exception whose type is <code>java.rmi.RemoteException</code> or one of its superclasses. <p>If the <code>impl</code> object already exported, returns the same proxy instance representing this <code>impl</code>", "id": "12158"}
{"code": "@Override public final void finalize(){\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"finalize() - Removing the references to the fallbackManager and the dataRecoveryThread\");\n  }\n  dataRecovery.stop();\n  dataRecovery=null;\n  fallbackManager.finalize();\n}\n", "nl": "This method will be called by the client when this last one wants to liberate its resources before it is destroyed. It takes care of stopping the thread in charge of reading back from the fallback file and removing the reference from the thread to this current object, so the garbage collector identifies it as isolated.", "id": "41666"}
{"code": "protected SecureSendSMSNotificationQuery message(String value){\n  return unsafeParam(\"message\",value);\n}\n", "nl": "\"SMS\" text to be sent in \"UTF-8\" encoding. Only Latin letters and numbers are allowed. Maximum size is \"160\" characters.", "id": "58705"}
{"code": "static boolean isSystemWindows(){\n  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;\n}\n", "nl": "Determines if Windows file system is in use.", "id": "35569"}
{"code": "public static float calculateAspectRatio(Rect rect){\n  final float aspectRatio=(float)rect.width() / (float)rect.height();\n  return aspectRatio;\n}\n", "nl": "Calculates the aspect ratio given a rectangle.", "id": "23071"}
{"code": "public void delete(){\n  mBaseName.delete();\n  mBackupName.delete();\n}\n", "nl": "Delete the atomic file.  This deletes both the base and backup files.", "id": "12418"}
{"code": "public static LikesAttributesImpl copy(@Nullable LikesAttributesImpl likesAttributes){\n  if (likesAttributes == null) {\n    return empty();\n  }\n  return new LikesAttributesImpl(likesAttributes);\n}\n", "nl": "Create new LikesAttributes using provided instance.", "id": "52373"}
{"code": "public static SetSpawn handle(World world,BlockPos spawnPoint){\n  SetSpawn event=new SetSpawn(world,spawnPoint);\n  OpenModLoader.getEventBus().post(event);\n  return event;\n}\n", "nl": "Internal method for handling SetSpawn events.", "id": "47632"}
{"code": "public void incrementValue(int v,long increment){\n  incrementValue(Long.valueOf(v),increment);\n}\n", "nl": "Increments the frequency count for v.", "id": "49337"}
{"code": "public boolean isModal(){\n  return modal;\n}\n", "nl": "Gets the modality of this conversation. If a conversation is modal, all messages directed to the player are suppressed for the duration of the conversation.", "id": "13886"}
{"code": "public MarketCreateCommentQuery attachments(String... value){\n  return unsafeParam(\"attachments\",value);\n}\n", "nl": "Comma-separated list of objects attached to a comment. The field is submitted the following way: \"type\"\"owner_id\"_\"media_id\"\" <p> \"\"type\"\" - media attachment type: \"photo\" - photo \"video\" - video \"audio\" - audio \"doc\" - document <p> \"\"owner_id\"\" - media owner id \"\"media_id\"\" - media attachment id <p> For example: photo100172_166443618,photo66748_265827614", "id": "49776"}
{"code": "public void toggleFullscreen(){\n  toggleFullscreenButton.click();\n  verifyFullscreen();\n}\n", "nl": "Method used to toggle dialog in fullscreen mode.", "id": "12571"}
{"code": "public Vector3f mult(float scalar,Vector3f product){\n  if (null == product) {\n    product=new Vector3f();\n  }\n  product.x=x * scalar;\n  product.y=y * scalar;\n  product.z=z * scalar;\n  return product;\n}\n", "nl": "<code>mult</code> multiplies this vector by a scalar. The resultant vector is supplied as the second parameter and returned.", "id": "58543"}
{"code": "public CatchOptions useRazzberry(boolean useRazzBerry){\n  this.useRazzBerry=useRazzBerry;\n  return this;\n}\n", "nl": "Allows using a single razzberry to attempt capture", "id": "20609"}
{"code": "public final void fallback(final IFallback fallbackObj) throws DataFallbackException {\n  try {\n    if (isFallbackFileEmpty())     fFileController.closeFallbackInputStream();\n    fFileController.openFallbackOutputStream();\n    fFileController.writeLine(fallbackObj);\n    fFileController.setNumberOfLines(fFileController.getNumberOfLines() + 1);\n  }\n catch (  DataFallbackException e) {\n    throw new DataFallbackException(e.getMessage());\n  }\n}\n", "nl": "Stores a IFallback object in the fallback file", "id": "44221"}
{"code": "public static void print(int x){\n  out.print(x);\n  out.flush();\n}\n", "nl": "Prints an integer to standard output and flushes standard output.", "id": "23212"}
{"code": "public VideoPutTagQuery taggedName(String value){\n  return unsafeParam(\"tagged_name\",value);\n}\n", "nl": "Tag text.", "id": "50372"}
{"code": "public boolean adjustValue(K key,short amount){\n  int index=index(key);\n  if (index < 0) {\n    return false;\n  }\n else {\n    _values[index]+=amount;\n    return true;\n  }\n}\n", "nl": "Adjusts the primitive value mapped to key.", "id": "44817"}
{"code": "public static void writeLines(File file,Collection<?> lines,String lineEnding,boolean append) throws IOException {\n  writeLines(file,null,lines,lineEnding,append);\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to the specified <code>File</code> line by line. The default VM encoding and the specified line ending will be used.", "id": "5768"}
{"code": "public static boolean isFileNewer(File file,File reference){\n  if (reference == null) {\n    throw new IllegalArgumentException(\"No specified reference file\");\n  }\n  if (!reference.exists()) {\n    throw new IllegalArgumentException(\"The reference file '\" + reference + \"' doesn't exist\");\n  }\n  return isFileNewer(file,reference.lastModified());\n}\n", "nl": "Tests if the specified <code>File</code> is newer than the reference <code>File</code>.", "id": "56440"}
{"code": "@SuppressWarnings(\"unused\") public void addSlide(SlideFragment slideFragment,MessageButtonBehaviour messageButtonBehaviour){\n  adapter.addItem(slideFragment);\n  messageButtonBehaviours.put(adapter.getLastItemPosition(),messageButtonBehaviour);\n}\n", "nl": "Add SlideFragment to IntroScreen", "id": "25944"}
{"code": "public static Map<String,String> tags(Tags tags){\n  return tags.stream().map(null).flatMap(null).map(null).collect(Collectors.toMap(null,null));\n}\n", "nl": "Create a map of tags for wavefront. The tag values are escaped and should be surrounded by double quotes. This function does not put the surrounding quotes around the tag values.", "id": "50226"}
{"code": "public VideoReorderVideosQuery albumId(Integer value){\n  return unsafeParam(\"album_id\",value);\n}\n", "nl": "ID of the video album.", "id": "28855"}
{"code": "public PlacesCheckinQuery services(PlacesCheckinService... value){\n  return unsafeParam(\"services\",value);\n}\n", "nl": "List of services or websites (e.g., \"twitter\", \"facebook\") to which the check-in will be exported, if the user has set up the respective option.", "id": "56471"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stumble_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200746,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] fell down from shock because he used [%SkillName].", "id": "20733"}
{"code": "@NotNull public ImageOverlayBuilder ocrImage(@NotNull OCRResult ocrResult){\n  ocrResult.regions.forEach(null);\n  return this;\n}\n", "nl": "Draws outlines on any OCR text.", "id": "26520"}
{"code": "public boolean parseBoolean(String text) throws DataParseException {\n  if (TRUE.equalsIgnoreCase(text)) {\n    return true;\n  }\n else   if (FALSE.equalsIgnoreCase(text)) {\n    return false;\n  }\n else {\n    throw new DataParseException(\"Input does not represent a boolean value: \" + text);\n  }\n}\n", "nl": "Parse a boolean value from a text string", "id": "16446"}
{"code": "@Override public Dfp ceil(){\n  return trunc(DfpField.RoundingMode.ROUND_CEIL);\n}\n", "nl": "Round to an integer using the round ceil mode. That is, round toward +Infinity", "id": "49327"}
{"code": "private boolean isSuccessCode(String responseCode){\n  return responseCode.equalsIgnoreCase(\"default\") || responseCode.startsWith(\"2\");\n}\n", "nl": "Returns true if the responseCode represents a success code; false otherwise.", "id": "34144"}
{"code": "public void addBodyDecl(BodyDecl node){\n  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the BodyDecl list.", "id": "2357"}
{"code": "public AudioReorderQuery reorder(UserActor actor,int audioId){\n  return new AudioReorderQuery(getClient(),actor,audioId);\n}\n", "nl": "Reorders an audio file, placing it between other specified audio files.", "id": "22897"}
{"code": "public void addSubFilter(SubFilter subFilter){\n  subFilters.add(subFilter);\n}\n", "nl": "Adds a Subfilter to the Main Filter", "id": "39175"}
{"code": "public PlacesAddQuery country(Integer value){\n  return unsafeParam(\"country\",value);\n}\n", "nl": "ID of the location's country. To get country IDs, use the database.getCountries method.", "id": "36971"}
{"code": "public boolean isTrained(){\n  return sTrainingTaskFuture != null;\n}\n", "nl": "If training task future is exists, then classifier was started to train or already trained & classifier is ready to use.", "id": "25175"}
{"code": "public final boolean isAccountOnGameServer(int accountId){\n  return accountsOnGameServer.containsKey(accountId);\n}\n", "nl": "Check if given account is already on This GameServer", "id": "28831"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_JOIN_FAIL_ROOM_FULL(String value0){\n  return new SM_SYSTEM_MESSAGE(1300855,value0);\n}\n", "nl": "You cannot enter the private channel (%0) as it is full.", "id": "57329"}
{"code": "private static void sendPatch(StatefulService service,Object body){\n  Operation patch=Operation.createPatch(service.getUri()).setBody(body).setCompletion(null);\n  service.sendRequest(patch);\n}\n", "nl": "Helper method to send a patch to the specified service", "id": "25583"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_IMMUNED_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201098,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] is immune to [%SkillCaster]'s [%SkillName].", "id": "18855"}
{"code": "@Override public Histogram histogram(){\n  return hist;\n}\n", "nl": "Returns the histogram that approximates the join distribution of the field values of query results.", "id": "37986"}
{"code": "public static final double max(double[] a){\n  double max=Double.NEGATIVE_INFINITY;\n  for (int i=0; i < a.length; ++i) {\n    if (a[i] > max)     max=a[i];\n  }\n  return max;\n}\n", "nl": "Find the maximum value in an array.", "id": "1265"}
{"code": "public MutationBatch prepareMutationBatch(ConsistencyLevel consistency){\n  return _astyanaxKeyspace.prepareMutationBatch().setConsistencyLevel(clamp(consistency));\n}\n", "nl": "Prepare a batch mutation object. It is possible to create multiple batch mutations and later merge them into a single mutation by calling mergeShallow on a batch mutation object.", "id": "42520"}
{"code": "public void clearAll(){\n  if (items != null) {\n    items.clear();\n  }\n  if (emptyItems != null) {\n    emptyItems.clear();\n  }\n}\n", "nl": "Clears all views", "id": "728"}
{"code": "public static double distanceInf(Vector2D p1,Vector2D p2){\n  return p1.distanceInf(p2);\n}\n", "nl": "Compute the distance between two vectors according to the L<sub>&infin;</sub> norm. <p>Calling this method is equivalent to calling: <code>p1.subtract(p2).getNormInf()</code> except that no intermediate vector is built</p>", "id": "57422"}
{"code": "public static MqttMessage copyMqttMessage(final MqttMessage message){\n  final MqttMessage copy=new MqttMessage();\n  copy.setPayload(message.getPayload());\n  copy.setQos(message.getQos());\n  copy.setRetained(message.isRetained());\n  return copy;\n}\n", "nl": "Makes a copy of the MqttMessage object.", "id": "39043"}
{"code": "public static BetweenSpacePredicate between(Comparable<?> low,Comparable<?> high){\n  return new BetweenSpacePredicate(low,high);\n}\n", "nl": "Creates a BETWEEN predicate using the specified expected values.", "id": "10622"}
{"code": "public void stop(String name){\n  getTimer(name).stop(verbose);\n}\n", "nl": "Stops the timer with the given name.", "id": "46308"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CURRENT_EXCLUDES(int num0){\n  return new SM_SYSTEM_MESSAGE(1300634,num0);\n}\n", "nl": "Blocked users: %num0 users", "id": "56799"}
{"code": "public void notifyMoveObservers(){\n  notifyObservers(ObserverType.MOVE);\n}\n", "nl": "notify that creature moved", "id": "33974"}
{"code": "public Future<?> scheduleRestoreTask(CreatureLifeStats<? extends Creature> lifeStats){\n  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new HpMpRestoreTask(lifeStats),1700,DEFAULT_DELAY);\n}\n", "nl": "HP and MP restoring task", "id": "42466"}
{"code": "public static String shortName(Class<? extends Model> model){\n  if (model == null || home == null) {\n    return X.EMPTY;\n  }\n  return home._shortName(model);\n}\n", "nl": "return the shortname of the class, cut the prefix by module package", "id": "22719"}
{"code": "public static String toString(URL url,Charset encoding) throws IOException {\n  InputStream inputStream=url.openStream();\n  try {\n    return toString(inputStream,encoding);\n  }\n  finally {\n    inputStream.close();\n  }\n}\n", "nl": "Gets the contents at the given URL.", "id": "37735"}
{"code": "public Builder lineCap(String lineCap){\n  this.lineCap=lineCap;\n  return this;\n}\n", "nl": "A string that defines <a href= \"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\"> shape </a> to be used at the end of the stroke. </br> default null", "id": "1377"}
{"code": "public void writeLong(long value) throws JMSException {\n  initializeWriting();\n  try {\n    this.dataOut.write(_LONG);\n    this.dataOut.writeLong(value);\n  }\n catch (  IOException ioe) {\n    raise(ioe);\n  }\n}\n", "nl": "Writes a <code>long</code> to the stream message.", "id": "183"}
{"code": "private static boolean isTrusted(Object obj,TrustVerifier.Context ctx) throws RemoteException {\n  Object saved=state.get();\n  try {\n    state.set(obj);\n    return ctx.isTrustedObject(obj);\n  }\n  finally {\n    state.set(saved);\n  }\n}\n", "nl": "Returns result of calling ctx.isTrustedObject(obj) with thread-local state set to obj.", "id": "23290"}
{"code": "public long cookie(){\n  return cookie;\n}\n", "nl": "Returns the identifier associated with information in this <code>Log</code>.", "id": "21076"}
{"code": "public void serviceIDNotify(ServiceID serviceID){\n  if (_logger.isLoggable(Level.INFO)) {\n    _logger.info(\"<\" + m_ContainerName + \"> container registered with \"+ serviceID.toString()+ \" serviceID successfully.\");\n  }\n}\n", "nl": "Call back function that receive as parameter the <code>serviceID</code> of registered service.", "id": "10221"}
{"code": "public Criteria createCriteria(){\n  Criteria criteria=createCriteriaInternal();\n  if (oredCriteria.size() == 0) {\n    oredCriteria.add(criteria);\n  }\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.files", "id": "33635"}
{"code": "public Builder keepInnerClass(boolean val){\n  keepInnerClass=val;\n  return this;\n}\n", "nl": "If this sets to true and the log printed in an inner class, then this inner class name would also printed before method name.", "id": "4059"}
{"code": "@Override public boolean onPassphraseEntered(String passphrase){\n  if (!passphrase.isEmpty() && ProfileSyncService.get().setDecryptionPassphrase(passphrase)) {\n    finish();\n    return true;\n  }\n  return false;\n}\n", "nl": "Callback for PassphraseDialogFragment.Listener", "id": "6516"}
{"code": "@Override public boolean accept(File file){\n  return file.isDirectory();\n}\n", "nl": "Checks to see if the file is a directory.", "id": "3799"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FIELDARTIFACT_CANCELED(String value1,String value0){\n  return new SM_SYSTEM_MESSAGE(1400315,value1,value0);\n}\n", "nl": "The activation of the Artifact %1 of %0 was canceled.", "id": "25437"}
{"code": "@Override protected void reset() throws XNIException {\n  if (fValidationManager != null)   fValidationManager.reset();\n  configurePipeline();\n  super.reset();\n}\n", "nl": "Reset all components before parsing.", "id": "3702"}
{"code": "public static String validateString(String string){\n  if (string == null) {\n    return \"\";\n  }\n else {\n    return string;\n  }\n}\n", "nl": "Checks if the given string is null and if it is, it returns an empty string", "id": "21992"}
{"code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "12547"}
{"code": "private boolean imageOutline(DefaultMutableTreeNode node){\n  boolean isOutline=false;\n  if (node != null) {\n    DefaultMutableTreeNode parentNode=(DefaultMutableTreeNode)node.getParent();\n    if (parentNode != null) {\n      if (parentNode.getUserObject() instanceof RasterSymbolizer) {\n        isOutline=true;\n      }\n    }\n  }\n  return isOutline;\n}\n", "nl": "Check to see if symbolizer is an image outline.", "id": "42374"}
{"code": "public void stop(){\n  mVibrator=null;\n  mContext.getContentResolver().unregisterContentObserver(mContentObserver);\n}\n", "nl": "Call this when you don't need the controller anymore.", "id": "47095"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelBuff_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200507,skilltarget,skillname);\n}\n", "nl": "You dispelled magical buffs from [%SkillTarget] by using [%SkillName].", "id": "13979"}
{"code": "public static String unescapeChar(String parseStr){\nswitch (parseStr) {\ncase \"\\\\001\":\n    return \"\\001\";\ncase \"\\\\t\":\n  return \"\\t\";\ncase \"\\\\r\":\nreturn \"\\r\";\ncase \"\\\\b\":\nreturn \"\\b\";\ncase \"\\\\f\":\nreturn \"\\f\";\ncase \"\\\\n\":\nreturn \"\\n\";\ndefault :\nreturn parseStr;\n}\n}\n", "nl": "From beeline if a delimeter is passed as \\001, in code we get it as escaped string as \\\\001. So this method will unescape the slash again and convert it back t0 \\001", "id": "39001"}
{"code": "public void start(int thread_priority){\n  start(false,thread_priority);\n}\n", "nl": "Start the push processor.", "id": "56911"}
{"code": "public void deactivate(){\n  if (!inSelection) {\n    inSelection=true;\n    try {\n      chartSelection.clearSelectionSeries();\n      this.repaint();\n    }\n  finally {\n      inSelection=false;\n    }\n  }\n}\n", "nl": "call this when tab containing list is deactivated", "id": "56851"}
{"code": "public boolean isDurableSubscriber(){\n  return !StringsUtils.isEmpty(m_durableSubscriptionName);\n}\n", "nl": "Determines if the subscriber is durable", "id": "8597"}
{"code": "public void uploadUpdate(Context context,Account account,OCFile existingFile,Integer behaviour,Boolean forceOverwrite){\n  uploadUpdate(context,account,new OCFile[]{existingFile},behaviour,forceOverwrite);\n}\n", "nl": "Call to update a dingle file already uploaded", "id": "14055"}
{"code": "public Boolean isClientKeyPEM(){\n  return clientKeyPEM;\n}\n", "nl": "Gets the value of the clientKeyPEM property.", "id": "51066"}
{"code": "public Map.Entry<K,V> lowerEntry(K key){\n  return getNear(key,LT);\n}\n", "nl": "Returns a key-value mapping associated with the greatest key strictly less than the given key, or <tt>null</tt> if there is no such key. The returned entry does <em>not</em> support the <tt>Entry.setValue</tt> method.", "id": "38488"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command", "id": "27392"}
{"code": "public void advance(){\n  moveToNextIndex();\n}\n", "nl": "Moves the iterator forward to the next entry in the underlying map.", "id": "39199"}
{"code": "public static String buildSystemName(@Nullable Project project){\n  return getBuildSystem(project).getName();\n}\n", "nl": "The name of the build system associated with the given project, or falls back to the default blaze build system if the project is null or not a blaze project.", "id": "3498"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_PET_CANT_EAT(String value0){\n  return new SM_SYSTEM_MESSAGE(1400702,value0);\n}\n", "nl": "%0 cannot eat any food.", "id": "39405"}
{"code": "public void notifyRequestDialogObservers(Npc npc){\n  notifyObservers(ObserverType.NPCDIALOGREQUEST,npc);\n}\n", "nl": "notify that player requested dialog with npc", "id": "16797"}
{"code": "public static boolean needRecalculate(String returnAdjustmentTypeId){\n  return \"RET_PROMOTION_ADJ\".equals(returnAdjustmentTypeId) || \"RET_DISCOUNT_ADJ\".equals(returnAdjustmentTypeId) || \"RET_SALES_TAX_ADJ\".equals(returnAdjustmentTypeId);\n}\n", "nl": "These return adjustment types need to be recalculated when the return item is updated", "id": "24132"}
{"code": "public static ObjectMapper createObjectMapper(){\n  return new ObjectMapper(new YAMLFactory());\n}\n", "nl": "Creates a configured Jackson object mapper for parsing YAML", "id": "40922"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_LIMIT_SALE_TEST_DESC02(String value0){\n  return new SM_SYSTEM_MESSAGE(1400389,value0);\n}\n", "nl": "%0 is now selling rare items.", "id": "28667"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "13805"}
{"code": "@Override public void updateSymbol(PolygonSymbolizer polygonSymbolizer){\n}\n", "nl": "Update symbol.", "id": "44121"}
{"code": "public void noiseTexture(Framebuffer target){\n  copy(mNoiseTexture,target);\n}\n", "nl": "DEBUG method to check if noise texture is ok", "id": "49354"}
{"code": "public static DalvikThrowAnalysis v(){\n  return G.v().soot_dexpler_DalvikThrowAnalysis();\n}\n", "nl": "Returns the single instance of <code>DalvikThrowAnalysis</code>.", "id": "7981"}
{"code": "public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {\n  writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));\n}\n", "nl": "Writes the <code>toString()</code> value of each item in a collection to an <code>OutputStream</code> line by line, using the specified character encoding and the specified line ending. <p/> Character encoding names can be found at <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>.", "id": "57589"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n  setChild(new List(),1);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "19040"}
{"code": "public void afterStart(){\n}\n", "nl": "Call back after ICEREST start", "id": "32148"}
{"code": "public SimpleStringProperty valueProperty(){\n  return this.value;\n}\n", "nl": "The value property.", "id": "4078"}
{"code": "public MessagesGetHistoryQuery rev(Boolean value){\n  return unsafeParam(\"rev\",value);\n}\n", "nl": "Return messages in chronological order.", "id": "13898"}
{"code": "public static boolean isTinkerEnableWithSharedPreferences(Context context){\n  SharedPreferences sp=context.getSharedPreferences(ShareConstants.TINKER_SHARE_PREFERENCE_CONFIG,Context.MODE_MULTI_PROCESS);\n  return sp.getBoolean(ShareConstants.TINKER_ENABLE_CONFIG,true);\n}\n", "nl": "can't load or receive any patch!", "id": "30154"}
{"code": "public static void logDuration(boolean wereResultsSeen,boolean isChained,long durationMs){\n  if (wereResultsSeen) {\n    RecordHistogram.recordTimesHistogram(\"Search.ContextualSearchDurationSeen\",durationMs,TimeUnit.MILLISECONDS);\n  }\n else   if (isChained) {\n    RecordHistogram.recordTimesHistogram(\"Search.ContextualSearchDurationUnseenChained\",durationMs,TimeUnit.MILLISECONDS);\n  }\n else {\n    RecordHistogram.recordTimesHistogram(\"Search.ContextualSearchDurationUnseen\",durationMs,TimeUnit.MILLISECONDS);\n  }\n}\n", "nl": "Logs the duration of a Contextual Search panel being viewed by the user.", "id": "14995"}
{"code": "@Override public final void write(final byte b){\n  bos.writeByte(b);\n}\n", "nl": "Write a byte to the stream.", "id": "54955"}
{"code": "public PhotosReorderPhotosQuery reorderPhotos(UserActor actor,int photoId){\n  return new PhotosReorderPhotosQuery(getClient(),actor,photoId);\n}\n", "nl": "Reorders the photo in the list of photos of the user album.", "id": "56567"}
{"code": "public void abortAnimation(){\n  mFinished=true;\n}\n", "nl": "Stops the animation.", "id": "16861"}
{"code": "public EntityQuery maxRows(int maxRows){\n  this.maxRows=maxRows;\n  return this;\n}\n", "nl": "Specifies the max number of rows to return, 0 means all rows.", "id": "49477"}
{"code": "public int bitWidth(){\n  return bitWidth;\n}\n", "nl": "Returns the width in bits of the CRC function. The width is also the position of the implicit set bit at the top of the polynomial.", "id": "3278"}
{"code": "public Builder intoSourceFiles(@Nullable Collection<File> sourceFiles){\n  mySourceFiles=sourceFiles;\n  return this;\n}\n", "nl": "Collect all source files into the specified collection.", "id": "19465"}
{"code": "private static IConfigElement categoryElement(String category,String name,String tooltip_key){\n  return new DummyConfigElement.DummyCategoryElement(name,tooltip_key,new ConfigElement(ConfigManager.config.getCategory(category)).getChildElements());\n}\n", "nl": "Creates a button linking to another screen where all options of the category are available", "id": "1135"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200613,skillcaster,skillname);\n}\n", "nl": "You became bound because [%SkillCaster] used [%SkillName] on you.", "id": "8271"}
{"code": "@Override public String toString(){\n  return \"View []\";\n}\n", "nl": "Method toString.", "id": "8828"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200554,skilltarget,skillname);\n}\n", "nl": "You gave [%SkillTarget] the reflection effect by using [%SkillName].", "id": "42128"}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){\n  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. This version of the call is used for Views that need to specify a Scroll Range but scroll back to it's edge correctly.", "id": "19468"}
{"code": "protected List<ZWaveEvent> processCommandClassMessage(byte[] packetData){\n  return processCommandClassMessage(packetData,1);\n}\n", "nl": "Helper class to create everything we need to test a command class message. We pass in the data, and the expected command class. This method creates the class, checks it's the right one, processes the message and gets the response events. It expects at least one response event.", "id": "6095"}
{"code": "private boolean isValid(GSMessageImpl message) throws JMSException {\n  long ttl=message.getJMSExpiration();\n  return (ttl == Message.DEFAULT_TIME_TO_LIVE) || (ttl - SystemTime.timeMillis() >= 0);\n}\n", "nl": "Check the validity of the message.", "id": "15307"}
{"code": "@Override public void unlockPool(){\nsynchronized (fGrammarPool) {\n    fGrammarPool.unlockPool();\n  }\n}\n", "nl": "unlock the grammar pool", "id": "42657"}
{"code": "@Override public void onDraw(Canvas canvas){\n  mLastDrawTimeMs=System.currentTimeMillis();\n  super.onDraw(canvas);\n}\n", "nl": "Keep track of the last time we drew.", "id": "19635"}
{"code": "public synchronized void close() throws IOException {\n  if (journalWriter == null) {\n    return;\n  }\n  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {\n    if (entry.currentEditor != null) {\n      entry.currentEditor.abort();\n    }\n  }\n  trimToSize();\n  journalWriter.close();\n  journalWriter=null;\n}\n", "nl": "Closes this cache. Stored values will remain on the filesystem.", "id": "5802"}
{"code": "public void beforeMemberAdded(MemberAddedEvent memberAddedEvent){\n}\n", "nl": "Called before target member is added", "id": "17884"}
{"code": "public static SM_SYSTEM_MESSAGE STR_COMBINE_NO_COMPONENT_ITEM_MULTIPLE(int num1,String value0){\n  return new SM_SYSTEM_MESSAGE(1330047,num1,value0);\n}\n", "nl": "You cannot craft as you do not have %num1 %0.", "id": "10977"}
{"code": "public E peek(){\n  for (; ; ) {\n    Node<E> node=top.get();\n    if (node == null) {\n      return null;\n    }\n    E e=node.get();\n    if (e == null) {\n      top.compareAndSet(node,node.next);\n    }\n else {\n      return e;\n    }\n  }\n}\n", "nl": "Retrieves, but does not remove, the top of the stack (in other words, the last element pushed), or returns <tt>null</tt> if this stack is empty.", "id": "569"}
{"code": "public RequestHandle post(String url,ResponseHandlerInterface responseHandler){\n  return post(null,url,null,responseHandler);\n}\n", "nl": "Perform a HTTP POST request, without any parameters.", "id": "39990"}
{"code": "public static long deserializeLogSegmentSequenceNumber(byte[] data){\n  String seqNoStr=new String(data,UTF_8);\n  return Long.parseLong(seqNoStr);\n}\n", "nl": "Deserialize log segment sequence number for bytes <code>data</code>.", "id": "38533"}
{"code": "public StorageGetKeysQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "User id, whose variables names are returned if they were requested with a server method.", "id": "13773"}
{"code": "public static <T>CompletionStage<T> withRetries(Supplier<CompletionStage<T>> tFactory,int maxRetries){\n  return tFactory.get().handle(null).thenCompose(null);\n}\n", "nl": "Retry an operation returning a completion stage up to maxRetries times in case the completion stage is failed.", "id": "10779"}
{"code": "public double calcAngle(Entry p1,Entry p2){\n  float dx=p2.getXIndex() - p1.getXIndex();\n  float dy=p2.getVal() - p1.getVal();\n  return Math.atan2(dy,dx) * 180.0 / Math.PI;\n}\n", "nl": "calculates the angle between two Entries (points) in the chart", "id": "49909"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ResurrectBase_ME_TO_B(String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201239,skilltarget,skillname);\n}\n", "nl": "You caused [%SkillTarget] to forcibly resurrect at the bind point by using [%SkillName].", "id": "35919"}
{"code": "public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){\n  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());\n}\n", "nl": "scale image", "id": "41353"}
{"code": "public static void o(int ia[]){\n  o(ia,Parameters.OutputFieldWidth);\n}\n", "nl": "Prints an integer array in default format.", "id": "35565"}
{"code": "public static Quantum seconds(int interval){\n  return new Quantum(TimeUnit.SECONDS,interval);\n}\n", "nl": "Factory method - creates a new quantum given the number of seconds", "id": "28419"}
{"code": "public ConversationFactory withTimeout(int timeoutSeconds){\n  return withConversationCanceller(new InactivityConversationCanceller(plugin,timeoutSeconds));\n}\n", "nl": "Sets the number of inactive seconds to wait before automatically abandoning all generated conversations. <p> The default is 600 seconds (5 minutes).", "id": "50459"}
{"code": "public Builder shadowUrl(String shadowUrl){\n  this.shadowUrl=shadowUrl;\n  return this;\n}\n", "nl": "The URL to the icon shadow image. If not specified, no shadow image will be created.", "id": "55452"}
{"code": "private void onActivePointerUp(){\n  if (STATUS.isSwipingToRefresh(mStatus)) {\n    scrollSwipingToRefreshToDefault();\n  }\n else   if (STATUS.isSwipingToLoadMore(mStatus)) {\n    scrollSwipingToLoadMoreToDefault();\n  }\n else   if (STATUS.isReleaseToRefresh(mStatus)) {\n    mRefreshCallback.onRelease();\n    scrollReleaseToRefreshToRefreshing();\n  }\n else   if (STATUS.isReleaseToLoadMore(mStatus)) {\n    mLoadMoreCallback.onRelease();\n    scrollReleaseToLoadMoreToLoadingMore();\n  }\n}\n", "nl": "on active finger up", "id": "50654"}
{"code": "public static void writeXmlDocument(Node node,OutputStream os,String encoding,boolean omitXmlDeclaration,boolean indent,int indentAmount) throws TransformerException {\n  Transformer transformer=createOutputTransformer(encoding,omitXmlDeclaration,indent,indentAmount);\n  transformDomDocument(transformer,node,os);\n}\n", "nl": "Serializes a DOM <code>Node</code> to an <code>OutputStream</code> using JAXP TrAX.", "id": "15055"}
{"code": "public static char[] toCharArray(InputStream is,Charset encoding) throws IOException {\n  CharArrayWriter output=new CharArrayWriter();\n  copy(is,output,encoding);\n  return output.toCharArray();\n}\n", "nl": "Get the contents of an <code>InputStream</code> as a character array using the specified character encoding. <p> This method buffers the input internally, so there is no need to use a <code>BufferedInputStream</code>.", "id": "55054"}
{"code": "@Override public boolean retainAll(Collection<?> c){\n  return backedSet.retainAll(c);\n}\n", "nl": "Retains only the elements in this applyTransformToDestination that are contained in the specified collection (optional operation).  In other words, removes from this applyTransformToDestination all of its elements that are not contained in the specified collection.  If the specified collection is also a applyTransformToDestination, this operation effectively modifies this applyTransformToDestination so that its value is the <i>intersection</i> of the two sets.", "id": "31574"}
{"code": "@Override public final void startContentModel(String elementName,Augmentations augs) throws XNIException {\n  fDepth=0;\n  initializeContentModelStacks();\n  super.startContentModel(elementName,augs);\n}\n", "nl": "The start of a content model. Depending on the type of the content model, specific methods may be called between the call to the startContentModel method and the call to the endContentModel method.", "id": "15099"}
{"code": "public synchronized void addListener(final TagUpdateListener listener,final Long tagId){\n  listeners.put(tagId,listener);\n}\n", "nl": "Registers the listener for update notifications for the specified Tag. Assumes this object is registered as JMS listener on the correct topic for the given Tag.", "id": "44781"}
{"code": "public VideoSearchQueryWithExtended hd(Integer value){\n  return unsafeParam(\"hd\",value);\n}\n", "nl": "If not null, only searches for high-definition videos.", "id": "17360"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_A_TO_B(String skilltarget,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200989,skilltarget,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] was put in the magical counterattack state because [%SkillCaster] used [%SkillName].", "id": "2799"}
{"code": "public Set<C> columnKeySet(){\n  Set<C> set=new HashSet<>();\n  for (  Map<C,V> row : dataMap.values()) {\n    set.addAll(row.keySet());\n  }\n  return set;\n}\n", "nl": "gets current column keys. Changes to this set do not affect the Table", "id": "32866"}
{"code": "@Override public void printStackTrace(PrintWriter s){\n  if (getCause() != null) {\n    getCause().printStackTrace(s);\n    s.println(\"--------------- linked to ------------------\");\n  }\n  super.printStackTrace(s);\n}\n", "nl": "<p>Print stack trace to specified <code>PrintWriter</code>.</p>", "id": "48808"}
{"code": "public void beginObject() throws IOException {\n  int p=peeked;\n  if (p == PEEKED_NONE) {\n    p=doPeek();\n  }\n  if (p == PEEKED_BEGIN_OBJECT) {\n    push(JsonScope.EMPTY_OBJECT);\n    peeked=PEEKED_NONE;\n  }\n else {\n    throw new IllegalStateException(\"Expected BEGIN_OBJECT but was \" + peek() + locationString());\n  }\n}\n", "nl": "Consumes the next token from the JSON stream and asserts that it is the beginning of a new object.", "id": "37337"}
{"code": "public static boolean endsWithIgnoreCase(String str,String suffix){\n  return str != null && suffix != null && str.regionMatches(true,str.length() - suffix.length(),suffix,0,suffix.length());\n}\n", "nl": "Test if the given String ends with the specified suffix, ignoring upper/lower case.", "id": "43992"}
{"code": "public void unknownEntry(Vector strings){\n  if (strings != null && strings.size() > 0) {\n    String keyword=(String)strings.elementAt(0);\n    catalogManager.debug.message(2,\"Unrecognized token parsing catalog\",keyword);\n  }\n}\n", "nl": "Handle unknown CatalogEntry types. <p/> <p>This method exists to allow subclasses to deal with unknown entry types.</p>", "id": "42176"}
{"code": "public boolean isSub(){\n  return isSub;\n}\n", "nl": "url : %E3%80%90%E5%B9%BB%E4%B9%8B%E5%AD%97%E5%B9%95%E7%BB%84%E3%80%91%5B%E5%B0%91%E5%B9%B4%E5%A5%B3%E5%83%95%20Shounen%20Maid%5D%5B01%5D%5B720P%5D%5BBIG5%5D.mp4 set : 01", "id": "52412"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARTY_CRITICAL(String value0,int num2,String value1){\n  return new SM_SYSTEM_MESSAGE(1220001,value0,num2,value1);\n}\n", "nl": "Critical Hit! %0 inflicted %num2 critical damage on %1.", "id": "5583"}
{"code": "public VideoReorderVideosQuery reorderVideos(UserActor actor,int ownerId,int videoId){\n  return new VideoReorderVideosQuery(getClient(),actor,ownerId,videoId);\n}\n", "nl": "Reorders the video in the video album.", "id": "27514"}
{"code": "public void move(float delta){\n}\n", "nl": "Move the boss - Override Update function", "id": "16971"}
{"code": "public static TargetExpression allFromPackageRecursive(WorkspacePath localPackage){\n  if (localPackage.relativePath().isEmpty()) {\n    return new TargetExpression(\"//...:all\");\n  }\n  return new TargetExpression(\"//\" + localPackage.relativePath() + \"/...:all\");\n}\n", "nl": "All targets in all packages below the given path", "id": "16745"}
{"code": "public static float sqr(float fValue){\n  return fValue * fValue;\n}\n", "nl": "Returns the value squared. fValue ^ 2", "id": "28378"}
{"code": "public static SparseGradient createVariable(final int idx,final double value){\n  return new SparseGradient(value,Collections.singletonMap(idx,1.0));\n}\n", "nl": "Factory method creating an independent variable.", "id": "30832"}
{"code": "public static int delete(long id){\n  Lock.cleanup(id);\n  return Helper.delete(id,User.class);\n}\n", "nl": "Delete the user by ID.", "id": "20357"}
{"code": "public static String toString(String[] stringArray,int startIndex){\n  return toString(stringArray,startIndex,stringArray.length - 1);\n}\n", "nl": "Combine the elements of the given string array into a single string, containing one array element per line.", "id": "49476"}
{"code": "static void renderModel(@NotNull ConstraintModel model){\n  model.getNlModel().requestRender();\n}\n", "nl": "Utility function to render the current model to layoutlib", "id": "57976"}
{"code": "public int toIntBits(){\n  int color=((int)(255 * a) << 24) | ((int)(255 * b) << 16) | ((int)(255 * g) << 8)| ((int)(255 * r));\n  return color;\n}\n", "nl": "Packs the 4 components of this color into a 32-bit int.", "id": "45425"}
{"code": "public Object optionalWait(ExpectedCondition<WebElement> condition){\n  try {\n    return bobcatWait.withTimeout(Timeouts.SMALL).until(condition);\n  }\n catch (  TimeoutException ignored) {\n    return null;\n  }\n}\n", "nl": "Methods examine if condition is met in small timeout (5 seconds), if not nothing happens.", "id": "21709"}
{"code": "public final char yycharat(int pos){\n  return zzBuffer[zzStartRead + pos];\n}\n", "nl": "Returns the character at position <tt>pos</tt> from the  matched text.  It is equivalent to yytext().charAt(pos), but faster", "id": "11184"}
{"code": "public EmailBuilder bcc(String bcc){\n  this.bcc.add(bcc);\n  return this;\n}\n", "nl": "adds a \"Bcc\" (blind carbon copy) recipients to the email that is being built.", "id": "1998"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GUILD_BANISH_HE_IS_NOT_MY_GUILD_MEMBER(String value0){\n  return new SM_SYSTEM_MESSAGE(1300248,value0);\n}\n", "nl": "%0 is not a member of your Legion.", "id": "3486"}
{"code": "public boolean isStatic(){\n  return Modifier.isStatic(this.getModifiers());\n}\n", "nl": "Convenience method returning true if this class is static.", "id": "18687"}
{"code": "public static byte[] toByteArray(Reader input,String encoding) throws IOException {\n  return toByteArray(input,Charsets.toCharset(encoding));\n}\n", "nl": "Get the contents of a <code>Reader</code> as a <code>byte[]</code> using the specified character encoding. <p/> Character encoding names can be found at <a href=\"http://www.iana.org/assignments/character-sets\">IANA</a>. <p/> This method buffers the input internally, so there is no need to use a <code>BufferedReader</code>.", "id": "18867"}
{"code": "public void addImportDecl(ImportDecl node){\n  List<ImportDecl> list=(parent == null || state == null) ? getImportDeclListNoTransform() : getImportDeclList();\n  list.addChild(node);\n}\n", "nl": "Append an element to the ImportDecl list.", "id": "2474"}
{"code": "public ConnectionConsumer createDurableConnectionConsumer(Topic topic,String subscriptionName,String messageSelector,ServerSessionPool sessionPool,int maxMessages) throws JMSException {\n  throw new IllegalStateException(\"Forbidden call on a QueueConnection.\");\n}\n", "nl": "When called on a <code>QueueConnection</code> it throws <code>IllegalStateException</code>.", "id": "29520"}
{"code": "protected BoardEditCommentQuery topicId(int value){\n  return unsafeParam(\"topic_id\",value);\n}\n", "nl": "Topic ID.", "id": "45099"}
{"code": "protected void jimplifySpecial(DexBody body){\n  List<Local> parameters=buildParameters(body,false);\n  invocation=Jimple.v().newSpecialInvokeExpr(parameters.get(0),getSootMethodRef(),parameters.subList(1,parameters.size()));\n  body.setDanglingInstruction(this);\n}\n", "nl": "Executes the \"jimplify\" operation for a special invocation", "id": "38045"}
{"code": "public void comment(String comment){\n  spacing();\n  m_out.print(\"<!-- \");\n  m_out.print(comment);\n  m_out.print(\" -->\");\n  println();\n}\n", "nl": "Print a comment in the XML document. The comment will be printed according to the current spacing and followed by a newline.", "id": "5848"}
{"code": "public final Vertex locateVertexInGraph(UniqueVertexGraph gGraph,Vertex vToFind){\n  return gGraph.locateVertex(vToFind);\n}\n", "nl": "Looks up a vertex in a given graph.", "id": "44989"}
{"code": "public int length(){\n  return this.myArrayList.size();\n}\n", "nl": "Get the number of elements in the JSONArray, included nulls.", "id": "26451"}
{"code": "private void createLeftOver(){\n  int lineLengthBytes=currentLastBytePos + 1;\n  if (lineLengthBytes > 0) {\n    leftOver=new byte[lineLengthBytes];\n    System.arraycopy(data,0,leftOver,0,lineLengthBytes);\n  }\n else {\n    leftOver=null;\n  }\n  currentLastBytePos=-1;\n}\n", "nl": "Creates the buffer containing any left over bytes.", "id": "12060"}
{"code": "public boolean isAliasCI(Local l1,Local l2){\n  PointsToSet pts1=geomPts.reachingObjects(l1);\n  PointsToSet pts2=geomPts.reachingObjects(l2);\n  return pts1.hasNonEmptyIntersection(pts2);\n}\n", "nl": "Are the two pointers an alias with context insensitive points-to information?", "id": "57537"}
{"code": "public Builder proxyPort(int proxyPort){\n  this._proxyPort=proxyPort;\n  return this;\n}\n", "nl": "Port that proxy server to listen on. By default is 7000.", "id": "33148"}
{"code": "protected AudioMoveToAlbumQuery audioIds(int... value){\n  return unsafeParam(\"audio_ids\",value);\n}\n", "nl": "IDs of the audio files to be moved. NOTE: An album can hold up to 1000 audio files.", "id": "32425"}
{"code": "public boolean force_gc(){\n  return soot.PhaseOptions.getBoolean(options,\"force-gc\");\n}\n", "nl": "Force Garbage Collections -- Force garbage collection for measuring memory usage. When this option is set to true, calls to System.gc() will be  made at various points to allow memory usage to be measured.", "id": "1165"}
{"code": "public static SettingsFragment newInstance(String param1,String param2){\n  SettingsFragment fragment=new SettingsFragment();\n  Bundle args=new Bundle();\n  args.putString(ARG_PARAM1,param1);\n  args.putString(ARG_PARAM2,param2);\n  fragment.setArguments(args);\n  return fragment;\n}\n", "nl": "Use this factory method to create a new instance of this fragment using the provided parameters.", "id": "34570"}
{"code": "public boolean isPronounceable(String word){\n  String lowerCaseWord=word.toLowerCase();\n  if (prefixFSM == null || suffixFSM == null) {\n    throw new Error(\"null\");\n  }\n else {\n    return (prefixFSM.accept(lowerCaseWord) && suffixFSM.accept(lowerCaseWord));\n  }\n}\n", "nl": "Returns true if the given word is pronounceable. This method is originally called us_aswd() in Flite 1.1.", "id": "45633"}
{"code": "public boolean exists(String key,boolean ignoreCase){\n  if (ignoreCase)   key=key.toLowerCase();\n  for (  String existKey : this.getKeys(true)) {\n    if (ignoreCase)     existKey=existKey.toLowerCase();\n    if (existKey.equals(key))     return true;\n  }\n  return false;\n}\n", "nl": "Check existence of config section element", "id": "11117"}
{"code": "public boolean enabled(){\n  return soot.PhaseOptions.getBoolean(options,\"enabled\");\n}\n", "nl": "Enabled -- .", "id": "28071"}
{"code": "public boolean hasNoDragOffset(){\n  return mViewPortHandler.hasNoDragOffset();\n}\n", "nl": "Returns true if both drag offsets (x and y) are zero or smaller.", "id": "21176"}
{"code": "public static boolean isExternalStorageWritable(){\n  return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());\n}\n", "nl": "Check if external storage is writable or not", "id": "55219"}
{"code": "void bind(String name,Object value){\n  Preconditions.checkNotNull(value);\n  locals.peek().put(name,value);\n}\n", "nl": "Binds a variable in the innermost scope.", "id": "17858"}
{"code": "public UsersGetNearbyQuery fields(List<UserField> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "List of additional fields to return.", "id": "40403"}
{"code": "protected void drawLabel(Canvas c,float x,float y,String label){\n  c.drawText(label,x,y,mLabelPaint);\n}\n", "nl": "Draws the provided label at the given position.", "id": "58755"}
{"code": "public void or(Criteria criteria){\n  oredCriteria.add(criteria);\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.challenges", "id": "3533"}
{"code": "@Override public synchronized void clear(){\n  File[] files=mRootDirectory.listFiles();\n  if (files != null) {\n    for (    File file : files) {\n      file.delete();\n    }\n  }\n  mEntries.clear();\n  mTotalSize=0;\n  VolleyLog.d(\"Cache cleared.\");\n}\n", "nl": "Clears the cache. Deletes all cached files from disk.", "id": "3174"}
{"code": "public double[] apply(double[] signal){\n  return new BufferedDoubleDataSource(signal,new Processor(a)).getAllData();\n}\n", "nl": "Apply this filter to the given input signal. This method filters the entire signal, and returns the entire filtered signal. For long signals, it is better to use apply(DoubleDataSource).", "id": "43856"}
{"code": "protected PollsAddVoteQuery answerId(int value){\n  return unsafeParam(\"answer_id\",value);\n}\n", "nl": "Answer ID.", "id": "44371"}
{"code": "public String toString(){\n  return cronExpression;\n}\n", "nl": "Returns the string representation of the <CODE>CronExpression</CODE>", "id": "25558"}
{"code": "public void patchLibraries(){\n  patchHandlerImplementation();\n  patchThreadImplementation();\n}\n", "nl": "Patches all supported system libraries", "id": "16435"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_Recall_DUPLICATE_EFFECT(String value0){\n  return new SM_SYSTEM_MESSAGE(1400102,value0);\n}\n", "nl": "You cannot summon %0 as you are already under the same effect.", "id": "5572"}
{"code": "public static void w(String tag,String msg,Exception e){\n  if (LOG_ENABLE) {\n    Log.w(tag,buildMsg(msg),e);\n  }\n}\n", "nl": "warning log", "id": "45503"}
{"code": "public void addLine(final String line){\n  if (textArea != null) {\n    textArea.append(line);\n    trimExcessLines();\n    textArea.setCaretPosition(textArea.getDocument().getLength());\n  }\n}\n", "nl": "Adds the line to the text area.", "id": "50682"}
{"code": "public void close() throws IOException {\n  super.close();\n}\n", "nl": "Closes this input stream and releases any system resources associated with the stream.", "id": "39478"}
{"code": "@Override public Filter createLogicFilter(List<Filter> filterList){\n  return null;\n}\n", "nl": "Creates the logic filter.", "id": "37193"}
{"code": "private void invalidSurrogate(int uuuuu) throws MalformedByteSequenceException {\n  throw new MalformedByteSequenceException(fFormatter,fLocale,XMLMessageFormatter.XML_DOMAIN,\"InvalidHighSurrogate\",new Object[]{Integer.toHexString(uuuuu)});\n}\n", "nl": "Throws an exception for invalid surrogate bits.", "id": "52221"}
{"code": "@Override public void populateExpression(Object objValue){\n}\n", "nl": "Populate expression.", "id": "10096"}
{"code": "public static ContainerDescription buildCoreAgentContainerDescription(){\n  ContainerDescription cd=new ContainerDescription();\n  cd.documentSelfLink=AGENT_CONTAINER_DESCRIPTION_LINK;\n  cd.name=AGENT_CONTAINER_NAME;\n  cd.image=getAgentImageNameAndVersion();\n  cd.publishAll=true;\n  cd.volumes=AGENT_CONTAINER_VOLUMES;\n  cd.restartPolicy=\"always\";\n  return cd;\n}\n", "nl": "Create a container description to be used for installing host agents containers.", "id": "26178"}
{"code": "public static boolean mousePressed(){\nsynchronized (mouseLock) {\n    return mousePressed;\n  }\n}\n", "nl": "Returns true if the mouse is being pressed.", "id": "4361"}
{"code": "public static void open(File file) throws IOException {\n  Desktop.getDesktop().open(file);\n}\n", "nl": "Performs Desktop.getDesktop().open(File).", "id": "41656"}
{"code": "@Override public final int readUnsignedByte() throws IOException {\n  return dis.readUnsignedByte();\n}\n", "nl": "Read an unsigned byte. Note: returns an int, even though says Byte (non-Javadoc)", "id": "4753"}
{"code": "@Override public void fileModified(Path f){\n}\n", "nl": "File modified.", "id": "57047"}
{"code": "public static final SM_SYSTEM_MESSAGE STR_ITEM_CANCELED(DescriptionId id){\n  return new SM_SYSTEM_MESSAGE(1300427,id);\n}\n", "nl": "You have cancelled using the item.", "id": "19917"}
{"code": "@Override public Throwable fillInStackTrace(){\n  return null;\n}\n", "nl": "Override the method to avoid expensive stack build and synchronization, since no one uses it anyway.", "id": "5105"}
{"code": "public static String dbNameToClassName(String columnName){\n  return upperFirstChar(dbNameToVarName(columnName));\n}\n", "nl": "Converts a database name to a Java class name. The naming conventions used to allow for this are as follows: a database name (table or column) is in all capital letters, and the words are separated by an underscore (for example: NEAT_ENTITY_NAME or RANDOM_FIELD_NAME); a Java name (ejb or field) is in all lower case letters, except the letter at the beginning of each word (for example: NeatEntityName or RandomFieldName). The convention of using a capital letter at the beginning of a class name in Java, or a lower-case letter for the beginning of a variable name in Java is also used along with the Java name convention above.", "id": "48246"}
{"code": "public synchronized void animateZoom(final Point2D p,double scale,long duration){\n  Point2D pp=new Point2D.Double();\n  m_itransform.transform(p,pp);\n  animateZoomAbs(pp,scale,duration);\n}\n", "nl": "Animate a zoom centered on a given location in screen (pixel)  co-ordinates by the given scale using the provided duration.", "id": "6609"}
{"code": "public void start(){\n  eventLogThread.start();\n  LOGGER.info(\"Started \" + eventLogThread.getName() + \" with ID \"+ eventLogThread.getId()+ \".\");\n}\n", "nl": "Starts the event log thread.", "id": "22644"}
{"code": "public static void isNotNull(Object object,String message){\n  if (object == null)   throw new AssertionFailedException(\"null argument:\" + message);\n}\n", "nl": "Asserts that the given object is not <code>null</code>. If this is not the case, some kind of unchecked exception is thrown. The given message is included in that exception, to aid debugging.", "id": "20262"}
{"code": "public static void actions(Context context,Api api,Api.ApiOptions.HasOptions options,Action1<GoogleApiClient> onClientConnected,Action1<Throwable> onError){\n  GoogleApiClientActions.create(context.getApplicationContext(),new ApiWithOptions(api,options),onClientConnected,onError);\n}\n", "nl": "Serve a GoogleApiClient with callback actions", "id": "35913"}
{"code": "public boolean checkPacket(int packetHeader){\n  return checkPacket(new byte[]{(byte)((packetHeader >> 24) & 0xFF),(byte)((packetHeader >> 16) & 0xFF)});\n}\n", "nl": "Check the header for validity.", "id": "40099"}
{"code": "public Matrix3f invert(){\n  return invert(null);\n}\n", "nl": "Inverts this matrix as a new Matrix3f.", "id": "35602"}
{"code": "public void putDelegate(Object key,X509TrustManager newDelegate){\n  delegates.put(key,newDelegate);\n}\n", "nl": "Add a delegate identified by the given unique key (can be used to remove it later)", "id": "45920"}
{"code": "public static RoutingService.Builder buildRoutingService(SocketAddress address){\n  return SingleHostRoutingService.newBuilder().address(address);\n}\n", "nl": "Building routing service from <code>address</code>.", "id": "53732"}
{"code": "@Override public TDistribution makeDistribution(){\n  return new TDistribution(5.0);\n}\n", "nl": "Creates the default continuous distribution instance to use in tests.", "id": "33711"}
{"code": "public FieldVector3D<T> subtract(final FieldVector3D<T> v){\n  return new FieldVector3D<T>(x.subtract(v.x),y.subtract(v.y),z.subtract(v.z));\n}\n", "nl": "Subtract a vector from the instance.", "id": "55763"}
{"code": "public int findLastCompletelyVisibleItemPosition(){\n  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,true,false);\n  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);\n}\n", "nl": "Returns the adapter position of the last fully visible view. This position does not include adapter changes that were dispatched after the last layout pass.", "id": "53436"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_PAINT_REMOVE_SUCCEED(int objectNameId){\n  return new SM_SYSTEM_MESSAGE(1401435,calculateNameId(objectNameId));\n}\n", "nl": "You have removed the paint from %0.", "id": "18851"}
{"code": "public static void install(Context context,String filename){\n  install(context,BIN_DIR_NAME,filename);\n}\n", "nl": "Install specified binary into /data/data/pakage-name/app-bin directory.", "id": "46298"}
{"code": "private static String escapeTagValue(String tag_value){\n  return tag_value.replace(\"\\\"\",\"\\\\\\\"\");\n}\n", "nl": "Does the escaping of tag values. This function assumes you'll put double quotes ('\"') around your tag value.", "id": "9397"}
{"code": "private void openAppSettings(){\n  Intent intent=new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,Uri.fromParts(\"package\",getPackageName(),null));\n  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n  startActivity(intent);\n}\n", "nl": "Open app settings screen", "id": "38802"}
{"code": "public void values(ArrayList list){\n  Object[] val=values;\n  byte[] stat=state;\n  for (int i=stat.length; i-- > 0; ) {\n    if (stat[i] == FULL)     list.add(val[i]);\n  }\n}\n", "nl": "Fills all values contained in the receiver into the specified list. Fills the list, starting at index 0. After this call returns the specified list has a new size that equals <tt>this.size()</tt>. <p> This method can be used to iterate over the values of the receiver.", "id": "10670"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1201020,skilltarget,num0,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] blocked %num0 damage because [%SkillCaster] used [%SkillName].", "id": "13682"}
{"code": "private static void skipSection(ParseContext parseContext){\n  while (!parseContext.atEnd() && parseContext.current().indent != 0) {\n    parseContext.consume();\n  }\n}\n", "nl": "Skips all lines until the next unindented, non-empty line.", "id": "11444"}
{"code": "@Override public void onUIRefreshComplete(PtrFrameLayout frame){\n  mDrawable.stop();\n}\n", "nl": "perform UI after refresh", "id": "25987"}
{"code": "@Override protected synchronized void beforeWrite(int n){\n  count+=n;\n}\n", "nl": "Updates the count with the number of bytes that are being written.", "id": "38826"}
{"code": "void addField(AllocDotField adf,SparkField field){\n  if (fields == null)   fields=new HashMap<SparkField,AllocDotField>();\n  fields.put(field,adf);\n}\n", "nl": "Registers a AllocDotField as having this node as its base.", "id": "23214"}
{"code": "public static long toLong(Object obj){\n  try {\n    return Long.parseLong(obj.toString());\n  }\n catch (  Exception e) {\n    return -1L;\n  }\n}\n", "nl": "To long long.", "id": "19558"}
{"code": "public double tTest(final double mu,final double[] sample) throws MathIllegalArgumentException, NullArgumentException, MathIllegalStateException {\n  checkSampleData(sample);\n  return tTest(StatUtils.mean(sample),mu,StatUtils.variance(sample),sample.length);\n}\n", "nl": "Returns the <i>observed significance level</i>, or <i>p-value</i>, associated with a one-sample, two-tailed t-test comparing the mean of the input array with the constant <code>mu</code>. <p> The number returned is the smallest significance level at which one can reject the null hypothesis that the mean equals <code>mu</code> in favor of the two-sided alternative that the mean is different from <code>mu</code>. For a one-sided test, divide the returned value by 2.</p> <p> <strong>Usage Note:</strong><br> The validity of the test depends on the assumptions of the parametric t-test procedure, as discussed <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a> </p><p> <strong>Preconditions</strong>: <ul> <li>The observed array length must be at least 2. </li></ul></p>", "id": "51175"}
{"code": "public QueryTemplatePacket and(QueryTemplatePacket template){\n  QueryTemplatePacket result=new QueryTemplatePacket(this);\n  result.intersectRanges(template);\n  result.intersectUids(template);\n  result.uniteContainsItems(template);\n  return result;\n}\n", "nl": "Merge given templates into one template.", "id": "15657"}
{"code": "public boolean hasNext(){\n  return !isClosed && nextLine != null;\n}\n", "nl": "has next fastA record?", "id": "36271"}
{"code": "@Override public void accept(TestValueVisitor visitor,FieldIdEnum fieldId){\n  Expression expression=ff.property(this.expression);\n  visitor.setTestValue(fieldId,expression);\n}\n", "nl": "Method to part of the visitor pattern.", "id": "50722"}
{"code": "public static void requestFileAccessPermission(WindowAndroid windowAndroid,PermissionCallback callback){\n  assert windowAndroid != null;\n  windowAndroid.requestPermissions(new String[]{android.Manifest.permission.WRITE_EXTERNAL_STORAGE},callback);\n}\n", "nl": "Called to prompt user with the file access permission.", "id": "11995"}
{"code": "private void selectRow(int row){\n  spreadsheetView.getSelectionModel().select(row,spreadsheetView.getColumns().get(0));\n}\n", "nl": "select the given row", "id": "48670"}
{"code": "public void flushAll(){\n  bufferPool.flushAll();\n}\n", "nl": "Flushes all dirty buffers.", "id": "3111"}
{"code": "public void resetShipAfterDateIfBefore(Timestamp newShipAfterDate){\n  if (newShipAfterDate != null) {\n    if ((this.shipAfterDate == null) || (!this.shipAfterDate.after(newShipAfterDate))) {\n      this.shipAfterDate=newShipAfterDate;\n    }\n  }\n}\n", "nl": "Reset the ship group's shipAfterDate if it is before the parameter", "id": "1252"}
{"code": "@Override public String whoAmI(){\n  return (\"step \" + Double.toString(100.0 * stepVal) + \"%\");\n}\n", "nl": "String definition of the function.", "id": "32038"}
{"code": "public AccountChangePasswordQuery changePasswordHash(String value){\n  return unsafeParam(\"change_password_hash\",value);\n}\n", "nl": "Hash received after a successful OAuth authorization with a code got by SMS. (If the password is changed right after the access was restored)", "id": "255"}
{"code": "public static boolean hasFCMToken(Context context){\n  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext());\n  return pref.getBoolean(SENT_TOKEN_TO_SERVER,false);\n}\n", "nl": "Check if there is any token not null", "id": "6090"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_NATION_PT(int num0){\n  return new SM_SYSTEM_MESSAGE(1300587,num0);\n}\n", "nl": "You can only receive this quest when your National Contribute Point is %num0 or more.", "id": "45377"}
{"code": "private Stream<String> generateDimensionColumnHeaders(Map.Entry<Dimension,LinkedHashSet<DimensionField>> entry){\n  if (entry.getValue().isEmpty()) {\n    return Stream.of(entry.getKey().getApiName());\n  }\n else {\n    return entry.getValue().stream().map(null);\n  }\n}\n", "nl": "Build the headers for the dimension columns.", "id": "26498"}
{"code": "public FloatBuffer toFloatBuffer(boolean columnMajor){\n  FloatBuffer fb=BufferUtils.createFloatBuffer(16);\n  fillFloatBuffer(fb,columnMajor);\n  fb.rewind();\n  return fb;\n}\n", "nl": "<code>toFloatBuffer</code> returns a FloatBuffer object that contains the matrix data.", "id": "39131"}
{"code": "void recordLongTimesHistogram100(String name,long duration){\n  RecordHistogram.recordCustomTimesHistogram(name,TimeUnit.MILLISECONDS.toMillis(duration),TimeUnit.MILLISECONDS.toMillis(1),TimeUnit.HOURS.toMillis(1),TimeUnit.MILLISECONDS,100);\n}\n", "nl": "Records a sample in a histogram of times. This is the Java equivalent of the UMA_HISTOGRAM_LONG_TIMES_100.", "id": "33963"}
{"code": "public void computeFromPoints(FloatBuffer points){\n  calcWelzl(points);\n}\n", "nl": "<code>computeFromPoints</code> creates a new Bounding Sphere from a given set of points. It uses the <code>calcWelzl</code> method as default.", "id": "4073"}
{"code": "@SubscribeEvent public void onRender(RenderTickEvent event){\n  if (event.phase == Phase.START) {\n    resizeIfNeeded();\n  }\n}\n", "nl": "Called before and after the rendering of the world.", "id": "1514"}
{"code": "public LeadsCompleteQuery comment(String value){\n  return unsafeParam(\"comment\",value);\n}\n", "nl": "Comment text.", "id": "32486"}
{"code": "@Deprecated public static boolean isThrowPartialFailure(int mod){\n  return !Modifiers.contains(mod,IGNORE_PARTIAL_FAILURE);\n}\n", "nl": "Checks if the THROW_PARTIAL_FAILURE bit was set for this modifier.", "id": "43658"}
{"code": "public boolean isDistinct(){\n  return distinct;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.banned_ips", "id": "22047"}
{"code": "private void displayFunction(String selectedValue){\n  boolean builtInFunctionFound=displayBuiltInProcessFunction(selectedValue);\n  if (!builtInFunctionFound) {\n    displayCustomProcessFunction(selectedValue);\n  }\n  functionParameterTableModel.fireTableDataChanged();\n}\n", "nl": "Display function.", "id": "39150"}
{"code": "@Override public int read() throws IOException {\n  int c=in.read();\n  if (c == -1)   return -1;\n  if ((c & ~0xff) != 0) {\n    System.out.println(\"MD5InputStream.read() got character with (c & ~0xff) != 0)!\");\n  }\n else {\n    md5.Update(c);\n  }\n  return c;\n}\n", "nl": "Read a byte of data.", "id": "37967"}
{"code": "public Boolean isRepeat(){\n  return repeat;\n}\n", "nl": "Gets the value of the repeat property.", "id": "23258"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Rebirth_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200859,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] is in the reserved resurrection state as it used [%SkillName].", "id": "47576"}
{"code": "@Override protected void synchronizeData(){\n  needsSyncData(false);\n  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument;\n  name=ownerDocument.getNodeName(fNodeIndex);\n}\n", "nl": "Synchronizes the data (name and value) for fast nodes.", "id": "23043"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set fontSize=decrease;\");\n}\n", "nl": "action to be performed", "id": "44009"}
{"code": "public void showOnAnchor(@NonNull View anchor,@VerticalPosition int vertPos,@HorizontalPosition int horizPos){\n  showOnAnchor(anchor,vertPos,horizPos,0,0);\n}\n", "nl": "Show at relative position to anchor View.", "id": "36338"}
{"code": "public final boolean isFinished(){\n  return mScrollerX.mFinished && mScrollerY.mFinished;\n}\n", "nl": "Returns whether the scroller has finished scrolling.", "id": "38284"}
{"code": "public void updateVisiblityValue(int referenceIndex){\n  mCachedVisibleArea=mLayoutTab.computeVisibleArea();\n  mCachedIndexDistance=Math.abs(mIndex - referenceIndex);\n  mOrderSortingValue=computeOrderSortingValue(mCachedIndexDistance,mCacheStackVisibility);\n  mVisiblitySortingValue=computeVisibilitySortingValue(mCachedVisibleArea,mOrderSortingValue,mCacheStackVisibility);\n}\n", "nl": "Updates the cached visible area value to be used to sort tabs by visibility.", "id": "14637"}
{"code": "public static boolean supportsLogSegmentSequenceNo(int version){\n  return version >= LogSegmentMetadataVersion.VERSION_V2_LEDGER_SEQNO.value;\n}\n", "nl": "Whether the provided version supports log segment sequence number.", "id": "45820"}
{"code": "public boolean isConfigured(){\n  List<BOMNode> notConfiguredParts=FastList.newInstance();\n  root.isConfigured(notConfiguredParts);\n  return (notConfiguredParts.size() == 0);\n}\n", "nl": "It tells if the current (in-memory) tree representing a product's bill of materials is completely configured or not.", "id": "13402"}
{"code": "public void load() throws IOException {\n  if (myFilename == null) {\n    throw new IOException(\"No filename specified for PreferenceStore.\");\n  }\n  FileInputStream in=new FileInputStream(myFilename);\n  try {\n    myProperties.load(in);\n    myChanged=false;\n  }\n  finally {\n    in.close();\n  }\n}\n", "nl": "Load from the consturctor's registered filename, erasing the current store.", "id": "31119"}
{"code": "private String generateReportTableHtml(ReportTable reportTable,User user){\n  StringWriter stringWriter=new StringWriter();\n  GridUtils.toHtmlInlineCss(reportTableService.getReportTableGridByUser(reportTable.getUid(),new Date(),user.getOrganisationUnit().getUid(),user),stringWriter);\n  return stringWriter.toString().replaceAll(\"\\\\R\",\"\");\n}\n", "nl": "Builds a HTML table representing the ReportTable input", "id": "537"}
{"code": "@Override protected boolean requireRecentSdk(){\n  return true;\n}\n", "nl": "Is the bundled (incomplete) SDK install adequate or do we need to find a valid install?", "id": "29626"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Deform_A_TO_SELF(String skillcaster,String value0,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200807,skillcaster,value0,skillname);\n}\n", "nl": "[%SkillCaster] has transformed into %0 by using [%SkillName].", "id": "43314"}
{"code": "public static boolean isNimbusLookAndFeel(){\n  return UIUtils.isNimbusLookAndFeel();\n}\n", "nl": "Determines if current L&F is Nimbus", "id": "52339"}
{"code": "public long start(){\n  t=System.currentTimeMillis();\n  return t;\n}\n", "nl": "Count onStart.", "id": "17952"}
{"code": "@TargetApi(8) public Bundler putCharSequenceArray(String key,CharSequence[] value){\n  bundle.putCharSequenceArray(key,value);\n  return this;\n}\n", "nl": "Inserts a CharSequence array value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.", "id": "43888"}
{"code": "public static boolean hasJellyBean(){\n  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;\n}\n", "nl": ">= 4.1 16", "id": "56419"}
{"code": "public boolean providesIntegrity(URL url){\n  if (!\"file\".equals(url.getProtocol())) {\n    return false;\n  }\n  String host=url.getHost();\n  return (host == null || host.equals(\"\") || host.equals(\"~\") || host.equals(\"localhost\"));\n}\n", "nl": "Returns <code>true</code> if the specified URL uses the \"file\" protocol and the host is <code>null</code>, empty, \"~\", or \"localhost\"; returns <code>false</code> otherwise.", "id": "43018"}
{"code": "public boolean declaresFieldByName(String name){\n  checkLevel(SIGNATURES);\n  for (  SootField field : fields) {\n    if (field.getName().equals(name))     return true;\n  }\n  return false;\n}\n", "nl": "Does this class declare a field with the given name?", "id": "14711"}
{"code": "public void encoding(){\n  outputRes();\n  rdp_encoding();\n}\n", "nl": "rdp encoding main function.  there is a simple testcase in setData func", "id": "37918"}
{"code": "public boolean isMinIsZero(){\n  return minIsZero;\n}\n", "nl": "Checks if is min is zero.", "id": "26463"}
{"code": "public PagesGetTitlesQuery groupId(Integer value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "ID of the community that owns the wiki page.", "id": "5243"}
{"code": "public Collection<Var> migrate(){\n  Collection<Var> collection=new HashSet<>();\n  for (  Collection<Var> vars : this) {\n    collection.addAll(vars);\n  }\n  return collection;\n}\n", "nl": "Migrate a CSV schema into a Mindmaps ontology", "id": "11448"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FORCE_ITEM_DICE(String value0,int num1){\n  return new SM_SYSTEM_MESSAGE(1301026,value0,num1);\n}\n", "nl": "%0 rolled the dice and got a %num1.", "id": "34997"}
{"code": "public Builder clockTicker(Ticker ticker){\n  this._ticker=ticker;\n  return this;\n}\n", "nl": "Ticker for timing.", "id": "1021"}
{"code": "public static void d(String tag,String msg){\n  if (sLevel > LEVEL_DEBUG) {\n    return;\n  }\n  Log.d(tag,msg);\n}\n", "nl": "Send a DEBUG log message", "id": "58630"}
{"code": "public boolean save(File file,boolean async){\n  this.file=file;\n  return save(async);\n}\n", "nl": "Save configuration into provided file. Internal file object will be set to new file.", "id": "16129"}
{"code": "public void init$Children(){\n  children=new ASTNode[4];\n  setChild(new Opt(),1);\n  setChild(new List(),2);\n  setChild(new List(),3);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "44684"}
{"code": "public static float saturate(float input){\n  return clamp(input,0f,1f);\n}\n", "nl": "Clamps the given float to be between 0 and 1.", "id": "30200"}
{"code": "public String makeStringValueSQ(String value){\n  value=StringUtils.replace(value,\"\\\\\",\"\\\\\\\\\");\n  value=StringUtils.replace(value,\"${\",\"$\\\\{\");\n  value=StringUtils.replace(value,\"'\",\"\\\\'\");\n  return value;\n}\n", "nl": "SCIPIO: Makes an escaped Freemarker string value without enclosing single-quotes, as intended for a regular (non-raw) string. <p> Intended to prevent all execution/interpretation/interpolation within the string value if it is enclosed within string literal. Must be non-null. <p> NOTE: Non-optimized (not optimizable).", "id": "6885"}
{"code": "public static Style lightBlue(){\n  final Style style=new Style();\n  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_LIGHT_BLUE);\n  return style;\n}\n", "nl": "Default material light blue transparent style for SuperToasts.", "id": "51730"}
{"code": "protected void incrementDictionaryAccessCount(DictionaryInfo dictionaryInfo){\n  dictionaryInfo.incrementAccessCount();\n}\n", "nl": "This method will increment the access count for a given dictionary column", "id": "4263"}
{"code": "@Override public int read(byte bytes[],int offset,int length) throws IOException {\n  int r;\n  if ((r=in.read(bytes,offset,length)) == -1)   return r;\n  md5.Update(bytes,offset,r);\n  return r;\n}\n", "nl": "Reads into an array of bytes.", "id": "44485"}
{"code": "public String providePath(){\n  return \"/blockcanary/\";\n}\n", "nl": "Path to save log, like \"/blockcanary/\", will save to sdcard if can.", "id": "47375"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_DELETE_ITEM_CHANGE_TO_PUBLIC(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1400955,value0,value1);\n}\n", "nl": "The power binding the soul of %0 has weakened, and %1 has vanished.", "id": "42491"}
{"code": "public void insertComponent(String componentName){\n  openInsertDialog().insertComponent(componentName);\n}\n", "nl": "Opens insert dialog and inserts component with given name.", "id": "14422"}
{"code": "public RequestHandle delete(String url,ResponseHandlerInterface responseHandler){\n  return delete(null,url,responseHandler);\n}\n", "nl": "Perform a HTTP DELETE request.", "id": "32762"}
{"code": "public LeastSquaresBuilder weight(final RealMatrix newWeight){\n  this.weight=newWeight;\n  return this;\n}\n", "nl": "Configure the weight matrix.", "id": "3329"}
{"code": "@Override public void startParameterEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augmentations) throws XNIException {\n}\n", "nl": "This method notifies of the start of a parameter entity. The parameter entity name start with a '%' character.", "id": "50517"}
{"code": "private void explain(String systemId){\n  if (!suppressExplanation) {\n    System.out.println(\"XMLReader probably encountered bad URI in \" + systemId);\n    System.out.println(\"For example, replace '/some/uri' with 'file:/some/uri'.\");\n  }\n  suppressExplanation=true;\n}\n", "nl": "Provide one possible explanation for an InternalError.", "id": "11859"}
{"code": "public int available(){\n  return bufferPool.available();\n}\n", "nl": "Returns the number of available (ie unpinned) buffers.", "id": "50862"}
{"code": "public final boolean equals(Object obj){\n  if (obj instanceof Uuid) {\n    Uuid other=(Uuid)obj;\n    return bits0 == other.bits0 && bits1 == other.bits1;\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Compares the specified object with this <code>Uuid</code> for equality. This method returns <code>true</code> if and only if the specified object is a <code>Uuid</code> instance with the same 128-bit value as this one.", "id": "37197"}
{"code": "public TypeRef makeRepeated(){\n  return interner.intern(new TypeRef(kind,Cardinality.REPEATED,messageType,enumType));\n}\n", "nl": "Makes the given type to have cardinality repeated.", "id": "2535"}
{"code": "public static String quote(String string){\n  StringWriter sw=new StringWriter();\nsynchronized (sw.getBuffer()) {\n    try {\n      return quote(string,sw).toString();\n    }\n catch (    IOException ignored) {\n      return \"\";\n    }\n  }\n}\n", "nl": "Produce a string in double quotes with backslash sequences in all the right places. A backslash will be inserted within </, producing <\\/, allowing JSON text to be delivered in HTML. In JSON text, a string cannot contain a control character or an unescaped quote or backslash.", "id": "39079"}
{"code": "public boolean disableCharacteristicNotify(BluetoothGattCharacteristic characteristic){\n  if (characteristic != null && (characteristic.getProperties() | BluetoothGattCharacteristic.PROPERTY_NOTIFY) > 0) {\n    BleLog.w(TAG,\"characteristic.getProperties():\" + characteristic.getProperties());\n    return setCharacteristicNotification(getBluetoothGatt(),characteristic,false);\n  }\n else {\n    return false;\n  }\n}\n", "nl": "stop notify", "id": "40722"}
{"code": "public static boolean isBeginnerSkill(int skillId){\n  return isBeginnerJob(skillId / 10000) && (skillId % 10000 == 1000 || skillId % 10000 == 1001 || skillId % 10000 == 1002 || skillId % 10000 == 2);\n}\n", "nl": "Checks if the given skill is a beginner skill.", "id": "35724"}
{"code": "public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){\n  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());\n}\n", "nl": "scale image", "id": "4462"}
{"code": "private static void raise(Object value,Class type) throws MessageFormatException {\n  throw new MessageFormatException(\"Cannot convert values of type \" + value.getClass().getName() + \" to \"+ type.getName());\n}\n", "nl": "Helper to raise a MessageFormatException when a conversion cannot be performed", "id": "4838"}
{"code": "public short remove(K key){\n  short prev=(short)0;\n  int index=index(key);\n  if (index >= 0) {\n    prev=_values[index];\n    removeAt(index);\n  }\n  return prev;\n}\n", "nl": "Deletes a key/value pair from the map.", "id": "14951"}
{"code": "public boolean add(E item){\n  addLast(item);\n  return true;\n}\n", "nl": "Adds the given object to this HashChain.", "id": "13815"}
{"code": "public WallGetCommentsQueryWithExtended ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "User ID or community ID. Use a negative value to designate a community ID.", "id": "12169"}
{"code": "@Override public void endDocument(Augmentations augs) throws XNIException {\n}\n", "nl": "The end of the document.", "id": "32499"}
{"code": "public static File createParentDirIfNotExists(String filePath){\n  File file=new File(filePath);\n  file.getParentFile().mkdirs();\n  return file;\n}\n", "nl": "Create a directory if needed", "id": "45136"}
{"code": "public static Map<String,Object> findOrdersFull(DispatchContext dctx,Map<String,? extends Object> context){\n  return findOrders(dctx,context,true);\n}\n", "nl": "SCIPIO: findOrders without view size limitations.", "id": "41663"}
{"code": "@Override public void undoAction(UndoInterface undoRedoObject){\n  if ((spinner != null) && (undoRedoObject != null)) {\n    if (undoRedoObject.getOldValue() instanceof Double) {\n      Double oldValue=(Double)undoRedoObject.getOldValue();\n      internalSetValue(oldValue);\n    }\n  }\n}\n", "nl": "Undo action.", "id": "5215"}
{"code": "public String globalInfo(){\n  return \"InfoGainAttributeEval :\\n\\nEvaluates the worth of an attribute \" + \"by measuring the information gain with respect to the class.\\n\\n\" + \"InfoGain(Class,Attribute) = H(Class) - H(Class | Attribute).\\n\";\n}\n", "nl": "Returns a string describing this attribute evaluator", "id": "11417"}
{"code": "public BoardGetTopicsQuery order(BoardGetTopicsOrder value){\n  return unsafeParam(\"order\",value);\n}\n", "nl": "Sort order If no sort order is specified, topics are returned in the order specified by the group administrator. Pinned topics are returned first, regardless of the sorting.", "id": "29422"}
{"code": "void addPaths(ViterbiPoint point,ViterbiPath path){\n  ViterbiPath nextPath;\n  for (ViterbiPath p=path; p != null; p=nextPath) {\n    nextPath=p.next;\n    addPath(point,p);\n  }\n}\n", "nl": "Try to add paths to the given point.", "id": "19838"}
{"code": "public boolean removeItemContent(String uid){\n  if (!users.isEmpty()) {\n    return removeContent(uid,users);\n  }\n else   if (!reports.isEmpty()) {\n    return removeContent(uid,reports);\n  }\n else {\n    return removeContent(uid,resources);\n  }\n}\n", "nl": "Removes the content with the given uid. Returns true if a content with the given uid existed and was removed.", "id": "54228"}
{"code": "public Builder withGradleSync(boolean gradleSync){\n  myGradleSync=gradleSync;\n  return this;\n}\n", "nl": "Specify if a Gradle sync should be performed at the end of the template execution. A false means do NOT perform a Gradle sync since we plan to do this later. Default: true.", "id": "50711"}
{"code": "private static ColumnType selectType(List<ColumnType> typeCandidates){\n  if (typeCandidates.isEmpty()) {\n    return CATEGORY;\n  }\n else {\n    return typeCandidates.get(0);\n  }\n}\n", "nl": "Returns the selected candidate for a column of data, by picking the first value in the given list", "id": "531"}
{"code": "public AbstractEquipment clone(){\n  return (AbstractEquipmentCacheObject)super.clone();\n}\n", "nl": "Clone implementation. All runtime information is frozen in clone, that no longer resides in cache (such as SupervisionStatus).", "id": "33523"}
{"code": "protected Complex createComplex(double realPart,double imaginaryPart){\n  return new Complex(realPart,imaginaryPart);\n}\n", "nl": "Create a complex number given the real and imaginary parts.", "id": "37498"}
{"code": "@Override public int read() throws IOException {\n  int b0=fInputStream.read();\n  if (b0 >= 0x80) {\n    throw new MalformedByteSequenceException(fFormatter,fLocale,XMLMessageFormatter.XML_DOMAIN,\"InvalidASCII\",new Object[]{Integer.toString(b0)});\n  }\n  return b0;\n}\n", "nl": "Read a single character.  This method will block until a character is available, an I/O error occurs, or the end of the stream is reached. <p/> <p> Subclasses that intend to support efficient single-character input should override this method.", "id": "57543"}
{"code": "public String toString(){\n  return \"ConnectionRelativeTime[\" + time + \"]\";\n}\n", "nl": "Returns a string representation of this object.", "id": "22589"}
{"code": "public void writeByte(int position,byte b){\n  if (position < 0 || position >= Page.pageSize) {\n    throw new PageException(\"readByte is out of bounds of page\");\n  }\n  pageData.put(position,b);\n}\n", "nl": "Write a single byte into the file at offset position.", "id": "41601"}
{"code": "public void recordSplashscreenIconType(int type){\n  assert !mCommitted;\n  assert type >= 0 && type < SPLASHSCREEN_ICON_TYPE_MAX;\n  mSplashScreenIconType=type;\n}\n", "nl": "Records the type of icon on the splash screen.", "id": "6116"}
{"code": "public void shareWeiXin(String webUrl,String msgTitle,String msgText){\n  shareToWeiXin(webUrl,msgTitle,msgText);\n}\n", "nl": "Share Wei Xin", "id": "45611"}
{"code": "@VisibleForTesting public DistributedLogClientBuilder routingService(RoutingService routingService){\n  DistributedLogClientBuilder newBuilder=newBuilder(this);\n  newBuilder._routingServiceBuilder=RoutingUtils.buildRoutingService(routingService);\n  newBuilder._enableRegionStats=false;\n  return newBuilder;\n}\n", "nl": "Routing Service to access proxy services.", "id": "39500"}
{"code": "public void flushBase64() throws java.io.IOException {\n  if (position > 0) {\n    if (encode) {\n      out.write(encode3to4(b4,buffer,position,options));\n      position=0;\n    }\n else {\n      throw new java.io.IOException(\"Base64 input not properly padded.\");\n    }\n  }\n}\n", "nl": "Method added by PHIL. [Thanks, PHIL. -Rob] This pads the buffer without closing the stream.", "id": "7300"}
{"code": "public void add(RequestFilter filter){\n  filters.add(filter);\n}\n", "nl": "Register new filter", "id": "28481"}
{"code": "private void updateSymbol(){\n  if (!Controller.getInstance().isPopulating()) {\n    if (parentObj != null) {\n      parentObj.ttfValueUpdated();\n    }\n  }\n}\n", "nl": "Update symbol.", "id": "34295"}
{"code": "public Criteria or(){\n  Criteria criteria=createCriteriaInternal();\n  oredCriteria.add(criteria);\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.hints", "id": "28724"}
{"code": "private void readObjectNoData() throws ObjectStreamException {\n  throw new InvalidObjectException(\"no data found when attempting to \" + \"deserialize MailboxProxy instance\");\n}\n", "nl": "During deserialization of an instance of this class, if it is found that the stream contains no data, this method is automatically invoked. Because it is expected that the stream should always contain data, this implementation of this method simply declares that something must be wrong.", "id": "9834"}
{"code": "public GroupsGetInvitedUsersQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname", "id": "36023"}
{"code": "public Iterator<E> iterator(){\n  return map.keySet().iterator();\n}\n", "nl": "Returns an iterator over the elements in this set.  The elements are returned in no particular order.", "id": "30409"}
{"code": "private TemplateDruidQuery buildTimeGrainCounterQuery(){\n  Set<Aggregation> timedAggs=Collections.emptySet();\n  Set<PostAggregation> timedPostAggs=Collections.singleton(COUNT_INNER);\n  return new TemplateDruidQuery(timedAggs,timedPostAggs,innerGrain);\n}\n", "nl": "Create a query with a counter field and a grain.", "id": "31569"}
{"code": "public WriteModifiers add(WriteModifiers modifiers){\n  return createIfNeeded(super.add(modifiers));\n}\n", "nl": "Creates a new modifiers instance which is a union of the specified modifiers and this instance.", "id": "40367"}
{"code": "public boolean isInstance(){\n  return kind.isInstance();\n}\n", "nl": "Returns true if the call is due to an explicit instance invoke statement.", "id": "52200"}
{"code": "private boolean isActive(Object value){\n  return Integer.valueOf(1).equals(value);\n}\n", "nl": "Checks if the given value is set to \"on\".", "id": "25444"}
{"code": "void assignCoordinateFromPadding(){\n  mCoordinate=mLayoutFromEnd ? mOrientationHelper.getEndAfterPadding() : mOrientationHelper.getStartAfterPadding();\n}\n", "nl": "assigns anchor coordinate from the RecyclerView's padding depending on current layoutFromEnd value", "id": "18170"}
{"code": "public static <T extends RealFieldElement<T>>T distanceSq(final FieldVector3D<T> v1,final FieldVector3D<T> v2){\n  return v1.distanceSq(v2);\n}\n", "nl": "Compute the square of the distance between two vectors. <p>Calling this method is equivalent to calling: <code>v1.subtract(v2).getNormSq()</code> except that no intermediate vector is built</p>", "id": "58451"}
{"code": "public S2LatLng toLatLng(){\n  return new S2LatLng(toPointRaw());\n}\n", "nl": "Return the S2LatLng corresponding to the center of the given cell.", "id": "24233"}
{"code": "public boolean isHidden(final String bySelector,int timeout){\n  return isConditionMet(not(visibilityOfElementLocated(By.cssSelector(bySelector))),timeout);\n}\n", "nl": "Checks if WebElements specified by CSS selector are hidden within specified timeout.", "id": "6525"}
{"code": "public static void writeStringToFile(File file,String data,String encoding) throws IOException {\n  writeStringToFile(file,data,encoding,false);\n}\n", "nl": "Writes a String to a file creating the file if it does not exist. <p/> NOTE: As from v1.3, the parent directories of the file will be created if they do not exist.", "id": "24853"}
{"code": "private static Version readVersion(BitMatrix bitMatrix) throws FormatException {\n  int numRows=bitMatrix.getHeight();\n  int numColumns=bitMatrix.getWidth();\n  return Version.getVersionForDimensions(numRows,numColumns);\n}\n", "nl": "<p>Creates the version object based on the dimension of the original bit matrix from  the datamatrix code.</p> <p>See ISO 16022:2006 Table 7 - ECC 200 symbol attributes</p>", "id": "53491"}
{"code": "public static <T>Iterator<T> toIterator(Collection<T> col){\n  if (col == null)   return null;\n else   return col.iterator();\n}\n", "nl": "Get an iterator from a collection, returning null if collection is null", "id": "35603"}
{"code": "public final Observable<Void> evict(){\n  return Observable.defer(null);\n}\n", "nl": "Evict all the cached data for this provider.", "id": "47337"}
{"code": "public static Object calculateGenericExpression(String expression){\n  final JEP parser=getJep();\n  parser.parseExpression(expression);\n  Object result=parser.getValueAsObject();\n  return result;\n}\n", "nl": "Calculates a regular mathematical expression.", "id": "24820"}
{"code": "private void notifyProcessTags(final Long processId){\n  Process process=processCache.getCopy(processId);\n  for (  Long equipmentId : process.getEquipmentIds()) {\n    notifyEquipmentTags(equipmentId);\n  }\n}\n", "nl": "Notifies all equipments under this process. Will use event in local map.", "id": "34881"}
{"code": "private static final String toXml(Vector2 v,String name){\n  StringBuilder sb=new StringBuilder();\n  sb.append(\"<\").append(name).append(\" x=\\\"\").append(v.x).append(\"\\\" y=\\\"\").append(v.y).append(\"\\\" />\");\n  return sb.toString();\n}\n", "nl": "Returns the xml for the given vector with the given element name.", "id": "34794"}
{"code": "public final boolean isValid(RetryStrategy retryStrategy){\n  return validate(retryStrategy) == null;\n}\n", "nl": "Indicates whether the provided RetryStrategy is valid.", "id": "35505"}
{"code": "public static SM_SYSTEM_MESSAGE STR_UNION_CHANGE_LEADER(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1400580,value0,value1);\n}\n", "nl": "You transferred the league leadership to %0. From now on, %0 is the league leader.", "id": "37229"}
{"code": "public static void closePrivateStore(Player activePlayer){\n  activePlayer.setStore(null);\n  activePlayer.unsetState(CreatureState.PRIVATE_SHOP);\n  PacketSendUtility.broadcastPacket(activePlayer,new SM_EMOTION(activePlayer,EmotionType.CLOSE_PRIVATESHOP,0,0),true);\n}\n", "nl": "This method will destroy the player's store", "id": "45043"}
{"code": "public int size(){\n  return set.size();\n}\n", "nl": "Returns the number of methods that are reachable.", "id": "35972"}
{"code": "public static Map<String,Object> createImage(DispatchContext dctx,Map<String,? extends Object> context){\n  Map<String,Object> result=createImageMethod(dctx,context);\n  return result;\n}\n", "nl": "A service wrapper for the createImageMethod method. Forces permissions to be checked.", "id": "58482"}
{"code": "public GaussianCurveFitter withMaxIterations(int newMaxIter){\n  return new GaussianCurveFitter(initialGuess,newMaxIter);\n}\n", "nl": "Configure the maximum number of iterations.", "id": "37378"}
{"code": "public java.lang.Boolean isEscaped(){\n  return escaped;\n}\n", "nl": "Gets the value of the escaped property.", "id": "13705"}
{"code": "public void rightTrim(int numberOfSample){\n  trim(0,numberOfSample);\n}\n", "nl": "Trim the wave data from ending", "id": "50686"}
{"code": "public int read(byte[] bytes,int offset,int len) throws IOException {\n  if (ins.read(bytes,offset,len) < len)   throw new IOException(\"buffer underflow\");\n  return len;\n}\n", "nl": "read bytes", "id": "3499"}
{"code": "public static void replaceBinaryHttpEntityBody(FullHttpMessage message,byte[] newBinaryContents){\n  message.content().resetWriterIndex();\n  message.content().ensureWritable(newBinaryContents.length,true);\n  message.content().writeBytes(newBinaryContents);\n  message.headers().set(HttpHeaders.Names.CONTENT_LENGTH,newBinaryContents.length);\n}\n", "nl": "Replaces an HTTP entity body with the specified binary contents. TODO: Currently this method only works for FullHttpMessages, since it must modify the Content-Length header; determine if this may be applied to chunked messages as well", "id": "14620"}
{"code": "void finishEndElement(){\n  fInEndElement=false;\n  fElementAugs=null;\n}\n", "nl": "Cleanup at the end of end element.", "id": "9813"}
{"code": "public boolean isSetClientAppkey(){\n  return this.clientAppkey != null;\n}\n", "nl": "Returns true if field clientAppkey is set (has been assigned a value) and false otherwise", "id": "13947"}
{"code": "@Override public RemoteConnection connect() throws RemoteException {\n  return new RemoteConnectionImpl();\n}\n", "nl": "Creates a new RemoteConnectionImpl object and returns it.", "id": "39488"}
{"code": "@Override public Filter createFilter(){\n  return new IsNotEqualToExtended();\n}\n", "nl": "Creates the filter.", "id": "57663"}
{"code": "public void animateX(int durationMillis){\n  if (android.os.Build.VERSION.SDK_INT < 11)   return;\n  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,\"phaseX\",0f,1f);\n  animatorX.setDuration(durationMillis);\n  animatorX.addUpdateListener(mListener);\n  animatorX.start();\n}\n", "nl": "Animates the rendering of the chart on the x-axis with the specified animation time. If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.", "id": "20210"}
{"code": "public void takeHeapDump(CoreDump coreDump,boolean openView){\n  heapDumpProvider.createHeapDump(coreDump,openView);\n}\n", "nl": "Takes heap dump from CoreDump.", "id": "49530"}
{"code": "public Plan createQueryPlan(String qry,Transaction tx){\n  Parser parser=new Parser(qry);\n  QueryData data=parser.queryCommand();\n  Verifier.verifyQueryData(data,tx);\n  return qPlanner.createPlan(data,tx);\n}\n", "nl": "Creates a plan for an SQL select statement, using the supplied planner.", "id": "48826"}
{"code": "public Property build(){\n  return build(null);\n}\n", "nl": "Builds the property", "id": "42385"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_INTERVAL_A_TO_ME(int num0,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200678,num0,skillcaster,skillname);\n}\n", "nl": "You recovered %num0 HP because [%SkillCaster] used [%SkillName] on you.", "id": "4508"}
{"code": "public AccountSetSilenceModeQuery sound(Integer value){\n  return unsafeParam(\"sound\",value);\n}\n", "nl": "Set sound", "id": "17244"}
{"code": "public static String toTree(@NotNull List<NlComponent> roots){\n  return toTree(roots,false);\n}\n", "nl": "Dumps out the component tree, recursively", "id": "26465"}
{"code": "@Override public synchronized void add(Vertex v) throws Exception {\n  if (UniqueVertices.containsKey(v.getLabel()))   return;\n else   super.add(v);\n  UniqueVertices.put(v.getLabel(),v);\n}\n", "nl": "Adds a new vertex to the graph, checking for duplicate labels.", "id": "42863"}
{"code": "public static NestableTransaction.Created create(NestableTransactionManager mgr,long leaseTime) throws LeaseDeniedException, RemoteException {\n  TransactionManager.Created rawTxn=mgr.create(leaseTime);\n  NestableServerTransaction tx=new NestableServerTransaction(mgr,rawTxn.id,null,leaseTime);\n  return new NestableTransaction.Created(tx,rawTxn.lease);\n}\n", "nl": "Create a new top-level transaction, under which nested transactions can be created.", "id": "1889"}
{"code": "public boolean isFull(){\n  return hi() - lo() == 2 * S2.M_PI;\n}\n", "nl": "Return true if the interval contains all points on the unit circle.", "id": "29010"}
{"code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){\n  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);\n}\n", "nl": "Helper method for Overscrolling that encapsulates all of the necessary function. <p/> This should only be used on AdapterView's such as ListView as it just calls through to overScrollBy() with the scrollRange = 0. AdapterView's do not have a scroll range (i.e. getScrollY() doesn't work).", "id": "13294"}
{"code": "public TrustManagerBuilder withCertChainListener(CertChainListener listener){\n  mgr.addCertChainListener(listener);\n  return (this);\n}\n", "nl": "Add a listener to be handed all certificate chains. Use this solely for diagnostic purposes (e.g., to understand what root CA to add to a network security configuration). Do not use this in production code.", "id": "44759"}
{"code": "protected static LazyNode cObject(int index){\n  return new LazyNode(OBJECT,index);\n}\n", "nl": "Convenience method to create a new token with the type set to object and with the starting index set to the given index.", "id": "26378"}
{"code": "public void remove(String name){\n  Integer tt=name2index.get(name);\n  if (tt != null) {\n    name2index.keySet().remove(name);\n    index2name.remove(tt);\n    ntax--;\n    bits.set(tt,false);\n  }\n}\n", "nl": "remove this taxon", "id": "18157"}
{"code": "public boolean simple_edges_bidirectional(){\n  return soot.PhaseOptions.getBoolean(options,\"simple-edges-bidirectional\");\n}\n", "nl": "Simple Edges Bidirectional -- Equality-based analysis between variable nodes. When this option is set to true, all edges connecting variable  (Green) nodes are made bidirectional, as in Steensgaard's  analysis.", "id": "7207"}
{"code": "protected void showModels(Iterable<EpoxyModel<?>> models){\n  showModels(models,true);\n}\n", "nl": "Shows the given models, and notifies that each item changed if the item wasn't already shown.", "id": "45293"}
{"code": "public static void write(File file,CharSequence data,Charset encoding) throws IOException {\n  write(file,data,encoding,false);\n}\n", "nl": "Writes a CharSequence to a file creating the file if it does not exist.", "id": "17505"}
{"code": "public boolean containsColumn(String columnName){\n  for (int i=0; i < columnModels.size(); i++) {\n    ColumnModel columnModel=columnModels.get(i);\n    if (columnName.equalsIgnoreCase(columnModel.getColumnName())) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Judge the table model has such a column or not.", "id": "7842"}
{"code": "protected void onUpdate(ActivitiEvent event){\n}\n", "nl": "Called when an entity update event is received.", "id": "47282"}
{"code": "@Override public Fraction add(Fraction fraction){\n  return addSub(fraction,true);\n}\n", "nl": "Adds the value of this fraction to another, returning the result in reduced form. The algorithm follows Knuth, 4.5.1.", "id": "31183"}
{"code": "@Override public void onBindViewHolder(){\n  if (unbinder == null)   unbinder=ButterKnife.bind(this,itemView);\n}\n", "nl": "Binds all views to the ViewHolder using ButterKnife.", "id": "24067"}
{"code": "@Override public void processingInstruction(String target,String data) throws SAXException {\n  return;\n}\n", "nl": "The SAX <code>processingInstruction</code> method does nothing.", "id": "56872"}
{"code": "public MessagesGetLongPollHistoryQuery pts(Integer value){\n  return unsafeParam(\"pts\",value);\n}\n", "nl": "Set pts", "id": "20975"}
{"code": "public FaveAddGroupQuery addGroup(UserActor actor,int groupId){\n  return new FaveAddGroupQuery(getClient(),actor,groupId);\n}\n", "nl": "Adds a community to user faves.", "id": "51518"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_CHARGE_LEVEL_DOWN(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1400893,value0,value1);\n}\n", "nl": "%0 has been conditioned to level %1, and the item's stats have changed.", "id": "36247"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CHAT_CHANNEL_FLOODING_BLOCKED_1(String value0m){\n  return new SM_SYSTEM_MESSAGE(1300936,value0m);\n}\n", "nl": "Please do not flood chat. Blocked for %0m.", "id": "3238"}
{"code": "private boolean journalRebuildRequired(){\n  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;\n  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();\n}\n", "nl": "We only rebuild the journal when it will halve the size of the journal and eliminate at least 2000 ops.", "id": "13631"}
{"code": "public void resetPotential(){\n  final int rank=Randomizer.nextInt(100) < 4 ? (Randomizer.nextInt(100) < 4 ? -UNIQUE : -EPIC) : -RARE;\n  resetPotentialWithRank(rank,10);\n}\n", "nl": "Resets the current potential. 10% chance on 3rd line if equip currently does not have a 3rd line.", "id": "9301"}
{"code": "public char next(char c) throws JSONException {\n  char n=next();\n  if (n != c) {\n    throw syntaxError(\"Expected '\" + c + \"' and instead saw '\"+ n+ \"'\");\n  }\n  return n;\n}\n", "nl": "Consume the next character, and check that it matches a specified character.", "id": "39146"}
{"code": "public NewsfeedSearchQueryWithExtended searchExtended(UserActor actor){\n  return new NewsfeedSearchQueryWithExtended(getClient(),actor);\n}\n", "nl": "Returns search results by statuses.", "id": "19224"}
{"code": "private boolean allowedAsHttpRequestResponse(WellKnownType wkt){\n  return wkt.allowedAsHttpRequestResponse();\n}\n", "nl": "Returns whether the WKT can appear as request/response.", "id": "30001"}
{"code": "public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){\n  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);\n}\n", "nl": "execute shell commands", "id": "53435"}
{"code": "public ChangeSet putInMap(String path,Serializable key,Serializable value){\n  return add(new PutInMapSpaceEntryMutator(path,key,value));\n}\n", "nl": "Puts the given key and value in a map property.", "id": "43393"}
{"code": "@Override public ThetaSketchSetOperationPostAggregation withFields(List<PostAggregation> fields){\n  return new ThetaSketchSetOperationPostAggregation(getName(),getFunc(),fields,getSize());\n}\n", "nl": "Get a new instance of this PostAggregation with the given fields.", "id": "8140"}
{"code": "private boolean trafficExpired(AirMapTraffic traffic){\n  int timeInterval=30;\n  return new Date(traffic.getIncomingTime().getTime() + timeInterval * 1000).before(new Date());\n}\n", "nl": "Checks if the traffic is older than the validity interval", "id": "51350"}
{"code": "public AudioSearchQuery searchOwn(Boolean value){\n  return unsafeParam(\"search_own\",value);\n}\n", "nl": "Set search own", "id": "35225"}
{"code": "public ImageSize scaleDown(int sampleSize){\n  return new ImageSize(width / sampleSize,height / sampleSize);\n}\n", "nl": "Scales down dimensions in <b>sampleSize</b> times. Returns new object.", "id": "6541"}
{"code": "private void readObjectNoData() throws ObjectStreamException {\n  throw new InvalidObjectException(\"no data\");\n}\n", "nl": "Throws InvalidObjectException, since data for this class is required.", "id": "25092"}
{"code": "private void deleteLegionFromDB(Legion legion){\n  this.allCachedLegions.remove(legion);\n  DAOManager.getDAO(LegionDAO.class).deleteLegion(legion.getLegionId());\n}\n", "nl": "Completely removes legion from database and cache", "id": "30769"}
{"code": "@Override public void close() throws IOException {\n  if (writer == null) {\n    encoding=defaultEncoding;\n    writer=new OutputStreamWriter(out,encoding);\n    writer.write(xmlPrologWriter.toString());\n  }\n  writer.close();\n}\n", "nl": "Close the underlying writer.", "id": "21841"}
{"code": "public final TestSubscriber<T> configureValuesStorage(boolean enabled){\n  this.valuesStorage=enabled;\n  return this;\n}\n", "nl": "Enable or disabled the values storage. It is enabled by default, and can be disable in order to be able to perform performance benchmarks or tests with a huge amount values.", "id": "1462"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_StatDown_A_TO_SELF(String skilltarget,String value0,String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200876,skilltarget,value0,skillcaster,skillname);\n}\n", "nl": "[%SkillTarget] is in the weaken %0 state because [%SkillCaster] used [%SkillName].", "id": "33889"}
{"code": "public static int mulAndCheck(int x,int y) throws MathRuntimeException {\n  long m=((long)x) * ((long)y);\n  if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {\n    throw new MathRuntimeException(LocalizedCoreFormats.ARITHMETIC_EXCEPTION);\n  }\n  return (int)m;\n}\n", "nl": "Multiply two integers, checking for overflow.", "id": "40075"}
{"code": "public boolean isInteractive(int row){\n  return getBoolean(row,VisualItem.INTERACTIVE);\n}\n", "nl": "Indicates if this item is interactive, meaning it can potentially respond to mouse and keyboard input events.", "id": "19836"}
{"code": "public void sendEffectIconsTo(Player player){\n  List<Effect> effects=getAbnormalEffects();\n  PacketSendUtility.sendPacket(player,new SM_ABNORMAL_EFFECT(getOwner(),abnormals,effects));\n}\n", "nl": "Used when player see new player", "id": "31867"}
{"code": "public boolean insert_redundant_casts(){\n  return soot.PhaseOptions.getBoolean(options,\"insert-redundant-casts\");\n}\n", "nl": "Insert Redundant Casts -- . Insert extra casts for the Java bytecode verifier. The  verifier may complain if the inlined method uses this and the  declared type of the receiver of the call being inlined is  different from the type implementing the target method being  inlined. Say, for example, that Singer is an interface declaring  the sing() method and that the call graph shows that all  receiver objects at a particular call site, singer.sing() (with  singer declared as a Singer) are in fact Bird objects (Bird  being a class that implements Singer). The implementation of  Bird.sing() may perform operations on this which are only  allowed on Birds, rather than Singers. The Insert Redundant  Casts option ensures that this cannot lead to verification  errors, by inserting a cast of bird to the Bird type before  inlining the body of Bird.sing().", "id": "48381"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_GET_ITEM_PARTYNOTICE(String value0,DescriptionId descriptionId){\n  return new SM_SYSTEM_MESSAGE(1390002,value0,descriptionId);\n}\n", "nl": "%0 has acquired %1.", "id": "23961"}
{"code": "public static String randomID(){\n  return System.currentTimeMillis() + \"\";\n}\n", "nl": "Generate a random ID. It depends on the application nature and purpose that different strategies can be used. E.g. single threaded --> current milliseconds since epoch UUID and hash can also be feasible in certain cases", "id": "24653"}
{"code": "public void init$Children(){\n  children=new ASTNode[2];\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "2018"}
{"code": "public boolean isSymbol(){\n  return myPath == null && mySnippets == null && myObject != null && myObject.getClass() == String.class;\n}\n", "nl": "Determine if this is a symbol object. Symbol objects are used so that entity field names and map keys can share the same tree structure.", "id": "22127"}
{"code": "private void populateDefaults(){\n  MqttConfigurationUtils.populateMessageLogDefaults(configuration.getConnection().getMessageLog());\n  populateDaemonDefaults(configuration.getConnection().getBackgroundScript());\n  generateClientIdIfMissing(configuration.getConnection());\n}\n", "nl": "Populates the connection configuration with default values.", "id": "30884"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.setCanceled(false);\n  viewer.setVisible(false);\n}\n", "nl": "parses the given command and executes it", "id": "52799"}
{"code": "public boolean hasNext(){\n  return this.fileCounter > 0;\n}\n", "nl": "This method will be used to check whether any more element is present or not", "id": "48155"}
{"code": "public static void initOrBuild(Project project){\n  if (hadInitFreeline(project)) {\n    build(project);\n  }\n else {\n    initFree(project);\n  }\n}\n", "nl": "auto select init or run freeline project", "id": "36327"}
{"code": "public static boolean isPartialUpdate(int mod){\n  return Modifiers.contains(mod,UpdateModifiers.PARTIAL_UPDATE);\n}\n", "nl": "Return <tt>true</tt> if the integer argument includes the <tt>PARTIAL_UPDATE</tt> modifier, <tt>false</tt> otherwise.", "id": "50456"}
{"code": "public void initGui(){\n}\n", "nl": "Adds the buttons (and other controls) to the screen in question.", "id": "26204"}
{"code": "public Criteria or(){\n  Criteria criteria=createCriteriaInternal();\n  oredCriteria.add(criteria);\n  return criteria;\n}\n", "nl": "This method was generated by MyBatis Generator. This method corresponds to the database table public.submissions", "id": "52935"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_INTERVAL_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200990,skillcaster,num0,skilltarget,skillname);\n}\n", "nl": "[%SkillCaster] inflicted %num0 damage on [%SkillTarget] by using [%SkillName].", "id": "8532"}
{"code": "@VisibleForTesting public static void ignoreBrowserProviderSystemPackageCheckForTests(boolean ignore){\n  sIgnoreBrowserProviderSystemPackageCheck=ignore;\n}\n", "nl": "For security, we only allow system package to be a browser customizations provider. However, requiring root and installing system apk makes testing harder, so we decided to have this hack for testing. This must not be called other than tests.", "id": "4584"}
{"code": "public ControlScaleOptions build(){\n  ControlScaleOptions options=new ControlScaleOptions();\n  options.position=this.position;\n  options.maxWidth=maxWidth;\n  options.metric=metric;\n  options.imperial=imperial;\n  options.updateWhenIdle=updateWhenIdle;\n  return options;\n}\n", "nl": "Builds the ControlScaleOptions new instance", "id": "343"}
{"code": "@TargetApi(8) public Bundler putCharSequenceArray(String key,CharSequence[] value){\n  bundle.putCharSequenceArray(key,value);\n  return this;\n}\n", "nl": "Inserts a CharSequence array value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.", "id": "28920"}
{"code": "public static IOFileFilter asFileFilter(FileFilter filter){\n  return new DelegateFileFilter(filter);\n}\n", "nl": "Returns an <code>IOFileFilter</code> that wraps the <code>FileFilter</code> instance.", "id": "7982"}
{"code": "public void addOption(String key,String title){\n  keyOrderList.add(key);\n  optionMap.put(key,title);\n}\n", "nl": "Adds the option.", "id": "21340"}
{"code": "public Builder cacheOnDisk(boolean cacheOnDisk){\n  this.cacheOnDisk=cacheOnDisk;\n  return this;\n}\n", "nl": "Sets whether loaded image will be cached on disk", "id": "47723"}
{"code": "public Z Eq(double a,double b){\n  re=a;\n  im=b;\n  return this;\n}\n", "nl": "Resets the real and imaginary parts of a Z.", "id": "48635"}
{"code": "public static SM_SYSTEM_MESSAGE STR_FREE_EXPERIENCE_CHARACTER_CANT_USE_GUILD_WAREHOUSE(String value0){\n  return new SM_SYSTEM_MESSAGE(1400403,value0);\n}\n", "nl": "Characters under level %0 who are using a free trial cannot use the Legion warehouse.", "id": "23463"}
{"code": "public static SM_SYSTEM_MESSAGE STR_ABYSS_CHANGE_RANK(String value0){\n  return new SM_SYSTEM_MESSAGE(1390232,value0);\n}\n", "nl": "Your Abyss Rank has changed to %0.", "id": "520"}
{"code": "private void finish(){\n  mmLastY=0;\n  mRunning=false;\n  removeCallbacks(this);\n  if (!mAbort) {\n    autoScrollFinished();\n  }\n}\n", "nl": "remove the post callbacks and reset default values", "id": "17069"}
{"code": "public boolean isRole(Role r){\n  try {\n    return Helper.exists(W.create(\"uid\",this.getId()).and(\"rid\",r.getId()),UserRole.class);\n  }\n catch (  Exception e) {\n    log.error(e.getMessage(),e);\n  }\n  return false;\n}\n", "nl": "Checks if is role.", "id": "4367"}
{"code": "public boolean decrypt(byte[] data,int offset,int length){\n  cipher.decipher(data,offset,length);\n  return verifyChecksum(data,offset,length);\n}\n", "nl": "Decrypt given data", "id": "26997"}
{"code": "public void delete() throws JMSException {\n}\n", "nl": "We clear this temp external entry from space.", "id": "24037"}
{"code": "public void putString(String key,String value){\n  checkForNullKey(key);\n  checkForNullValue(value);\n  preferences.edit().putString(key,value).apply();\n}\n", "nl": "Put String value into SharedPreferences with 'key' and save", "id": "52464"}
{"code": "public WallGetCommentsQueryWithExtended count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of comments to return (maximum 100).", "id": "32727"}
{"code": "public static Object deepClone(Object obj){\n  try {\n    byte[] bArray=objectToByteBuffer(obj);\n    return objectFromByteBuffer(bArray);\n  }\n catch (  Exception ex) {\n    throw new IllegalArgumentException(\"Failed to perform deep clone on [\" + obj + \"] object. Check that the all object context are implements java.io.Serializable.\",ex);\n  }\n}\n", "nl": "A deep copy makes a distinct copy of each of the object's fields, recursing through the entire graph of other objects referenced by the object being copied. Deep clone by serialize and deserialize the object and return the deserialized version. A deep copy/clone, assuming everything in the tree is serializable. NOTE: This method is very expensive!, don't use this method if you need performance.", "id": "38571"}
{"code": "public Builder diskCacheExtraOptions(int maxImageWidthForDiskCache,int maxImageHeightForDiskCache,BitmapProcessor processorForDiskCache){\n  this.maxImageWidthForDiskCache=maxImageWidthForDiskCache;\n  this.maxImageHeightForDiskCache=maxImageHeightForDiskCache;\n  this.processorForDiskCache=processorForDiskCache;\n  return this;\n}\n", "nl": "Sets options for resizing/compressing of downloaded images before saving to disk cache.<br /> <b>NOTE: Use this option only when you have appropriate needs. It can make ImageLoader slower.</b>", "id": "10733"}
{"code": "public static String generateActivationKey(){\n  return RandomStringUtils.randomNumeric(DEF_COUNT);\n}\n", "nl": "Generates an activation key.", "id": "30857"}
{"code": "public boolean isGuaranteedDelivery(){\n  return this.guaranteedDelivery;\n}\n", "nl": "Returns true if guaranteed message delivery is enabled in this tag's configuration.", "id": "24079"}
{"code": "@Override protected void successfulAuthentication(HttpServletRequest request,HttpServletResponse response,FilterChain chain,Authentication authResult) throws IOException, ServletException {\n  super.successfulAuthentication(request,response,chain,authResult);\n  chain.doFilter(request,response);\n}\n", "nl": "Pass authentication", "id": "47824"}
{"code": "public void onPut(){\n  if (this.isAjax()) {\n    JSON jo=new JSON();\n    jo.put(X.STATE,HttpServletResponse.SC_FORBIDDEN);\n    response(jo);\n  }\n else {\n    this.print(\"not support\");\n  }\n}\n", "nl": "On put requested from HTTP PUT method.", "id": "12344"}
{"code": "public boolean constCaching(){\n  return constCaching;\n}\n", "nl": "Returns the const caching mode.", "id": "23318"}
{"code": "public void removeNodeProperty(String nodePath,String propertyName) throws RepositoryException {\n  LOG.debug(\"Removing property '{}' from node '{}'\",propertyName,nodePath);\n  session.refresh(true);\n  session.getNode(nodePath).getProperty(propertyName).setValue((String)null);\n  session.save();\n}\n", "nl": "Removes node property.", "id": "5992"}
{"code": "private void checkNoErrors(){\n  guiTest.robot().waitForIdle();\n  for (  Notification notification : EventLog.getLogModel(guiTest.ideFrame().getProject()).getNotifications()) {\n    assertThat(notification.getType()).isNotEqualTo(NotificationType.ERROR);\n  }\n}\n", "nl": "Checks that no errors are present in the event log", "id": "11498"}
{"code": "@Override public String toString(){\n  return toString(false);\n}\n", "nl": "Returns the current stream as a hexadecimal string of values. Shows the entire stream, and the remaining data at the current position.", "id": "10672"}
{"code": "public boolean removeTuple(Tuple t){\n  if (t instanceof Node) {\n    return removeNode((Node)t);\n  }\n else   if (t instanceof Edge) {\n    return removeEdge((Edge)t);\n  }\n else {\n    throw new IllegalArgumentException(\"Input tuple must be part of this graph\");\n  }\n}\n", "nl": "If the given tuple is a Node or Edge in this graph, remove it.", "id": "29945"}
{"code": "public String post() throws HttpClientException {\n  return sendHttpRequest(\"post\");\n}\n", "nl": "Invoke HTTP request POST.", "id": "46326"}
{"code": "public static <T>Flowable<T> whileDo(Publisher<? extends T> source,BooleanSupplier preCondition){\n  ObjectHelper.requireNonNull(source,\"source is null\");\n  ObjectHelper.requireNonNull(preCondition,\"preCondition is null\");\n  return RxJavaPlugins.onAssembly(new FlowableWhileDoWhile<T>(source,preCondition,preCondition));\n}\n", "nl": "Return an Flowable that re-emits the emissions from the source Flowable as long as the condition is true before the first or subsequent subscribe() calls. <p> <img width=\"640\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/whileDo.png\" alt=\"\">", "id": "38133"}
{"code": "private void explain(String systemId){\n  if (!suppressExplanation) {\n    System.out.println(\"Parser probably encountered bad URI in \" + systemId);\n    System.out.println(\"For example, replace '/some/uri' with 'file:/some/uri'.\");\n  }\n}\n", "nl": "Provide one possible explanation for an InternalError.", "id": "44177"}
{"code": "private void mergeXmlFiles(File cachedXml,File cleanMainXml) throws Error {\n  XmlMerger merger=new XmlMerger(cleanMainXml,cachedXml);\n  try {\n    merger.process();\n  }\n catch (  Exception e) {\n    log.error(\"Error while merging xml files\",e);\n    throw new Error(\"Error while merging xml files\",e);\n  }\n}\n", "nl": "Merges xml files(if are newer than cache file) and puts output to cache file.", "id": "25892"}
{"code": "public Builder expression(final String expression){\n  this.expression=expression;\n  return this;\n}\n", "nl": "Sets the expression", "id": "24578"}
{"code": "@Override public ASContentModel createASContentModel(int minOccurs,int maxOccurs,short operator) throws DOMASException {\n  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,\"NOT_SUPPORTED_ERR\",null);\n  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);\n}\n", "nl": "Creates an object which describes part of an <code>ASElementDeclaration</code>'s content model.", "id": "13604"}
{"code": "static void commitElement(ConstraintModel model,@NotNull ConstraintWidget widget){\n  AttributesTransaction transaction=updateElement(model,widget);\n  if (transaction != null) {\n    transaction.commit();\n  }\n}\n", "nl": "Utility function to commit to the NlModel the current state of the given widget", "id": "1355"}
{"code": "public void generateEvent(Long repositoryId){\n  processor.onNext(repositoryId);\n}\n", "nl": "Generates event that the repository statistics is outdated and needs re-computation.", "id": "34364"}
{"code": "public static void disableTrafficAlerts(){\n  getAirMapTrafficService().disconnect();\n  getAirMapTrafficService().removeAllListeners();\n}\n", "nl": "Disconnects from Traffic Alerts", "id": "22789"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Paralyze_A_TO_ME(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200587,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] has diseased you by using [%SkillName].", "id": "51415"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_NOT_ENOUGH_TRADE_MONEY(String value0){\n  return new SM_SYSTEM_MESSAGE(1400557,value0);\n}\n", "nl": "You do not have enough %0.", "id": "36887"}
{"code": "public static ToolbarTapTarget forToolbarMenuItem(Toolbar toolbar,@IdRes int menuItemId,CharSequence title){\n  return forToolbarMenuItem(toolbar,menuItemId,title,null);\n}\n", "nl": "Return a tap target for the menu item from the given toolbar", "id": "46108"}
{"code": "private String buildKey(String accountName,String remotePath){\n  return accountName + remotePath;\n}\n", "nl": "Builds a key to index files", "id": "42931"}
{"code": "public void skip(int n) throws IOException {\n  dis.skip(n);\n}\n", "nl": "Skip a set amount of  bytes.", "id": "6695"}
{"code": "public boolean isSingleAuthenticator(){\n  Debug.logInfo(this.getClass().getName() + \" Authenticator isSingleAuthenticator()\",module);\n  return false;\n}\n", "nl": "Is this expected to be the only authenticator, if so errors will be thrown when users cannot be found", "id": "23637"}
{"code": "public boolean requiresReboot(){\n  return this.status != null && this.status.equals(ConfigConstants.Status.RESTART);\n}\n", "nl": "Returns true if the status of the report is RESTART.", "id": "17338"}
{"code": "public void insert(int offset,short[] values){\n  insert(offset,values,0,values.length);\n}\n", "nl": "Inserts the array of <tt>values</tt> into the list at <tt>offset</tt>.  All values including and to the right of <tt>offset</tt> are shifted to the right.", "id": "18764"}
{"code": "@Override protected void onStopLoading(){\n  cancelLoad();\n}\n", "nl": "Handles a request to stop the Loader.", "id": "25248"}
{"code": "public boolean isAvailable(){\n  return available;\n}\n", "nl": "Gets the value of the available property.", "id": "38825"}
{"code": "public ViewBinder addLinks(int viewId,int mask){\n  TextView view=retrieveView(viewId);\n  Linkify.addLinks(view,mask);\n  return this;\n}\n", "nl": "Add links into a TextView.", "id": "10360"}
{"code": "public double secondsSinceLast(){\n  return (timeSinceLast()) / 1000.0;\n}\n", "nl": "Returns the number of seconds since the last time timerString was called", "id": "41634"}
{"code": "public static String join(Iterable<String> paths){\n  return PATH_JOINER.join(paths);\n}\n", "nl": "Joins a set of segment into a string, separating each segments with a host-specific path separator.", "id": "16507"}
{"code": "@Override public void onUserCancel(){\n  if (checkCB != null) {\n    checkCB.onUserCancel();\n  }\n  Recycler.release(this);\n}\n", "nl": "will be never invoke", "id": "57377"}
{"code": "public static DiscCacheAware createReserveDiscCache(File cacheDir){\n  File individualDir=new File(cacheDir,\"uil-images\");\n  if (individualDir.exists() || individualDir.mkdir()) {\n    cacheDir=individualDir;\n  }\n  return new TotalSizeLimitedDiscCache(cacheDir,2 * 1024 * 1024);\n}\n", "nl": "Creates reserve disc cache which will be used if primary disc cache becomes unavailable", "id": "14962"}
{"code": "protected final boolean isClosed(){\n  return m_closed;\n}\n", "nl": "Check if the session is closed", "id": "54786"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?", "id": "49339"}
{"code": "public static int[] convertIntegers(List<Integer> integers){\n  int[] ret=new int[integers.size()];\n  copyIntegers(integers,ret);\n  return ret;\n}\n", "nl": "Converts the provided Integer List to an int array.", "id": "12631"}
{"code": "public void resetAndInterrupt(){\n  sync.reset();\n  for (int i=0; i < 3; i++)   for (  Thread t : sync.getQueuedThreads())   t.interrupt();\n  sync.reset();\n}\n", "nl": "Resets the counter to zero. But waiting threads won't be released somehow. So this interrupts the threads so that they escape from their waiting state.", "id": "52137"}
{"code": "public boolean isConnected(){\nsynchronized (lock) {\n    return connected;\n  }\n}\n", "nl": "This method tests if this client is connected to a remote FTP server.", "id": "43712"}
{"code": "public static int supplemental(char h,char l){\n  return (h - 0xD800) * 0x400 + (l - 0xDC00) + 0x10000;\n}\n", "nl": "Returns true the supplemental character corresponding to the given surrogates.", "id": "37884"}
{"code": "protected final void registerDataSource(DataSource added){\n  registerDataSources(Collections.singleton(added));\n}\n", "nl": "Registers added DataSource into this provider.", "id": "8951"}
{"code": "public void switchBack(){\n  if (localDeque.size() > 1) {\n    doSwitch(localDeque.poll(),localDeque.peek());\n  }\n}\n", "nl": "<p> Takes the top frame off the stack and switches to the previous frame. </p> <p> Currently Bobcat doesn't check that there is any frame to switch back to or that you have manually switched before this method was called. Double check your manual switching to avoid weird side effects. </p>", "id": "13361"}
{"code": "private void updateExhaustionWithTime(EntityPlayer player){\n  ++this.exhaustionTimer;\n  if (this.exhaustionTimer >= EXHAUSTION_WITH_TIME_PERIOD) {\n    if (!player.capabilities.disableDamage) {\n      this.addExhaustion(EXHAUSTION_WITH_TIME_AMOUNT);\n    }\n    this.exhaustionTimer=0;\n  }\n}\n", "nl": "Passing time also exhausts the player.", "id": "14333"}
{"code": "public Matrix zoom(float scaleX,float scaleY){\n  Matrix save=new Matrix();\n  zoom(scaleX,scaleY,save);\n  return save;\n}\n", "nl": "Post-scales by the specified scale factors.", "id": "22507"}
{"code": "public List<ValidationError> validate(@Nullable AndroidFacet facet){\n  return commonState.validate(facet);\n}\n", "nl": "We collect errors rather than throwing to avoid missing fatal errors by exiting early for a warning.", "id": "26111"}
{"code": "@Override public int hashCode(){\n  int result=key == null ? 0 : key.hashCode();\n  final int h=value == null ? 0 : value.hashCode();\n  result=37 * result + h ^ (h >>> 16);\n  return result;\n}\n", "nl": "Compute a hash code.", "id": "26292"}
{"code": "public void open(){\n  open=true;\n}\n", "nl": "Call this to start accepting events", "id": "47590"}
{"code": "public String toString(){\n  try {\n    return this.toString(0);\n  }\n catch (  Exception e) {\n    return null;\n  }\n}\n", "nl": "Make a JSON text of this JSONArray. For compactness, no unnecessary whitespace is added. If it is not possible to produce a syntactically correct JSON text then null will be returned instead. This could occur if the array contains an invalid number. <p> Warning: This method assumes that the data structure is acyclical.", "id": "23461"}
{"code": "public void invalidateWheel(boolean clearCaches){\n  if (clearCaches) {\n    recycle.clearAll();\n    if (itemsLayout != null) {\n      itemsLayout.removeAllViews();\n    }\n    scrollingOffset=0;\n  }\n else   if (itemsLayout != null) {\n    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());\n  }\n  invalidate();\n}\n", "nl": "Invalidates wheel", "id": "36036"}
{"code": "@Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){\n  FieldConfigMarker copy=null;\n  if (fieldConfigBase != null) {\n    copy=new FieldConfigMarker(fieldConfigBase.getCommonData(),this.fillFieldConfig,this.strokeFieldConfig,this.symbolSelectionField);\n  }\n  return copy;\n}\n", "nl": "Creates a copy of the field.", "id": "3042"}
{"code": "public void callEvent(final Event event) throws EventException {\n  if (event instanceof Cancellable) {\n    if (((Cancellable)event).isCancelled() && isIgnoringCancelled()) {\n      return;\n    }\n  }\n  executor.execute(listener,event);\n}\n", "nl": "Calls the event executor", "id": "1060"}
{"code": "public boolean isInvisible(){\n  return invisible;\n}\n", "nl": "return the visibility", "id": "23333"}
{"code": "public void init$Children(){\n  children=new ASTNode[3];\n  setChild(new List(),1);\n  setChild(new List(),2);\n}\n", "nl": "Initializes the child array to the correct size. Initializes List and Opt nta children.", "id": "10483"}
{"code": "public static Object evaluate(Map<String,? extends Object> context,String expression){\n  return evaluate(context,expression,Object.class);\n}\n", "nl": "Evaluates a Unified Expression Language expression and returns the result.", "id": "12638"}
{"code": "public void show(boolean animate){\n  show(animate,fadeIn);\n}\n", "nl": "Make the badge visible in the UI.", "id": "35400"}
{"code": "public String provideNetworkType(){\n  return \"unknown\";\n}\n", "nl": "RetrofitHelper type", "id": "1303"}
{"code": "public FriendsGetRequestsQueryWithExtended out(Boolean value){\n  return unsafeParam(\"out\",value);\n}\n", "nl": "true - to return outgoing requests false - to return incoming requests (default)", "id": "23225"}
{"code": "public HectorCassandraClientConfigurer clusterName(String clusterName){\n  this.clusterName=clusterName;\n  return this;\n}\n", "nl": "(Optional) Sets the cluster name used internally by the hector library. Use this if you plan to connect to more than one cassandra cluster in the same JVM.", "id": "22985"}
{"code": "public static String makeWebServiceCall(String url,int requestmethod){\n  return makeWebServiceCall(url,requestmethod,null,false);\n}\n", "nl": "Making web service call", "id": "16312"}
{"code": "public static final Edge locateEdgeInGraph(UniqueVertexGraph gGraph,String sHead,String sTail){\n  VertexImpl vHead=new VertexImpl();\n  vHead.setLabel(sHead);\n  VertexImpl vTail=new VertexImpl();\n  vTail.setLabel(sTail);\n  return locateEdgeInGraph(gGraph,vHead,vTail);\n}\n", "nl": "Looks up a given (undirected) edge in a selected graph.  The edge is described based on the label of its vertices.", "id": "22870"}
{"code": "public void release(int... keys){\n  for (  int key : keys) {\n    release(key);\n  }\n}\n", "nl": "Release a series of key", "id": "22242"}
{"code": "public static List<String> readLines(File file,String encoding) throws IOException {\n  return readLines(file,Charsets.toCharset(encoding));\n}\n", "nl": "Reads the contents of a file line by line to a List of Strings. The file is always closed.", "id": "43003"}
{"code": "public Topic createTopic(String topicName) throws JMSException {\n  throw new IllegalStateException(\"Forbidden call on a QueueSession.\");\n}\n", "nl": "API method.", "id": "54702"}
{"code": "public void destroy(){\n  if (mDomThread != null && mDomThread.isWXThreadAlive()) {\n    mDomThread.quit();\n  }\n  if (mDomRegistries != null) {\n    mDomRegistries.clear();\n  }\n  mDomHandler=null;\n  mDomThread=null;\n}\n", "nl": "Destroy current instance", "id": "48947"}
{"code": "public GroupsEditQuery title(String value){\n  return unsafeParam(\"title\",value);\n}\n", "nl": "Community name", "id": "40080"}
{"code": "private DimensionRow makeDimensionRow(String value){\n  LinkedHashMap<DimensionField,String> map=new LinkedHashMap<>();\n  for (  DimensionField dimensionField : dimension.getDimensionFields()) {\n    map.put(dimensionField,value);\n  }\n  return new DimensionRow(dimension.getKey(),map);\n}\n", "nl": "Make a DimensionRow by setting all of the field values to the given value.", "id": "38425"}
{"code": "public int createDeferredComment(String data){\n  int nodeIndex=createNode(Node.COMMENT_NODE);\n  int chunk=nodeIndex >> CHUNK_SHIFT;\n  int index=nodeIndex & CHUNK_MASK;\n  setChunkValue(fNodeValue,data,chunk,index);\n  return nodeIndex;\n}\n", "nl": "Creates a comment node in the table.", "id": "40383"}
{"code": "public void press(int... keys){\n  for (  int key : keys) {\n    press(key);\n  }\n}\n", "nl": "Press a series of key. The key is held down after the method finishes.", "id": "27499"}
{"code": "public FieldSelector add(Field field){\n  return new FieldSelector(ImmutableList.<Field>builder().addAll(fields).add(field).build());\n}\n", "nl": "Extend the selector by the field.", "id": "12718"}
{"code": "@Override public void remove(String... identifiers){\n  whitelist.removeAll(Arrays.asList(identifiers));\n}\n", "nl": "Removes identifiers from the serialization strategy.", "id": "3631"}
{"code": "public void removeFromTemplateContext(String name){\n  if (templateContext != null)   templateContext.remove(name);\n}\n", "nl": "Removes an object from the FTL survey template context", "id": "21303"}
{"code": "public void eatDelim(char delimiter){\n  if (!matchDelim(delimiter))   throw new BadSyntaxException();\n  nextToken();\n}\n", "nl": "Throws an exception if the current token is not the specified delimiter. Otherwise, moves to the next token.", "id": "37000"}
{"code": "protected void markTabStateInitialized(){\n  mTabStateInitialized=true;\n  for (  TabModelSelectorObserver listener : mObservers)   listener.onTabStateInitialized();\n}\n", "nl": "Marks the task state being initialized and notifies observers.", "id": "33026"}
{"code": "public void add(GenomicCoords gc){\n  if (this.history.size() == 0 || !this.history.get(this.history.size() - 1).equalCoords(gc)) {\n    this.history.add((GenomicCoords)gc.clone());\n  }\n  this.positionTracker=this.history.size() - 1;\n}\n", "nl": "Add GenomicCoords obj to history provided this item is not equal in coordinates to  to the last one in history.  The position tracker is reset to the last when a new position is added", "id": "16684"}
{"code": "private static int toEven(float value){\n  int i=Math.round(value);\n  return (i % 2 == 1) ? i - 1 : i;\n}\n", "nl": "Casts the value to an even integer.", "id": "27834"}
{"code": "public void cancelCleanup(){\n  if (mCleanupTask != null)   mCleanupTask.cancel(true);\n}\n", "nl": "Cancels the cleanup task, if one exists.", "id": "3150"}
{"code": "public void ping() throws RemoteException {\n  _remoteSpaceProxy.ping();\n}\n", "nl": "Checks whether the space is alive and accessible.", "id": "22602"}
{"code": "public int lastIndexOf(short value){\n  return lastIndexOf(_pos,value);\n}\n", "nl": "Searches the list back to front for the last index of <tt>value</tt>.", "id": "49595"}
{"code": "public void complainIfNotSupported(final String name) throws MathIllegalArgumentException {\n  if (!isSupported(name)) {\n    throw new MathIllegalArgumentException(LocalizedODEFormats.UNKNOWN_PARAMETER,name);\n  }\n}\n", "nl": "Check if a parameter is supported and throw an IllegalArgumentException if not.", "id": "305"}
{"code": "private void fillDeclaredPrefixes(EndElement event){\n  fillDeclaredPrefixes(event.getNamespaces());\n}\n", "nl": "Fills in the list of declared prefixes.", "id": "33805"}
{"code": "public static String loadFileSetToString(Set<String> ssFiles){\n  StringBuffer sbRes=new StringBuffer();\n  for (  String sCurFile : ssFiles) {\n    sbRes.append(loadFileToString(sCurFile)).append((char)0);\n  }\n  return sbRes.toString();\n}\n", "nl": "Loads the contents of a set of files into a string, by calling repeatedly <code>loadFileToString</code>. Each file is separated from another by a  zero character (char(0)).", "id": "28423"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_A_TO_SELF(String skillcaster,String skillname){\n  return new SM_SYSTEM_MESSAGE(1200830,skillcaster,skillname);\n}\n", "nl": "[%SkillCaster] is in the convert damage healing state because he used [%SkillName].", "id": "26721"}
{"code": "public void clearPaymentMethodsById(List<String> paymentMethodIdsToRemove){\n  if (UtilValidate.isEmpty(paymentMethodIdsToRemove))   return;\n  for (Iterator<CartPaymentInfo> iter=paymentInfo.iterator(); iter.hasNext(); ) {\n    CartPaymentInfo info=iter.next();\n    if (paymentMethodIdsToRemove.contains(info.paymentMethodId)) {\n      iter.remove();\n    }\n  }\n}\n", "nl": "remove all the paymentMethods based on the paymentMethodIds", "id": "12690"}
